{
  "address": "0xeDb00c0EA5932B6fC719652Dc19e356b04560Eb7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Batch.Execution[]",
          "name": "executions",
          "type": "tuple[]"
        }
      ],
      "name": "atomicBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct Batch.ExecutionWithETH[]",
          "name": "executions",
          "type": "tuple[]"
        }
      ],
      "name": "atomicBatchWithETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "executor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Batch.Execution[]",
          "name": "executions",
          "type": "tuple[]"
        }
      ],
      "name": "nonAtomicBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct Batch.ExecutionWithETH[]",
          "name": "executions",
          "type": "tuple[]"
        }
      ],
      "name": "nonAtomicBatchWithETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes[]",
          "name": "callDatas",
          "type": "bytes[]"
        }
      ],
      "name": "singleTargetAtomicBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct Batch.SingleTargetExecutionWithETH[]",
          "name": "executions",
          "type": "tuple[]"
        }
      ],
      "name": "singleTargetAtomicBatchWithETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes[]",
          "name": "callDatas",
          "type": "bytes[]"
        }
      ],
      "name": "singleTargetNonAtomicBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct Batch.SingleTargetExecutionWithETH[]",
          "name": "executions",
          "type": "tuple[]"
        }
      ],
      "name": "singleTargetNonAtomicBatchWithETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xe7729899a0da3ff2843b35933f14471810728e6dacf2a6b210011d41cc50a78f",
  "receipt": {
    "to": null,
    "from": "0xA796AE911621E00809E0E7C8f0AD6BF118E5139e",
    "contractAddress": "0xeDb00c0EA5932B6fC719652Dc19e356b04560Eb7",
    "transactionIndex": 10,
    "gasUsed": "1241080",
    "logsBloom": "0x
    "blockHash": "0xc83918a6e5a196918db82783bcd452681f66df359c7d280bc7f23357f7aa71e6",
    "transactionHash": "0xe7729899a0da3ff2843b35933f14471810728e6dacf2a6b210011d41cc50a78f",
    "logs": [],
    "blockNumber": 5742552,
    "cumulativeGasUsed": "1973206",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA796AE911621E00809E0E7C8f0AD6BF118E5139e"
  ],
  "solcInputHash": "952b3af68046d05949e31e885f882e36",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Batch.Execution[]\",\"name\":\"executions\",\"type\":\"tuple[]\"}],\"name\":\"atomicBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Batch.ExecutionWithETH[]\",\"name\":\"executions\",\"type\":\"tuple[]\"}],\"name\":\"atomicBatchWithETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Batch.Execution[]\",\"name\":\"executions\",\"type\":\"tuple[]\"}],\"name\":\"nonAtomicBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Batch.ExecutionWithETH[]\",\"name\":\"executions\",\"type\":\"tuple[]\"}],\"name\":\"nonAtomicBatchWithETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"callDatas\",\"type\":\"bytes[]\"}],\"name\":\"singleTargetAtomicBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Batch.SingleTargetExecutionWithETH[]\",\"name\":\"executions\",\"type\":\"tuple[]\"}],\"name\":\"singleTargetAtomicBatchWithETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"callDatas\",\"type\":\"bytes[]\"}],\"name\":\"singleTargetNonAtomicBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Batch.SingleTargetExecutionWithETH[]\",\"name\":\"executions\",\"type\":\"tuple[]\"}],\"name\":\"singleTargetNonAtomicBatchWithETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/solc_0.8/Utils/Batch.sol\":\"Batch\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-0.8/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"src/solc_0.8/Utils/Batch.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.2;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-0.8/utils/Address.sol\\\";\\n\\ncontract Batch {\\n    using Address for address;\\n\\n    struct Execution {\\n        address target;\\n        bytes callData;\\n    }\\n\\n    struct ExecutionWithETH {\\n        address target;\\n        bytes callData;\\n        uint256 value;\\n    }\\n\\n    struct SingleTargetExecutionWithETH {\\n        bytes callData;\\n        uint256 value;\\n    }\\n\\n    address public immutable executor;\\n\\n    constructor(address _executor) {\\n        executor = _executor;\\n    }\\n\\n    modifier onlyExecutor() {\\n        require(msg.sender == executor, \\\"NOT_AUTHORIZED\\\");\\n        _;\\n    }\\n\\n    function atomicBatchWithETH(ExecutionWithETH[] memory executions) external payable onlyExecutor {\\n        for (uint256 i = 0; i < executions.length; i++) {\\n            executions[i].target.functionCallWithValue(executions[i].callData, executions[i].value);\\n        }\\n    }\\n\\n    function nonAtomicBatchWithETH(ExecutionWithETH[] memory executions) external payable onlyExecutor {\\n        for (uint256 i = 0; i < executions.length; i++) {\\n            _call(executions[i].target, executions[i].callData, executions[i].value);\\n        }\\n    }\\n\\n    function atomicBatch(Execution[] memory executions) external onlyExecutor {\\n        for (uint256 i = 0; i < executions.length; i++) {\\n            executions[i].target.functionCall(executions[i].callData);\\n        }\\n    }\\n\\n    function nonAtomicBatch(Execution[] memory executions) external onlyExecutor {\\n        for (uint256 i = 0; i < executions.length; i++) {\\n            _call(executions[i].target, executions[i].callData, 0);\\n        }\\n    }\\n\\n    function singleTargetAtomicBatchWithETH(address target, SingleTargetExecutionWithETH[] memory executions)\\n        external\\n        payable\\n        onlyExecutor\\n    {\\n        for (uint256 i = 0; i < executions.length; i++) {\\n            target.functionCallWithValue(executions[i].callData, executions[i].value);\\n        }\\n    }\\n\\n    function singleTargetNonAtomicBatchWithETH(address target, SingleTargetExecutionWithETH[] memory executions)\\n        external\\n        payable\\n        onlyExecutor\\n    {\\n        for (uint256 i = 0; i < executions.length; i++) {\\n            _call(target, executions[i].callData, executions[i].value);\\n        }\\n    }\\n\\n    function singleTargetAtomicBatch(address target, bytes[] memory callDatas) external onlyExecutor {\\n        for (uint256 i = 0; i < callDatas.length; i++) {\\n            target.functionCall(callDatas[i]);\\n        }\\n    }\\n\\n    function singleTargetNonAtomicBatch(address target, bytes[] memory callDatas) external onlyExecutor {\\n        for (uint256 i = 0; i < callDatas.length; i++) {\\n            _call(target, callDatas[i], 0);\\n        }\\n    }\\n\\n    function _call(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bool) {\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, ) = target.call{value: value}(data);\\n        return success;\\n    }\\n\\n    // ----------------------------------------------------------------------------------------------------\\n    // TOKEN RECEPTION\\n    // ----------------------------------------------------------------------------------------------------\\n\\n    // ERC1155\\n    bytes4 private constant ERC1155_IS_RECEIVER = 0x4e2312e0;\\n    bytes4 private constant ERC1155_RECEIVED = 0xf23a6e61;\\n    bytes4 private constant ERC1155_BATCH_RECEIVED = 0xbc197c81;\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external pure returns (bytes4) {\\n        return ERC1155_RECEIVED;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) external pure returns (bytes4) {\\n        return ERC1155_BATCH_RECEIVED;\\n    }\\n\\n    // ERC721\\n\\n    bytes4 private constant ERC721_IS_RECEIVER = 0x150b7a02;\\n    bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\\n\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) external pure returns (bytes4) {\\n        return ERC721_RECEIVED;\\n    }\\n\\n    // ERC165\\n    function supportsInterface(bytes4 _interfaceId) external pure returns (bool) {\\n        return _interfaceId == 0x01ffc9a7 || _interfaceId == ERC1155_IS_RECEIVER || _interfaceId == ERC721_IS_RECEIVER;\\n    }\\n}\\n\",\"keccak256\":\"0x0855885128c233b4dd4779a8d5992c6867c9501e09ee512e94c2dcca641aa3af\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161165738038061165783398101604081905261002f91610044565b60601b6001600160601b031916608052610072565b600060208284031215610055578081fd5b81516001600160a01b038116811461006b578182fd5b9392505050565b60805160601c61158f6100c860003960008181610255015281816103330152818161051d015281816105dd015281816106c6015281816107ed015281816108e9015281816109b40152610ac8015261158f6000f3fe6080604052600436106100d15760003560e01c806393538f111161007f578063d2570b3b11610059578063d2570b3b1461028f578063f23a6e61146102af578063f28503e9146102f5578063fad5f5ed14610308576100d1565b806393538f11146101e8578063bc197c81146101fb578063c34c08e514610243576100d1565b8063150b7a02116100b0578063150b7a021461014d578063570187a0146101c25780638fc17957146101d5576100d1565b8062ebd9e5146100d657806301ffc9a7146100f85780630dc09f2f1461012d575b600080fd5b3480156100e257600080fd5b506100f66100f13660046112fe565b610328565b005b34801561010457600080fd5b506101186101133660046113c1565b61042b565b60405190151581526020015b60405180910390f35b34801561013957600080fd5b506100f66101483660046110a9565b610512565b34801561015957600080fd5b50610191610168366004610fcd565b7f150b7a0200000000000000000000000000000000000000000000000000000000949350505050565b6040517fffffffff000000000000000000000000000000000000000000000000000000009091168152602001610124565b6100f66101d0366004611148565b6105d2565b6100f66101e3366004611225565b6106bb565b6100f66101f6366004611148565b6107e2565b34801561020757600080fd5b50610191610216366004610f16565b7fbc197c810000000000000000000000000000000000000000000000000000000098975050505050505050565b34801561024f57600080fd5b506102777f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610124565b34801561029b57600080fd5b506100f66102aa3660046110a9565b6108de565b3480156102bb57600080fd5b506101916102ca366004611033565b7ff23a6e61000000000000000000000000000000000000000000000000000000009695505050505050565b6100f6610303366004611225565b6109a9565b34801561031457600080fd5b506100f66103233660046112fe565b610abd565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103965760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b60448201526064015b60405180910390fd5b60005b8151811015610427576104148282815181106103c557634e487b7160e01b600052603260045260246000fd5b6020026020010151602001518383815181106103f157634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516001600160a01b0316610ba790919063ffffffff16565b508061041f816114d5565b915050610399565b5050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614806104be57507fffffffff0000000000000000000000000000000000000000000000000000000082167f4e2312e000000000000000000000000000000000000000000000000000000000145b8061050a57507fffffffff0000000000000000000000000000000000000000000000000000000082167f150b7a0200000000000000000000000000000000000000000000000000000000145b90505b919050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461057b5760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b604482015260640161038d565b60005b81518110156105cd576105ba838383815181106105ab57634e487b7160e01b600052603260045260246000fd5b60200260200101516000610bf0565b50806105c5816114d5565b91505061057e565b505050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461063b5760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b604482015260640161038d565b60005b81518110156105cd576106a88383838151811061066b57634e487b7160e01b600052603260045260246000fd5b60200260200101516000015184848151811061069757634e487b7160e01b600052603260045260246000fd5b602002602001015160200151610bf0565b50806106b3816114d5565b91505061063e565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107245760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b604482015260640161038d565b60005b8151811015610427576107cf82828151811061075357634e487b7160e01b600052603260045260246000fd5b60200260200101516020015183838151811061077f57634e487b7160e01b600052603260045260246000fd5b6020026020010151604001518484815181106107ab57634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516001600160a01b0316610c5a9092919063ffffffff16565b50806107da816114d5565b915050610727565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461084b5760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b604482015260640161038d565b60005b81518110156105cd576108cb82828151811061087a57634e487b7160e01b600052603260045260246000fd5b6020026020010151600001518383815181106108a657634e487b7160e01b600052603260045260246000fd5b602002602001015160200151856001600160a01b0316610c5a9092919063ffffffff16565b50806108d6816114d5565b91505061084e565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109475760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b604482015260640161038d565b60005b81518110156105cd5761099682828151811061097657634e487b7160e01b600052603260045260246000fd5b6020026020010151846001600160a01b0316610ba790919063ffffffff16565b50806109a1816114d5565b91505061094a565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610a125760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b604482015260640161038d565b60005b815181101561042757610aaa828281518110610a4157634e487b7160e01b600052603260045260246000fd5b602002602001015160000151838381518110610a6d57634e487b7160e01b600052603260045260246000fd5b602002602001015160200151848481518110610a9957634e487b7160e01b600052603260045260246000fd5b602002602001015160400151610bf0565b5080610ab5816114d5565b915050610a15565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b265760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b604482015260640161038d565b60005b815181101561042757610b94828281518110610b5557634e487b7160e01b600052603260045260246000fd5b602002602001015160000151838381518110610b8157634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516000610bf0565b5080610b9f816114d5565b915050610b29565b6060610be983836040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c65640000815250610c88565b9392505050565b600080846001600160a01b03168385604051610c0c9190611401565b60006040518083038185875af1925050503d8060008114610c49576040519150601f19603f3d011682016040523d82523d6000602084013e610c4e565b606091505b50909695505050505050565b6060610c8084848460405180606001604052806029815260200161153160299139610c93565b949350505050565b6060610c8084846000855b606082471015610d0b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161038d565b843b610d595760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161038d565b600080866001600160a01b03168587604051610d759190611401565b60006040518083038185875af1925050503d8060008114610db2576040519150601f19603f3d011682016040523d82523d6000602084013e610db7565b606091505b5091509150610dc7828286610dd2565b979650505050505050565b60608315610de1575081610be9565b825115610df15782518084602001fd5b8160405162461bcd60e51b815260040161038d919061141d565b80356001600160a01b038116811461050d57600080fd5b60008083601f840112610e33578182fd5b50813567ffffffffffffffff811115610e4a578182fd5b6020830191508360208083028501011115610e6457600080fd5b9250929050565b60008083601f840112610e7c578182fd5b50813567ffffffffffffffff811115610e93578182fd5b602083019150836020828501011115610e6457600080fd5b600082601f830112610ebb578081fd5b813567ffffffffffffffff811115610ed557610ed561151a565b610ee86020601f19601f84011601611450565b818152846020838601011115610efc578283fd5b816020850160208301379081016020019190915292915050565b60008060008060008060008060a0898b031215610f31578384fd5b610f3a89610e0b565b9750610f4860208a01610e0b565b9650604089013567ffffffffffffffff80821115610f64578586fd5b610f708c838d01610e22565b909850965060608b0135915080821115610f88578586fd5b610f948c838d01610e22565b909650945060808b0135915080821115610fac578384fd5b50610fb98b828c01610e6b565b999c989b5096995094979396929594505050565b60008060008060808587031215610fe2578384fd5b610feb85610e0b565b9350610ff960208601610e0b565b925060408501359150606085013567ffffffffffffffff81111561101b578182fd5b61102787828801610eab565b91505092959194509250565b60008060008060008060a0878903121561104b578384fd5b61105487610e0b565b955061106260208801610e0b565b94506040870135935060608701359250608087013567ffffffffffffffff81111561108b578283fd5b61109789828a01610e6b565b979a9699509497509295939492505050565b600080604083850312156110bb578182fd5b6110c483610e0b565b915060208084013567ffffffffffffffff8111156110e0578283fd5b8401601f810186136110f0578283fd5b80356111036110fe82611481565b611450565b81815283810190838501865b84811015611138576111268b888435890101610eab565b8452928601929086019060010161110f565b5096999098509650505050505050565b6000806040838503121561115a578182fd5b61116383610e0b565b915060208084013567ffffffffffffffff80821115611180578384fd5b818601915086601f830112611193578384fd5b81356111a16110fe82611481565b81815284810190848601875b8481101561121457813587016040601f19828f030112156111cc57898afd5b6111d66040611450565b89820135888111156111e6578b8cfd5b6111f48f8c83860101610eab565b8252506040919091013589820152845292870192908701906001016111ad565b50979a909950975050505050505050565b60006020808385031215611237578182fd5b823567ffffffffffffffff8082111561124e578384fd5b818501915085601f830112611261578384fd5b813561126f6110fe82611481565b81815284810190848601875b848110156112ef5781358701606080601f19838f0301121561129b578a8bfd5b6112a481611450565b6112af8b8401610e0b565b81526040830135898111156112c2578c8dfd5b6112d08f8d83870101610eab565b828d01525091013560408201528452928701929087019060010161127b565b50909998505050505050505050565b60006020808385031215611310578182fd5b823567ffffffffffffffff80821115611327578384fd5b818501915085601f83011261133a578384fd5b81356113486110fe82611481565b81815284810190848601875b848110156112ef5781358701604080601f19838f03011215611374578a8bfd5b61137d81611450565b6113888b8401610e0b565b815290820135908882111561139b578b8cfd5b6113a98e8c84860101610eab565b818c0152865250509287019290870190600101611354565b6000602082840312156113d2578081fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610be9578182fd5b600082516114138184602087016114a5565b9190910192915050565b600060208252825180602084015261143c8160408501602087016114a5565b601f01601f19169190910160400192915050565b604051601f8201601f1916810167ffffffffffffffff811182821017156114795761147961151a565b604052919050565b600067ffffffffffffffff82111561149b5761149b61151a565b5060209081020190565b60005b838110156114c05781810151838201526020016114a8565b838111156114cf576000848401525b50505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561151357634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fdfe416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564a2646970667358221220093287aab5f957c6e8a24e8daa51df9683d487530be17badee6bc93967c43ad464736f6c63430008020033",
  "deployedBytecode": "0x6080604052600436106100d15760003560e01c806393538f111161007f578063d2570b3b11610059578063d2570b3b1461028f578063f23a6e61146102af578063f28503e9146102f5578063fad5f5ed14610308576100d1565b806393538f11146101e8578063bc197c81146101fb578063c34c08e514610243576100d1565b8063150b7a02116100b0578063150b7a021461014d578063570187a0146101c25780638fc17957146101d5576100d1565b8062ebd9e5146100d657806301ffc9a7146100f85780630dc09f2f1461012d575b600080fd5b3480156100e257600080fd5b506100f66100f13660046112fe565b610328565b005b34801561010457600080fd5b506101186101133660046113c1565b61042b565b60405190151581526020015b60405180910390f35b34801561013957600080fd5b506100f66101483660046110a9565b610512565b34801561015957600080fd5b50610191610168366004610fcd565b7f150b7a0200000000000000000000000000000000000000000000000000000000949350505050565b6040517fffffffff000000000000000000000000000000000000000000000000000000009091168152602001610124565b6100f66101d0366004611148565b6105d2565b6100f66101e3366004611225565b6106bb565b6100f66101f6366004611148565b6107e2565b34801561020757600080fd5b50610191610216366004610f16565b7fbc197c810000000000000000000000000000000000000000000000000000000098975050505050505050565b34801561024f57600080fd5b506102777f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610124565b34801561029b57600080fd5b506100f66102aa3660046110a9565b6108de565b3480156102bb57600080fd5b506101916102ca366004611033565b7ff23a6e61000000000000000000000000000000000000000000000000000000009695505050505050565b6100f6610303366004611225565b6109a9565b34801561031457600080fd5b506100f66103233660046112fe565b610abd565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103965760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b60448201526064015b60405180910390fd5b60005b8151811015610427576104148282815181106103c557634e487b7160e01b600052603260045260246000fd5b6020026020010151602001518383815181106103f157634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516001600160a01b0316610ba790919063ffffffff16565b508061041f816114d5565b915050610399565b5050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614806104be57507fffffffff0000000000000000000000000000000000000000000000000000000082167f4e2312e000000000000000000000000000000000000000000000000000000000145b8061050a57507fffffffff0000000000000000000000000000000000000000000000000000000082167f150b7a0200000000000000000000000000000000000000000000000000000000145b90505b919050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461057b5760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b604482015260640161038d565b60005b81518110156105cd576105ba838383815181106105ab57634e487b7160e01b600052603260045260246000fd5b60200260200101516000610bf0565b50806105c5816114d5565b91505061057e565b505050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461063b5760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b604482015260640161038d565b60005b81518110156105cd576106a88383838151811061066b57634e487b7160e01b600052603260045260246000fd5b60200260200101516000015184848151811061069757634e487b7160e01b600052603260045260246000fd5b602002602001015160200151610bf0565b50806106b3816114d5565b91505061063e565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107245760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b604482015260640161038d565b60005b8151811015610427576107cf82828151811061075357634e487b7160e01b600052603260045260246000fd5b60200260200101516020015183838151811061077f57634e487b7160e01b600052603260045260246000fd5b6020026020010151604001518484815181106107ab57634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516001600160a01b0316610c5a9092919063ffffffff16565b50806107da816114d5565b915050610727565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461084b5760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b604482015260640161038d565b60005b81518110156105cd576108cb82828151811061087a57634e487b7160e01b600052603260045260246000fd5b6020026020010151600001518383815181106108a657634e487b7160e01b600052603260045260246000fd5b602002602001015160200151856001600160a01b0316610c5a9092919063ffffffff16565b50806108d6816114d5565b91505061084e565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109475760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b604482015260640161038d565b60005b81518110156105cd5761099682828151811061097657634e487b7160e01b600052603260045260246000fd5b6020026020010151846001600160a01b0316610ba790919063ffffffff16565b50806109a1816114d5565b91505061094a565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610a125760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b604482015260640161038d565b60005b815181101561042757610aaa828281518110610a4157634e487b7160e01b600052603260045260246000fd5b602002602001015160000151838381518110610a6d57634e487b7160e01b600052603260045260246000fd5b602002602001015160200151848481518110610a9957634e487b7160e01b600052603260045260246000fd5b602002602001015160400151610bf0565b5080610ab5816114d5565b915050610a15565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b265760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b604482015260640161038d565b60005b815181101561042757610b94828281518110610b5557634e487b7160e01b600052603260045260246000fd5b602002602001015160000151838381518110610b8157634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516000610bf0565b5080610b9f816114d5565b915050610b29565b6060610be983836040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c65640000815250610c88565b9392505050565b600080846001600160a01b03168385604051610c0c9190611401565b60006040518083038185875af1925050503d8060008114610c49576040519150601f19603f3d011682016040523d82523d6000602084013e610c4e565b606091505b50909695505050505050565b6060610c8084848460405180606001604052806029815260200161153160299139610c93565b949350505050565b6060610c8084846000855b606082471015610d0b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161038d565b843b610d595760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161038d565b600080866001600160a01b03168587604051610d759190611401565b60006040518083038185875af1925050503d8060008114610db2576040519150601f19603f3d011682016040523d82523d6000602084013e610db7565b606091505b5091509150610dc7828286610dd2565b979650505050505050565b60608315610de1575081610be9565b825115610df15782518084602001fd5b8160405162461bcd60e51b815260040161038d919061141d565b80356001600160a01b038116811461050d57600080fd5b60008083601f840112610e33578182fd5b50813567ffffffffffffffff811115610e4a578182fd5b6020830191508360208083028501011115610e6457600080fd5b9250929050565b60008083601f840112610e7c578182fd5b50813567ffffffffffffffff811115610e93578182fd5b602083019150836020828501011115610e6457600080fd5b600082601f830112610ebb578081fd5b813567ffffffffffffffff811115610ed557610ed561151a565b610ee86020601f19601f84011601611450565b818152846020838601011115610efc578283fd5b816020850160208301379081016020019190915292915050565b60008060008060008060008060a0898b031215610f31578384fd5b610f3a89610e0b565b9750610f4860208a01610e0b565b9650604089013567ffffffffffffffff80821115610f64578586fd5b610f708c838d01610e22565b909850965060608b0135915080821115610f88578586fd5b610f948c838d01610e22565b909650945060808b0135915080821115610fac578384fd5b50610fb98b828c01610e6b565b999c989b5096995094979396929594505050565b60008060008060808587031215610fe2578384fd5b610feb85610e0b565b9350610ff960208601610e0b565b925060408501359150606085013567ffffffffffffffff81111561101b578182fd5b61102787828801610eab565b91505092959194509250565b60008060008060008060a0878903121561104b578384fd5b61105487610e0b565b955061106260208801610e0b565b94506040870135935060608701359250608087013567ffffffffffffffff81111561108b578283fd5b61109789828a01610e6b565b979a9699509497509295939492505050565b600080604083850312156110bb578182fd5b6110c483610e0b565b915060208084013567ffffffffffffffff8111156110e0578283fd5b8401601f810186136110f0578283fd5b80356111036110fe82611481565b611450565b81815283810190838501865b84811015611138576111268b888435890101610eab565b8452928601929086019060010161110f565b5096999098509650505050505050565b6000806040838503121561115a578182fd5b61116383610e0b565b915060208084013567ffffffffffffffff80821115611180578384fd5b818601915086601f830112611193578384fd5b81356111a16110fe82611481565b81815284810190848601875b8481101561121457813587016040601f19828f030112156111cc57898afd5b6111d66040611450565b89820135888111156111e6578b8cfd5b6111f48f8c83860101610eab565b8252506040919091013589820152845292870192908701906001016111ad565b50979a909950975050505050505050565b60006020808385031215611237578182fd5b823567ffffffffffffffff8082111561124e578384fd5b818501915085601f830112611261578384fd5b813561126f6110fe82611481565b81815284810190848601875b848110156112ef5781358701606080601f19838f0301121561129b578a8bfd5b6112a481611450565b6112af8b8401610e0b565b81526040830135898111156112c2578c8dfd5b6112d08f8d83870101610eab565b828d01525091013560408201528452928701929087019060010161127b565b50909998505050505050505050565b60006020808385031215611310578182fd5b823567ffffffffffffffff80821115611327578384fd5b818501915085601f83011261133a578384fd5b81356113486110fe82611481565b81815284810190848601875b848110156112ef5781358701604080601f19838f03011215611374578a8bfd5b61137d81611450565b6113888b8401610e0b565b815290820135908882111561139b578b8cfd5b6113a98e8c84860101610eab565b818c0152865250509287019290870190600101611354565b6000602082840312156113d2578081fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610be9578182fd5b600082516114138184602087016114a5565b9190910192915050565b600060208252825180602084015261143c8160408501602087016114a5565b601f01601f19169190910160400192915050565b604051601f8201601f1916810167ffffffffffffffff811182821017156114795761147961151a565b604052919050565b600067ffffffffffffffff82111561149b5761149b61151a565b5060209081020190565b60005b838110156114c05781810151838201526020016114a8565b838111156114cf576000848401525b50505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561151357634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fdfe416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564a2646970667358221220093287aab5f957c6e8a24e8daa51df9683d487530be17badee6bc93967c43ad464736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}