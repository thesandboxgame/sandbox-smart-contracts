{
  "address": "0x9B1DBB930fd1E60dc1C6A2beec025106a7AFd65E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "superOperator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "SuperOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newTrustedForwarderAddress",
          "type": "address"
        }
      ],
      "name": "TrustedForwarderChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract Gem[]",
          "name": "gems",
          "type": "address[]"
        },
        {
          "internalType": "contract Catalyst[]",
          "name": "catalysts",
          "type": "address[]"
        }
      ],
      "name": "addGemsAndCatalysts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint16[]",
          "name": "catalystIds",
          "type": "uint16[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "batchBurnCatalysts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint16[]",
          "name": "gemIds",
          "type": "uint16[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "batchBurnGems",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "catalystId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnCatalyst",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint16[]",
          "name": "catalystIds",
          "type": "uint16[]"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnDifferentCatalysts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint16[]",
          "name": "gemIds",
          "type": "uint16[]"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnDifferentGems",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "gemId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnGem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "changeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "catalystId",
          "type": "uint16"
        }
      ],
      "name": "doesCatalystExist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "gemId",
          "type": "uint16"
        }
      ],
      "name": "doesGemExist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "catalystId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint16[]",
              "name": "gemIds",
              "type": "uint16[]"
            },
            {
              "internalType": "bytes32",
              "name": "blockHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IAssetAttributesRegistry.GemEvent[]",
          "name": "events",
          "type": "tuple[]"
        }
      ],
      "name": "getAttributes",
      "outputs": [
        {
          "internalType": "uint32[]",
          "name": "values",
          "type": "uint32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "catalystId",
          "type": "uint16"
        }
      ],
      "name": "getMaxGems",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfCatalystContracts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfGemContracts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "isSuperOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revokeGemsandCatalystsMaxAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setGemsandCatalystsMaxAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "superOperator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setSuperOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc0a19cc66e6d3aa27af197eadb13f01c1ab919f2f0e86b1434c6f0a6d2dda222",
  "receipt": {
    "to": null,
    "from": "0xA796AE911621E00809E0E7C8f0AD6BF118E5139e",
    "contractAddress": "0x9B1DBB930fd1E60dc1C6A2beec025106a7AFd65E",
    "transactionIndex": 42,
    "gasUsed": "1711059",
    "logsBloom": "0x
    "blockHash": "0x99df413f36659649ca7e677487f4560987a144b156b2e6860f4e65546e6e547d",
    "transactionHash": "0xc0a19cc66e6d3aa27af197eadb13f01c1ab919f2f0e86b1434c6f0a6d2dda222",
    "logs": [
      {
        "transactionIndex": 42,
        "blockNumber": 6343973,
        "transactionHash": "0xc0a19cc66e6d3aa27af197eadb13f01c1ab919f2f0e86b1434c6f0a6d2dda222",
        "address": "0x9B1DBB930fd1E60dc1C6A2beec025106a7AFd65E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a796ae911621e00809e0e7c8f0ad6bf118e5139e"
        ],
        "data": "0x",
        "logIndex": 84,
        "blockHash": "0x99df413f36659649ca7e677487f4560987a144b156b2e6860f4e65546e6e547d"
      }
    ],
    "blockNumber": 6343973,
    "cumulativeGasUsed": "5607826",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA796AE911621E00809E0E7C8f0AD6BF118E5139e",
    "0x96E8789B195713B279c163847A7a0A107CDf6FCf"
  ],
  "solcInputHash": "0505d301d083cfaa512ecb9b03150aa2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"superOperator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SuperOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTrustedForwarderAddress\",\"type\":\"address\"}],\"name\":\"TrustedForwarderChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract Gem[]\",\"name\":\"gems\",\"type\":\"address[]\"},{\"internalType\":\"contract Catalyst[]\",\"name\":\"catalysts\",\"type\":\"address[]\"}],\"name\":\"addGemsAndCatalysts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint16[]\",\"name\":\"catalystIds\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchBurnCatalysts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint16[]\",\"name\":\"gemIds\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchBurnGems\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"catalystId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnCatalyst\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint16[]\",\"name\":\"catalystIds\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnDifferentCatalysts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint16[]\",\"name\":\"gemIds\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnDifferentGems\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"gemId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnGem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"catalystId\",\"type\":\"uint16\"}],\"name\":\"doesCatalystExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"gemId\",\"type\":\"uint16\"}],\"name\":\"doesGemExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"catalystId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16[]\",\"name\":\"gemIds\",\"type\":\"uint16[]\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IAssetAttributesRegistry.GemEvent[]\",\"name\":\"events\",\"type\":\"tuple[]\"}],\"name\":\"getAttributes\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"values\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"catalystId\",\"type\":\"uint16\"}],\"name\":\"getMaxGems\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfCatalystContracts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfGemContracts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isSuperOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokeGemsandCatalystsMaxAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setGemsandCatalystsMaxAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"superOperator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setSuperOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addGemsAndCatalysts(address[],address[])\":{\"params\":{\"catalysts\":\"array of catalysts to be added\",\"gems\":\"array of gems to be added\"}},\"batchBurnCatalysts(address,uint16[],uint256[])\":{\"params\":{\"amounts\":\"list of amounts of units to burn\",\"catalystIds\":\"list of catalysts to burn catalyst units from each\",\"from\":\"address of the beneficiary to burn on behalf of\"}},\"batchBurnGems(address,uint16[],uint256[])\":{\"params\":{\"amounts\":\"list of amounts of units to burn\",\"from\":\"address of the beneficiary to burn on behalf of\",\"gemIds\":\"list of gems to burn gem units from each\"}},\"burnCatalyst(address,uint16,uint256)\":{\"params\":{\"amount\":\"The number of catalyst tokens to burn.\",\"catalystId\":\"The id of the catalyst to burn.\",\"from\":\"The signing address for the tx.\"}},\"burnDifferentCatalysts(address,uint16[],uint256)\":{\"params\":{\"amount\":\"amount to burn\",\"catalystIds\":\"list of catalysts to burn one catalyst from each\",\"from\":\"address of the beneficiary to burn on behalf of\"}},\"burnDifferentGems(address,uint16[],uint256)\":{\"params\":{\"amount\":\"amount units to burn\",\"from\":\"address of the beneficiary to burn on behalf of\",\"gemIds\":\"list of gems to burn one gem from each\"}},\"burnGem(address,uint16,uint256)\":{\"params\":{\"amount\":\"The number of gem tokens to burn.\",\"from\":\"The signing address for the tx.\",\"gemId\":\"The id of the gem to burn.\"}},\"changeAdmin(address)\":{\"details\":\"Change the administrator to be `newAdmin`.\",\"params\":{\"newAdmin\":\"The address of the new administrator.\"}},\"doesCatalystExist(uint16)\":{\"params\":{\"catalystId\":\"The catalyst being queried.\"},\"returns\":{\"_0\":\"Whether the catalyst exists.\"}},\"doesGemExist(uint16)\":{\"params\":{\"gemId\":\"The gem being queried.\"},\"returns\":{\"_0\":\"Whether the gem exists.\"}},\"getAdmin()\":{\"details\":\"Get the current administrator of this contract.\",\"returns\":{\"_0\":\"The current administrator of this contract.\"}},\"getAttributes(uint16,uint256,(uint16[],bytes32)[])\":{\"params\":{\"assetId\":\"The asset tokenId.\",\"catalystId\":\"The catalyst identifier.\",\"events\":\"An array of GemEvents. Be aware that only gemEvents from the last CatalystApplied event onwards should be used to populate a query. If gemEvents from multiple CatalystApplied events are included the output values will be incorrect.\"},\"returns\":{\"values\":\"An array of values for each gem present in the asset.\"}},\"getMaxGems(uint16)\":{\"params\":{\"catalystId\":\"catalyst identifier\"}},\"isSuperOperator(address)\":{\"params\":{\"who\":\"The address to query.\"},\"returns\":{\"_0\":\"whether the address has superOperator rights.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setSuperOperator(address,bool)\":{\"params\":{\"enabled\":\"set whether the superOperator is enabled or disabled.\",\"superOperator\":\"address that will be given/removed superOperator right.\"}},\"setTrustedForwarder(address)\":{\"details\":\"Change the address of the trusted forwarder for meta-TX\",\"params\":{\"trustedForwarder\":\"The new trustedForwarder\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addGemsAndCatalysts(address[],address[])\":{\"notice\":\"Adds both arrays of gems and catalysts to registry\"},\"batchBurnCatalysts(address,uint16[],uint256[])\":{\"notice\":\"Burns few catalyst units from each catalyst id on behalf of a beneficiary\"},\"batchBurnGems(address,uint16[],uint256[])\":{\"notice\":\"Burns few gem units from each gem id on behalf of a beneficiary\"},\"burnCatalyst(address,uint16,uint256)\":{\"notice\":\"Burn a catalyst.\"},\"burnDifferentCatalysts(address,uint16[],uint256)\":{\"notice\":\"Burns one catalyst unit from each catalyst id on behalf of a beneficiary\"},\"burnDifferentGems(address,uint16[],uint256)\":{\"notice\":\"Burns one gem unit from each gem id on behalf of a beneficiary\"},\"burnGem(address,uint16,uint256)\":{\"notice\":\"Burn a gem.\"},\"doesCatalystExist(uint16)\":{\"notice\":\"Query whether a giving catalyst exists.\"},\"doesGemExist(uint16)\":{\"notice\":\"Query whether a given gem exists.\"},\"getAttributes(uint16,uint256,(uint16[],bytes32)[])\":{\"notice\":\"Returns the values for each gem included in a given asset.\"},\"getMaxGems(uint16)\":{\"notice\":\"Returns the maximum number of gems for a given catalyst\"},\"isSuperOperator(address)\":{\"notice\":\"check whether address `who` is given superOperator rights.\"},\"setSuperOperator(address,bool)\":{\"notice\":\"Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights).\"}},\"notice\":\"Contract managing the Gems and Catalysts Each Gems and Catalyst must be registered here. Each new Gem get assigned a new id (starting at 1) Each new Catalyst get assigned a new id (starting at 1)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/solc_0.8/catalyst/GemsCatalystsRegistry.sol\":\"GemsCatalystsRegistry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-0.8/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,\\n     * given `owner`'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x44300341eb97e8790e56e0823e8c3d09695fc2ee80555a83a9585f307381f324\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"src/solc_0.8/catalyst/Catalyst.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../common/interfaces/IAssetAttributesRegistry.sol\\\";\\nimport \\\"../common/BaseWithStorage/ERC20/ERC20Token.sol\\\";\\nimport \\\"../common/interfaces/IAttributes.sol\\\";\\n\\ncontract Catalyst is ERC20Token, IAttributes {\\n    uint16 public immutable catalystId;\\n    uint8 internal immutable _maxGems;\\n\\n    IAttributes internal _attributes;\\n\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        address admin,\\n        uint8 maxGems,\\n        uint16 _catalystId,\\n        IAttributes attributes,\\n        address operator\\n    ) ERC20Token(name, symbol, admin, operator) {\\n        _maxGems = maxGems;\\n        catalystId = _catalystId;\\n        _attributes = attributes;\\n    }\\n\\n    /// @notice Used by Admin to update the attributes contract.\\n    /// @param attributes The new attributes contract.\\n    function changeAttributes(IAttributes attributes) external onlyAdmin {\\n        _attributes = attributes;\\n    }\\n\\n    /// @notice Get the value of _maxGems(the max number of gems that can be embeded in this type of catalyst).\\n    /// @return The value of _maxGems.\\n    function getMaxGems() external view returns (uint8) {\\n        return _maxGems;\\n    }\\n\\n    /// @notice Get the attributes for each gem in an asset.\\n    /// See DefaultAttributes.getAttributes for more.\\n    /// @return values An array of values representing the \\\"level\\\" of each gem. ie: Power=14, speed=45, etc...\\n    function getAttributes(uint256 assetId, IAssetAttributesRegistry.GemEvent[] calldata events)\\n        external\\n        view\\n        override\\n        returns (uint32[] memory values)\\n    {\\n        return _attributes.getAttributes(assetId, events);\\n    }\\n}\\n\",\"keccak256\":\"0x4d0519720a7fd25ec0c521fe10d2be1f2a096e4ec20c3b94bbe777b872fe89b8\",\"license\":\"MIT\"},\"src/solc_0.8/catalyst/Gem.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"../common/BaseWithStorage/ERC20/ERC20Token.sol\\\";\\n\\ncontract Gem is ERC20Token {\\n    uint16 public immutable gemId;\\n\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        address admin,\\n        uint16 _gemId,\\n        address operator\\n    ) ERC20Token(name, symbol, admin, operator) {\\n        gemId = _gemId;\\n    }\\n}\\n\",\"keccak256\":\"0xbea6af4978fff25c9d3a0b0398d79752e9bb221353e1f499dfcd861f09acb158\",\"license\":\"MIT\"},\"src/solc_0.8/catalyst/GemsCatalystsRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-0.8/access/Ownable.sol\\\";\\nimport \\\"./Gem.sol\\\";\\nimport \\\"./Catalyst.sol\\\";\\nimport \\\"./interfaces/IGemsCatalystsRegistry.sol\\\";\\nimport \\\"../common/BaseWithStorage/WithSuperOperators.sol\\\";\\nimport \\\"../common/BaseWithStorage/ERC2771Handler.sol\\\";\\n\\n/// @notice Contract managing the Gems and Catalysts\\n/// Each Gems and Catalyst must be registered here.\\n/// Each new Gem get assigned a new id (starting at 1)\\n/// Each new Catalyst get assigned a new id (starting at 1)\\ncontract GemsCatalystsRegistry is WithSuperOperators, ERC2771Handler, IGemsCatalystsRegistry, Ownable {\\n    uint256 private constant MAX_GEMS_AND_CATALYSTS = 256;\\n    uint256 internal constant MAX_UINT256 = ~uint256(0);\\n\\n    Gem[] internal _gems;\\n    Catalyst[] internal _catalysts;\\n\\n    event TrustedForwarderChanged(address indexed newTrustedForwarderAddress);\\n\\n    constructor(address admin, address trustedForwarder) {\\n        _admin = admin;\\n        __ERC2771Handler_initialize(trustedForwarder);\\n    }\\n\\n    /// @notice Returns the values for each gem included in a given asset.\\n    /// @param catalystId The catalyst identifier.\\n    /// @param assetId The asset tokenId.\\n    /// @param events An array of GemEvents. Be aware that only gemEvents from the last CatalystApplied event onwards should be used to populate a query. If gemEvents from multiple CatalystApplied events are included the output values will be incorrect.\\n    /// @return values An array of values for each gem present in the asset.\\n    function getAttributes(\\n        uint16 catalystId,\\n        uint256 assetId,\\n        IAssetAttributesRegistry.GemEvent[] calldata events\\n    ) external view override returns (uint32[] memory values) {\\n        Catalyst catalyst = getCatalyst(catalystId);\\n        require(catalyst != Catalyst(address(0)), \\\"CATALYST_DOES_NOT_EXIST\\\");\\n        return catalyst.getAttributes(assetId, events);\\n    }\\n\\n    /// @notice Returns the maximum number of gems for a given catalyst\\n    /// @param catalystId catalyst identifier\\n    function getMaxGems(uint16 catalystId) external view override returns (uint8) {\\n        Catalyst catalyst = getCatalyst(catalystId);\\n        require(catalyst != Catalyst(address(0)), \\\"CATALYST_DOES_NOT_EXIST\\\");\\n        return catalyst.getMaxGems();\\n    }\\n\\n    /// @notice Burns one gem unit from each gem id on behalf of a beneficiary\\n    /// @param from address of the beneficiary to burn on behalf of\\n    /// @param gemIds list of gems to burn one gem from each\\n    /// @param amount amount units to burn\\n    function burnDifferentGems(\\n        address from,\\n        uint16[] calldata gemIds,\\n        uint256 amount\\n    ) external override {\\n        for (uint256 i = 0; i < gemIds.length; i++) {\\n            burnGem(from, gemIds[i], amount);\\n        }\\n    }\\n\\n    /// @notice Burns one catalyst unit from each catalyst id on behalf of a beneficiary\\n    /// @param from address of the beneficiary to burn on behalf of\\n    /// @param catalystIds list of catalysts to burn one catalyst from each\\n    /// @param amount amount to burn\\n    function burnDifferentCatalysts(\\n        address from,\\n        uint16[] calldata catalystIds,\\n        uint256 amount\\n    ) external override {\\n        for (uint256 i = 0; i < catalystIds.length; i++) {\\n            burnCatalyst(from, catalystIds[i], amount);\\n        }\\n    }\\n\\n    /// @notice Burns few gem units from each gem id on behalf of a beneficiary\\n    /// @param from address of the beneficiary to burn on behalf of\\n    /// @param gemIds list of gems to burn gem units from each\\n    /// @param amounts list of amounts of units to burn\\n    function batchBurnGems(\\n        address from,\\n        uint16[] calldata gemIds,\\n        uint256[] calldata amounts\\n    ) public override {\\n        for (uint256 i = 0; i < gemIds.length; i++) {\\n            if (gemIds[i] != 0 && amounts[i] != 0) {\\n                burnGem(from, gemIds[i], amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Burns few catalyst units from each catalyst id on behalf of a beneficiary\\n    /// @param from address of the beneficiary to burn on behalf of\\n    /// @param catalystIds list of catalysts to burn catalyst units from each\\n    /// @param amounts list of amounts of units to burn\\n    function batchBurnCatalysts(\\n        address from,\\n        uint16[] calldata catalystIds,\\n        uint256[] calldata amounts\\n    ) public override {\\n        for (uint256 i = 0; i < catalystIds.length; i++) {\\n            if (catalystIds[i] != 0 && amounts[i] != 0) {\\n                burnCatalyst(from, catalystIds[i], amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Adds both arrays of gems and catalysts to registry\\n    /// @param gems array of gems to be added\\n    /// @param catalysts array of catalysts to be added\\n    function addGemsAndCatalysts(Gem[] calldata gems, Catalyst[] calldata catalysts) external override {\\n        require(_msgSender() == _admin, \\\"NOT_AUTHORIZED\\\");\\n\\n        require(\\n            uint256(_gems.length + _catalysts.length + gems.length + catalysts.length) < MAX_GEMS_AND_CATALYSTS,\\n            \\\"GemsCatalystsRegistry: Too many gem and catalyst contracts\\\"\\n        );\\n\\n        for (uint256 i = 0; i < gems.length; i++) {\\n            Gem gem = gems[i];\\n            uint16 gemId = gem.gemId();\\n            require(gemId == _gems.length + 1, \\\"GEM_ID_NOT_IN_ORDER\\\");\\n            _gems.push(gem);\\n        }\\n\\n        for (uint256 i = 0; i < catalysts.length; i++) {\\n            Catalyst catalyst = catalysts[i];\\n            uint16 catalystId = catalyst.catalystId();\\n            require(catalystId == _catalysts.length + 1, \\\"CATALYST_ID_NOT_IN_ORDER\\\");\\n            _catalysts.push(catalyst);\\n        }\\n    }\\n\\n    /// @notice Query whether a given gem exists.\\n    /// @param gemId The gem being queried.\\n    /// @return Whether the gem exists.\\n    function doesGemExist(uint16 gemId) external view override returns (bool) {\\n        return getGem(gemId) != Gem(address(0));\\n    }\\n\\n    /// @notice Query whether a giving catalyst exists.\\n    /// @param catalystId The catalyst being queried.\\n    /// @return Whether the catalyst exists.\\n    function doesCatalystExist(uint16 catalystId) external view returns (bool) {\\n        return getCatalyst(catalystId) != Catalyst(address(0));\\n    }\\n\\n    /// @notice Burn a catalyst.\\n    /// @param from The signing address for the tx.\\n    /// @param catalystId The id of the catalyst to burn.\\n    /// @param amount The number of catalyst tokens to burn.\\n    function burnCatalyst(\\n        address from,\\n        uint16 catalystId,\\n        uint256 amount\\n    ) public override {\\n        _checkAuthorization(from);\\n        Catalyst catalyst = getCatalyst(catalystId);\\n        require(catalyst != Catalyst(address(0)), \\\"CATALYST_DOES_NOT_EXIST\\\");\\n        catalyst.burnFor(from, amount);\\n    }\\n\\n    /// @notice Burn a gem.\\n    /// @param from The signing address for the tx.\\n    /// @param gemId The id of the gem to burn.\\n    /// @param amount The number of gem tokens to burn.\\n    function burnGem(\\n        address from,\\n        uint16 gemId,\\n        uint256 amount\\n    ) public override {\\n        _checkAuthorization(from);\\n        Gem gem = getGem(gemId);\\n        require(gem != Gem(address(0)), \\\"GEM_DOES_NOT_EXIST\\\");\\n        gem.burnFor(from, amount);\\n    }\\n\\n    function getNumberOfCatalystContracts() external view returns (uint256 number) {\\n        number = _catalysts.length;\\n    }\\n\\n    function getNumberOfGemContracts() external view returns (uint256 number) {\\n        number = _gems.length;\\n    }\\n\\n    function revokeGemsandCatalystsMaxAllowance() external {\\n        _setGemsAndCatalystsAllowance(0);\\n    }\\n\\n    function setGemsandCatalystsMaxAllowance() external {\\n        _setGemsAndCatalystsAllowance(MAX_UINT256);\\n    }\\n\\n    // //////////////////// INTERNALS ////////////////////\\n\\n    function _setGemsAndCatalystsAllowance(uint256 allowanceValue) internal {\\n        for (uint256 i = 0; i < _gems.length; i++) {\\n            _gems[i].approveFor(_msgSender(), address(this), allowanceValue);\\n        }\\n\\n        for (uint256 i = 0; i < _catalysts.length; i++) {\\n            _catalysts[i].approveFor(_msgSender(), address(this), allowanceValue);\\n        }\\n    }\\n\\n    /// @dev Get the catalyst contract corresponding to the id.\\n    /// @param catalystId The catalyst id to use to retrieve the contract.\\n    /// @return The requested Catalyst contract.\\n    function getCatalyst(uint16 catalystId) internal view returns (Catalyst) {\\n        if (catalystId > 0 && catalystId <= _catalysts.length) {\\n            return _catalysts[catalystId - 1];\\n        } else {\\n            return Catalyst(address(0));\\n        }\\n    }\\n\\n    /// @dev Get the gem contract corresponding to the id.\\n    /// @param gemId The gem id to use to retrieve the contract.\\n    /// @return The requested Gem contract.\\n    function getGem(uint16 gemId) internal view returns (Gem) {\\n        if (gemId > 0 && gemId <= _gems.length) {\\n            return _gems[gemId - 1];\\n        } else {\\n            return Gem(address(0));\\n        }\\n    }\\n\\n    /// @dev verify that the caller is authorized for this function call.\\n    /// @param from The original signer of the transaction.\\n    function _checkAuthorization(address from) internal view {\\n        require(_msgSender() == from || isSuperOperator(_msgSender()), \\\"AUTH_ACCESS_DENIED\\\");\\n    }\\n\\n    /// @dev Change the address of the trusted forwarder for meta-TX\\n    /// @param trustedForwarder The new trustedForwarder\\n    function setTrustedForwarder(address trustedForwarder) external onlyOwner {\\n        _trustedForwarder = trustedForwarder;\\n\\n        emit TrustedForwarderChanged(trustedForwarder);\\n    }\\n\\n    function _msgSender() internal view override(Context, ERC2771Handler) returns (address sender) {\\n        return ERC2771Handler._msgSender();\\n    }\\n\\n    function _msgData() internal view override(Context, ERC2771Handler) returns (bytes calldata) {\\n        return ERC2771Handler._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0xc4e3fff50d93cb9a0def8f930a36102d17b83f946dd9f248ce3d59b68e483499\",\"license\":\"MIT\"},\"src/solc_0.8/catalyst/interfaces/IGemsCatalystsRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../common/interfaces/IAssetAttributesRegistry.sol\\\";\\nimport \\\"../Gem.sol\\\";\\nimport \\\"../Catalyst.sol\\\";\\n\\ninterface IGemsCatalystsRegistry {\\n    function getAttributes(\\n        uint16 catalystId,\\n        uint256 assetId,\\n        IAssetAttributesRegistry.GemEvent[] calldata events\\n    ) external view returns (uint32[] memory values);\\n\\n    function getMaxGems(uint16 catalystId) external view returns (uint8);\\n\\n    function burnDifferentGems(\\n        address from,\\n        uint16[] calldata gemIds,\\n        uint256 amount\\n    ) external;\\n\\n    function burnDifferentCatalysts(\\n        address from,\\n        uint16[] calldata catalystIds,\\n        uint256 amount\\n    ) external;\\n\\n    function batchBurnGems(\\n        address from,\\n        uint16[] calldata gemIds,\\n        uint256[] calldata amounts\\n    ) external;\\n\\n    function batchBurnCatalysts(\\n        address from,\\n        uint16[] calldata catalystIds,\\n        uint256[] calldata amounts\\n    ) external;\\n\\n    function addGemsAndCatalysts(Gem[] calldata gems, Catalyst[] calldata catalysts) external;\\n\\n    function doesGemExist(uint16 gemId) external view returns (bool);\\n\\n    function burnCatalyst(\\n        address from,\\n        uint16 catalystId,\\n        uint256 amount\\n    ) external;\\n\\n    function burnGem(\\n        address from,\\n        uint16 gemId,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x684a504006c07a3cd1624d837421b1dad38ceed6666c8c8c277c335c41585965\",\"license\":\"MIT\"},\"src/solc_0.8/common/Base/TheSandbox712.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\ncontract TheSandbox712 {\\n    bytes32 internal constant EIP712DOMAIN_TYPEHASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,address verifyingContract)\\\");\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 public immutable _DOMAIN_SEPARATOR;\\n\\n    constructor() {\\n        _DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(EIP712DOMAIN_TYPEHASH, keccak256(\\\"The Sandbox\\\"), keccak256(\\\"1\\\"), address(this))\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x4721edc45cad9d6049e9404b178f4f4e93f5871eb5533a0c48fc353ae178d659\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/ERC20/ERC20BaseToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-0.8/utils/Context.sol\\\";\\nimport \\\"./extensions/ERC20Internal.sol\\\";\\nimport \\\"../../interfaces/IERC20Extended.sol\\\";\\nimport \\\"../WithSuperOperators.sol\\\";\\n\\nabstract contract ERC20BaseToken is WithSuperOperators, IERC20, IERC20Extended, ERC20Internal, Context {\\n    string internal _name;\\n    string internal _symbol;\\n    address internal immutable _operator;\\n    uint256 internal _totalSupply;\\n    mapping(address => uint256) internal _balances;\\n    mapping(address => mapping(address => uint256)) internal _allowances;\\n\\n    constructor(\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        address admin,\\n        address operator\\n    ) {\\n        _name = tokenName;\\n        _symbol = tokenSymbol;\\n        _admin = admin;\\n        _operator = operator;\\n    }\\n\\n    /// @notice Transfer `amount` tokens to `to`.\\n    /// @param to The recipient address of the tokens being transfered.\\n    /// @param amount The number of tokens being transfered.\\n    /// @return success Whether or not the transfer succeeded.\\n    function transfer(address to, uint256 amount) external override returns (bool success) {\\n        _transfer(_msgSender(), to, amount);\\n        return true;\\n    }\\n\\n    /// @notice Transfer `amount` tokens from `from` to `to`.\\n    /// @param from The origin address  of the tokens being transferred.\\n    /// @param to The recipient address of the tokensbeing  transfered.\\n    /// @param amount The number of tokens transfered.\\n    /// @return success Whether or not the transfer succeeded.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external override returns (bool success) {\\n        if (_msgSender() != from && !_superOperators[_msgSender()] && _msgSender() != _operator) {\\n            uint256 currentAllowance = _allowances[from][_msgSender()];\\n            if (currentAllowance != ~uint256(0)) {\\n                // save gas when allowance is maximal by not reducing it (see https://github.com/ethereum/EIPs/issues/717)\\n                require(currentAllowance >= amount, \\\"NOT_AUTHORIZED_ALLOWANCE\\\");\\n                _allowances[from][_msgSender()] = currentAllowance - amount;\\n            }\\n        }\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /// @notice Burn `amount` tokens.\\n    /// @param amount The number of tokens to burn.\\n    function burn(uint256 amount) external override {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /// @notice Burn `amount` tokens from `owner`.\\n    /// @param from The address whose token to burn.\\n    /// @param amount The number of tokens to burn.\\n    function burnFor(address from, uint256 amount) external override {\\n        _burn(from, amount);\\n    }\\n\\n    /// @notice Approve `spender` to transfer `amount` tokens.\\n    /// @param spender The address to be given rights to transfer.\\n    /// @param amount The number of tokens allowed.\\n    /// @return success Whether or not the call succeeded.\\n    function approve(address spender, uint256 amount) external override returns (bool success) {\\n        _approveFor(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /// @notice Get the name of the token collection.\\n    /// @return The name of the token collection.\\n    function name() external view virtual returns (string memory) {\\n        //added virtual\\n        return _name;\\n    }\\n\\n    /// @notice Get the symbol for the token collection.\\n    /// @return The symbol of the token collection.\\n    function symbol() external view virtual returns (string memory) {\\n        //added virtual\\n        return _symbol;\\n    }\\n\\n    /// @notice Get the total number of tokens in existence.\\n    /// @return The total number of tokens in existence.\\n    function totalSupply() external view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /// @notice Get the balance of `owner`.\\n    /// @param owner The address to query the balance of.\\n    /// @return The amount owned by `owner`.\\n    function balanceOf(address owner) external view override returns (uint256) {\\n        return _balances[owner];\\n    }\\n\\n    /// @notice Get the allowance of `spender` for `owner`'s tokens.\\n    /// @param owner The address whose token is allowed.\\n    /// @param spender The address allowed to transfer.\\n    /// @return remaining The amount of token `spender` is allowed to transfer on behalf of `owner`.\\n    function allowance(address owner, address spender) external view override returns (uint256 remaining) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /// @notice Get the number of decimals for the token collection.\\n    /// @return The number of decimals.\\n    function decimals() external pure virtual returns (uint8) {\\n        return uint8(18);\\n    }\\n\\n    /// @notice Approve `spender` to transfer `amount` tokens from `owner`.\\n    /// @param owner The address whose token is allowed.\\n    /// @param spender The address to be given rights to transfer.\\n    /// @param amount The number of tokens allowed.\\n    /// @return success Whether or not the call succeeded.\\n    function approveFor(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) public override returns (bool success) {\\n        require(_msgSender() == owner || _superOperators[_msgSender()] || _msgSender() == _operator, \\\"NOT_AUTHORIZED\\\");\\n        _approveFor(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /// @notice Increase the allowance for the spender if needed\\n    /// @param owner The address of the owner of the tokens\\n    /// @param spender The address wanting to spend tokens\\n    /// @param amountNeeded The amount requested to spend\\n    /// @return success Whether or not the call succeeded.\\n    function addAllowanceIfNeeded(\\n        address owner,\\n        address spender,\\n        uint256 amountNeeded\\n    ) public returns (bool success) {\\n        require(_msgSender() == owner || _superOperators[_msgSender()] || _msgSender() == _operator, \\\"INVALID_SENDER\\\");\\n        _addAllowanceIfNeeded(owner, spender, amountNeeded);\\n        return true;\\n    }\\n\\n    /// @dev See addAllowanceIfNeeded.\\n    function _addAllowanceIfNeeded(\\n        address owner,\\n        address spender,\\n        uint256 amountNeeded /*(ERC20Internal, ERC20ExecuteExtension, ERC20BasicApproveExtension)*/\\n    ) internal virtual override {\\n        if (amountNeeded > 0 && !isSuperOperator(spender) && spender != _operator) {\\n            uint256 currentAllowance = _allowances[owner][spender];\\n            if (currentAllowance < amountNeeded) {\\n                _approveFor(owner, spender, amountNeeded);\\n            }\\n        }\\n    }\\n\\n    /// @dev See approveFor.\\n    function _approveFor(\\n        address owner,\\n        address spender,\\n        uint256 amount /*(ERC20BasicApproveExtension, ERC20Internal)*/\\n    ) internal virtual override {\\n        require(owner != address(0) && spender != address(0), \\\"INVALID_OWNER_||_SPENDER\\\");\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /// @dev See transfer.\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount /*(ERC20Internal, ERC20ExecuteExtension)*/\\n    ) internal virtual override {\\n        require(to != address(0), \\\"NOT_TO_ZEROADDRESS\\\");\\n        require(to != address(this), \\\"NOT_TO_THIS\\\");\\n        uint256 currentBalance = _balances[from];\\n        require(currentBalance >= amount, \\\"INSUFFICIENT_FUNDS\\\");\\n        _balances[from] = currentBalance - amount;\\n        _balances[to] += amount;\\n        emit Transfer(from, to, amount);\\n    }\\n\\n    /// @dev Mint tokens for a recipient.\\n    /// @param to The recipient address.\\n    /// @param amount The number of token to mint.\\n    function _mint(address to, uint256 amount) internal {\\n        require(to != address(0), \\\"NOT_TO_ZEROADDRESS\\\");\\n        require(amount > 0, \\\"MINT_O_TOKENS\\\");\\n        uint256 currentTotalSupply = _totalSupply;\\n        uint256 newTotalSupply = currentTotalSupply + amount;\\n        require(newTotalSupply > currentTotalSupply, \\\"OVERFLOW\\\");\\n        _totalSupply = newTotalSupply;\\n        _balances[to] += amount;\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    /// @dev Burn tokens from an address.\\n    /// @param from The address whose tokens to burn.\\n    /// @param amount The number of token to burn.\\n    function _burn(address from, uint256 amount) internal {\\n        require(amount > 0, \\\"BURN_O_TOKENS\\\");\\n        if (_msgSender() != from && !_superOperators[_msgSender()] && _msgSender() != _operator) {\\n            uint256 currentAllowance = _allowances[from][_msgSender()];\\n            if (currentAllowance != ~uint256(0)) {\\n                // save gas when allowance is maximal by not reducing it (see https://github.com/ethereum/EIPs/issues/717)\\n                require(currentAllowance >= amount, \\\"INSUFFICIENT_ALLOWANCE\\\");\\n                _allowances[from][_msgSender()] = currentAllowance - amount;\\n            }\\n        }\\n\\n        uint256 currentBalance = _balances[from];\\n        require(currentBalance >= amount, \\\"INSUFFICIENT_FUNDS\\\");\\n        _balances[from] = currentBalance - amount;\\n        _totalSupply -= amount;\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x21abee15baa9d3ba0016b24e3dce6eb47020edc57cfcc92eb24bc554939eaad9\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/ERC20/ERC20Token.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"./ERC20BaseToken.sol\\\";\\nimport \\\"./extensions/ERC20BasicApproveExtension.sol\\\";\\nimport \\\"../WithPermit.sol\\\";\\nimport \\\"../ERC677/extensions/ERC677Extension.sol\\\";\\nimport \\\"../../interfaces/IERC677Receiver.sol\\\";\\n\\ncontract ERC20Token is ERC20BasicApproveExtension, ERC677Extension, WithPermit, ERC20BaseToken {\\n    // /////////////////// CONSTRUCTOR ////////////////////\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        address admin,\\n        address operator\\n    )\\n        ERC20BaseToken(name, symbol, admin, operator) // solhint-disable-next-line no-empty-blocks\\n    {}\\n\\n    function mint(address to, uint256 amount) external onlyAdmin {\\n        _mint(to, amount);\\n    }\\n\\n    /// @notice Function to permit the expenditure of ERC20 token by a nominated spender\\n    /// @param owner The owner of the ERC20 tokens\\n    /// @param spender The nominated spender of the ERC20 tokens\\n    /// @param value The value (allowance) of the ERC20 tokens that the nominated spender will be allowed to spend\\n    /// @param deadline The deadline for granting permission to the spender\\n    /// @param v The final 1 byte of signature\\n    /// @param r The first 32 bytes of signature\\n    /// @param s The second 32 bytes of signature\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public override {\\n        checkApproveFor(owner, spender, value, deadline, v, r, s);\\n        _approveFor(owner, spender, value);\\n    }\\n}\\n\",\"keccak256\":\"0xafef8c26511c0f31c959b85808ea1bb6e9473ffb06c5875635af54823732b657\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/ERC20/extensions/ERC20BasicApproveExtension.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-0.8/utils/Context.sol\\\";\\nimport \\\"./ERC20Internal.sol\\\";\\nimport \\\"../../../Libraries/BytesUtil.sol\\\";\\n\\nabstract contract ERC20BasicApproveExtension is ERC20Internal, Context {\\n    /// @notice Approve `target` to spend `amount` and call it with data.\\n    /// @param target The address to be given rights to transfer and destination of the call.\\n    /// @param amount The number of tokens allowed.\\n    /// @param data The bytes for the call.\\n    /// @return The data of the call.\\n    function approveAndCall(\\n        address target,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external payable returns (bytes memory) {\\n        require(BytesUtil.doFirstParamEqualsAddress(data, _msgSender()), \\\"FIRST_PARAM_NOT_SENDER\\\");\\n\\n        _approveFor(_msgSender(), target, amount);\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returnData) = target.call{value: msg.value}(data);\\n        require(success, string(returnData));\\n        return returnData;\\n    }\\n\\n    /// @notice Temporarily approve `target` to spend `amount` and call it with data.\\n    /// Previous approvals remains unchanged.\\n    /// @param target The destination of the call, allowed to spend the amount specified\\n    /// @param amount The number of tokens allowed to spend.\\n    /// @param data The bytes for the call.\\n    /// @return The data of the call.\\n    function paidCall(\\n        address target,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external payable returns (bytes memory) {\\n        require(BytesUtil.doFirstParamEqualsAddress(data, _msgSender()), \\\"FIRST_PARAM_NOT_SENDER\\\");\\n\\n        if (amount > 0) {\\n            _addAllowanceIfNeeded(_msgSender(), target, amount);\\n        }\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returnData) = target.call{value: msg.value}(data);\\n        require(success, string(returnData));\\n\\n        return returnData;\\n    }\\n}\\n\",\"keccak256\":\"0x6c61a828b720af37167a9ca7f914a5ba3fd02d6846ac2304f1a844f12032ba2a\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/ERC20/extensions/ERC20Internal.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nabstract contract ERC20Internal {\\n    function _approveFor(\\n        address owner,\\n        address target,\\n        uint256 amount\\n    ) internal virtual;\\n\\n    function _addAllowanceIfNeeded(\\n        address owner,\\n        address spender,\\n        uint256 amountNeeded\\n    ) internal virtual;\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0x016db35dc3c8fad3cedc08f3152e3b90b7adb4d961c5ac08c03106e18535d10e\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/ERC2771Handler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/// @dev minimal ERC2771 handler to keep bytecode-size down.\\n/// based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/metatx/ERC2771Context.sol\\n\\ncontract ERC2771Handler {\\n    address internal _trustedForwarder;\\n\\n    function __ERC2771Handler_initialize(address forwarder) internal {\\n        _trustedForwarder = forwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function getTrustedForwarder() external view returns (address trustedForwarder) {\\n        return _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b78a86fc419fc78e618cb6c7892c2c66c4d4a9cac7848d33d91d68aab755caa\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/ERC677/extensions/ERC677Extension.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"../../../interfaces/IERC677.sol\\\";\\nimport \\\"../../../interfaces/IERC677Receiver.sol\\\";\\nimport \\\"../../ERC20/extensions/ERC20Internal.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8/utils/Address.sol\\\";\\n\\nabstract contract ERC677Extension is ERC20Internal, IERC677 {\\n    using Address for address;\\n\\n    /// @notice Transfers tokens to an address with _data if the recipient is a contact.\\n    /// @param _to The address to transfer to.\\n    /// @param _value The amount to be transferred.\\n    /// @param _data The extra data to be passed to the receiving contract.\\n    function transferAndCall(\\n        address _to,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external override returns (bool success) {\\n        _transfer(msg.sender, _to, _value);\\n        if (_to.isContract()) {\\n            IERC677Receiver receiver = IERC677Receiver(_to);\\n            receiver.onTokenTransfer(msg.sender, _value, _data);\\n        }\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xb3182f6f36b12aaa9c11c862835436c0ebdd6e578f7b73c30a1c52a94be62bad\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/WithAdmin.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\ncontract WithAdmin {\\n    address internal _admin;\\n\\n    /// @dev Emits when the contract administrator is changed.\\n    /// @param oldAdmin The address of the previous administrator.\\n    /// @param newAdmin The address of the new administrator.\\n    event AdminChanged(address oldAdmin, address newAdmin);\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == _admin, \\\"ADMIN_ONLY\\\");\\n        _;\\n    }\\n\\n    /// @dev Get the current administrator of this contract.\\n    /// @return The current administrator of this contract.\\n    function getAdmin() external view returns (address) {\\n        return _admin;\\n    }\\n\\n    /// @dev Change the administrator to be `newAdmin`.\\n    /// @param newAdmin The address of the new administrator.\\n    function changeAdmin(address newAdmin) external {\\n        require(msg.sender == _admin, \\\"ADMIN_ACCESS_DENIED\\\");\\n        emit AdminChanged(_admin, newAdmin);\\n        _admin = newAdmin;\\n    }\\n}\\n\",\"keccak256\":\"0xf2ce40f1b23052a50a5b2d5ad61fbc04ab6c9fb2e5b1dba17ccddf4507e4649f\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/WithPermit.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-0.8/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../common/interfaces/IERC20Extended.sol\\\";\\nimport \\\"../../common/Base/TheSandbox712.sol\\\";\\n\\n/// @title Permit contract\\n/// @notice This contract manages approvals of SAND via signature\\nabstract contract WithPermit is TheSandbox712, IERC20Permit {\\n    mapping(address => uint256) public _nonces;\\n\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /// @notice Function to permit the expenditure of ERC20 token by a nominated spender\\n    /// @param owner The owner of the ERC20 tokens\\n    /// @param spender The nominated spender of the ERC20 tokens\\n    /// @param value The value (allowance) of the ERC20 tokens that the nominated spender will be allowed to spend\\n    /// @param deadline The deadline for granting permission to the spender\\n    /// @param v The final 1 byte of signature\\n    /// @param r The first 32 bytes of signature\\n    /// @param s The second 32 bytes of signature\\n    function checkApproveFor(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        require(deadline >= block.timestamp, \\\"PAST_DEADLINE\\\");\\n        bytes32 digest =\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    _DOMAIN_SEPARATOR,\\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _nonces[owner]++, deadline))\\n                )\\n            );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNATURE\\\");\\n    }\\n\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _DOMAIN_SEPARATOR;\\n    }\\n\\n    function nonces(address owner) external view override returns (uint256) {\\n        return _nonces[owner];\\n    }\\n}\\n\",\"keccak256\":\"0xae30f1345fee6d0e3bb94859773639068cba0bc2c4bfceb3aa75986150eeb5ba\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/WithSuperOperators.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\nimport \\\"./WithAdmin.sol\\\";\\n\\ncontract WithSuperOperators is WithAdmin {\\n    mapping(address => bool) internal _superOperators;\\n\\n    event SuperOperator(address superOperator, bool enabled);\\n\\n    /// @notice Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights).\\n    /// @param superOperator address that will be given/removed superOperator right.\\n    /// @param enabled set whether the superOperator is enabled or disabled.\\n    function setSuperOperator(address superOperator, bool enabled) external {\\n        require(msg.sender == _admin, \\\"only admin is allowed to add super operators\\\");\\n        _superOperators[superOperator] = enabled;\\n        emit SuperOperator(superOperator, enabled);\\n    }\\n\\n    /// @notice check whether address `who` is given superOperator rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has superOperator rights.\\n    function isSuperOperator(address who) public view returns (bool) {\\n        return _superOperators[who];\\n    }\\n}\\n\",\"keccak256\":\"0xa0d9b0e08ccae5e6b1f56e41ef750a68686d8958bc398369ac283aa4440f87ab\",\"license\":\"MIT\"},\"src/solc_0.8/common/Libraries/BytesUtil.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nlibrary BytesUtil {\\n    uint256 private constant DATA_MIN_LENGTH = 68;\\n\\n    /// @dev Check if the data == _address.\\n    /// @param data The bytes passed to the function.\\n    /// @param _address The address to compare to.\\n    /// @return Whether the first param == _address.\\n    function doFirstParamEqualsAddress(bytes memory data, address _address) internal pure returns (bool) {\\n        if (data.length < DATA_MIN_LENGTH) {\\n            return false;\\n        }\\n        uint256 value;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            value := mload(add(data, 36))\\n        }\\n        return value == uint256(uint160(_address));\\n    }\\n}\\n\",\"keccak256\":\"0x3a7bfc1ad1fb8d784691a344ba752ca5591136bec45c63065256a9332ddd5cee\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IAssetAttributesRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\npragma experimental ABIEncoderV2;\\n\\ninterface IAssetAttributesRegistry {\\n    struct GemEvent {\\n        uint16[] gemIds;\\n        bytes32 blockHash;\\n    }\\n\\n    struct AssetGemsCatalystData {\\n        uint256 assetId;\\n        uint16 catalystContractId;\\n        uint16[] gemContractIds;\\n    }\\n\\n    function getRecord(uint256 assetId)\\n        external\\n        view\\n        returns (\\n            bool exists,\\n            uint16 catalystId,\\n            uint16[] memory gemIds\\n        );\\n\\n    function getAttributes(uint256 assetId, GemEvent[] calldata events) external view returns (uint32[] memory values);\\n\\n    function setCatalyst(\\n        uint256 assetId,\\n        uint16 catalystId,\\n        uint16[] calldata gemIds\\n    ) external;\\n\\n    function setCatalystWhenDepositOnOtherLayer(\\n        uint256 assetId,\\n        uint16 catalystId,\\n        uint16[] calldata gemIds\\n    ) external;\\n\\n    function setCatalystWithBlockNumber(\\n        uint256 assetId,\\n        uint16 catalystId,\\n        uint16[] calldata gemIds,\\n        uint64 blockNumber\\n    ) external;\\n\\n    function addGems(uint256 assetId, uint16[] calldata gemIds) external;\\n\\n    function setMigrationContract(address _migrationContract) external;\\n\\n    function getCatalystRegistry() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7f12fa565160d7598f702dcae0e511943be9c6eaa4dc338f3439a36f0a6086c9\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IAttributes.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IAssetAttributesRegistry.sol\\\";\\n\\ninterface IAttributes {\\n    function getAttributes(uint256 assetId, IAssetAttributesRegistry.GemEvent[] calldata events)\\n        external\\n        view\\n        returns (uint32[] memory values);\\n}\\n\",\"keccak256\":\"0x4cbdba9ad3fae8334fe614ae28fb3136454eada28f13f911ffce9c8c701c56a7\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.2;\\n\\n/// @dev see https://eips.ethereum.org/EIPS/eip-20\\ninterface IERC20 {\\n    /// @notice emitted when tokens are transfered from one address to another.\\n    /// @param from address from which the token are transfered from (zero means tokens are minted).\\n    /// @param to destination address which the token are transfered to (zero means tokens are burnt).\\n    /// @param value amount of tokens transferred.\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice emitted when owner grant transfer rights to another address\\n    /// @param owner address allowing its token to be transferred.\\n    /// @param spender address allowed to spend on behalf of `owner`\\n    /// @param value amount of tokens allowed.\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice return the current total amount of tokens owned by all holders.\\n    /// @return supply total number of tokens held.\\n    function totalSupply() external view returns (uint256 supply);\\n\\n    /// @notice return the number of tokens held by a particular address.\\n    /// @param who address being queried.\\n    /// @return balance number of token held by that address.\\n    function balanceOf(address who) external view returns (uint256 balance);\\n\\n    /// @notice transfer tokens to a specific address.\\n    /// @param to destination address receiving the tokens.\\n    /// @param value number of tokens to transfer.\\n    /// @return success whether the transfer succeeded.\\n    function transfer(address to, uint256 value) external returns (bool success);\\n\\n    /// @notice transfer tokens from one address to another.\\n    /// @param from address tokens will be sent from.\\n    /// @param to destination address receiving the tokens.\\n    /// @param value number of tokens to transfer.\\n    /// @return success whether the transfer succeeded.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool success);\\n\\n    /// @notice approve an address to spend on your behalf.\\n    /// @param spender address entitled to transfer on your behalf.\\n    /// @param value amount allowed to be transfered.\\n    /// @param success whether the approval succeeded.\\n    function approve(address spender, uint256 value) external returns (bool success);\\n\\n    /// @notice return the current allowance for a particular owner/spender pair.\\n    /// @param owner address allowing spender.\\n    /// @param spender address allowed to spend.\\n    /// @return amount number of tokens `spender` can spend on behalf of `owner`.\\n    function allowance(address owner, address spender) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x9fe745d44fdcd7987682221d68b7a66d0784fbd81ae1d4e43a6c766347733a96\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC20Extended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.2;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IERC20Extended is IERC20 {\\n    function burnFor(address from, uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n\\n    function approveFor(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xf02074902aff81db019aac8808c524d2ab77e1cb216f5327992ed7db95fee919\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC677.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\ninterface IERC677 {\\n    function transferAndCall(\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool success);\\n    //TODO: decide whether we use that event, as it collides with ERC20 Transfer event\\n    //event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\\n}\\n\",\"keccak256\":\"0xc262cf7c3df1aa7253e228c53e74c78309fac149f73502b1c75e1f92fccb74ae\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC677Receiver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\ninterface IERC677Receiver {\\n    function onTokenTransfer(\\n        address _sender,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xbcb1803cae41333e55f92df0fd392afe073f5ef455ec482df0b6062cecb03720\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a35760003560e01c8063715018a6116100ee578063a9aff9c111610097578063c056975811610071578063c056975814610373578063ce1b815f14610386578063da74222814610397578063f2fde38b146103aa576101a3565b8063a9aff9c114610345578063ac9fe42114610358578063aeb845d11461036b576101a3565b80638c4d91ed116100c85780638c4d91ed146103195780638da5cb5b146103215780638f28397014610332576101a3565b8063715018a6146102cc57806378bc8a19146102d45780637e8ee42f146102f9576101a3565b8063572b6c0511610150578063654b748a1161012a578063654b748a1461026d5780636d916839146102995780636e9960c3146102ac576101a3565b8063572b6c0514610226578063590d0dce14610248578063645c5f9e1461025b576101a3565b8063362e7e8c11610181578063362e7e8c146101ed57806352eea03014610200578063550d629c14610213576101a3565b8063080b6b9f146101a8578063141376f9146101b25780632a6a6451146101da575b600080fd5b6101b06103bd565b005b6101c56101c0366004611984565b6103ca565b60405190151581526020015b60405180910390f35b6101b06101e83660046117f9565b6103e9565b6101b06101fb3660046116e7565b6104db565b6101b061020e3660046116e7565b6105d8565b6101b0610221366004611839565b6106cd565b6101c56102343660046116cb565b6002546001600160a01b0390811691161490565b6101b06102563660046117f9565b610af1565b6005545b6040519081526020016101d1565b6101c561027b3660046116cb565b6001600160a01b031660009081526001602052604090205460ff1690565b6101b06102a7366004611767565b610b5d565b6102b4610bb9565b6040516001600160a01b0390911681526020016101d1565b6101b0610bc9565b6102e76102e2366004611984565b610c99565b60405160ff90911681526020016101d1565b61030c6103073660046119bc565b610d75565b6040516101d19190611a2b565b60045461025f565b6003546001600160a01b03166102b4565b6101b06103403660046116cb565b610e81565b6101b0610353366004611767565b610f51565b6101b06103663660046117c1565b610fad565b6101b06110ae565b6101c5610381366004611984565b6110b8565b6002546001600160a01b03166102b4565b6101b06103a53660046116cb565b6110c4565b6101b06103b83660046116cb565b611194565b6103c860001961133c565b565b6000806103d683611543565b6001600160a01b0316141590505b919050565b6103f2836115b6565b60006103fd83611632565b90506001600160a01b03811661045a5760405162461bcd60e51b815260206004820152601760248201527f434154414c5953545f444f45535f4e4f545f455849535400000000000000000060448201526064015b60405180910390fd5b6040517f1dd319cb0000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015260248201849052821690631dd319cb90604401600060405180830381600087803b1580156104bd57600080fd5b505af11580156104d1573d6000803e3d6000fd5b5050505050505050565b60005b838110156105d05784848281811061050657634e487b7160e01b600052603260045260246000fd5b905060200201602081019061051b9190611984565b61ffff1615801590610554575082828281811061054857634e487b7160e01b600052603260045260246000fd5b90506020020135600014155b156105be576105be8686868481811061057d57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906105929190611984565b8585858181106105b257634e487b7160e01b600052603260045260246000fd5b90506020020135610af1565b806105c881611c00565b9150506104de565b505050505050565b60005b838110156105d05784848281811061060357634e487b7160e01b600052603260045260246000fd5b90506020020160208101906106189190611984565b61ffff1615801590610651575082828281811061064557634e487b7160e01b600052603260045260246000fd5b90506020020135600014155b156106bb576106bb8686868481811061067a57634e487b7160e01b600052603260045260246000fd5b905060200201602081019061068f9190611984565b8585858181106106af57634e487b7160e01b600052603260045260246000fd5b905060200201356103e9565b806106c581611c00565b9150506105db565b6000546001600160a01b03166106e161165f565b6001600160a01b0316146107375760405162461bcd60e51b815260206004820152600e60248201527f4e4f545f415554484f52495a45440000000000000000000000000000000000006044820152606401610451565b600554600454610100918391869161074e91611bc5565b6107589190611bc5565b6107629190611bc5565b106107d55760405162461bcd60e51b815260206004820152603a60248201527f47656d73436174616c7973747352656769737472793a20546f6f206d616e792060448201527f67656d20616e6420636174616c79737420636f6e7472616374730000000000006064820152608401610451565b60005b8381101561095f57600085858381811061080257634e487b7160e01b600052603260045260246000fd5b905060200201602081019061081791906116cb565b90506000816001600160a01b031663caafdcff6040518163ffffffff1660e01b815260040160206040518083038186803b15801561085457600080fd5b505afa158015610868573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088c91906119a0565b60045490915061089d906001611bc5565b8161ffff16146108ef5760405162461bcd60e51b815260206004820152601360248201527f47454d5f49445f4e4f545f494e5f4f52444552000000000000000000000000006044820152606401610451565b50600480546001810182556000919091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03929092169190911790558061095781611c00565b9150506107d8565b5060005b81811015610aea57600083838381811061098d57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906109a291906116cb565b90506000816001600160a01b031663c7165bbb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156109df57600080fd5b505afa1580156109f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1791906119a0565b600554909150610a28906001611bc5565b8161ffff1614610a7a5760405162461bcd60e51b815260206004820152601860248201527f434154414c5953545f49445f4e4f545f494e5f4f5244455200000000000000006044820152606401610451565b50600580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039290921691909117905580610ae281611c00565b915050610963565b5050505050565b610afa836115b6565b6000610b0583611543565b90506001600160a01b03811661045a5760405162461bcd60e51b815260206004820152601260248201527f47454d5f444f45535f4e4f545f455849535400000000000000000000000000006044820152606401610451565b60005b82811015610aea57610ba785858584818110610b8c57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610ba19190611984565b84610af1565b80610bb181611c00565b915050610b60565b6000546001600160a01b03165b90565b610bd161165f565b6001600160a01b0316610bec6003546001600160a01b031690565b6001600160a01b031614610c425760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610451565b6003546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36003805473ffffffffffffffffffffffffffffffffffffffff19169055565b600080610ca583611632565b90506001600160a01b038116610cfd5760405162461bcd60e51b815260206004820152601760248201527f434154414c5953545f444f45535f4e4f545f45584953540000000000000000006044820152606401610451565b806001600160a01b03166309cba36b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d3657600080fd5b505afa158015610d4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6e9190611a0a565b9392505050565b60606000610d8286611632565b90506001600160a01b038116610dda5760405162461bcd60e51b815260206004820152601760248201527f434154414c5953545f444f45535f4e4f545f45584953540000000000000000006044820152606401610451565b6040517f74903c860000000000000000000000000000000000000000000000000000000081526001600160a01b038216906374903c8690610e2390889088908890600401611a75565b60006040518083038186803b158015610e3b57600080fd5b505afa158015610e4f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e7791908101906118a2565b9695505050505050565b6000546001600160a01b03163314610edb5760405162461bcd60e51b815260206004820152601360248201527f41444d494e5f4143434553535f44454e494544000000000000000000000000006044820152606401610451565b600054604080516001600160a01b03928316815291831660208301527f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f910160405180910390a16000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60005b82811015610aea57610f9b85858584818110610f8057634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610f959190611984565b846103e9565b80610fa581611c00565b915050610f54565b6000546001600160a01b0316331461102d5760405162461bcd60e51b815260206004820152602c60248201527f6f6e6c792061646d696e20697320616c6c6f77656420746f206164642073757060448201527f6572206f70657261746f727300000000000000000000000000000000000000006064820152608401610451565b6001600160a01b03821660008181526001602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168515159081179091558251938452908301527f44f92d27abdf4cfb6a7d712c3af68f3be086d4ca747ab802c36f67d6790060d8910160405180910390a15050565b6103c8600061133c565b6000806103d683611632565b6110cc61165f565b6001600160a01b03166110e76003546001600160a01b031690565b6001600160a01b03161461113d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610451565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f871264f4293af7d2865ae7eae628b228f4991c57cb45b39c99f0b774ebe2901890600090a250565b61119c61165f565b6001600160a01b03166111b76003546001600160a01b031690565b6001600160a01b03161461120d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610451565b6001600160a01b0381166112895760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610451565b6003546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6002546000906001600160a01b031633141561133557507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c610bc6565b5033610bc6565b60005b60045481101561143d576004818154811061136a57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316632b99174661138c61165f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b03909116600482015230602482015260448101859052606401602060405180830381600087803b1580156113f257600080fd5b505af1158015611406573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142a9190611968565b508061143581611c00565b91505061133f565b5060005b60055481101561153f576005818154811061146c57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316632b99174661148e61165f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b03909116600482015230602482015260448101859052606401602060405180830381600087803b1580156114f457600080fd5b505af1158015611508573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152c9190611968565b508061153781611c00565b915050611441565b5050565b6000808261ffff1611801561155e575060045461ffff831611155b156115ae576004611570600184611bdd565b61ffff168154811061159257634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031690506103e4565b5060006103e4565b806001600160a01b03166115c861165f565b6001600160a01b031614806115e357506115e361027b61165f565b61162f5760405162461bcd60e51b815260206004820152601260248201527f415554485f4143434553535f44454e49454400000000000000000000000000006044820152606401610451565b50565b6000808261ffff1611801561164d575060055461ffff831611155b156115ae576005611570600184611bdd565b60006116696112f2565b905090565b60008083601f84011261167f578081fd5b50813567ffffffffffffffff811115611696578182fd5b60208301915083602080830285010111156116b057600080fd5b9250929050565b805163ffffffff811681146103e457600080fd5b6000602082840312156116dc578081fd5b8135610d6e81611c47565b6000806000806000606086880312156116fe578081fd5b853561170981611c47565b9450602086013567ffffffffffffffff80821115611725578283fd5b61173189838a0161166e565b90965094506040880135915080821115611749578283fd5b506117568882890161166e565b969995985093965092949392505050565b6000806000806060858703121561177c578384fd5b843561178781611c47565b9350602085013567ffffffffffffffff8111156117a2578384fd5b6117ae8782880161166e565b9598909750949560400135949350505050565b600080604083850312156117d3578182fd5b82356117de81611c47565b915060208301356117ee81611c5c565b809150509250929050565b60008060006060848603121561180d578283fd5b833561181881611c47565b9250602084013561182881611c6a565b929592945050506040919091013590565b6000806000806040858703121561184e578384fd5b843567ffffffffffffffff80821115611865578586fd5b6118718883890161166e565b90965094506020870135915080821115611889578384fd5b506118968782880161166e565b95989497509550505050565b600060208083850312156118b4578182fd5b825167ffffffffffffffff808211156118cb578384fd5b818501915085601f8301126118de578384fd5b8151818111156118f0576118f0611c31565b838102604051601f19603f8301168101818110858211171561191457611914611c31565b604052828152858101935084860182860187018a1015611932578788fd5b8795505b8386101561195b57611947816116b7565b855260019590950194938601938601611936565b5098975050505050505050565b600060208284031215611979578081fd5b8151610d6e81611c5c565b600060208284031215611995578081fd5b8135610d6e81611c6a565b6000602082840312156119b1578081fd5b8151610d6e81611c6a565b600080600080606085870312156119d1578182fd5b84356119dc81611c6a565b935060208501359250604085013567ffffffffffffffff8111156119fe578283fd5b6118968782880161166e565b600060208284031215611a1b578081fd5b815160ff81168114610d6e578182fd5b6020808252825182820181905260009190848201906040850190845b81811015611a6957835163ffffffff1683529284019291840191600101611a47565b50909695505050505050565b83815260406020808301829052828201849052600091906060908185018682028601830188865b89811015611bb5577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa089840301845281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc18c3603018112611afc578889fd5b8b018388018135368390037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1018112611b33578a8bfd5b8201803567ffffffffffffffff811115611b4b578b8cfd5b8881023603841315611b5b578b8cfd5b8a8752918290528701908a908987015b81831015611b96578335611b7e81611c6a565b61ffff16815292890192600192909201918901611b6b565b9389013596890196909652505093850193925090840190600101611a9c565b50909a9950505050505050505050565b60008219821115611bd857611bd8611c1b565b500190565b600061ffff83811690831681811015611bf857611bf8611c1b565b039392505050565b6000600019821415611c1457611c14611c1b565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461162f57600080fd5b801515811461162f57600080fd5b61ffff8116811461162f57600080fdfea26469706673582212209a60c60868e9e4aa49f9f58e394ff72566f45b7760dd1c20767f388b4ad7c29464736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addGemsAndCatalysts(address[],address[])": {
        "params": {
          "catalysts": "array of catalysts to be added",
          "gems": "array of gems to be added"
        }
      },
      "batchBurnCatalysts(address,uint16[],uint256[])": {
        "params": {
          "amounts": "list of amounts of units to burn",
          "catalystIds": "list of catalysts to burn catalyst units from each",
          "from": "address of the beneficiary to burn on behalf of"
        }
      },
      "batchBurnGems(address,uint16[],uint256[])": {
        "params": {
          "amounts": "list of amounts of units to burn",
          "from": "address of the beneficiary to burn on behalf of",
          "gemIds": "list of gems to burn gem units from each"
        }
      },
      "burnCatalyst(address,uint16,uint256)": {
        "params": {
          "amount": "The number of catalyst tokens to burn.",
          "catalystId": "The id of the catalyst to burn.",
          "from": "The signing address for the tx."
        }
      },
      "burnDifferentCatalysts(address,uint16[],uint256)": {
        "params": {
          "amount": "amount to burn",
          "catalystIds": "list of catalysts to burn one catalyst from each",
          "from": "address of the beneficiary to burn on behalf of"
        }
      },
      "burnDifferentGems(address,uint16[],uint256)": {
        "params": {
          "amount": "amount units to burn",
          "from": "address of the beneficiary to burn on behalf of",
          "gemIds": "list of gems to burn one gem from each"
        }
      },
      "burnGem(address,uint16,uint256)": {
        "params": {
          "amount": "The number of gem tokens to burn.",
          "from": "The signing address for the tx.",
          "gemId": "The id of the gem to burn."
        }
      },
      "changeAdmin(address)": {
        "details": "Change the administrator to be `newAdmin`.",
        "params": {
          "newAdmin": "The address of the new administrator."
        }
      },
      "doesCatalystExist(uint16)": {
        "params": {
          "catalystId": "The catalyst being queried."
        },
        "returns": {
          "_0": "Whether the catalyst exists."
        }
      },
      "doesGemExist(uint16)": {
        "params": {
          "gemId": "The gem being queried."
        },
        "returns": {
          "_0": "Whether the gem exists."
        }
      },
      "getAdmin()": {
        "details": "Get the current administrator of this contract.",
        "returns": {
          "_0": "The current administrator of this contract."
        }
      },
      "getAttributes(uint16,uint256,(uint16[],bytes32)[])": {
        "params": {
          "assetId": "The asset tokenId.",
          "catalystId": "The catalyst identifier.",
          "events": "An array of GemEvents. Be aware that only gemEvents from the last CatalystApplied event onwards should be used to populate a query. If gemEvents from multiple CatalystApplied events are included the output values will be incorrect."
        },
        "returns": {
          "values": "An array of values for each gem present in the asset."
        }
      },
      "getMaxGems(uint16)": {
        "params": {
          "catalystId": "catalyst identifier"
        }
      },
      "isSuperOperator(address)": {
        "params": {
          "who": "The address to query."
        },
        "returns": {
          "_0": "whether the address has superOperator rights."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setSuperOperator(address,bool)": {
        "params": {
          "enabled": "set whether the superOperator is enabled or disabled.",
          "superOperator": "address that will be given/removed superOperator right."
        }
      },
      "setTrustedForwarder(address)": {
        "details": "Change the address of the trusted forwarder for meta-TX",
        "params": {
          "trustedForwarder": "The new trustedForwarder"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addGemsAndCatalysts(address[],address[])": {
        "notice": "Adds both arrays of gems and catalysts to registry"
      },
      "batchBurnCatalysts(address,uint16[],uint256[])": {
        "notice": "Burns few catalyst units from each catalyst id on behalf of a beneficiary"
      },
      "batchBurnGems(address,uint16[],uint256[])": {
        "notice": "Burns few gem units from each gem id on behalf of a beneficiary"
      },
      "burnCatalyst(address,uint16,uint256)": {
        "notice": "Burn a catalyst."
      },
      "burnDifferentCatalysts(address,uint16[],uint256)": {
        "notice": "Burns one catalyst unit from each catalyst id on behalf of a beneficiary"
      },
      "burnDifferentGems(address,uint16[],uint256)": {
        "notice": "Burns one gem unit from each gem id on behalf of a beneficiary"
      },
      "burnGem(address,uint16,uint256)": {
        "notice": "Burn a gem."
      },
      "doesCatalystExist(uint16)": {
        "notice": "Query whether a giving catalyst exists."
      },
      "doesGemExist(uint16)": {
        "notice": "Query whether a given gem exists."
      },
      "getAttributes(uint16,uint256,(uint16[],bytes32)[])": {
        "notice": "Returns the values for each gem included in a given asset."
      },
      "getMaxGems(uint16)": {
        "notice": "Returns the maximum number of gems for a given catalyst"
      },
      "isSuperOperator(address)": {
        "notice": "check whether address `who` is given superOperator rights."
      },
      "setSuperOperator(address,bool)": {
        "notice": "Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights)."
      }
    },
    "notice": "Contract managing the Gems and Catalysts Each Gems and Catalyst must be registered here. Each new Gem get assigned a new id (starting at 1) Each new Catalyst get assigned a new id (starting at 1)",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 23256,
        "contract": "src/solc_0.8/catalyst/GemsCatalystsRegistry.sol:GemsCatalystsRegistry",
        "label": "_admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 23488,
        "contract": "src/solc_0.8/catalyst/GemsCatalystsRegistry.sol:GemsCatalystsRegistry",
        "label": "_superOperators",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 21371,
        "contract": "src/solc_0.8/catalyst/GemsCatalystsRegistry.sol:GemsCatalystsRegistry",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 7,
        "contract": "src/solc_0.8/catalyst/GemsCatalystsRegistry.sol:GemsCatalystsRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 18024,
        "contract": "src/solc_0.8/catalyst/GemsCatalystsRegistry.sol:GemsCatalystsRegistry",
        "label": "_gems",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_contract(Gem)17992)dyn_storage"
      },
      {
        "astId": 18028,
        "contract": "src/solc_0.8/catalyst/GemsCatalystsRegistry.sol:GemsCatalystsRegistry",
        "label": "_catalysts",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_contract(Catalyst)17467)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(Catalyst)17467)dyn_storage": {
        "base": "t_contract(Catalyst)17467",
        "encoding": "dynamic_array",
        "label": "contract Catalyst[]",
        "numberOfBytes": "32"
      },
      "t_array(t_contract(Gem)17992)dyn_storage": {
        "base": "t_contract(Gem)17992",
        "encoding": "dynamic_array",
        "label": "contract Gem[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Catalyst)17467": {
        "encoding": "inplace",
        "label": "contract Catalyst",
        "numberOfBytes": "20"
      },
      "t_contract(Gem)17992": {
        "encoding": "inplace",
        "label": "contract Gem",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}