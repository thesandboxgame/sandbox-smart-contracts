{
  "address": "0x282C059Fca744210Dc4c55505DC04EA880a12Ae4",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "Minter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "superOperator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "SuperOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newForwarder",
          "type": "address"
        }
      ],
      "name": "TrustedForwarderSet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "approveFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "batchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "sizes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "xs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ys",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "batchTransferQuad",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "changeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "height",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "isMinter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "isSuperOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mintQuad",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAllFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "superOperator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setSuperOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "id",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "transferQuad",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "width",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xee5037791797831ddd01a766fb2511ef5eaa1aa40741c9a50842079087034e3b",
  "receipt": {
    "to": null,
    "from": "0x5F890c9522dCE5670d741D4277BFCC2d9cA8Af02",
    "contractAddress": "0x282C059Fca744210Dc4c55505DC04EA880a12Ae4",
    "transactionIndex": 0,
    "gasUsed": "4525187",
    "logsBloom": "0x
    "blockHash": "0xfabcf81050f60ff0e841e3f8954512b6904def769610139efca2a244bcf72e01",
    "transactionHash": "0xee5037791797831ddd01a766fb2511ef5eaa1aa40741c9a50842079087034e3b",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5655622,
        "transactionHash": "0xee5037791797831ddd01a766fb2511ef5eaa1aa40741c9a50842079087034e3b",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02",
          "0x00000000000000000000000009207a6efee346cb3e4a54ac18523e3715d38b3f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000c8f56b85b65b453000000000000000000000000000000000000000000000004323429010c2a6b100000000000000000000000000000000000000000000000496d5a529fa393307600000000000000000000000000000000000000000000000425a4d248b0c4b6bd00000000000000000000000000000000000000000000004979e9a957fef8e4c9",
        "logIndex": 0,
        "blockHash": "0xfabcf81050f60ff0e841e3f8954512b6904def769610139efca2a244bcf72e01"
      }
    ],
    "blockNumber": 5655622,
    "cumulativeGasUsed": "4525187",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8647b3c46fdd7d95d4038ddf2cc1e589",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"Minter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"superOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SuperOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newForwarder\",\"type\":\"address\"}],\"name\":\"TrustedForwarderSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approveFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"batchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"sizes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"xs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ys\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"batchTransferQuad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"height\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isSuperOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintQuad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAllFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"superOperator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setSuperOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"id\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferQuad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"width\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"params\":{\"id\":\"The id of the token.\",\"operator\":\"The address receiving the approval.\"}},\"approveFor(address,address,uint256)\":{\"params\":{\"id\":\"The id of the token.\",\"operator\":\"The address receiving the approval.\",\"sender\":\"The address giving the approval.\"}},\"balanceOf(address)\":{\"params\":{\"owner\":\"The address to look for.\"},\"returns\":{\"_0\":\"The number of tokens owned by the address.\"}},\"batchTransferQuad(address,address,uint256[],uint256[],uint256[],bytes)\":{\"params\":{\"data\":\"additional data\",\"from\":\"current owner of the quad\",\"sizes\":\"list of sizes for each quad\",\"to\":\"destination\",\"xs\":\"list of bottom left x coordinates for each quad\",\"ys\":\"list of bottom left y coordinates for each quad\"}},\"burn(uint256)\":{\"params\":{\"id\":\"The token which will be burnt.\"}},\"burnFrom(address,uint256)\":{\"params\":{\"from\":\"address whose token is to be burnt.\",\"id\":\"The token which will be burnt.\"}},\"changeAdmin(address)\":{\"details\":\"Change the administrator to be `newAdmin`.\",\"params\":{\"newAdmin\":\"The address of the new administrator.\"}},\"exists(uint256,uint256,uint256)\":{\"params\":{\"size\":\"size of the quad\",\"x\":\"x coordinate\",\"y\":\"y coordinate\"},\"returns\":{\"_0\":\"does the LAND exist\"}},\"getAdmin()\":{\"details\":\"Get the current administrator of this contract.\",\"returns\":{\"_0\":\"The current administrator of this contract.\"}},\"getApproved(uint256)\":{\"params\":{\"id\":\"The id of the token.\"},\"returns\":{\"_0\":\"The address of the operator.\"}},\"getTrustedForwarder()\":{\"returns\":{\"_0\":\"trustedForwarder address of the trusted forwarder\"}},\"getX(uint256)\":{\"params\":{\"id\":\"tokenId\"},\"returns\":{\"_0\":\"the x coordinates\"}},\"getY(uint256)\":{\"params\":{\"id\":\"tokenId\"},\"returns\":{\"_0\":\"the y coordinates\"}},\"height()\":{\"returns\":{\"_0\":\"height\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"operator\":\"The address of the operator.\",\"owner\":\"The address of the owner.\"},\"returns\":{\"_0\":\"isOperator The status of the approval.\"}},\"isMinter(address)\":{\"params\":{\"who\":\"The address to query.\"},\"returns\":{\"_0\":\"whether the address has minter rights.\"}},\"isSuperOperator(address)\":{\"params\":{\"who\":\"The address to query.\"},\"returns\":{\"_0\":\"whether the address has superOperator rights.\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"address to check\"},\"returns\":{\"_0\":\"is trusted\"}},\"mintQuad(address,uint256,uint256,uint256,bytes)\":{\"params\":{\"data\":\"extra data to pass to the transfer\",\"size\":\"The size of the new quad\",\"user\":\"The recipient of the new quad\",\"x\":\"The top left x coordinate of the new quad\",\"y\":\"The top left y coordinate of the new quad\"}},\"name()\":{\"returns\":{\"_0\":\"The name of the token contract\"}},\"ownerOf(uint256)\":{\"params\":{\"id\":\"The id of the token.\"},\"returns\":{\"owner\":\"The address of the token owner.\"}},\"safeBatchTransferFrom(address,address,uint256[],bytes)\":{\"params\":{\"data\":\"Additional data.\",\"from\":\"The sender of the token.\",\"ids\":\"The ids of the tokens.\",\"to\":\"The recipient of the token.\"}},\"safeTransferFrom(address,address,uint256)\":{\"params\":{\"from\":\"The sender of the token.\",\"id\":\"The id of the token.\",\"to\":\"The recipient of the token.\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"params\":{\"data\":\"Additional data.\",\"from\":\"The sender of the token.\",\"id\":\"The id of the token.\",\"to\":\"The recipient of the token.\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"approved\":\"The determination of the approval.\",\"operator\":\"The address receiving the approval.\"}},\"setApprovalForAllFor(address,address,bool)\":{\"params\":{\"approved\":\"The determination of the approval.\",\"operator\":\"The address receiving the approval.\",\"sender\":\"The address giving the approval.\"}},\"setMinter(address,bool)\":{\"params\":{\"enabled\":\"set whether the minter is enabled or disabled.\",\"minter\":\"address that will be given/removed minter right.\"}},\"setSuperOperator(address,bool)\":{\"params\":{\"enabled\":\"set whether the superOperator is enabled or disabled.\",\"superOperator\":\"address that will be given/removed superOperator right.\"}},\"setTrustedForwarder(address)\":{\"details\":\"Change the address of the trusted forwarder for meta-TX\",\"params\":{\"trustedForwarder\":\"The new trustedForwarder\"}},\"supportsInterface(bytes4)\":{\"params\":{\"id\":\"The id of the interface\"},\"returns\":{\"_0\":\"True if the interface is supported\"}},\"symbol()\":{\"returns\":{\"_0\":\"The symbol of the token contract\"}},\"tokenURI(uint256)\":{\"params\":{\"id\":\"The id of the token\"},\"returns\":{\"_0\":\"The URI of the token\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"from\":\"The sender of the token.\",\"id\":\"The id of the token.\",\"to\":\"The recipient of the token.\"}},\"transferQuad(address,address,uint256,uint256,uint256,bytes)\":{\"params\":{\"data\":\"additional data\",\"from\":\"current owner of the quad\",\"size\":\"size of the quad\",\"to\":\"destination\",\"x\":\"The top left x coordinate of the quad\",\"y\":\"The top left y coordinate of the quad\"}},\"width()\":{\"returns\":{\"_0\":\"width\"}}},\"title\":\"LAND token on L2\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Approve an operator to spend tokens on the senders behalf.\"},\"approveFor(address,address,uint256)\":{\"notice\":\"Approve an operator to spend tokens on the sender behalf.\"},\"balanceOf(address)\":{\"notice\":\"Get the number of tokens owned by an address.\"},\"batchTransferQuad(address,address,uint256[],uint256[],uint256[],bytes)\":{\"notice\":\"transfer multiple quad (aligned to a quad tree with size 3, 6, 12 or 24 only)\"},\"burn(uint256)\":{\"notice\":\"Burns token `id`.\"},\"burnFrom(address,uint256)\":{\"notice\":\"Burn token `id` from `from`.\"},\"changeAdmin(address)\":{\"notice\":\"Change the admin of the contract\"},\"exists(uint256,uint256,uint256)\":{\"notice\":\"Checks if a LAND exists by its coordinates\"},\"getAdmin()\":{\"notice\":\"Get the current admin\"},\"getApproved(uint256)\":{\"notice\":\"Get the approved operator for a specific token.\"},\"getTrustedForwarder()\":{\"notice\":\"Get the current trusted forwarder\"},\"getX(uint256)\":{\"notice\":\"x coordinate of Land token\"},\"getY(uint256)\":{\"notice\":\"y coordinate of Land token\"},\"height()\":{\"notice\":\"total height of the map\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Check if the sender approved the operator.\"},\"isMinter(address)\":{\"notice\":\"check whether address `who` is given minter rights.\"},\"isSuperOperator(address)\":{\"notice\":\"check whether address `who` is given superOperator rights.\"},\"isTrustedForwarder(address)\":{\"notice\":\"Checks if an address is a trusted forwarder\"},\"mintQuad(address,uint256,uint256,uint256,bytes)\":{\"notice\":\"Mint a new quad (aligned to a quad tree with size 1, 3, 6, 12 or 24 only)\"},\"name()\":{\"notice\":\"Return the name of the token contract\"},\"ownerOf(uint256)\":{\"notice\":\"Get the owner of a token.\"},\"safeBatchTransferFrom(address,address,uint256[],bytes)\":{\"notice\":\"Transfer many tokens between 2 addresses, while ensuring the receiving contract has a receiver method.\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"Transfer a token between 2 addresses letting the receiver know of the transfer.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Transfer a token between 2 addresses letting the receiver knows of the transfer.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Set the approval for an operator to manage all the tokens of the sender.\"},\"setApprovalForAllFor(address,address,bool)\":{\"notice\":\"Set the approval for an operator to manage all the tokens of the sender.\"},\"setMinter(address,bool)\":{\"notice\":\"Enable or disable the ability of `minter` to transfer tokens of all (minter rights).\"},\"setSuperOperator(address,bool)\":{\"notice\":\"Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights).\"},\"supportsInterface(bytes4)\":{\"notice\":\"Check if the contract supports an interface 0x01ffc9a7 is ERC-165 0x80ac58cd is ERC-721 0x5b5e139f is ERC-721 metadata\"},\"symbol()\":{\"notice\":\"Return the symbol of the token contract\"},\"tokenURI(uint256)\":{\"notice\":\"Return the URI of a specific token\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer a token between 2 addresses.\"},\"transferQuad(address,address,uint256,uint256,uint256,bytes)\":{\"notice\":\"transfer one quad (aligned to a quad tree with size 3, 6, 12 or 24 only)\"},\"width()\":{\"notice\":\"total width of the map\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/solc_0.8/polygon/child/land/PolygonLandV1.sol\":\"PolygonLandV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x2f359f9d5c56394e60d74401487ab55d8ef0012907b07c9abbb8f998bf5ddfec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/ERC2771Handler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\n/**\\n * @title ERC2771Handler\\n * @author The Sandbox\\n * @notice Handle meta-transactions\\n * @dev minimal ERC2771 handler to keep bytecode-size down\\n * based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.6.0/contracts/metatx/ERC2771Context.sol\\n * with an initializer for proxies and a mutable forwarder\\n */\\nabstract contract ERC2771Handler {\\n    address internal _trustedForwarder;\\n\\n    event TrustedForwarderSet(address indexed newForwarder);\\n\\n    /**\\n     * @dev Initializes the contract\\n     * @param forwarder trusted forwarder address\\n     */\\n    function __ERC2771Handler_initialize(address forwarder) internal {\\n        _trustedForwarder = forwarder;\\n        emit TrustedForwarderSet(_trustedForwarder);\\n    }\\n\\n    /**\\n     * @notice Checks if an address is a trusted forwarder\\n     * @param forwarder address to check\\n     * @return is trusted\\n     */\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    /**\\n     * @notice Get the current trusted forwarder\\n     * @return trustedForwarder address of the trusted forwarder\\n     */\\n    function getTrustedForwarder() external view returns (address) {\\n        return _trustedForwarder;\\n    }\\n\\n    /**\\n     * @dev if the call comes from the trusted forwarder, it gets the real sender by checking the encoded address in the data\\n     * @return sender address of the real sender\\n     */\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    /**\\n     * @dev if the call comes from the trusted forwarder, it substracts the sender address from `msg.data` to get the real `msg.data`\\n     * @return the real `msg.data`\\n     */\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x33482ab5e863b2f5cc22fb9e77f8eff3484e08601326989da02ae1b147245669\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/ERC721BaseTokenV2.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n/* solhint-disable func-order, code-complexity */\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\nimport {AddressUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport {\\n    IERC721ReceiverUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\nimport {IERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport {WithSuperOperatorsV2} from \\\"./WithSuperOperatorsV2.sol\\\";\\nimport {IERC721MandatoryTokenReceiver} from \\\"../interfaces/IERC721MandatoryTokenReceiver.sol\\\";\\nimport {ContextUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\n/// @title ERC721BaseTokenV2\\n/// @author The Sandbox\\n/// @notice Basic functionalities of a NFT\\n/// @dev ERC721 implementation that supports meta-transactions and super operators\\ncontract ERC721BaseTokenV2 is ContextUpgradeable, IERC721Upgradeable, WithSuperOperatorsV2 {\\n    using AddressUpgradeable for address;\\n\\n    bytes4 internal constant _ERC721_RECEIVED = 0x150b7a02;\\n    bytes4 internal constant _ERC721_BATCH_RECEIVED = 0x4b808c46;\\n\\n    bytes4 internal constant ERC165ID = 0x01ffc9a7;\\n    bytes4 internal constant ERC721_MANDATORY_RECEIVER = 0x5e8bf644;\\n\\n    uint256 internal constant NOT_ADDRESS = 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000;\\n    uint256 internal constant OPERATOR_FLAG = (2**255);\\n    uint256 internal constant NOT_OPERATOR_FLAG = OPERATOR_FLAG - 1;\\n    uint256 internal constant BURNED_FLAG = (2**160);\\n\\n    mapping(address => uint256) internal _numNFTPerAddress;\\n    /**\\n     * @dev mapping to store owner of lands and quads.\\n     * For 1x1 lands it also the 255 bit is 1 if that land has operator approved and is 0 if no operator is approved.\\n     * For burned 1x1 Land 160 bit is set to 1.\\n     */\\n    mapping(uint256 => uint256) internal _owners;\\n    mapping(address => mapping(address => bool)) internal _operatorsForAll;\\n    mapping(uint256 => address) internal _operators;\\n\\n    /// @notice Approve an operator to spend tokens on the senders behalf.\\n    /// @param operator The address receiving the approval.\\n    /// @param id The id of the token.\\n    function approve(address operator, uint256 id) public virtual override {\\n        uint256 ownerData = _owners[_storageId(id)];\\n        address owner = _ownerOf(id);\\n        address msgSender = _msgSender();\\n        require(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n        require(\\n            owner == msgSender || _operatorsForAll[owner][msgSender] || _superOperators[msgSender],\\n            \\\"UNAUTHORIZED_APPROVAL\\\"\\n        );\\n        _approveFor(ownerData, operator, id);\\n    }\\n\\n    /// @notice Approve an operator to spend tokens on the sender behalf.\\n    /// @param sender The address giving the approval.\\n    /// @param operator The address receiving the approval.\\n    /// @param id The id of the token.\\n    function approveFor(\\n        address sender,\\n        address operator,\\n        uint256 id\\n    ) public virtual {\\n        uint256 ownerData = _owners[_storageId(id)];\\n        address owner = _ownerOf(id);\\n        address msgSender = _msgSender();\\n        require(sender != address(0), \\\"ZERO_ADDRESS_SENDER\\\");\\n        require(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n        require(\\n            msgSender == sender || _operatorsForAll[sender][msgSender] || _superOperators[msgSender],\\n            \\\"UNAUTHORIZED_APPROVAL\\\"\\n        );\\n        require(address(uint160(ownerData)) == sender, \\\"OWNER_NOT_SENDER\\\");\\n        _approveFor(ownerData, operator, id);\\n    }\\n\\n    /// @notice Transfer a token between 2 addresses.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param id The id of the token.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual override {\\n        _checkTransfer(from, to, id);\\n        _transferFrom(from, to, id);\\n        if (to.isContract() && _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER)) {\\n            require(_checkOnERC721Received(_msgSender(), from, to, id, \\\"\\\"), \\\"ERC721_TRANSFER_REJECTED\\\");\\n        }\\n    }\\n\\n    /// @notice Transfer a token between 2 addresses letting the receiver know of the transfer.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param id The id of the token.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual override {\\n        safeTransferFrom(from, to, id, \\\"\\\");\\n    }\\n\\n    /// @notice Transfer many tokens between 2 addresses.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param ids The ids of the tokens.\\n    /// @param data Additional data.\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) public virtual {\\n        _batchTransferFrom(from, to, ids, data, false);\\n    }\\n\\n    /// @notice Transfer many tokens between 2 addresses, while\\n    /// ensuring the receiving contract has a receiver method.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param ids The ids of the tokens.\\n    /// @param data Additional data.\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external virtual {\\n        _batchTransferFrom(from, to, ids, data, true);\\n    }\\n\\n    /// @notice Set the approval for an operator to manage all the tokens of the sender.\\n    /// @param sender The address giving the approval.\\n    /// @param operator The address receiving the approval.\\n    /// @param approved The determination of the approval.\\n    function setApprovalForAllFor(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) public virtual {\\n        require(sender != address(0), \\\"Invalid sender address\\\");\\n        address msgSender = _msgSender();\\n        require(msgSender == sender || _superOperators[msgSender], \\\"UNAUTHORIZED_APPROVE_FOR_ALL\\\");\\n\\n        _setApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @notice Set the approval for an operator to manage all the tokens of the sender.\\n    /// @param operator The address receiving the approval.\\n    /// @param approved The determination of the approval.\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /// @notice Burns token `id`.\\n    /// @param id The token which will be burnt.\\n    function burn(uint256 id) external virtual {\\n        _burn(_msgSender(), _ownerOf(id), id);\\n    }\\n\\n    /// @notice Burn token `id` from `from`.\\n    /// @param from address whose token is to be burnt.\\n    /// @param id The token which will be burnt.\\n    function burnFrom(address from, uint256 id) external virtual {\\n        require(from != address(0), \\\"NOT_FROM_ZEROADDRESS\\\");\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n        address msgSender = _msgSender();\\n        require(\\n            msgSender == from ||\\n                (operatorEnabled && _operators[id] == msgSender) ||\\n                _superOperators[msgSender] ||\\n                _operatorsForAll[from][msgSender],\\n            \\\"UNAUTHORIZED_BURN\\\"\\n        );\\n        _burn(from, owner, id);\\n    }\\n\\n    /// @notice Get the number of tokens owned by an address.\\n    /// @param owner The address to look for.\\n    /// @return The number of tokens owned by the address.\\n    function balanceOf(address owner) external view override returns (uint256) {\\n        require(owner != address(0), \\\"ZERO_ADDRESS_OWNER\\\");\\n        return _numNFTPerAddress[owner];\\n    }\\n\\n    /// @notice Get the owner of a token.\\n    /// @param id The id of the token.\\n    /// @return owner The address of the token owner.\\n    function ownerOf(uint256 id) external view override returns (address owner) {\\n        owner = _ownerOf(id);\\n        require(owner != address(0), \\\"NONEXISTANT_TOKEN\\\");\\n    }\\n\\n    /// @notice Get the approved operator for a specific token.\\n    /// @param id The id of the token.\\n    /// @return The address of the operator.\\n    function getApproved(uint256 id) external view override returns (address) {\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n        require(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n        if (operatorEnabled) {\\n            return _operators[id];\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    /// @notice Check if the sender approved the operator.\\n    /// @param owner The address of the owner.\\n    /// @param operator The address of the operator.\\n    /// @return isOperator The status of the approval.\\n    function isApprovedForAll(address owner, address operator) external view override returns (bool) {\\n        return _operatorsForAll[owner][operator] || _superOperators[operator];\\n    }\\n\\n    /// @notice Transfer a token between 2 addresses letting the receiver knows of the transfer.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param id The id of the token.\\n    /// @param data Additional data.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) public virtual override {\\n        _checkTransfer(from, to, id);\\n        _transferFrom(from, to, id);\\n        if (to.isContract()) {\\n            require(_checkOnERC721Received(_msgSender(), from, to, id, data), \\\"ERC721_TRANSFER_REJECTED\\\");\\n        }\\n    }\\n\\n    /// @notice Check if the contract supports an interface.\\n    /// 0x01ffc9a7 is ERC-165.\\n    /// 0x80ac58cd is ERC-721\\n    /// @param id The id of the interface.\\n    /// @return Whether the interface is supported.\\n    function supportsInterface(bytes4 id) public pure virtual override returns (bool) {\\n        return id == 0x01ffc9a7 || id == 0x80ac58cd;\\n    }\\n\\n    /// @dev By overriding this function in an implementation which inherits this contract,\\n    /// you can enable versioned tokenIds without the extra overhead of writing to a new storage slot in _owners each time a version is incremented.\\n    /// See GameToken._storageId() for an example, where the storageId is the tokenId minus the version number.\\n    /// !!! Caution !!! Overriding this function without taking appropriate care could lead to\\n    /// ownerOf() returning an owner for non-existent tokens. Tests should be written to\\n    /// guard against introducing this bug.\\n    /// @param id The id of a token.\\n    /// @return The id used for storage mappings.\\n    function _storageId(uint256 id) internal view virtual returns (uint256) {\\n        return id;\\n    }\\n\\n    function _updateOwnerData(\\n        uint256 id,\\n        uint256 oldData,\\n        address newOwner,\\n        bool hasOperator\\n    ) internal virtual {\\n        if (hasOperator) {\\n            _owners[_storageId(id)] = (oldData & NOT_ADDRESS) | OPERATOR_FLAG | uint256(uint160(newOwner));\\n        } else {\\n            _owners[_storageId(id)] = ((oldData & NOT_ADDRESS) & NOT_OPERATOR_FLAG) | uint256(uint160(newOwner));\\n        }\\n    }\\n\\n    function _transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) internal {\\n        _numNFTPerAddress[from]--;\\n        _numNFTPerAddress[to]++;\\n        _updateOwnerData(id, _owners[_storageId(id)], to, false);\\n        emit Transfer(from, to, id);\\n    }\\n\\n    /// @dev See approveFor.\\n    function _approveFor(\\n        uint256 ownerData,\\n        address operator,\\n        uint256 id\\n    ) internal {\\n        address owner = _ownerOf(id);\\n        if (operator == address(0)) {\\n            _updateOwnerData(id, ownerData, owner, false);\\n        } else {\\n            _updateOwnerData(id, ownerData, owner, true);\\n            _operators[id] = operator;\\n        }\\n        emit Approval(owner, operator, id);\\n    }\\n\\n    /// @dev See batchTransferFrom.\\n    function _batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        bytes memory data,\\n        bool safe\\n    ) internal {\\n        address msgSender = _msgSender();\\n        bool authorized = msgSender == from || _operatorsForAll[from][msgSender] || _superOperators[msgSender];\\n\\n        require(from != address(0), \\\"NOT_FROM_ZEROADDRESS\\\");\\n        require(to != address(0), \\\"NOT_TO_ZEROADDRESS\\\");\\n\\n        uint256 numTokens = ids.length;\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            uint256 id = ids[i];\\n            (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n            require(owner == from, \\\"BATCHTRANSFERFROM_NOT_OWNER\\\");\\n            require(authorized || (operatorEnabled && _operators[id] == msgSender), \\\"NOT_AUTHORIZED\\\");\\n            _updateOwnerData(id, _owners[_storageId(id)], to, false);\\n            emit Transfer(from, to, id);\\n        }\\n        if (from != to) {\\n            _numNFTPerAddress[from] -= numTokens;\\n            _numNFTPerAddress[to] += numTokens;\\n        }\\n\\n        if (to.isContract()) {\\n            if (_checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER)) {\\n                require(_checkOnERC721BatchReceived(msgSender, from, to, ids, data), \\\"ERC721_BATCH_RECEIVED_REJECTED\\\");\\n            } else if (safe) {\\n                for (uint256 i = 0; i < numTokens; i++) {\\n                    require(_checkOnERC721Received(msgSender, from, to, ids[i], data), \\\"ERC721_RECEIVED_REJECTED\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev See setApprovalForAll.\\n    function _setApprovalForAll(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) internal {\\n        require(!_superOperators[operator], \\\"INVALID_APPROVAL_CHANGE\\\");\\n        _operatorsForAll[sender][operator] = approved;\\n\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @dev See burn.\\n    function _burn(\\n        address from,\\n        address owner,\\n        uint256 id\\n    ) internal {\\n        require(from == owner, \\\"NOT_OWNER\\\");\\n        uint256 storageId = _storageId(id);\\n        _owners[storageId] = (_owners[storageId] & NOT_OPERATOR_FLAG) | BURNED_FLAG; // record as non owner but keep track of last owner\\n        _numNFTPerAddress[from]--;\\n        emit Transfer(from, address(0), id);\\n    }\\n\\n    /// @dev Check if receiving contract accepts erc721 transfers.\\n    /// @param operator The address of the operator.\\n    /// @param from The from address, may be different from msg.sender.\\n    /// @param to The address we want to transfer to.\\n    /// @param tokenId The id of the token we would like to transfer.\\n    /// @param _data Any additional data to send with the transfer.\\n    /// @return Whether the expected value of 0x150b7a02 is returned.\\n    function _checkOnERC721Received(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal returns (bool) {\\n        bytes4 retval = IERC721ReceiverUpgradeable(to).onERC721Received(operator, from, tokenId, _data);\\n        return (retval == _ERC721_RECEIVED);\\n    }\\n\\n    /// @dev Check if receiving contract accepts erc721 batch transfers.\\n    /// @param operator The address of the operator.\\n    /// @param from The from address, may be different from msg.sender.\\n    /// @param to The address we want to transfer to.\\n    /// @param ids The ids of the tokens we would like to transfer.\\n    /// @param _data Any additional data to send with the transfer.\\n    /// @return Whether the expected value of 0x4b808c46 is returned.\\n    function _checkOnERC721BatchReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        bytes memory _data\\n    ) internal returns (bool) {\\n        bytes4 retval = IERC721MandatoryTokenReceiver(to).onERC721BatchReceived(operator, from, ids, _data);\\n        return (retval == _ERC721_BATCH_RECEIVED);\\n    }\\n\\n    /// @dev See ownerOf\\n    function _ownerOf(uint256 id) internal view virtual returns (address) {\\n        uint256 data = _owners[_storageId(id)];\\n        if ((data & BURNED_FLAG) == BURNED_FLAG) {\\n            return address(0);\\n        }\\n        return address(uint160(data));\\n    }\\n\\n    /// @dev Get the owner and operatorEnabled status of a token.\\n    /// @param id The token to query.\\n    /// @return owner The owner of the token.\\n    /// @return operatorEnabled Whether or not operators are enabled for this token.\\n    function _ownerAndOperatorEnabledOf(uint256 id)\\n        internal\\n        view\\n        virtual\\n        returns (address owner, bool operatorEnabled)\\n    {\\n        uint256 data = _owners[_storageId(id)];\\n        if ((data & BURNED_FLAG) == BURNED_FLAG) {\\n            owner = address(0);\\n        } else {\\n            owner = address(uint160(data));\\n        }\\n        operatorEnabled = (data & OPERATOR_FLAG) == OPERATOR_FLAG;\\n    }\\n\\n    /// @dev Check whether a transfer is a meta Transaction or not.\\n    /// @param from The address who initiated the transfer (may differ from msg.sender).\\n    /// @param to The address receiving the token.\\n    /// @param id The token being transferred.\\n    function _checkTransfer(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) internal view {\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n        address msgSender = _msgSender();\\n        require(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n        require(owner == from, \\\"CHECKTRANSFER_NOT_OWNER\\\");\\n        require(to != address(0), \\\"NOT_TO_ZEROADDRESS\\\");\\n        require(\\n            msgSender == owner ||\\n                _superOperators[msgSender] ||\\n                _operatorsForAll[from][msgSender] ||\\n                (operatorEnabled && _operators[id] == msgSender),\\n            \\\"UNAUTHORIZED_TRANSFER\\\"\\n        );\\n    }\\n\\n    /// @dev Check if there was enough gas.\\n    /// @param _contract The address of the contract to check.\\n    /// @param interfaceId The id of the interface we want to test.\\n    /// @return Whether or not this check succeeded.\\n    function _checkInterfaceWith10000Gas(address _contract, bytes4 interfaceId) internal view returns (bool) {\\n        bool success;\\n        bool result;\\n        bytes memory callData = abi.encodeWithSelector(ERC165ID, interfaceId);\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let call_ptr := add(0x20, callData)\\n            let call_size := mload(callData)\\n            let output := mload(0x40) // Find empty storage location using \\\"free memory pointer\\\"\\n            mstore(output, 0x0)\\n            success := staticcall(10000, _contract, call_ptr, call_size, output, 0x20) // 32 bytes\\n            result := mload(output)\\n        }\\n        // (10000 / 63) \\\"not enough for supportsInterface(...)\\\" // consume all gas, so caller can potentially know that there was not enough gas\\n        assert(gasleft() > 158);\\n        return success && result;\\n    }\\n}\\n\",\"keccak256\":\"0x4bdcda30d7b3e0bc4575b441afe106fa855244f01e755ebd2c55894abb461232\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/WithAdminV2.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\nimport {ContextUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\n/// @title WithAdminV2\\n/// @author The Sandbox\\n/// @notice Add an admin to the contract\\ncontract WithAdminV2 is ContextUpgradeable {\\n    address internal _admin;\\n\\n    /// @dev Emits when the contract administrator is changed.\\n    /// @param oldAdmin The address of the previous administrator.\\n    /// @param newAdmin The address of the new administrator.\\n    event AdminChanged(address indexed oldAdmin, address indexed newAdmin);\\n\\n    modifier onlyAdmin() {\\n        require(_msgSender() == _admin, \\\"ADMIN_ONLY\\\");\\n        _;\\n    }\\n\\n    /// @notice Get the current admin\\n    /// @dev Get the current administrator of this contract.\\n    /// @return The current administrator of this contract.\\n    function getAdmin() external view returns (address) {\\n        return _admin;\\n    }\\n\\n    /// @notice Change the admin of the contract\\n    /// @dev Change the administrator to be `newAdmin`.\\n    /// @param newAdmin The address of the new administrator.\\n    function changeAdmin(address newAdmin) external {\\n        address admin = _admin;\\n        require(_msgSender() == admin, \\\"ADMIN_ACCESS_DENIED\\\");\\n        emit AdminChanged(admin, newAdmin);\\n        _admin = newAdmin;\\n    }\\n}\\n\",\"keccak256\":\"0x27262f45048499bbf49b6fc7cc393517a1326c0da1bf50016b19938cea4f5b44\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/WithSuperOperatorsV2.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\nimport {WithAdminV2} from \\\"./WithAdminV2.sol\\\";\\nimport {ContextUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\n/// @title WithSuperOperatorsV2\\n/// @author The Sandbox\\n/// @notice Add super operators handled by an admin\\ncontract WithSuperOperatorsV2 is ContextUpgradeable, WithAdminV2 {\\n    mapping(address => bool) internal _superOperators;\\n\\n    event SuperOperator(address indexed superOperator, bool indexed enabled);\\n\\n    /// @notice Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights).\\n    /// @param superOperator address that will be given/removed superOperator right.\\n    /// @param enabled set whether the superOperator is enabled or disabled.\\n    function setSuperOperator(address superOperator, bool enabled) external onlyAdmin {\\n        require(_msgSender() == _admin, \\\"only admin is allowed to add super operators\\\");\\n        _superOperators[superOperator] = enabled;\\n        emit SuperOperator(superOperator, enabled);\\n    }\\n\\n    /// @notice check whether address `who` is given superOperator rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has superOperator rights.\\n    function isSuperOperator(address who) public view returns (bool) {\\n        return _superOperators[who];\\n    }\\n}\\n\",\"keccak256\":\"0xd15e48c2f1e3a8b70e3f9a1d96e38156207e3f3eaf593cc7f46b6def906f9819\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC721MandatoryTokenReceiver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\n/**\\n * @title IERC721MandatoryTokenReceiver\\n * @author The Sandbox\\n * @notice Interface for any contract that wants to support safeBatchTransfers\\n * from ERC721 asset contracts.\\n * @dev The ERC-165 identifier for this interface is 0x5e8bf644.\\n */\\ninterface IERC721MandatoryTokenReceiver {\\n    /**\\n     * @notice Whenever tokens are transferred to this contract via {IERC721-safeBatchTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     * @param operator sender\\n     * @param from owner of the tokens\\n     * @param ids token ids\\n     * @param data extra data\\n     * @return 0x4b808c46 if the transfer is a success\\n     */\\n    function onERC721BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external returns (bytes4); // needs to return 0x4b808c46\\n\\n    /**\\n     * @notice Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     * @param operator sender\\n     * @param from owner of the token\\n     * @param tokenId token id\\n     * @param data extra data\\n     * @return 0x4b808c46 if the transfer is a success\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4); // needs to return 0x150b7a02\\n}\\n\",\"keccak256\":\"0x6e1235c041b7d8747fa458037006e8df72bea62474dd04977e210d19914b7f5d\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/ILandToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\n/// @title ILandToken\\n/// @author The Sandbox\\n/// @notice Interface of the LAND token including quad methods\\ninterface ILandToken {\\n    /// @notice transfer multiple quad (aligned to a quad tree with size 3, 6, 12 or 24 only)\\n    /// @param from current owner of the quad\\n    /// @param to destination\\n    /// @param sizes list of sizes for each quad\\n    /// @param xs list of bottom left x coordinates for each quad\\n    /// @param ys list of bottom left y coordinates for each quad\\n    /// @param data additional data\\n    function batchTransferQuad(\\n        address from,\\n        address to,\\n        uint256[] calldata sizes,\\n        uint256[] calldata xs,\\n        uint256[] calldata ys,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice transfer one quad (aligned to a quad tree with size 3, 6, 12 or 24 only)\\n    /// @param from current owner of the quad\\n    /// @param to destination\\n    /// @param size size of the quad\\n    /// @param x The top left x coordinate of the quad\\n    /// @param y The top left y coordinate of the quad\\n    /// @param data additional data\\n    function transferQuad(\\n        address from,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Transfer many tokens between 2 addresses.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param ids The ids of the tokens.\\n    /// @param data Additional data.\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5df895e3442904d5f6a6ad3b4b34a2ec61d4a97a4b3feea57d5bb611d14a7e3e\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IPolygonLand.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport {ILandToken} from \\\"./ILandToken.sol\\\";\\n\\n/**\\n * @title IPolygonLand\\n * @author The Sandbox\\n * @notice Interface of the LAND token on the child chain\\n */\\ninterface IPolygonLand is ILandToken {\\n    /**\\n     * @notice Mint a new quad (aligned to a quad tree with size 1, 3, 6, 12 or 24 only)\\n     * @param to The recipient of the new quad\\n     * @param size The size of the new quad\\n     * @param x The top left x coordinate of the new quad\\n     * @param y The top left y coordinate of the new quad\\n     * @param data extra data to pass to the transfer\\n     */\\n    function mintQuad(\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes memory data\\n    ) external;\\n\\n    /**\\n     * @notice Checks if a LAND exists by its coordinates\\n     * @param size size of the quad\\n     * @param x x coordinate\\n     * @param y y coordinate\\n     * @return does the LAND exist\\n     */\\n    function exists(\\n        uint256 size,\\n        uint256 x,\\n        uint256 y\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x725deed21224d8adb2b2cc1dd0615447abee654e519cd9e22ffa505954dfc15d\",\"license\":\"MIT\"},\"src/solc_0.8/polygon/child/land/PolygonLandBaseToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable code-complexity\\n\\npragma solidity 0.8.2;\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../../common/BaseWithStorage/ERC721BaseTokenV2.sol\\\";\\nimport \\\"../../../common/interfaces/IPolygonLand.sol\\\";\\n\\nabstract contract PolygonLandBaseToken is IPolygonLand, Initializable, ERC721BaseTokenV2 {\\n    using AddressUpgradeable for address;\\n\\n    uint256 internal constant GRID_SIZE = 408;\\n\\n    uint256 internal constant LAYER = 0xFF00000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_1x1 = 0x0000000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_3x3 = 0x0100000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_6x6 = 0x0200000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_12x12 = 0x0300000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_24x24 = 0x0400000000000000000000000000000000000000000000000000000000000000;\\n\\n    mapping(address => bool) internal _minters;\\n\\n    event Minter(address minter, bool enabled);\\n\\n    modifier validQuad(\\n        uint256 size,\\n        uint256 x,\\n        uint256 y\\n    ) {\\n        require(size == 1 || size == 3 || size == 6 || size == 12 || size == 24, \\\"Invalid size\\\");\\n        require(x % size == 0 && y % size == 0, \\\"Invalid coordinates\\\");\\n        require(x <= GRID_SIZE - size && y <= GRID_SIZE - size, \\\"Out of bounds\\\");\\n\\n        _;\\n    }\\n\\n    /**\\n     * @notice Return the name of the token contract\\n     * @return The name of the token contract\\n     */\\n    function name() public pure returns (string memory) {\\n        return \\\"Sandbox's LANDs\\\";\\n    }\\n\\n    /**\\n     * @notice Return the symbol of the token contract\\n     * @return The symbol of the token contract\\n     */\\n    function symbol() public pure returns (string memory) {\\n        return \\\"LAND\\\";\\n    }\\n\\n    /// @notice total width of the map\\n    /// @return width\\n    function width() public pure returns (uint256) {\\n        return GRID_SIZE;\\n    }\\n\\n    /// @notice total height of the map\\n    /// @return height\\n    function height() public pure returns (uint256) {\\n        return GRID_SIZE;\\n    }\\n\\n    /// @notice x coordinate of Land token\\n    /// @param id tokenId\\n    /// @return the x coordinates\\n    function getX(uint256 id) external view returns (uint256) {\\n        require(_ownerOf(id) != address(0), \\\"token does not exist\\\");\\n        return id % GRID_SIZE;\\n    }\\n\\n    /// @notice y coordinate of Land token\\n    /// @param id tokenId\\n    /// @return the y coordinates\\n    function getY(uint256 id) external view returns (uint256) {\\n        require(_ownerOf(id) != address(0), \\\"token does not exist\\\");\\n        return id / GRID_SIZE;\\n    }\\n\\n    /**\\n     * @notice Return the URI of a specific token\\n     * @param id The id of the token\\n     * @return The URI of the token\\n     */\\n    function tokenURI(uint256 id) public view returns (string memory) {\\n        require(_ownerOf(id) != address(0), \\\"Id does not exist\\\");\\n        return\\n            string(\\n                abi.encodePacked(\\\"https://api.sandbox.game/lands/\\\", StringsUpgradeable.toString(id), \\\"/metadata.json\\\")\\n            );\\n    }\\n\\n    /**\\n     * @notice Check if the contract supports an interface\\n     * 0x01ffc9a7 is ERC-165\\n     * 0x80ac58cd is ERC-721\\n     * 0x5b5e139f is ERC-721 metadata\\n     * @param id The id of the interface\\n     * @return True if the interface is supported\\n     */\\n    function supportsInterface(bytes4 id) public pure override returns (bool) {\\n        return id == 0x01ffc9a7 || id == 0x80ac58cd || id == 0x5b5e139f;\\n    }\\n\\n    /**\\n     * @notice Mint a new quad (aligned to a quad tree with size 1, 3, 6, 12 or 24 only)\\n     * @param user The recipient of the new quad\\n     * @param size The size of the new quad\\n     * @param x The top left x coordinate of the new quad\\n     * @param y The top left y coordinate of the new quad\\n     * @param data extra data to pass to the transfer\\n     */\\n    function mintQuad(\\n        address user,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes memory data\\n    ) external virtual override {\\n        require(isMinter(_msgSender()), \\\"!AUTHORIZED\\\");\\n        _mintQuad(user, size, x, y, data);\\n    }\\n\\n    function _mintQuad(\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes memory data\\n    ) internal {\\n        require(to != address(0), \\\"to is zero address\\\");\\n        require(!exists(size, x, y), \\\"Already minted\\\");\\n\\n        uint256 quadId;\\n        uint256 id = x + y * GRID_SIZE;\\n\\n        if (size == 1) {\\n            quadId = id;\\n        } else if (size == 3) {\\n            quadId = LAYER_3x3 + id;\\n        } else if (size == 6) {\\n            quadId = LAYER_6x6 + id;\\n        } else if (size == 12) {\\n            quadId = LAYER_12x12 + id;\\n        } else if (size == 24) {\\n            quadId = LAYER_24x24 + id;\\n        }\\n\\n        for (uint256 i = 0; i < size * size; i++) {\\n            emit Transfer(address(0), to, _idInPath(i, size, x, y));\\n        }\\n\\n        _owners[quadId] = uint256(uint160(address(to)));\\n        _numNFTPerAddress[to] += size * size;\\n\\n        _checkBatchReceiverAcceptQuad(_msgSender(), address(0), to, size, x, y, data);\\n    }\\n\\n    function batchTransferQuad(\\n        address from,\\n        address to,\\n        uint256[] calldata sizes,\\n        uint256[] calldata xs,\\n        uint256[] calldata ys,\\n        bytes calldata data\\n    ) external override {\\n        require(from != address(0), \\\"from is zero address\\\");\\n        require(to != address(0), \\\"can't send to zero address\\\");\\n        require(sizes.length == xs.length && xs.length == ys.length, \\\"invalid data\\\");\\n        if (_msgSender() != from) {\\n            require(\\n                _operatorsForAll[from][_msgSender()] || _superOperators[_msgSender()],\\n                \\\"not authorized to transferMultiQuads\\\"\\n            );\\n        }\\n        uint256 numTokensTransfered = 0;\\n        for (uint256 i = 0; i < sizes.length; i++) {\\n            uint256 size = sizes[i];\\n            _transferQuad(from, to, size, xs[i], ys[i]);\\n            numTokensTransfered += size * size;\\n        }\\n        _numNFTPerAddress[from] -= numTokensTransfered;\\n        _numNFTPerAddress[to] += numTokensTransfered;\\n\\n        if (to.isContract() && _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER)) {\\n            uint256[] memory ids = new uint256[](numTokensTransfered);\\n            uint256 counter = 0;\\n            for (uint256 j = 0; j < sizes.length; j++) {\\n                uint256 size = sizes[j];\\n                for (uint256 i = 0; i < size * size; i++) {\\n                    ids[counter] = _idInPath(i, size, xs[j], ys[j]);\\n                    counter++;\\n                }\\n            }\\n            require(\\n                _checkOnERC721BatchReceived(_msgSender(), from, to, ids, data),\\n                \\\"erc721 batch transfer rejected by to\\\"\\n            );\\n        }\\n    }\\n\\n    function transferQuad(\\n        address from,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes calldata data\\n    ) external override {\\n        require(from != address(0), \\\"from is zero address\\\");\\n        require(to != address(0), \\\"can't send to zero address\\\");\\n        if (_msgSender() != from) {\\n            require(\\n                _operatorsForAll[from][_msgSender()] || _superOperators[_msgSender()],\\n                \\\"not authorized to transferQuad\\\"\\n            );\\n        }\\n        _transferQuad(from, to, size, x, y);\\n        _numNFTPerAddress[from] -= size * size;\\n        _numNFTPerAddress[to] += size * size;\\n\\n        _checkBatchReceiverAcceptQuad(_msgSender(), from, to, size, x, y, data);\\n    }\\n\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) public override(ILandToken, ERC721BaseTokenV2) {\\n        super.batchTransferFrom(from, to, ids, data);\\n    }\\n\\n    function exists(\\n        uint256 size,\\n        uint256 x,\\n        uint256 y\\n    ) public view override validQuad(size, x, y) returns (bool) {\\n        if (_owners[LAYER_24x24 + (x / 24) * 24 + ((y / 24) * 24) * GRID_SIZE] != 0) return true;\\n        uint256 toX = x + size;\\n        uint256 toY = y + size;\\n        if (size <= 12) {\\n            if (_owners[LAYER_12x12 + (x / 12) * 12 + ((y / 12) * 12) * GRID_SIZE] != 0) return true;\\n        } else {\\n            for (uint256 x12i = x; x12i < toX; x12i += 12) {\\n                for (uint256 y12i = y; y12i < toY; y12i += 12) {\\n                    uint256 id12x12 = LAYER_12x12 + x12i + y12i * GRID_SIZE;\\n                    if (_owners[id12x12] != 0) return true;\\n                }\\n            }\\n        }\\n\\n        if (size <= 6) {\\n            if (_owners[LAYER_6x6 + (x / 6) * 6 + ((y / 6) * 6) * GRID_SIZE] != 0) return true;\\n        } else {\\n            for (uint256 x6i = x; x6i < toX; x6i += 6) {\\n                for (uint256 y6i = y; y6i < toY; y6i += 6) {\\n                    uint256 id6x6 = LAYER_6x6 + x6i + y6i * GRID_SIZE;\\n                    if (_owners[id6x6] != 0) return true;\\n                }\\n            }\\n        }\\n\\n        if (size <= 3) {\\n            if (_owners[LAYER_3x3 + (x / 3) * 3 + ((y / 3) * 3) * GRID_SIZE] != 0) return true;\\n        } else {\\n            for (uint256 x3i = x; x3i < toX; x3i += 3) {\\n                for (uint256 y3i = y; y3i < toY; y3i += 3) {\\n                    uint256 id3x3 = LAYER_3x3 + x3i + y3i * GRID_SIZE;\\n                    if (_owners[id3x3] != 0) return true;\\n                }\\n            }\\n        }\\n\\n        for (uint256 i = 0; i < size * size; i++) {\\n            if (_owners[_idInPath(i, size, x, y)] != 0) return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    /// @notice Enable or disable the ability of `minter` to transfer tokens of all (minter rights).\\n    /// @param minter address that will be given/removed minter right.\\n    /// @param enabled set whether the minter is enabled or disabled.\\n    function setMinter(address minter, bool enabled) external {\\n        require(_msgSender() == _admin, \\\"only admin is allowed to add minters\\\");\\n        require(minter != address(0), \\\"PolygonLand: Invalid address\\\");\\n        _minters[minter] = enabled;\\n        emit Minter(minter, enabled);\\n    }\\n\\n    /// @notice check whether address `who` is given minter rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has minter rights.\\n    function isMinter(address who) public view returns (bool) {\\n        return _minters[who];\\n    }\\n\\n    function _transferQuad(\\n        address from,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y\\n    ) internal validQuad(size, x, y) {\\n        if (size == 1) {\\n            uint256 id1x1 = x + y * GRID_SIZE;\\n            address owner = _ownerOf(id1x1);\\n            require(owner != address(0), \\\"token does not exist\\\");\\n            require(owner == from, \\\"not owner in _transferQuad\\\");\\n            _owners[id1x1] = uint256(uint160(address(to)));\\n        } else {\\n            _regroup(from, to, size, x, y);\\n        }\\n        for (uint256 i = 0; i < size * size; i++) {\\n            emit Transfer(from, to, _idInPath(i, size, x, y));\\n        }\\n    }\\n\\n    function _idInPath(\\n        uint256 i,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (uint256) {\\n        uint256 row = i / size;\\n        if (row % 2 == 0) {\\n            // allow ids to follow a path in a quad\\n            return (x + (i % size)) + ((y + row) * GRID_SIZE);\\n        } else {\\n            return ((x + size) - (1 + (i % size))) + ((y + row) * GRID_SIZE);\\n        }\\n    }\\n\\n    function _regroup(\\n        address from,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y\\n    ) internal {\\n        if (size == 3) {\\n            _regroup3x3(from, to, x, y, true);\\n        } else if (size == 6) {\\n            _regroup6x6(from, to, x, y, true);\\n        } else if (size == 12) {\\n            _regroup12x12(from, to, x, y, true);\\n        } else if (size == 24) {\\n            _regroup24x24(from, to, x, y, true);\\n        }\\n    }\\n\\n    function _regroup3x3(\\n        address from,\\n        address to,\\n        uint256 x,\\n        uint256 y,\\n        bool set\\n    ) internal returns (bool) {\\n        uint256 id = x + y * GRID_SIZE;\\n        uint256 quadId = LAYER_3x3 + id;\\n        bool ownerOfAll = true;\\n        for (uint256 xi = x; xi < x + 3; xi++) {\\n            for (uint256 yi = y; yi < y + 3; yi++) {\\n                ownerOfAll = _checkAndClear(from, xi + yi * GRID_SIZE) && ownerOfAll;\\n            }\\n        }\\n        if (set) {\\n            if (!ownerOfAll) {\\n                require(_ownerOfQuad(3, x, y) == from, \\\"not owner of all sub quads nor parent quads\\\");\\n            }\\n            _owners[quadId] = uint256(uint160(address(to)));\\n            return true;\\n        }\\n        return ownerOfAll;\\n    }\\n\\n    function _regroup6x6(\\n        address from,\\n        address to,\\n        uint256 x,\\n        uint256 y,\\n        bool set\\n    ) internal returns (bool) {\\n        uint256 id = x + y * GRID_SIZE;\\n        uint256 quadId = LAYER_6x6 + id;\\n        bool ownerOfAll = true;\\n        for (uint256 xi = x; xi < x + 6; xi += 3) {\\n            for (uint256 yi = y; yi < y + 6; yi += 3) {\\n                bool ownAllIndividual = _regroup3x3(from, to, xi, yi, false);\\n                uint256 id3x3 = LAYER_3x3 + xi + yi * GRID_SIZE;\\n                uint256 owner3x3 = _owners[id3x3];\\n                if (owner3x3 != 0) {\\n                    if (!ownAllIndividual) {\\n                        require(owner3x3 == uint256(uint160(address(from))), \\\"not owner of 3x3 quad\\\");\\n                    }\\n                    _owners[id3x3] = 0;\\n                }\\n                ownerOfAll = (ownAllIndividual || owner3x3 != 0) && ownerOfAll;\\n            }\\n        }\\n        if (set) {\\n            if (!ownerOfAll) {\\n                require(_ownerOfQuad(6, x, y) == from, \\\"not owner of all sub quads nor parent quads\\\");\\n            }\\n            _owners[quadId] = uint256(uint160(address(to)));\\n            return true;\\n        }\\n        return ownerOfAll;\\n    }\\n\\n    function _regroup12x12(\\n        address from,\\n        address to,\\n        uint256 x,\\n        uint256 y,\\n        bool set\\n    ) internal returns (bool) {\\n        uint256 id = x + y * GRID_SIZE;\\n        uint256 quadId = LAYER_12x12 + id;\\n        bool ownerOfAll = true;\\n        for (uint256 xi = x; xi < x + 12; xi += 6) {\\n            for (uint256 yi = y; yi < y + 12; yi += 6) {\\n                bool ownAllIndividual = _regroup6x6(from, to, xi, yi, false);\\n                uint256 id6x6 = LAYER_6x6 + xi + yi * GRID_SIZE;\\n                uint256 owner6x6 = _owners[id6x6];\\n                if (owner6x6 != 0) {\\n                    if (!ownAllIndividual) {\\n                        require(owner6x6 == uint256(uint160(address(from))), \\\"not owner of 6x6 quad\\\");\\n                    }\\n                    _owners[id6x6] = 0;\\n                }\\n                ownerOfAll = (ownAllIndividual || owner6x6 != 0) && ownerOfAll;\\n            }\\n        }\\n        if (set) {\\n            if (!ownerOfAll) {\\n                require(_ownerOfQuad(12, x, y) == from, \\\"not owner of all sub quads nor parent quads\\\");\\n            }\\n            _owners[quadId] = uint256(uint160(address(to)));\\n            return true;\\n        }\\n        return ownerOfAll;\\n    }\\n\\n    function _regroup24x24(\\n        address from,\\n        address to,\\n        uint256 x,\\n        uint256 y,\\n        bool set\\n    ) internal returns (bool) {\\n        uint256 id = x + y * GRID_SIZE;\\n        uint256 quadId = LAYER_24x24 + id;\\n        bool ownerOfAll = true;\\n        for (uint256 xi = x; xi < x + 24; xi += 12) {\\n            for (uint256 yi = y; yi < y + 24; yi += 12) {\\n                bool ownAllIndividual = _regroup12x12(from, to, xi, yi, false);\\n                uint256 id12x12 = LAYER_12x12 + xi + yi * GRID_SIZE;\\n                uint256 owner12x12 = _owners[id12x12];\\n                if (owner12x12 != 0) {\\n                    if (!ownAllIndividual) {\\n                        require(owner12x12 == uint256(uint160(address(from))), \\\"not owner of 12x12 quad\\\");\\n                    }\\n                    _owners[id12x12] = 0;\\n                }\\n                ownerOfAll = (ownAllIndividual || owner12x12 != 0) && ownerOfAll;\\n            }\\n        }\\n        if (set) {\\n            if (!ownerOfAll) {\\n                require(\\n                    _owners[quadId] == uint256(uint160(address(from))),\\n                    \\\"not owner of all sub quads not parent quad\\\"\\n                );\\n            }\\n            _owners[quadId] = uint256(uint160(address(to)));\\n            return true;\\n        }\\n        return ownerOfAll || _owners[quadId] == uint256(uint160(address(from)));\\n    }\\n\\n    function _ownerOfQuad(\\n        uint256 size,\\n        uint256 x,\\n        uint256 y\\n    ) internal returns (address) {\\n        uint256 layer;\\n        uint256 parentSize = size * 2;\\n        if (size == 3) {\\n            layer = LAYER_3x3;\\n        } else if (size == 6) {\\n            layer = LAYER_6x6;\\n        } else if (size == 12) {\\n            layer = LAYER_12x12;\\n        } else if (size == 24) {\\n            layer = LAYER_24x24;\\n        } else {\\n            require(false, \\\"Invalid size\\\");\\n        }\\n\\n        address owner = address(uint160(_owners[layer + (x / size) * size + ((y / size) * size) * GRID_SIZE]));\\n        if (owner != address(0)) {\\n            return owner;\\n        } else if (size < 24) {\\n            return _ownerOfQuad(parentSize, x, y);\\n        }\\n        return address(0);\\n    }\\n\\n    function _ownerOf(uint256 id) internal view override returns (address) {\\n        require(id & LAYER == 0, \\\"Invalid token id\\\");\\n        uint256 x = id % GRID_SIZE;\\n        uint256 y = id / GRID_SIZE;\\n        uint256 owner1x1 = _owners[id];\\n\\n        if ((owner1x1 & BURNED_FLAG) == BURNED_FLAG) {\\n            return address(0);\\n        }\\n\\n        if (owner1x1 != 0) {\\n            return address(uint160(owner1x1)); //we check if the quad exists as an 1x1 quad, then 3x3, and so on..\\n        } else {\\n            address owner3x3 = address(uint160(_owners[LAYER_3x3 + (x / 3) * 3 + ((y / 3) * 3) * GRID_SIZE]));\\n            if (owner3x3 != address(0)) {\\n                return owner3x3;\\n            } else {\\n                address owner6x6 = address(uint160(_owners[LAYER_6x6 + (x / 6) * 6 + ((y / 6) * 6) * GRID_SIZE]));\\n                if (owner6x6 != address(0)) {\\n                    return owner6x6;\\n                } else {\\n                    address owner12x12 =\\n                        address(uint160(_owners[LAYER_12x12 + (x / 12) * 12 + ((y / 12) * 12) * GRID_SIZE]));\\n                    if (owner12x12 != address(0)) {\\n                        return owner12x12;\\n                    } else {\\n                        return address(uint160(_owners[LAYER_24x24 + (x / 24) * 24 + ((y / 24) * 24) * GRID_SIZE]));\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function _checkAndClear(address from, uint256 id) internal returns (bool) {\\n        uint256 owner = _owners[id];\\n        if (owner != 0) {\\n            require((owner & BURNED_FLAG) != BURNED_FLAG, \\\"not owner\\\");\\n            require(address(uint160(owner)) == from, \\\"not owner\\\");\\n            _owners[id] = 0;\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function _checkBatchReceiverAcceptQuad(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes memory data\\n    ) internal {\\n        if (to.isContract() && _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER)) {\\n            uint256[] memory ids = new uint256[](size * size);\\n            for (uint256 i = 0; i < size * size; i++) {\\n                ids[i] = _idInPath(i, size, x, y);\\n            }\\n            require(_checkOnERC721BatchReceived(operator, from, to, ids, data), \\\"erc721 batch transfer rejected by to\\\");\\n        }\\n    }\\n\\n    function _ownerAndOperatorEnabledOf(uint256 id)\\n        internal\\n        view\\n        override\\n        returns (address owner, bool operatorEnabled)\\n    {\\n        require(id & LAYER == 0, \\\"Invalid token id\\\");\\n        uint256 x = id % GRID_SIZE;\\n        uint256 y = id / GRID_SIZE;\\n        uint256 owner1x1 = _owners[id];\\n\\n        if ((owner1x1 & BURNED_FLAG) == BURNED_FLAG) {\\n            owner = address(0);\\n            operatorEnabled = (owner1x1 & OPERATOR_FLAG) == OPERATOR_FLAG;\\n            return (owner, operatorEnabled);\\n        }\\n\\n        if (owner1x1 != 0) {\\n            owner = address(uint160(owner1x1));\\n            operatorEnabled = (owner1x1 & OPERATOR_FLAG) == OPERATOR_FLAG;\\n        } else {\\n            address owner3x3 = address(uint160(_owners[LAYER_3x3 + (x / 3) * 3 + ((y / 3) * 3) * GRID_SIZE]));\\n            if (owner3x3 != address(uint160(0))) {\\n                owner = owner3x3;\\n                operatorEnabled = false;\\n            } else {\\n                address owner6x6 = address(uint160(_owners[LAYER_6x6 + (x / 6) * 6 + ((y / 6) * 6) * GRID_SIZE]));\\n                if (owner6x6 != address(uint160(0))) {\\n                    owner = owner6x6;\\n                    operatorEnabled = false;\\n                } else {\\n                    address owner12x12 =\\n                        address(uint160(_owners[LAYER_12x12 + (x / 12) * 12 + ((y / 12) * 12) * GRID_SIZE]));\\n                    if (owner12x12 != address(uint160(0))) {\\n                        owner = owner12x12;\\n                        operatorEnabled = false;\\n                    } else {\\n                        owner = address(uint160(_owners[LAYER_24x24 + (x / 24) * 24 + ((y / 24) * 24) * GRID_SIZE]));\\n                        operatorEnabled = false;\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    // Empty storage space in contracts for future enhancements\\n    // ref: https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/issues/13)\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x7f44e877c28d361beafd85ab185f52f674cc1d889a48620e317ce24f6c0643aa\",\"license\":\"MIT\"},\"src/solc_0.8/polygon/child/land/PolygonLandV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.2;\\n\\nimport \\\"./PolygonLandBaseToken.sol\\\";\\nimport \\\"../../../common/BaseWithStorage/ERC2771Handler.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\n/// @title LAND token on L2\\ncontract PolygonLandV1 is PolygonLandBaseToken, ERC2771Handler {\\n    function initialize(address trustedForwarder) external initializer {\\n        _admin = _msgSender();\\n        __ERC2771Handler_initialize(trustedForwarder);\\n    }\\n\\n    /// @dev Change the address of the trusted forwarder for meta-TX\\n    /// @param trustedForwarder The new trustedForwarder\\n    function setTrustedForwarder(address trustedForwarder) external onlyAdmin {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view override(ContextUpgradeable, ERC2771Handler) returns (address sender) {\\n        return ERC2771Handler._msgSender();\\n    }\\n\\n    function _msgData() internal view override(ContextUpgradeable, ERC2771Handler) returns (bytes calldata) {\\n        return ERC2771Handler._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0xd869ff5c43cab1adf6b75fb43b18a997319c994bcfbd6e48ad283296cb4724ae\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061511d806100206000396000f3fe608060405234801561001057600080fd5b50600436106102775760003560e01c806370a0823111610160578063ac9fe421116100d8578063cf456ae71161008c578063e985e9c511610071578063e985e9c514610582578063eaa5e06714610595578063eeb5a5d1146105a857610277565b8063cf456ae71461055c578063da7422281461056f57610277565b8063c4d66de8116100bd578063c4d66de814610525578063c87b56dd14610538578063ce1b815f1461054b57610277565b8063ac9fe421146104ff578063b88d4fde1461051257610277565b80638f2839701161012f5780639ededf77116101145780639ededf77146102f9578063a22cb465146104c0578063aa271e1a146104d357610277565b80638f2839701461047457806395d89b411461048757610277565b806370a082311461042857806379cc67901461043b578063845a46971461044e5780638e5cb5f61461046157610277565b806338bb305a116101f3578063572b6c05116101c2578063654b748a116101a7578063654b748a146103d85780636e1e3bbf146104045780636e9960c31461041757610277565b8063572b6c05146103a35780636352211e146103c557610277565b806338bb305a1461035757806342842e0e1461036a57806342966c681461037d57806355064d851461039057610277565b80630ef267431161024a57806323b872dd1161022f57806323b872dd1461031e57806328cfbd46146103315780632b9917461461034457610277565b80630ef26743146102f957806315ddc5351461030b57610277565b806301ffc9a71461027c57806306fdde03146102a4578063081812fc146102b9578063095ea7b3146102e4575b600080fd5b61028f61028a366004614dfa565b6105bb565b60405190151581526020015b60405180910390f35b6102ac61065a565b60405161029b9190614fa8565b6102cc6102c7366004614e32565b610692565b6040516001600160a01b03909116815260200161029b565b6102f76102f2366004614d68565b610731565b005b6101985b60405190815260200161029b565b6102f7610319366004614b4e565b610874565b6102f761032c366004614c1e565b61088a565b6102f761033f366004614b4e565b61093e565b6102f7610352366004614c1e565b6109b3565b6102f7610365366004614cbf565b610ba6565b6102f7610378366004614c1e565b610dfe565b6102f761038b366004614e32565b610e19565b61028f61039e366004614e4a565b610e36565b61028f6103b1366004614a1f565b606b546001600160a01b0390811691161490565b6102cc6103d3366004614e32565b6113ab565b61028f6103e6366004614a1f565b6001600160a01b031660009081526034602052604090205460ff1690565b6102f7610412366004614d91565b61140e565b6033546001600160a01b03166102cc565b6102fd610436366004614a1f565b611472565b6102f7610449366004614d68565b6114e6565b6102fd61045c366004614e32565b611643565b6102fd61046f366004614e32565b6116b2565b6102f7610482366004614a1f565b611721565b60408051808201909152600481527f4c414e440000000000000000000000000000000000000000000000000000000060208201526102ac565b6102f76104ce366004614d3f565b6117fc565b61028f6104e1366004614a1f565b6001600160a01b031660009081526039602052604090205460ff1690565b6102f761050d366004614d3f565b611812565b6102f7610520366004614c59565b611960565b6102f7610533366004614a1f565b6119ec565b6102ac610546366004614e32565b611afb565b606b546001600160a01b03166102cc565b6102f761056a366004614d3f565b611b8e565b6102f761057d366004614a1f565b611cd6565b61028f610590366004614a39565b611d6f565b6102f76105a3366004614a6b565b611dc6565b6102f76105b6366004614bdc565b61232e565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316148061061e57507f80ac58cd000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b8061065257507f5b5e139f000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b90505b919050565b60408051808201909152600f81527f53616e64626f782773204c414e4473000000000000000000000000000000000060208201525b90565b60008060006106a08461241f565b90925090506001600160a01b0382166107005760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e00000000000000000000000000000060448201526064015b60405180910390fd5b8015610726575050506000818152603860205260409020546001600160a01b0316610655565b600092505050610655565b6000818152603660205260408120549061074a83612706565b905060006107566129cf565b90506001600160a01b0382166107ae5760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e00000000000000000000000000000060448201526064016106f7565b806001600160a01b0316826001600160a01b031614806107f357506001600160a01b0380831660009081526037602090815260408083209385168352929052205460ff165b8061081657506001600160a01b03811660009081526034602052604090205460ff165b6108625760405162461bcd60e51b815260206004820152601560248201527f554e415554484f52495a45445f415050524f56414c000000000000000000000060448201526064016106f7565b61086d8386866129de565b5050505050565b610882868686868686612a94565b505050505050565b610895838383612b06565b6108a0838383612d0f565b6001600160a01b0382163b151580156108c557506108c5826317a2fd9160e21b612dcd565b15610939576108ed6108d56129cf565b84848460405180602001604052806000815250612e94565b6109395760405162461bcd60e51b815260206004820152601860248201527f4552433732315f5452414e534645525f52454a4543544544000000000000000060448201526064016106f7565b505050565b610882868686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020601f8a01819004810282018101909252888152925088915087908190840183828082843760009201919091525060019250612f54915050565b600081815260366020526040812054906109cc83612706565b905060006109d86129cf565b90506001600160a01b038616610a305760405162461bcd60e51b815260206004820152601360248201527f5a45524f5f414444524553535f53454e4445520000000000000000000000000060448201526064016106f7565b6001600160a01b038216610a865760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e00000000000000000000000000000060448201526064016106f7565b856001600160a01b0316816001600160a01b03161480610acb57506001600160a01b0380871660009081526037602090815260408083209385168352929052205460ff165b80610aee57506001600160a01b03811660009081526034602052604090205460ff165b610b3a5760405162461bcd60e51b815260206004820152601560248201527f554e415554484f52495a45445f415050524f56414c000000000000000000000060448201526064016106f7565b856001600160a01b0316836001600160a01b031614610b9b5760405162461bcd60e51b815260206004820152601060248201527f4f574e45525f4e4f545f53454e4445520000000000000000000000000000000060448201526064016106f7565b6108828386866129de565b6001600160a01b038716610bfc5760405162461bcd60e51b815260206004820152601460248201527f66726f6d206973207a65726f206164647265737300000000000000000000000060448201526064016106f7565b6001600160a01b038616610c525760405162461bcd60e51b815260206004820152601a60248201527f63616e27742073656e6420746f207a65726f206164647265737300000000000060448201526064016106f7565b866001600160a01b0316610c646129cf565b6001600160a01b031614610d2c576001600160a01b038716600090815260376020526040812090610c936129cf565b6001600160a01b0316815260208101919091526040016000205460ff1680610ce0575060346000610cc26129cf565b6001600160a01b0316815260208101919091526040016000205460ff165b610d2c5760405162461bcd60e51b815260206004820152601e60248201527f6e6f7420617574686f72697a656420746f207472616e7366657251756164000060448201526064016106f7565b610d3987878787876133b7565b610d438580614fe7565b6001600160a01b03881660009081526035602052604081208054909190610d6b908490615006565b90915550610d7b90508580614fe7565b6001600160a01b03871660009081526035602052604081208054909190610da3908490614fbb565b90915550610df59050610db46129cf565b888888888888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061369892505050565b50505050505050565b61093983838360405180602001604052806000815250611960565b610e33610e246129cf565b610e2d83612706565b836137fc565b50565b60008383838260011480610e4a5750826003145b80610e555750826006145b80610e60575082600c145b80610e6b5750826018145b610eb75760405162461bcd60e51b815260206004820152600c60248201527f496e76616c69642073697a65000000000000000000000000000000000000000060448201526064016106f7565b610ec1838361507b565b158015610ed55750610ed3838261507b565b155b610f215760405162461bcd60e51b815260206004820152601360248201527f496e76616c696420636f6f7264696e617465730000000000000000000000000060448201526064016106f7565b610f2d83610198615006565b8211158015610f475750610f4383610198615006565b8111155b610f935760405162461bcd60e51b815260206004820152600d60248201527f4f7574206f6620626f756e64730000000000000000000000000000000000000060448201526064016106f7565b60366000610198610fa5601889614fd3565b610fb0906018614fe7565b610fba9190614fe7565b610fc560188a614fd3565b610fd0906018614fe7565b610fde90600160fa1b614fbb565b610fe89190614fbb565b81526020019081526020016000205460001461100757600193506113a1565b60006110138888614fbb565b905060006110218988614fbb565b9050600c89116110a6576036600061019861103d600c8b614fd3565b61104890600c614fe7565b6110529190614fe7565b61105d600c8c614fd3565b61106890600c614fe7565b61107690600360f81b614fbb565b6110809190614fbb565b8152602001908152602001600020546000146110a1576001955050506113a1565b61112d565b875b8281101561112b57875b828110156111185760006110c861019883614fe7565b6110d684600360f81b614fbb565b6110e09190614fbb565b60008181526036602052604090205490915015611105576001985050505050506113a1565b50611111600c82614fbb565b90506110b2565b50611124600c82614fbb565b90506110a8565b505b600689116111b0576036600061019861114760068b614fd3565b611152906006614fe7565b61115c9190614fe7565b61116760068c614fd3565b611172906006614fe7565b61118090600160f91b614fbb565b61118a9190614fbb565b8152602001908152602001600020546000146111ab576001955050506113a1565b611237565b875b8281101561123557875b828110156112225760006111d261019883614fe7565b6111e084600160f91b614fbb565b6111ea9190614fbb565b6000818152603660205260409020549091501561120f576001985050505050506113a1565b5061121b600682614fbb565b90506111bc565b5061122e600682614fbb565b90506111b2565b505b600389116112ba576036600061019861125160038b614fd3565b61125c906003614fe7565b6112669190614fe7565b61127160038c614fd3565b61127c906003614fe7565b61128a90600160f81b614fbb565b6112949190614fbb565b8152602001908152602001600020546000146112b5576001955050506113a1565b611341565b875b8281101561133f57875b8281101561132c5760006112dc61019883614fe7565b6112ea84600160f81b614fbb565b6112f49190614fbb565b60008181526036602052604090205490915015611319576001985050505050506113a1565b50611325600382614fbb565b90506112c6565b50611338600382614fbb565b90506112bc565b505b60005b61134e8a80614fe7565b8110156113995760366000611365838d8d8d6138f3565b81526020019081526020016000205460001461138757600196505050506113a1565b8061139181615060565b915050611344565b506000955050505b5050509392505050565b60006113b682612706565b90506001600160a01b0381166106555760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354414e545f544f4b454e00000000000000000000000000000060448201526064016106f7565b6114196104e16129cf565b6114655760405162461bcd60e51b815260206004820152600b60248201527f21415554484f52495a454400000000000000000000000000000000000000000060448201526064016106f7565b61086d8585858585613996565b60006001600160a01b0382166114ca5760405162461bcd60e51b815260206004820152601260248201527f5a45524f5f414444524553535f4f574e4552000000000000000000000000000060448201526064016106f7565b506001600160a01b031660009081526035602052604090205490565b6001600160a01b03821661153c5760405162461bcd60e51b815260206004820152601460248201527f4e4f545f46524f4d5f5a45524f4144445245535300000000000000000000000060448201526064016106f7565b6000806115488361241f565b9150915060006115566129cf565b9050846001600160a01b0316816001600160a01b03161480611599575081801561159957506000848152603860205260409020546001600160a01b038281169116145b806115bc57506001600160a01b03811660009081526034602052604090205460ff165b806115ec57506001600160a01b0380861660009081526037602090815260408083209385168352929052205460ff165b6116385760405162461bcd60e51b815260206004820152601160248201527f554e415554484f52495a45445f4255524e00000000000000000000000000000060448201526064016106f7565b61086d8584866137fc565b60008061164f83612706565b6001600160a01b031614156116a65760405162461bcd60e51b815260206004820152601460248201527f746f6b656e20646f6573206e6f7420657869737400000000000000000000000060448201526064016106f7565b61065261019883614fd3565b6000806116be83612706565b6001600160a01b031614156117155760405162461bcd60e51b815260206004820152601460248201527f746f6b656e20646f6573206e6f7420657869737400000000000000000000000060448201526064016106f7565b6106526101988361507b565b6033546001600160a01b0316806117366129cf565b6001600160a01b03161461178c5760405162461bcd60e51b815260206004820152601360248201527f41444d494e5f4143434553535f44454e4945440000000000000000000000000060448201526064016106f7565b816001600160a01b0316816001600160a01b03167f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f60405160405180910390a3506033805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b61180e6118076129cf565b8383613ba8565b5050565b6033546001600160a01b03166118266129cf565b6001600160a01b03161461187c5760405162461bcd60e51b815260206004820152600a60248201527f41444d494e5f4f4e4c590000000000000000000000000000000000000000000060448201526064016106f7565b6033546001600160a01b03166118906129cf565b6001600160a01b03161461190c5760405162461bcd60e51b815260206004820152602c60248201527f6f6e6c792061646d696e20697320616c6c6f77656420746f206164642073757060448201527f6572206f70657261746f7273000000000000000000000000000000000000000060648201526084016106f7565b6001600160a01b038216600081815260346020526040808220805460ff191685151590811790915590519092917f44f92d27abdf4cfb6a7d712c3af68f3be086d4ca747ab802c36f67d6790060d891a35050565b61196b848484612b06565b611976848484612d0f565b6001600160a01b0383163b156119e65761199a6119916129cf565b85858585612e94565b6119e65760405162461bcd60e51b815260206004820152601860248201527f4552433732315f5452414e534645525f52454a4543544544000000000000000060448201526064016106f7565b50505050565b600054610100900460ff16611a075760005460ff1615611a0b565b303b155b611a7d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016106f7565b600054610100900460ff16158015611aa8576000805460ff1961ff0019909116610100171660011790555b611ab06129cf565b6033805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055611ae682613c7e565b801561180e576000805461ff00191690555050565b60606000611b0883612706565b6001600160a01b03161415611b5f5760405162461bcd60e51b815260206004820152601160248201527f496420646f6573206e6f7420657869737400000000000000000000000000000060448201526064016106f7565b611b6882613cdb565b604051602001611b789190614ea1565b6040516020818303038152906040529050919050565b6033546001600160a01b0316611ba26129cf565b6001600160a01b031614611c1d5760405162461bcd60e51b8152602060048201526024808201527f6f6e6c792061646d696e20697320616c6c6f77656420746f20616464206d696e60448201527f746572730000000000000000000000000000000000000000000000000000000060648201526084016106f7565b6001600160a01b038216611c735760405162461bcd60e51b815260206004820152601c60248201527f506f6c79676f6e4c616e643a20496e76616c696420616464726573730000000060448201526064016106f7565b6001600160a01b038216600081815260396020908152604091829020805460ff19168515159081179091558251938452908301527fff452b3b9159b024a9098f0058c63eccd90d36b3584608202800d662f962bb60910160405180910390a15050565b6033546001600160a01b0316611cea6129cf565b6001600160a01b031614611d405760405162461bcd60e51b815260206004820152600a60248201527f41444d494e5f4f4e4c590000000000000000000000000000000000000000000060448201526064016106f7565b606b805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b03808316600090815260376020908152604080832093851683529290529081205460ff1680611dbd57506001600160a01b03821660009081526034602052604090205460ff165b90505b92915050565b6001600160a01b038a16611e1c5760405162461bcd60e51b815260206004820152601460248201527f66726f6d206973207a65726f206164647265737300000000000000000000000060448201526064016106f7565b6001600160a01b038916611e725760405162461bcd60e51b815260206004820152601a60248201527f63616e27742073656e6420746f207a65726f206164647265737300000000000060448201526064016106f7565b8685148015611e8057508483145b611ecc5760405162461bcd60e51b815260206004820152600c60248201527f696e76616c69642064617461000000000000000000000000000000000000000060448201526064016106f7565b896001600160a01b0316611ede6129cf565b6001600160a01b031614611fcb576001600160a01b038a16600090815260376020526040812090611f0d6129cf565b6001600160a01b0316815260208101919091526040016000205460ff1680611f5a575060346000611f3c6129cf565b6001600160a01b0316815260208101919091526040016000205460ff165b611fcb5760405162461bcd60e51b8152602060048201526024808201527f6e6f7420617574686f72697a656420746f207472616e736665724d756c74695160448201527f756164730000000000000000000000000000000000000000000000000000000060648201526084016106f7565b6000805b888110156120855760008a8a83818110611ff957634e487b7160e01b600052603260045260246000fd5b90506020020135905061205b8d8d838c8c8781811061202857634e487b7160e01b600052603260045260246000fd5b905060200201358b8b8881811061204f57634e487b7160e01b600052603260045260246000fd5b905060200201356133b7565b6120658180614fe7565b61206f9084614fbb565b925050808061207d90615060565b915050611fcf565b506001600160a01b038b16600090815260356020526040812080548392906120ae908490615006565b90915550506001600160a01b038a16600090815260356020526040812080548392906120db908490614fbb565b90915550506001600160a01b038a163b1515801561210557506121058a6317a2fd9160e21b612dcd565b156123215760008167ffffffffffffffff81111561213357634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561215c578160200160208202803683370190505b5090506000805b8a8110156122625760008c8c8381811061218d57634e487b7160e01b600052603260045260246000fd5b90506020020135905060005b6121a38280614fe7565b81101561224d5761220281838e8e878181106121cf57634e487b7160e01b600052603260045260246000fd5b905060200201358d8d888181106121f657634e487b7160e01b600052603260045260246000fd5b905060200201356138f3565b85858151811061222257634e487b7160e01b600052603260045260246000fd5b60209081029190910101528361223781615060565b945050808061224590615060565b915050612199565b5050808061225a90615060565b915050612163565b506122ad61226e6129cf565b8e8e8589898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250613e2a92505050565b61231e5760405162461bcd60e51b8152602060048201526024808201527f657263373231206261746368207472616e736665722072656a6563746564206260448201527f7920746f0000000000000000000000000000000000000000000000000000000060648201526084016106f7565b50505b5050505050505050505050565b6001600160a01b0383166123845760405162461bcd60e51b815260206004820152601660248201527f496e76616c69642073656e64657220616464726573730000000000000000000060448201526064016106f7565b600061238e6129cf565b9050836001600160a01b0316816001600160a01b031614806123c857506001600160a01b03811660009081526034602052604090205460ff165b6124145760405162461bcd60e51b815260206004820152601c60248201527f554e415554484f52495a45445f415050524f56455f464f525f414c4c0000000060448201526064016106f7565b6119e6848484613ba8565b6000807fff000000000000000000000000000000000000000000000000000000000000008316156124925760405162461bcd60e51b815260206004820152601060248201527f496e76616c696420746f6b656e2069640000000000000000000000000000000060448201526064016106f7565b60006124a06101988561507b565b905060006124b061019886614fd3565b600086815260366020526040902054909150600160a01b80821614156124e75760009450600160ff1b808216149350505050612701565b801561250057809450600160ff1b8082161493506126fd565b6000603681610198612513600387614fd3565b61251e906003614fe7565b6125289190614fe7565b612533600388614fd3565b61253e906003614fe7565b61254c90600160f81b614fbb565b6125569190614fbb565b815260208101919091526040016000205490506001600160a01b0381161561258457809550600094506126fb565b6000603681610198612597600688614fd3565b6125a2906006614fe7565b6125ac9190614fe7565b6125b7600689614fd3565b6125c2906006614fe7565b6125d090600160f91b614fbb565b6125da9190614fbb565b815260208101919091526040016000205490506001600160a01b0381161561260857809650600095506126f9565b600060368161019861261b600c89614fd3565b61262690600c614fe7565b6126309190614fe7565b61263b600c8a614fd3565b61264690600c614fe7565b61265490600360f81b614fbb565b61265e9190614fbb565b815260208101919091526040016000205490506001600160a01b0381161561268c57809750600096506126f7565b6036600061019861269e601889614fd3565b6126a9906018614fe7565b6126b39190614fe7565b6126be60188a614fd3565b6126c9906018614fe7565b6126d790600160fa1b614fbb565b6126e19190614fbb565b8152602001908152602001600020549750600096505b505b505b505b5050505b915091565b60007fff000000000000000000000000000000000000000000000000000000000000008216156127785760405162461bcd60e51b815260206004820152601060248201527f496e76616c696420746f6b656e2069640000000000000000000000000000000060448201526064016106f7565b60006127866101988461507b565b9050600061279661019885614fd3565b600085815260366020526040902054909150600160a01b80821614156127c25760009350505050610655565b80156127d2579250610655915050565b60006036816101986127e5600387614fd3565b6127f0906003614fe7565b6127fa9190614fe7565b612805600388614fd3565b612810906003614fe7565b61281e90600160f81b614fbb565b6128289190614fbb565b815260208101919091526040016000205490506001600160a01b0381161561285557935061065592505050565b6000603681610198612868600688614fd3565b612873906006614fe7565b61287d9190614fe7565b612888600689614fd3565b612893906006614fe7565b6128a190600160f91b614fbb565b6128ab9190614fbb565b815260208101919091526040016000205490506001600160a01b038116156128d95794506106559350505050565b60006036816101986128ec600c89614fd3565b6128f790600c614fe7565b6129019190614fe7565b61290c600c8a614fd3565b61291790600c614fe7565b61292590600360f81b614fbb565b61292f9190614fbb565b815260208101919091526040016000205490506001600160a01b0381161561295e579550610655945050505050565b60366000610198612970601889614fd3565b61297b906018614fe7565b6129859190614fe7565b61299060188a614fd3565b61299b906018614fe7565b6129a990600160fa1b614fbb565b6129b39190614fbb565b8152602001908152602001600020549650505050505050610655565b60006129d9613ee9565b905090565b60006129e982612706565b90506001600160a01b038316612a0b57612a068285836000613f33565b612a4d565b612a188285836001613f33565b6000828152603860205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385161790555b81836001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a450505050565b610882868686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020601f8a01819004810282018101909252888152925088915087908190840183828082843760009201829052509250612f54915050565b600080612b128361241f565b915091506000612b206129cf565b90506001600160a01b038316612b785760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e00000000000000000000000000000060448201526064016106f7565b856001600160a01b0316836001600160a01b031614612bd95760405162461bcd60e51b815260206004820152601760248201527f434845434b5452414e534645525f4e4f545f4f574e455200000000000000000060448201526064016106f7565b6001600160a01b038516612c2f5760405162461bcd60e51b815260206004820152601260248201527f4e4f545f544f5f5a45524f41444452455353000000000000000000000000000060448201526064016106f7565b826001600160a01b0316816001600160a01b03161480612c6757506001600160a01b03811660009081526034602052604090205460ff165b80612c9757506001600160a01b0380871660009081526037602090815260408083209385168352929052205460ff165b80612cc35750818015612cc357506000848152603860205260409020546001600160a01b038281169116145b6108825760405162461bcd60e51b815260206004820152601560248201527f554e415554484f52495a45445f5452414e53464552000000000000000000000060448201526064016106f7565b6001600160a01b0383166000908152603560205260408120805491612d3383615049565b90915550506001600160a01b0382166000908152603560205260408120805491612d5c83615060565b9190505550612d878160366000612d708590565b815260200190815260200160002054846000613f33565b80826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b604080516001600160e01b031983166024808301919091528251808303909101815260449091018252602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01ffc9a7000000000000000000000000000000000000000000000000000000001781528251935160008082529485948594909392908183858c612710fa955080519450505050609e5a11612e8057634e487b7160e01b600052600160045260246000fd5b828015612e8a5750815b9695505050505050565b600080846001600160a01b031663150b7a02888887876040518563ffffffff1660e01b8152600401612ec99493929190614f76565b602060405180830381600087803b158015612ee357600080fd5b505af1158015612ef7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f1b9190614e16565b6001600160e01b0319167f150b7a0200000000000000000000000000000000000000000000000000000000149150505b95945050505050565b6000612f5e6129cf565b90506000866001600160a01b0316826001600160a01b03161480612fa757506001600160a01b0380881660009081526037602090815260408083209386168352929052205460ff165b80612fca57506001600160a01b03821660009081526034602052604090205460ff165b90506001600160a01b0387166130225760405162461bcd60e51b815260206004820152601460248201527f4e4f545f46524f4d5f5a45524f4144445245535300000000000000000000000060448201526064016106f7565b6001600160a01b0386166130785760405162461bcd60e51b815260206004820152601260248201527f4e4f545f544f5f5a45524f41444452455353000000000000000000000000000060448201526064016106f7565b845160005b8181101561320f5760008782815181106130a757634e487b7160e01b600052603260045260246000fd5b602002602001015190506000806130bd8361241f565b915091508b6001600160a01b0316826001600160a01b0316146131225760405162461bcd60e51b815260206004820152601b60248201527f42415443485452414e5346455246524f4d5f4e4f545f4f574e4552000000000060448201526064016106f7565b858061314f575080801561314f57506000838152603860205260409020546001600160a01b038881169116145b61319b5760405162461bcd60e51b815260206004820152600e60248201527f4e4f545f415554484f52495a454400000000000000000000000000000000000060448201526064016106f7565b6000838152603660205260408120546131b8918591908e90613f33565b828b6001600160a01b03168d6001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050808061320790615060565b91505061307d565b50866001600160a01b0316886001600160a01b031614613284576001600160a01b03881660009081526035602052604081208054839290613251908490615006565b90915550506001600160a01b0387166000908152603560205260408120805483929061327e908490614fbb565b90915550505b6001600160a01b0387163b156133ad576132a5876317a2fd9160e21b612dcd565b15613308576132b78389898989613e2a565b6133035760405162461bcd60e51b815260206004820152601e60248201527f4552433732315f42415443485f52454345495645445f52454a4543544544000060448201526064016106f7565b6133ad565b83156133ad5760005b818110156133ab5761334d848a8a8a858151811061333f57634e487b7160e01b600052603260045260246000fd5b60200260200101518a612e94565b6133995760405162461bcd60e51b815260206004820152601860248201527f4552433732315f52454345495645445f52454a4543544544000000000000000060448201526064016106f7565b806133a381615060565b915050613311565b505b5050505050505050565b82828282600114806133c95750826003145b806133d45750826006145b806133df575082600c145b806133ea5750826018145b6134365760405162461bcd60e51b815260206004820152600c60248201527f496e76616c69642073697a65000000000000000000000000000000000000000060448201526064016106f7565b613440838361507b565b1580156134545750613452838261507b565b155b6134a05760405162461bcd60e51b815260206004820152601360248201527f496e76616c696420636f6f7264696e617465730000000000000000000000000060448201526064016106f7565b6134ac83610198615006565b82111580156134c657506134c283610198615006565b8111155b6135125760405162461bcd60e51b815260206004820152600d60248201527f4f7574206f6620626f756e64730000000000000000000000000000000000000060448201526064016106f7565b856001141561361957600061352961019886614fe7565b6135339087614fbb565b9050600061354082612706565b90506001600160a01b0381166135985760405162461bcd60e51b815260206004820152601460248201527f746f6b656e20646f6573206e6f7420657869737400000000000000000000000060448201526064016106f7565b896001600160a01b0316816001600160a01b0316146135f95760405162461bcd60e51b815260206004820152601a60248201527f6e6f74206f776e657220696e205f7472616e736665725175616400000000000060448201526064016106f7565b5060009081526036602052604090206001600160a01b0388169055613626565b6136268888888888613fc6565b60005b6136338780614fe7565b8110156133ab57613646818888886138f3565b886001600160a01b03168a6001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a48061369081615060565b915050613629565b6001600160a01b0385163b151580156136bd57506136bd856317a2fd9160e21b612dcd565b15610df55760006136ce8580614fe7565b67ffffffffffffffff8111156136f457634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561371d578160200160208202803683370190505b50905060005b61372d8680614fe7565b81101561377d57613740818787876138f3565b82828151811061376057634e487b7160e01b600052603260045260246000fd5b60209081029190910101528061377581615060565b915050613723565b5061378b8888888486613e2a565b6133ad5760405162461bcd60e51b8152602060048201526024808201527f657263373231206261746368207472616e736665722072656a6563746564206260448201527f7920746f0000000000000000000000000000000000000000000000000000000060648201526084016106f7565b816001600160a01b0316836001600160a01b03161461385d5760405162461bcd60e51b815260206004820152600960248201527f4e4f545f4f574e4552000000000000000000000000000000000000000000000060448201526064016106f7565b80600160a01b6138726001600160ff1b615006565b6000838152603660209081526040808320805494909416949094179092556001600160a01b038716815260359091529081208054916138b083615049565b909155505060405182906000906001600160a01b038716907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a450505050565b6000806139008587614fd3565b905061390d60028261507b565b61394e5761019861391e8285614fbb565b6139289190614fe7565b613932868861507b565b61393c9086614fbb565b6139469190614fbb565b91505061398e565b61019861395b8285614fbb565b6139659190614fe7565b61396f868861507b565b61397a906001614fbb565b6139848787614fbb565b61393c9190615006565b949350505050565b6001600160a01b0385166139ec5760405162461bcd60e51b815260206004820152601260248201527f746f206973207a65726f2061646472657373000000000000000000000000000060448201526064016106f7565b6139f7848484610e36565b15613a445760405162461bcd60e51b815260206004820152600e60248201527f416c7265616479206d696e74656400000000000000000000000000000000000060448201526064016106f7565b600080613a5361019885614fe7565b613a5d9086614fbb565b90508560011415613a7057809150613ad6565b8560031415613a8e57613a8781600160f81b614fbb565b9150613ad6565b8560061415613aa557613a8781600160f91b614fbb565b85600c1415613abc57613a8781600360f81b614fbb565b8560181415613ad657613ad381600160fa1b614fbb565b91505b60005b613ae38780614fe7565b811015613b3e57613af6818888886138f3565b6040516001600160a01b038a16906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a480613b3681615060565b915050613ad9565b5060008281526036602052604090206001600160a01b0388169055613b638680614fe7565b6001600160a01b03881660009081526035602052604081208054909190613b8b908490614fbb565b90915550610df59050613b9c6129cf565b60008989898989613698565b6001600160a01b03821660009081526034602052604090205460ff1615613c115760405162461bcd60e51b815260206004820152601760248201527f494e56414c49445f415050524f56414c5f4348414e474500000000000000000060448201526064016106f7565b6001600160a01b03838116600081815260376020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b606b805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383811691909117918290556040519116907fd91237492a9e30cd2faf361fc103998a382ff0ec2b1b07dc1cbebb76ae2f1ea290600090a250565b606081613d1c575060408051808201909152600181527f30000000000000000000000000000000000000000000000000000000000000006020820152610655565b8160005b8115613d465780613d3081615060565b9150613d3f9050600a83614fd3565b9150613d20565b60008167ffffffffffffffff811115613d6f57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015613d99576020820181803683370190505b5090505b841561398e57613dae600183615006565b9150613dbb600a8661507b565b613dc6906030614fbb565b60f81b818381518110613de957634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350613e23600a86614fd3565b9450613d9d565b600080846001600160a01b0316634b808c46888887876040518563ffffffff1660e01b8152600401613e5f9493929190614f0d565b602060405180830381600087803b158015613e7957600080fd5b505af1158015613e8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613eb19190614e16565b6001600160e01b0319167f4b808c46000000000000000000000000000000000000000000000000000000001491505095945050505050565b606b546000906001600160a01b0316331415613f2c57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c61068f565b503361068f565b8015613f77576000848152603660205260409020600160ff1b6001600160a01b03841673ffffffffffffffffffffffffffffffffffffffff198616171790556119e6565b6001600160a01b038216613f906001600160ff1b615006565b841673ffffffffffffffffffffffffffffffffffffffff1916176036600086815260208101919091526040016000205550505050565b8260031415613fe357613fdd858584846001614028565b5061086d565b8260061415613ffa57613fdd85858484600161419d565b82600c141561401157613fdd858584846001614313565b826018141561086d57610882858584846001614489565b60008061403761019885614fe7565b6140419086614fbb565b9050600061405382600160f81b614fbb565b90506001865b614064886003614fbb565b8110156140ce57865b614078886003614fbb565b8110156140bb5761409e8b61408f61019884614fe7565b6140999085614fbb565b6146a4565b80156140a75750825b9250806140b381615060565b91505061406d565b50806140c681615060565b915050614059565b508415614191578061416c57886001600160a01b03166140f060038989614792565b6001600160a01b03161461416c5760405162461bcd60e51b815260206004820152602b60248201527f6e6f74206f776e6572206f6620616c6c20737562207175616473206e6f72207060448201527f6172656e7420717561647300000000000000000000000000000000000000000060648201526084016106f7565b5060009081526036602052604090206001600160a01b03871690555060019050612f4b565b98975050505050505050565b6000806141ac61019885614fe7565b6141b69086614fbb565b905060006141c882600160f91b614fbb565b90506001865b6141d9886006614fbb565b8110156142f157865b6141ed886006614fbb565b8110156142de5760006142048c8c85856000614028565b9050600061421461019884614fe7565b61422285600160f81b614fbb565b61422c9190614fbb565b60008181526036602052604090205490915080156142b157826142a1578d6001600160a01b031681146142a15760405162461bcd60e51b815260206004820152601560248201527f6e6f74206f776e6572206f66203378332071756164000000000000000000000060448201526064016106f7565b6000828152603660205260408120555b82806142bc57508015155b80156142c55750855b95505050506003816142d79190614fbb565b90506141e2565b506142ea600382614fbb565b90506141ce565b508415614191578061416c57886001600160a01b03166140f060068989614792565b60008061432261019885614fe7565b61432c9086614fbb565b9050600061433e82600360f81b614fbb565b90506001865b61434f88600c614fbb565b81101561446757865b61436388600c614fbb565b81101561445457600061437a8c8c8585600061419d565b9050600061438a61019884614fe7565b61439885600160f91b614fbb565b6143a29190614fbb565b60008181526036602052604090205490915080156144275782614417578d6001600160a01b031681146144175760405162461bcd60e51b815260206004820152601560248201527f6e6f74206f776e6572206f66203678362071756164000000000000000000000060448201526064016106f7565b6000828152603660205260408120555b828061443257508015155b801561443b5750855b955050505060068161444d9190614fbb565b9050614358565b50614460600682614fbb565b9050614344565b508415614191578061416c57886001600160a01b03166140f0600c8989614792565b60008061449861019885614fe7565b6144a29086614fbb565b905060006144b482600160fa1b614fbb565b90506001865b6144c5886018614fbb565b8110156145dd57865b6144d9886018614fbb565b8110156145ca5760006144f08c8c85856000614313565b9050600061450061019884614fe7565b61450e85600360f81b614fbb565b6145189190614fbb565b600081815260366020526040902054909150801561459d578261458d578d6001600160a01b0316811461458d5760405162461bcd60e51b815260206004820152601760248201527f6e6f74206f776e6572206f66203132783132207175616400000000000000000060448201526064016106f7565b6000828152603660205260408120555b82806145a857508015155b80156145b15750855b9550505050600c816145c39190614fbb565b90506144ce565b506145d6600c82614fbb565b90506144ba565b508415614675578061416c576000828152603660205260409020546001600160a01b038a161461416c5760405162461bcd60e51b815260206004820152602a60248201527f6e6f74206f776e6572206f6620616c6c20737562207175616473206e6f74207060448201527f6172656e7420717561640000000000000000000000000000000000000000000060648201526084016106f7565b808061469757506000828152603660205260409020546001600160a01b038a16145b9998505050505050505050565b600081815260366020526040812054801561478857600160a01b808216141561470f5760405162461bcd60e51b815260206004820152600960248201527f6e6f74206f776e6572000000000000000000000000000000000000000000000060448201526064016106f7565b836001600160a01b0316816001600160a01b0316146147705760405162461bcd60e51b815260206004820152600960248201527f6e6f74206f776e6572000000000000000000000000000000000000000000000060448201526064016106f7565b50506000818152603660205260408120556001611dc0565b5060009392505050565b600080806147a1866002614fe7565b905085600314156147b857600160f81b915061483f565b85600614156147cd57600160f91b915061483f565b85600c14156147e257600360f81b915061483f565b85601814156147f757600160fa1b915061483f565b60405162461bcd60e51b815260206004820152600c60248201527f496e76616c69642073697a65000000000000000000000000000000000000000060448201526064016106f7565b600060368161019889614852818a614fd3565b61485c9190614fe7565b6148669190614fe7565b89614871818b614fd3565b61487b9190614fe7565b6148859087614fbb565b61488f9190614fbb565b815260208101919091526040016000205490506001600160a01b038116156148bb5792506148e1915050565b60188710156148d9576148cf828787614792565b93505050506148e1565b600093505050505b9392505050565b80356001600160a01b038116811461065557600080fd5b60008083601f840112614910578081fd5b50813567ffffffffffffffff811115614927578182fd5b602083019150836020808302850101111561494157600080fd5b9250929050565b8035801515811461065557600080fd5b60008083601f840112614969578182fd5b50813567ffffffffffffffff811115614980578182fd5b60208301915083602082850101111561494157600080fd5b600082601f8301126149a8578081fd5b813567ffffffffffffffff808211156149c3576149c36150bb565b604051601f8301601f19908116603f011681019082821181831017156149eb576149eb6150bb565b81604052838152866020858801011115614a03578485fd5b8360208701602083013792830160200193909352509392505050565b600060208284031215614a30578081fd5b611dbd826148e8565b60008060408385031215614a4b578081fd5b614a54836148e8565b9150614a62602084016148e8565b90509250929050565b60008060008060008060008060008060c08b8d031215614a89578586fd5b614a928b6148e8565b9950614aa060208c016148e8565b985060408b013567ffffffffffffffff80821115614abc578788fd5b614ac88e838f016148ff565b909a50985060608d0135915080821115614ae0578788fd5b614aec8e838f016148ff565b909850965060808d0135915080821115614b04578586fd5b614b108e838f016148ff565b909650945060a08d0135915080821115614b28578384fd5b50614b358d828e01614958565b915080935050809150509295989b9194979a5092959850565b60008060008060008060808789031215614b66578182fd5b614b6f876148e8565b9550614b7d602088016148e8565b9450604087013567ffffffffffffffff80821115614b99578384fd5b614ba58a838b016148ff565b90965094506060890135915080821115614bbd578384fd5b50614bca89828a01614958565b979a9699509497509295939492505050565b600080600060608486031215614bf0578283fd5b614bf9846148e8565b9250614c07602085016148e8565b9150614c1560408501614948565b90509250925092565b600080600060608486031215614c32578283fd5b614c3b846148e8565b9250614c49602085016148e8565b9150604084013590509250925092565b60008060008060808587031215614c6e578384fd5b614c77856148e8565b9350614c85602086016148e8565b925060408501359150606085013567ffffffffffffffff811115614ca7578182fd5b614cb387828801614998565b91505092959194509250565b600080600080600080600060c0888a031215614cd9578283fd5b614ce2886148e8565b9650614cf0602089016148e8565b955060408801359450606088013593506080880135925060a088013567ffffffffffffffff811115614d20578283fd5b614d2c8a828b01614958565b989b979a50959850939692959293505050565b60008060408385031215614d51578182fd5b614d5a836148e8565b9150614a6260208401614948565b60008060408385031215614d7a578182fd5b614d83836148e8565b946020939093013593505050565b600080600080600060a08688031215614da8578283fd5b614db1866148e8565b9450602086013593506040860135925060608601359150608086013567ffffffffffffffff811115614de1578182fd5b614ded88828901614998565b9150509295509295909350565b600060208284031215614e0b578081fd5b81356148e1816150d1565b600060208284031215614e27578081fd5b81516148e1816150d1565b600060208284031215614e43578081fd5b5035919050565b600080600060608486031215614e5e578081fd5b505081359360208301359350604090920135919050565b60008151808452614e8d81602086016020860161501d565b601f01601f19169290920160200192915050565b60007f68747470733a2f2f6170692e73616e64626f782e67616d652f6c616e64732f0082528251614ed981601f85016020870161501d565b7f2f6d657461646174612e6a736f6e000000000000000000000000000000000000601f939091019283015250602d01919050565b6000608082016001600160a01b03808816845260208188168186015260806040860152829150865180845260a0860192508188019350845b81811015614f6157845184529382019392820192600101614f45565b50505083810360608501526141918186614e75565b60006001600160a01b03808716835280861660208401525083604083015260806060830152612e8a6080830184614e75565b600060208252611dbd6020830184614e75565b60008219821115614fce57614fce61508f565b500190565b600082614fe257614fe26150a5565b500490565b60008160001904831182151516156150015761500161508f565b500290565b6000828210156150185761501861508f565b500390565b60005b83811015615038578181015183820152602001615020565b838111156119e65750506000910152565b6000816150585761505861508f565b506000190190565b60006000198214156150745761507461508f565b5060010190565b60008261508a5761508a6150a5565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114610e3357600080fdfea26469706673582212202455b696e0707765f7353c3726936fee598d4f1b1b5478e1c999424cad09ca1064736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102775760003560e01c806370a0823111610160578063ac9fe421116100d8578063cf456ae71161008c578063e985e9c511610071578063e985e9c514610582578063eaa5e06714610595578063eeb5a5d1146105a857610277565b8063cf456ae71461055c578063da7422281461056f57610277565b8063c4d66de8116100bd578063c4d66de814610525578063c87b56dd14610538578063ce1b815f1461054b57610277565b8063ac9fe421146104ff578063b88d4fde1461051257610277565b80638f2839701161012f5780639ededf77116101145780639ededf77146102f9578063a22cb465146104c0578063aa271e1a146104d357610277565b80638f2839701461047457806395d89b411461048757610277565b806370a082311461042857806379cc67901461043b578063845a46971461044e5780638e5cb5f61461046157610277565b806338bb305a116101f3578063572b6c05116101c2578063654b748a116101a7578063654b748a146103d85780636e1e3bbf146104045780636e9960c31461041757610277565b8063572b6c05146103a35780636352211e146103c557610277565b806338bb305a1461035757806342842e0e1461036a57806342966c681461037d57806355064d851461039057610277565b80630ef267431161024a57806323b872dd1161022f57806323b872dd1461031e57806328cfbd46146103315780632b9917461461034457610277565b80630ef26743146102f957806315ddc5351461030b57610277565b806301ffc9a71461027c57806306fdde03146102a4578063081812fc146102b9578063095ea7b3146102e4575b600080fd5b61028f61028a366004614dfa565b6105bb565b60405190151581526020015b60405180910390f35b6102ac61065a565b60405161029b9190614fa8565b6102cc6102c7366004614e32565b610692565b6040516001600160a01b03909116815260200161029b565b6102f76102f2366004614d68565b610731565b005b6101985b60405190815260200161029b565b6102f7610319366004614b4e565b610874565b6102f761032c366004614c1e565b61088a565b6102f761033f366004614b4e565b61093e565b6102f7610352366004614c1e565b6109b3565b6102f7610365366004614cbf565b610ba6565b6102f7610378366004614c1e565b610dfe565b6102f761038b366004614e32565b610e19565b61028f61039e366004614e4a565b610e36565b61028f6103b1366004614a1f565b606b546001600160a01b0390811691161490565b6102cc6103d3366004614e32565b6113ab565b61028f6103e6366004614a1f565b6001600160a01b031660009081526034602052604090205460ff1690565b6102f7610412366004614d91565b61140e565b6033546001600160a01b03166102cc565b6102fd610436366004614a1f565b611472565b6102f7610449366004614d68565b6114e6565b6102fd61045c366004614e32565b611643565b6102fd61046f366004614e32565b6116b2565b6102f7610482366004614a1f565b611721565b60408051808201909152600481527f4c414e440000000000000000000000000000000000000000000000000000000060208201526102ac565b6102f76104ce366004614d3f565b6117fc565b61028f6104e1366004614a1f565b6001600160a01b031660009081526039602052604090205460ff1690565b6102f761050d366004614d3f565b611812565b6102f7610520366004614c59565b611960565b6102f7610533366004614a1f565b6119ec565b6102ac610546366004614e32565b611afb565b606b546001600160a01b03166102cc565b6102f761056a366004614d3f565b611b8e565b6102f761057d366004614a1f565b611cd6565b61028f610590366004614a39565b611d6f565b6102f76105a3366004614a6b565b611dc6565b6102f76105b6366004614bdc565b61232e565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316148061061e57507f80ac58cd000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b8061065257507f5b5e139f000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b90505b919050565b60408051808201909152600f81527f53616e64626f782773204c414e4473000000000000000000000000000000000060208201525b90565b60008060006106a08461241f565b90925090506001600160a01b0382166107005760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e00000000000000000000000000000060448201526064015b60405180910390fd5b8015610726575050506000818152603860205260409020546001600160a01b0316610655565b600092505050610655565b6000818152603660205260408120549061074a83612706565b905060006107566129cf565b90506001600160a01b0382166107ae5760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e00000000000000000000000000000060448201526064016106f7565b806001600160a01b0316826001600160a01b031614806107f357506001600160a01b0380831660009081526037602090815260408083209385168352929052205460ff165b8061081657506001600160a01b03811660009081526034602052604090205460ff165b6108625760405162461bcd60e51b815260206004820152601560248201527f554e415554484f52495a45445f415050524f56414c000000000000000000000060448201526064016106f7565b61086d8386866129de565b5050505050565b610882868686868686612a94565b505050505050565b610895838383612b06565b6108a0838383612d0f565b6001600160a01b0382163b151580156108c557506108c5826317a2fd9160e21b612dcd565b15610939576108ed6108d56129cf565b84848460405180602001604052806000815250612e94565b6109395760405162461bcd60e51b815260206004820152601860248201527f4552433732315f5452414e534645525f52454a4543544544000000000000000060448201526064016106f7565b505050565b610882868686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020601f8a01819004810282018101909252888152925088915087908190840183828082843760009201919091525060019250612f54915050565b600081815260366020526040812054906109cc83612706565b905060006109d86129cf565b90506001600160a01b038616610a305760405162461bcd60e51b815260206004820152601360248201527f5a45524f5f414444524553535f53454e4445520000000000000000000000000060448201526064016106f7565b6001600160a01b038216610a865760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e00000000000000000000000000000060448201526064016106f7565b856001600160a01b0316816001600160a01b03161480610acb57506001600160a01b0380871660009081526037602090815260408083209385168352929052205460ff165b80610aee57506001600160a01b03811660009081526034602052604090205460ff165b610b3a5760405162461bcd60e51b815260206004820152601560248201527f554e415554484f52495a45445f415050524f56414c000000000000000000000060448201526064016106f7565b856001600160a01b0316836001600160a01b031614610b9b5760405162461bcd60e51b815260206004820152601060248201527f4f574e45525f4e4f545f53454e4445520000000000000000000000000000000060448201526064016106f7565b6108828386866129de565b6001600160a01b038716610bfc5760405162461bcd60e51b815260206004820152601460248201527f66726f6d206973207a65726f206164647265737300000000000000000000000060448201526064016106f7565b6001600160a01b038616610c525760405162461bcd60e51b815260206004820152601a60248201527f63616e27742073656e6420746f207a65726f206164647265737300000000000060448201526064016106f7565b866001600160a01b0316610c646129cf565b6001600160a01b031614610d2c576001600160a01b038716600090815260376020526040812090610c936129cf565b6001600160a01b0316815260208101919091526040016000205460ff1680610ce0575060346000610cc26129cf565b6001600160a01b0316815260208101919091526040016000205460ff165b610d2c5760405162461bcd60e51b815260206004820152601e60248201527f6e6f7420617574686f72697a656420746f207472616e7366657251756164000060448201526064016106f7565b610d3987878787876133b7565b610d438580614fe7565b6001600160a01b03881660009081526035602052604081208054909190610d6b908490615006565b90915550610d7b90508580614fe7565b6001600160a01b03871660009081526035602052604081208054909190610da3908490614fbb565b90915550610df59050610db46129cf565b888888888888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061369892505050565b50505050505050565b61093983838360405180602001604052806000815250611960565b610e33610e246129cf565b610e2d83612706565b836137fc565b50565b60008383838260011480610e4a5750826003145b80610e555750826006145b80610e60575082600c145b80610e6b5750826018145b610eb75760405162461bcd60e51b815260206004820152600c60248201527f496e76616c69642073697a65000000000000000000000000000000000000000060448201526064016106f7565b610ec1838361507b565b158015610ed55750610ed3838261507b565b155b610f215760405162461bcd60e51b815260206004820152601360248201527f496e76616c696420636f6f7264696e617465730000000000000000000000000060448201526064016106f7565b610f2d83610198615006565b8211158015610f475750610f4383610198615006565b8111155b610f935760405162461bcd60e51b815260206004820152600d60248201527f4f7574206f6620626f756e64730000000000000000000000000000000000000060448201526064016106f7565b60366000610198610fa5601889614fd3565b610fb0906018614fe7565b610fba9190614fe7565b610fc560188a614fd3565b610fd0906018614fe7565b610fde90600160fa1b614fbb565b610fe89190614fbb565b81526020019081526020016000205460001461100757600193506113a1565b60006110138888614fbb565b905060006110218988614fbb565b9050600c89116110a6576036600061019861103d600c8b614fd3565b61104890600c614fe7565b6110529190614fe7565b61105d600c8c614fd3565b61106890600c614fe7565b61107690600360f81b614fbb565b6110809190614fbb565b8152602001908152602001600020546000146110a1576001955050506113a1565b61112d565b875b8281101561112b57875b828110156111185760006110c861019883614fe7565b6110d684600360f81b614fbb565b6110e09190614fbb565b60008181526036602052604090205490915015611105576001985050505050506113a1565b50611111600c82614fbb565b90506110b2565b50611124600c82614fbb565b90506110a8565b505b600689116111b0576036600061019861114760068b614fd3565b611152906006614fe7565b61115c9190614fe7565b61116760068c614fd3565b611172906006614fe7565b61118090600160f91b614fbb565b61118a9190614fbb565b8152602001908152602001600020546000146111ab576001955050506113a1565b611237565b875b8281101561123557875b828110156112225760006111d261019883614fe7565b6111e084600160f91b614fbb565b6111ea9190614fbb565b6000818152603660205260409020549091501561120f576001985050505050506113a1565b5061121b600682614fbb565b90506111bc565b5061122e600682614fbb565b90506111b2565b505b600389116112ba576036600061019861125160038b614fd3565b61125c906003614fe7565b6112669190614fe7565b61127160038c614fd3565b61127c906003614fe7565b61128a90600160f81b614fbb565b6112949190614fbb565b8152602001908152602001600020546000146112b5576001955050506113a1565b611341565b875b8281101561133f57875b8281101561132c5760006112dc61019883614fe7565b6112ea84600160f81b614fbb565b6112f49190614fbb565b60008181526036602052604090205490915015611319576001985050505050506113a1565b50611325600382614fbb565b90506112c6565b50611338600382614fbb565b90506112bc565b505b60005b61134e8a80614fe7565b8110156113995760366000611365838d8d8d6138f3565b81526020019081526020016000205460001461138757600196505050506113a1565b8061139181615060565b915050611344565b506000955050505b5050509392505050565b60006113b682612706565b90506001600160a01b0381166106555760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354414e545f544f4b454e00000000000000000000000000000060448201526064016106f7565b6114196104e16129cf565b6114655760405162461bcd60e51b815260206004820152600b60248201527f21415554484f52495a454400000000000000000000000000000000000000000060448201526064016106f7565b61086d8585858585613996565b60006001600160a01b0382166114ca5760405162461bcd60e51b815260206004820152601260248201527f5a45524f5f414444524553535f4f574e4552000000000000000000000000000060448201526064016106f7565b506001600160a01b031660009081526035602052604090205490565b6001600160a01b03821661153c5760405162461bcd60e51b815260206004820152601460248201527f4e4f545f46524f4d5f5a45524f4144445245535300000000000000000000000060448201526064016106f7565b6000806115488361241f565b9150915060006115566129cf565b9050846001600160a01b0316816001600160a01b03161480611599575081801561159957506000848152603860205260409020546001600160a01b038281169116145b806115bc57506001600160a01b03811660009081526034602052604090205460ff165b806115ec57506001600160a01b0380861660009081526037602090815260408083209385168352929052205460ff165b6116385760405162461bcd60e51b815260206004820152601160248201527f554e415554484f52495a45445f4255524e00000000000000000000000000000060448201526064016106f7565b61086d8584866137fc565b60008061164f83612706565b6001600160a01b031614156116a65760405162461bcd60e51b815260206004820152601460248201527f746f6b656e20646f6573206e6f7420657869737400000000000000000000000060448201526064016106f7565b61065261019883614fd3565b6000806116be83612706565b6001600160a01b031614156117155760405162461bcd60e51b815260206004820152601460248201527f746f6b656e20646f6573206e6f7420657869737400000000000000000000000060448201526064016106f7565b6106526101988361507b565b6033546001600160a01b0316806117366129cf565b6001600160a01b03161461178c5760405162461bcd60e51b815260206004820152601360248201527f41444d494e5f4143434553535f44454e4945440000000000000000000000000060448201526064016106f7565b816001600160a01b0316816001600160a01b03167f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f60405160405180910390a3506033805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b61180e6118076129cf565b8383613ba8565b5050565b6033546001600160a01b03166118266129cf565b6001600160a01b03161461187c5760405162461bcd60e51b815260206004820152600a60248201527f41444d494e5f4f4e4c590000000000000000000000000000000000000000000060448201526064016106f7565b6033546001600160a01b03166118906129cf565b6001600160a01b03161461190c5760405162461bcd60e51b815260206004820152602c60248201527f6f6e6c792061646d696e20697320616c6c6f77656420746f206164642073757060448201527f6572206f70657261746f7273000000000000000000000000000000000000000060648201526084016106f7565b6001600160a01b038216600081815260346020526040808220805460ff191685151590811790915590519092917f44f92d27abdf4cfb6a7d712c3af68f3be086d4ca747ab802c36f67d6790060d891a35050565b61196b848484612b06565b611976848484612d0f565b6001600160a01b0383163b156119e65761199a6119916129cf565b85858585612e94565b6119e65760405162461bcd60e51b815260206004820152601860248201527f4552433732315f5452414e534645525f52454a4543544544000000000000000060448201526064016106f7565b50505050565b600054610100900460ff16611a075760005460ff1615611a0b565b303b155b611a7d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016106f7565b600054610100900460ff16158015611aa8576000805460ff1961ff0019909116610100171660011790555b611ab06129cf565b6033805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055611ae682613c7e565b801561180e576000805461ff00191690555050565b60606000611b0883612706565b6001600160a01b03161415611b5f5760405162461bcd60e51b815260206004820152601160248201527f496420646f6573206e6f7420657869737400000000000000000000000000000060448201526064016106f7565b611b6882613cdb565b604051602001611b789190614ea1565b6040516020818303038152906040529050919050565b6033546001600160a01b0316611ba26129cf565b6001600160a01b031614611c1d5760405162461bcd60e51b8152602060048201526024808201527f6f6e6c792061646d696e20697320616c6c6f77656420746f20616464206d696e60448201527f746572730000000000000000000000000000000000000000000000000000000060648201526084016106f7565b6001600160a01b038216611c735760405162461bcd60e51b815260206004820152601c60248201527f506f6c79676f6e4c616e643a20496e76616c696420616464726573730000000060448201526064016106f7565b6001600160a01b038216600081815260396020908152604091829020805460ff19168515159081179091558251938452908301527fff452b3b9159b024a9098f0058c63eccd90d36b3584608202800d662f962bb60910160405180910390a15050565b6033546001600160a01b0316611cea6129cf565b6001600160a01b031614611d405760405162461bcd60e51b815260206004820152600a60248201527f41444d494e5f4f4e4c590000000000000000000000000000000000000000000060448201526064016106f7565b606b805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b03808316600090815260376020908152604080832093851683529290529081205460ff1680611dbd57506001600160a01b03821660009081526034602052604090205460ff165b90505b92915050565b6001600160a01b038a16611e1c5760405162461bcd60e51b815260206004820152601460248201527f66726f6d206973207a65726f206164647265737300000000000000000000000060448201526064016106f7565b6001600160a01b038916611e725760405162461bcd60e51b815260206004820152601a60248201527f63616e27742073656e6420746f207a65726f206164647265737300000000000060448201526064016106f7565b8685148015611e8057508483145b611ecc5760405162461bcd60e51b815260206004820152600c60248201527f696e76616c69642064617461000000000000000000000000000000000000000060448201526064016106f7565b896001600160a01b0316611ede6129cf565b6001600160a01b031614611fcb576001600160a01b038a16600090815260376020526040812090611f0d6129cf565b6001600160a01b0316815260208101919091526040016000205460ff1680611f5a575060346000611f3c6129cf565b6001600160a01b0316815260208101919091526040016000205460ff165b611fcb5760405162461bcd60e51b8152602060048201526024808201527f6e6f7420617574686f72697a656420746f207472616e736665724d756c74695160448201527f756164730000000000000000000000000000000000000000000000000000000060648201526084016106f7565b6000805b888110156120855760008a8a83818110611ff957634e487b7160e01b600052603260045260246000fd5b90506020020135905061205b8d8d838c8c8781811061202857634e487b7160e01b600052603260045260246000fd5b905060200201358b8b8881811061204f57634e487b7160e01b600052603260045260246000fd5b905060200201356133b7565b6120658180614fe7565b61206f9084614fbb565b925050808061207d90615060565b915050611fcf565b506001600160a01b038b16600090815260356020526040812080548392906120ae908490615006565b90915550506001600160a01b038a16600090815260356020526040812080548392906120db908490614fbb565b90915550506001600160a01b038a163b1515801561210557506121058a6317a2fd9160e21b612dcd565b156123215760008167ffffffffffffffff81111561213357634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561215c578160200160208202803683370190505b5090506000805b8a8110156122625760008c8c8381811061218d57634e487b7160e01b600052603260045260246000fd5b90506020020135905060005b6121a38280614fe7565b81101561224d5761220281838e8e878181106121cf57634e487b7160e01b600052603260045260246000fd5b905060200201358d8d888181106121f657634e487b7160e01b600052603260045260246000fd5b905060200201356138f3565b85858151811061222257634e487b7160e01b600052603260045260246000fd5b60209081029190910101528361223781615060565b945050808061224590615060565b915050612199565b5050808061225a90615060565b915050612163565b506122ad61226e6129cf565b8e8e8589898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250613e2a92505050565b61231e5760405162461bcd60e51b8152602060048201526024808201527f657263373231206261746368207472616e736665722072656a6563746564206260448201527f7920746f0000000000000000000000000000000000000000000000000000000060648201526084016106f7565b50505b5050505050505050505050565b6001600160a01b0383166123845760405162461bcd60e51b815260206004820152601660248201527f496e76616c69642073656e64657220616464726573730000000000000000000060448201526064016106f7565b600061238e6129cf565b9050836001600160a01b0316816001600160a01b031614806123c857506001600160a01b03811660009081526034602052604090205460ff165b6124145760405162461bcd60e51b815260206004820152601c60248201527f554e415554484f52495a45445f415050524f56455f464f525f414c4c0000000060448201526064016106f7565b6119e6848484613ba8565b6000807fff000000000000000000000000000000000000000000000000000000000000008316156124925760405162461bcd60e51b815260206004820152601060248201527f496e76616c696420746f6b656e2069640000000000000000000000000000000060448201526064016106f7565b60006124a06101988561507b565b905060006124b061019886614fd3565b600086815260366020526040902054909150600160a01b80821614156124e75760009450600160ff1b808216149350505050612701565b801561250057809450600160ff1b8082161493506126fd565b6000603681610198612513600387614fd3565b61251e906003614fe7565b6125289190614fe7565b612533600388614fd3565b61253e906003614fe7565b61254c90600160f81b614fbb565b6125569190614fbb565b815260208101919091526040016000205490506001600160a01b0381161561258457809550600094506126fb565b6000603681610198612597600688614fd3565b6125a2906006614fe7565b6125ac9190614fe7565b6125b7600689614fd3565b6125c2906006614fe7565b6125d090600160f91b614fbb565b6125da9190614fbb565b815260208101919091526040016000205490506001600160a01b0381161561260857809650600095506126f9565b600060368161019861261b600c89614fd3565b61262690600c614fe7565b6126309190614fe7565b61263b600c8a614fd3565b61264690600c614fe7565b61265490600360f81b614fbb565b61265e9190614fbb565b815260208101919091526040016000205490506001600160a01b0381161561268c57809750600096506126f7565b6036600061019861269e601889614fd3565b6126a9906018614fe7565b6126b39190614fe7565b6126be60188a614fd3565b6126c9906018614fe7565b6126d790600160fa1b614fbb565b6126e19190614fbb565b8152602001908152602001600020549750600096505b505b505b505b5050505b915091565b60007fff000000000000000000000000000000000000000000000000000000000000008216156127785760405162461bcd60e51b815260206004820152601060248201527f496e76616c696420746f6b656e2069640000000000000000000000000000000060448201526064016106f7565b60006127866101988461507b565b9050600061279661019885614fd3565b600085815260366020526040902054909150600160a01b80821614156127c25760009350505050610655565b80156127d2579250610655915050565b60006036816101986127e5600387614fd3565b6127f0906003614fe7565b6127fa9190614fe7565b612805600388614fd3565b612810906003614fe7565b61281e90600160f81b614fbb565b6128289190614fbb565b815260208101919091526040016000205490506001600160a01b0381161561285557935061065592505050565b6000603681610198612868600688614fd3565b612873906006614fe7565b61287d9190614fe7565b612888600689614fd3565b612893906006614fe7565b6128a190600160f91b614fbb565b6128ab9190614fbb565b815260208101919091526040016000205490506001600160a01b038116156128d95794506106559350505050565b60006036816101986128ec600c89614fd3565b6128f790600c614fe7565b6129019190614fe7565b61290c600c8a614fd3565b61291790600c614fe7565b61292590600360f81b614fbb565b61292f9190614fbb565b815260208101919091526040016000205490506001600160a01b0381161561295e579550610655945050505050565b60366000610198612970601889614fd3565b61297b906018614fe7565b6129859190614fe7565b61299060188a614fd3565b61299b906018614fe7565b6129a990600160fa1b614fbb565b6129b39190614fbb565b8152602001908152602001600020549650505050505050610655565b60006129d9613ee9565b905090565b60006129e982612706565b90506001600160a01b038316612a0b57612a068285836000613f33565b612a4d565b612a188285836001613f33565b6000828152603860205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385161790555b81836001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a450505050565b610882868686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020601f8a01819004810282018101909252888152925088915087908190840183828082843760009201829052509250612f54915050565b600080612b128361241f565b915091506000612b206129cf565b90506001600160a01b038316612b785760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e00000000000000000000000000000060448201526064016106f7565b856001600160a01b0316836001600160a01b031614612bd95760405162461bcd60e51b815260206004820152601760248201527f434845434b5452414e534645525f4e4f545f4f574e455200000000000000000060448201526064016106f7565b6001600160a01b038516612c2f5760405162461bcd60e51b815260206004820152601260248201527f4e4f545f544f5f5a45524f41444452455353000000000000000000000000000060448201526064016106f7565b826001600160a01b0316816001600160a01b03161480612c6757506001600160a01b03811660009081526034602052604090205460ff165b80612c9757506001600160a01b0380871660009081526037602090815260408083209385168352929052205460ff165b80612cc35750818015612cc357506000848152603860205260409020546001600160a01b038281169116145b6108825760405162461bcd60e51b815260206004820152601560248201527f554e415554484f52495a45445f5452414e53464552000000000000000000000060448201526064016106f7565b6001600160a01b0383166000908152603560205260408120805491612d3383615049565b90915550506001600160a01b0382166000908152603560205260408120805491612d5c83615060565b9190505550612d878160366000612d708590565b815260200190815260200160002054846000613f33565b80826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b604080516001600160e01b031983166024808301919091528251808303909101815260449091018252602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01ffc9a7000000000000000000000000000000000000000000000000000000001781528251935160008082529485948594909392908183858c612710fa955080519450505050609e5a11612e8057634e487b7160e01b600052600160045260246000fd5b828015612e8a5750815b9695505050505050565b600080846001600160a01b031663150b7a02888887876040518563ffffffff1660e01b8152600401612ec99493929190614f76565b602060405180830381600087803b158015612ee357600080fd5b505af1158015612ef7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f1b9190614e16565b6001600160e01b0319167f150b7a0200000000000000000000000000000000000000000000000000000000149150505b95945050505050565b6000612f5e6129cf565b90506000866001600160a01b0316826001600160a01b03161480612fa757506001600160a01b0380881660009081526037602090815260408083209386168352929052205460ff165b80612fca57506001600160a01b03821660009081526034602052604090205460ff165b90506001600160a01b0387166130225760405162461bcd60e51b815260206004820152601460248201527f4e4f545f46524f4d5f5a45524f4144445245535300000000000000000000000060448201526064016106f7565b6001600160a01b0386166130785760405162461bcd60e51b815260206004820152601260248201527f4e4f545f544f5f5a45524f41444452455353000000000000000000000000000060448201526064016106f7565b845160005b8181101561320f5760008782815181106130a757634e487b7160e01b600052603260045260246000fd5b602002602001015190506000806130bd8361241f565b915091508b6001600160a01b0316826001600160a01b0316146131225760405162461bcd60e51b815260206004820152601b60248201527f42415443485452414e5346455246524f4d5f4e4f545f4f574e4552000000000060448201526064016106f7565b858061314f575080801561314f57506000838152603860205260409020546001600160a01b038881169116145b61319b5760405162461bcd60e51b815260206004820152600e60248201527f4e4f545f415554484f52495a454400000000000000000000000000000000000060448201526064016106f7565b6000838152603660205260408120546131b8918591908e90613f33565b828b6001600160a01b03168d6001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050808061320790615060565b91505061307d565b50866001600160a01b0316886001600160a01b031614613284576001600160a01b03881660009081526035602052604081208054839290613251908490615006565b90915550506001600160a01b0387166000908152603560205260408120805483929061327e908490614fbb565b90915550505b6001600160a01b0387163b156133ad576132a5876317a2fd9160e21b612dcd565b15613308576132b78389898989613e2a565b6133035760405162461bcd60e51b815260206004820152601e60248201527f4552433732315f42415443485f52454345495645445f52454a4543544544000060448201526064016106f7565b6133ad565b83156133ad5760005b818110156133ab5761334d848a8a8a858151811061333f57634e487b7160e01b600052603260045260246000fd5b60200260200101518a612e94565b6133995760405162461bcd60e51b815260206004820152601860248201527f4552433732315f52454345495645445f52454a4543544544000000000000000060448201526064016106f7565b806133a381615060565b915050613311565b505b5050505050505050565b82828282600114806133c95750826003145b806133d45750826006145b806133df575082600c145b806133ea5750826018145b6134365760405162461bcd60e51b815260206004820152600c60248201527f496e76616c69642073697a65000000000000000000000000000000000000000060448201526064016106f7565b613440838361507b565b1580156134545750613452838261507b565b155b6134a05760405162461bcd60e51b815260206004820152601360248201527f496e76616c696420636f6f7264696e617465730000000000000000000000000060448201526064016106f7565b6134ac83610198615006565b82111580156134c657506134c283610198615006565b8111155b6135125760405162461bcd60e51b815260206004820152600d60248201527f4f7574206f6620626f756e64730000000000000000000000000000000000000060448201526064016106f7565b856001141561361957600061352961019886614fe7565b6135339087614fbb565b9050600061354082612706565b90506001600160a01b0381166135985760405162461bcd60e51b815260206004820152601460248201527f746f6b656e20646f6573206e6f7420657869737400000000000000000000000060448201526064016106f7565b896001600160a01b0316816001600160a01b0316146135f95760405162461bcd60e51b815260206004820152601a60248201527f6e6f74206f776e657220696e205f7472616e736665725175616400000000000060448201526064016106f7565b5060009081526036602052604090206001600160a01b0388169055613626565b6136268888888888613fc6565b60005b6136338780614fe7565b8110156133ab57613646818888886138f3565b886001600160a01b03168a6001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a48061369081615060565b915050613629565b6001600160a01b0385163b151580156136bd57506136bd856317a2fd9160e21b612dcd565b15610df55760006136ce8580614fe7565b67ffffffffffffffff8111156136f457634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561371d578160200160208202803683370190505b50905060005b61372d8680614fe7565b81101561377d57613740818787876138f3565b82828151811061376057634e487b7160e01b600052603260045260246000fd5b60209081029190910101528061377581615060565b915050613723565b5061378b8888888486613e2a565b6133ad5760405162461bcd60e51b8152602060048201526024808201527f657263373231206261746368207472616e736665722072656a6563746564206260448201527f7920746f0000000000000000000000000000000000000000000000000000000060648201526084016106f7565b816001600160a01b0316836001600160a01b03161461385d5760405162461bcd60e51b815260206004820152600960248201527f4e4f545f4f574e4552000000000000000000000000000000000000000000000060448201526064016106f7565b80600160a01b6138726001600160ff1b615006565b6000838152603660209081526040808320805494909416949094179092556001600160a01b038716815260359091529081208054916138b083615049565b909155505060405182906000906001600160a01b038716907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a450505050565b6000806139008587614fd3565b905061390d60028261507b565b61394e5761019861391e8285614fbb565b6139289190614fe7565b613932868861507b565b61393c9086614fbb565b6139469190614fbb565b91505061398e565b61019861395b8285614fbb565b6139659190614fe7565b61396f868861507b565b61397a906001614fbb565b6139848787614fbb565b61393c9190615006565b949350505050565b6001600160a01b0385166139ec5760405162461bcd60e51b815260206004820152601260248201527f746f206973207a65726f2061646472657373000000000000000000000000000060448201526064016106f7565b6139f7848484610e36565b15613a445760405162461bcd60e51b815260206004820152600e60248201527f416c7265616479206d696e74656400000000000000000000000000000000000060448201526064016106f7565b600080613a5361019885614fe7565b613a5d9086614fbb565b90508560011415613a7057809150613ad6565b8560031415613a8e57613a8781600160f81b614fbb565b9150613ad6565b8560061415613aa557613a8781600160f91b614fbb565b85600c1415613abc57613a8781600360f81b614fbb565b8560181415613ad657613ad381600160fa1b614fbb565b91505b60005b613ae38780614fe7565b811015613b3e57613af6818888886138f3565b6040516001600160a01b038a16906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a480613b3681615060565b915050613ad9565b5060008281526036602052604090206001600160a01b0388169055613b638680614fe7565b6001600160a01b03881660009081526035602052604081208054909190613b8b908490614fbb565b90915550610df59050613b9c6129cf565b60008989898989613698565b6001600160a01b03821660009081526034602052604090205460ff1615613c115760405162461bcd60e51b815260206004820152601760248201527f494e56414c49445f415050524f56414c5f4348414e474500000000000000000060448201526064016106f7565b6001600160a01b03838116600081815260376020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b606b805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383811691909117918290556040519116907fd91237492a9e30cd2faf361fc103998a382ff0ec2b1b07dc1cbebb76ae2f1ea290600090a250565b606081613d1c575060408051808201909152600181527f30000000000000000000000000000000000000000000000000000000000000006020820152610655565b8160005b8115613d465780613d3081615060565b9150613d3f9050600a83614fd3565b9150613d20565b60008167ffffffffffffffff811115613d6f57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015613d99576020820181803683370190505b5090505b841561398e57613dae600183615006565b9150613dbb600a8661507b565b613dc6906030614fbb565b60f81b818381518110613de957634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350613e23600a86614fd3565b9450613d9d565b600080846001600160a01b0316634b808c46888887876040518563ffffffff1660e01b8152600401613e5f9493929190614f0d565b602060405180830381600087803b158015613e7957600080fd5b505af1158015613e8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613eb19190614e16565b6001600160e01b0319167f4b808c46000000000000000000000000000000000000000000000000000000001491505095945050505050565b606b546000906001600160a01b0316331415613f2c57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c61068f565b503361068f565b8015613f77576000848152603660205260409020600160ff1b6001600160a01b03841673ffffffffffffffffffffffffffffffffffffffff198616171790556119e6565b6001600160a01b038216613f906001600160ff1b615006565b841673ffffffffffffffffffffffffffffffffffffffff1916176036600086815260208101919091526040016000205550505050565b8260031415613fe357613fdd858584846001614028565b5061086d565b8260061415613ffa57613fdd85858484600161419d565b82600c141561401157613fdd858584846001614313565b826018141561086d57610882858584846001614489565b60008061403761019885614fe7565b6140419086614fbb565b9050600061405382600160f81b614fbb565b90506001865b614064886003614fbb565b8110156140ce57865b614078886003614fbb565b8110156140bb5761409e8b61408f61019884614fe7565b6140999085614fbb565b6146a4565b80156140a75750825b9250806140b381615060565b91505061406d565b50806140c681615060565b915050614059565b508415614191578061416c57886001600160a01b03166140f060038989614792565b6001600160a01b03161461416c5760405162461bcd60e51b815260206004820152602b60248201527f6e6f74206f776e6572206f6620616c6c20737562207175616473206e6f72207060448201527f6172656e7420717561647300000000000000000000000000000000000000000060648201526084016106f7565b5060009081526036602052604090206001600160a01b03871690555060019050612f4b565b98975050505050505050565b6000806141ac61019885614fe7565b6141b69086614fbb565b905060006141c882600160f91b614fbb565b90506001865b6141d9886006614fbb565b8110156142f157865b6141ed886006614fbb565b8110156142de5760006142048c8c85856000614028565b9050600061421461019884614fe7565b61422285600160f81b614fbb565b61422c9190614fbb565b60008181526036602052604090205490915080156142b157826142a1578d6001600160a01b031681146142a15760405162461bcd60e51b815260206004820152601560248201527f6e6f74206f776e6572206f66203378332071756164000000000000000000000060448201526064016106f7565b6000828152603660205260408120555b82806142bc57508015155b80156142c55750855b95505050506003816142d79190614fbb565b90506141e2565b506142ea600382614fbb565b90506141ce565b508415614191578061416c57886001600160a01b03166140f060068989614792565b60008061432261019885614fe7565b61432c9086614fbb565b9050600061433e82600360f81b614fbb565b90506001865b61434f88600c614fbb565b81101561446757865b61436388600c614fbb565b81101561445457600061437a8c8c8585600061419d565b9050600061438a61019884614fe7565b61439885600160f91b614fbb565b6143a29190614fbb565b60008181526036602052604090205490915080156144275782614417578d6001600160a01b031681146144175760405162461bcd60e51b815260206004820152601560248201527f6e6f74206f776e6572206f66203678362071756164000000000000000000000060448201526064016106f7565b6000828152603660205260408120555b828061443257508015155b801561443b5750855b955050505060068161444d9190614fbb565b9050614358565b50614460600682614fbb565b9050614344565b508415614191578061416c57886001600160a01b03166140f0600c8989614792565b60008061449861019885614fe7565b6144a29086614fbb565b905060006144b482600160fa1b614fbb565b90506001865b6144c5886018614fbb565b8110156145dd57865b6144d9886018614fbb565b8110156145ca5760006144f08c8c85856000614313565b9050600061450061019884614fe7565b61450e85600360f81b614fbb565b6145189190614fbb565b600081815260366020526040902054909150801561459d578261458d578d6001600160a01b0316811461458d5760405162461bcd60e51b815260206004820152601760248201527f6e6f74206f776e6572206f66203132783132207175616400000000000000000060448201526064016106f7565b6000828152603660205260408120555b82806145a857508015155b80156145b15750855b9550505050600c816145c39190614fbb565b90506144ce565b506145d6600c82614fbb565b90506144ba565b508415614675578061416c576000828152603660205260409020546001600160a01b038a161461416c5760405162461bcd60e51b815260206004820152602a60248201527f6e6f74206f776e6572206f6620616c6c20737562207175616473206e6f74207060448201527f6172656e7420717561640000000000000000000000000000000000000000000060648201526084016106f7565b808061469757506000828152603660205260409020546001600160a01b038a16145b9998505050505050505050565b600081815260366020526040812054801561478857600160a01b808216141561470f5760405162461bcd60e51b815260206004820152600960248201527f6e6f74206f776e6572000000000000000000000000000000000000000000000060448201526064016106f7565b836001600160a01b0316816001600160a01b0316146147705760405162461bcd60e51b815260206004820152600960248201527f6e6f74206f776e6572000000000000000000000000000000000000000000000060448201526064016106f7565b50506000818152603660205260408120556001611dc0565b5060009392505050565b600080806147a1866002614fe7565b905085600314156147b857600160f81b915061483f565b85600614156147cd57600160f91b915061483f565b85600c14156147e257600360f81b915061483f565b85601814156147f757600160fa1b915061483f565b60405162461bcd60e51b815260206004820152600c60248201527f496e76616c69642073697a65000000000000000000000000000000000000000060448201526064016106f7565b600060368161019889614852818a614fd3565b61485c9190614fe7565b6148669190614fe7565b89614871818b614fd3565b61487b9190614fe7565b6148859087614fbb565b61488f9190614fbb565b815260208101919091526040016000205490506001600160a01b038116156148bb5792506148e1915050565b60188710156148d9576148cf828787614792565b93505050506148e1565b600093505050505b9392505050565b80356001600160a01b038116811461065557600080fd5b60008083601f840112614910578081fd5b50813567ffffffffffffffff811115614927578182fd5b602083019150836020808302850101111561494157600080fd5b9250929050565b8035801515811461065557600080fd5b60008083601f840112614969578182fd5b50813567ffffffffffffffff811115614980578182fd5b60208301915083602082850101111561494157600080fd5b600082601f8301126149a8578081fd5b813567ffffffffffffffff808211156149c3576149c36150bb565b604051601f8301601f19908116603f011681019082821181831017156149eb576149eb6150bb565b81604052838152866020858801011115614a03578485fd5b8360208701602083013792830160200193909352509392505050565b600060208284031215614a30578081fd5b611dbd826148e8565b60008060408385031215614a4b578081fd5b614a54836148e8565b9150614a62602084016148e8565b90509250929050565b60008060008060008060008060008060c08b8d031215614a89578586fd5b614a928b6148e8565b9950614aa060208c016148e8565b985060408b013567ffffffffffffffff80821115614abc578788fd5b614ac88e838f016148ff565b909a50985060608d0135915080821115614ae0578788fd5b614aec8e838f016148ff565b909850965060808d0135915080821115614b04578586fd5b614b108e838f016148ff565b909650945060a08d0135915080821115614b28578384fd5b50614b358d828e01614958565b915080935050809150509295989b9194979a5092959850565b60008060008060008060808789031215614b66578182fd5b614b6f876148e8565b9550614b7d602088016148e8565b9450604087013567ffffffffffffffff80821115614b99578384fd5b614ba58a838b016148ff565b90965094506060890135915080821115614bbd578384fd5b50614bca89828a01614958565b979a9699509497509295939492505050565b600080600060608486031215614bf0578283fd5b614bf9846148e8565b9250614c07602085016148e8565b9150614c1560408501614948565b90509250925092565b600080600060608486031215614c32578283fd5b614c3b846148e8565b9250614c49602085016148e8565b9150604084013590509250925092565b60008060008060808587031215614c6e578384fd5b614c77856148e8565b9350614c85602086016148e8565b925060408501359150606085013567ffffffffffffffff811115614ca7578182fd5b614cb387828801614998565b91505092959194509250565b600080600080600080600060c0888a031215614cd9578283fd5b614ce2886148e8565b9650614cf0602089016148e8565b955060408801359450606088013593506080880135925060a088013567ffffffffffffffff811115614d20578283fd5b614d2c8a828b01614958565b989b979a50959850939692959293505050565b60008060408385031215614d51578182fd5b614d5a836148e8565b9150614a6260208401614948565b60008060408385031215614d7a578182fd5b614d83836148e8565b946020939093013593505050565b600080600080600060a08688031215614da8578283fd5b614db1866148e8565b9450602086013593506040860135925060608601359150608086013567ffffffffffffffff811115614de1578182fd5b614ded88828901614998565b9150509295509295909350565b600060208284031215614e0b578081fd5b81356148e1816150d1565b600060208284031215614e27578081fd5b81516148e1816150d1565b600060208284031215614e43578081fd5b5035919050565b600080600060608486031215614e5e578081fd5b505081359360208301359350604090920135919050565b60008151808452614e8d81602086016020860161501d565b601f01601f19169290920160200192915050565b60007f68747470733a2f2f6170692e73616e64626f782e67616d652f6c616e64732f0082528251614ed981601f85016020870161501d565b7f2f6d657461646174612e6a736f6e000000000000000000000000000000000000601f939091019283015250602d01919050565b6000608082016001600160a01b03808816845260208188168186015260806040860152829150865180845260a0860192508188019350845b81811015614f6157845184529382019392820192600101614f45565b50505083810360608501526141918186614e75565b60006001600160a01b03808716835280861660208401525083604083015260806060830152612e8a6080830184614e75565b600060208252611dbd6020830184614e75565b60008219821115614fce57614fce61508f565b500190565b600082614fe257614fe26150a5565b500490565b60008160001904831182151516156150015761500161508f565b500290565b6000828210156150185761501861508f565b500390565b60005b83811015615038578181015183820152602001615020565b838111156119e65750506000910152565b6000816150585761505861508f565b506000190190565b60006000198214156150745761507461508f565b5060010190565b60008261508a5761508a6150a5565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114610e3357600080fdfea26469706673582212202455b696e0707765f7353c3726936fee598d4f1b1b5478e1c999424cad09ca1064736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "params": {
          "id": "The id of the token.",
          "operator": "The address receiving the approval."
        }
      },
      "approveFor(address,address,uint256)": {
        "params": {
          "id": "The id of the token.",
          "operator": "The address receiving the approval.",
          "sender": "The address giving the approval."
        }
      },
      "balanceOf(address)": {
        "params": {
          "owner": "The address to look for."
        },
        "returns": {
          "_0": "The number of tokens owned by the address."
        }
      },
      "batchTransferQuad(address,address,uint256[],uint256[],uint256[],bytes)": {
        "params": {
          "data": "additional data",
          "from": "current owner of the quad",
          "sizes": "list of sizes for each quad",
          "to": "destination",
          "xs": "list of bottom left x coordinates for each quad",
          "ys": "list of bottom left y coordinates for each quad"
        }
      },
      "burn(uint256)": {
        "params": {
          "id": "The token which will be burnt."
        }
      },
      "burnFrom(address,uint256)": {
        "params": {
          "from": "address whose token is to be burnt.",
          "id": "The token which will be burnt."
        }
      },
      "changeAdmin(address)": {
        "details": "Change the administrator to be `newAdmin`.",
        "params": {
          "newAdmin": "The address of the new administrator."
        }
      },
      "exists(uint256,uint256,uint256)": {
        "params": {
          "size": "size of the quad",
          "x": "x coordinate",
          "y": "y coordinate"
        },
        "returns": {
          "_0": "does the LAND exist"
        }
      },
      "getAdmin()": {
        "details": "Get the current administrator of this contract.",
        "returns": {
          "_0": "The current administrator of this contract."
        }
      },
      "getApproved(uint256)": {
        "params": {
          "id": "The id of the token."
        },
        "returns": {
          "_0": "The address of the operator."
        }
      },
      "getTrustedForwarder()": {
        "returns": {
          "_0": "trustedForwarder address of the trusted forwarder"
        }
      },
      "getX(uint256)": {
        "params": {
          "id": "tokenId"
        },
        "returns": {
          "_0": "the x coordinates"
        }
      },
      "getY(uint256)": {
        "params": {
          "id": "tokenId"
        },
        "returns": {
          "_0": "the y coordinates"
        }
      },
      "height()": {
        "returns": {
          "_0": "height"
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "operator": "The address of the operator.",
          "owner": "The address of the owner."
        },
        "returns": {
          "_0": "isOperator The status of the approval."
        }
      },
      "isMinter(address)": {
        "params": {
          "who": "The address to query."
        },
        "returns": {
          "_0": "whether the address has minter rights."
        }
      },
      "isSuperOperator(address)": {
        "params": {
          "who": "The address to query."
        },
        "returns": {
          "_0": "whether the address has superOperator rights."
        }
      },
      "isTrustedForwarder(address)": {
        "params": {
          "forwarder": "address to check"
        },
        "returns": {
          "_0": "is trusted"
        }
      },
      "mintQuad(address,uint256,uint256,uint256,bytes)": {
        "params": {
          "data": "extra data to pass to the transfer",
          "size": "The size of the new quad",
          "user": "The recipient of the new quad",
          "x": "The top left x coordinate of the new quad",
          "y": "The top left y coordinate of the new quad"
        }
      },
      "name()": {
        "returns": {
          "_0": "The name of the token contract"
        }
      },
      "ownerOf(uint256)": {
        "params": {
          "id": "The id of the token."
        },
        "returns": {
          "owner": "The address of the token owner."
        }
      },
      "safeBatchTransferFrom(address,address,uint256[],bytes)": {
        "params": {
          "data": "Additional data.",
          "from": "The sender of the token.",
          "ids": "The ids of the tokens.",
          "to": "The recipient of the token."
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "params": {
          "from": "The sender of the token.",
          "id": "The id of the token.",
          "to": "The recipient of the token."
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "params": {
          "data": "Additional data.",
          "from": "The sender of the token.",
          "id": "The id of the token.",
          "to": "The recipient of the token."
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "approved": "The determination of the approval.",
          "operator": "The address receiving the approval."
        }
      },
      "setApprovalForAllFor(address,address,bool)": {
        "params": {
          "approved": "The determination of the approval.",
          "operator": "The address receiving the approval.",
          "sender": "The address giving the approval."
        }
      },
      "setMinter(address,bool)": {
        "params": {
          "enabled": "set whether the minter is enabled or disabled.",
          "minter": "address that will be given/removed minter right."
        }
      },
      "setSuperOperator(address,bool)": {
        "params": {
          "enabled": "set whether the superOperator is enabled or disabled.",
          "superOperator": "address that will be given/removed superOperator right."
        }
      },
      "setTrustedForwarder(address)": {
        "details": "Change the address of the trusted forwarder for meta-TX",
        "params": {
          "trustedForwarder": "The new trustedForwarder"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "id": "The id of the interface"
        },
        "returns": {
          "_0": "True if the interface is supported"
        }
      },
      "symbol()": {
        "returns": {
          "_0": "The symbol of the token contract"
        }
      },
      "tokenURI(uint256)": {
        "params": {
          "id": "The id of the token"
        },
        "returns": {
          "_0": "The URI of the token"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "from": "The sender of the token.",
          "id": "The id of the token.",
          "to": "The recipient of the token."
        }
      },
      "transferQuad(address,address,uint256,uint256,uint256,bytes)": {
        "params": {
          "data": "additional data",
          "from": "current owner of the quad",
          "size": "size of the quad",
          "to": "destination",
          "x": "The top left x coordinate of the quad",
          "y": "The top left y coordinate of the quad"
        }
      },
      "width()": {
        "returns": {
          "_0": "width"
        }
      }
    },
    "title": "LAND token on L2",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approve(address,uint256)": {
        "notice": "Approve an operator to spend tokens on the senders behalf."
      },
      "approveFor(address,address,uint256)": {
        "notice": "Approve an operator to spend tokens on the sender behalf."
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens owned by an address."
      },
      "batchTransferQuad(address,address,uint256[],uint256[],uint256[],bytes)": {
        "notice": "transfer multiple quad (aligned to a quad tree with size 3, 6, 12 or 24 only)"
      },
      "burn(uint256)": {
        "notice": "Burns token `id`."
      },
      "burnFrom(address,uint256)": {
        "notice": "Burn token `id` from `from`."
      },
      "changeAdmin(address)": {
        "notice": "Change the admin of the contract"
      },
      "exists(uint256,uint256,uint256)": {
        "notice": "Checks if a LAND exists by its coordinates"
      },
      "getAdmin()": {
        "notice": "Get the current admin"
      },
      "getApproved(uint256)": {
        "notice": "Get the approved operator for a specific token."
      },
      "getTrustedForwarder()": {
        "notice": "Get the current trusted forwarder"
      },
      "getX(uint256)": {
        "notice": "x coordinate of Land token"
      },
      "getY(uint256)": {
        "notice": "y coordinate of Land token"
      },
      "height()": {
        "notice": "total height of the map"
      },
      "isApprovedForAll(address,address)": {
        "notice": "Check if the sender approved the operator."
      },
      "isMinter(address)": {
        "notice": "check whether address `who` is given minter rights."
      },
      "isSuperOperator(address)": {
        "notice": "check whether address `who` is given superOperator rights."
      },
      "isTrustedForwarder(address)": {
        "notice": "Checks if an address is a trusted forwarder"
      },
      "mintQuad(address,uint256,uint256,uint256,bytes)": {
        "notice": "Mint a new quad (aligned to a quad tree with size 1, 3, 6, 12 or 24 only)"
      },
      "name()": {
        "notice": "Return the name of the token contract"
      },
      "ownerOf(uint256)": {
        "notice": "Get the owner of a token."
      },
      "safeBatchTransferFrom(address,address,uint256[],bytes)": {
        "notice": "Transfer many tokens between 2 addresses, while ensuring the receiving contract has a receiver method."
      },
      "safeTransferFrom(address,address,uint256)": {
        "notice": "Transfer a token between 2 addresses letting the receiver know of the transfer."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "Transfer a token between 2 addresses letting the receiver knows of the transfer."
      },
      "setApprovalForAll(address,bool)": {
        "notice": "Set the approval for an operator to manage all the tokens of the sender."
      },
      "setApprovalForAllFor(address,address,bool)": {
        "notice": "Set the approval for an operator to manage all the tokens of the sender."
      },
      "setMinter(address,bool)": {
        "notice": "Enable or disable the ability of `minter` to transfer tokens of all (minter rights)."
      },
      "setSuperOperator(address,bool)": {
        "notice": "Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights)."
      },
      "supportsInterface(bytes4)": {
        "notice": "Check if the contract supports an interface 0x01ffc9a7 is ERC-165 0x80ac58cd is ERC-721 0x5b5e139f is ERC-721 metadata"
      },
      "symbol()": {
        "notice": "Return the symbol of the token contract"
      },
      "tokenURI(uint256)": {
        "notice": "Return the URI of a specific token"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer a token between 2 addresses."
      },
      "transferQuad(address,address,uint256,uint256,uint256,bytes)": {
        "notice": "transfer one quad (aligned to a quad tree with size 3, 6, 12 or 24 only)"
      },
      "width()": {
        "notice": "total width of the map"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10217,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV1.sol:PolygonLandV1",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 10220,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV1.sol:PolygonLandV1",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 12276,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV1.sol:PolygonLandV1",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 25799,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV1.sol:PolygonLandV1",
        "label": "_admin",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 26204,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV1.sol:PolygonLandV1",
        "label": "_superOperators",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 24365,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV1.sol:PolygonLandV1",
        "label": "_numNFTPerAddress",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 24370,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV1.sol:PolygonLandV1",
        "label": "_owners",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 24376,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV1.sol:PolygonLandV1",
        "label": "_operatorsForAll",
        "offset": 0,
        "slot": "55",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 24380,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV1.sol:PolygonLandV1",
        "label": "_operators",
        "offset": 0,
        "slot": "56",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 42273,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV1.sol:PolygonLandV1",
        "label": "_minters",
        "offset": 0,
        "slot": "57",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 44985,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV1.sol:PolygonLandV1",
        "label": "__gap",
        "offset": 0,
        "slot": "58",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 22610,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV1.sol:PolygonLandV1",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "107",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}