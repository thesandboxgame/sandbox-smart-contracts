{
  "address": "0xFc22e1c1552D80faBa443fEE74c6FA19665cE931",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "superOperator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "SuperOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountNeeded",
          "type": "uint256"
        }
      ],
      "name": "addAllowanceIfNeeded",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "remaining",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approveFor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "changeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "isSuperOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "superOperator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setSuperOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7fc5b7d678ad4babea891b7fa809f0e531e2ad9ed85f6d3509c897c40989ada9",
  "receipt": {
    "to": null,
    "from": "0x5F890c9522dCE5670d741D4277BFCC2d9cA8Af02",
    "contractAddress": "0xFc22e1c1552D80faBa443fEE74c6FA19665cE931",
    "transactionIndex": 0,
    "gasUsed": "1052621",
    "logsBloom": "0x
    "blockHash": "0x0f3f22cf792438329ff84925e9818cf70264474ba9aada2e65b89d59c8611af8",
    "transactionHash": "0x7fc5b7d678ad4babea891b7fa809f0e531e2ad9ed85f6d3509c897c40989ada9",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5701155,
        "transactionHash": "0x7fc5b7d678ad4babea891b7fa809f0e531e2ad9ed85f6d3509c897c40989ada9",
        "address": "0xFc22e1c1552D80faBa443fEE74c6FA19665cE931",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02"
        ],
        "data": "0x000000000000000000000000000000000000000009b18ab5df7180b6b8000000",
        "logIndex": 0,
        "blockHash": "0x0f3f22cf792438329ff84925e9818cf70264474ba9aada2e65b89d59c8611af8"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 5701155,
        "transactionHash": "0x7fc5b7d678ad4babea891b7fa809f0e531e2ad9ed85f6d3509c897c40989ada9",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02",
          "0x0000000000000000000000006c095a53250dd250797ff915a716cca690ad8842"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000175f7527ddedafd000000000000000000000000000000000000000000000003eeb9aa0a1a284671000000000000000000000000000000000000000000000013f3402149bc4f829d000000000000000000000000000000000000000000000003ed43b2b79c496b74000000000000000000000000000000000000000000000013f4b6189c3a2e5d9a",
        "logIndex": 1,
        "blockHash": "0x0f3f22cf792438329ff84925e9818cf70264474ba9aada2e65b89d59c8611af8"
      }
    ],
    "blockNumber": 5701155,
    "cumulativeGasUsed": "1052621",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8647b3c46fdd7d95d4038ddf2cc1e589",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"superOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SuperOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountNeeded\",\"type\":\"uint256\"}],\"name\":\"addAllowanceIfNeeded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approveFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isSuperOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"superOperator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setSuperOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addAllowanceIfNeeded(address,address,uint256)\":{\"params\":{\"amountNeeded\":\"The amount requested to spend\",\"owner\":\"The address of the owner of the tokens\",\"spender\":\"The address wanting to spend tokens\"},\"returns\":{\"success\":\"Whether or not the call succeeded.\"}},\"allowance(address,address)\":{\"params\":{\"owner\":\"The address whose token is allowed.\",\"spender\":\"The address allowed to transfer.\"},\"returns\":{\"remaining\":\"The amount of token `spender` is allowed to transfer on behalf of `owner`.\"}},\"approve(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens allowed.\",\"spender\":\"The address to be given rights to transfer.\"},\"returns\":{\"success\":\"Whether or not the call succeeded.\"}},\"approveFor(address,address,uint256)\":{\"params\":{\"amount\":\"The number of tokens allowed.\",\"owner\":\"The address whose token is allowed.\",\"spender\":\"The address to be given rights to transfer.\"},\"returns\":{\"success\":\"Whether or not the call succeeded.\"}},\"balanceOf(address)\":{\"params\":{\"owner\":\"The address to query the balance of.\"},\"returns\":{\"_0\":\"The amount owned by `owner`.\"}},\"burn(uint256)\":{\"params\":{\"amount\":\"The number of tokens to burn.\"}},\"burnFor(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to burn.\",\"from\":\"The address whose token to burn.\"}},\"changeAdmin(address)\":{\"details\":\"Change the administrator to be `newAdmin`.\",\"params\":{\"newAdmin\":\"The address of the new administrator.\"}},\"decimals()\":{\"returns\":{\"_0\":\"The number of decimals.\"}},\"getAdmin()\":{\"details\":\"Get the current administrator of this contract.\",\"returns\":{\"_0\":\"The current administrator of this contract.\"}},\"isSuperOperator(address)\":{\"params\":{\"who\":\"The address to query.\"},\"returns\":{\"_0\":\"whether the address has superOperator rights.\"}},\"name()\":{\"returns\":{\"_0\":\"The name of the token collection.\"}},\"setSuperOperator(address,bool)\":{\"params\":{\"enabled\":\"set whether the superOperator is enabled or disabled.\",\"superOperator\":\"address that will be given/removed superOperator right.\"}},\"symbol()\":{\"returns\":{\"_0\":\"The symbol of the token collection.\"}},\"totalSupply()\":{\"returns\":{\"_0\":\"The total number of tokens in existence.\"}},\"transfer(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens being transfered.\",\"to\":\"The recipient address of the tokens being transfered.\"},\"returns\":{\"success\":\"Whether or not the transfer succeeded.\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"The number of tokens transfered.\",\"from\":\"The origin address  of the tokens being transferred.\",\"to\":\"The recipient address of the tokensbeing  transfered.\"},\"returns\":{\"success\":\"Whether or not the transfer succeeded.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"notice\":\"emitted when owner grant transfer rights to another address\"},\"Transfer(address,address,uint256)\":{\"notice\":\"emitted when tokens are transfered from one address to another.\"}},\"kind\":\"user\",\"methods\":{\"addAllowanceIfNeeded(address,address,uint256)\":{\"notice\":\"Increase the allowance for the spender if needed\"},\"allowance(address,address)\":{\"notice\":\"Get the allowance of `spender` for `owner`'s tokens.\"},\"approve(address,uint256)\":{\"notice\":\"Approve `spender` to transfer `amount` tokens.\"},\"approveFor(address,address,uint256)\":{\"notice\":\"Approve `spender` to transfer `amount` tokens from `owner`.\"},\"balanceOf(address)\":{\"notice\":\"Get the balance of `owner`.\"},\"burn(uint256)\":{\"notice\":\"Burn `amount` tokens.\"},\"burnFor(address,uint256)\":{\"notice\":\"Burn `amount` tokens from `owner`.\"},\"decimals()\":{\"notice\":\"Get the number of decimals for the token collection.\"},\"isSuperOperator(address)\":{\"notice\":\"check whether address `who` is given superOperator rights.\"},\"name()\":{\"notice\":\"Get the name of the token collection.\"},\"setSuperOperator(address,bool)\":{\"notice\":\"Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights).\"},\"symbol()\":{\"notice\":\"Get the symbol for the token collection.\"},\"totalSupply()\":{\"notice\":\"Get the total number of tokens in existence.\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer `amount` tokens to `to`.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `from` to `to`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/solc_0.8/test/FakeLPSandMatic.sol\":\"FakeLPSandMatic\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-0.8/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/ERC20/ERC20BaseToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-0.8/utils/Context.sol\\\";\\nimport \\\"./extensions/ERC20Internal.sol\\\";\\nimport \\\"../../interfaces/IERC20Extended.sol\\\";\\nimport \\\"../WithSuperOperators.sol\\\";\\n\\nabstract contract ERC20BaseToken is WithSuperOperators, IERC20, IERC20Extended, ERC20Internal, Context {\\n    string internal _name;\\n    string internal _symbol;\\n    address internal immutable _operator;\\n    uint256 internal _totalSupply;\\n    mapping(address => uint256) internal _balances;\\n    mapping(address => mapping(address => uint256)) internal _allowances;\\n\\n    constructor(\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        address admin,\\n        address operator\\n    ) {\\n        _name = tokenName;\\n        _symbol = tokenSymbol;\\n        _admin = admin;\\n        _operator = operator;\\n    }\\n\\n    /// @notice Transfer `amount` tokens to `to`.\\n    /// @param to The recipient address of the tokens being transfered.\\n    /// @param amount The number of tokens being transfered.\\n    /// @return success Whether or not the transfer succeeded.\\n    function transfer(address to, uint256 amount) external override returns (bool success) {\\n        _transfer(_msgSender(), to, amount);\\n        return true;\\n    }\\n\\n    /// @notice Transfer `amount` tokens from `from` to `to`.\\n    /// @param from The origin address  of the tokens being transferred.\\n    /// @param to The recipient address of the tokensbeing  transfered.\\n    /// @param amount The number of tokens transfered.\\n    /// @return success Whether or not the transfer succeeded.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external override returns (bool success) {\\n        if (_msgSender() != from && !_superOperators[_msgSender()] && _msgSender() != _operator) {\\n            uint256 currentAllowance = _allowances[from][_msgSender()];\\n            if (currentAllowance != ~uint256(0)) {\\n                // save gas when allowance is maximal by not reducing it (see https://github.com/ethereum/EIPs/issues/717)\\n                require(currentAllowance >= amount, \\\"NOT_AUTHORIZED_ALLOWANCE\\\");\\n                _allowances[from][_msgSender()] = currentAllowance - amount;\\n            }\\n        }\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /// @notice Burn `amount` tokens.\\n    /// @param amount The number of tokens to burn.\\n    function burn(uint256 amount) external override {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /// @notice Burn `amount` tokens from `owner`.\\n    /// @param from The address whose token to burn.\\n    /// @param amount The number of tokens to burn.\\n    function burnFor(address from, uint256 amount) external override {\\n        _burn(from, amount);\\n    }\\n\\n    /// @notice Approve `spender` to transfer `amount` tokens.\\n    /// @param spender The address to be given rights to transfer.\\n    /// @param amount The number of tokens allowed.\\n    /// @return success Whether or not the call succeeded.\\n    function approve(address spender, uint256 amount) external override returns (bool success) {\\n        _approveFor(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /// @notice Get the name of the token collection.\\n    /// @return The name of the token collection.\\n    function name() external view virtual returns (string memory) {\\n        //added virtual\\n        return _name;\\n    }\\n\\n    /// @notice Get the symbol for the token collection.\\n    /// @return The symbol of the token collection.\\n    function symbol() external view virtual returns (string memory) {\\n        //added virtual\\n        return _symbol;\\n    }\\n\\n    /// @notice Get the total number of tokens in existence.\\n    /// @return The total number of tokens in existence.\\n    function totalSupply() external view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /// @notice Get the balance of `owner`.\\n    /// @param owner The address to query the balance of.\\n    /// @return The amount owned by `owner`.\\n    function balanceOf(address owner) external view override returns (uint256) {\\n        return _balances[owner];\\n    }\\n\\n    /// @notice Get the allowance of `spender` for `owner`'s tokens.\\n    /// @param owner The address whose token is allowed.\\n    /// @param spender The address allowed to transfer.\\n    /// @return remaining The amount of token `spender` is allowed to transfer on behalf of `owner`.\\n    function allowance(address owner, address spender) external view override returns (uint256 remaining) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /// @notice Get the number of decimals for the token collection.\\n    /// @return The number of decimals.\\n    function decimals() external pure virtual returns (uint8) {\\n        return uint8(18);\\n    }\\n\\n    /// @notice Approve `spender` to transfer `amount` tokens from `owner`.\\n    /// @param owner The address whose token is allowed.\\n    /// @param spender The address to be given rights to transfer.\\n    /// @param amount The number of tokens allowed.\\n    /// @return success Whether or not the call succeeded.\\n    function approveFor(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) public override returns (bool success) {\\n        require(_msgSender() == owner || _superOperators[_msgSender()] || _msgSender() == _operator, \\\"NOT_AUTHORIZED\\\");\\n        _approveFor(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /// @notice Increase the allowance for the spender if needed\\n    /// @param owner The address of the owner of the tokens\\n    /// @param spender The address wanting to spend tokens\\n    /// @param amountNeeded The amount requested to spend\\n    /// @return success Whether or not the call succeeded.\\n    function addAllowanceIfNeeded(\\n        address owner,\\n        address spender,\\n        uint256 amountNeeded\\n    ) public returns (bool success) {\\n        require(_msgSender() == owner || _superOperators[_msgSender()] || _msgSender() == _operator, \\\"INVALID_SENDER\\\");\\n        _addAllowanceIfNeeded(owner, spender, amountNeeded);\\n        return true;\\n    }\\n\\n    /// @dev See addAllowanceIfNeeded.\\n    function _addAllowanceIfNeeded(\\n        address owner,\\n        address spender,\\n        uint256 amountNeeded /*(ERC20Internal, ERC20ExecuteExtension, ERC20BasicApproveExtension)*/\\n    ) internal virtual override {\\n        if (amountNeeded > 0 && !isSuperOperator(spender) && spender != _operator) {\\n            uint256 currentAllowance = _allowances[owner][spender];\\n            if (currentAllowance < amountNeeded) {\\n                _approveFor(owner, spender, amountNeeded);\\n            }\\n        }\\n    }\\n\\n    /// @dev See approveFor.\\n    function _approveFor(\\n        address owner,\\n        address spender,\\n        uint256 amount /*(ERC20BasicApproveExtension, ERC20Internal)*/\\n    ) internal virtual override {\\n        require(owner != address(0) && spender != address(0), \\\"INVALID_OWNER_||_SPENDER\\\");\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /// @dev See transfer.\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount /*(ERC20Internal, ERC20ExecuteExtension)*/\\n    ) internal virtual override {\\n        require(to != address(0), \\\"NOT_TO_ZEROADDRESS\\\");\\n        require(to != address(this), \\\"NOT_TO_THIS\\\");\\n        uint256 currentBalance = _balances[from];\\n        require(currentBalance >= amount, \\\"INSUFFICIENT_FUNDS\\\");\\n        _balances[from] = currentBalance - amount;\\n        _balances[to] += amount;\\n        emit Transfer(from, to, amount);\\n    }\\n\\n    /// @dev Mint tokens for a recipient.\\n    /// @param to The recipient address.\\n    /// @param amount The number of token to mint.\\n    function _mint(address to, uint256 amount) internal {\\n        require(to != address(0), \\\"NOT_TO_ZEROADDRESS\\\");\\n        require(amount > 0, \\\"MINT_O_TOKENS\\\");\\n        uint256 currentTotalSupply = _totalSupply;\\n        uint256 newTotalSupply = currentTotalSupply + amount;\\n        require(newTotalSupply > currentTotalSupply, \\\"OVERFLOW\\\");\\n        _totalSupply = newTotalSupply;\\n        _balances[to] += amount;\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    /// @dev Burn tokens from an address.\\n    /// @param from The address whose tokens to burn.\\n    /// @param amount The number of token to burn.\\n    function _burn(address from, uint256 amount) internal {\\n        require(amount > 0, \\\"BURN_O_TOKENS\\\");\\n        if (_msgSender() != from && !_superOperators[_msgSender()] && _msgSender() != _operator) {\\n            uint256 currentAllowance = _allowances[from][_msgSender()];\\n            if (currentAllowance != ~uint256(0)) {\\n                // save gas when allowance is maximal by not reducing it (see https://github.com/ethereum/EIPs/issues/717)\\n                require(currentAllowance >= amount, \\\"INSUFFICIENT_ALLOWANCE\\\");\\n                _allowances[from][_msgSender()] = currentAllowance - amount;\\n            }\\n        }\\n\\n        uint256 currentBalance = _balances[from];\\n        require(currentBalance >= amount, \\\"INSUFFICIENT_FUNDS\\\");\\n        _balances[from] = currentBalance - amount;\\n        _totalSupply -= amount;\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x21abee15baa9d3ba0016b24e3dce6eb47020edc57cfcc92eb24bc554939eaad9\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/ERC20/extensions/ERC20Internal.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nabstract contract ERC20Internal {\\n    function _approveFor(\\n        address owner,\\n        address target,\\n        uint256 amount\\n    ) internal virtual;\\n\\n    function _addAllowanceIfNeeded(\\n        address owner,\\n        address spender,\\n        uint256 amountNeeded\\n    ) internal virtual;\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0x016db35dc3c8fad3cedc08f3152e3b90b7adb4d961c5ac08c03106e18535d10e\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/WithAdmin.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\ncontract WithAdmin {\\n    address internal _admin;\\n\\n    /// @dev Emits when the contract administrator is changed.\\n    /// @param oldAdmin The address of the previous administrator.\\n    /// @param newAdmin The address of the new administrator.\\n    event AdminChanged(address indexed oldAdmin, address indexed newAdmin);\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == _admin, \\\"ADMIN_ONLY\\\");\\n        _;\\n    }\\n\\n    /// @dev Get the current administrator of this contract.\\n    /// @return The current administrator of this contract.\\n    function getAdmin() external view returns (address) {\\n        return _admin;\\n    }\\n\\n    /// @dev Change the administrator to be `newAdmin`.\\n    /// @param newAdmin The address of the new administrator.\\n    function changeAdmin(address newAdmin) external {\\n        require(msg.sender == _admin, \\\"ADMIN_ACCESS_DENIED\\\");\\n        emit AdminChanged(_admin, newAdmin);\\n        _admin = newAdmin;\\n    }\\n}\\n\",\"keccak256\":\"0x0239f3f826576fc7c050503f29a708b20b8b682df569e3d67bd83a836b0c925a\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/WithSuperOperators.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\nimport \\\"./WithAdmin.sol\\\";\\n\\ncontract WithSuperOperators is WithAdmin {\\n    mapping(address => bool) internal _superOperators;\\n\\n    event SuperOperator(address indexed superOperator, bool indexed enabled);\\n\\n    /// @notice Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights).\\n    /// @param superOperator address that will be given/removed superOperator right.\\n    /// @param enabled set whether the superOperator is enabled or disabled.\\n    function setSuperOperator(address superOperator, bool enabled) external {\\n        require(msg.sender == _admin, \\\"only admin is allowed to add super operators\\\");\\n        _superOperators[superOperator] = enabled;\\n        emit SuperOperator(superOperator, enabled);\\n    }\\n\\n    /// @notice check whether address `who` is given superOperator rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has superOperator rights.\\n    function isSuperOperator(address who) public view returns (bool) {\\n        return _superOperators[who];\\n    }\\n}\\n\",\"keccak256\":\"0x007c3f90984d5b3e4f47ac067040c66cb7dbee1dc7de1ce7777e5c38a44b6734\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.2;\\n\\n/// @dev see https://eips.ethereum.org/EIPS/eip-20\\ninterface IERC20 {\\n    /// @notice emitted when tokens are transfered from one address to another.\\n    /// @param from address from which the token are transfered from (zero means tokens are minted).\\n    /// @param to destination address which the token are transfered to (zero means tokens are burnt).\\n    /// @param value amount of tokens transferred.\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice emitted when owner grant transfer rights to another address\\n    /// @param owner address allowing its token to be transferred.\\n    /// @param spender address allowed to spend on behalf of `owner`\\n    /// @param value amount of tokens allowed.\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice return the current total amount of tokens owned by all holders.\\n    /// @return supply total number of tokens held.\\n    function totalSupply() external view returns (uint256 supply);\\n\\n    /// @notice return the number of tokens held by a particular address.\\n    /// @param who address being queried.\\n    /// @return balance number of token held by that address.\\n    function balanceOf(address who) external view returns (uint256 balance);\\n\\n    /// @notice transfer tokens to a specific address.\\n    /// @param to destination address receiving the tokens.\\n    /// @param value number of tokens to transfer.\\n    /// @return success whether the transfer succeeded.\\n    function transfer(address to, uint256 value) external returns (bool success);\\n\\n    /// @notice transfer tokens from one address to another.\\n    /// @param from address tokens will be sent from.\\n    /// @param to destination address receiving the tokens.\\n    /// @param value number of tokens to transfer.\\n    /// @return success whether the transfer succeeded.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool success);\\n\\n    /// @notice approve an address to spend on your behalf.\\n    /// @param spender address entitled to transfer on your behalf.\\n    /// @param value amount allowed to be transfered.\\n    /// @param success whether the approval succeeded.\\n    function approve(address spender, uint256 value) external returns (bool success);\\n\\n    /// @notice return the current allowance for a particular owner/spender pair.\\n    /// @param owner address allowing spender.\\n    /// @param spender address allowed to spend.\\n    /// @return amount number of tokens `spender` can spend on behalf of `owner`.\\n    function allowance(address owner, address spender) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x9fe745d44fdcd7987682221d68b7a66d0784fbd81ae1d4e43a6c766347733a96\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC20Extended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.2;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IERC20Extended is IERC20 {\\n    function burnFor(address from, uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n\\n    function approveFor(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xf02074902aff81db019aac8808c524d2ab77e1cb216f5327992ed7db95fee919\",\"license\":\"MIT\"},\"src/solc_0.8/test/FakeLPSandMatic.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"../common/BaseWithStorage/ERC20/ERC20BaseToken.sol\\\";\\n\\ncontract FakeLPSandMatic is ERC20BaseToken {\\n    constructor() ERC20BaseToken(\\\"LPSandMatic\\\", \\\"LPSM\\\", msg.sender, msg.sender) {\\n        _mint(msg.sender, 3000000000 * 10**18);\\n    }\\n}\\n\",\"keccak256\":\"0xabfe4652a5c023fcb5e5e43d58f05e53ec153c7a572c43b3175c83b39feb0f9c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604080518082018252600b81526a4c5053616e644d6174696360a81b6020808301918252835180850190945260048452634c50534d60e01b9084015281519192913391829162000065916002916200022b565b5082516200007b9060039060208601906200022b565b50600080546001600160a01b0319166001600160a01b03939093169290921790915560601b6001600160601b03191660805250620000c89050336b09b18ab5df7180b6b8000000620000ce565b62000333565b6001600160a01b0382166200011f5760405162461bcd60e51b81526020600482015260126024820152714e4f545f544f5f5a45524f4144445245535360701b60448201526064015b60405180910390fd5b60008111620001615760405162461bcd60e51b815260206004820152600d60248201526c4d494e545f4f5f544f4b454e5360981b604482015260640162000116565b6004546000620001728383620002d1565b9050818111620001b05760405162461bcd60e51b81526020600482015260086024820152674f564552464c4f5760c01b604482015260640162000116565b60048190556001600160a01b03841660009081526005602052604081208054859290620001df908490620002d1565b90915550506040518381526001600160a01b038516906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a350505050565b8280546200023990620002f6565b90600052602060002090601f0160209004810192826200025d5760008555620002a8565b82601f106200027857805160ff1916838001178555620002a8565b82800160010185558215620002a8579182015b82811115620002a85782518255916020019190600101906200028b565b50620002b6929150620002ba565b5090565b5b80821115620002b65760008155600101620002bb565b60008219821115620002f157634e487b7160e01b81526011600452602481fd5b500190565b6002810460018216806200030b57607f821691505b602082108114156200032d57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160601c610fdc6200036e6000396000818161039f015281816104c80152818161057a015281816109560152610ce90152610fdc6000f3fe608060405234801561001057600080fd5b506004361061011b5760003560e01c806342966c68116100b25780638f28397011610081578063a9059cbb11610066578063a9059cbb14610255578063ac9fe42114610268578063dd62ed3e1461027b5761011b565b80638f2839701461023a57806395d89b411461024d5761011b565b806342966c68146101d0578063654b748a146101e35780636e9960c3146101f657806370a08231146102115761011b565b806323b872dd116100ee57806323b872dd146101885780632b9917461461019b578063313ce567146101ae5780633b7b5a16146101bd5761011b565b806306fdde0314610120578063095ea7b31461013e57806318160ddd146101615780631dd319cb14610173575b600080fd5b6101286102b4565b6040516101359190610e83565b60405180910390f35b61015161014c366004610e42565b610346565b6040519015158152602001610135565b6004545b604051908152602001610135565b610186610181366004610e42565b61035c565b005b610151610196366004610dcd565b61036a565b6101516101a9366004610dcd565b610497565b60405160128152602001610135565b6101516101cb366004610dcd565b610549565b6101866101de366004610e6b565b6105fb565b6101516101f1366004610d7a565b610608565b6000546040516001600160a01b039091168152602001610135565b61016561021f366004610d7a565b6001600160a01b031660009081526005602052604090205490565b610186610248366004610d7a565b61062a565b6101286106f7565b610151610263366004610e42565b610706565b610186610276366004610e08565b610713565b610165610289366004610d9b565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205490565b6060600280546102c390610f23565b80601f01602080910402602001604051908101604052809291908181526020018280546102ef90610f23565b801561033c5780601f106103115761010080835404028352916020019161033c565b820191906000526020600020905b81548152906001019060200180831161031f57829003601f168201915b5050505050905090565b6000610353338484610805565b50600192915050565b61036682826108d3565b5050565b6000336001600160a01b0385161480159061039557503360009081526001602052604090205460ff16155b80156103ca5750337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614155b15610482576001600160a01b0384166000908152600660209081526040808320338452909152902054600019811461048057828110156104515760405162461bcd60e51b815260206004820152601860248201527f4e4f545f415554484f52495a45445f414c4c4f57414e4345000000000000000060448201526064015b60405180910390fd5b61045b8382610f0c565b6001600160a01b03861660009081526006602090815260408083203384529091529020555b505b61048d848484610b18565b5060019392505050565b6000336001600160a01b03851614806104bf57503360009081526001602052604090205460ff165b806104f25750337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316145b61053e5760405162461bcd60e51b815260206004820152600e60248201527f4e4f545f415554484f52495a45440000000000000000000000000000000000006044820152606401610448565b61048d848484610805565b6000336001600160a01b038516148061057157503360009081526001602052604090205460ff165b806105a45750337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316145b6105f05760405162461bcd60e51b815260206004820152600e60248201527f494e56414c49445f53454e4445520000000000000000000000000000000000006044820152606401610448565b61048d848484610cca565b61060533826108d3565b50565b6001600160a01b03811660009081526001602052604090205460ff165b919050565b6000546001600160a01b031633146106845760405162461bcd60e51b815260206004820152601360248201527f41444d494e5f4143434553535f44454e494544000000000000000000000000006044820152606401610448565b600080546040516001600160a01b03808516939216917f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f91a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6060600380546102c390610f23565b6000610353338484610b18565b6000546001600160a01b031633146107935760405162461bcd60e51b815260206004820152602c60248201527f6f6e6c792061646d696e20697320616c6c6f77656420746f206164642073757060448201527f6572206f70657261746f727300000000000000000000000000000000000000006064820152608401610448565b6001600160a01b03821660008181526001602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915590519092917f44f92d27abdf4cfb6a7d712c3af68f3be086d4ca747ab802c36f67d6790060d891a35050565b6001600160a01b0383161580159061082557506001600160a01b03821615155b6108715760405162461bcd60e51b815260206004820152601860248201527f494e56414c49445f4f574e45525f7c7c5f5350454e44455200000000000000006044820152606401610448565b6001600160a01b0383811660008181526006602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b600081116109235760405162461bcd60e51b815260206004820152600d60248201527f4255524e5f4f5f544f4b454e53000000000000000000000000000000000000006044820152606401610448565b336001600160a01b0383161480159061094c57503360009081526001602052604090205460ff16155b80156109815750337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614155b15610a34576001600160a01b03821660009081526006602090815260408083203384529091529020546000198114610a325781811015610a035760405162461bcd60e51b815260206004820152601660248201527f494e53554646494349454e545f414c4c4f57414e4345000000000000000000006044820152606401610448565b610a0d8282610f0c565b6001600160a01b03841660009081526006602090815260408083203384529091529020555b505b6001600160a01b03821660009081526005602052604090205481811015610a9d5760405162461bcd60e51b815260206004820152601260248201527f494e53554646494349454e545f46554e445300000000000000000000000000006044820152606401610448565b610aa78282610f0c565b6001600160a01b03841660009081526005602052604081209190915560048054849290610ad5908490610f0c565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016108c6565b6001600160a01b038216610b6e5760405162461bcd60e51b815260206004820152601260248201527f4e4f545f544f5f5a45524f4144445245535300000000000000000000000000006044820152606401610448565b6001600160a01b038216301415610bc75760405162461bcd60e51b815260206004820152600b60248201527f4e4f545f544f5f544849530000000000000000000000000000000000000000006044820152606401610448565b6001600160a01b03831660009081526005602052604090205481811015610c305760405162461bcd60e51b815260206004820152601260248201527f494e53554646494349454e545f46554e445300000000000000000000000000006044820152606401610448565b610c3a8282610f0c565b6001600160a01b038086166000908152600560205260408082209390935590851681529081208054849290610c70908490610ef4565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610cbc91815260200190565b60405180910390a350505050565b600081118015610ce05750610cde82610608565b155b8015610d1e57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614155b15610d5e576001600160a01b0380841660009081526006602090815260408083209386168352929052205481811015610d5c57610d5c848484610805565b505b505050565b80356001600160a01b038116811461062557600080fd5b600060208284031215610d8b578081fd5b610d9482610d63565b9392505050565b60008060408385031215610dad578081fd5b610db683610d63565b9150610dc460208401610d63565b90509250929050565b600080600060608486031215610de1578081fd5b610dea84610d63565b9250610df860208501610d63565b9150604084013590509250925092565b60008060408385031215610e1a578182fd5b610e2383610d63565b915060208301358015158114610e37578182fd5b809150509250929050565b60008060408385031215610e54578182fd5b610e5d83610d63565b946020939093013593505050565b600060208284031215610e7c578081fd5b5035919050565b6000602080835283518082850152825b81811015610eaf57858101830151858201604001528201610e93565b81811115610ec05783604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60008219821115610f0757610f07610f77565b500190565b600082821015610f1e57610f1e610f77565b500390565b600281046001821680610f3757607f821691505b60208210811415610f71577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea26469706673582212204c4e10f329d413b469c9b80fe60f214c88a81a49d969126950ecdc4357a27cc164736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061011b5760003560e01c806342966c68116100b25780638f28397011610081578063a9059cbb11610066578063a9059cbb14610255578063ac9fe42114610268578063dd62ed3e1461027b5761011b565b80638f2839701461023a57806395d89b411461024d5761011b565b806342966c68146101d0578063654b748a146101e35780636e9960c3146101f657806370a08231146102115761011b565b806323b872dd116100ee57806323b872dd146101885780632b9917461461019b578063313ce567146101ae5780633b7b5a16146101bd5761011b565b806306fdde0314610120578063095ea7b31461013e57806318160ddd146101615780631dd319cb14610173575b600080fd5b6101286102b4565b6040516101359190610e83565b60405180910390f35b61015161014c366004610e42565b610346565b6040519015158152602001610135565b6004545b604051908152602001610135565b610186610181366004610e42565b61035c565b005b610151610196366004610dcd565b61036a565b6101516101a9366004610dcd565b610497565b60405160128152602001610135565b6101516101cb366004610dcd565b610549565b6101866101de366004610e6b565b6105fb565b6101516101f1366004610d7a565b610608565b6000546040516001600160a01b039091168152602001610135565b61016561021f366004610d7a565b6001600160a01b031660009081526005602052604090205490565b610186610248366004610d7a565b61062a565b6101286106f7565b610151610263366004610e42565b610706565b610186610276366004610e08565b610713565b610165610289366004610d9b565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205490565b6060600280546102c390610f23565b80601f01602080910402602001604051908101604052809291908181526020018280546102ef90610f23565b801561033c5780601f106103115761010080835404028352916020019161033c565b820191906000526020600020905b81548152906001019060200180831161031f57829003601f168201915b5050505050905090565b6000610353338484610805565b50600192915050565b61036682826108d3565b5050565b6000336001600160a01b0385161480159061039557503360009081526001602052604090205460ff16155b80156103ca5750337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614155b15610482576001600160a01b0384166000908152600660209081526040808320338452909152902054600019811461048057828110156104515760405162461bcd60e51b815260206004820152601860248201527f4e4f545f415554484f52495a45445f414c4c4f57414e4345000000000000000060448201526064015b60405180910390fd5b61045b8382610f0c565b6001600160a01b03861660009081526006602090815260408083203384529091529020555b505b61048d848484610b18565b5060019392505050565b6000336001600160a01b03851614806104bf57503360009081526001602052604090205460ff165b806104f25750337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316145b61053e5760405162461bcd60e51b815260206004820152600e60248201527f4e4f545f415554484f52495a45440000000000000000000000000000000000006044820152606401610448565b61048d848484610805565b6000336001600160a01b038516148061057157503360009081526001602052604090205460ff165b806105a45750337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316145b6105f05760405162461bcd60e51b815260206004820152600e60248201527f494e56414c49445f53454e4445520000000000000000000000000000000000006044820152606401610448565b61048d848484610cca565b61060533826108d3565b50565b6001600160a01b03811660009081526001602052604090205460ff165b919050565b6000546001600160a01b031633146106845760405162461bcd60e51b815260206004820152601360248201527f41444d494e5f4143434553535f44454e494544000000000000000000000000006044820152606401610448565b600080546040516001600160a01b03808516939216917f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f91a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6060600380546102c390610f23565b6000610353338484610b18565b6000546001600160a01b031633146107935760405162461bcd60e51b815260206004820152602c60248201527f6f6e6c792061646d696e20697320616c6c6f77656420746f206164642073757060448201527f6572206f70657261746f727300000000000000000000000000000000000000006064820152608401610448565b6001600160a01b03821660008181526001602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915590519092917f44f92d27abdf4cfb6a7d712c3af68f3be086d4ca747ab802c36f67d6790060d891a35050565b6001600160a01b0383161580159061082557506001600160a01b03821615155b6108715760405162461bcd60e51b815260206004820152601860248201527f494e56414c49445f4f574e45525f7c7c5f5350454e44455200000000000000006044820152606401610448565b6001600160a01b0383811660008181526006602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b600081116109235760405162461bcd60e51b815260206004820152600d60248201527f4255524e5f4f5f544f4b454e53000000000000000000000000000000000000006044820152606401610448565b336001600160a01b0383161480159061094c57503360009081526001602052604090205460ff16155b80156109815750337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614155b15610a34576001600160a01b03821660009081526006602090815260408083203384529091529020546000198114610a325781811015610a035760405162461bcd60e51b815260206004820152601660248201527f494e53554646494349454e545f414c4c4f57414e4345000000000000000000006044820152606401610448565b610a0d8282610f0c565b6001600160a01b03841660009081526006602090815260408083203384529091529020555b505b6001600160a01b03821660009081526005602052604090205481811015610a9d5760405162461bcd60e51b815260206004820152601260248201527f494e53554646494349454e545f46554e445300000000000000000000000000006044820152606401610448565b610aa78282610f0c565b6001600160a01b03841660009081526005602052604081209190915560048054849290610ad5908490610f0c565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016108c6565b6001600160a01b038216610b6e5760405162461bcd60e51b815260206004820152601260248201527f4e4f545f544f5f5a45524f4144445245535300000000000000000000000000006044820152606401610448565b6001600160a01b038216301415610bc75760405162461bcd60e51b815260206004820152600b60248201527f4e4f545f544f5f544849530000000000000000000000000000000000000000006044820152606401610448565b6001600160a01b03831660009081526005602052604090205481811015610c305760405162461bcd60e51b815260206004820152601260248201527f494e53554646494349454e545f46554e445300000000000000000000000000006044820152606401610448565b610c3a8282610f0c565b6001600160a01b038086166000908152600560205260408082209390935590851681529081208054849290610c70908490610ef4565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610cbc91815260200190565b60405180910390a350505050565b600081118015610ce05750610cde82610608565b155b8015610d1e57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614155b15610d5e576001600160a01b0380841660009081526006602090815260408083209386168352929052205481811015610d5c57610d5c848484610805565b505b505050565b80356001600160a01b038116811461062557600080fd5b600060208284031215610d8b578081fd5b610d9482610d63565b9392505050565b60008060408385031215610dad578081fd5b610db683610d63565b9150610dc460208401610d63565b90509250929050565b600080600060608486031215610de1578081fd5b610dea84610d63565b9250610df860208501610d63565b9150604084013590509250925092565b60008060408385031215610e1a578182fd5b610e2383610d63565b915060208301358015158114610e37578182fd5b809150509250929050565b60008060408385031215610e54578182fd5b610e5d83610d63565b946020939093013593505050565b600060208284031215610e7c578081fd5b5035919050565b6000602080835283518082850152825b81811015610eaf57858101830151858201604001528201610e93565b81811115610ec05783604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60008219821115610f0757610f07610f77565b500190565b600082821015610f1e57610f1e610f77565b500390565b600281046001821680610f3757607f821691505b60208210811415610f71577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea26469706673582212204c4e10f329d413b469c9b80fe60f214c88a81a49d969126950ecdc4357a27cc164736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addAllowanceIfNeeded(address,address,uint256)": {
        "params": {
          "amountNeeded": "The amount requested to spend",
          "owner": "The address of the owner of the tokens",
          "spender": "The address wanting to spend tokens"
        },
        "returns": {
          "success": "Whether or not the call succeeded."
        }
      },
      "allowance(address,address)": {
        "params": {
          "owner": "The address whose token is allowed.",
          "spender": "The address allowed to transfer."
        },
        "returns": {
          "remaining": "The amount of token `spender` is allowed to transfer on behalf of `owner`."
        }
      },
      "approve(address,uint256)": {
        "params": {
          "amount": "The number of tokens allowed.",
          "spender": "The address to be given rights to transfer."
        },
        "returns": {
          "success": "Whether or not the call succeeded."
        }
      },
      "approveFor(address,address,uint256)": {
        "params": {
          "amount": "The number of tokens allowed.",
          "owner": "The address whose token is allowed.",
          "spender": "The address to be given rights to transfer."
        },
        "returns": {
          "success": "Whether or not the call succeeded."
        }
      },
      "balanceOf(address)": {
        "params": {
          "owner": "The address to query the balance of."
        },
        "returns": {
          "_0": "The amount owned by `owner`."
        }
      },
      "burn(uint256)": {
        "params": {
          "amount": "The number of tokens to burn."
        }
      },
      "burnFor(address,uint256)": {
        "params": {
          "amount": "The number of tokens to burn.",
          "from": "The address whose token to burn."
        }
      },
      "changeAdmin(address)": {
        "details": "Change the administrator to be `newAdmin`.",
        "params": {
          "newAdmin": "The address of the new administrator."
        }
      },
      "decimals()": {
        "returns": {
          "_0": "The number of decimals."
        }
      },
      "getAdmin()": {
        "details": "Get the current administrator of this contract.",
        "returns": {
          "_0": "The current administrator of this contract."
        }
      },
      "isSuperOperator(address)": {
        "params": {
          "who": "The address to query."
        },
        "returns": {
          "_0": "whether the address has superOperator rights."
        }
      },
      "name()": {
        "returns": {
          "_0": "The name of the token collection."
        }
      },
      "setSuperOperator(address,bool)": {
        "params": {
          "enabled": "set whether the superOperator is enabled or disabled.",
          "superOperator": "address that will be given/removed superOperator right."
        }
      },
      "symbol()": {
        "returns": {
          "_0": "The symbol of the token collection."
        }
      },
      "totalSupply()": {
        "returns": {
          "_0": "The total number of tokens in existence."
        }
      },
      "transfer(address,uint256)": {
        "params": {
          "amount": "The number of tokens being transfered.",
          "to": "The recipient address of the tokens being transfered."
        },
        "returns": {
          "success": "Whether or not the transfer succeeded."
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "amount": "The number of tokens transfered.",
          "from": "The origin address  of the tokens being transferred.",
          "to": "The recipient address of the tokensbeing  transfered."
        },
        "returns": {
          "success": "Whether or not the transfer succeeded."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "notice": "emitted when owner grant transfer rights to another address"
      },
      "Transfer(address,address,uint256)": {
        "notice": "emitted when tokens are transfered from one address to another."
      }
    },
    "kind": "user",
    "methods": {
      "addAllowanceIfNeeded(address,address,uint256)": {
        "notice": "Increase the allowance for the spender if needed"
      },
      "allowance(address,address)": {
        "notice": "Get the allowance of `spender` for `owner`'s tokens."
      },
      "approve(address,uint256)": {
        "notice": "Approve `spender` to transfer `amount` tokens."
      },
      "approveFor(address,address,uint256)": {
        "notice": "Approve `spender` to transfer `amount` tokens from `owner`."
      },
      "balanceOf(address)": {
        "notice": "Get the balance of `owner`."
      },
      "burn(uint256)": {
        "notice": "Burn `amount` tokens."
      },
      "burnFor(address,uint256)": {
        "notice": "Burn `amount` tokens from `owner`."
      },
      "decimals()": {
        "notice": "Get the number of decimals for the token collection."
      },
      "isSuperOperator(address)": {
        "notice": "check whether address `who` is given superOperator rights."
      },
      "name()": {
        "notice": "Get the name of the token collection."
      },
      "setSuperOperator(address,bool)": {
        "notice": "Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights)."
      },
      "symbol()": {
        "notice": "Get the symbol for the token collection."
      },
      "totalSupply()": {
        "notice": "Get the total number of tokens in existence."
      },
      "transfer(address,uint256)": {
        "notice": "Transfer `amount` tokens to `to`."
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer `amount` tokens from `from` to `to`."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25737,
        "contract": "src/solc_0.8/test/FakeLPSandMatic.sol:FakeLPSandMatic",
        "label": "_admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 26141,
        "contract": "src/solc_0.8/test/FakeLPSandMatic.sol:FakeLPSandMatic",
        "label": "_superOperators",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 20817,
        "contract": "src/solc_0.8/test/FakeLPSandMatic.sol:FakeLPSandMatic",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 20819,
        "contract": "src/solc_0.8/test/FakeLPSandMatic.sol:FakeLPSandMatic",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 20823,
        "contract": "src/solc_0.8/test/FakeLPSandMatic.sol:FakeLPSandMatic",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 20827,
        "contract": "src/solc_0.8/test/FakeLPSandMatic.sol:FakeLPSandMatic",
        "label": "_balances",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 20833,
        "contract": "src/solc_0.8/test/FakeLPSandMatic.sol:FakeLPSandMatic",
        "label": "_allowances",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}