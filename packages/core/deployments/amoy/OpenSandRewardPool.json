{
  "address": "0xee150417889b51fb4f5eea70513f43b59c702b4a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "stakeToken_",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "rewardToken_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newContribution",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldContribution",
          "type": "uint256"
        }
      ],
      "name": "ContributionUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Exit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeAmount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newForwarder",
          "type": "address"
        }
      ],
      "name": "TrustedForwarderSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeAmount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "antiCompound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lockPeriodInSecs",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "computeContribution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "computeContributionInBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contributionCalculator",
      "outputs": [
        {
          "internalType": "contract IContributionCalculator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "contributionOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardsAvailable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "recoverFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "restartRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardCalculator",
      "outputs": [
        {
          "internalType": "contract IRewardCalculator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerTokenStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockPeriodInSecs",
          "type": "uint256"
        }
      ],
      "name": "setAntiCompoundLockPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "setContributionCalculator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "restartRewards",
          "type": "bool"
        }
      ],
      "name": "setRewardCalculator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "setRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "setStakeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalContributions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRewardPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5a89fa2f42680a47acea5a48bf1c1bcdbe87ac4dc4c91167d1a21cc3fd357f52",
  "receipt": {
    "to": null,
    "from": "0x5f890c9522dce5670d741d4277bfcc2d9ca8af02",
    "contractAddress": "0xee150417889b51fb4f5eea70513f43b59c702b4a",
    "transactionIndex": "0x0",
    "gasUsed": "0x241901",
    "logsBloom": "0x
    "blockHash": "0x628f2e3cd37be69dcfb5687317426b7466034ee7ae75b3312920fd11bc7324a4",
    "transactionHash": "0x4779bfbd8792f4744813e3f0b22ddcb46fbd5c2793e29f8702fd56bc1b1ec750",
    "logs": [
      {
        "address": "0xee150417889b51fb4f5eea70513f43b59c702b4a",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02"
        ],
        "data": "0x",
        "blockNumber": "0x567055",
        "transactionHash": "0x4779bfbd8792f4744813e3f0b22ddcb46fbd5c2793e29f8702fd56bc1b1ec750",
        "transactionIndex": "0x0",
        "blockHash": "0x628f2e3cd37be69dcfb5687317426b7466034ee7ae75b3312920fd11bc7324a4",
        "logIndex": "0x0",
        "removed": false
      },
      {
        "address": "0xee150417889b51fb4f5eea70513f43b59c702b4a",
        "topics": [
          "0xd91237492a9e30cd2faf361fc103998a382ff0ec2b1b07dc1cbebb76ae2f1ea2",
          "0x000000000000000000000000d240234dacd7ffdca7e4effcf6c7190885d7e2f0"
        ],
        "data": "0x",
        "blockNumber": "0x567055",
        "transactionHash": "0x4779bfbd8792f4744813e3f0b22ddcb46fbd5c2793e29f8702fd56bc1b1ec750",
        "transactionIndex": "0x0",
        "blockHash": "0x628f2e3cd37be69dcfb5687317426b7466034ee7ae75b3312920fd11bc7324a4",
        "logIndex": "0x1",
        "removed": false
      },
      {
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02",
          "0x000000000000000000000000915a2284d28bd93de7d6f31173b981204bb666e6"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000690edc7082058f100000000000000000000000000000000000000000000000421226ce571223b10000000000000000000000000000000000000000000000031d83c3859177ab7120000000000000000000000000000000000000000000000041a917f1e6901e21f000000000000000000000000000000000000000000000031decd26201f9b1003",
        "blockNumber": "0x567055",
        "transactionHash": "0x4779bfbd8792f4744813e3f0b22ddcb46fbd5c2793e29f8702fd56bc1b1ec750",
        "transactionIndex": "0x0",
        "blockHash": "0x628f2e3cd37be69dcfb5687317426b7466034ee7ae75b3312920fd11bc7324a4",
        "logIndex": "0x2",
        "removed": false
      }
    ],
    "blockNumber": "0x567055",
    "cumulativeGasUsed": "0x241901",
    "status": "0x1"
  },
  "args": [
    "0xD20fbd836e80DabFb777E6AaBbe52e96c07eCD1B",
    "0xD20fbd836e80DabFb777E6AaBbe52e96c07eCD1B",
    "0xd240234dacd7ffdca7e4effcf6c7190885d7e2f0"
  ],
  "numDeployments": 1,
  "solcInputHash": "8647b3c46fdd7d95d4038ddf2cc1e589",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakeToken_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newContribution\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldContribution\",\"type\":\"uint256\"}],\"name\":\"ContributionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Exit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newForwarder\",\"type\":\"address\"}],\"name\":\"TrustedForwarderSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiCompound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockPeriodInSecs\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"computeContribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"computeContributionInBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contributionCalculator\",\"outputs\":[{\"internalType\":\"contract IContributionCalculator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"contributionOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardsAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"recoverFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restartRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardCalculator\",\"outputs\":[{\"internalType\":\"contract IRewardCalculator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockPeriodInSecs\",\"type\":\"uint256\"}],\"name\":\"setAntiCompoundLockPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setContributionCalculator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"restartRewards\",\"type\":\"bool\"}],\"name\":\"setRewardCalculator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setStakeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalContributions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The contract has two plugins that affect the behaviour: contributionCalculator and rewardCalculatorcontributionCalculator instead of using the stake directly the result of computeContribution is usedthis way some users can get an extra share of the rewardsrewardCalculator is used to manage the rate at which the rewards are distributed.This way we can build different types of pools by mixing in the plugins we want with this contract.default behaviour (address(0)) for contributionCalculator is to use the stacked amount as contribution.default behaviour (address(0)) for rewardCalculator is that no rewards are giving\",\"kind\":\"dev\",\"methods\":{\"balanceOf(address)\":{\"params\":{\"account\":\"the address of the account\"},\"returns\":{\"_0\":\"balance of staked tokens\"}},\"computeContribution(address)\":{\"details\":\"if the user change his holdings (or any other parameter that affect the contribution calculation),he can the reward distribution to his favor. This function must be called by an external agent ASAP toupdate the contribution for the user. We understand the risk but the rewards are distributes slowly sothe user cannot affect the reward distribution heavily.\",\"params\":{\"account\":\"the address of the account\"}},\"computeContributionInBatch(address[])\":{\"details\":\"see: computeContribution\",\"params\":{\"accounts\":\"the addresses of the accounts to update\"}},\"contributionOf(address)\":{\"details\":\"this is the same than the balanceOf only if the contribution calculatoruses the staked amount as the contribution of the user which is the default behaviour\",\"params\":{\"account\":\"the address of the account\"},\"returns\":{\"_0\":\"contribution of the users\"}},\"earned(address)\":{\"params\":{\"account\":\"the address of the account\"},\"returns\":{\"_0\":\"the available earnings for the user\"}},\"getReward()\":{\"details\":\"the user can withdraw his stake independently from the rewards\"},\"getRewardsAvailable()\":{\"details\":\"this function can be called by a reward calculator to throw if a campaign doesn't haveenough rewards to start\",\"returns\":{\"_0\":\"the total amount of deposited rewards\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getTrustedForwarder()\":{\"returns\":{\"_0\":\"trustedForwarder address of the trusted forwarder\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"address to check\"},\"returns\":{\"_0\":\"is trusted\"}},\"recoverFunds(address)\":{\"details\":\"this function must be called in an emergency situation only.Calling it is risky specially when rewardToken == stakeToken\",\"params\":{\"receiver\":\"address of the beneficiary of the recovered funds\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"restartRewards()\":{\"details\":\"calling this function make no difference. It is useful for testing and when the reward calculatoris changed.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"rewardPerToken()\":{\"details\":\"This value multiplied by the user contribution is the share of accumulated rewards for the user. Takinginto account the value of totalContributions.\",\"returns\":{\"_0\":\"the accumulated total rewards\"}},\"setAntiCompoundLockPeriod(uint256)\":{\"params\":{\"lockPeriodInSecs\":\"amount of time the user must wait between reward withdrawal\"}},\"setContributionCalculator(address)\":{\"params\":{\"contractAddress\":\"address of a plugin that calculates the contribution of the user based on his stake\"}},\"setRewardCalculator(address,bool)\":{\"params\":{\"contractAddress\":\"address of a plugin that calculates absolute rewards at any point in time\",\"restartRewards\":\"if true the rewards from the previous calculator are accumulated before changing it\"}},\"setRewardToken(address)\":{\"params\":{\"contractAddress\":\"address token used to pay rewards\"}},\"setStakeToken(address)\":{\"params\":{\"contractAddress\":\"address token used to stake funds\"}},\"setTrustedForwarder(address)\":{\"params\":{\"trustedForwarder\":\"address of the contract that is enabled to send meta-tx on behalf of the user\"}},\"stake(uint256)\":{\"details\":\"the user must approve in the stack token before calling this function\",\"params\":{\"amount\":\"the amount of tokens to stake\"}},\"stakeToken()\":{\"returns\":{\"_0\":\"address of the stake token contract\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalContributions()\":{\"details\":\"this is the same than the totalSupply only if the contribution calculatoruses the staked amount as the contribution of the user which is the default behaviour\",\"returns\":{\"_0\":\"total contributions of the users\"}},\"totalSupply()\":{\"returns\":{\"_0\":\"the total supply of staked tokens\"}},\"withdraw(uint256)\":{\"details\":\"the user can withdraw his stake independently from the rewards\",\"params\":{\"amount\":\"the amount of tokens to withdraw\"}}},\"title\":\"A pool that distributes rewards between users that stake sand (or any erc20 token)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balanceOf(address)\":{\"notice\":\"return the balance of staked tokens for a user\"},\"computeContribution(address)\":{\"notice\":\"update the contribution for a user\"},\"computeContributionInBatch(address[])\":{\"notice\":\"update the contribution for a sef of users\"},\"contributionOf(address)\":{\"notice\":\"return the contribution of some user\"},\"earned(address)\":{\"notice\":\"available earnings for some user\"},\"exit()\":{\"notice\":\"withdraw the stake and the rewards from the contract\"},\"getReward()\":{\"notice\":\"withdraw the rewards from the contract\"},\"getRewardsAvailable()\":{\"notice\":\"return the amount of rewards deposited in the contract that can be distributed by different campaigns\"},\"getTrustedForwarder()\":{\"notice\":\"Get the current trusted forwarder\"},\"isTrustedForwarder(address)\":{\"notice\":\"Checks if an address is a trusted forwarder\"},\"recoverFunds(address)\":{\"notice\":\"the admin recover is able to recover reward funds\"},\"restartRewards()\":{\"notice\":\"accumulates the current rewards into rewardPerTokenStored and restart the reward calculator\"},\"rewardPerToken()\":{\"notice\":\"accumulated rewards taking into account the totalContribution (see: rewardPerTokenStored)\"},\"setAntiCompoundLockPeriod(uint256)\":{\"notice\":\"set the lockPeriodInSecs for the anti-compound buffer\"},\"setContributionCalculator(address)\":{\"notice\":\"set the contribution calculator\"},\"setRewardCalculator(address,bool)\":{\"notice\":\"set the reward calculator\"},\"setRewardToken(address)\":{\"notice\":\"set the reward token\"},\"setStakeToken(address)\":{\"notice\":\"set the stake token\"},\"setTrustedForwarder(address)\":{\"notice\":\"set the trusted forwarder\"},\"stake(uint256)\":{\"notice\":\"stake some amount into the contract\"},\"stakeToken()\":{\"notice\":\"return the address of the stake token contract\"},\"totalContributions()\":{\"notice\":\"return the sum of the values returned by the contribution calculator\"},\"totalSupply()\":{\"notice\":\"return the total supply of staked tokens\"},\"withdraw(uint256)\":{\"notice\":\"withdraw the stake from the contract\"}},\"notice\":\"The contributions are updated passively, an external call to computeContribution from a backend is needed.After initialization the reward calculator must be set by the admin.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/solc_0.8/defi/SandRewardPool.sol\":\"SandRewardPool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-0.8/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb9a137b317dc4806805f2259686186c0c053c32d80fe9c15ecdbf2eb1cf52849\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/ERC2771Handler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\n/**\\n * @title ERC2771Handler\\n * @author The Sandbox\\n * @notice Handle meta-transactions\\n * @dev minimal ERC2771 handler to keep bytecode-size down\\n * based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.6.0/contracts/metatx/ERC2771Context.sol\\n * with an initializer for proxies and a mutable forwarder\\n */\\nabstract contract ERC2771Handler {\\n    address internal _trustedForwarder;\\n\\n    event TrustedForwarderSet(address indexed newForwarder);\\n\\n    /**\\n     * @dev Initializes the contract\\n     * @param forwarder trusted forwarder address\\n     */\\n    function __ERC2771Handler_initialize(address forwarder) internal {\\n        _trustedForwarder = forwarder;\\n        emit TrustedForwarderSet(_trustedForwarder);\\n    }\\n\\n    /**\\n     * @notice Checks if an address is a trusted forwarder\\n     * @param forwarder address to check\\n     * @return is trusted\\n     */\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    /**\\n     * @notice Get the current trusted forwarder\\n     * @return trustedForwarder address of the trusted forwarder\\n     */\\n    function getTrustedForwarder() external view returns (address) {\\n        return _trustedForwarder;\\n    }\\n\\n    /**\\n     * @dev if the call comes from the trusted forwarder, it gets the real sender by checking the encoded address in the data\\n     * @return sender address of the real sender\\n     */\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    /**\\n     * @dev if the call comes from the trusted forwarder, it substracts the sender address from `msg.data` to get the real `msg.data`\\n     * @return the real `msg.data`\\n     */\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x33482ab5e863b2f5cc22fb9e77f8eff3484e08601326989da02ae1b147245669\",\"license\":\"MIT\"},\"src/solc_0.8/defi/SandRewardPool.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.2;\\n\\nimport {Context} from \\\"@openzeppelin/contracts-0.8/utils/Context.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts-0.8/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts-0.8/token/ERC20/IERC20.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts-0.8/security/ReentrancyGuard.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts-0.8/utils/Address.sol\\\";\\nimport {AccessControl} from \\\"@openzeppelin/contracts-0.8/access/AccessControl.sol\\\";\\nimport {ERC2771Handler} from \\\"../common/BaseWithStorage/ERC2771Handler.sol\\\";\\nimport {StakeTokenWrapper} from \\\"./StakeTokenWrapper.sol\\\";\\nimport {IContributionCalculator} from \\\"./interfaces/IContributionCalculator.sol\\\";\\nimport {IRewardCalculator} from \\\"./interfaces/IRewardCalculator.sol\\\";\\n\\n/// @title A pool that distributes rewards between users that stake sand (or any erc20 token)\\n/// @notice The contributions are updated passively, an external call to computeContribution from a backend is needed.\\n/// @notice After initialization the reward calculator must be set by the admin.\\n/// @dev The contract has two plugins that affect the behaviour: contributionCalculator and rewardCalculator\\n/// @dev contributionCalculator instead of using the stake directly the result of computeContribution is used\\n/// @dev this way some users can get an extra share of the rewards\\n/// @dev rewardCalculator is used to manage the rate at which the rewards are distributed.\\n/// @dev This way we can build different types of pools by mixing in the plugins we want with this contract.\\n/// @dev default behaviour (address(0)) for contributionCalculator is to use the stacked amount as contribution.\\n/// @dev default behaviour (address(0)) for rewardCalculator is that no rewards are giving\\ncontract SandRewardPool is StakeTokenWrapper, AccessControl, ReentrancyGuard, ERC2771Handler {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n\\n    event Staked(address indexed account, uint256 stakeAmount);\\n    event Withdrawn(address indexed account, uint256 stakeAmount);\\n    event Exit(address indexed account);\\n    event RewardPaid(address indexed account, uint256 rewardAmount);\\n    event ContributionUpdated(address indexed account, uint256 newContribution, uint256 oldContribution);\\n\\n    // This value multiplied by the user contribution is the share of accumulated rewards (from the start of time\\n    // until the last call to restartRewards) for the user taking into account the value of totalContributions.\\n    uint256 public rewardPerTokenStored;\\n\\n    // This value multiplied by the user contribution is the share of reward from the the last time\\n    // the user changed his contribution and called restartRewards\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n\\n    // This value is the accumulated rewards won by the user when he called the contract.\\n    mapping(address => uint256) public rewards;\\n\\n    IERC20 public rewardToken;\\n    IContributionCalculator public contributionCalculator;\\n    IRewardCalculator public rewardCalculator;\\n\\n    uint256 internal _totalContributions;\\n    mapping(address => uint256) internal _contributions;\\n\\n    struct AntiCompound {\\n        uint256 lockPeriodInSecs;\\n        mapping(address => uint256) lastClaim;\\n    }\\n    // This is used to implement a time buffer for reward retrieval, so the used cannot re-stake the rewards too fast.\\n    AntiCompound public antiCompound;\\n\\n    constructor(\\n        IERC20 stakeToken_,\\n        IERC20 rewardToken_,\\n        address trustedForwarder\\n    ) StakeTokenWrapper(stakeToken_) {\\n        rewardToken = rewardToken_;\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        __ERC2771Handler_initialize(trustedForwarder);\\n    }\\n\\n    modifier antiCompoundCheck(address account) {\\n        // We use lockPeriodInSecs == 0 to disable this check\\n        if (antiCompound.lockPeriodInSecs != 0) {\\n            require(\\n                block.timestamp > antiCompound.lastClaim[account] + antiCompound.lockPeriodInSecs,\\n                \\\"SandRewardPool: must wait\\\"\\n            );\\n        }\\n        antiCompound.lastClaim[account] = block.timestamp;\\n        _;\\n    }\\n\\n    modifier isContractAndAdmin(address contractAddress) {\\n        require(contractAddress.isContract(), \\\"SandRewardPool: not a contract\\\");\\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \\\"SandRewardPool: not admin\\\");\\n        _;\\n    }\\n\\n    /// @notice set the lockPeriodInSecs for the anti-compound buffer\\n    /// @param lockPeriodInSecs amount of time the user must wait between reward withdrawal\\n    function setAntiCompoundLockPeriod(uint256 lockPeriodInSecs) external {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \\\"SandRewardPool: not admin\\\");\\n        antiCompound.lockPeriodInSecs = lockPeriodInSecs;\\n    }\\n\\n    /// @notice set the contribution calculator\\n    /// @param contractAddress address of a plugin that calculates the contribution of the user based on his stake\\n    function setContributionCalculator(address contractAddress) external isContractAndAdmin(contractAddress) {\\n        contributionCalculator = IContributionCalculator(contractAddress);\\n    }\\n\\n    /// @notice set the reward token\\n    /// @param contractAddress address token used to pay rewards\\n    function setRewardToken(address contractAddress) external isContractAndAdmin(contractAddress) {\\n        rewardToken = IERC20(contractAddress);\\n    }\\n\\n    /// @notice set the stake token\\n    /// @param contractAddress address token used to stake funds\\n    function setStakeToken(address contractAddress) external isContractAndAdmin(contractAddress) {\\n        _stakeToken = IERC20(contractAddress);\\n    }\\n\\n    /// @notice set the trusted forwarder\\n    /// @param trustedForwarder address of the contract that is enabled to send meta-tx on behalf of the user\\n    function setTrustedForwarder(address trustedForwarder) external {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \\\"SandRewardPool: not admin\\\");\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    /// @notice set the reward calculator\\n    /// @param contractAddress address of a plugin that calculates absolute rewards at any point in time\\n    /// @param restartRewards if true the rewards from the previous calculator are accumulated before changing it\\n    function setRewardCalculator(address contractAddress, bool restartRewards)\\n        external\\n        isContractAndAdmin(contractAddress)\\n    {\\n        // We process the rewards of the current reward calculator before the switch.\\n        if (restartRewards) {\\n            _restartRewards();\\n        }\\n        rewardCalculator = IRewardCalculator(contractAddress);\\n    }\\n\\n    /// @notice the admin recover is able to recover reward funds\\n    /// @param receiver address of the beneficiary of the recovered funds\\n    /// @dev this function must be called in an emergency situation only.\\n    /// @dev Calling it is risky specially when rewardToken == stakeToken\\n    function recoverFunds(address receiver) external {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \\\"SandRewardPool: not admin\\\");\\n        require(receiver != address(0), \\\"SandRewardPool: invalid receiver\\\");\\n        rewardToken.safeTransfer(receiver, rewardToken.balanceOf(address(this)));\\n    }\\n\\n    /// @notice return the total supply of staked tokens\\n    /// @return the total supply of staked tokens\\n    function totalSupply() external view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /// @notice return the balance of staked tokens for a user\\n    /// @param account the address of the account\\n    /// @return balance of staked tokens\\n    function balanceOf(address account) external view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /// @notice return the address of the stake token contract\\n    /// @return address of the stake token contract\\n    function stakeToken() external view returns (IERC20) {\\n        return _stakeToken;\\n    }\\n\\n    /// @notice return the amount of rewards deposited in the contract that can be distributed by different campaigns\\n    /// @return the total amount of deposited rewards\\n    /// @dev this function can be called by a reward calculator to throw if a campaign doesn't have\\n    /// @dev enough rewards to start\\n    function getRewardsAvailable() external view returns (uint256) {\\n        if (address(rewardToken) != address(_stakeToken)) {\\n            return rewardToken.balanceOf(address(this));\\n        }\\n        return _stakeToken.balanceOf(address(this)) - _totalSupply;\\n    }\\n\\n    /// @notice return the sum of the values returned by the contribution calculator\\n    /// @return total contributions of the users\\n    /// @dev this is the same than the totalSupply only if the contribution calculator\\n    /// @dev uses the staked amount as the contribution of the user which is the default behaviour\\n    function totalContributions() external view returns (uint256) {\\n        return _totalContributions;\\n    }\\n\\n    /// @notice return the contribution of some user\\n    /// @param account the address of the account\\n    /// @return contribution of the users\\n    /// @dev this is the same than the balanceOf only if the contribution calculator\\n    /// @dev uses the staked amount as the contribution of the user which is the default behaviour\\n    function contributionOf(address account) external view returns (uint256) {\\n        return _contributions[account];\\n    }\\n\\n    /// @notice accumulated rewards taking into account the totalContribution (see: rewardPerTokenStored)\\n    /// @return the accumulated total rewards\\n    /// @dev This value multiplied by the user contribution is the share of accumulated rewards for the user. Taking\\n    /// @dev into account the value of totalContributions.\\n    function rewardPerToken() external view returns (uint256) {\\n        return rewardPerTokenStored + _rewardPerToken();\\n    }\\n\\n    /// @notice available earnings for some user\\n    /// @param account the address of the account\\n    /// @return the available earnings for the user\\n    function earned(address account) external view returns (uint256) {\\n        return rewards[account] + _earned(account, _rewardPerToken());\\n    }\\n\\n    /// @notice accumulates the current rewards into rewardPerTokenStored and restart the reward calculator\\n    /// @dev calling this function make no difference. It is useful for testing and when the reward calculator\\n    /// @dev is changed.\\n    function restartRewards() external {\\n        _restartRewards();\\n    }\\n\\n    /// @notice update the contribution for a user\\n    /// @param account the address of the account\\n    /// @dev if the user change his holdings (or any other parameter that affect the contribution calculation),\\n    /// @dev he can the reward distribution to his favor. This function must be called by an external agent ASAP to\\n    /// @dev update the contribution for the user. We understand the risk but the rewards are distributes slowly so\\n    /// @dev the user cannot affect the reward distribution heavily.\\n    function computeContribution(address account) external {\\n        require(account != address(0), \\\"SandRewardPool: invalid address\\\");\\n        // We decide to give the user the accumulated rewards even if he cheated a little bit.\\n        _processRewards(account);\\n        _updateContribution(account);\\n    }\\n\\n    /// @notice update the contribution for a sef of users\\n    /// @param accounts the addresses of the accounts to update\\n    /// @dev see: computeContribution\\n    function computeContributionInBatch(address[] calldata accounts) external {\\n        _restartRewards();\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            address account = accounts[i];\\n            if (account == address(0)) {\\n                continue;\\n            }\\n            _processAccountRewards(account);\\n            _updateContribution(account);\\n        }\\n    }\\n\\n    /// @notice stake some amount into the contract\\n    /// @param amount the amount of tokens to stake\\n    /// @dev the user must approve in the stack token before calling this function\\n    function stake(uint256 amount) external nonReentrant {\\n        require(amount > 0, \\\"SandRewardPool: Cannot stake 0\\\");\\n\\n        // The first time a user stakes he cannot remove his rewards immediately.\\n        if (antiCompound.lastClaim[_msgSender()] == 0) {\\n            antiCompound.lastClaim[_msgSender()] = block.timestamp;\\n        }\\n\\n        uint256 earlierRewards = 0;\\n\\n        if (_totalContributions == 0 && rewardCalculator != IRewardCalculator(address(0))) {\\n            earlierRewards = rewardCalculator.getRewards();\\n        }\\n\\n        _processRewards(_msgSender());\\n        super._stake(amount);\\n        _updateContribution(_msgSender());\\n        require(_contributions[_msgSender()] > 0, \\\"SandRewardPool: not enough contributions\\\");\\n\\n        if (earlierRewards != 0) {\\n            rewards[_msgSender()] = rewards[_msgSender()] + earlierRewards;\\n        }\\n        emit Staked(_msgSender(), amount);\\n    }\\n\\n    /// @notice withdraw the stake from the contract\\n    /// @param amount the amount of tokens to withdraw\\n    /// @dev the user can withdraw his stake independently from the rewards\\n    function withdraw(uint256 amount) external nonReentrant {\\n        _processRewards(_msgSender());\\n        _withdrawStake(_msgSender(), amount);\\n        _updateContribution(_msgSender());\\n    }\\n\\n    /// @notice withdraw the stake and the rewards from the contract\\n    function exit() external nonReentrant {\\n        _processRewards(_msgSender());\\n        _withdrawStake(_msgSender(), _balances[_msgSender()]);\\n        _withdrawRewards(_msgSender());\\n        _updateContribution(_msgSender());\\n        emit Exit(_msgSender());\\n    }\\n\\n    /// @notice withdraw the rewards from the contract\\n    /// @dev the user can withdraw his stake independently from the rewards\\n    function getReward() external nonReentrant {\\n        _processRewards(_msgSender());\\n        _withdrawRewards(_msgSender());\\n        _updateContribution(_msgSender());\\n    }\\n\\n    function _withdrawStake(address account, uint256 amount) internal {\\n        require(amount > 0, \\\"SandRewardPool: Cannot withdraw 0\\\");\\n        super._withdraw(amount);\\n        emit Withdrawn(account, amount);\\n    }\\n\\n    function _withdrawRewards(address account) internal antiCompoundCheck(account) {\\n        uint256 reward = rewards[account];\\n        if (reward > 0) {\\n            rewards[account] = 0;\\n            rewardToken.safeTransfer(account, reward);\\n            emit RewardPaid(account, reward);\\n        }\\n    }\\n\\n    function _updateContribution(address account) internal {\\n        uint256 oldContribution = _contributions[account];\\n        _totalContributions = _totalContributions - oldContribution;\\n        uint256 contribution = _computeContribution(account);\\n        _totalContributions = _totalContributions + contribution;\\n        _contributions[account] = contribution;\\n        emit ContributionUpdated(account, contribution, oldContribution);\\n    }\\n\\n    function _computeContribution(address account) internal returns (uint256) {\\n        if (contributionCalculator == IContributionCalculator(address(0))) {\\n            return _balances[account];\\n        } else {\\n            return contributionCalculator.computeContribution(account, _balances[account]);\\n        }\\n    }\\n\\n    // Something changed (stake, withdraw, etc), we distribute current accumulated rewards and start from zero.\\n    // Called each time there is a change in contract state (stake, withdraw, etc).\\n    function _processRewards(address account) internal {\\n        _restartRewards();\\n        _processAccountRewards(account);\\n    }\\n\\n    // Update the earnings for this specific user with what he earned until now\\n    function _processAccountRewards(address account) internal {\\n        // usually _earned takes _rewardPerToken() but in this method is zero because _restartRewards must be\\n        // called before _processAccountRewards\\n        rewards[account] = rewards[account] + _earned(account, 0);\\n        // restart rewards for this specific user, now earned(account) = 0\\n        userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n    }\\n\\n    function _restartRewards() internal {\\n        if (rewardCalculator != IRewardCalculator(address(0))) {\\n            // Distribute the accumulated rewards\\n            rewardPerTokenStored = rewardPerTokenStored + _rewardPerToken();\\n            // restart rewards so now the rewardCalculator return zero rewards\\n            rewardCalculator.restartRewards();\\n        }\\n    }\\n\\n    function _earned(address account, uint256 rewardPerToken) internal view returns (uint256) {\\n        // - userRewardPerTokenPaid[account] * _contributions[account]  / _totalContributions is the portion of\\n        //      rewards the last time the user changed his contribution and called _restartRewards\\n        //      (_totalContributions corresponds to previous value of that moment).\\n        // - rewardPerTokenStored * _contributions[account] is the share of the user from the\\n        //      accumulated rewards (from the start of time until the last call to _restartRewards) with the\\n        //      current value of _totalContributions\\n        // - _rewardPerToken() * _contributions[account]  / _totalContributions is the share of the user of the\\n        //      rewards from the last time anybody called _restartRewards until this moment\\n        //\\n        // The important thing to note is that at any moment in time _contributions[account] / _totalContributions is\\n        // the share of the user even if _totalContributions changes because of other users activity.\\n        return\\n            ((rewardPerToken + rewardPerTokenStored - userRewardPerTokenPaid[account]) * _contributions[account]) /\\n            1e24;\\n    }\\n\\n    // This function gives the proportion of the total contribution that corresponds to each user from\\n    // last restartRewards call.\\n    // _rewardsPerToken() * _contributions[account] is the amount of extra rewards gained from last restartRewards.\\n    function _rewardPerToken() internal view returns (uint256) {\\n        if (rewardCalculator == IRewardCalculator(address(0)) || _totalContributions == 0) {\\n            return 0;\\n        }\\n        return (rewardCalculator.getRewards() * 1e24) / _totalContributions;\\n    }\\n\\n    function _msgSender() internal view override(Context, ERC2771Handler) returns (address sender) {\\n        return ERC2771Handler._msgSender();\\n    }\\n\\n    function _msgData() internal view override(Context, ERC2771Handler) returns (bytes calldata) {\\n        return ERC2771Handler._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0xc03e4fcde0c97e98ba76d46c799773efc3ef28d46b31513fe77be072ba4f8c34\",\"license\":\"MIT\"},\"src/solc_0.8/defi/StakeTokenWrapper.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-0.8/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts-0.8/utils/Address.sol\\\";\\n\\nabstract contract StakeTokenWrapper is Context {\\n    using Address for address;\\n    using SafeERC20 for IERC20;\\n    IERC20 internal _stakeToken;\\n\\n    uint256 internal _totalSupply;\\n    mapping(address => uint256) internal _balances;\\n\\n    constructor(IERC20 stakeToken) {\\n        require(address(stakeToken).isContract(), \\\"StakeTokenWrapper: is not a contract\\\");\\n        _stakeToken = stakeToken;\\n    }\\n\\n    function _stake(uint256 amount) internal virtual {\\n        require(amount > 0, \\\"StakeTokenWrapper: amount > 0\\\");\\n        _totalSupply = _totalSupply + amount;\\n        _balances[_msgSender()] = _balances[_msgSender()] + amount;\\n        _stakeToken.safeTransferFrom(_msgSender(), address(this), amount);\\n    }\\n\\n    function _withdraw(uint256 amount) internal virtual {\\n        require(amount > 0, \\\"StakeTokenWrapper: amount > 0\\\");\\n        _totalSupply = _totalSupply - amount;\\n        _balances[_msgSender()] = _balances[_msgSender()] - amount;\\n        _stakeToken.safeTransfer(_msgSender(), amount);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x3e4c1d959b8a97054202e4e8bb22d3201a88e77774f13c786eaf81166912f341\",\"license\":\"MIT\"},\"src/solc_0.8/defi/interfaces/IContributionCalculator.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.2;\\n\\n/// @title Plugins for the SandRewardPool that calculate the contributions must implement this interface\\ninterface IContributionCalculator {\\n    /// @notice based on the user stake and address calculate the contribution\\n    /// @param account address of the user that is staking tokens\\n    /// @param amountStaked the amount of tokens stacked\\n    function computeContribution(address account, uint256 amountStaked) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xfff2d597d960d3524720bee98ad4a2b0380676fda27e000c8ff2606da60a0001\",\"license\":\"MIT\"},\"src/solc_0.8/defi/interfaces/IRewardCalculator.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.2;\\n\\n/// @title Plugins for Reward Pools that calculate the rewards must implement this interface\\ninterface IRewardCalculator {\\n    /// @dev At any point in time this function must return the accumulated rewards from the last call to restartRewards\\n    function getRewards() external view returns (uint256);\\n\\n    /// @dev The main contract has distributed the rewards (getRewards()) until this point, this must start\\n    /// @dev from scratch => getRewards() == 0\\n    function restartRewards() external;\\n}\\n\",\"keccak256\":\"0x5c9df8d403f2f84f1a0eea40c9aacc7d54f929abede4cb4359ef3e79a1fa6ca0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002a7738038062002a77833981016040819052620000349162000266565b8262000054816001600160a01b03166200010e60201b620014b61760201c565b620000b15760405162461bcd60e51b8152602060048201526024808201527f5374616b65546f6b656e577261707065723a206973206e6f74206120636f6e746044820152631c9858dd60e21b606482015260840160405180910390fd5b600080546001600160a01b03199081166001600160a01b039384161782556001603655603b805490911692851692909217909155620000fa90620000f462000114565b62000131565b620001058162000141565b505050620002d2565b3b151590565b60006200012b6200019160201b620014bc1760201c565b90505b90565b6200013d8282620001c0565b5050565b603780546001600160a01b0319166001600160a01b0383811691909117918290556040519116907fd91237492a9e30cd2faf361fc103998a382ff0ec2b1b07dc1cbebb76ae2f1ea290600090a250565b6037546000906001600160a01b0316331415620001b8575060131936013560601c6200012e565b50336200012e565b60008281526035602090815260408083206001600160a01b038516845290915290205460ff166200013d5760008281526035602090815260408083206001600160a01b03851684529091529020805460ff191660011790556200022262000114565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000806000606084860312156200027b578283fd5b83516200028881620002b9565b60208501519093506200029b81620002b9565b6040850151909250620002ae81620002b9565b809150509250925092565b6001600160a01b0381168114620002cf57600080fd5b50565b61279580620002e26000396000f3fe608060405234801561001057600080fd5b50600436106102915760003560e01c806391d1485411610160578063d547741f116100d8578063dfeb94391161008c578063e9fad8ee11610071578063e9fad8ee1461058f578063f7c618c114610597578063ff9b110b146105aa57610291565b8063dfeb943914610569578063e72f6e301461057c57610291565b8063d7805ece116100bd578063d7805ece14610524578063da7422281461054d578063df136d651461056057610291565b8063d547741f146104fe578063d64791f81461051157610291565b8063accb04bd1161012f578063bfbe13d511610114578063bfbe13d5146104db578063cd3daf9d146104e5578063ce1b815f146104ed57610291565b8063accb04bd146104c0578063b0165840146104d357610291565b806391d148541461045957806396769e8914610492578063a217fddf146104a5578063a694fc3a146104ad57610291565b806337c089231161020e5780635ae64bd8116101c257806370a08231116101a757806370a08231146103fd5780638aee8127146104265780638b8763471461043957610291565b80635ae64bd8146103e25780635c22f2bc146103ea57610291565b806351ed6a30116101f357806351ed6a3014610388578063534d8499146103ad578063572b6c05146103c057610291565b806337c08923146103785780633d18b9121461038057610291565b806318160ddd116102655780632e1a7d4d1161024a5780632e1a7d4d1461033f5780632f2ff15d1461035257806336568abe1461036557610291565b806318160ddd14610314578063248a9ca31461031c57610291565b80628cc2621461029657806301ffc9a7146102bc5780630397d458146102df5780630700037d146102f4575b600080fd5b6102a96102a4366004612429565b6105bd565b6040519081526020015b60405180910390f35b6102cf6102ca366004612547565b6105fb565b60405190151581526020016102b3565b6102f26102ed366004612429565b610692565b005b6102a9610302366004612429565b603a6020526000908152604090205481565b6102a9610778565b6102a961032a366004612504565b60009081526035602052604090206001015490565b6102f261034d366004612504565b61077f565b6102f261036036600461251c565b610810565b6102f261037336600461251c565b610842565b603e546102a9565b6102f26108de565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016102b3565b603c54610395906001600160a01b031681565b6102cf6103ce366004612429565b6037546001600160a01b0390811691161490565b6102a9610963565b6102f26103f8366004612429565b610a8b565b6102a961040b366004612429565b6001600160a01b031660009081526002602052604090205490565b6102f2610434366004612429565b610b6c565b6102a9610447366004612429565b60396020526000908152604090205481565b6102cf61046736600461251c565b60009182526035602090815260408084206001600160a01b0393909316845291905290205460ff1690565b603d54610395906001600160a01b031681565b6102a9600081565b6102f26104bb366004612504565b610c4d565b6102f26104ce366004612443565b610f69565b6102f2611059565b6040546102a99081565b6102a9611063565b6037546001600160a01b0316610395565b6102f261050c36600461251c565b61107a565b6102f261051f366004612479565b6110a2565b6102a9610532366004612429565b6001600160a01b03166000908152603f602052604090205490565b6102f261055b366004612429565b611128565b6102a960385481565b6102f2610577366004612429565b6111b0565b6102f261058a366004612429565b61121b565b6102f261135e565b603b54610395906001600160a01b031681565b6102f26105b8366004612504565b611458565b60006105d0826105cb611506565b6115d5565b6001600160a01b0383166000908152603a60205260409020546105f3919061266f565b90505b919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b0000000000000000000000000000000000000000000000000000000014806105f357507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316146105f3565b806001600160a01b0381163b6106ef5760405162461bcd60e51b815260206004820152601e60248201527f53616e64526577617264506f6f6c3a206e6f74206120636f6e7472616374000060448201526064015b60405180910390fd5b6106fc6000610467611639565b6107485760405162461bcd60e51b815260206004820152601960248201527f53616e64526577617264506f6f6c3a206e6f742061646d696e0000000000000060448201526064016106e6565b506000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001545b90565b600260365414156107d25760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106e6565b60026036556107e76107e2611639565b611643565b6107f86107f2611639565b82611654565b610808610803611639565b61171a565b506001603655565b6000828152603560205260409020600101546108338161082e611639565b6117bd565b61083d838361183d565b505050565b61084a611639565b6001600160a01b0316816001600160a01b0316146108d05760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016106e6565b6108da82826118e0565b5050565b600260365414156109315760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106e6565b60026036556109416107e2611639565b61095161094c611639565b611981565b61095c610803611639565b6001603655565b60008054603b546001600160a01b039081169116146109fe57603b546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156109bf57600080fd5b505afa1580156109d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f79190612587565b905061077c565b6001546000546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015610a4457600080fd5b505afa158015610a58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7c9190612587565b610a8691906126c6565b905090565b806001600160a01b0381163b610ae35760405162461bcd60e51b815260206004820152601e60248201527f53616e64526577617264506f6f6c3a206e6f74206120636f6e7472616374000060448201526064016106e6565b610af06000610467611639565b610b3c5760405162461bcd60e51b815260206004820152601960248201527f53616e64526577617264506f6f6c3a206e6f742061646d696e0000000000000060448201526064016106e6565b50603c805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b806001600160a01b0381163b610bc45760405162461bcd60e51b815260206004820152601e60248201527f53616e64526577617264506f6f6c3a206e6f74206120636f6e7472616374000060448201526064016106e6565b610bd16000610467611639565b610c1d5760405162461bcd60e51b815260206004820152601960248201527f53616e64526577617264506f6f6c3a206e6f742061646d696e0000000000000060448201526064016106e6565b50603b805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60026036541415610ca05760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106e6565b600260365580610cf25760405162461bcd60e51b815260206004820152601e60248201527f53616e64526577617264506f6f6c3a2043616e6e6f74207374616b652030000060448201526064016106e6565b60416000610cfe611639565b6001600160a01b03168152602081019190915260400160002054610d44574260416000610d29611639565b6001600160a01b031681526020810191909152604001600020555b6000603e546000148015610d625750603d546001600160a01b031615155b15610df057603d60009054906101000a90046001600160a01b03166001600160a01b0316630572b0cc6040518163ffffffff1660e01b815260040160206040518083038186803b158015610db557600080fd5b505afa158015610dc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ded9190612587565b90505b610dfb6107e2611639565b610e0482611a94565b610e0f610803611639565b6000603f6000610e1d611639565b6001600160a01b03166001600160a01b031681526020019081526020016000205411610eb15760405162461bcd60e51b815260206004820152602860248201527f53616e64526577617264506f6f6c3a206e6f7420656e6f75676820636f6e747260448201527f69627574696f6e7300000000000000000000000000000000000000000000000060648201526084016106e6565b8015610f165780603a6000610ec4611639565b6001600160a01b03166001600160a01b0316815260200190815260200160002054610eef919061266f565b603a6000610efb611639565b6001600160a01b031681526020810191909152604001600020555b610f1e611639565b6001600160a01b03167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d83604051610f5891815260200190565b60405180910390a250506001603655565b816001600160a01b0381163b610fc15760405162461bcd60e51b815260206004820152601e60248201527f53616e64526577617264506f6f6c3a206e6f74206120636f6e7472616374000060448201526064016106e6565b610fce6000610467611639565b61101a5760405162461bcd60e51b815260206004820152601960248201527f53616e64526577617264506f6f6c3a206e6f742061646d696e0000000000000060448201526064016106e6565b811561102857611028611b72565b5050603d805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b611061611b72565b565b600061106d611506565b603854610a86919061266f565b6000828152603560205260409020600101546110988161082e611639565b61083d83836118e0565b6110aa611b72565b60005b8181101561083d5760008383838181106110d757634e487b7160e01b600052603260045260246000fd5b90506020020160208101906110ec9190612429565b90506001600160a01b0381166111025750611116565b61110b81611c14565b6111148161171a565b505b8061112081612720565b9150506110ad565b6111356000610467611639565b6111815760405162461bcd60e51b815260206004820152601960248201527f53616e64526577617264506f6f6c3a206e6f742061646d696e0000000000000060448201526064016106e6565b6037805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b0381166112065760405162461bcd60e51b815260206004820152601f60248201527f53616e64526577617264506f6f6c3a20696e76616c696420616464726573730060448201526064016106e6565b61120f81611643565b6112188161171a565b50565b6112286000610467611639565b6112745760405162461bcd60e51b815260206004820152601960248201527f53616e64526577617264506f6f6c3a206e6f742061646d696e0000000000000060448201526064016106e6565b6001600160a01b0381166112ca5760405162461bcd60e51b815260206004820181905260248201527f53616e64526577617264506f6f6c3a20696e76616c696420726563656976657260448201526064016106e6565b603b546040516370a0823160e01b81523060048201526112189183916001600160a01b03909116906370a082319060240160206040518083038186803b15801561131357600080fd5b505afa158015611327573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134b9190612587565b603b546001600160a01b03169190611c70565b600260365414156113b15760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106e6565b60026036556113c16107e2611639565b6113fe6113cc611639565b600260006113d8611639565b6001600160a01b03166001600160a01b0316815260200190815260200160002054611654565b61140961094c611639565b611414610803611639565b61141c611639565b6001600160a01b03167f7c79e6e24ed041d1072d54523b53956f01b91b835f0490856370594d9d14470e60405160405180910390a26001603655565b6114656000610467611639565b6114b15760405162461bcd60e51b815260206004820152601960248201527f53616e64526577617264506f6f6c3a206e6f742061646d696e0000000000000060448201526064016106e6565b604055565b3b151590565b6037546000906001600160a01b03163314156114ff57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c61077c565b503361077c565b603d546000906001600160a01b031615806115215750603e54155b1561152e5750600061077c565b603e54603d60009054906101000a90046001600160a01b03166001600160a01b0316630572b0cc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561157f57600080fd5b505afa158015611593573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b79190612587565b6115cb9069d3c21bcecceda10000006126a7565b610a869190612687565b6001600160a01b0382166000908152603f6020908152604080832054603990925282205460385469d3c21bcecceda1000000929190611614908661266f565b61161e91906126c6565b61162891906126a7565b6116329190612687565b9392505050565b6000610a866114bc565b61164b611b72565b61121881611c14565b600081116116ca5760405162461bcd60e51b815260206004820152602160248201527f53616e64526577617264506f6f6c3a2043616e6e6f742077697468647261772060448201527f300000000000000000000000000000000000000000000000000000000000000060648201526084016106e6565b6116d381611d19565b816001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d58260405161170e91815260200190565b60405180910390a25050565b6001600160a01b0381166000908152603f6020526040902054603e546117419082906126c6565b603e55600061174f83611df6565b905080603e5461175f919061266f565b603e556001600160a01b0383166000818152603f602090815260409182902084905581518481529081018590527f36c7c98dfe7e045d8de3e3a8ef7280d623eeb82e7ac5f92d4854297dd078130591015b60405180910390a2505050565b60008281526035602090815260408083206001600160a01b038516845290915290205460ff166108da576117fb816001600160a01b03166014611ede565b611806836020611ede565b6040516020016118179291906125bb565b60408051601f198184030181529082905262461bcd60e51b82526106e69160040161263c565b60008281526035602090815260408083206001600160a01b038516845290915290205460ff166108da5760008281526035602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561189c611639565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526035602090815260408083206001600160a01b038516845290915290205460ff16156108da5760008281526035602090815260408083206001600160a01b03851684529091529020805460ff1916905561193d611639565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b604054819015611a0057604080546001600160a01b0383166000908152604160205291909120546119b2919061266f565b4211611a005760405162461bcd60e51b815260206004820152601960248201527f53616e64526577617264506f6f6c3a206d75737420776169740000000000000060448201526064016106e6565b6001600160a01b0380821660009081526041602090815260408083204290559285168252603a90522054801561083d576001600160a01b038084166000908152603a6020526040812055603b54611a5991168483611c70565b826001600160a01b03167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486826040516117b091815260200190565b60008111611ae45760405162461bcd60e51b815260206004820152601d60248201527f5374616b65546f6b656e577261707065723a20616d6f756e74203e203000000060448201526064016106e6565b80600154611af2919061266f565b6001558060026000611b02611639565b6001600160a01b03166001600160a01b0316815260200190815260200160002054611b2d919061266f565b60026000611b39611639565b6001600160a01b03168152602081019190915260400160002055611218611b5e611639565b6000546001600160a01b031690308461214d565b603d546001600160a01b03161561106157611b8b611506565b603854611b98919061266f565b603855603d54604080517fb016584000000000000000000000000000000000000000000000000000000000815290516001600160a01b039092169163b01658409160048082019260009290919082900301818387803b158015611bfa57600080fd5b505af1158015611c0e573d6000803e3d6000fd5b50505050565b611c1f8160006115d5565b6001600160a01b0382166000908152603a6020526040902054611c42919061266f565b6001600160a01b039091166000908152603a6020908152604080832093909355603854603990915291902055565b6040516001600160a01b03831660248201526044810182905261083d9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261219e565b60008111611d695760405162461bcd60e51b815260206004820152601d60248201527f5374616b65546f6b656e577261707065723a20616d6f756e74203e203000000060448201526064016106e6565b80600154611d7791906126c6565b6001558060026000611d87611639565b6001600160a01b03166001600160a01b0316815260200190815260200160002054611db291906126c6565b60026000611dbe611639565b6001600160a01b03168152602081019190915260400160002055611218611de3611639565b6000546001600160a01b03169083611c70565b603c546000906001600160a01b0316611e2857506001600160a01b0381166000908152600260205260409020546105f6565b603c546001600160a01b03838116600081815260026020526040908190205490517f968b84e50000000000000000000000000000000000000000000000000000000081526004810192909252602482015291169063968b84e590604401602060405180830381600087803b158015611e9f57600080fd5b505af1158015611eb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed79190612587565b90506105f6565b60606000611eed8360026126a7565b611ef890600261266f565b67ffffffffffffffff811115611f1e57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611f48576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611f8d57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611ffe57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600061203a8460026126a7565b61204590600161266f565b90505b60018111156120fe577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061209457634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106120b857634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c936120f781612709565b9050612048565b5083156116325760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106e6565b6040516001600160a01b0380851660248301528316604482015260648101829052611c0e9085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401611cb5565b60006121f3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166122839092919063ffffffff16565b80519091501561083d578080602001905181019061221191906124e8565b61083d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016106e6565b6060612292848460008561229a565b949350505050565b6060824710156123125760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016106e6565b843b6123605760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106e6565b600080866001600160a01b0316858760405161237c919061259f565b60006040518083038185875af1925050503d80600081146123b9576040519150601f19603f3d011682016040523d82523d6000602084013e6123be565b606091505b50915091506123ce8282866123d9565b979650505050505050565b606083156123e8575081611632565b8251156123f85782518084602001fd5b8160405162461bcd60e51b81526004016106e6919061263c565b80356001600160a01b03811681146105f657600080fd5b60006020828403121561243a578081fd5b61163282612412565b60008060408385031215612455578081fd5b61245e83612412565b9150602083013561246e81612751565b809150509250929050565b6000806020838503121561248b578182fd5b823567ffffffffffffffff808211156124a2578384fd5b818501915085601f8301126124b5578384fd5b8135818111156124c3578485fd5b86602080830285010111156124d6578485fd5b60209290920196919550909350505050565b6000602082840312156124f9578081fd5b815161163281612751565b600060208284031215612515578081fd5b5035919050565b6000806040838503121561252e578182fd5b8235915061253e60208401612412565b90509250929050565b600060208284031215612558578081fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114611632578182fd5b600060208284031215612598578081fd5b5051919050565b600082516125b18184602087016126dd565b9190910192915050565b60007f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000825283516125f38160178501602088016126dd565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516126308160288401602088016126dd565b01602801949350505050565b600060208252825180602084015261265b8160408501602087016126dd565b601f01601f19169190910160400192915050565b600082198211156126825761268261273b565b500190565b6000826126a257634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156126c1576126c161273b565b500290565b6000828210156126d8576126d861273b565b500390565b60005b838110156126f85781810151838201526020016126e0565b83811115611c0e5750506000910152565b6000816127185761271861273b565b506000190190565b60006000198214156127345761273461273b565b5060010190565b634e487b7160e01b600052601160045260246000fd5b801515811461121857600080fdfea2646970667358221220e7c1d705a37a59feb904260feef127854c3f5227311dcdcd867b1679501e580464736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102915760003560e01c806391d1485411610160578063d547741f116100d8578063dfeb94391161008c578063e9fad8ee11610071578063e9fad8ee1461058f578063f7c618c114610597578063ff9b110b146105aa57610291565b8063dfeb943914610569578063e72f6e301461057c57610291565b8063d7805ece116100bd578063d7805ece14610524578063da7422281461054d578063df136d651461056057610291565b8063d547741f146104fe578063d64791f81461051157610291565b8063accb04bd1161012f578063bfbe13d511610114578063bfbe13d5146104db578063cd3daf9d146104e5578063ce1b815f146104ed57610291565b8063accb04bd146104c0578063b0165840146104d357610291565b806391d148541461045957806396769e8914610492578063a217fddf146104a5578063a694fc3a146104ad57610291565b806337c089231161020e5780635ae64bd8116101c257806370a08231116101a757806370a08231146103fd5780638aee8127146104265780638b8763471461043957610291565b80635ae64bd8146103e25780635c22f2bc146103ea57610291565b806351ed6a30116101f357806351ed6a3014610388578063534d8499146103ad578063572b6c05146103c057610291565b806337c08923146103785780633d18b9121461038057610291565b806318160ddd116102655780632e1a7d4d1161024a5780632e1a7d4d1461033f5780632f2ff15d1461035257806336568abe1461036557610291565b806318160ddd14610314578063248a9ca31461031c57610291565b80628cc2621461029657806301ffc9a7146102bc5780630397d458146102df5780630700037d146102f4575b600080fd5b6102a96102a4366004612429565b6105bd565b6040519081526020015b60405180910390f35b6102cf6102ca366004612547565b6105fb565b60405190151581526020016102b3565b6102f26102ed366004612429565b610692565b005b6102a9610302366004612429565b603a6020526000908152604090205481565b6102a9610778565b6102a961032a366004612504565b60009081526035602052604090206001015490565b6102f261034d366004612504565b61077f565b6102f261036036600461251c565b610810565b6102f261037336600461251c565b610842565b603e546102a9565b6102f26108de565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016102b3565b603c54610395906001600160a01b031681565b6102cf6103ce366004612429565b6037546001600160a01b0390811691161490565b6102a9610963565b6102f26103f8366004612429565b610a8b565b6102a961040b366004612429565b6001600160a01b031660009081526002602052604090205490565b6102f2610434366004612429565b610b6c565b6102a9610447366004612429565b60396020526000908152604090205481565b6102cf61046736600461251c565b60009182526035602090815260408084206001600160a01b0393909316845291905290205460ff1690565b603d54610395906001600160a01b031681565b6102a9600081565b6102f26104bb366004612504565b610c4d565b6102f26104ce366004612443565b610f69565b6102f2611059565b6040546102a99081565b6102a9611063565b6037546001600160a01b0316610395565b6102f261050c36600461251c565b61107a565b6102f261051f366004612479565b6110a2565b6102a9610532366004612429565b6001600160a01b03166000908152603f602052604090205490565b6102f261055b366004612429565b611128565b6102a960385481565b6102f2610577366004612429565b6111b0565b6102f261058a366004612429565b61121b565b6102f261135e565b603b54610395906001600160a01b031681565b6102f26105b8366004612504565b611458565b60006105d0826105cb611506565b6115d5565b6001600160a01b0383166000908152603a60205260409020546105f3919061266f565b90505b919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b0000000000000000000000000000000000000000000000000000000014806105f357507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316146105f3565b806001600160a01b0381163b6106ef5760405162461bcd60e51b815260206004820152601e60248201527f53616e64526577617264506f6f6c3a206e6f74206120636f6e7472616374000060448201526064015b60405180910390fd5b6106fc6000610467611639565b6107485760405162461bcd60e51b815260206004820152601960248201527f53616e64526577617264506f6f6c3a206e6f742061646d696e0000000000000060448201526064016106e6565b506000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001545b90565b600260365414156107d25760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106e6565b60026036556107e76107e2611639565b611643565b6107f86107f2611639565b82611654565b610808610803611639565b61171a565b506001603655565b6000828152603560205260409020600101546108338161082e611639565b6117bd565b61083d838361183d565b505050565b61084a611639565b6001600160a01b0316816001600160a01b0316146108d05760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016106e6565b6108da82826118e0565b5050565b600260365414156109315760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106e6565b60026036556109416107e2611639565b61095161094c611639565b611981565b61095c610803611639565b6001603655565b60008054603b546001600160a01b039081169116146109fe57603b546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156109bf57600080fd5b505afa1580156109d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f79190612587565b905061077c565b6001546000546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015610a4457600080fd5b505afa158015610a58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7c9190612587565b610a8691906126c6565b905090565b806001600160a01b0381163b610ae35760405162461bcd60e51b815260206004820152601e60248201527f53616e64526577617264506f6f6c3a206e6f74206120636f6e7472616374000060448201526064016106e6565b610af06000610467611639565b610b3c5760405162461bcd60e51b815260206004820152601960248201527f53616e64526577617264506f6f6c3a206e6f742061646d696e0000000000000060448201526064016106e6565b50603c805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b806001600160a01b0381163b610bc45760405162461bcd60e51b815260206004820152601e60248201527f53616e64526577617264506f6f6c3a206e6f74206120636f6e7472616374000060448201526064016106e6565b610bd16000610467611639565b610c1d5760405162461bcd60e51b815260206004820152601960248201527f53616e64526577617264506f6f6c3a206e6f742061646d696e0000000000000060448201526064016106e6565b50603b805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60026036541415610ca05760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106e6565b600260365580610cf25760405162461bcd60e51b815260206004820152601e60248201527f53616e64526577617264506f6f6c3a2043616e6e6f74207374616b652030000060448201526064016106e6565b60416000610cfe611639565b6001600160a01b03168152602081019190915260400160002054610d44574260416000610d29611639565b6001600160a01b031681526020810191909152604001600020555b6000603e546000148015610d625750603d546001600160a01b031615155b15610df057603d60009054906101000a90046001600160a01b03166001600160a01b0316630572b0cc6040518163ffffffff1660e01b815260040160206040518083038186803b158015610db557600080fd5b505afa158015610dc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ded9190612587565b90505b610dfb6107e2611639565b610e0482611a94565b610e0f610803611639565b6000603f6000610e1d611639565b6001600160a01b03166001600160a01b031681526020019081526020016000205411610eb15760405162461bcd60e51b815260206004820152602860248201527f53616e64526577617264506f6f6c3a206e6f7420656e6f75676820636f6e747260448201527f69627574696f6e7300000000000000000000000000000000000000000000000060648201526084016106e6565b8015610f165780603a6000610ec4611639565b6001600160a01b03166001600160a01b0316815260200190815260200160002054610eef919061266f565b603a6000610efb611639565b6001600160a01b031681526020810191909152604001600020555b610f1e611639565b6001600160a01b03167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d83604051610f5891815260200190565b60405180910390a250506001603655565b816001600160a01b0381163b610fc15760405162461bcd60e51b815260206004820152601e60248201527f53616e64526577617264506f6f6c3a206e6f74206120636f6e7472616374000060448201526064016106e6565b610fce6000610467611639565b61101a5760405162461bcd60e51b815260206004820152601960248201527f53616e64526577617264506f6f6c3a206e6f742061646d696e0000000000000060448201526064016106e6565b811561102857611028611b72565b5050603d805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b611061611b72565b565b600061106d611506565b603854610a86919061266f565b6000828152603560205260409020600101546110988161082e611639565b61083d83836118e0565b6110aa611b72565b60005b8181101561083d5760008383838181106110d757634e487b7160e01b600052603260045260246000fd5b90506020020160208101906110ec9190612429565b90506001600160a01b0381166111025750611116565b61110b81611c14565b6111148161171a565b505b8061112081612720565b9150506110ad565b6111356000610467611639565b6111815760405162461bcd60e51b815260206004820152601960248201527f53616e64526577617264506f6f6c3a206e6f742061646d696e0000000000000060448201526064016106e6565b6037805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b0381166112065760405162461bcd60e51b815260206004820152601f60248201527f53616e64526577617264506f6f6c3a20696e76616c696420616464726573730060448201526064016106e6565b61120f81611643565b6112188161171a565b50565b6112286000610467611639565b6112745760405162461bcd60e51b815260206004820152601960248201527f53616e64526577617264506f6f6c3a206e6f742061646d696e0000000000000060448201526064016106e6565b6001600160a01b0381166112ca5760405162461bcd60e51b815260206004820181905260248201527f53616e64526577617264506f6f6c3a20696e76616c696420726563656976657260448201526064016106e6565b603b546040516370a0823160e01b81523060048201526112189183916001600160a01b03909116906370a082319060240160206040518083038186803b15801561131357600080fd5b505afa158015611327573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134b9190612587565b603b546001600160a01b03169190611c70565b600260365414156113b15760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106e6565b60026036556113c16107e2611639565b6113fe6113cc611639565b600260006113d8611639565b6001600160a01b03166001600160a01b0316815260200190815260200160002054611654565b61140961094c611639565b611414610803611639565b61141c611639565b6001600160a01b03167f7c79e6e24ed041d1072d54523b53956f01b91b835f0490856370594d9d14470e60405160405180910390a26001603655565b6114656000610467611639565b6114b15760405162461bcd60e51b815260206004820152601960248201527f53616e64526577617264506f6f6c3a206e6f742061646d696e0000000000000060448201526064016106e6565b604055565b3b151590565b6037546000906001600160a01b03163314156114ff57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c61077c565b503361077c565b603d546000906001600160a01b031615806115215750603e54155b1561152e5750600061077c565b603e54603d60009054906101000a90046001600160a01b03166001600160a01b0316630572b0cc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561157f57600080fd5b505afa158015611593573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b79190612587565b6115cb9069d3c21bcecceda10000006126a7565b610a869190612687565b6001600160a01b0382166000908152603f6020908152604080832054603990925282205460385469d3c21bcecceda1000000929190611614908661266f565b61161e91906126c6565b61162891906126a7565b6116329190612687565b9392505050565b6000610a866114bc565b61164b611b72565b61121881611c14565b600081116116ca5760405162461bcd60e51b815260206004820152602160248201527f53616e64526577617264506f6f6c3a2043616e6e6f742077697468647261772060448201527f300000000000000000000000000000000000000000000000000000000000000060648201526084016106e6565b6116d381611d19565b816001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d58260405161170e91815260200190565b60405180910390a25050565b6001600160a01b0381166000908152603f6020526040902054603e546117419082906126c6565b603e55600061174f83611df6565b905080603e5461175f919061266f565b603e556001600160a01b0383166000818152603f602090815260409182902084905581518481529081018590527f36c7c98dfe7e045d8de3e3a8ef7280d623eeb82e7ac5f92d4854297dd078130591015b60405180910390a2505050565b60008281526035602090815260408083206001600160a01b038516845290915290205460ff166108da576117fb816001600160a01b03166014611ede565b611806836020611ede565b6040516020016118179291906125bb565b60408051601f198184030181529082905262461bcd60e51b82526106e69160040161263c565b60008281526035602090815260408083206001600160a01b038516845290915290205460ff166108da5760008281526035602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561189c611639565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526035602090815260408083206001600160a01b038516845290915290205460ff16156108da5760008281526035602090815260408083206001600160a01b03851684529091529020805460ff1916905561193d611639565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b604054819015611a0057604080546001600160a01b0383166000908152604160205291909120546119b2919061266f565b4211611a005760405162461bcd60e51b815260206004820152601960248201527f53616e64526577617264506f6f6c3a206d75737420776169740000000000000060448201526064016106e6565b6001600160a01b0380821660009081526041602090815260408083204290559285168252603a90522054801561083d576001600160a01b038084166000908152603a6020526040812055603b54611a5991168483611c70565b826001600160a01b03167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486826040516117b091815260200190565b60008111611ae45760405162461bcd60e51b815260206004820152601d60248201527f5374616b65546f6b656e577261707065723a20616d6f756e74203e203000000060448201526064016106e6565b80600154611af2919061266f565b6001558060026000611b02611639565b6001600160a01b03166001600160a01b0316815260200190815260200160002054611b2d919061266f565b60026000611b39611639565b6001600160a01b03168152602081019190915260400160002055611218611b5e611639565b6000546001600160a01b031690308461214d565b603d546001600160a01b03161561106157611b8b611506565b603854611b98919061266f565b603855603d54604080517fb016584000000000000000000000000000000000000000000000000000000000815290516001600160a01b039092169163b01658409160048082019260009290919082900301818387803b158015611bfa57600080fd5b505af1158015611c0e573d6000803e3d6000fd5b50505050565b611c1f8160006115d5565b6001600160a01b0382166000908152603a6020526040902054611c42919061266f565b6001600160a01b039091166000908152603a6020908152604080832093909355603854603990915291902055565b6040516001600160a01b03831660248201526044810182905261083d9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261219e565b60008111611d695760405162461bcd60e51b815260206004820152601d60248201527f5374616b65546f6b656e577261707065723a20616d6f756e74203e203000000060448201526064016106e6565b80600154611d7791906126c6565b6001558060026000611d87611639565b6001600160a01b03166001600160a01b0316815260200190815260200160002054611db291906126c6565b60026000611dbe611639565b6001600160a01b03168152602081019190915260400160002055611218611de3611639565b6000546001600160a01b03169083611c70565b603c546000906001600160a01b0316611e2857506001600160a01b0381166000908152600260205260409020546105f6565b603c546001600160a01b03838116600081815260026020526040908190205490517f968b84e50000000000000000000000000000000000000000000000000000000081526004810192909252602482015291169063968b84e590604401602060405180830381600087803b158015611e9f57600080fd5b505af1158015611eb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed79190612587565b90506105f6565b60606000611eed8360026126a7565b611ef890600261266f565b67ffffffffffffffff811115611f1e57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611f48576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611f8d57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611ffe57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600061203a8460026126a7565b61204590600161266f565b90505b60018111156120fe577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061209457634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106120b857634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c936120f781612709565b9050612048565b5083156116325760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106e6565b6040516001600160a01b0380851660248301528316604482015260648101829052611c0e9085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401611cb5565b60006121f3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166122839092919063ffffffff16565b80519091501561083d578080602001905181019061221191906124e8565b61083d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016106e6565b6060612292848460008561229a565b949350505050565b6060824710156123125760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016106e6565b843b6123605760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106e6565b600080866001600160a01b0316858760405161237c919061259f565b60006040518083038185875af1925050503d80600081146123b9576040519150601f19603f3d011682016040523d82523d6000602084013e6123be565b606091505b50915091506123ce8282866123d9565b979650505050505050565b606083156123e8575081611632565b8251156123f85782518084602001fd5b8160405162461bcd60e51b81526004016106e6919061263c565b80356001600160a01b03811681146105f657600080fd5b60006020828403121561243a578081fd5b61163282612412565b60008060408385031215612455578081fd5b61245e83612412565b9150602083013561246e81612751565b809150509250929050565b6000806020838503121561248b578182fd5b823567ffffffffffffffff808211156124a2578384fd5b818501915085601f8301126124b5578384fd5b8135818111156124c3578485fd5b86602080830285010111156124d6578485fd5b60209290920196919550909350505050565b6000602082840312156124f9578081fd5b815161163281612751565b600060208284031215612515578081fd5b5035919050565b6000806040838503121561252e578182fd5b8235915061253e60208401612412565b90509250929050565b600060208284031215612558578081fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114611632578182fd5b600060208284031215612598578081fd5b5051919050565b600082516125b18184602087016126dd565b9190910192915050565b60007f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000825283516125f38160178501602088016126dd565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516126308160288401602088016126dd565b01602801949350505050565b600060208252825180602084015261265b8160408501602087016126dd565b601f01601f19169190910160400192915050565b600082198211156126825761268261273b565b500190565b6000826126a257634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156126c1576126c161273b565b500290565b6000828210156126d8576126d861273b565b500390565b60005b838110156126f85781810151838201526020016126e0565b83811115611c0e5750506000910152565b6000816127185761271861273b565b506000190190565b60006000198214156127345761273461273b565b5060010190565b634e487b7160e01b600052601160045260246000fd5b801515811461121857600080fdfea2646970667358221220e7c1d705a37a59feb904260feef127854c3f5227311dcdcd867b1679501e580464736f6c63430008020033",
  "devdoc": {
    "details": "The contract has two plugins that affect the behaviour: contributionCalculator and rewardCalculatorcontributionCalculator instead of using the stake directly the result of computeContribution is usedthis way some users can get an extra share of the rewardsrewardCalculator is used to manage the rate at which the rewards are distributed.This way we can build different types of pools by mixing in the plugins we want with this contract.default behaviour (address(0)) for contributionCalculator is to use the stacked amount as contribution.default behaviour (address(0)) for rewardCalculator is that no rewards are giving",
    "kind": "dev",
    "methods": {
      "balanceOf(address)": {
        "params": {
          "account": "the address of the account"
        },
        "returns": {
          "_0": "balance of staked tokens"
        }
      },
      "computeContribution(address)": {
        "details": "if the user change his holdings (or any other parameter that affect the contribution calculation),he can the reward distribution to his favor. This function must be called by an external agent ASAP toupdate the contribution for the user. We understand the risk but the rewards are distributes slowly sothe user cannot affect the reward distribution heavily.",
        "params": {
          "account": "the address of the account"
        }
      },
      "computeContributionInBatch(address[])": {
        "details": "see: computeContribution",
        "params": {
          "accounts": "the addresses of the accounts to update"
        }
      },
      "contributionOf(address)": {
        "details": "this is the same than the balanceOf only if the contribution calculatoruses the staked amount as the contribution of the user which is the default behaviour",
        "params": {
          "account": "the address of the account"
        },
        "returns": {
          "_0": "contribution of the users"
        }
      },
      "earned(address)": {
        "params": {
          "account": "the address of the account"
        },
        "returns": {
          "_0": "the available earnings for the user"
        }
      },
      "getReward()": {
        "details": "the user can withdraw his stake independently from the rewards"
      },
      "getRewardsAvailable()": {
        "details": "this function can be called by a reward calculator to throw if a campaign doesn't haveenough rewards to start",
        "returns": {
          "_0": "the total amount of deposited rewards"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getTrustedForwarder()": {
        "returns": {
          "_0": "trustedForwarder address of the trusted forwarder"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isTrustedForwarder(address)": {
        "params": {
          "forwarder": "address to check"
        },
        "returns": {
          "_0": "is trusted"
        }
      },
      "recoverFunds(address)": {
        "details": "this function must be called in an emergency situation only.Calling it is risky specially when rewardToken == stakeToken",
        "params": {
          "receiver": "address of the beneficiary of the recovered funds"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "restartRewards()": {
        "details": "calling this function make no difference. It is useful for testing and when the reward calculatoris changed."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "rewardPerToken()": {
        "details": "This value multiplied by the user contribution is the share of accumulated rewards for the user. Takinginto account the value of totalContributions.",
        "returns": {
          "_0": "the accumulated total rewards"
        }
      },
      "setAntiCompoundLockPeriod(uint256)": {
        "params": {
          "lockPeriodInSecs": "amount of time the user must wait between reward withdrawal"
        }
      },
      "setContributionCalculator(address)": {
        "params": {
          "contractAddress": "address of a plugin that calculates the contribution of the user based on his stake"
        }
      },
      "setRewardCalculator(address,bool)": {
        "params": {
          "contractAddress": "address of a plugin that calculates absolute rewards at any point in time",
          "restartRewards": "if true the rewards from the previous calculator are accumulated before changing it"
        }
      },
      "setRewardToken(address)": {
        "params": {
          "contractAddress": "address token used to pay rewards"
        }
      },
      "setStakeToken(address)": {
        "params": {
          "contractAddress": "address token used to stake funds"
        }
      },
      "setTrustedForwarder(address)": {
        "params": {
          "trustedForwarder": "address of the contract that is enabled to send meta-tx on behalf of the user"
        }
      },
      "stake(uint256)": {
        "details": "the user must approve in the stack token before calling this function",
        "params": {
          "amount": "the amount of tokens to stake"
        }
      },
      "stakeToken()": {
        "returns": {
          "_0": "address of the stake token contract"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "totalContributions()": {
        "details": "this is the same than the totalSupply only if the contribution calculatoruses the staked amount as the contribution of the user which is the default behaviour",
        "returns": {
          "_0": "total contributions of the users"
        }
      },
      "totalSupply()": {
        "returns": {
          "_0": "the total supply of staked tokens"
        }
      },
      "withdraw(uint256)": {
        "details": "the user can withdraw his stake independently from the rewards",
        "params": {
          "amount": "the amount of tokens to withdraw"
        }
      }
    },
    "title": "A pool that distributes rewards between users that stake sand (or any erc20 token)",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "balanceOf(address)": {
        "notice": "return the balance of staked tokens for a user"
      },
      "computeContribution(address)": {
        "notice": "update the contribution for a user"
      },
      "computeContributionInBatch(address[])": {
        "notice": "update the contribution for a sef of users"
      },
      "contributionOf(address)": {
        "notice": "return the contribution of some user"
      },
      "earned(address)": {
        "notice": "available earnings for some user"
      },
      "exit()": {
        "notice": "withdraw the stake and the rewards from the contract"
      },
      "getReward()": {
        "notice": "withdraw the rewards from the contract"
      },
      "getRewardsAvailable()": {
        "notice": "return the amount of rewards deposited in the contract that can be distributed by different campaigns"
      },
      "getTrustedForwarder()": {
        "notice": "Get the current trusted forwarder"
      },
      "isTrustedForwarder(address)": {
        "notice": "Checks if an address is a trusted forwarder"
      },
      "recoverFunds(address)": {
        "notice": "the admin recover is able to recover reward funds"
      },
      "restartRewards()": {
        "notice": "accumulates the current rewards into rewardPerTokenStored and restart the reward calculator"
      },
      "rewardPerToken()": {
        "notice": "accumulated rewards taking into account the totalContribution (see: rewardPerTokenStored)"
      },
      "setAntiCompoundLockPeriod(uint256)": {
        "notice": "set the lockPeriodInSecs for the anti-compound buffer"
      },
      "setContributionCalculator(address)": {
        "notice": "set the contribution calculator"
      },
      "setRewardCalculator(address,bool)": {
        "notice": "set the reward calculator"
      },
      "setRewardToken(address)": {
        "notice": "set the reward token"
      },
      "setStakeToken(address)": {
        "notice": "set the stake token"
      },
      "setTrustedForwarder(address)": {
        "notice": "set the trusted forwarder"
      },
      "stake(uint256)": {
        "notice": "stake some amount into the contract"
      },
      "stakeToken()": {
        "notice": "return the address of the stake token contract"
      },
      "totalContributions()": {
        "notice": "return the sum of the values returned by the contribution calculator"
      },
      "totalSupply()": {
        "notice": "return the total supply of staked tokens"
      },
      "withdraw(uint256)": {
        "notice": "withdraw the stake from the contract"
      }
    },
    "notice": "The contributions are updated passively, an external call to computeContribution from a backend is needed.After initialization the reward calculator must be set by the admin.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 32688,
        "contract": "src/solc_0.8/defi/SandRewardPool.sol:SandRewardPool",
        "label": "_stakeToken",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)5409"
      },
      {
        "astId": 32690,
        "contract": "src/solc_0.8/defi/SandRewardPool.sol:SandRewardPool",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 32694,
        "contract": "src/solc_0.8/defi/SandRewardPool.sol:SandRewardPool",
        "label": "_balances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 32801,
        "contract": "src/solc_0.8/defi/SandRewardPool.sol:SandRewardPool",
        "label": "__gap",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2418,
        "contract": "src/solc_0.8/defi/SandRewardPool.sol:SandRewardPool",
        "label": "_roles",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)2413_storage)"
      },
      {
        "astId": 3133,
        "contract": "src/solc_0.8/defi/SandRewardPool.sol:SandRewardPool",
        "label": "_status",
        "offset": 0,
        "slot": "54",
        "type": "t_uint256"
      },
      {
        "astId": 22610,
        "contract": "src/solc_0.8/defi/SandRewardPool.sol:SandRewardPool",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "55",
        "type": "t_address"
      },
      {
        "astId": 31721,
        "contract": "src/solc_0.8/defi/SandRewardPool.sol:SandRewardPool",
        "label": "rewardPerTokenStored",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 31725,
        "contract": "src/solc_0.8/defi/SandRewardPool.sol:SandRewardPool",
        "label": "userRewardPerTokenPaid",
        "offset": 0,
        "slot": "57",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 31729,
        "contract": "src/solc_0.8/defi/SandRewardPool.sol:SandRewardPool",
        "label": "rewards",
        "offset": 0,
        "slot": "58",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 31732,
        "contract": "src/solc_0.8/defi/SandRewardPool.sol:SandRewardPool",
        "label": "rewardToken",
        "offset": 0,
        "slot": "59",
        "type": "t_contract(IERC20)5409"
      },
      {
        "astId": 31735,
        "contract": "src/solc_0.8/defi/SandRewardPool.sol:SandRewardPool",
        "label": "contributionCalculator",
        "offset": 0,
        "slot": "60",
        "type": "t_contract(IContributionCalculator)33220"
      },
      {
        "astId": 31738,
        "contract": "src/solc_0.8/defi/SandRewardPool.sol:SandRewardPool",
        "label": "rewardCalculator",
        "offset": 0,
        "slot": "61",
        "type": "t_contract(IRewardCalculator)33248"
      },
      {
        "astId": 31740,
        "contract": "src/solc_0.8/defi/SandRewardPool.sol:SandRewardPool",
        "label": "_totalContributions",
        "offset": 0,
        "slot": "62",
        "type": "t_uint256"
      },
      {
        "astId": 31744,
        "contract": "src/solc_0.8/defi/SandRewardPool.sol:SandRewardPool",
        "label": "_contributions",
        "offset": 0,
        "slot": "63",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 31754,
        "contract": "src/solc_0.8/defi/SandRewardPool.sol:SandRewardPool",
        "label": "antiCompound",
        "offset": 0,
        "slot": "64",
        "type": "t_struct(AntiCompound)31751_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IContributionCalculator)33220": {
        "encoding": "inplace",
        "label": "contract IContributionCalculator",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)5409": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IRewardCalculator)33248": {
        "encoding": "inplace",
        "label": "contract IRewardCalculator",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)2413_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)2413_storage"
      },
      "t_struct(AntiCompound)31751_storage": {
        "encoding": "inplace",
        "label": "struct SandRewardPool.AntiCompound",
        "members": [
          {
            "astId": 31746,
            "contract": "src/solc_0.8/defi/SandRewardPool.sol:SandRewardPool",
            "label": "lockPeriodInSecs",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 31750,
            "contract": "src/solc_0.8/defi/SandRewardPool.sol:SandRewardPool",
            "label": "lastClaim",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)2413_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 2410,
            "contract": "src/solc_0.8/defi/SandRewardPool.sol:SandRewardPool",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 2412,
            "contract": "src/solc_0.8/defi/SandRewardPool.sol:SandRewardPool",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}