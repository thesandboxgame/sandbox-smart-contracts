{
  "address": "0xb32613aB5D4b0D6c305Cb26DDb06e625d0B864B8",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "id",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "operator",
          "type": "address"
        },
        {
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "height",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "batchTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "sender",
          "type": "address"
        },
        {
          "name": "operator",
          "type": "address"
        },
        {
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "approveFor",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "size",
          "type": "uint256"
        },
        {
          "name": "x",
          "type": "uint256"
        },
        {
          "name": "y",
          "type": "uint256"
        },
        {
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "transferQuad",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "metaTransactionContract",
          "type": "address"
        },
        {
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "size",
          "type": "uint256"
        },
        {
          "name": "x",
          "type": "uint256"
        },
        {
          "name": "y",
          "type": "uint256"
        },
        {
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mintAndTransferQuad",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "size",
          "type": "uint256"
        },
        {
          "name": "x",
          "type": "uint256"
        },
        {
          "name": "y",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "name": "owner",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "who",
          "type": "address"
        }
      ],
      "name": "isSuperOperator",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "size",
          "type": "uint256"
        },
        {
          "name": "x",
          "type": "uint256"
        },
        {
          "name": "y",
          "type": "uint256"
        },
        {
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mintQuad",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getAdmin",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getY",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "_numNFTPerAddress",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "metaTransactionProcessor",
          "type": "address"
        },
        {
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setMetaTransactionProcessor",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getX",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "changeAdmin",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_owners",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "registry",
          "type": "address"
        }
      ],
      "name": "setOperatorRegistry",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "_operatorsForAll",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "width",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "operator",
          "type": "address"
        },
        {
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "who",
          "type": "address"
        }
      ],
      "name": "isMinter",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "subscriptionOrRegistrantToCopy",
          "type": "address"
        },
        {
          "name": "subscribe",
          "type": "bool"
        }
      ],
      "name": "register",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "superOperator",
          "type": "address"
        },
        {
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setSuperOperator",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "operatorFilterRegistry",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "id",
          "type": "uint256"
        },
        {
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_operators",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "minter",
          "type": "address"
        },
        {
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setMinter",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "who",
          "type": "address"
        }
      ],
      "name": "isMetaTransactionProcessor",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        },
        {
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "sizes",
          "type": "uint256[]"
        },
        {
          "name": "xs",
          "type": "uint256[]"
        },
        {
          "name": "ys",
          "type": "uint256[]"
        },
        {
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "batchTransferQuad",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "sender",
          "type": "address"
        },
        {
          "name": "operator",
          "type": "address"
        },
        {
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAllFor",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "registry",
          "type": "address"
        }
      ],
      "name": "OperatorRegistrySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "subscriptionOrRegistrant",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "subscribe",
          "type": "bool"
        }
      ],
      "name": "ContractRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "superOperator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "Minter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "metaTransactionProcessor",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "MetaTransactionProcessor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "superOperator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "SuperOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_approved",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    }
  ],
  "transactionHash": "0x9187b9ed746834bf428d3420f37c13f0253f5e863643e107d03281f00802b7bf",
  "receipt": {
    "to": null,
    "from": "0xA796AE911621E00809E0E7C8f0AD6BF118E5139e",
    "contractAddress": "0xb32613aB5D4b0D6c305Cb26DDb06e625d0B864B8",
    "transactionIndex": 52,
    "gasUsed": "5152926",
    "logsBloom": "0x
    "blockHash": "0x54fc5a1de1b71904ba5a0bae56d392ae254fb896eca65e1cb2db1a1973515492",
    "transactionHash": "0x9187b9ed746834bf428d3420f37c13f0253f5e863643e107d03281f00802b7bf",
    "logs": [],
    "blockNumber": 9284513,
    "cumulativeGasUsed": "18279378",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "fcd35bfc0b4ed9a8e53dfc2c10882b4b",
  "metadata": "{\"compiler\":{\"version\":\"0.5.9+commit.c68bc34e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operator\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"height\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"ids\",\"type\":\"uint256[]\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"batchTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"ids\",\"type\":\"uint256[]\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"operator\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approveFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"size\",\"type\":\"uint256\"},{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferQuad\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"metaTransactionContract\",\"type\":\"address\"},{\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"size\",\"type\":\"uint256\"},{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintAndTransferQuad\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"size\",\"type\":\"uint256\"},{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isSuperOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"size\",\"type\":\"uint256\"},{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintQuad\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_numNFTPerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"metaTransactionProcessor\",\"type\":\"address\"},{\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setMetaTransactionProcessor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getX\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_owners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"setOperatorRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_operatorsForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"width\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operator\",\"type\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"subscriptionOrRegistrantToCopy\",\"type\":\"address\"},{\"name\":\"subscribe\",\"type\":\"bool\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"superOperator\",\"type\":\"address\"},{\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setSuperOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operatorFilterRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_operators\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minter\",\"type\":\"address\"},{\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isMetaTransactionProcessor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"sizes\",\"type\":\"uint256[]\"},{\"name\":\"xs\",\"type\":\"uint256[]\"},{\"name\":\"ys\",\"type\":\"uint256[]\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"batchTransferQuad\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"operator\",\"type\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAllFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"OperatorRegistrySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"subscriptionOrRegistrant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"subscribe\",\"type\":\"bool\"}],\"name\":\"ContractRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"superOperator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"Minter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"metaTransactionProcessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"MetaTransactionProcessor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"superOperator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SuperOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}],\"devdoc\":{\"author\":\"The Sandbox\",\"details\":\"LAND contract implements ERC721, quad and marketplace filtering functionalities\",\"methods\":{\"approve(address,uint256)\":{\"params\":{\"id\":\"The id of the token\",\"operator\":\"The address receiving the approval\"}},\"approveFor(address,address,uint256)\":{\"params\":{\"id\":\"The id of the token\",\"operator\":\"The address receiving the approval\",\"sender\":\"The address giving the approval\"}},\"balanceOf(address)\":{\"params\":{\"owner\":\"The address to look for\"},\"return\":\"The number of Land token owned by the address\"},\"batchTransferFrom(address,address,uint256[],bytes)\":{\"params\":{\"data\":\"additional data\",\"from\":\"The sender of the token\",\"ids\":\"The ids of the tokens\",\"to\":\"The recipient of the token\"}},\"batchTransferQuad(address,address,uint256[],uint256[],uint256[],bytes)\":{\"params\":{\"data\":\"additional data\",\"from\":\"current owner of the quad\",\"sizes\":\"list of sizes for each quad\",\"to\":\"destination\",\"xs\":\"list of top left x coordinates for each quad\",\"ys\":\"list of top left y coordinates for each quad\"}},\"burn(uint256)\":{\"params\":{\"id\":\"token which will be burnt.\"}},\"burnFrom(address,uint256)\":{\"params\":{\"from\":\"address whose token is to be burnt.\",\"id\":\"token which will be burnt.\"}},\"changeAdmin(address)\":{\"params\":{\"newAdmin\":\"address of the new administrator.\"}},\"exists(uint256,uint256,uint256)\":{\"params\":{\"size\":\"size of the quad\",\"x\":\"x coordinate of the quad\",\"y\":\"y coordinate of the quad\"},\"return\":\"bool for if Land has been minted or not\"},\"getAdmin()\":{\"return\":\"the current administrator of this contract.\"},\"getApproved(uint256)\":{\"params\":{\"id\":\"The id of the token\"},\"return\":\"The address of the operator\"},\"getX(uint256)\":{\"params\":{\"id\":\"tokenId\"},\"return\":\"the x coordinates\"},\"getY(uint256)\":{\"params\":{\"id\":\"tokenId\"},\"return\":\"the y coordinates\"},\"height()\":{\"return\":\"height\"},\"initialize(address,address)\":{\"params\":{\"admin\":\"Admin of the contract\",\"metaTransactionContract\":\"Authorized contract for meta-transactions\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"operator\":\"The address of the operator\",\"owner\":\"The address of the owner\"},\"return\":\"The status of the approval\"},\"isMetaTransactionProcessor(address)\":{\"params\":{\"who\":\"The address to query.\"},\"return\":\"whether the address has meta-transaction execution rights.\"},\"isMinter(address)\":{\"params\":{\"who\":\"The address to query.\"},\"return\":\"whether the address has minter rights.\"},\"isSuperOperator(address)\":{\"params\":{\"who\":\"The address to query.\"},\"return\":\"whether the address has superOperator rights.\"},\"mintAndTransferQuad(address,uint256,uint256,uint256,bytes)\":{\"params\":{\"data\":\"extra data to pass to the transfer\",\"size\":\"The size of the new quad\",\"to\":\"The recipient of the new quad\",\"x\":\"The top left x coordinate of the new quad\",\"y\":\"The top left y coordinate of the new quad\"}},\"mintQuad(address,uint256,uint256,uint256,bytes)\":{\"params\":{\"data\":\"extra data to pass to the transfer\",\"size\":\"The size of the new quad\",\"to\":\"The recipient of the new quad\",\"x\":\"The top left x coordinate of the new quad\",\"y\":\"The top left y coordinate of the new quad\"}},\"name()\":{\"return\":\"The name of the token contract\"},\"ownerOf(uint256)\":{\"params\":{\"id\":\"The id of the Land\"},\"return\":\"The address of the owner\"},\"register(address,bool)\":{\"details\":\"used to register contract and subscribe to the subscriptionOrRegistrantToCopy's black list.\",\"params\":{\"subscribe\":\"bool to signify subscription \\\"true\\\"\\\" or to copy the list \\\"false\\\".\",\"subscriptionOrRegistrantToCopy\":\"registration address of the list to subscribe.\"}},\"safeBatchTransferFrom(address,address,uint256[],bytes)\":{\"params\":{\"data\":\"additional data\",\"from\":\"The sender of the token\",\"ids\":\"The ids of the tokens\",\"to\":\"The recipient of the token\"}},\"safeTransferFrom(address,address,uint256)\":{\"params\":{\"from\":\"The send of the token\",\"id\":\"The id of the token\",\"to\":\"The recipient of the token\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"params\":{\"data\":\"Additional data\",\"from\":\"The sender of the token\",\"id\":\"The id of the token\",\"to\":\"The recipient of the token\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"approved\":\"The determination of the approval\",\"operator\":\"The address receiving the approval\"}},\"setApprovalForAllFor(address,address,bool)\":{\"params\":{\"approved\":\"The determination of the approval\",\"operator\":\"The address receiving the approval\",\"sender\":\"The address giving the approval\"}},\"setMetaTransactionProcessor(address,bool)\":{\"params\":{\"enabled\":\"set whether the metaTransactionProcessor is enabled or disabled.\",\"metaTransactionProcessor\":\"address that will be given/removed metaTransactionProcessor rights.\"}},\"setMinter(address,bool)\":{\"params\":{\"enabled\":\"set whether the minter is enabled or disabled.\",\"minter\":\"address that will be given/removed minter right.\"}},\"setOperatorRegistry(address)\":{\"params\":{\"registry\":\"the address of the registry\"}},\"setSuperOperator(address,bool)\":{\"params\":{\"enabled\":\"set whether the superOperator is enabled or disabled.\",\"superOperator\":\"address that will be given/removed superOperator right.\"}},\"supportsInterface(bytes4)\":{\"params\":{\"id\":\"The id of the interface\"},\"return\":\"True if the interface is supported\"},\"symbol()\":{\"return\":\"The symbol of the token contract\"},\"tokenURI(uint256)\":{\"params\":{\"id\":\"The id of the token\"},\"return\":\"The URI of the token\"},\"transferFrom(address,address,uint256)\":{\"params\":{\"from\":\"The sender of the token\",\"id\":\"The id of the token\",\"to\":\"The recipient of the token\"}},\"transferQuad(address,address,uint256,uint256,uint256,bytes)\":{\"params\":{\"data\":\"additional data\",\"from\":\"current owner of the quad\",\"size\":\"size of the quad\",\"to\":\"destination\",\"x\":\"The top left x coordinate of the quad\",\"y\":\"The top left y coordinate of the quad\"}},\"width()\":{\"return\":\"width\"}},\"title\":\"LandV3\"},\"userdoc\":{\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Approve an operator to spend tokens on the sender behalf\"},\"approveFor(address,address,uint256)\":{\"notice\":\"Approve an operator to spend tokens on the sender behalf\"},\"balanceOf(address)\":{\"notice\":\"Return the number of Land owned by an address\"},\"batchTransferFrom(address,address,uint256[],bytes)\":{\"notice\":\"Transfer many tokens between 2 addresses\"},\"batchTransferQuad(address,address,uint256[],uint256[],uint256[],bytes)\":{\"notice\":\"transfer multiple quad (aligned to a quad tree with size 3, 6, 12 or 24 only)\"},\"burn(uint256)\":{\"notice\":\"Burns token `id`.\"},\"burnFrom(address,uint256)\":{\"notice\":\"Burn token`id` from `from`.\"},\"changeAdmin(address)\":{\"notice\":\"change the administrator to be `newAdmin`.\"},\"exists(uint256,uint256,uint256)\":{\"notice\":\"checks if Land has been minted or not\"},\"getAdmin()\":{\"notice\":\"gives the current administrator of this contract.\"},\"getApproved(uint256)\":{\"notice\":\"Get the approved operator for a specific token\"},\"getX(uint256)\":{\"notice\":\"x coordinate of Land token\"},\"getY(uint256)\":{\"notice\":\"y coordinate of Land token\"},\"height()\":{\"notice\":\"total height of the map\"},\"initialize(address,address)\":{\"notice\":\"Initializes the contract with the meta-transaction contract & admin\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Check if the sender approved the operator\"},\"isMetaTransactionProcessor(address)\":{\"notice\":\"check whether address `who` is given meta-transaction execution rights.\"},\"isMinter(address)\":{\"notice\":\"check whether address `who` is given minter rights.\"},\"isSuperOperator(address)\":{\"notice\":\"check whether address `who` is given superOperator rights.\"},\"mintAndTransferQuad(address,uint256,uint256,uint256,bytes)\":{\"notice\":\"Checks if a parent quad has child quads already minted. Then mints the rest child quads and transfers the parent quad. Should only be called by the tunnel.\"},\"mintQuad(address,uint256,uint256,uint256,bytes)\":{\"notice\":\"Mint a new quad (aligned to a quad tree with size 1, 3, 6, 12 or 24 only)\"},\"name()\":{\"notice\":\"Return the name of the token contract\"},\"ownerOf(uint256)\":{\"notice\":\"Return the owner of a Land\"},\"register(address,bool)\":{\"notice\":\"This function is used to register Land contract on the Operator Filterer Registry of Opensea.can only be called by admin.\"},\"safeBatchTransferFrom(address,address,uint256[],bytes)\":{\"notice\":\"Transfer many tokens between 2 addresses ensuring the receiving contract has a receiver method\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"Transfer a token between 2 addresses letting the receiver knows of the transfer\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Transfer a token between 2 addresses letting the receiver knows of the transfer\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Set the approval for an operator to manage all the tokens of the sender\"},\"setApprovalForAllFor(address,address,bool)\":{\"notice\":\"Set the approval for an operator to manage all the tokens of the sender\"},\"setMetaTransactionProcessor(address,bool)\":{\"notice\":\"Enable or disable the ability of `metaTransactionProcessor` to perform meta-tx (metaTransactionProcessor rights).\"},\"setMinter(address,bool)\":{\"notice\":\"Enable or disable the ability of `minter` to mint tokens\"},\"setOperatorRegistry(address)\":{\"notice\":\"sets filter registry address deployed in test\"},\"setSuperOperator(address,bool)\":{\"notice\":\"Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights).\"},\"supportsInterface(bytes4)\":{\"notice\":\"Check if the contract supports an interface 0x01ffc9a7 is ERC-165 0x80ac58cd is ERC-721 0x5b5e139f is ERC-721 metadata\"},\"symbol()\":{\"notice\":\"Return the symbol of the token contract\"},\"tokenURI(uint256)\":{\"notice\":\"Return the URI of a specific token\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer a token between 2 addresses\"},\"transferQuad(address,address,uint256,uint256,uint256,bytes)\":{\"notice\":\"transfer one quad (aligned to a quad tree with size 3, 6, 12 or 24 only)\"},\"width()\":{\"notice\":\"total width of the map\"}},\"notice\":\"LAND contract\"}},\"settings\":{\"compilationTarget\":{\"src/solc_0.5/LandV3.sol\":\"LandV3\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"src/solc_0.5/Land/erc721/ERC721BaseTokenV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable func-order, code-complexity */\\npragma solidity 0.5.9;\\n\\nimport {AddressUtils} from \\\"../../contracts_common/Libraries/AddressUtils.sol\\\";\\nimport {ERC721TokenReceiver} from \\\"../../contracts_common/Interfaces/ERC721TokenReceiver.sol\\\";\\nimport {ERC721Events} from \\\"../../contracts_common/Interfaces/ERC721Events.sol\\\";\\nimport {SuperOperatorsV2} from \\\"../../contracts_common/BaseWithStorage/SuperOperatorsV2.sol\\\";\\nimport {MetaTransactionReceiverV2} from \\\"../../contracts_common/BaseWithStorage/MetaTransactionReceiverV2.sol\\\";\\nimport {ERC721MandatoryTokenReceiver} from \\\"../../contracts_common/Interfaces/ERC721MandatoryTokenReceiver.sol\\\";\\n\\n/**\\n * @title ERC721BaseTokenV2\\n * @author The Sandbox\\n * @notice Basic functionalities of a NFT\\n * @dev ERC721 implementation that supports meta-transactions and super operators\\n */\\ncontract ERC721BaseTokenV2 is ERC721Events, SuperOperatorsV2, MetaTransactionReceiverV2 {\\n    using AddressUtils for address;\\n\\n    bytes4 internal constant _ERC721_RECEIVED = 0x150b7a02;\\n    bytes4 internal constant _ERC721_BATCH_RECEIVED = 0x4b808c46;\\n\\n    bytes4 internal constant ERC165ID = 0x01ffc9a7;\\n    bytes4 internal constant ERC721_MANDATORY_RECEIVER = 0x5e8bf644;\\n\\n    /// @notice Number of NFT an address own\\n    mapping (address => uint256) public _numNFTPerAddress;\\n\\n    /// @notice Token ids per address\\n    mapping (uint256 => uint256) public _owners;\\n\\n    /// @notice Operators for each owner address for all tokens\\n    mapping (address => mapping(address => bool)) public _operatorsForAll;\\n\\n    /// @notice Operator for each token id\\n    mapping (uint256 => address) public _operators;\\n\\n    bool internal _initialized;\\n\\n    modifier initializer() {\\n        require(!_initialized, \\\"ERC721BaseToken: Contract already initialized\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract with the meta-transaction contract & admin\\n     * @param metaTransactionContract Authorized contract for meta-transactions\\n     * @param admin Admin of the contract\\n     */\\n    function initialize (\\n        address metaTransactionContract,\\n        address admin\\n    ) public initializer {\\n        _admin = admin;\\n        _setMetaTransactionProcessor(metaTransactionContract, true);\\n        _initialized = true;\\n        emit AdminChanged(address(0), _admin);\\n    }\\n\\n    /**\\n     * @param from Sender address\\n     * @param to Recipient address\\n     * @param id Token id to transfer\\n     */\\n    function _transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) internal {\\n        _numNFTPerAddress[from]--;\\n        _numNFTPerAddress[to]++;\\n        _owners[id] = uint256(to);\\n        emit Transfer(from, to, id);\\n    }\\n\\n    /**\\n     * @notice Return the number of Land owned by an address\\n     * @param owner The address to look for\\n     * @return The number of Land token owned by the address\\n     */\\n    function balanceOf(address owner) external view returns (uint256) {\\n        require(owner != address(0), \\\"owner is zero address\\\");\\n        return _numNFTPerAddress[owner];\\n    }\\n\\n    /**\\n     * @param id token id\\n     * @return address of the owner\\n     */\\n    function _ownerOf(uint256 id) internal view returns (address) {\\n        return address(_owners[id]);\\n    }\\n\\n    /**\\n     * @param id Token id\\n     * @return owner Address of the token's owner\\n     * @return operatorEnabled Is he an operator\\n     */\\n    function _ownerAndOperatorEnabledOf(uint256 id) internal view returns (address owner, bool operatorEnabled) {\\n        uint256 data = _owners[id];\\n        owner = address(data);\\n        operatorEnabled = (data / 2**255) == 1;\\n    }\\n\\n    /**\\n     * @notice Return the owner of a Land\\n     * @param id The id of the Land\\n     * @return The address of the owner\\n     */\\n    function ownerOf(uint256 id) external view returns (address owner) {\\n        owner = _ownerOf(id);\\n        require(owner != address(0), \\\"token does not exist\\\");\\n    }\\n\\n    /**\\n     * @param owner The address giving the approval\\n     * @param operator The address receiving the approval\\n     * @param id The id of the token\\n     */\\n    function _approveFor(\\n        address owner,\\n        address operator,\\n        uint256 id\\n    ) internal {\\n        if (operator == address(0)) {\\n            _owners[id] = uint256(owner); // no need to resset the operator, it will be overriden next time\\n        } else {\\n            _owners[id] = uint256(owner) + 2**255;\\n            _operators[id] = operator;\\n        }\\n        emit Approval(owner, operator, id);\\n    }\\n\\n    /**\\n     * @notice Approve an operator to spend tokens on the sender behalf\\n     * @param sender The address giving the approval\\n     * @param operator The address receiving the approval\\n     * @param id The id of the token\\n     */\\n    function approveFor(\\n        address sender,\\n        address operator,\\n        uint256 id\\n    ) public {\\n        address owner = _ownerOf(id);\\n        require(sender != address(0), \\\"sender is zero address\\\");\\n        require(\\n            msg.sender == sender ||\\n                _metaTransactionContracts[msg.sender] ||\\n                _operatorsForAll[sender][msg.sender] ||\\n                _superOperators[msg.sender],\\n            \\\"not authorized to approve\\\"\\n        );\\n        require(owner == sender, \\\"owner != sender\\\");\\n        _approveFor(owner, operator, id);\\n    }\\n\\n    /**\\n     * @notice Approve an operator to spend tokens on the sender behalf\\n     * @param operator The address receiving the approval\\n     * @param id The id of the token\\n     */\\n    function approve(address operator, uint256 id) public {\\n        address owner = _ownerOf(id);\\n        require(owner != address(0), \\\"token does not exist\\\");\\n        require(\\n            owner == msg.sender || _operatorsForAll[owner][msg.sender] || _superOperators[msg.sender],\\n            \\\"not authorized to approve\\\"\\n        );\\n        _approveFor(owner, operator, id);\\n    }\\n\\n    /**\\n     * @notice Get the approved operator for a specific token\\n     * @param id The id of the token\\n     * @return The address of the operator\\n     */\\n    function getApproved(uint256 id) external view returns (address) {\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n        require(owner != address(0), \\\"token does not exist\\\");\\n        if (operatorEnabled) {\\n            return _operators[id];\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    /**\\n     * @param from The sender of the token\\n     * @param to The recipient of the token\\n     * @param id The id of the token\\n     * @return is it a meta-tx\\n     */\\n    function _checkTransfer(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) internal view returns (bool isMetaTx) {\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n        require(owner != address(0), \\\"token does not exist\\\");\\n        require(owner == from, \\\"not owner in _checkTransfer\\\");\\n        require(to != address(0), \\\"can't send to zero address\\\");\\n        if (msg.sender != from) {\\n            if(_metaTransactionContracts[msg.sender]) {\\n                return true;\\n            }\\n            require(\\n                _operatorsForAll[from][msg.sender] ||\\n                    (operatorEnabled && _operators[id] == msg.sender) ||\\n                    _superOperators[msg.sender],\\n                \\\"not approved to transfer\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Checks if the target contract supports the given interface & doesn't exceed 10000 gas\\n     * @param _contract The target contract\\n     * @param interfaceId The interface id\\n     * @return if the call is a success\\n     */\\n    function _checkInterfaceWith10000Gas(address _contract, bytes4 interfaceId)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success;\\n        bool result;\\n        bytes memory call_data = abi.encodeWithSelector(ERC165ID, interfaceId);\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            let call_ptr := add(0x20, call_data)\\n            let call_size := mload(call_data)\\n            let output := mload(0x40) // Find empty storage location using \\\"free memory pointer\\\"\\n            mstore(output, 0x0)\\n            success := staticcall(10000, _contract, call_ptr, call_size, output, 0x20) // 32 bytes\\n            result := mload(output)\\n        }\\n        // (10000 / 63) \\\"not enough for supportsInterface(...)\\\" // consume all gas, so caller can potentially know that there was not enough gas\\n        assert(gasleft() > 158);\\n        return success && result;\\n    }\\n\\n    /**\\n     * @notice Transfer a token between 2 addresses\\n     * @param from The sender of the token\\n     * @param to The recipient of the token\\n     * @param id The id of the token\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public {\\n        bool metaTx = _checkTransfer(from, to, id);\\n        _transferFrom(from, to, id);\\n        if (to.isContract() && _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER)) {\\n            require(\\n                _checkOnERC721Received(metaTx ? from : msg.sender, from, to, id, \\\"\\\"),\\n                \\\"erc721 transfer rejected by to\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfer a token between 2 addresses letting the receiver knows of the transfer\\n     * @param from The sender of the token\\n     * @param to The recipient of the token\\n     * @param id The id of the token\\n     * @param data Additional data\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) public {\\n        bool metaTx = _checkTransfer(from, to, id);\\n        _transferFrom(from, to, id);\\n        if (to.isContract()) {\\n            require(\\n                _checkOnERC721Received(metaTx ? from : msg.sender, from, to, id, data),\\n                \\\"ERC721: transfer rejected by to\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfer a token between 2 addresses letting the receiver knows of the transfer\\n     * @param from The send of the token\\n     * @param to The recipient of the token\\n     * @param id The id of the token\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) external {\\n        safeTransferFrom(from, to, id, \\\"\\\");\\n    }\\n\\n    /**\\n     * @notice Transfer many tokens between 2 addresses\\n     * @param from The sender of the token\\n     * @param to The recipient of the token\\n     * @param ids The ids of the tokens\\n     * @param data additional data\\n     */\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external {\\n        _batchTransferFrom(from, to, ids, data, false);\\n    }\\n\\n    /**\\n     * @param from The sender of the token\\n     * @param to The recipient of the token\\n     * @param ids The ids of the tokens\\n     * @param data additional data\\n     * @param safe checks the target contract\\n     */\\n    function _batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        bytes memory data,\\n        bool safe\\n    ) internal {\\n        bool metaTx = msg.sender != from && _metaTransactionContracts[msg.sender];\\n        bool authorized =\\n            msg.sender == from || metaTx || _operatorsForAll[from][msg.sender] || _superOperators[msg.sender];\\n\\n        require(from != address(0), \\\"from is zero address\\\");\\n        require(to != address(0), \\\"can't send to zero address\\\");\\n\\n        uint256 numTokens = ids.length;\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            uint256 id = ids[i];\\n            (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n            require(owner == from, \\\"not owner in batchTransferFrom\\\");\\n            require(authorized || (operatorEnabled && _operators[id] == msg.sender), \\\"not authorized\\\");\\n            _owners[id] = uint256(to);\\n            emit Transfer(from, to, id);\\n        }\\n        if (from != to) {\\n            _numNFTPerAddress[from] -= numTokens;\\n            _numNFTPerAddress[to] += numTokens;\\n        }\\n\\n        if (to.isContract()) {\\n            if (_checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER)) {\\n                require(\\n                    _checkOnERC721BatchReceived(metaTx ? from : msg.sender, from, to, ids, data),\\n                    \\\"erc721 batch transfer rejected by to\\\"\\n                );\\n            } else if (safe) {\\n                for (uint256 i = 0; i < numTokens; i++) {\\n                    require(\\n                        _checkOnERC721Received(metaTx ? from : msg.sender, from, to, ids[i], \\\"\\\"),\\n                        \\\"erc721 transfer rejected by to\\\"\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfer many tokens between 2 addresses ensuring the receiving contract has a receiver method\\n     * @param from The sender of the token\\n     * @param to The recipient of the token\\n     * @param ids The ids of the tokens\\n     * @param data additional data\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external {\\n        _batchTransferFrom(from, to, ids, data, true);\\n    }\\n\\n    /**\\n     * @notice Check if the contract supports an interface\\n     * 0x01ffc9a7 is ERC-165\\n     * 0x80ac58cd is ERC-721\\n     * @param id The id of the interface\\n     * @return True if the interface is supported\\n     */\\n    function supportsInterface(bytes4 id) external pure returns (bool) {\\n        return id == 0x01ffc9a7 || id == 0x80ac58cd;\\n    }\\n\\n    /**\\n     * @notice Set the approval for an operator to manage all the tokens of the sender\\n     * @param sender The address giving the approval\\n     * @param operator The address receiving the approval\\n     * @param approved The determination of the approval\\n     */\\n    function setApprovalForAllFor(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) public {\\n        require(sender != address(0), \\\"Invalid sender address\\\");\\n        require(\\n            msg.sender == sender || _metaTransactionContracts[msg.sender] || _superOperators[msg.sender],\\n            \\\"not authorized to approve for all\\\"\\n        );\\n\\n        _setApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /**\\n     * @notice Set the approval for an operator to manage all the tokens of the sender\\n     * @param operator The address receiving the approval\\n     * @param approved The determination of the approval\\n     */\\n    function setApprovalForAll(address operator, bool approved) public {\\n        _setApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    /**\\n     * @param sender Sender address\\n     * @param operator The address receiving the approval\\n     * @param approved The determination of the approval\\n     */\\n    function _setApprovalForAll(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) internal {\\n        require(!_superOperators[operator], \\\"super operator can't have their approvalForAll changed\\\");\\n        _operatorsForAll[sender][operator] = approved;\\n\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /**\\n     * @notice Check if the sender approved the operator\\n     * @param owner The address of the owner\\n     * @param operator The address of the operator\\n     * @return The status of the approval\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return _operatorsForAll[owner][operator] || _superOperators[operator];\\n    }\\n\\n    /**\\n     * @param from sender address\\n     * @param owner owner address of the token\\n     * @param id token id to burn\\n     */\\n    function _burn(\\n        address from,\\n        address owner,\\n        uint256 id\\n    ) internal {\\n        require(from == owner, \\\"not owner\\\");\\n        _owners[id] = 2**160; // cannot mint it again\\n        _numNFTPerAddress[from]--;\\n        emit Transfer(from, address(0), id);\\n    }\\n\\n    /// @notice Burns token `id`.\\n    /// @param id token which will be burnt.\\n    function burn(uint256 id) external {\\n        _burn(msg.sender, _ownerOf(id), id);\\n    }\\n\\n    /// @notice Burn token`id` from `from`.\\n    /// @param from address whose token is to be burnt.\\n    /// @param id token which will be burnt.\\n    function burnFrom(address from, uint256 id) external {\\n        require(from != address(0), \\\"Invalid sender address\\\");\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n        require(\\n            msg.sender == from ||\\n                _metaTransactionContracts[msg.sender] ||\\n                (operatorEnabled && _operators[id] == msg.sender) ||\\n                _operatorsForAll[from][msg.sender] ||\\n                _superOperators[msg.sender],\\n            \\\"not authorized to burn\\\"\\n        );\\n        _burn(from, owner, id);\\n    }\\n\\n    /**\\n     * @param operator Sender of the tx\\n     * @param from Owner of the token\\n     * @param to Recipient\\n     * @param tokenId Token id\\n     * @param _data extra data\\n     */\\n    function _checkOnERC721Received(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal returns (bool) {\\n        bytes4 retval = ERC721TokenReceiver(to).onERC721Received(operator, from, tokenId, _data);\\n        return (retval == _ERC721_RECEIVED);\\n    }\\n\\n    /**\\n     * @dev Check if receiving contract accepts erc721 batch transfers.\\n     * @param operator Sender of the tx\\n     * @param from Owner of the token\\n     * @param to Recipient\\n     * @param ids Token ids\\n     * @param _data extra data\\n     * @return Whether the expected value of 0x4b808c46 is returned.\\n     */\\n    function _checkOnERC721BatchReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        bytes memory _data\\n    ) internal returns (bool) {\\n        bytes4 retval = ERC721MandatoryTokenReceiver(to).onERC721BatchReceived(operator, from, ids, _data);\\n        return (retval == _ERC721_BATCH_RECEIVED);\\n    }\\n\\n    // Empty storage space in contracts for future enhancements\\n    // ref: https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/issues/13)\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc9e34dddf1c202d890356e97b45e7df480cd96b546230822c1f09de1c4787c50\"},\"src/solc_0.5/Land/erc721/LandBaseTokenV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable func-order, code-complexity */\\npragma solidity 0.5.9;\\n\\nimport {ERC721BaseTokenV2} from \\\"./ERC721BaseTokenV2.sol\\\";\\n\\n/**\\n * @title LandBaseTokenV3\\n * @author The Sandbox\\n * @notice Implement LAND and quad functionalities on top of an ERC721 token\\n * @dev This contract implements a quad tree structure to handle groups of ERC721 tokens at once\\n */\\ncontract LandBaseTokenV3 is ERC721BaseTokenV2 {\\n    // Our grid is 408 x 408 lands\\n    uint256 internal constant GRID_SIZE = 408;\\n\\n    uint256 internal constant LAYER = 0xFF00000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_1x1 = 0x0000000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_3x3 = 0x0100000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_6x6 = 0x0200000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_12x12 = 0x0300000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_24x24 = 0x0400000000000000000000000000000000000000000000000000000000000000;\\n\\n    mapping(address => bool) internal _minters;\\n    event Minter(address indexed superOperator, bool enabled);\\n\\n    struct Land {\\n        uint256 x;\\n        uint256 y;\\n        uint256 size;\\n    }\\n\\n    /**\\n     * @notice Mint a new quad (aligned to a quad tree with size 1, 3, 6, 12 or 24 only)\\n     * @param to The recipient of the new quad\\n     * @param size The size of the new quad\\n     * @param x The top left x coordinate of the new quad\\n     * @param y The top left y coordinate of the new quad\\n     * @param data extra data to pass to the transfer\\n     */\\n    function mintQuad(\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes calldata data\\n    ) external {\\n        require(to != address(0), \\\"to is zero address\\\");\\n        require(size != 0, \\\"size cannot be zero\\\");\\n        require(isMinter(msg.sender), \\\"Only a minter can mint\\\");\\n\\n        _isValidQuad(size, x, y);\\n\\n        (uint256 layer, , ) = _getQuadLayer(size);\\n        uint256 quadId = _getQuadId(layer, x, y);\\n\\n        _checkOwner(size, x, y, 24);\\n        for (uint256 i = 0; i < size * size; i++) {\\n            uint256 _id = _idInPath(i, size, x, y);\\n            require(_owners[_id] == 0, \\\"Already minted\\\");\\n            emit Transfer(address(0), to, _id);\\n        }\\n\\n        _owners[quadId] = uint256(to);\\n        _numNFTPerAddress[to] += size * size;\\n\\n        _checkBatchReceiverAcceptQuad(msg.sender, address(0), to, size, x, y, data);\\n    }\\n\\n    /**\\n     * @notice Checks if a parent quad has child quads already minted.\\n     *  Then mints the rest child quads and transfers the parent quad.\\n     *  Should only be called by the tunnel.\\n     * @param to The recipient of the new quad\\n     * @param size The size of the new quad\\n     * @param x The top left x coordinate of the new quad\\n     * @param y The top left y coordinate of the new quad\\n     * @param data extra data to pass to the transfer\\n     */\\n    function mintAndTransferQuad(\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes calldata data\\n    ) external {\\n        require(to != address(0), \\\"to is zero address\\\");\\n        require(isMinter(msg.sender), \\\"Only a minter can mint\\\");\\n\\n        if (exists(size, x, y) == true) {\\n            _transferQuad(msg.sender, to, size, x, y);\\n            _numNFTPerAddress[msg.sender] -= size * size;\\n            _numNFTPerAddress[to] += size * size;\\n            _checkBatchReceiverAcceptQuad(msg.sender, msg.sender, to, size, x, y, data);\\n        } else {\\n            _mintAndTransferQuad(to, size, x, y, data);\\n        }\\n    }\\n\\n    /// @notice transfer one quad (aligned to a quad tree with size 3, 6, 12 or 24 only)\\n    /// @param from current owner of the quad\\n    /// @param to destination\\n    /// @param size size of the quad\\n    /// @param x The top left x coordinate of the quad\\n    /// @param y The top left y coordinate of the quad\\n    /// @param data additional data\\n    function transferQuad(\\n        address from,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes calldata data\\n    ) external {\\n        require(from != address(0), \\\"from is zero address\\\");\\n        require(to != address(0), \\\"can't send to zero address\\\");\\n        bool metaTx = msg.sender != from && _metaTransactionContracts[msg.sender];\\n        if (msg.sender != from && !metaTx) {\\n            require(\\n                _operatorsForAll[from][msg.sender] || _superOperators[msg.sender],\\n                \\\"not authorized to transferQuad\\\"\\n            );\\n        }\\n        _transferQuad(from, to, size, x, y);\\n        _numNFTPerAddress[from] -= size * size;\\n        _numNFTPerAddress[to] += size * size;\\n\\n        _checkBatchReceiverAcceptQuad(metaTx ? from : msg.sender, from, to, size, x, y, data);\\n    }\\n\\n    /// @notice transfer multiple quad (aligned to a quad tree with size 3, 6, 12 or 24 only)\\n    /// @param from current owner of the quad\\n    /// @param to destination\\n    /// @param sizes list of sizes for each quad\\n    /// @param xs list of top left x coordinates for each quad\\n    /// @param ys list of top left y coordinates for each quad\\n    /// @param data additional data\\n    function batchTransferQuad(\\n        address from,\\n        address to,\\n        uint256[] calldata sizes,\\n        uint256[] calldata xs,\\n        uint256[] calldata ys,\\n        bytes calldata data\\n    ) external {\\n        require(from != address(0), \\\"from is zero address\\\");\\n        require(to != address(0), \\\"can't send to zero address\\\");\\n        require(sizes.length == xs.length, \\\"LandBaseTokenV3: sizes's and x's length are different\\\");\\n        require(xs.length == ys.length, \\\"LandBaseTokenV3: x's and y's length are different\\\");\\n        bool metaTx = msg.sender != from && _metaTransactionContracts[msg.sender];\\n        if (msg.sender != from && !metaTx) {\\n            require(\\n                _operatorsForAll[from][msg.sender] || _superOperators[msg.sender],\\n                \\\"not authorized to transferMultiQuads\\\"\\n            );\\n        }\\n        uint256 numTokensTransfered = 0;\\n        for (uint256 i = 0; i < sizes.length; i++) {\\n            uint256 size = sizes[i];\\n            _transferQuad(from, to, size, xs[i], ys[i]);\\n            numTokensTransfered += size * size;\\n        }\\n        _numNFTPerAddress[from] -= numTokensTransfered;\\n        _numNFTPerAddress[to] += numTokensTransfered;\\n\\n        if (to.isContract() && _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER)) {\\n            uint256[] memory ids = new uint256[](numTokensTransfered);\\n            uint256 counter = 0;\\n            for (uint256 j = 0; j < sizes.length; j++) {\\n                uint256 size = sizes[j];\\n                for (uint256 i = 0; i < size * size; i++) {\\n                    ids[counter] = _idInPath(i, size, xs[j], ys[j]);\\n                    counter++;\\n                }\\n            }\\n            require(\\n                _checkOnERC721BatchReceived(metaTx ? from : msg.sender, from, to, ids, data),\\n                \\\"erc721 batch transfer rejected by to\\\"\\n            );\\n        }\\n    }\\n\\n    /// @notice Enable or disable the ability of `minter` to mint tokens\\n    /// @param minter address that will be given/removed minter right.\\n    /// @param enabled set whether the minter is enabled or disabled.\\n    function setMinter(address minter, bool enabled) external onlyAdmin {\\n        require(minter != address(0), \\\"address 0 is not allowed as minter\\\");\\n        require(enabled != _minters[minter], \\\"the status should be different than the current one\\\");\\n        _minters[minter] = enabled;\\n        emit Minter(minter, enabled);\\n    }\\n\\n    /// @notice total width of the map\\n    /// @return width\\n    function width() external pure returns (uint256) {\\n        return GRID_SIZE;\\n    }\\n\\n    /// @notice total height of the map\\n    /// @return height\\n    function height() external pure returns (uint256) {\\n        return GRID_SIZE;\\n    }\\n\\n    /// @notice x coordinate of Land token\\n    /// @param id tokenId\\n    /// @return the x coordinates\\n    function getX(uint256 id) external pure returns (uint256) {\\n        return _getX(id);\\n    }\\n\\n    /// @notice y coordinate of Land token\\n    /// @param id tokenId\\n    /// @return the y coordinates\\n    function getY(uint256 id) external pure returns (uint256) {\\n        return _getY(id);\\n    }\\n\\n    /// @notice check whether address `who` is given minter rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has minter rights.\\n    function isMinter(address who) public view returns (bool) {\\n        return _minters[who];\\n    }\\n\\n    /// @notice checks if Land has been minted or not\\n    /// @param size size of the quad\\n    /// @param x x coordinate of the quad\\n    /// @param y y coordinate of the quad\\n    /// @return bool for if Land has been minted or not\\n    function exists(\\n        uint256 size,\\n        uint256 x,\\n        uint256 y\\n    ) public view returns (bool) {\\n        _isValidQuad(size, x, y);\\n        return _ownerOfQuad(size, x, y) != address(0);\\n    }\\n\\n    function _isValidQuad(uint256 size, uint256 x, uint256 y) internal pure {\\n        require(size == 1 || size == 3 || size == 6 || size == 12 || size == 24, \\\"Invalid size\\\");\\n        require(x % size == 0, \\\"Invalid x coordinate\\\");\\n        require(y % size == 0, \\\"Invalid y coordinate\\\");\\n        require(x <= GRID_SIZE - size, \\\"x out of bounds\\\");\\n        require(y <= GRID_SIZE - size, \\\"y out of bounds\\\");\\n    }\\n\\n    /**\\n     * @dev checks if the child quads in the parent quad (size, x, y) are owned by msg.sender.\\n     * It recursively checks child quad of every size(exculding Lands of 1x1 size) are minted or not.\\n     * Quad which are minted are pushed into quadMinted to also check if every Land of size 1x1 in the parent quad is minted or not.\\n     * While checking if the every child Quad and Land is minted it also checks and clear the owner for quads which are minted.\\n     * Finally it checks if the new owner if is a contract can handle ERC721 tokens or not and transfers the parent quad to new owner.\\n     * @param to The address to which the ownership of the quad will be transferred\\n     * @param size The size of the quad being minted and transfered\\n     * @param x The x-coordinate of the top-left corner of the quad being minted.\\n     * @param y The y-coordinate of the top-left corner of the quad being minted.\\n     * @param data extra data to pass to the transfer\\n    */\\n    function _mintAndTransferQuad(\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes memory data\\n    ) internal {\\n        (uint256 layer, , ) = _getQuadLayer(size);\\n        uint256 quadId = _getQuadId(layer, x, y);\\n\\n        // Length of array is equal to number of 3x3 child quad a 24x24 quad can have. Would be used to push the minted Quads.\\n        Land[] memory quadMinted = new Land[](64);\\n        // index of last minted quad pushed on quadMinted Array\\n        uint256 index;\\n        uint256 numLandMinted;\\n\\n        // if size of the Quad in land struct to be transfered is greater than 3 we check recursivly if the child quads are minted or not.\\n        if (size > 3) {\\n            (index, numLandMinted) = _checkAndClearOwner(\\n                Land({x: x, y: y, size: size}),\\n                quadMinted,\\n                numLandMinted,\\n                index,\\n                size / 2\\n            );\\n        }\\n\\n        // Lopping around the Quad in land struct to generate ids of 1x1 land token and checking if they are owned by msg.sender\\n        {\\n            for (uint256 i = 0; i < size * size; i++) {\\n                uint256 _id = _idInPath(i, size, x, y);\\n                // checking land with token id \\\"_id\\\" is in the quadMinted array.\\n                bool isAlreadyMinted = _isQuadMinted(quadMinted, Land({x: _getX(_id), y: _getY(_id), size: 1}), index);\\n                if (isAlreadyMinted) {\\n                    // if land is in the quadMinted array there just emitting transfer event.\\n                    emit Transfer(msg.sender, to, _id);\\n                } else {\\n                    if (address(uint160(_owners[_id])) == msg.sender) {\\n                        if (_operators[_id] != address(0)) _operators[_id] = address(0);\\n                        numLandMinted += 1;\\n                        emit Transfer(msg.sender, to, _id);\\n                    } else {\\n                        // else is checked if owned by the msg.sender or not. If it is not owned by msg.sender it should not have an owner.\\n                        require(_owners[_id] == 0, \\\"Already minted\\\");\\n\\n                        emit Transfer(address(0), to, _id);\\n                    }\\n                }\\n            }\\n        }\\n\\n        // checking if the new owner \\\"to\\\" is a contract. If yes, checking if it could handle ERC721 tokens.\\n        _checkBatchReceiverAcceptQuadAndClearOwner(quadMinted, index, numLandMinted, to, size, x, y, data);\\n\\n        _owners[quadId] = uint256(to);\\n        _numNFTPerAddress[to] += size * size;\\n        _numNFTPerAddress[msg.sender] -= numLandMinted;\\n    }\\n\\n    /// @param operator sender of the tx\\n    /// @param from owner of the token\\n    /// @param to recipient\\n    /// @param size The size of the new quad\\n    /// @param x The top left x coordinate of the new quad\\n    /// @param y The top left y coordinate of the new quad\\n    /// @param data extra data\\n    function _checkBatchReceiverAcceptQuad(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes memory data\\n    ) internal {\\n        if (to.isContract() && _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER)) {\\n            uint256[] memory ids = new uint256[](size * size);\\n            for (uint256 i = 0; i < size * size; i++) {\\n                ids[i] = _idInPath(i, size, x, y);\\n            }\\n            require(_checkOnERC721BatchReceived(operator, from, to, ids, data), \\\"erc721 batch transfer rejected by to\\\");\\n        }\\n    }\\n\\n    /// @dev checks if the receiver of the quad(size, x, y) is a contact. If yes can it handle ERC721 tokens.\\n    ///      It also clears owner of 1x1 land's owned by msg.sender.\\n    /// @param quadMinted array of lands\\n    /// @param index array size\\n    /// @param numLandMinted number of lands transferred\\n    /// @param to recipient\\n    /// @param size The size of the new quad\\n    /// @param x The top left x coordinate of the new quad\\n    /// @param y The top left y coordinate of the new quad\\n    /// @param data extra data\\n    function _checkBatchReceiverAcceptQuadAndClearOwner(\\n        Land[] memory quadMinted,\\n        uint256 index,\\n        uint256 numLandMinted,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes memory data\\n    ) internal {\\n        // checks if to is a contract and supports ERC721_MANDATORY_RECEIVER interfaces.\\n        // if it doesn't it just clears the owner of 1x1 lands in quad(size, x, y)\\n        if (to.isContract() && _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER)) {\\n            // array to push minted 1x1 land\\n            uint256[] memory idsToTransfer = new uint256[](numLandMinted);\\n            // index of last land pushed in idsToTransfer array\\n            uint256 transferIndex;\\n            // array to push ids to be minted\\n            uint256[] memory idsToMint = new uint256[]((size * size) - numLandMinted);\\n            // index of last land pushed in idsToMint array\\n            uint256 mintIndex;\\n            // iterating over every 1x1 land in the quad to be pushed in the above arrays\\n            for (uint256 i = 0; i < size * size; i++) {\\n                uint256 id = _idInPath(i, size, x, y);\\n\\n                if (_isQuadMinted(quadMinted, Land({x: _getX(id), y: _getY(id), size: 1}), index)) {\\n                    // if land is in the quads already minted it just pushed in to the idsToTransfer array\\n                    idsToTransfer[transferIndex] = id;\\n                    transferIndex++;\\n                } else if (address(uint160(_owners[id])) == msg.sender) {\\n                    _owners[id] = 0;\\n                    idsToTransfer[transferIndex] = id;\\n                    transferIndex++;\\n                } else {\\n                    // else it is not owned by any one and and pushed in teh idsToMint array\\n                    idsToMint[mintIndex] = id;\\n                    mintIndex++;\\n                }\\n            }\\n\\n            // checking if \\\"to\\\" contact can handle ERC721 tokens\\n            require(\\n                _checkOnERC721BatchReceived(msg.sender, address(0), to, idsToMint, data),\\n                \\\"erc721 batch transfer rejected by to\\\"\\n            );\\n            require(\\n                _checkOnERC721BatchReceived(msg.sender, msg.sender, to, idsToTransfer, data),\\n                \\\"erc721 batch transfer rejected by to\\\"\\n            );\\n        } else {\\n            for (uint256 i = 0; i < size * size; i++) {\\n                uint256 id = _idInPath(i, size, x, y);\\n                if (address(uint160(_owners[id])) == msg.sender) _owners[id] = 0;\\n            }\\n        }\\n    }\\n\\n    /// @param from current owner of the quad\\n    /// @param to destination\\n    /// @param size size of the quad\\n    /// @param x The top left x coordinate of the quad\\n    /// @param y The top left y coordinate of the quad\\n    function _transferQuad(\\n        address from,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y\\n    ) internal {\\n        _isValidQuad(size, x, y);\\n        if (size == 1) {\\n            uint256 id1x1 = _getQuadId(LAYER_1x1, x, y);\\n            address owner = _ownerOf(id1x1);\\n            require(owner != address(0), \\\"token does not exist\\\");\\n            require(owner == from, \\\"not owner in _transferQuad\\\");\\n            _owners[id1x1] = uint256(to);\\n        } else {\\n            _regroupQuad(from, to, Land({x: x, y: y, size: size}), true, size / 2);\\n        }\\n        for (uint256 i = 0; i < size * size; i++) {\\n            emit Transfer(from, to, _idInPath(i, size, x, y));\\n        }\\n    }\\n\\n    /// @dev checks if the quad is already minted compared to another quad size\\n    /// @param size size of the quad\\n    /// @param x The top left x coordinate of the quad\\n    /// @param y The top left y coordinate of the quad\\n    /// @param quadCompareSize size to compare with\\n    function _checkOwner(\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        uint256 quadCompareSize\\n    ) internal view {\\n        (uint256 layer, , ) = _getQuadLayer(quadCompareSize);\\n\\n        if (size <= quadCompareSize) {\\n            // when the size of the quad is smaller than the quadCompareSize(size to be compared with),\\n            // then it is checked if the bigger quad which encapsulates the quad to be minted\\n            // of with size equals the quadCompareSize has been minted or not\\n            require(\\n                _owners[\\n                    _getQuadId(layer, (x / quadCompareSize) * quadCompareSize, (y / quadCompareSize) * quadCompareSize)\\n                ] == 0,\\n                \\\"Already minted\\\"\\n            );\\n        } else {\\n            // when the size is bigger than the quadCompare size the owner of all the smaller quads with size\\n            // quadCompare size in the quad to be minted are checked if they are minted or not\\n            uint256 toX = x + size;\\n            uint256 toY = y + size;\\n            for (uint256 xi = x; xi < toX; xi += quadCompareSize) {\\n                for (uint256 yi = y; yi < toY; yi += quadCompareSize) {\\n                    require(_owners[_getQuadId(layer, xi, yi)] == 0, \\\"Already minted\\\");\\n                }\\n            }\\n        }\\n\\n        quadCompareSize = quadCompareSize / 2;\\n        if (quadCompareSize >= 3) _checkOwner(size, x, y, quadCompareSize);\\n    }\\n\\n    /// @dev checks the owner of land of token id 'id' to be 'from' and clears it\\n    /// @param from owner of the token\\n    /// @param tokenId token id\\n    /// @return if the address is the owner of the token\\n    function _checkAndClearLandOwner(address from, uint256 tokenId) internal returns (bool) {\\n        uint256 currentOwner = _owners[tokenId];\\n        if (currentOwner != 0) {\\n            require(address(currentOwner) == from, \\\"not owner\\\");\\n            _owners[tokenId] = 0;\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /** @dev recursivly checks if the child quads are minted in land and push them to the quadMinted array.\\n     * if a child quad is minted in land such quads child quads will be skipped such that there is no\\n     * overlapping in quads which are minted. it clears the minted child quads owners.\\n     * @param land the stuct which has the size x and y co-ordinate of Quad to be checked\\n     * @param quadMinted array in which the minted child quad would be pushed\\n     * @param numLandMinted number of lands transferred\\n     * @param index index of last element of quadMinted array\\n     * @param quadCompareSize the size of the child quads to be checked.\\n     * @return the index of last quad pushed in quadMinted array and the total land already minted\\n     * @return the number of lands minted\\n     */\\n    function _checkAndClearOwner(\\n        Land memory land,\\n        Land[] memory quadMinted,\\n        uint256 numLandMinted,\\n        uint256 index,\\n        uint256 quadCompareSize\\n    ) internal returns (uint256, uint256) {\\n        (uint256 layer, , ) = _getQuadLayer(quadCompareSize);\\n        uint256 toX = land.x + land.size;\\n        uint256 toY = land.y + land.size;\\n\\n        //Lopping around the Quad in land struct to check if the child quad are minted or not\\n        for (uint256 xi = land.x; xi < toX; xi += quadCompareSize) {\\n            for (uint256 yi = land.y; yi < toY; yi += quadCompareSize) {\\n                //checking if the child Quad is minted or not. i.e Checks if the quad is in the quadMinted array.\\n                bool isQuadChecked = _isQuadMinted(quadMinted, Land({x: xi, y: yi, size: quadCompareSize}), index);\\n                // if child quad is not already in the quadMinted array.\\n                if (!isQuadChecked) {\\n                    uint256 id = _getQuadId(layer, xi, yi);\\n                    address owner = address(uint160(_owners[id]));\\n                    // owner of the child quad is checked to be owned by msg.sender else should not be owned by anyone.\\n                    if (owner == msg.sender) {\\n                        // if child quad is minted it would be pushed in quadMinted array.\\n                        quadMinted[index] = Land({x: xi, y: yi, size: quadCompareSize});\\n                        // index of quadMinted is increased\\n                        index++;\\n                        // total land minted is increase by the number if land of 1x1 in child quad\\n                        numLandMinted += quadCompareSize * quadCompareSize;\\n                        //owner is cleared\\n                        _owners[id] = 0;\\n                    } else {\\n                        require(owner == address(0), \\\"Already minted\\\");\\n                    }\\n                }\\n            }\\n        }\\n\\n        // size of the child quad is set to be the next smaller child quad size (12 => 6 => 3)\\n        quadCompareSize = quadCompareSize / 2;\\n        // if child quad size is greater than 3 _checkAndClearOwner is checked for new child quads in the  quad in land struct.\\n        if (quadCompareSize >= 3)\\n            (index, numLandMinted) = _checkAndClearOwner(land, quadMinted, numLandMinted, index, quadCompareSize);\\n        return (index, numLandMinted);\\n    }\\n\\n    /// @dev checks if the Land's child quads are owned by the from address and clears all the previous owners\\n    /// if all the child quads are not owned by the \\\"from\\\" address then the owner of parent quad to the land\\n    /// is checked if owned by the \\\"from\\\" address. If from is the owner then land owner is set to \\\"to\\\" address\\n    /// @param from address of the previous owner\\n    /// @param to address of the new owner\\n    /// @param land the quad to be regrouped and transferred\\n    /// @param set for setting the new owner\\n    /// @param childQuadSize  size of the child quad to be checked for owner in the regrouping\\n    function _regroupQuad(\\n        address from,\\n        address to,\\n        Land memory land,\\n        bool set,\\n        uint256 childQuadSize\\n    ) internal returns (bool) {\\n        (uint256 layer, , uint256 childLayer) = _getQuadLayer(land.size);\\n        uint256 quadId = _getQuadId(layer, land.x, land.y);\\n        bool ownerOfAll = true;\\n\\n        {\\n            // double for loop iterates and checks owner of all the smaller quads in land\\n            for (uint256 xi = land.x; xi < land.x + land.size; xi += childQuadSize) {\\n                for (uint256 yi = land.y; yi < land.y + land.size; yi += childQuadSize) {\\n                    uint256 ownerChild;\\n                    bool ownAllIndividual;\\n                    if (childQuadSize < 3) {\\n                        // case when the smaller quad is 1x1,\\n                        ownAllIndividual = _checkAndClearLandOwner(from, _getQuadId(LAYER_1x1, xi, yi)) && ownerOfAll;\\n                    } else {\\n                        // recursively calling the _regroupQuad function to check the owner of child quads.\\n                        ownAllIndividual = _regroupQuad(\\n                            from,\\n                            to,\\n                            Land({x: xi, y: yi, size: childQuadSize}),\\n                            false,\\n                            childQuadSize / 2\\n                        );\\n                        uint256 idChild = _getQuadId(childLayer, xi, yi);\\n                        ownerChild = _owners[idChild];\\n                        if (ownerChild != 0) {\\n                            if (!ownAllIndividual) {\\n                                // checking the owner of child quad\\n                                require(ownerChild == uint256(from), \\\"not owner of child Quad\\\");\\n                            }\\n                            // clearing owner of child quad\\n                            _owners[idChild] = 0;\\n                        }\\n                    }\\n                    // ownerOfAll should be true if \\\"from\\\" is owner of all the child quads iterated over\\n                    ownerOfAll = (ownAllIndividual || ownerChild != 0) && ownerOfAll;\\n                }\\n            }\\n        }\\n\\n        // if set is true it check if the \\\"from\\\" is owner of all else checks for the owner of parent quad is\\n        // owned by \\\"from\\\" and sets the owner for the id of land to \\\"to\\\" address.\\n        if (set) {\\n            if (!ownerOfAll) {\\n                require(_ownerOfQuad(land.size, land.x, land.y) == from, \\\"not owner of all sub quads nor parent quads\\\");\\n            }\\n            _owners[quadId] = uint256(to);\\n            return true;\\n        }\\n\\n        return ownerOfAll;\\n    }\\n\\n    /// @notice Goes through every token id of a quad id\\n    /// @param i ith token of the quad\\n    /// @param size size of the quad\\n    /// @param x The top left x coordinate of the quad\\n    /// @param y The top left y coordinate of the quad\\n    /// @return the \\\"ith\\\" token id of the quad\\n    function _idInPath(\\n        uint256 i,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (uint256) {\\n        uint256 row = i / size;\\n        if (row % 2 == 0) {\\n            // allow ids to follow a path in a quad\\n            return _getQuadId(LAYER_1x1, (x + (i % size)), (y + row));\\n        } else {\\n            return _getQuadId(LAYER_1x1, (x + size) - (1 + (i % size)), (y + row));\\n        }\\n    }\\n\\n    /// @param mintedLand array of lands\\n    /// @param quad quad to check\\n    /// @param index size of the array\\n    /// @return is the quad minted\\n    function _isQuadMinted(\\n        Land[] memory mintedLand,\\n        Land memory quad,\\n        uint256 index\\n    ) internal pure returns (bool) {\\n        for (uint256 i = 0; i < index; i++) {\\n            Land memory land = mintedLand[i];\\n            if (\\n                land.size > quad.size &&\\n                quad.x >= land.x &&\\n                quad.x < land.x + land.size &&\\n                quad.y >= land.y &&\\n                quad.y < land.y + land.size\\n            ) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @param id token id\\n    /// @return the x coordinate\\n    function _getX(uint256 id) internal pure returns (uint256) {\\n        return (id & ~LAYER) % GRID_SIZE;\\n    }\\n\\n    /// @param id token id\\n    /// @return the y coordinate\\n    function _getY(uint256 id) internal pure returns (uint256) {\\n        return (id & ~LAYER) / GRID_SIZE;\\n    }\\n\\n    /// @param size of the quad\\n    /// @return layer the layer associated to that quad size\\n    /// @return parentSize size of the parent quad\\n    /// @return childLayer layer of the child quad size\\n    function _getQuadLayer(uint256 size)\\n        internal\\n        pure\\n        returns (\\n            uint256 layer,\\n            uint256 parentSize,\\n            uint256 childLayer\\n        )\\n    {\\n        if (size == 1) {\\n            layer = LAYER_1x1;\\n            parentSize = 3;\\n        } else if (size == 3) {\\n            layer = LAYER_3x3;\\n            parentSize = 6;\\n        } else if (size == 6) {\\n            layer = LAYER_6x6;\\n            parentSize = 12;\\n            childLayer = LAYER_3x3;\\n        } else if (size == 12) {\\n            layer = LAYER_12x12;\\n            parentSize = 24;\\n            childLayer = LAYER_6x6;\\n        } else if (size == 24) {\\n            layer = LAYER_24x24;\\n            childLayer = LAYER_12x12;\\n        } else {\\n            require(false, \\\"Invalid size\\\");\\n        }\\n    }\\n\\n    /// @param layer of the quad size\\n    /// @param x coordinate of the quad\\n    /// @param y coordinate of the quad\\n    /// @return the quad id\\n    function _getQuadId(\\n        uint256 layer,\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (uint256) {\\n        return layer + x + y * GRID_SIZE;\\n    }\\n\\n    /// @param size of the quad\\n    /// @param x coordinate of the quad\\n    /// @param y coordinate of the quad\\n    /// @return address of the owner of the quad\\n    function _ownerOfQuad(\\n        uint256 size,\\n        uint256 x,\\n        uint256 y\\n    ) internal view returns (address) {\\n        (uint256 layer, uint256 parentSize, ) = _getQuadLayer(size);\\n        address owner = address(_owners[_getQuadId(layer, (x / size) * size, (y / size) * size)]);\\n        if (owner != address(0)) {\\n            return owner;\\n        } else if (size < 24) {\\n            return _ownerOfQuad(parentSize, x, y);\\n        }\\n        return address(0);\\n    }\\n\\n    /// @param id quad id\\n    /// @return size of the quad\\n    /// @return x coordinate\\n    /// @return y coordinate\\n    function _getQuadById(uint256 id)\\n        internal\\n        pure\\n        returns (\\n            uint256 size,\\n            uint256 x,\\n            uint256 y\\n        )\\n    {\\n        x = _getX(id);\\n        y = _getY(id);\\n        uint256 layer = id & LAYER;\\n        if (layer == LAYER_1x1) {\\n            size = 1;\\n        } else if (layer == LAYER_3x3) {\\n            size = 3;\\n        } else if (layer == LAYER_6x6) {\\n            size = 6;\\n        } else if (layer == LAYER_12x12) {\\n            size = 12;\\n        } else if (layer == LAYER_24x24) {\\n            size = 24;\\n        } else {\\n            require(false, \\\"Invalid token id\\\");\\n        }\\n    }\\n\\n    /// @param id quad id\\n    /// @return address of the owner\\n    function _ownerOf(uint256 id) internal view returns (address) {\\n        require(id & LAYER == 0, \\\"Invalid token id\\\");\\n        (uint256 size, uint256 x, uint256 y) = _getQuadById(id);\\n        require(x % size == 0, \\\"x coordinate: Invalid token id\\\");\\n        require(y % size == 0, \\\"y coordinate: Invalid token id\\\");\\n        return _ownerOfQuad(size, x, y);\\n    }\\n\\n    /// @param id token id\\n    /// @return owner owner of the token\\n    /// @return operatorEnabled is operator enabled\\n    function _ownerAndOperatorEnabledOf(uint256 id) internal view returns (address owner, bool operatorEnabled) {\\n        require(id & LAYER == 0, \\\"Invalid token id\\\");\\n        uint256 x = _getX(id);\\n        uint256 y = _getY(id);\\n        uint256 owner1x1 = _owners[id];\\n\\n        if (owner1x1 != 0) {\\n            owner = address(owner1x1);\\n            operatorEnabled = (owner1x1 / 2**255) == 1;\\n        } else {\\n            owner = _ownerOfQuad(3, (x * 3) / 3, (y * 3) / 3);\\n            operatorEnabled = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0b9fb7d2d2be1a32fbe1b81dc2b18d45eea8b976c949d91a2f18e3c6e6cd92d\"},\"src/solc_0.5/LandV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable no-empty-blocks */\\npragma solidity 0.5.9;\\n\\nimport {LandBaseTokenV3} from \\\"./Land/erc721/LandBaseTokenV3.sol\\\";\\nimport {OperatorFiltererUpgradeable, IOperatorFilterRegistry} from \\\"./OperatorFilterer/contracts/upgradeable/OperatorFiltererUpgradeable.sol\\\";\\n\\n/**\\n * @title LandV3\\n * @author The Sandbox\\n * @notice LAND contract\\n * @dev LAND contract implements ERC721, quad and marketplace filtering functionalities\\n */\\ncontract LandV3 is LandBaseTokenV3, OperatorFiltererUpgradeable {\\n    event OperatorRegistrySet(address indexed registry);\\n\\n    /**\\n     * @notice Return the name of the token contract\\n     * @return The name of the token contract\\n     */\\n    function name() external pure returns (string memory) {\\n        return \\\"Sandbox's LANDs\\\";\\n    }\\n\\n    /**\\n     * @notice Return the symbol of the token contract\\n     * @return The symbol of the token contract\\n     */\\n    function symbol() external pure returns (string memory) {\\n        return \\\"LAND\\\";\\n    }\\n\\n    // solium-disable-next-line security/no-assign-params\\n    function uint2str(uint256 _i) internal pure returns (string memory) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len - 1;\\n        while (_i != 0) {\\n            bstr[k--] = byte(uint8(48 + (_i % 10)));\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    /**\\n     * @notice Return the URI of a specific token\\n     * @param id The id of the token\\n     * @return The URI of the token\\n     */\\n    function tokenURI(uint256 id) public view returns (string memory) {\\n        require(_ownerOf(id) != address(0), \\\"LandV3: Id does not exist\\\");\\n        return string(abi.encodePacked(\\\"https://api.sandbox.game/lands/\\\", uint2str(id), \\\"/metadata.json\\\"));\\n    }\\n\\n    /**\\n     * @notice Check if the contract supports an interface\\n     * 0x01ffc9a7 is ERC-165\\n     * 0x80ac58cd is ERC-721\\n     * 0x5b5e139f is ERC-721 metadata\\n     * @param id The id of the interface\\n     * @return True if the interface is supported\\n     */\\n    function supportsInterface(bytes4 id) external pure returns (bool) {\\n        return id == 0x01ffc9a7 || id == 0x80ac58cd || id == 0x5b5e139f;\\n    }\\n\\n    /// @notice This function is used to register Land contract on the Operator Filterer Registry of Opensea.can only be called by admin.\\n    /// @dev used to register contract and subscribe to the subscriptionOrRegistrantToCopy's black list.\\n    /// @param subscriptionOrRegistrantToCopy registration address of the list to subscribe.\\n    /// @param subscribe bool to signify subscription \\\"true\\\"\\\" or to copy the list \\\"false\\\".\\n    function register(address subscriptionOrRegistrantToCopy, bool subscribe) external onlyAdmin {\\n        require(subscriptionOrRegistrantToCopy != address(0), \\\"LandV3: subscription can't be zero address\\\");\\n        _register(subscriptionOrRegistrantToCopy, subscribe);\\n    }\\n\\n    /// @notice sets filter registry address deployed in test\\n    /// @param registry the address of the registry\\n    function setOperatorRegistry(address registry) external onlyAdmin {\\n        operatorFilterRegistry = IOperatorFilterRegistry(registry);\\n        emit OperatorRegistrySet(registry);\\n    }\\n\\n    /**\\n     * @notice Approve an operator to spend tokens on the sender behalf\\n     * @param sender The address giving the approval\\n     * @param operator The address receiving the approval\\n     * @param id The id of the token\\n     */\\n    function approveFor(\\n        address sender,\\n        address operator,\\n        uint256 id\\n    ) public onlyAllowedOperatorApproval(operator) {\\n        super.approveFor(sender, operator, id);\\n    }\\n\\n    /**\\n     * @notice Set the approval for an operator to manage all the tokens of the sender\\n     * @param operator The address receiving the approval\\n     * @param approved The determination of the approval\\n     */\\n    function setApprovalForAll(address operator, bool approved) public onlyAllowedOperatorApproval(operator) {\\n        super.setApprovalForAll(operator, approved);\\n    }\\n\\n    /**\\n     * @notice Set the approval for an operator to manage all the tokens of the sender\\n     * @param sender The address giving the approval\\n     * @param operator The address receiving the approval\\n     * @param approved The determination of the approval\\n     */\\n    function setApprovalForAllFor(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) public onlyAllowedOperatorApproval(operator) {\\n        super.setApprovalForAllFor(sender, operator, approved);\\n    }\\n\\n    /**\\n     * @notice Approve an operator to spend tokens on the sender behalf\\n     * @param operator The address receiving the approval\\n     * @param id The id of the token\\n     */\\n    function approve(address operator, uint256 id) public onlyAllowedOperatorApproval(operator) {\\n        super.approve(operator, id);\\n    }\\n\\n    /**\\n     * @notice Transfer a token between 2 addresses\\n     * @param from The sender of the token\\n     * @param to The recipient of the token\\n     * @param id The id of the token\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public onlyAllowedOperator(from) {\\n        super.transferFrom(from, to, id);\\n    }\\n\\n    /**\\n     * @notice Transfer a token between 2 addresses letting the receiver knows of the transfer\\n     * @param from The sender of the token\\n     * @param to The recipient of the token\\n     * @param id The id of the token\\n     * @param data Additional data\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) public onlyAllowedOperator(from) {\\n        super.safeTransferFrom(from, to, id, data);\\n    }\\n\\n    /**\\n     * @notice Transfer a token between 2 addresses letting the receiver knows of the transfer\\n     * @param from The send of the token\\n     * @param to The recipient of the token\\n     * @param id The id of the token\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) external onlyAllowedOperator(from) {\\n        super.safeTransferFrom(from, to, id, \\\"\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x197a35aee13cfc6168f478fe949236bc134959d51c5fcbfbf4494ec920fddc64\"},\"src/solc_0.5/OperatorFilterer/contracts/upgradeable/OperatorFiltererUpgradeable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.5.9;\\n\\nimport {IOperatorFilterRegistry} from \\\"../../interfaces/IOperatorFilterRegistry.sol\\\";\\nimport {AddressUtils} from \\\"../../../contracts_common/Libraries/AddressUtils.sol\\\";\\n\\n/// @title OperatorFiltererUpgradeable\\n/// @author The Sandbox\\n/// @notice This contract would subscibe or copy or just to the subscription provided or just register to default subscription list\\n/// @dev This contract is the upgradeable version of the OpenSea implementation https://github.com/ProjectOpenSea/operator-filter-registry/blob/main/src/OperatorFilterer.sol and adapted to the 0.5.9 solidity version\\ncontract OperatorFiltererUpgradeable {\\n    using AddressUtils for address;\\n    IOperatorFilterRegistry public operatorFilterRegistry;\\n\\n    event ContractRegistered(address indexed subscriptionOrRegistrant, bool subscribe);\\n\\n    /**\\n     * @notice Register this contract into the registry\\n     * @param subscriptionOrRegistrantToCopy address to subscribe or copy entries from\\n     * @param subscribe should it subscribe\\n     */\\n    function _register(address subscriptionOrRegistrantToCopy, bool subscribe) internal {\\n        // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\\n        // will not revert, but the contract will need to be registered with the registry once it is deployed in\\n        // order for the modifier to filter addresses.\\n        if (address(operatorFilterRegistry).isContract()) {\\n            if (!operatorFilterRegistry.isRegistered(address(this))) {\\n                if (subscribe) {\\n                    operatorFilterRegistry.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\\n                } else {\\n                    if (subscriptionOrRegistrantToCopy != address(0)) {\\n                        operatorFilterRegistry.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\\n                    } else {\\n                        operatorFilterRegistry.register(address(this));\\n                    }\\n                }\\n            }\\n        }\\n        emit ContractRegistered(subscriptionOrRegistrantToCopy, subscribe);\\n    }\\n\\n    modifier onlyAllowedOperator(address from) {\\n        // Check registry code length to facilitate testing in environments without a deployed registry.\\n        if (address(operatorFilterRegistry).isContract()) {\\n            // Allow spending tokens from addresses with balance\\n            // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\\n            // from an EOA.\\n            if (from == msg.sender) {\\n                _;\\n                return;\\n            }\\n            if (!operatorFilterRegistry.isOperatorAllowed(address(this), msg.sender)) {\\n                revert(\\\"Operator Not Allowed\\\");\\n            }\\n        }\\n        _;\\n    }\\n\\n    modifier onlyAllowedOperatorApproval(address operator) {\\n        // Check registry code length to facilitate testing in environments without a deployed registry.\\n        if (address(operatorFilterRegistry).isContract()) {\\n            if (!operatorFilterRegistry.isOperatorAllowed(address(this), operator)) {\\n                revert(\\\"Operator Not Allowed\\\");\\n            }\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x99de28325e89069ad4e3bdfb5d93943e314dcb0d700ee46ce9a0449a75d54f63\"},\"src/solc_0.5/OperatorFilterer/interfaces/IOperatorFilterRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.5.9;\\n\\n/**\\n * @title IOperatorFilterRegistry\\n * @author OpenSea\\n * @notice Interface of the operator filter registry\\n * @dev This interface comes from OpenSea https://github.com/ProjectOpenSea/operator-filter-registry/blob/main/src/IOperatorFilterRegistry.sol and adapted to the 0.5.9 solidity version\\n */\\ninterface IOperatorFilterRegistry {\\n    /**\\n     * @notice Check if the operator is allowed for the given registrant\\n     * @param registrant address of the registrant\\n     * @param operator operator address to check\\n     * @return is the operator allowed\\n     */\\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\\n\\n    /**\\n     * @notice Register a new address\\n     * @param registrant address to register\\n     */\\n    function register(address registrant) external;\\n\\n    /**\\n     * @notice Register a new address & subscribe to an address\\n     * @param registrant address of the registrant\\n     * @param subscription address where the registrant is subscribed to\\n     */\\n    function registerAndSubscribe(address registrant, address subscription) external;\\n\\n    /**\\n     * @notice Register and copy entries of another registrant\\n     * @param registrant address of the registrant\\n     * @param registrantToCopy address to copy from\\n     */\\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\\n\\n    /**\\n     * @notice update the operator for a registrant\\n     * @param registrant address of the registrant\\n     * @param operator operator to be updated\\n     * @param filtered is it filtered\\n     */\\n    function updateOperator(\\n        address registrant,\\n        address operator,\\n        bool filtered\\n    ) external;\\n\\n    /**\\n     * @notice Update operators for a registrant\\n     * @param registrant address of the registrant\\n     * @param operators addresses of the operators\\n     * @param filtered is it filtered\\n     */\\n    function updateOperators(\\n        address registrant,\\n        address[] calldata operators,\\n        bool filtered\\n    ) external;\\n\\n    /**\\n     * @notice Update code hash\\n     * @param registrant address of the registrant\\n     * @param codehash code hash\\n     * @param filtered is it filtered\\n     */\\n    function updateCodeHash(\\n        address registrant,\\n        bytes32 codehash,\\n        bool filtered\\n    ) external;\\n\\n    /**\\n     * @notice Update code hashes\\n     * @param registrant address of the registrant\\n     * @param codeHashes code hashes\\n     * @param filtered is it filtered\\n     */\\n    function updateCodeHashes(\\n        address registrant,\\n        bytes32[] calldata codeHashes,\\n        bool filtered\\n    ) external;\\n\\n    /**\\n     * @notice Subscribe a registrant\\n     * @param registrant address of the registrant\\n     * @param registrantToSubscribe address to subscribe with\\n     */\\n    function subscribe(address registrant, address registrantToSubscribe) external;\\n\\n    /**\\n     * @notice Unsubscribe a registrant\\n     * @param registrant address of the registrant\\n     * @param copyExistingEntries copy existing entries\\n     */\\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\\n\\n    /**\\n     * @notice Get the subscription of an address\\n     * @param addr address to check\\n     * @return the registrant address\\n     */\\n    function subscriptionOf(address addr) external returns (address registrant);\\n\\n    /**\\n     * @notice Get the subscribers of the registrant\\n     * @param registrant address of the registrant\\n     * @return the subscribers addresses\\n     */\\n    function subscribers(address registrant) external returns (address[] memory);\\n\\n    /**\\n     * @notice Get a specific subscriber\\n     * @param registrant address of the registrant\\n     * @param index index to check\\n     * @return the ith subscriber of the registrant\\n     */\\n    function subscriberAt(address registrant, uint256 index) external returns (address);\\n\\n    /**\\n     * @notice Copy the entries of a registrant\\n     * @param registrant address of the registrant\\n     * @param registrantToCopy address to copy\\n     */\\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\\n\\n    /**\\n     * @notice Is a registrant filtered\\n     * @param registrant address of the registrant\\n     * @param operator operator address to check\\n     * @return is it filtered\\n     */\\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\\n\\n    /**\\n     * @notice Is the code hash of an operator filtered\\n     * @param registrant address of the registrant\\n     * @param operatorWithCode operator address to check\\n     * @return is it filtered\\n     */\\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\\n\\n    /**\\n     * @notice Is the code hash filtered\\n     * @param registrant address of the registrant\\n     * @param codeHash code hash\\n     * @return is it filtered\\n     */\\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\\n\\n    /**\\n     * @notice Get the filtered operators\\n     * @param addr address to check\\n     * @return filtered operators\\n     */\\n    function filteredOperators(address addr) external returns (address[] memory);\\n\\n    /**\\n     * @notice Get the filtered code hashes\\n     * @param addr address to check\\n     * @return filtered code hashes\\n     */\\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\\n\\n    /**\\n     * @notice Get a specific operator\\n     * @param registrant address of the registrant\\n     * @param index index to check\\n     * @return address of the operator\\n     */\\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\\n\\n    /**\\n     * @notice Get the ith filtered code hash\\n     * @param registrant address of the registrant\\n     * @param index index to check\\n     * @return the code hash\\n     */\\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\\n\\n    /**\\n     * @notice Is the address registered\\n     * @param addr address to check\\n     * @return is it registered\\n     */\\n    function isRegistered(address addr) external returns (bool);\\n\\n    /**\\n     * @notice Get the code hash for this address\\n     * @param addr address to check\\n     * @return the code hash\\n     */\\n    function codeHashOf(address addr) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6c561fe9bb5203df2af2f8332737946ff1df8314b4e992603617db97754bbaf7\"},\"src/solc_0.5/contracts_common/BaseWithStorage/AdminV2.sol\":{\"content\":\"pragma solidity 0.5.9;\\n\\ncontract AdminV2 {\\n\\n    address internal _admin;\\n\\n    event AdminChanged(address oldAdmin, address newAdmin);\\n\\n    /// @notice gives the current administrator of this contract.\\n    /// @return the current administrator of this contract.\\n    function getAdmin() external view returns (address) {\\n        return _admin;\\n    }\\n\\n    /// @notice change the administrator to be `newAdmin`.\\n    /// @param newAdmin address of the new administrator.\\n    function changeAdmin(address newAdmin) external {\\n        address admin = _admin;\\n        require(msg.sender == admin, \\\"only admin can change admin\\\");\\n        require(newAdmin != admin, \\\"it can be only changed to a new admin\\\");\\n        emit AdminChanged(admin, newAdmin);\\n        _admin = newAdmin;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require (msg.sender == _admin, \\\"only admin allowed\\\");\\n        _;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xb209accdc816ab4eadc81d6b14e5b218353c7c0e90866c59625f69ee6ba74575\"},\"src/solc_0.5/contracts_common/BaseWithStorage/MetaTransactionReceiverV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.5.9;\\n\\nimport {AdminV2} from \\\"./AdminV2.sol\\\";\\nimport {AddressUtils} from \\\"../../contracts_common/Libraries/AddressUtils.sol\\\";\\n\\n/// @title MetaTransactionReceiverV2\\n/// @author The Sandbox\\n/// @notice Implements meta-transactions\\n/// @dev This contract permits to give an address the capacity to perform meta-transactions on behalf of any address\\ncontract MetaTransactionReceiverV2 is AdminV2 {\\n    using AddressUtils for address;\\n\\n    mapping(address => bool) internal _metaTransactionContracts;\\n    event MetaTransactionProcessor(address indexed metaTransactionProcessor, bool enabled);\\n\\n    /// @notice Enable or disable the ability of `metaTransactionProcessor` to perform meta-tx (metaTransactionProcessor rights).\\n    /// @param metaTransactionProcessor address that will be given/removed metaTransactionProcessor rights.\\n    /// @param enabled set whether the metaTransactionProcessor is enabled or disabled.\\n    function setMetaTransactionProcessor(address metaTransactionProcessor, bool enabled) public onlyAdmin {\\n        require(\\n            metaTransactionProcessor.isContract(),\\n            \\\"only contracts can be meta transaction processor\\\"\\n        );\\n        _setMetaTransactionProcessor(metaTransactionProcessor, enabled);\\n    }\\n\\n    /// @param metaTransactionProcessor address of the operator\\n    /// @param enabled is it enabled\\n    function _setMetaTransactionProcessor(address metaTransactionProcessor, bool enabled) internal {\\n        _metaTransactionContracts[metaTransactionProcessor] = enabled;\\n        emit MetaTransactionProcessor(metaTransactionProcessor, enabled);\\n    }\\n\\n    /// @notice check whether address `who` is given meta-transaction execution rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has meta-transaction execution rights.\\n    function isMetaTransactionProcessor(address who) external view returns(bool) {\\n        return _metaTransactionContracts[who];\\n    }\\n}\\n\",\"keccak256\":\"0x9a163be573bfa151a263703af827bc27ca8fbb25f1d3c386109675a4771ac189\"},\"src/solc_0.5/contracts_common/BaseWithStorage/SuperOperatorsV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.5.9;\\n\\nimport {AdminV2} from \\\"./AdminV2.sol\\\";\\n\\n/// @title SuperOperatorsV2\\n/// @author The Sandbox\\n/// @notice Implements a super operator role on the contract\\n/// @dev The contract inheriting SuperOperatorsV2 is able to use a super operator role\\ncontract SuperOperatorsV2 is AdminV2 {\\n\\n    mapping(address => bool) internal _superOperators;\\n\\n    event SuperOperator(address indexed superOperator, bool enabled);\\n\\n    /// @notice Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights).\\n    /// @param superOperator address that will be given/removed superOperator right.\\n    /// @param enabled set whether the superOperator is enabled or disabled.\\n    function setSuperOperator(address superOperator, bool enabled) external onlyAdmin {\\n        require(\\n            superOperator != address(0),\\n            \\\"address 0 is not allowed as super operator\\\"\\n        );\\n        require(\\n            enabled != _superOperators[superOperator],\\n            \\\"the status should be different than the current one\\\"\\n        );\\n        _superOperators[superOperator] = enabled;\\n        emit SuperOperator(superOperator, enabled);\\n    }\\n\\n    /// @notice check whether address `who` is given superOperator rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has superOperator rights.\\n    function isSuperOperator(address who) public view returns (bool) {\\n        return _superOperators[who];\\n    }\\n}\\n\",\"keccak256\":\"0x3992a8c3dab57551e760ca3145fe7e8b91a85ac7f75995f12e8d010e983e7b16\"},\"src/solc_0.5/contracts_common/Interfaces/ERC721Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.5.9;\\n\\n/**\\n * @title ERC721 Non-Fungible Token Standard basic interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface ERC721Events {\\n    event Transfer(\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 indexed _tokenId\\n    );\\n    event Approval(\\n        address indexed _owner,\\n        address indexed _approved,\\n        uint256 indexed _tokenId\\n    );\\n    event ApprovalForAll(\\n        address indexed _owner,\\n        address indexed _operator,\\n        bool _approved\\n    );\\n}\\n\",\"keccak256\":\"0xd3b7c555cecf947ff0ad9395f995ec7f3ecf9300e1c84b47e382f680018caebe\"},\"src/solc_0.5/contracts_common/Interfaces/ERC721MandatoryTokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.5.9;\\n\\n/**\\n * @title ERC721MandatoryTokenReceiver\\n * @author The Sandbox\\n * @notice Interface for any contract that wants to support safeBatchTransfers\\n * from ERC721 asset contracts.\\n * @dev The ERC-165 identifier for this interface is 0x5e8bf644.\\n */\\ninterface ERC721MandatoryTokenReceiver {\\n    /**\\n     * @notice Whenever tokens are transferred to this contract via {IERC721-safeBatchTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     * @param operator sender\\n     * @param from owner of the tokens\\n     * @param ids token ids\\n     * @param data extra data\\n     * @return 0x4b808c46 if the transfer is a success\\n     */\\n    function onERC721BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external returns (bytes4); // needs to return 0x4b808c46\\n\\n    /**\\n     * @notice Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     * @param operator sender\\n     * @param from owner of the token\\n     * @param tokenId token id\\n     * @param data extra data\\n     * @return 0x150b7a02 if the transfer is a success\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4); // needs to return 0x150b7a02\\n}\\n\",\"keccak256\":\"0xe2e343784b6600770da228caab069fd5f2d0c18c58dfee42abafcbf63b9fc159\"},\"src/solc_0.5/contracts_common/Interfaces/ERC721TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-fixed\\npragma solidity 0.5.9;\\n\\n/**\\n * @title ERC721TokenReceiver\\n * @author The Sandbox\\n * @notice Handle the receipt of an NFT\\n */\\ninterface ERC721TokenReceiver {\\n    /**\\n     * @notice Handle the receipt of an NFT\\n     * @dev The ERC721 smart contract calls this function on the recipient\\n     * after a `transfer`. This function MAY throw to revert and reject the\\n     * transfer. Return of other than the magic value MUST result in the\\n     * transaction being reverted.\\n     * Note: the contract address is always the message sender.\\n     * @param operator The address which called `safeTransferFrom` function\\n     * @param from The address which previously owned the token\\n     * @param tokenId The NFT identifier which is being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))` unless throwing\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xf409294dc72ef440bf7619f2be75f1e674e253186addbcfe99d0699b12c465aa\"},\"src/solc_0.5/contracts_common/Libraries/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.5.9;\\n\\n/**\\n * @title AddressUtils\\n * @author The Sandbox\\n * @notice Helper to manipulate addresses\\n */\\nlibrary AddressUtils {\\n\\n    /**\\n     * @dev Cast the address to be payable\\n     * @param _address target address\\n     * @return a payable address\\n     */\\n    function toPayable(address _address) internal pure returns (address payable) {\\n        return address(uint160(_address));\\n    }\\n\\n    /**\\n     * @dev Check if the address is a contract\\n     * @param addr target address\\n     * @return is it a contract\\n     */\\n    function isContract(address addr) internal view returns (bool) {\\n        // for accounts without code, i.e. `keccak256('')`:\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n\\n        bytes32 codehash;\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(addr)\\n        }\\n        return (codehash != 0x0 && codehash != accountHash);\\n    }\\n}\\n\",\"keccak256\":\"0xf2a0c9d986e8c43771847789a7bdf09a2fb96ea27bd0de81a4e94b61f764cd02\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615c7580620000216000396000f3fe608060405234801561001057600080fd5b50600436106102f45760003560e01c80638782676411610191578063ab01b469116100e3578063c87b56dd11610097578063e985e9c511610071578063e985e9c514610c92578063eaa5e06714610cc0578063eeb5a5d114610e3f576102f4565b8063c87b56dd14610c21578063cf456ae714610c3e578063dc5074af14610c6c576102f4565b8063b0ccc31e116100c8578063b0ccc31e14610b36578063b88d4fde14610b3e578063b9b710e914610c04576102f4565b8063ab01b46914610ada578063ac9fe42114610b08576102f4565b8063992924a6116101455780639ededf771161011f5780639ededf7714610418578063a22cb46514610a86578063aa271e1a14610ab4576102f4565b8063992924a614610a155780639d28fb8614610a325780639d786bbc14610a58576102f4565b80638e5cb5f6116101765780638e5cb5f6146109ca5780638f283970146109e757806395d89b4114610a0d576102f4565b806387826764146109765780638a04af6a1461099c576102f4565b806342966c681161024a578063654b748a116101fe57806370a08231116101d857806370a082311461090757806379cc67901461092d578063845a469714610959576102f4565b8063654b748a146108485780636e1e3bbf1461086e5780636e9960c3146108ff576102f4565b80634e6a0f441161022f5780634e6a0f441461077157806355064d85146108025780636352211e1461082b576102f4565b806342966c6814610726578063485cc95514610743576102f4565b806315ddc535116102ac5780632b991746116102865780632b9917461461061e57806338bb305a1461065457806342842e0e146106f0576102f4565b806315ddc5351461043257806323b872dd1461050d57806328cfbd4614610543576102f4565b8063081812fc116102dd578063081812fc146103b1578063095ea7b3146103ea5780630ef2674314610418576102f4565b806301ffc9a7146102f957806306fdde0314610334575b600080fd5b6103206004803603602081101561030f57600080fd5b50356001600160e01b031916610e77565b604080519115158252519081900360200190f35b61033c610f16565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561037657818101518382015260200161035e565b50505050905090810190601f1680156103a35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103ce600480360360208110156103c757600080fd5b5035610f4d565b604080516001600160a01b039092168252519081900360200190f35b6104166004803603604081101561040057600080fd5b506001600160a01b038135169060200135610fec565b005b6104206110de565b60408051918252519081900360200190f35b6104166004803603608081101561044857600080fd5b6001600160a01b03823581169260208101359091169181019060608101604082013564010000000081111561047c57600080fd5b82018360208201111561048e57600080fd5b803590602001918460208302840111640100000000831117156104b057600080fd5b9193909290916020810190356401000000008111156104ce57600080fd5b8201836020820111156104e057600080fd5b8035906020019184600183028401116401000000008311171561050257600080fd5b5090925090506110e4565b6104166004803603606081101561052357600080fd5b506001600160a01b0381358116916020810135909116906040013561115e565b6104166004803603608081101561055957600080fd5b6001600160a01b03823581169260208101359091169181019060608101604082013564010000000081111561058d57600080fd5b82018360208201111561059f57600080fd5b803590602001918460208302840111640100000000831117156105c157600080fd5b9193909290916020810190356401000000008111156105df57600080fd5b8201836020820111156105f157600080fd5b8035906020019184600183028401116401000000008311171561061357600080fd5b509092509050611271565b6104166004803603606081101561063457600080fd5b506001600160a01b038135811691602081013590911690604001356112e6565b610416600480360360c081101561066a57600080fd5b6001600160a01b0382358116926020810135909116916040820135916060810135916080820135919081019060c0810160a08201356401000000008111156106b157600080fd5b8201836020820111156106c357600080fd5b803590602001918460018302840111640100000000831117156106e557600080fd5b5090925090506113d4565b6104166004803603606081101561070657600080fd5b506001600160a01b03813581169160208101359091169060400135611600565b6104166004803603602081101561073c57600080fd5b5035611728565b6104166004803603604081101561075957600080fd5b506001600160a01b038135811691602001351661173e565b610416600480360360a081101561078757600080fd5b6001600160a01b038235169160208101359160408201359160608101359181019060a0810160808201356401000000008111156107c357600080fd5b8201836020820111156107d557600080fd5b803590602001918460018302840111640100000000831117156107f757600080fd5b50909250905061180b565b6103206004803603606081101561081857600080fd5b50803590602081013590604001356119a4565b6103ce6004803603602081101561084157600080fd5b50356119d3565b6103206004803603602081101561085e57600080fd5b50356001600160a01b0316611a3b565b610416600480360360a081101561088457600080fd5b6001600160a01b038235169160208101359160408201359160608101359181019060a0810160808201356401000000008111156108c057600080fd5b8201836020820111156108d257600080fd5b803590602001918460018302840111640100000000831117156108f457600080fd5b509092509050611a59565b6103ce611cbe565b6104206004803603602081101561091d57600080fd5b50356001600160a01b0316611ccd565b6104166004803603604081101561094357600080fd5b506001600160a01b038135169060200135611d46565b6104206004803603602081101561096f57600080fd5b5035611ea5565b6104206004803603602081101561098c57600080fd5b50356001600160a01b0316611eb0565b610416600480360360408110156109b257600080fd5b506001600160a01b0381351690602001351515611ec2565b610420600480360360208110156109e057600080fd5b5035611f7c565b610416600480360360208110156109fd57600080fd5b50356001600160a01b0316611f87565b61033c6120ad565b61042060048036036020811015610a2b57600080fd5b50356120e4565b61041660048036036020811015610a4857600080fd5b50356001600160a01b03166120f6565b61032060048036036040811015610a6e57600080fd5b506001600160a01b03813581169160200135166121ac565b61041660048036036040811015610a9c57600080fd5b506001600160a01b03813516906020013515156121cc565b61032060048036036020811015610aca57600080fd5b50356001600160a01b03166122b9565b61041660048036036040811015610af057600080fd5b506001600160a01b03813516906020013515156122d7565b61041660048036036040811015610b1e57600080fd5b506001600160a01b0381351690602001351515612385565b6103ce6124e7565b61041660048036036080811015610b5457600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135640100000000811115610b8f57600080fd5b820183602082011115610ba157600080fd5b80359060200191846001830284011164010000000083111715610bc357600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506124f6945050505050565b6103ce60048036036020811015610c1a57600080fd5b503561260c565b61033c60048036036020811015610c3757600080fd5b5035612627565b61041660048036036040811015610c5457600080fd5b506001600160a01b0381351690602001351515612790565b61032060048036036020811015610c8257600080fd5b50356001600160a01b03166128f2565b61032060048036036040811015610ca857600080fd5b506001600160a01b0381358116916020013516612910565b610416600480360360c0811015610cd657600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135640100000000811115610d0a57600080fd5b820183602082011115610d1c57600080fd5b80359060200191846020830284011164010000000083111715610d3e57600080fd5b919390929091602081019035640100000000811115610d5c57600080fd5b820183602082011115610d6e57600080fd5b80359060200191846020830284011164010000000083111715610d9057600080fd5b919390929091602081019035640100000000811115610dae57600080fd5b820183602082011115610dc057600080fd5b80359060200191846020830284011164010000000083111715610de257600080fd5b919390929091602081019035640100000000811115610e0057600080fd5b820183602082011115610e1257600080fd5b80359060200191846001830284011164010000000083111715610e3457600080fd5b509092509050612967565b61041660048036036060811015610e5557600080fd5b506001600160a01b038135811691602081013590911690604001351515612d72565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b031983161480610eda57507f80ac58cd000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b80610f0e57507f5b5e139f000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b90505b919050565b60408051808201909152600f81527f53616e64626f782773204c414e44730000000000000000000000000000000000602082015290565b6000806000610f5b84612e60565b90925090506001600160a01b038216610fbb576040805162461bcd60e51b815260206004820152601460248201527f746f6b656e20646f6573206e6f74206578697374000000000000000000000000604482015290519081900360640190fd5b8015610fe1575050506000818152600660205260409020546001600160a01b0316610f11565b600092505050610f11565b603a548290611003906001600160a01b0316612f5c565b156110cf57603a5460408051633185c44d60e21b81523060048201526001600160a01b0384811660248301529151919092169163c6171134916044808301926020929190829003018186803b15801561105b57600080fd5b505afa15801561106f573d6000803e3d6000fd5b505050506040513d602081101561108557600080fd5b50516110cf576040805162461bcd60e51b815260206004820152601460248201527313dc195c985d1bdc88139bdd08105b1b1bddd95960621b604482015290519081900360640190fd5b6110d98383612f98565b505050565b61019890565b611156868686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020601f8a018190048102820181019092528881529250889150879081908401838280828437600092018290525092506130b0915050565b505050505050565b603a548390611175906001600160a01b0316612f5c565b15611260576001600160a01b03811633141561119b576111968484846134f3565b61126b565b603a5460408051633185c44d60e21b815230600482015233602482015290516001600160a01b039092169163c617113491604480820192602092909190829003018186803b1580156111ec57600080fd5b505afa158015611200573d6000803e3d6000fd5b505050506040513d602081101561121657600080fd5b5051611260576040805162461bcd60e51b815260206004820152601460248201527313dc195c985d1bdc88139bdd08105b1b1bddd95960621b604482015290519081900360640190fd5b61126b8484846134f3565b50505050565b611156868686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020601f8a018190048102820181019092528881529250889150879081908401838280828437600092019190915250600192506130b0915050565b603a5482906112fd906001600160a01b0316612f5c565b156113c957603a5460408051633185c44d60e21b81523060048201526001600160a01b0384811660248301529151919092169163c6171134916044808301926020929190829003018186803b15801561135557600080fd5b505afa158015611369573d6000803e3d6000fd5b505050506040513d602081101561137f57600080fd5b50516113c9576040805162461bcd60e51b815260206004820152601460248201527313dc195c985d1bdc88139bdd08105b1b1bddd95960621b604482015290519081900360640190fd5b61126b8484846135b5565b6001600160a01b03871661142f576040805162461bcd60e51b815260206004820152601460248201527f66726f6d206973207a65726f2061646472657373000000000000000000000000604482015290519081900360640190fd5b6001600160a01b03861661148a576040805162461bcd60e51b815260206004820152601a60248201527f63616e27742073656e6420746f207a65726f2061646472657373000000000000604482015290519081900360640190fd5b6000336001600160a01b038916148015906114b457503360009081526002602052604090205460ff165b9050336001600160a01b038916148015906114cd575080155b15611564576001600160a01b038816600090815260056020908152604080832033845290915290205460ff168061151357503360009081526001602052604090205460ff165b611564576040805162461bcd60e51b815260206004820152601e60248201527f6e6f7420617574686f72697a656420746f207472616e73666572517561640000604482015290519081900360640190fd5b611571888888888861374d565b6001600160a01b0380891660009081526003602052604080822080548a800290819003909155928a1682529020805490910190556115f6816115b357336115b5565b885b898989898989898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506138f492505050565b5050505050505050565b603a548390611617906001600160a01b0316612f5c565b1561170d576001600160a01b03811633141561164857611196848484604051806020016040528060008152506139de565b603a5460408051633185c44d60e21b815230600482015233602482015290516001600160a01b039092169163c617113491604480820192602092909190829003018186803b15801561169957600080fd5b505afa1580156116ad573d6000803e3d6000fd5b505050506040513d60208110156116c357600080fd5b505161170d576040805162461bcd60e51b815260206004820152601460248201527313dc195c985d1bdc88139bdd08105b1b1bddd95960621b604482015290519081900360640190fd5b61126b848484604051806020016040528060008152506139de565b61173b3361173583613a79565b83613bd0565b50565b60075460ff16156117805760405162461bcd60e51b815260040180806020018281038252602d8152602001806159e6602d913960400191505060405180910390fd5b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383161790556117b3826001613cab565b6007805460ff1916600117905560008054604080519283526001600160a01b03909116602083015280517f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f9281900390910190a15050565b6001600160a01b038616611866576040805162461bcd60e51b815260206004820152601260248201527f746f206973207a65726f20616464726573730000000000000000000000000000604482015290519081900360640190fd5b61186f336122b9565b6118c0576040805162461bcd60e51b815260206004820152601660248201527f4f6e6c792061206d696e7465722063616e206d696e7400000000000000000000604482015290519081900360640190fd5b6118cb8585856119a4565b151560011415611961576118e2338787878761374d565b33600081815260036020908152604080832080548a8002908190039091556001600160a01b038b1684529281902080549093019092558151601f850182900482028101820190925283825261195c929182918a918a918a918a918a908a90819084018382808284376000920191909152506138f492505050565b611156565b6111568686868686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250613d0b92505050565b60006119b1848484613fd9565b60006119be8585856141c4565b6001600160a01b0316141590505b9392505050565b60006119de82613a79565b90506001600160a01b038116610f11576040805162461bcd60e51b815260206004820152601460248201527f746f6b656e20646f6573206e6f74206578697374000000000000000000000000604482015290519081900360640190fd5b6001600160a01b031660009081526001602052604090205460ff1690565b6001600160a01b038616611ab4576040805162461bcd60e51b815260206004820152601260248201527f746f206973207a65726f20616464726573730000000000000000000000000000604482015290519081900360640190fd5b84611b06576040805162461bcd60e51b815260206004820152601360248201527f73697a652063616e6e6f74206265207a65726f00000000000000000000000000604482015290519081900360640190fd5b611b0f336122b9565b611b60576040805162461bcd60e51b815260206004820152601660248201527f4f6e6c792061206d696e7465722063616e206d696e7400000000000000000000604482015290519081900360640190fd5b611b6b858585613fd9565b6000611b7686614255565b505090506000611b87828787614352565b9050611b96878787601861435c565b60005b878802811015611c47576000611bb1828a8a8a614493565b60008181526004602052604090205490915015611c06576040805162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e481b5a5b9d195960921b604482015290519081900360640190fd5b60405181906001600160a01b038c16906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a450600101611b99565b5060008181526004602090815260408083206001600160a01b038c169081905583526003825280832080548b80020190558051601f87018390048302810183019091528581526115f692339290918c918c918c918c91908c908c90819084018382808284376000920191909152506138f492505050565b6000546001600160a01b031690565b60006001600160a01b038216611d2a576040805162461bcd60e51b815260206004820152601560248201527f6f776e6572206973207a65726f20616464726573730000000000000000000000604482015290519081900360640190fd5b506001600160a01b031660009081526003602052604090205490565b6001600160a01b038216611da1576040805162461bcd60e51b815260206004820152601660248201527f496e76616c69642073656e646572206164647265737300000000000000000000604482015290519081900360640190fd5b600080611dad83612e60565b9092509050336001600160a01b0385161480611dd857503360009081526002602052604090205460ff165b80611e015750808015611e0157506000838152600660205260409020546001600160a01b031633145b80611e2f57506001600160a01b038416600090815260056020908152604080832033845290915290205460ff165b80611e4957503360009081526001602052604090205460ff165b611e9a576040805162461bcd60e51b815260206004820152601660248201527f6e6f7420617574686f72697a656420746f206275726e00000000000000000000604482015290519081900360640190fd5b61126b848385613bd0565b6000610f0e826144e9565b60036020526000908152604090205481565b6000546001600160a01b03163314611f21576040805162461bcd60e51b815260206004820152601260248201527f6f6e6c792061646d696e20616c6c6f7765640000000000000000000000000000604482015290519081900360640190fd5b611f33826001600160a01b0316612f5c565b611f6e5760405162461bcd60e51b8152600401808060200182810382526030815260200180615ab66030913960400191505060405180910390fd5b611f788282613cab565b5050565b6000610f0e82614514565b6000546001600160a01b0316338114611fe7576040805162461bcd60e51b815260206004820152601b60248201527f6f6e6c792061646d696e2063616e206368616e67652061646d696e0000000000604482015290519081900360640190fd5b806001600160a01b0316826001600160a01b031614156120385760405162461bcd60e51b8152600401808060200182810382526025815260200180615ba66025913960400191505060405180910390fd5b604080516001600160a01b0380841682528416602082015281517f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f929181900390910190a1506000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60408051808201909152600481527f4c414e4400000000000000000000000000000000000000000000000000000000602082015290565b60046020526000908152604090205481565b6000546001600160a01b03163314612155576040805162461bcd60e51b815260206004820152601260248201527f6f6e6c792061646d696e20616c6c6f7765640000000000000000000000000000604482015290519081900360640190fd5b603a805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517fc6df119c56c99171b170652a3c4750ba46dcaacbdb3b7ab4847a9fa339659bd490600090a250565b600560209081526000928352604080842090915290825290205460ff1681565b603a5482906121e3906001600160a01b0316612f5c565b156122af57603a5460408051633185c44d60e21b81523060048201526001600160a01b0384811660248301529151919092169163c6171134916044808301926020929190829003018186803b15801561223b57600080fd5b505afa15801561224f573d6000803e3d6000fd5b505050506040513d602081101561226557600080fd5b50516122af576040805162461bcd60e51b815260206004820152601460248201527313dc195c985d1bdc88139bdd08105b1b1bddd95960621b604482015290519081900360640190fd5b6110d9838361453f565b6001600160a01b031660009081526039602052604090205460ff1690565b6000546001600160a01b03163314612336576040805162461bcd60e51b815260206004820152601260248201527f6f6e6c792061646d696e20616c6c6f7765640000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b03821661237b5760405162461bcd60e51b815260040180806020018281038252602a815260200180615bec602a913960400191505060405180910390fd5b611f78828261454a565b6000546001600160a01b031633146123e4576040805162461bcd60e51b815260206004820152601260248201527f6f6e6c792061646d696e20616c6c6f7765640000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b0382166124295760405162461bcd60e51b815260040180806020018281038252602a815260200180615a13602a913960400191505060405180910390fd5b6001600160a01b03821660009081526001602052604090205460ff16151581151514156124875760405162461bcd60e51b8152600401808060200182810382526033815260200180615a3d6033913960400191505060405180910390fd5b6001600160a01b038216600081815260016020908152604091829020805460ff1916851515908117909155825190815291517f44f92d27abdf4cfb6a7d712c3af68f3be086d4ca747ab802c36f67d6790060d89281900390910190a25050565b603a546001600160a01b031681565b603a54849061250d906001600160a01b0316612f5c565b156125f9576001600160a01b0381163314156125345761252f858585856139de565b612605565b603a5460408051633185c44d60e21b815230600482015233602482015290516001600160a01b039092169163c617113491604480820192602092909190829003018186803b15801561258557600080fd5b505afa158015612599573d6000803e3d6000fd5b505050506040513d60208110156125af57600080fd5b50516125f9576040805162461bcd60e51b815260206004820152601460248201527313dc195c985d1bdc88139bdd08105b1b1bddd95960621b604482015290519081900360640190fd5b612605858585856139de565b5050505050565b6006602052600090815260409020546001600160a01b031681565b6060600061263483613a79565b6001600160a01b03161415612690576040805162461bcd60e51b815260206004820152601960248201527f4c616e6456333a20496420646f6573206e6f7420657869737400000000000000604482015290519081900360640190fd5b612699826147c9565b60405160200180807f68747470733a2f2f6170692e73616e64626f782e67616d652f6c616e64732f00815250601f0182805190602001908083835b6020831061271157805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016126d4565b5181516020939093036101000a60001901801990911692169190911790527f2f6d657461646174612e6a736f6e000000000000000000000000000000000000920191825250604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee018152600e9092019052949350505050565b6000546001600160a01b031633146127ef576040805162461bcd60e51b815260206004820152601260248201527f6f6e6c792061646d696e20616c6c6f7765640000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b0382166128345760405162461bcd60e51b8152600401808060200182810382526022815260200180615a946022913960400191505060405180910390fd5b6001600160a01b03821660009081526039602052604090205460ff16151581151514156128925760405162461bcd60e51b8152600401808060200182810382526033815260200180615a3d6033913960400191505060405180910390fd5b6001600160a01b038216600081815260396020908152604091829020805460ff1916851515908117909155825190815291517fff452b3b9159b024a9098f0058c63eccd90d36b3584608202800d662f962bb609281900390910190a25050565b6001600160a01b031660009081526002602052604090205460ff1690565b6001600160a01b03808316600090815260056020908152604080832093851683529290529081205460ff168061295e57506001600160a01b03821660009081526001602052604090205460ff165b90505b92915050565b6001600160a01b038a166129c2576040805162461bcd60e51b815260206004820152601460248201527f66726f6d206973207a65726f2061646472657373000000000000000000000000604482015290519081900360640190fd5b6001600160a01b038916612a1d576040805162461bcd60e51b815260206004820152601a60248201527f63616e27742073656e6420746f207a65726f2061646472657373000000000000604482015290519081900360640190fd5b868514612a5b5760405162461bcd60e51b8152600401808060200182810382526035815260200180615b4d6035913960400191505060405180910390fd5b848314612a995760405162461bcd60e51b8152600401808060200182810382526031815260200180615ae66031913960400191505060405180910390fd5b6000336001600160a01b038c1614801590612ac357503360009081526002602052604090205460ff165b9050336001600160a01b038c1614801590612adc575080155b15612b5d576001600160a01b038b16600090815260056020908152604080832033845290915290205460ff1680612b2257503360009081526001602052604090205460ff165b612b5d5760405162461bcd60e51b8152600401808060200182810382526024815260200180615b826024913960400191505060405180910390fd5b6000805b89811015612bc05760008b8b83818110612b7757fe5b905060200201359050612bb18e8e838d8d87818110612b9257fe5b905060200201358c8c88818110612ba557fe5b9050602002013561374d565b80029190910190600101612b61565b506001600160a01b03808d1660009081526003602052604080822080548590039055918d16808252919020805483019055612bfa90612f5c565b8015612c125750612c128b6317a2fd9160e21b6148be565b15612d6457606081604051908082528060200260200182016040528015612c43578160200160208202803883390190505b5090506000805b8b811015612cd65760008d8d83818110612c6057fe5b90506020020135905060008090505b818202811015612ccc57612ca981838f8f87818110612c8a57fe5b905060200201358e8e88818110612c9d57fe5b90506020020135614493565b858581518110612cb557fe5b602090810291909101015260019384019301612c6f565b5050600101612c4a565b50612d2684612ce55733612ce7565b8e5b8f8f858a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061497192505050565b612d615760405162461bcd60e51b8152600401808060200182810382526024815260200180615a706024913960400191505060405180910390fd5b50505b505050505050505050505050565b603a548290612d89906001600160a01b0316612f5c565b15612e5557603a5460408051633185c44d60e21b81523060048201526001600160a01b0384811660248301529151919092169163c6171134916044808301926020929190829003018186803b158015612de157600080fd5b505afa158015612df5573d6000803e3d6000fd5b505050506040513d6020811015612e0b57600080fd5b5051612e55576040805162461bcd60e51b815260206004820152601460248201527313dc195c985d1bdc88139bdd08105b1b1bddd95960621b604482015290519081900360640190fd5b61126b848484614afa565b6000807fff00000000000000000000000000000000000000000000000000000000000000831615612ed8576040805162461bcd60e51b815260206004820152601060248201527f496e76616c696420746f6b656e20696400000000000000000000000000000000604482015290519081900360640190fd5b6000612ee384614514565b90506000612ef0856144e9565b6000868152600460205260409020549091508015612f38579350837f800000000000000000000000000000000000000000000000000000000000000081046001149350612f54565b612f4d600380858102046003858102046141c4565b9450600093505b505050915091565b60007fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470823f8015801590612f905750818114155b949350505050565b6000612fa382613a79565b90506001600160a01b038116613000576040805162461bcd60e51b815260206004820152601460248201527f746f6b656e20646f6573206e6f74206578697374000000000000000000000000604482015290519081900360640190fd5b6001600160a01b03811633148061303a57506001600160a01b038116600090815260056020908152604080832033845290915290205460ff165b8061305457503360009081526001602052604090205460ff165b6130a5576040805162461bcd60e51b815260206004820152601960248201527f6e6f7420617574686f72697a656420746f20617070726f766500000000000000604482015290519081900360640190fd5b6110d9818484614bdb565b6000336001600160a01b038716148015906130da57503360009081526002602052604090205460ff165b90506000336001600160a01b03881614806130f25750815b8061312057506001600160a01b038716600090815260056020908152604080832033845290915290205460ff165b8061313a57503360009081526001602052604090205460ff165b90506001600160a01b038716613197576040805162461bcd60e51b815260206004820152601460248201527f66726f6d206973207a65726f2061646472657373000000000000000000000000604482015290519081900360640190fd5b6001600160a01b0386166131f2576040805162461bcd60e51b815260206004820152601a60248201527f63616e27742073656e6420746f207a65726f2061646472657373000000000000604482015290519081900360640190fd5b845160005b8181101561337557600087828151811061320d57fe5b6020026020010151905060008061322383612e60565b915091508b6001600160a01b0316826001600160a01b03161461328d576040805162461bcd60e51b815260206004820152601e60248201527f6e6f74206f776e657220696e2062617463685472616e7366657246726f6d0000604482015290519081900360640190fd5b85806132b757508080156132b757506000838152600660205260409020546001600160a01b031633145b613308576040805162461bcd60e51b815260206004820152600e60248201527f6e6f7420617574686f72697a6564000000000000000000000000000000000000604482015290519081900360640190fd5b8a6001600160a01b03166004600085815260200190815260200160002081905550828b6001600160a01b03168d6001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050506001016131f7565b50866001600160a01b0316886001600160a01b0316146133bd576001600160a01b03808916600090815260036020526040808220805485900390559189168152208054820190555b6133cf876001600160a01b0316612f5c565b156115f6576133e5876317a2fd9160e21b6148be565b1561344357613403836133f857336133fa565b885b89898989614971565b61343e5760405162461bcd60e51b8152600401808060200182810382526024815260200180615a706024913960400191505060405180910390fd5b6115f6565b83156115f65760005b818110156134e85761348f846134625733613464565b895b8a8a8a858151811061347257fe5b602002602001015160405180602001604052806000815250614cba565b6134e0576040805162461bcd60e51b815260206004820152601e60248201527f657263373231207472616e736665722072656a656374656420627920746f0000604482015290519081900360640190fd5b60010161344c565b505050505050505050565b6000613500848484614e05565b905061350d84848461502b565b61351f836001600160a01b0316612f5c565b80156135375750613537836317a2fd9160e21b6148be565b1561126b576135648161354a573361354c565b845b85858560405180602001604052806000815250614cba565b61126b576040805162461bcd60e51b815260206004820152601e60248201527f657263373231207472616e736665722072656a656374656420627920746f0000604482015290519081900360640190fd5b60006135c082613a79565b90506001600160a01b03841661361d576040805162461bcd60e51b815260206004820152601660248201527f73656e646572206973207a65726f206164647265737300000000000000000000604482015290519081900360640190fd5b336001600160a01b038516148061364357503360009081526002602052604090205460ff165b8061367157506001600160a01b038416600090815260056020908152604080832033845290915290205460ff165b8061368b57503360009081526001602052604090205460ff165b6136dc576040805162461bcd60e51b815260206004820152601960248201527f6e6f7420617574686f72697a656420746f20617070726f766500000000000000604482015290519081900360640190fd5b836001600160a01b0316816001600160a01b031614613742576040805162461bcd60e51b815260206004820152600f60248201527f6f776e657220213d2073656e6465720000000000000000000000000000000000604482015290519081900360640190fd5b61126b818484614bdb565b613758838383613fd9565b826001141561385f57600061376f60008484614352565b9050600061377c82613a79565b90506001600160a01b0381166137d9576040805162461bcd60e51b815260206004820152601460248201527f746f6b656e20646f6573206e6f74206578697374000000000000000000000000604482015290519081900360640190fd5b866001600160a01b0316816001600160a01b03161461383f576040805162461bcd60e51b815260206004820152601a60248201527f6e6f74206f776e657220696e205f7472616e7366657251756164000000000000604482015290519081900360640190fd5b5060009081526004602052604090206001600160a01b0385169055613893565b613891858560405180606001604052808681526020018581526020018781525060016002888161388b57fe5b0461509b565b505b60005b838402811015611156576138ac81858585614493565b856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4600101613896565b613906856001600160a01b0316612f5c565b801561391e575061391e856317a2fd9160e21b6148be565b156139d5576060848502604051908082528060200260200182016040528015613951578160200160208202803883390190505b50905060005b85860281101561398c5761396d81878787614493565b82828151811061397957fe5b6020908102919091010152600101613957565b5061399a8888888486614971565b6115f65760405162461bcd60e51b8152600401808060200182810382526024815260200180615a706024913960400191505060405180910390fd5b50505050505050565b60006139eb858585614e05565b90506139f885858561502b565b613a0a846001600160a01b0316612f5c565b1561260557613a2881613a1d5733613a1f565b855b86868686614cba565b612605576040805162461bcd60e51b815260206004820152601f60248201527f4552433732313a207472616e736665722072656a656374656420627920746f00604482015290519081900360640190fd5b60007fff00000000000000000000000000000000000000000000000000000000000000821615613af0576040805162461bcd60e51b815260206004820152601060248201527f496e76616c696420746f6b656e20696400000000000000000000000000000000604482015290519081900360640190fd5b6000806000613afe856152bd565b925092509250828281613b0d57fe5b0615613b60576040805162461bcd60e51b815260206004820152601e60248201527f7820636f6f7264696e6174653a20496e76616c696420746f6b656e2069640000604482015290519081900360640190fd5b828181613b6957fe5b0615613bbc576040805162461bcd60e51b815260206004820152601e60248201527f7920636f6f7264696e6174653a20496e76616c696420746f6b656e2069640000604482015290519081900360640190fd5b613bc78383836141c4565b95945050505050565b816001600160a01b0316836001600160a01b031614613c36576040805162461bcd60e51b815260206004820152600960248201527f6e6f74206f776e65720000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008181526004602090815260408083207401000000000000000000000000000000000000000090556001600160a01b0386168084526003909252808320805460001901905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a4505050565b6001600160a01b038216600081815260026020908152604091829020805460ff1916851515908117909155825190815291517fb21eb88b4e33b3f1281830a7178d74d8aa73220416215726b68ae23d539515cb9281900390910190a25050565b6000613d1685614255565b505090506000613d27828686614352565b604080518181526108208101825291925060609190816020015b613d496159c4565b815260200190600190039081613d415790505090506000806003891115613da157613d9b60405180606001604052808a81526020018981526020018b81525084838560028e81613d9557fe5b046153ce565b90925090505b60005b898a02811015613f7a576000613dbc828c8c8c614493565b90506000613df6866040518060600160405280613dd886614514565b8152602001613de6866144e9565b8152602001600181525087615553565b90508015613e3b5760405182906001600160a01b038f169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90600090a4613f70565b6000828152600460205260409020546001600160a01b0316331415613ee5576000828152600660205260409020546001600160a01b031615613ea1576000828152600660205260409020805473ffffffffffffffffffffffffffffffffffffffff191690555b6040516001949094019382906001600160a01b038f169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90600090a4613f70565b60008281526004602052604090205415613f37576040805162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e481b5a5b9d195960921b604482015290519081900360640190fd5b60405182906001600160a01b038f16906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45b5050600101613da4565b50613f8b8383838d8d8d8d8d6155fb565b60009384526004602090815260408086206001600160a01b03909c169b8c90559a85526003905289842080549980029990990190985550503381529590952080549490940390935550505050565b8260011480613fe85750826003145b80613ff35750826006145b80613ffe575082600c145b806140095750826018145b61405a576040805162461bcd60e51b815260206004820152600c60248201527f496e76616c69642073697a650000000000000000000000000000000000000000604482015290519081900360640190fd5b82828161406357fe5b06156140b6576040805162461bcd60e51b815260206004820152601460248201527f496e76616c6964207820636f6f7264696e617465000000000000000000000000604482015290519081900360640190fd5b8281816140bf57fe5b0615614112576040805162461bcd60e51b815260206004820152601460248201527f496e76616c6964207920636f6f7264696e617465000000000000000000000000604482015290519081900360640190fd5b826101980382111561416b576040805162461bcd60e51b815260206004820152600f60248201527f78206f7574206f6620626f756e64730000000000000000000000000000000000604482015290519081900360640190fd5b82610198038111156110d9576040805162461bcd60e51b815260206004820152600f60248201527f79206f7574206f6620626f756e64730000000000000000000000000000000000604482015290519081900360640190fd5b60008060006141d286614255565b50915091506000600460006141fe858a8b8b816141eb57fe5b04028b8c8b816141f757fe5b0402614352565b815260208101919091526040016000205490506001600160a01b0381161561422a5792506119cc915050565b60188710156142485761423e8287876141c4565b93505050506119cc565b5060009695505050505050565b6000806000836001141561427057600092506003915061434b565b836003141561428957600160f81b92506006915061434b565b83600614156142a85750600160f91b9150600c9050600160f81b61434b565b83600c14156142c75750600360f81b915060189050600160f91b61434b565b83601814156142fe57507f04000000000000000000000000000000000000000000000000000000000000009150600360f81b61434b565b6040805162461bcd60e51b815260206004820152600c60248201527f496e76616c69642073697a650000000000000000000000000000000000000000604482015290519081900360640190fd5b9193909250565b6101980291010190565b600061436782614255565b505090508185116143e95760046000614390838586898161438457fe5b0402868789816141f757fe5b8152602001908152602001600020546000146143e4576040805162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e481b5a5b9d195960921b604482015290519081900360640190fd5b614479565b838501838601855b8281101561447557855b8281101561446d5760046000614412878585614352565b815260200190815260200160002054600014614466576040805162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e481b5a5b9d195960921b604482015290519081900360640190fd5b85016143fb565b5084016143f1565b5050505b60028204915060038210612605576126058585858561435c565b60008084868161449f57fe5b049050600281066144cb576144c360008688816144b857fe5b068601838601614352565b915050612f90565b6144c360008688816144d957fe5b0660010187870103838601614352565b6101987effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff919091160490565b6101987effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff919091160690565b611f78338383615861565b603a5461455f906001600160a01b0316612f5c565b1561478457603a54604080517fc3c5a54700000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b039092169163c3c5a547916024808201926020929091908290030181600087803b1580156145ca57600080fd5b505af11580156145de573d6000803e3d6000fd5b505050506040513d60208110156145f457600080fd5b505161478457801561468a57603a54604080517f7d3e3dbe0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03858116602483015291519190921691637d3e3dbe91604480830192600092919082900301818387803b15801561466d57600080fd5b505af1158015614681573d6000803e3d6000fd5b50505050614784565b6001600160a01b0382161561470657603a54604080517fa0af29030000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0385811660248301529151919092169163a0af290391604480830192600092919082900301818387803b15801561466d57600080fd5b603a54604080517f4420e48600000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b0390921691634420e4869160248082019260009290919082900301818387803b15801561476b57600080fd5b505af115801561477f573d6000803e3d6000fd5b505050505b60408051821515815290516001600160a01b038416917f3c7a9c847c035e45b84027e44ad55724873d5921b3a6abb8c0926b415d9241b1919081900360200190a25050565b60608161480a575060408051808201909152600181527f30000000000000000000000000000000000000000000000000000000000000006020820152610f11565b8160005b811561482257600101600a8204915061480e565b6060816040519080825280601f01601f19166020018201604052801561484f576020820181803883390190505b50905060001982015b85156148b557600a860660300160f81b8282806001900393508151811061487b57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a86049550614858565b50949350505050565b604080516001600160e01b031983166024808301919091528251808303909101815260449091018252602081810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01ffc9a7000000000000000000000000000000000000000000000000000000001781528251935160008082529485948594909392908183858c612710fa955080519450505050609e5a1161495d57fe5b8280156149675750815b9695505050505050565b600080846001600160a01b0316634b808c46888887876040518563ffffffff1660e01b815260040180856001600160a01b03166001600160a01b03168152602001846001600160a01b03166001600160a01b031681526020018060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015614a0a5781810151838201526020016149f2565b50505050905001838103825284818151815260200191508051906020019080838360005b83811015614a46578181015183820152602001614a2e565b50505050905090810190601f168015614a735780820380516001836020036101000a031916815260200191505b509650505050505050602060405180830381600087803b158015614a9657600080fd5b505af1158015614aaa573d6000803e3d6000fd5b505050506040513d6020811015614ac057600080fd5b50516001600160e01b0319167f4b808c46000000000000000000000000000000000000000000000000000000001491505095945050505050565b6001600160a01b038316614b55576040805162461bcd60e51b815260206004820152601660248201527f496e76616c69642073656e646572206164647265737300000000000000000000604482015290519081900360640190fd5b336001600160a01b0384161480614b7b57503360009081526002602052604090205460ff165b80614b9557503360009081526001602052604090205460ff165b614bd05760405162461bcd60e51b8152600401808060200182810382526021815260200180615bcb6021913960400191505060405180910390fd5b6110d9838383615861565b6001600160a01b038216614c085760008181526004602052604090206001600160a01b0384169055614c74565b60008181526004602090815260408083206001600160a01b038781167f8000000000000000000000000000000000000000000000000000000000000000019091556006909252909120805473ffffffffffffffffffffffffffffffffffffffff19169184169190911790555b80826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b600080846001600160a01b031663150b7a02888887876040518563ffffffff1660e01b815260040180856001600160a01b03166001600160a01b03168152602001846001600160a01b03166001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015614d52578181015183820152602001614d3a565b50505050905090810190601f168015614d7f5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015614da157600080fd5b505af1158015614db5573d6000803e3d6000fd5b505050506040513d6020811015614dcb57600080fd5b50516001600160e01b0319167f150b7a02000000000000000000000000000000000000000000000000000000001491505095945050505050565b6000806000614e1384612e60565b90925090506001600160a01b038216614e73576040805162461bcd60e51b815260206004820152601460248201527f746f6b656e20646f6573206e6f74206578697374000000000000000000000000604482015290519081900360640190fd5b856001600160a01b0316826001600160a01b031614614ed9576040805162461bcd60e51b815260206004820152601b60248201527f6e6f74206f776e657220696e205f636865636b5472616e736665720000000000604482015290519081900360640190fd5b6001600160a01b038516614f34576040805162461bcd60e51b815260206004820152601a60248201527f63616e27742073656e6420746f207a65726f2061646472657373000000000000604482015290519081900360640190fd5b336001600160a01b03871614615022573360009081526002602052604090205460ff1615614f67576001925050506119cc565b6001600160a01b038616600090815260056020908152604080832033845290915290205460ff1680614fb75750808015614fb757506000848152600660205260409020546001600160a01b031633145b80614fd157503360009081526001602052604090205460ff165b615022576040805162461bcd60e51b815260206004820152601860248201527f6e6f7420617070726f76656420746f207472616e736665720000000000000000604482015290519081900360640190fd5b50509392505050565b6001600160a01b03808416600081815260036020908152604080832080546000190190559386168083528483208054600101905585835260049091528382208190559251849392917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60008060006150ad8660400151614255565b925050915060006150c78388600001518960200151614352565b87519091506001905b60408901518951018110156152175760208901515b89604001518a602001510181101561520f5760008060038a1015615128576151188e61511360008787614352565b615927565b80156151215750845b90506151f0565b6151548e8e60405180606001604052808881526020018781526020018e815250600060028f8161388b57fe5b90506000615163888686614352565b6000818152600460205260409020549350905082156151ee57816151de578e6001600160a01b031683146151de576040805162461bcd60e51b815260206004820152601760248201527f6e6f74206f776e6572206f66206368696c642051756164000000000000000000604482015290519081900360640190fd5b6000818152600460205260408120555b505b80806151fb57508115155b80156152045750845b9450505087016150e5565b5086016150d0565b5086156152b0578061528957896001600160a01b031661524489604001518a600001518b602001516141c4565b6001600160a01b0316146152895760405162461bcd60e51b815260040180806020018281038252602b815260200180615c16602b913960400191505060405180910390fd5b5060009081526004602052604090206001600160a01b03881690555060019150613bc79050565b9998505050505050505050565b60008060006152cb84614514565b91506152d6846144e9565b90507fff0000000000000000000000000000000000000000000000000000000000000084168061530957600193506153c6565b600160f81b81141561531e57600393506153c6565b600160f91b81141561533357600693506153c6565b600360f81b81141561534857600c93506153c6565b7f040000000000000000000000000000000000000000000000000000000000000081141561537957601893506153c6565b6040805162461bcd60e51b815260206004820152601060248201527f496e76616c696420746f6b656e20696400000000000000000000000000000000604482015290519081900360640190fd5b509193909250565b60008060006153dc84614255565b50506040890151895160208b015192935080820192909101905b828110156155225760208b01515b8281101561551a5760006154338c60405180606001604052808681526020018581526020018c8152508c615553565b905080615512576000615447878585614352565b6000818152600460205260409020549091506001600160a01b0381163314156154c25760405180606001604052808681526020018581526020018c8152508e8d8151811061549157fe5b6020908102919091018101919091526000838152600490915260408120558a80029c909c019b6001909b019a61550f565b6001600160a01b0381161561550f576040805162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e481b5a5b9d195960921b604482015290519081900360640190fd5b50505b508701615404565b5086016153f6565b50600286049550600386106155435761553e8a8a8a8a8a6153ce565b985096505b5094989597509495505050505050565b6000805b828110156155f0576155676159c4565b85828151811061557357fe5b602002602001015190508460400151816040015111801561559657508051855110155b80156155aa57506040810151815186519101115b80156155be57508060200151856020015110155b80156155d7575080604001518160200151018560200151105b156155e7576001925050506119cc565b50600101615557565b506000949350505050565b61560d856001600160a01b0316612f5c565b80156156255750615625856317a2fd9160e21b6148be565b1561580b57606086604051908082528060200260200182016040528015615656578160200160208202803883390190505b50905060006060888788020360405190808252806020026020018201604052801561568b578160200160208202803883390190505b5090506000805b8889028110156157705760006156aa828b8b8b614493565b90506156e28e60405180606001604052806156c485614514565b81526020016156d2856144e9565b815260200160018152508f615553565b1561570a57808686815181106156f457fe5b6020908102919091010152600190940193615767565b6000818152600460205260409020546001600160a01b031633141561574857600081815260046020526040812055855181908790879081106156f457fe5b8084848151811061575557fe5b60209081029190910101526001909201915b50600101615692565b5061577f3360008b8589614971565b6157ba5760405162461bcd60e51b8152600401808060200182810382526024815260200180615a706024913960400191505060405180910390fd5b6157c733338b8789614971565b6158025760405162461bcd60e51b8152600401808060200182810382526024815260200180615a706024913960400191505060405180910390fd5b505050506115f6565b60005b8485028110156134e857600061582682878787614493565b6000818152600460205260409020549091506001600160a01b0316331415615858576000818152600460205260408120555b5060010161580e565b6001600160a01b03821660009081526001602052604090205460ff16156158b95760405162461bcd60e51b8152600401808060200182810382526036815260200180615b176036913960400191505060405180910390fd5b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff1916861515908117909155825190815291517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319281900390910190a3505050565b60008181526004602052604081205480156159ba57836001600160a01b0316816001600160a01b0316146159a2576040805162461bcd60e51b815260206004820152600960248201527f6e6f74206f776e65720000000000000000000000000000000000000000000000604482015290519081900360640190fd5b50506000818152600460205260408120556001612961565b5060009392505050565b6040518060600160405280600081526020016000815260200160008152509056fe45524337323142617365546f6b656e3a20436f6e747261637420616c726561647920696e697469616c697a6564616464726573732030206973206e6f7420616c6c6f776564206173207375706572206f70657261746f72746865207374617475732073686f756c6420626520646966666572656e74207468616e207468652063757272656e74206f6e65657263373231206261746368207472616e736665722072656a656374656420627920746f616464726573732030206973206e6f7420616c6c6f776564206173206d696e7465726f6e6c7920636f6e7472616374732063616e206265206d657461207472616e73616374696f6e2070726f636573736f724c616e6442617365546f6b656e56333a2078277320616e6420792773206c656e6774682061726520646966666572656e747375706572206f70657261746f722063616e2774206861766520746865697220617070726f76616c466f72416c6c206368616e6765644c616e6442617365546f6b656e56333a2073697a6573277320616e6420782773206c656e6774682061726520646966666572656e746e6f7420617574686f72697a656420746f207472616e736665724d756c7469517561647369742063616e206265206f6e6c79206368616e67656420746f2061206e65772061646d696e6e6f7420617574686f72697a656420746f20617070726f766520666f7220616c6c4c616e6456333a20737562736372697074696f6e2063616e2774206265207a65726f20616464726573736e6f74206f776e6572206f6620616c6c20737562207175616473206e6f7220706172656e74207175616473a265627a7a7230582035c25998d9f59a036b0e292bbb5b9d7acce392cc82912042d6b9870fa500b5a864736f6c63430005090032",
  "deployedBytecode": "",
  "devdoc": {
    "author": "The Sandbox",
    "details": "LAND contract implements ERC721, quad and marketplace filtering functionalities",
    "methods": {
      "approve(address,uint256)": {
        "params": {
          "id": "The id of the token",
          "operator": "The address receiving the approval"
        }
      },
      "approveFor(address,address,uint256)": {
        "params": {
          "id": "The id of the token",
          "operator": "The address receiving the approval",
          "sender": "The address giving the approval"
        }
      },
      "balanceOf(address)": {
        "params": {
          "owner": "The address to look for"
        },
        "return": "The number of Land token owned by the address"
      },
      "batchTransferFrom(address,address,uint256[],bytes)": {
        "params": {
          "data": "additional data",
          "from": "The sender of the token",
          "ids": "The ids of the tokens",
          "to": "The recipient of the token"
        }
      },
      "batchTransferQuad(address,address,uint256[],uint256[],uint256[],bytes)": {
        "params": {
          "data": "additional data",
          "from": "current owner of the quad",
          "sizes": "list of sizes for each quad",
          "to": "destination",
          "xs": "list of top left x coordinates for each quad",
          "ys": "list of top left y coordinates for each quad"
        }
      },
      "burn(uint256)": {
        "params": {
          "id": "token which will be burnt."
        }
      },
      "burnFrom(address,uint256)": {
        "params": {
          "from": "address whose token is to be burnt.",
          "id": "token which will be burnt."
        }
      },
      "changeAdmin(address)": {
        "params": {
          "newAdmin": "address of the new administrator."
        }
      },
      "exists(uint256,uint256,uint256)": {
        "params": {
          "size": "size of the quad",
          "x": "x coordinate of the quad",
          "y": "y coordinate of the quad"
        },
        "return": "bool for if Land has been minted or not"
      },
      "getAdmin()": {
        "return": "the current administrator of this contract."
      },
      "getApproved(uint256)": {
        "params": {
          "id": "The id of the token"
        },
        "return": "The address of the operator"
      },
      "getX(uint256)": {
        "params": {
          "id": "tokenId"
        },
        "return": "the x coordinates"
      },
      "getY(uint256)": {
        "params": {
          "id": "tokenId"
        },
        "return": "the y coordinates"
      },
      "height()": {
        "return": "height"
      },
      "initialize(address,address)": {
        "params": {
          "admin": "Admin of the contract",
          "metaTransactionContract": "Authorized contract for meta-transactions"
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "operator": "The address of the operator",
          "owner": "The address of the owner"
        },
        "return": "The status of the approval"
      },
      "isMetaTransactionProcessor(address)": {
        "params": {
          "who": "The address to query."
        },
        "return": "whether the address has meta-transaction execution rights."
      },
      "isMinter(address)": {
        "params": {
          "who": "The address to query."
        },
        "return": "whether the address has minter rights."
      },
      "isSuperOperator(address)": {
        "params": {
          "who": "The address to query."
        },
        "return": "whether the address has superOperator rights."
      },
      "mintAndTransferQuad(address,uint256,uint256,uint256,bytes)": {
        "params": {
          "data": "extra data to pass to the transfer",
          "size": "The size of the new quad",
          "to": "The recipient of the new quad",
          "x": "The top left x coordinate of the new quad",
          "y": "The top left y coordinate of the new quad"
        }
      },
      "mintQuad(address,uint256,uint256,uint256,bytes)": {
        "params": {
          "data": "extra data to pass to the transfer",
          "size": "The size of the new quad",
          "to": "The recipient of the new quad",
          "x": "The top left x coordinate of the new quad",
          "y": "The top left y coordinate of the new quad"
        }
      },
      "name()": {
        "return": "The name of the token contract"
      },
      "ownerOf(uint256)": {
        "params": {
          "id": "The id of the Land"
        },
        "return": "The address of the owner"
      },
      "register(address,bool)": {
        "details": "used to register contract and subscribe to the subscriptionOrRegistrantToCopy's black list.",
        "params": {
          "subscribe": "bool to signify subscription \"true\"\" or to copy the list \"false\".",
          "subscriptionOrRegistrantToCopy": "registration address of the list to subscribe."
        }
      },
      "safeBatchTransferFrom(address,address,uint256[],bytes)": {
        "params": {
          "data": "additional data",
          "from": "The sender of the token",
          "ids": "The ids of the tokens",
          "to": "The recipient of the token"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "params": {
          "from": "The send of the token",
          "id": "The id of the token",
          "to": "The recipient of the token"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "params": {
          "data": "Additional data",
          "from": "The sender of the token",
          "id": "The id of the token",
          "to": "The recipient of the token"
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "approved": "The determination of the approval",
          "operator": "The address receiving the approval"
        }
      },
      "setApprovalForAllFor(address,address,bool)": {
        "params": {
          "approved": "The determination of the approval",
          "operator": "The address receiving the approval",
          "sender": "The address giving the approval"
        }
      },
      "setMetaTransactionProcessor(address,bool)": {
        "params": {
          "enabled": "set whether the metaTransactionProcessor is enabled or disabled.",
          "metaTransactionProcessor": "address that will be given/removed metaTransactionProcessor rights."
        }
      },
      "setMinter(address,bool)": {
        "params": {
          "enabled": "set whether the minter is enabled or disabled.",
          "minter": "address that will be given/removed minter right."
        }
      },
      "setOperatorRegistry(address)": {
        "params": {
          "registry": "the address of the registry"
        }
      },
      "setSuperOperator(address,bool)": {
        "params": {
          "enabled": "set whether the superOperator is enabled or disabled.",
          "superOperator": "address that will be given/removed superOperator right."
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "id": "The id of the interface"
        },
        "return": "True if the interface is supported"
      },
      "symbol()": {
        "return": "The symbol of the token contract"
      },
      "tokenURI(uint256)": {
        "params": {
          "id": "The id of the token"
        },
        "return": "The URI of the token"
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "from": "The sender of the token",
          "id": "The id of the token",
          "to": "The recipient of the token"
        }
      },
      "transferQuad(address,address,uint256,uint256,uint256,bytes)": {
        "params": {
          "data": "additional data",
          "from": "current owner of the quad",
          "size": "size of the quad",
          "to": "destination",
          "x": "The top left x coordinate of the quad",
          "y": "The top left y coordinate of the quad"
        }
      },
      "width()": {
        "return": "width"
      }
    },
    "title": "LandV3"
  },
  "userdoc": {
    "methods": {
      "approve(address,uint256)": {
        "notice": "Approve an operator to spend tokens on the sender behalf"
      },
      "approveFor(address,address,uint256)": {
        "notice": "Approve an operator to spend tokens on the sender behalf"
      },
      "balanceOf(address)": {
        "notice": "Return the number of Land owned by an address"
      },
      "batchTransferFrom(address,address,uint256[],bytes)": {
        "notice": "Transfer many tokens between 2 addresses"
      },
      "batchTransferQuad(address,address,uint256[],uint256[],uint256[],bytes)": {
        "notice": "transfer multiple quad (aligned to a quad tree with size 3, 6, 12 or 24 only)"
      },
      "burn(uint256)": {
        "notice": "Burns token `id`."
      },
      "burnFrom(address,uint256)": {
        "notice": "Burn token`id` from `from`."
      },
      "changeAdmin(address)": {
        "notice": "change the administrator to be `newAdmin`."
      },
      "exists(uint256,uint256,uint256)": {
        "notice": "checks if Land has been minted or not"
      },
      "getAdmin()": {
        "notice": "gives the current administrator of this contract."
      },
      "getApproved(uint256)": {
        "notice": "Get the approved operator for a specific token"
      },
      "getX(uint256)": {
        "notice": "x coordinate of Land token"
      },
      "getY(uint256)": {
        "notice": "y coordinate of Land token"
      },
      "height()": {
        "notice": "total height of the map"
      },
      "initialize(address,address)": {
        "notice": "Initializes the contract with the meta-transaction contract & admin"
      },
      "isApprovedForAll(address,address)": {
        "notice": "Check if the sender approved the operator"
      },
      "isMetaTransactionProcessor(address)": {
        "notice": "check whether address `who` is given meta-transaction execution rights."
      },
      "isMinter(address)": {
        "notice": "check whether address `who` is given minter rights."
      },
      "isSuperOperator(address)": {
        "notice": "check whether address `who` is given superOperator rights."
      },
      "mintAndTransferQuad(address,uint256,uint256,uint256,bytes)": {
        "notice": "Checks if a parent quad has child quads already minted. Then mints the rest child quads and transfers the parent quad. Should only be called by the tunnel."
      },
      "mintQuad(address,uint256,uint256,uint256,bytes)": {
        "notice": "Mint a new quad (aligned to a quad tree with size 1, 3, 6, 12 or 24 only)"
      },
      "name()": {
        "notice": "Return the name of the token contract"
      },
      "ownerOf(uint256)": {
        "notice": "Return the owner of a Land"
      },
      "register(address,bool)": {
        "notice": "This function is used to register Land contract on the Operator Filterer Registry of Opensea.can only be called by admin."
      },
      "safeBatchTransferFrom(address,address,uint256[],bytes)": {
        "notice": "Transfer many tokens between 2 addresses ensuring the receiving contract has a receiver method"
      },
      "safeTransferFrom(address,address,uint256)": {
        "notice": "Transfer a token between 2 addresses letting the receiver knows of the transfer"
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "Transfer a token between 2 addresses letting the receiver knows of the transfer"
      },
      "setApprovalForAll(address,bool)": {
        "notice": "Set the approval for an operator to manage all the tokens of the sender"
      },
      "setApprovalForAllFor(address,address,bool)": {
        "notice": "Set the approval for an operator to manage all the tokens of the sender"
      },
      "setMetaTransactionProcessor(address,bool)": {
        "notice": "Enable or disable the ability of `metaTransactionProcessor` to perform meta-tx (metaTransactionProcessor rights)."
      },
      "setMinter(address,bool)": {
        "notice": "Enable or disable the ability of `minter` to mint tokens"
      },
      "setOperatorRegistry(address)": {
        "notice": "sets filter registry address deployed in test"
      },
      "setSuperOperator(address,bool)": {
        "notice": "Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights)."
      },
      "supportsInterface(bytes4)": {
        "notice": "Check if the contract supports an interface 0x01ffc9a7 is ERC-165 0x80ac58cd is ERC-721 0x5b5e139f is ERC-721 metadata"
      },
      "symbol()": {
        "notice": "Return the symbol of the token contract"
      },
      "tokenURI(uint256)": {
        "notice": "Return the URI of a specific token"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer a token between 2 addresses"
      },
      "transferQuad(address,address,uint256,uint256,uint256,bytes)": {
        "notice": "transfer one quad (aligned to a quad tree with size 3, 6, 12 or 24 only)"
      },
      "width()": {
        "notice": "total width of the map"
      }
    },
    "notice": "LAND contract"
  }
}