{
  "address": "0xA7079ff4C5745e13125643dBDABeFd14B64eB73E",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BURNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "METADATA_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "approveFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "batchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAllFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "setTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "id",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenUris",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x50532ce37dc59f4fdc8315704a2cfb055e5a2ef84e066f8e7378e671ed3153de",
  "receipt": {
    "to": null,
    "from": "0xA796AE911621E00809E0E7C8f0AD6BF118E5139e",
    "contractAddress": "0xA7079ff4C5745e13125643dBDABeFd14B64eB73E",
    "transactionIndex": 38,
    "gasUsed": "2625364",
    "logsBloom": "0x
    "blockHash": "0xdbe58dfef64ddfdfe863b78651bc9034caf4dd6a0ee84a751f2d56fe18b79026",
    "transactionHash": "0x50532ce37dc59f4fdc8315704a2cfb055e5a2ef84e066f8e7378e671ed3153de",
    "logs": [],
    "blockNumber": 7375544,
    "cumulativeGasUsed": "26438911",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "65e08b938528b163bea66d16d1e23da8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BURNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"METADATA_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approveFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAllFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"id\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenUris\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract supports meta transactions.This contract is final, don't inherit from it.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mint(address,uint256)\":{\"details\":\"Should be callable only by the AssetTunnel on L1 via MINTER_ROLE.\",\"params\":{\"id\":\"ERC721 id to be used.\",\"to\":\"Address that will receive the token.\"}},\"mint(address,uint256,bytes)\":{\"details\":\"Should be callable only by the AssetTunnel on L1.If you want to retain token metadata from L2 to L1 during exit, you must implement this method.\",\"params\":{\"data\":\"Associated token metadata, which is decoded & used to set the token's metadata hash.\",\"id\":\"ERC721 id to be used.\",\"to\":\"Address that will receive the token.\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setTokenURI(uint256,string)\":{\"details\":\"The metadata hash for the ERC721 may need to be manually set or overridden.\",\"params\":{\"id\":\"The token id.\",\"uri\":\"The full token URI to be used for the token id.\"}},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"params\":{\"id\":\"The token to get the uri of.\"},\"returns\":{\"_0\":\"URI The token's URI string.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"title\":\"This contract is for AssetERC721 which can be minted by a minter role.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initialize(address,address)\":{\"notice\":\"fulfills the purpose of a constructor in upgradeable contracts\"},\"mint(address,uint256)\":{\"notice\":\"Mint an ERC721 Asset with the provided id.\"},\"mint(address,uint256,bytes)\":{\"notice\":\"Mint an ERC721 Asset with the provided id.\"},\"setTokenURI(uint256,string)\":{\"notice\":\"Set the metadatahash for a given token id.\"},\"tokenURI(uint256)\":{\"notice\":\"A distinct Uniform Resource Identifier (URI) for a given asset.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/solc_0.8/polygon/root/asset/AssetERC721.sol\":\"AssetERC721\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x64bb2dbe7ec4fcadb2f163f41edf6f2e1cd8f16162f7a56c2581894e6ba0747c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x6c25d4211724a6f4cdc8d25397edc780f48d951fc81c1d507f59b3edb22afaf7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x2f359f9d5c56394e60d74401487ab55d8ef0012907b07c9abbb8f998bf5ddfec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcd98895383d51dc86669a76ae3ad4419fc5dc079d01faea23498e80c1cf9f78a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"src/solc_0.8/assetERC721/BaseERC721.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\nimport {ERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport {AccessControlUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport {IMintableERC721} from \\\"../common/interfaces/IMintableERC721.sol\\\";\\nimport {IERC721Token} from \\\"../common/interfaces/IERC721Token.sol\\\";\\nimport {IERC721ExtendedToken} from \\\"../common/interfaces/IERC721ExtendedToken.sol\\\";\\nimport {IERC721Minter} from \\\"../common/interfaces/IERC721Minter.sol\\\";\\n\\nabstract contract BaseERC721 is\\n    AccessControlUpgradeable,\\n    ERC721Upgradeable,\\n    IMintableERC721,\\n    IERC721Token,\\n    IERC721ExtendedToken,\\n    IERC721Minter\\n{\\n    uint256[50] private __gap1; // In case\\n\\n    address internal _trustedForwarder;\\n\\n    string public baseTokenURI;\\n\\n    mapping(uint256 => string) public tokenUris;\\n\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant BURNER_ROLE = keccak256(\\\"BURNER_ROLE\\\");\\n\\n    /// @notice Mint an ERC721 Asset with the provided id.\\n    /// @dev Should be callable only by the designated predicate on L1.\\n    /// @dev Do not use this mint method if you want to retain metadata.\\n    /// @param to Address that will receive the token.\\n    /// @param id ERC721 id to be used.\\n    function mint(address to, uint256 id) public virtual override(IMintableERC721, IERC721Token, IERC721Minter) {\\n        _safeMint(to, id);\\n    }\\n\\n    /// @notice Mint an ERC721 Asset with the provided id.\\n    /// @dev Should be callable only by the designated predicate on L1.\\n    /// @dev If you want to retain token metadata from L2 to L1 during exit, you must implement this method.\\n    /// @param to Address that will receive the token.\\n    /// @param id ERC721 id to be used.\\n    /// @param data Associated token metadata, which is decoded & used to set the full tokenUri.\\n    function mint(\\n        address to,\\n        uint256 id,\\n        bytes calldata data\\n    ) public virtual override(IMintableERC721, IERC721Token, IERC721Minter) {\\n        require(data.length > 0, \\\"DATA_MUST_CONTAIN_TOKENURI\\\");\\n        _setTokenURI(id, data);\\n        _safeMint(to, id, data);\\n    }\\n\\n    /// @notice Approve an operator to operate tokens on the sender's behalf.\\n    /// @param from The address giving the approval.\\n    /// @param operator The address receiving the approval.\\n    /// @param id The id of the token.\\n    function approveFor(\\n        address from,\\n        address operator,\\n        uint256 id\\n    ) public virtual override(IERC721ExtendedToken) {\\n        require(from != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(from == _msgSender() || isApprovedForAll(from, _msgSender()), \\\"!AUTHORIZED\\\");\\n        approve(operator, id);\\n    }\\n\\n    /// @notice Set the approval for an operator to manage all the tokens of the sender.\\n    /// @param from The address giving the approval.\\n    /// @param operator The address receiving the approval.\\n    /// @param approved The determination of the approval.\\n    function setApprovalForAllFor(\\n        address from,\\n        address operator,\\n        bool approved\\n    ) public virtual override(IERC721ExtendedToken) {\\n        require(from != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(from == _msgSender() || isApprovedForAll(from, _msgSender()), \\\"!AUTHORIZED\\\");\\n        _setApprovalForAll(from, operator, approved);\\n    }\\n\\n    /// @notice Burns token with given `id`.\\n    /// @param from Address whose token is to be burned.\\n    /// @param id Token id which will be burned.\\n    function burnFrom(address from, uint256 id) public virtual override(IERC721ExtendedToken, IERC721Token) {\\n        require(from == _msgSender() || isApprovedForAll(from, _msgSender()), \\\"!AUTHORIZED\\\");\\n        require(from == ERC721Upgradeable.ownerOf(id), \\\"NOT_OWNER\\\");\\n        _burn(id);\\n    }\\n\\n    /// @notice Burns token with given `id`.\\n    /// @dev Used by default fx-portal tunnel which burns rather than locks.\\n    /// @param id The id of the token to be burned.\\n    function burn(uint256 id) public virtual override(IERC721ExtendedToken) onlyRole(BURNER_ROLE) {\\n        _burn(id);\\n    }\\n\\n    /// @notice Transfer tokens with given ids ensuring the receiving contract has a receiver method.\\n    /// @param from Address whose token is to be transferred.\\n    /// @param to Recipient.\\n    /// @param tokenId The token id to be transferred.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override(ERC721Upgradeable, IMintableERC721, IERC721Token) {\\n        ERC721Upgradeable.safeTransferFrom(from, to, tokenId);\\n    }\\n\\n    /// @param from The sender of the tokens.\\n    /// @param to The recipient of the tokens.\\n    /// @param ids The ids of the tokens to be transferred.\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids\\n    ) public virtual override(IERC721ExtendedToken) {\\n        uint256 numTokens = ids.length;\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            uint256 id = ids[i];\\n            ERC721Upgradeable.transferFrom(from, to, id);\\n        }\\n    }\\n\\n    /// @notice Transfer tokens with given ids ensuring the receiving contract has a receiver method.\\n    /// @param from The sender of the tokens.\\n    /// @param to The recipient of the tokens.\\n    /// @param ids The ids of the tokens to be transferred.\\n    /// @param data Additional data.\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) public virtual override(IERC721ExtendedToken) {\\n        uint256 numTokens = ids.length;\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            uint256 id = ids[i];\\n            ERC721Upgradeable.safeTransferFrom(from, to, id, data);\\n        }\\n    }\\n\\n    /// @notice Query if a token id exists.\\n    /// @param tokenId Token id to be queried.\\n    function exists(uint256 tokenId) public view virtual override(IMintableERC721, IERC721Token) returns (bool) {\\n        return _exists(tokenId);\\n    }\\n\\n    /// @notice Query if a contract implements interface `id`.\\n    /// @param id the interface identifier, as specified in ERC-165.\\n    /// @return `true` if the contract implements `id`.\\n    function supportsInterface(bytes4 id)\\n        public\\n        view\\n        virtual\\n        override(AccessControlUpgradeable, ERC721Upgradeable)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(id);\\n    }\\n\\n    /// @notice Change the address of the trusted forwarder for meta-transactions\\n    /// @param trustedForwarder The new trustedForwarder\\n    function setTrustedForwarder(address trustedForwarder) public virtual onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function getTrustedForwarder() public view virtual returns (address trustedForwarder) {\\n        return _trustedForwarder;\\n    }\\n\\n    function _setTokenURI(uint256 id, bytes memory data) internal {\\n        tokenUris[id] = abi.decode(data, (string));\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        super.tokenURI(tokenId);\\n    }\\n\\n    function _baseURI() internal view override(ERC721Upgradeable) returns (string memory) {\\n        return baseTokenURI;\\n    }\\n\\n    uint256[50] private __gap2; // In case\\n}\\n\",\"keccak256\":\"0x52ce1be1d0e6e235ba4e3bbc8ca7afd6e2fac5925cafe9e3317def0e21f9ed7d\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IAssetERC721.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport {IERC721Base} from \\\"./IERC721Base.sol\\\";\\n\\ninterface IAssetERC721 is IERC721Base {\\n    function setTokenURI(uint256 id, string memory uri) external;\\n\\n    function tokenURI(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa9a1229c39d9183bae268c1dc80150390b1a64483b8c785161e92faa51b5c1a0\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC721Base.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport {IERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport {IERC721ExtendedToken} from \\\"./IERC721ExtendedToken.sol\\\";\\n\\ninterface IERC721Base is IERC721Upgradeable {\\n    function mint(address to, uint256 id) external;\\n\\n    function mint(\\n        address to,\\n        uint256 id,\\n        bytes calldata metaData\\n    ) external;\\n\\n    function approveFor(\\n        address from,\\n        address operator,\\n        uint256 id\\n    ) external;\\n\\n    function setApprovalForAllFor(\\n        address from,\\n        address operator,\\n        bool approved\\n    ) external;\\n\\n    function burnFrom(address from, uint256 id) external;\\n\\n    function burn(uint256 id) external;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external override;\\n\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids\\n    ) external;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external;\\n\\n    function exists(uint256 tokenId) external view returns (bool);\\n\\n    function supportsInterface(bytes4 id) external view override returns (bool);\\n\\n    function setTrustedForwarder(address trustedForwarder) external;\\n\\n    function isTrustedForwarder(address forwarder) external returns (bool);\\n\\n    function getTrustedForwarder() external returns (address trustedForwarder);\\n}\\n\",\"keccak256\":\"0x515a9d8e988c63547108b16b7efd4942ab15887529a98861a522dea6dbb0437d\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC721ExtendedToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\ninterface IERC721ExtendedToken {\\n    function approveFor(\\n        address sender,\\n        address operator,\\n        uint256 id\\n    ) external;\\n\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids\\n    ) external;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external;\\n\\n    function setApprovalForAllFor(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) external;\\n\\n    function burn(uint256 id) external;\\n\\n    function burnFrom(address from, uint256 id) external;\\n}\\n\",\"keccak256\":\"0xe574d923fe66e20909df0d06b73478d2922e4865d85c578db60bda34f6273d45\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC721Minter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\ninterface IERC721Minter {\\n    function mint(address to, uint256 id) external;\\n\\n    function mint(\\n        address to,\\n        uint256 id,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xc7e2353855500d116773cd80fce32121ac61e2fbc62d7678da7c6e8bb64c257a\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC721Token.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\ninterface IERC721Token {\\n    function mint(address to, uint256 id) external;\\n\\n    function mint(\\n        address to,\\n        uint256 id,\\n        bytes calldata metaData\\n    ) external;\\n\\n    function burnFrom(address from, uint256 id) external;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function exists(uint256 tokenId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x43820ca0dea912810ce62790d8d3e561c96560052c675f324339f606b591e063\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IMintableERC721.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// import {IERC721} from \\\"@openzeppelin/contracts-0.8/token/ERC721/IERC721.sol\\\";\\n\\npragma solidity 0.8.2;\\n\\ninterface IMintableERC721 {\\n    // is IERC721 {\\n\\n    /**\\n     * @notice called by predicate contract to mint tokens while withdrawing\\n     * @dev Should be callable only by MintableERC721Predicate\\n     * Make sure minting is done only by this function\\n     * @param user user address for whom token is being minted\\n     * @param tokenId tokenId being minted\\n     */\\n    function mint(address user, uint256 tokenId) external;\\n\\n    /**\\n     * @notice called by predicate contract to mint tokens while withdrawing with metadata from L2\\n     * @dev Should be callable only by MintableERC721Predicate\\n     * Make sure minting is only done either by this function/ \\ud83d\\udc46\\n     * @param user user address for whom token is being minted\\n     * @param tokenId tokenId being minted\\n     * @param metaData Associated token metadata, to be decoded & set using `setTokenMetadata`\\n     *\\n     * Note : If you're interested in taking token metadata from L2 to L1 during exit, you must\\n     * implement this method\\n     */\\n    function mint(\\n        address user,\\n        uint256 tokenId,\\n        bytes calldata metaData\\n    ) external;\\n\\n    /**\\n     * @notice check if token already exists, return true if it does exist\\n     * @dev this check will be used by the predicate to determine if the token needs to be minted or transfered\\n     * @param tokenId tokenId being checked\\n     */\\n    function exists(uint256 tokenId) external view returns (bool);\\n\\n    // This one came form ERC721 and is used by the predicate!!!\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf55de53097913882caa72ed9d73bd32294354f7c87c69f05ae544c9d1bcbd9a8\",\"license\":\"MIT\"},\"src/solc_0.8/polygon/root/asset/AssetERC721.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport {BaseERC721} from \\\"../../../assetERC721/BaseERC721.sol\\\";\\nimport {IERC721Base} from \\\"../../../common/interfaces/IERC721Base.sol\\\";\\nimport {IAssetERC721} from \\\"../../../common/interfaces/IAssetERC721.sol\\\";\\n\\n/// @title This contract is for AssetERC721 which can be minted by a minter role.\\n/// @dev This contract supports meta transactions.\\n/// @dev This contract is final, don't inherit from it.\\ncontract AssetERC721 is BaseERC721, IAssetERC721 {\\n    bytes32 public constant METADATA_ROLE = keccak256(\\\"METADATA_ROLE\\\");\\n\\n    /// @notice fulfills the purpose of a constructor in upgradeable contracts\\n    function initialize(address trustedForwarder, address admin) public initializer {\\n        _setupRole(DEFAULT_ADMIN_ROLE, admin);\\n        _trustedForwarder = trustedForwarder;\\n        __ERC721_init(\\\"Sandbox's ASSETs ERC721\\\", \\\"ASSETERC721\\\");\\n    }\\n\\n    /// @notice Mint an ERC721 Asset with the provided id.\\n    /// @dev Should be callable only by the AssetTunnel on L1 via MINTER_ROLE.\\n    /// @param to Address that will receive the token.\\n    /// @param id ERC721 id to be used.\\n    function mint(address to, uint256 id) public override(BaseERC721, IERC721Base) onlyRole(MINTER_ROLE) {\\n        BaseERC721.mint(to, id);\\n    }\\n\\n    /// @notice Mint an ERC721 Asset with the provided id.\\n    /// @dev Should be callable only by the AssetTunnel on L1.\\n    /// @dev If you want to retain token metadata from L2 to L1 during exit, you must implement this method.\\n    /// @param to Address that will receive the token.\\n    /// @param id ERC721 id to be used.\\n    /// @param data Associated token metadata, which is decoded & used to set the token's metadata hash.\\n    function mint(\\n        address to,\\n        uint256 id,\\n        bytes calldata data\\n    ) public override(BaseERC721, IERC721Base) onlyRole(MINTER_ROLE) {\\n        BaseERC721.mint(to, id, data);\\n    }\\n\\n    /// @notice Set the metadatahash for a given token id.\\n    /// @dev The metadata hash for the ERC721 may need to be manually set or overridden.\\n    /// @param id The token id.\\n    /// @param uri The full token URI to be used for the token id.\\n    function setTokenURI(uint256 id, string memory uri) external override onlyRole(METADATA_ROLE) {\\n        tokenUris[id] = uri;\\n    }\\n\\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n    /// @param id The token to get the uri of.\\n    /// @return URI The token's URI string.\\n    function tokenURI(uint256 id) public view override(BaseERC721, IAssetERC721) returns (string memory) {\\n        require(ownerOf(id) != address(0), \\\"ZERO_ADDRESS\\\");\\n        return tokenUris[id];\\n    }\\n\\n    function supportsInterface(bytes4 id) public view override(BaseERC721, IERC721Base) returns (bool) {\\n        return BaseERC721.supportsInterface(id);\\n    }\\n\\n    function setTrustedForwarder(address trustedForwarder)\\n        public\\n        override(BaseERC721, IERC721Base)\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        BaseERC721.setTrustedForwarder(trustedForwarder);\\n    }\\n\\n    function setApprovalForAllFor(\\n        address from,\\n        address operator,\\n        bool approved\\n    ) public override(BaseERC721, IERC721Base) {\\n        BaseERC721.setApprovalForAllFor(from, operator, approved);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public override(BaseERC721, IERC721Base) {\\n        BaseERC721.safeTransferFrom(from, to, tokenId);\\n    }\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) public override(BaseERC721, IERC721Base) {\\n        BaseERC721.safeBatchTransferFrom(from, to, ids, data);\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view override(BaseERC721, IERC721Base) returns (bool) {\\n        return BaseERC721.isTrustedForwarder(forwarder);\\n    }\\n\\n    function getTrustedForwarder() public view override(BaseERC721, IERC721Base) returns (address trustedForwarder) {\\n        return BaseERC721.getTrustedForwarder();\\n    }\\n\\n    function exists(uint256 tokenId) public view override(BaseERC721, IERC721Base) returns (bool) {\\n        return BaseERC721.exists(tokenId);\\n    }\\n\\n    function burnFrom(address from, uint256 id) public override(BaseERC721, IERC721Base) {\\n        BaseERC721.burnFrom(from, id);\\n    }\\n\\n    function burn(uint256 id) public override(BaseERC721, IERC721Base) {\\n        BaseERC721.burn(id);\\n    }\\n\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids\\n    ) public override(BaseERC721, IERC721Base) {\\n        BaseERC721.batchTransferFrom(from, to, ids);\\n    }\\n\\n    function approveFor(\\n        address from,\\n        address operator,\\n        uint256 id\\n    ) public override(BaseERC721, IERC721Base) {\\n        BaseERC721.approveFor(from, operator, id);\\n    }\\n}\\n\",\"keccak256\":\"0xf630f602f69397ceca5bc2a63b961cb77334a28a76451a06abe525dbc0c1ecf3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612eb6806100206000396000f3fe608060405234801561001057600080fd5b50600436106102925760003560e01c80636352211e11610160578063b88d4fde116100d8578063d547cfb71161008c578063e985e9c511610071578063e985e9c5146105b5578063eeb5a5d1146105f1578063f3993d111461060457610292565b8063d547cfb71461059a578063da742228146105a257610292565b8063ce1b815f116100bd578063ce1b815f14610558578063d539139314610560578063d547741f1461058757610292565b8063b88d4fde14610532578063c87b56dd1461054557610292565b806394d008ef1161012f578063a217fddf11610114578063a217fddf14610504578063a22cb4651461050c578063ae882b651461051f57610292565b806394d008ef146104e957806395d89b41146104fc57610292565b80636352211e1461047757806370a082311461048a57806379cc67901461049d57806391d14854146104b057610292565b80632b9917461161020e57806342842e0e116101c2578063485cc955116101a7578063485cc9551461043e5780634f558e7914610451578063572b6c051461046457610292565b806342842e0e1461041857806342966c681461042b57610292565b806336568abe116101f357806336568abe146103cb57806338841782146103de57806340c10f191461040557610292565b80632b991746146103a55780632f2ff15d146103b857610292565b8063162094c411610265578063248a9ca31161024a578063248a9ca31461033a578063282c51f31461036b57806328cfbd461461039257610292565b8063162094c41461031457806323b872dd1461032757610292565b806301ffc9a71461029757806306fdde03146102bf578063081812fc146102d4578063095ea7b3146102ff575b600080fd5b6102aa6102a5366004612ae7565b610617565b60405190151581526020015b60405180910390f35b6102c761062a565b6040516102b69190612cd3565b6102e76102e2366004612aad565b6106bd565b6040516001600160a01b0390911681526020016102b6565b61031261030d366004612a38565b610768565b005b610312610322366004612b92565b6108ac565b61031261033536600461295b565b610903565b61035d610348366004612aad565b60009081526065602052604090206001015490565b6040519081526020016102b6565b61035d7f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a84881565b6103126103a036600461288b565b610991565b6103126103b336600461295b565b6109a7565b6103126103c6366004612ac5565b6109b2565b6103126103d9366004612ac5565b6109da565b61035d7f6bd6b5318a46e5fff572d5e4258a20774aab40cc35ac7680654b9081fcc82f8081565b610312610413366004612a38565b610a76565b61031261042636600461295b565b610aad565b610312610439366004612aad565b610ab8565b61031261044c3660046127fa565b610ac4565b6102aa61045f366004612aad565b610c3a565b6102aa6104723660046127e0565b610c45565b6102e7610485366004612aad565b610c5e565b61035d6104983660046127e0565b610ce9565b6103126104ab366004612a38565b610d83565b6102aa6104be366004612ac5565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6103126104f7366004612a61565b610d8d565b6102c7610dcd565b61035d600081565b61031261051a366004612a0f565b610ddc565b6102c761052d366004612aad565b610dee565b610312610540366004612996565b610e88565b6102c7610553366004612aad565b610f17565b6102e7611019565b61035d7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b610312610595366004612ac5565b611032565b6102c761105a565b6103126105b03660046127e0565b611067565b6102aa6105c33660046127fa565b6001600160a01b039182166000908152609c6020908152604080832093909416825291909152205460ff1690565b6103126105ff366004612919565b61107e565b61031261061236600461282c565b611089565b600061062282611095565b90505b919050565b60606097805461063990612dd0565b80601f016020809104026020016040519081016040528092919081815260200182805461066590612dd0565b80156106b25780601f10610687576101008083540402835291602001916106b2565b820191906000526020600020905b81548152906001019060200180831161069557829003601f168201915b505050505090505b90565b6000818152609960205260408120546001600160a01b031661074c5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e000000000000000000000000000000000000000060648201526084015b60405180910390fd5b506000908152609b60205260409020546001600160a01b031690565b600061077382610c5e565b9050806001600160a01b0316836001600160a01b031614156107fd5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610743565b806001600160a01b031661080f6110a0565b6001600160a01b0316148061082b575061082b816105c36110a0565b61089d5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610743565b6108a783836110e4565b505050565b7f6bd6b5318a46e5fff572d5e4258a20774aab40cc35ac7680654b9081fcc82f806108de816108d96110a0565b61115f565b600083815260fd6020908152604090912083516108fd92850190612659565b50505050565b61091461090e6110a0565b826111df565b6109865760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610743565b6108a78383836112e7565b61099f8686868686866114c1565b505050505050565b6108a7838383611557565b6000828152606560205260409020600101546109d0816108d96110a0565b6108a78383611631565b6109e26110a0565b6001600160a01b0316816001600160a01b031614610a685760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610743565b610a7282826116d4565b5050565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6610aa3816108d96110a0565b6108a78383611775565b6108a783838361177f565b610ac18161178a565b50565b600054610100900460ff16610adf5760005460ff1615610ae3565b303b155b610b555760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610743565b600054610100900460ff16158015610b80576000805460ff1961ff0019909116610100171660011790555b610b8b6000836117c0565b60fb805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038516179055604080518082018252601781527f53616e64626f78277320415353455473204552433732310000000000000000006020808301919091528251808401909352600b83527f415353455445524337323100000000000000000000000000000000000000000090830152610c24916117ca565b80156108a7576000805461ff0019169055505050565b600061062282611861565b60fb546000906001600160a01b03808416911614610622565b6000818152609960205260408120546001600160a01b0316806106225760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610743565b60006001600160a01b038216610d675760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610743565b506001600160a01b03166000908152609a602052604090205490565b610a728282611880565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6610dba816108d96110a0565b610dc68585858561196c565b5050505050565b60606098805461063990612dd0565b610a72610de76110a0565b8383611a3a565b60fd6020526000908152604090208054610e0790612dd0565b80601f0160208091040260200160405190810160405280929190818152602001828054610e3390612dd0565b8015610e805780601f10610e5557610100808354040283529160200191610e80565b820191906000526020600020905b815481529060010190602001808311610e6357829003601f168201915b505050505081565b610e99610e936110a0565b836111df565b610f0b5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610743565b6108fd84848484611b09565b60606000610f2483610c5e565b6001600160a01b03161415610f7b5760405162461bcd60e51b815260206004820152600c60248201527f5a45524f5f4144445245535300000000000000000000000000000000000000006044820152606401610743565b600082815260fd602052604090208054610f9490612dd0565b80601f0160208091040260200160405190810160405280929190818152602001828054610fc090612dd0565b801561100d5780601f10610fe25761010080835404028352916020019161100d565b820191906000526020600020905b815481529060010190602001808311610ff057829003601f168201915b50505050509050919050565b600061102d60fb546001600160a01b031690565b905090565b600082815260656020526040902060010154611050816108d96110a0565b6108a783836116d4565b60fc8054610e0790612dd0565b6000611075816108d96110a0565b610a7282611b92565b6108a7838383611bd0565b6108fd84848484611cab565b600061062282611d00565b60006110ab33610c45565b156110dd57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c6106ba565b50336106ba565b6000818152609b60205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038416908117909155819061112682610c5e565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff16610a725761119d816001600160a01b03166014611da2565b6111a8836020611da2565b6040516020016111b9929190612c16565b60408051601f198184030181529082905262461bcd60e51b825261074391600401612cd3565b6000818152609960205260408120546001600160a01b03166112695760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e00000000000000000000000000000000000000006064820152608401610743565b600061127483610c5e565b9050806001600160a01b0316846001600160a01b031614806112af5750836001600160a01b03166112a4846106bd565b6001600160a01b0316145b806112df57506001600160a01b038082166000908152609c602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b03166112fa82610c5e565b6001600160a01b0316146113765760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e00000000000000000000000000000000000000000000006064820152608401610743565b6001600160a01b0382166113f15760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610743565b6113fc6000826110e4565b6001600160a01b0383166000908152609a60205260408120805460019290611425908490612d76565b90915550506001600160a01b0382166000908152609a60205260408120805460019290611453908490612d3f565b9091555050600081815260996020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b8260005b8181101561154d5760008686838181106114ef57634e487b7160e01b600052603260045260246000fd5b90506020020135905061153a89898388888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e8892505050565b508061154581612e0b565b9150506114c5565b5050505050505050565b6001600160a01b0383166115ad5760405162461bcd60e51b815260206004820152600c60248201527f5a45524f5f4144445245535300000000000000000000000000000000000000006044820152606401610743565b6115b56110a0565b6001600160a01b0316836001600160a01b031614806115db57506115db836105c36110a0565b6116275760405162461bcd60e51b815260206004820152600b60248201527f21415554484f52495a45440000000000000000000000000000000000000000006044820152606401610743565b6108a78282610768565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff16610a725760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556116906110a0565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff1615610a725760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191690556117316110a0565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b610a728282612018565b6108a7838383612032565b7f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a8486117b7816108d96110a0565b610a728261204d565b610a728282611631565b600054610100900460ff166118475760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610743565b61184f6120f5565b6118576120f5565b610a728282612174565b6000818152609960205260408120546001600160a01b03161515610622565b6118886110a0565b6001600160a01b0316826001600160a01b031614806118ae57506118ae826105c36110a0565b6118fa5760405162461bcd60e51b815260206004820152600b60248201527f21415554484f52495a45440000000000000000000000000000000000000000006044820152606401610743565b61190381610c5e565b6001600160a01b0316826001600160a01b0316146119635760405162461bcd60e51b815260206004820152600960248201527f4e4f545f4f574e455200000000000000000000000000000000000000000000006044820152606401610743565b610a728161204d565b806119b95760405162461bcd60e51b815260206004820152601a60248201527f444154415f4d5553545f434f4e5441494e5f544f4b454e5552490000000000006044820152606401610743565b6119f98383838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061221892505050565b6108fd848484848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061224f92505050565b816001600160a01b0316836001600160a01b03161415611a9c5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610743565b6001600160a01b038381166000818152609c6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611b148484846112e7565b611b20848484846122d8565b6108fd5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610743565b6000611ba0816108d96110a0565b5060fb805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b038316611c265760405162461bcd60e51b815260206004820152600c60248201527f5a45524f5f4144445245535300000000000000000000000000000000000000006044820152606401610743565b611c2e6110a0565b6001600160a01b0316836001600160a01b03161480611c545750611c54836105c36110a0565b611ca05760405162461bcd60e51b815260206004820152600b60248201527f21415554484f52495a45440000000000000000000000000000000000000000006044820152606401610743565b6108a7838383611a3a565b8060005b8181101561099f576000848483818110611cd957634e487b7160e01b600052603260045260246000fd5b905060200201359050611ced878783610903565b5080611cf881612e0b565b915050611caf565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd000000000000000000000000000000000000000000000000000000001480611d9357507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b80610622575061062282612473565b60606000611db1836002612d57565b611dbc906002612d3f565b67ffffffffffffffff811115611de257634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611e0c576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611e5157634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611ec257634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000611efe846002612d57565b611f09906001612d3f565b90505b6001811115611fc2577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611f5857634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110611f7c57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93611fbb81612db9565b9050611f0c565b5083156120115760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610743565b9392505050565b610a7282826040518060200160405280600081525061224f565b6108a783838360405180602001604052806000815250610e88565b600061205882610c5e565b90506120656000836110e4565b6001600160a01b0381166000908152609a6020526040812080546001929061208e908490612d76565b9091555050600082815260996020526040808220805473ffffffffffffffffffffffffffffffffffffffff19169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b600054610100900460ff166121725760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610743565b565b600054610100900460ff166121f15760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610743565b8151612204906097906020850190612659565b5080516108a7906098906020840190612659565b8080602001905181019061222c9190612b1f565b600083815260fd6020908152604090912082516108a79391929190910190612659565b612259838361250a565b61226660008484846122d8565b6108a75760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610743565b60006001600160a01b0384163b1561246857836001600160a01b031663150b7a026123016110a0565b8786866040518563ffffffff1660e01b81526004016123239493929190612c97565b602060405180830381600087803b15801561233d57600080fd5b505af192505050801561236d575060408051601f3d908101601f1916820190925261236a91810190612b03565b60015b61241d573d80801561239b576040519150601f19603f3d011682016040523d82523d6000602084013e6123a0565b606091505b5080516124155760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610743565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a02000000000000000000000000000000000000000000000000000000001490506112df565b506001949350505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061062257507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610622565b6001600160a01b0382166125605760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610743565b6000818152609960205260409020546001600160a01b0316156125c55760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610743565b6001600160a01b0382166000908152609a602052604081208054600192906125ee908490612d3f565b9091555050600081815260996020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b82805461266590612dd0565b90600052602060002090601f01602090048101928261268757600085556126cd565b82601f106126a057805160ff19168380011785556126cd565b828001600101855582156126cd579182015b828111156126cd5782518255916020019190600101906126b2565b506126d99291506126dd565b5090565b5b808211156126d957600081556001016126de565b600061270561270084612d17565b612ce6565b905082815283838301111561271957600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b038116811461062557600080fd5b60008083601f840112612758578182fd5b50813567ffffffffffffffff81111561276f578182fd5b602083019150836020808302850101111561278957600080fd5b9250929050565b8035801515811461062557600080fd5b60008083601f8401126127b1578182fd5b50813567ffffffffffffffff8111156127c8578182fd5b60208301915083602082850101111561278957600080fd5b6000602082840312156127f1578081fd5b61201182612730565b6000806040838503121561280c578081fd5b61281583612730565b915061282360208401612730565b90509250929050565b60008060008060608587031215612841578182fd5b61284a85612730565b935061285860208601612730565b9250604085013567ffffffffffffffff811115612873578283fd5b61287f87828801612747565b95989497509550505050565b600080600080600080608087890312156128a3578182fd5b6128ac87612730565b95506128ba60208801612730565b9450604087013567ffffffffffffffff808211156128d6578384fd5b6128e28a838b01612747565b909650945060608901359150808211156128fa578384fd5b5061290789828a016127a0565b979a9699509497509295939492505050565b60008060006060848603121561292d578283fd5b61293684612730565b925061294460208501612730565b915061295260408501612790565b90509250925092565b60008060006060848603121561296f578283fd5b61297884612730565b925061298660208501612730565b9150604084013590509250925092565b600080600080608085870312156129ab578384fd5b6129b485612730565b93506129c260208601612730565b925060408501359150606085013567ffffffffffffffff8111156129e4578182fd5b8501601f810187136129f4578182fd5b612a03878235602084016126f2565b91505092959194509250565b60008060408385031215612a21578182fd5b612a2a83612730565b915061282360208401612790565b60008060408385031215612a4a578182fd5b612a5383612730565b946020939093013593505050565b60008060008060608587031215612a76578182fd5b612a7f85612730565b935060208501359250604085013567ffffffffffffffff811115612aa1578283fd5b61287f878288016127a0565b600060208284031215612abe578081fd5b5035919050565b60008060408385031215612ad7578182fd5b8235915061282360208401612730565b600060208284031215612af8578081fd5b813561201181612e52565b600060208284031215612b14578081fd5b815161201181612e52565b600060208284031215612b30578081fd5b815167ffffffffffffffff811115612b46578182fd5b8201601f81018413612b56578182fd5b8051612b6461270082612d17565b818152856020838501011115612b78578384fd5b612b89826020830160208601612d8d565b95945050505050565b60008060408385031215612ba4578182fd5b82359150602083013567ffffffffffffffff811115612bc1578182fd5b8301601f81018513612bd1578182fd5b612be0858235602084016126f2565b9150509250929050565b60008151808452612c02816020860160208601612d8d565b601f01601f19169290920160200192915050565b60007f416363657373436f6e74726f6c3a206163636f756e742000000000000000000082528351612c4e816017850160208801612d8d565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351612c8b816028840160208801612d8d565b01602801949350505050565b60006001600160a01b03808716835280861660208401525083604083015260806060830152612cc96080830184612bea565b9695505050505050565b6000602082526120116020830184612bea565b604051601f8201601f1916810167ffffffffffffffff81118282101715612d0f57612d0f612e3c565b604052919050565b600067ffffffffffffffff821115612d3157612d31612e3c565b50601f01601f191660200190565b60008219821115612d5257612d52612e26565b500190565b6000816000190483118215151615612d7157612d71612e26565b500290565b600082821015612d8857612d88612e26565b500390565b60005b83811015612da8578181015183820152602001612d90565b838111156108fd5750506000910152565b600081612dc857612dc8612e26565b506000190190565b600281046001821680612de457607f821691505b60208210811415612e0557634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612e1f57612e1f612e26565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b7fffffffff0000000000000000000000000000000000000000000000000000000081168114610ac157600080fdfea2646970667358221220c83f3062f5c33122e1f76a783660dae77ae59803e35f9af1337109ac2ef4a22b64736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102925760003560e01c80636352211e11610160578063b88d4fde116100d8578063d547cfb71161008c578063e985e9c511610071578063e985e9c5146105b5578063eeb5a5d1146105f1578063f3993d111461060457610292565b8063d547cfb71461059a578063da742228146105a257610292565b8063ce1b815f116100bd578063ce1b815f14610558578063d539139314610560578063d547741f1461058757610292565b8063b88d4fde14610532578063c87b56dd1461054557610292565b806394d008ef1161012f578063a217fddf11610114578063a217fddf14610504578063a22cb4651461050c578063ae882b651461051f57610292565b806394d008ef146104e957806395d89b41146104fc57610292565b80636352211e1461047757806370a082311461048a57806379cc67901461049d57806391d14854146104b057610292565b80632b9917461161020e57806342842e0e116101c2578063485cc955116101a7578063485cc9551461043e5780634f558e7914610451578063572b6c051461046457610292565b806342842e0e1461041857806342966c681461042b57610292565b806336568abe116101f357806336568abe146103cb57806338841782146103de57806340c10f191461040557610292565b80632b991746146103a55780632f2ff15d146103b857610292565b8063162094c411610265578063248a9ca31161024a578063248a9ca31461033a578063282c51f31461036b57806328cfbd461461039257610292565b8063162094c41461031457806323b872dd1461032757610292565b806301ffc9a71461029757806306fdde03146102bf578063081812fc146102d4578063095ea7b3146102ff575b600080fd5b6102aa6102a5366004612ae7565b610617565b60405190151581526020015b60405180910390f35b6102c761062a565b6040516102b69190612cd3565b6102e76102e2366004612aad565b6106bd565b6040516001600160a01b0390911681526020016102b6565b61031261030d366004612a38565b610768565b005b610312610322366004612b92565b6108ac565b61031261033536600461295b565b610903565b61035d610348366004612aad565b60009081526065602052604090206001015490565b6040519081526020016102b6565b61035d7f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a84881565b6103126103a036600461288b565b610991565b6103126103b336600461295b565b6109a7565b6103126103c6366004612ac5565b6109b2565b6103126103d9366004612ac5565b6109da565b61035d7f6bd6b5318a46e5fff572d5e4258a20774aab40cc35ac7680654b9081fcc82f8081565b610312610413366004612a38565b610a76565b61031261042636600461295b565b610aad565b610312610439366004612aad565b610ab8565b61031261044c3660046127fa565b610ac4565b6102aa61045f366004612aad565b610c3a565b6102aa6104723660046127e0565b610c45565b6102e7610485366004612aad565b610c5e565b61035d6104983660046127e0565b610ce9565b6103126104ab366004612a38565b610d83565b6102aa6104be366004612ac5565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6103126104f7366004612a61565b610d8d565b6102c7610dcd565b61035d600081565b61031261051a366004612a0f565b610ddc565b6102c761052d366004612aad565b610dee565b610312610540366004612996565b610e88565b6102c7610553366004612aad565b610f17565b6102e7611019565b61035d7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b610312610595366004612ac5565b611032565b6102c761105a565b6103126105b03660046127e0565b611067565b6102aa6105c33660046127fa565b6001600160a01b039182166000908152609c6020908152604080832093909416825291909152205460ff1690565b6103126105ff366004612919565b61107e565b61031261061236600461282c565b611089565b600061062282611095565b90505b919050565b60606097805461063990612dd0565b80601f016020809104026020016040519081016040528092919081815260200182805461066590612dd0565b80156106b25780601f10610687576101008083540402835291602001916106b2565b820191906000526020600020905b81548152906001019060200180831161069557829003601f168201915b505050505090505b90565b6000818152609960205260408120546001600160a01b031661074c5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e000000000000000000000000000000000000000060648201526084015b60405180910390fd5b506000908152609b60205260409020546001600160a01b031690565b600061077382610c5e565b9050806001600160a01b0316836001600160a01b031614156107fd5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610743565b806001600160a01b031661080f6110a0565b6001600160a01b0316148061082b575061082b816105c36110a0565b61089d5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610743565b6108a783836110e4565b505050565b7f6bd6b5318a46e5fff572d5e4258a20774aab40cc35ac7680654b9081fcc82f806108de816108d96110a0565b61115f565b600083815260fd6020908152604090912083516108fd92850190612659565b50505050565b61091461090e6110a0565b826111df565b6109865760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610743565b6108a78383836112e7565b61099f8686868686866114c1565b505050505050565b6108a7838383611557565b6000828152606560205260409020600101546109d0816108d96110a0565b6108a78383611631565b6109e26110a0565b6001600160a01b0316816001600160a01b031614610a685760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610743565b610a7282826116d4565b5050565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6610aa3816108d96110a0565b6108a78383611775565b6108a783838361177f565b610ac18161178a565b50565b600054610100900460ff16610adf5760005460ff1615610ae3565b303b155b610b555760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610743565b600054610100900460ff16158015610b80576000805460ff1961ff0019909116610100171660011790555b610b8b6000836117c0565b60fb805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038516179055604080518082018252601781527f53616e64626f78277320415353455473204552433732310000000000000000006020808301919091528251808401909352600b83527f415353455445524337323100000000000000000000000000000000000000000090830152610c24916117ca565b80156108a7576000805461ff0019169055505050565b600061062282611861565b60fb546000906001600160a01b03808416911614610622565b6000818152609960205260408120546001600160a01b0316806106225760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610743565b60006001600160a01b038216610d675760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610743565b506001600160a01b03166000908152609a602052604090205490565b610a728282611880565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6610dba816108d96110a0565b610dc68585858561196c565b5050505050565b60606098805461063990612dd0565b610a72610de76110a0565b8383611a3a565b60fd6020526000908152604090208054610e0790612dd0565b80601f0160208091040260200160405190810160405280929190818152602001828054610e3390612dd0565b8015610e805780601f10610e5557610100808354040283529160200191610e80565b820191906000526020600020905b815481529060010190602001808311610e6357829003601f168201915b505050505081565b610e99610e936110a0565b836111df565b610f0b5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610743565b6108fd84848484611b09565b60606000610f2483610c5e565b6001600160a01b03161415610f7b5760405162461bcd60e51b815260206004820152600c60248201527f5a45524f5f4144445245535300000000000000000000000000000000000000006044820152606401610743565b600082815260fd602052604090208054610f9490612dd0565b80601f0160208091040260200160405190810160405280929190818152602001828054610fc090612dd0565b801561100d5780601f10610fe25761010080835404028352916020019161100d565b820191906000526020600020905b815481529060010190602001808311610ff057829003601f168201915b50505050509050919050565b600061102d60fb546001600160a01b031690565b905090565b600082815260656020526040902060010154611050816108d96110a0565b6108a783836116d4565b60fc8054610e0790612dd0565b6000611075816108d96110a0565b610a7282611b92565b6108a7838383611bd0565b6108fd84848484611cab565b600061062282611d00565b60006110ab33610c45565b156110dd57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c6106ba565b50336106ba565b6000818152609b60205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038416908117909155819061112682610c5e565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff16610a725761119d816001600160a01b03166014611da2565b6111a8836020611da2565b6040516020016111b9929190612c16565b60408051601f198184030181529082905262461bcd60e51b825261074391600401612cd3565b6000818152609960205260408120546001600160a01b03166112695760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e00000000000000000000000000000000000000006064820152608401610743565b600061127483610c5e565b9050806001600160a01b0316846001600160a01b031614806112af5750836001600160a01b03166112a4846106bd565b6001600160a01b0316145b806112df57506001600160a01b038082166000908152609c602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b03166112fa82610c5e565b6001600160a01b0316146113765760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e00000000000000000000000000000000000000000000006064820152608401610743565b6001600160a01b0382166113f15760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610743565b6113fc6000826110e4565b6001600160a01b0383166000908152609a60205260408120805460019290611425908490612d76565b90915550506001600160a01b0382166000908152609a60205260408120805460019290611453908490612d3f565b9091555050600081815260996020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b8260005b8181101561154d5760008686838181106114ef57634e487b7160e01b600052603260045260246000fd5b90506020020135905061153a89898388888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e8892505050565b508061154581612e0b565b9150506114c5565b5050505050505050565b6001600160a01b0383166115ad5760405162461bcd60e51b815260206004820152600c60248201527f5a45524f5f4144445245535300000000000000000000000000000000000000006044820152606401610743565b6115b56110a0565b6001600160a01b0316836001600160a01b031614806115db57506115db836105c36110a0565b6116275760405162461bcd60e51b815260206004820152600b60248201527f21415554484f52495a45440000000000000000000000000000000000000000006044820152606401610743565b6108a78282610768565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff16610a725760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556116906110a0565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff1615610a725760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191690556117316110a0565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b610a728282612018565b6108a7838383612032565b7f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a8486117b7816108d96110a0565b610a728261204d565b610a728282611631565b600054610100900460ff166118475760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610743565b61184f6120f5565b6118576120f5565b610a728282612174565b6000818152609960205260408120546001600160a01b03161515610622565b6118886110a0565b6001600160a01b0316826001600160a01b031614806118ae57506118ae826105c36110a0565b6118fa5760405162461bcd60e51b815260206004820152600b60248201527f21415554484f52495a45440000000000000000000000000000000000000000006044820152606401610743565b61190381610c5e565b6001600160a01b0316826001600160a01b0316146119635760405162461bcd60e51b815260206004820152600960248201527f4e4f545f4f574e455200000000000000000000000000000000000000000000006044820152606401610743565b610a728161204d565b806119b95760405162461bcd60e51b815260206004820152601a60248201527f444154415f4d5553545f434f4e5441494e5f544f4b454e5552490000000000006044820152606401610743565b6119f98383838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061221892505050565b6108fd848484848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061224f92505050565b816001600160a01b0316836001600160a01b03161415611a9c5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610743565b6001600160a01b038381166000818152609c6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611b148484846112e7565b611b20848484846122d8565b6108fd5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610743565b6000611ba0816108d96110a0565b5060fb805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b038316611c265760405162461bcd60e51b815260206004820152600c60248201527f5a45524f5f4144445245535300000000000000000000000000000000000000006044820152606401610743565b611c2e6110a0565b6001600160a01b0316836001600160a01b03161480611c545750611c54836105c36110a0565b611ca05760405162461bcd60e51b815260206004820152600b60248201527f21415554484f52495a45440000000000000000000000000000000000000000006044820152606401610743565b6108a7838383611a3a565b8060005b8181101561099f576000848483818110611cd957634e487b7160e01b600052603260045260246000fd5b905060200201359050611ced878783610903565b5080611cf881612e0b565b915050611caf565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd000000000000000000000000000000000000000000000000000000001480611d9357507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b80610622575061062282612473565b60606000611db1836002612d57565b611dbc906002612d3f565b67ffffffffffffffff811115611de257634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611e0c576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611e5157634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611ec257634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000611efe846002612d57565b611f09906001612d3f565b90505b6001811115611fc2577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611f5857634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110611f7c57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93611fbb81612db9565b9050611f0c565b5083156120115760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610743565b9392505050565b610a7282826040518060200160405280600081525061224f565b6108a783838360405180602001604052806000815250610e88565b600061205882610c5e565b90506120656000836110e4565b6001600160a01b0381166000908152609a6020526040812080546001929061208e908490612d76565b9091555050600082815260996020526040808220805473ffffffffffffffffffffffffffffffffffffffff19169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b600054610100900460ff166121725760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610743565b565b600054610100900460ff166121f15760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610743565b8151612204906097906020850190612659565b5080516108a7906098906020840190612659565b8080602001905181019061222c9190612b1f565b600083815260fd6020908152604090912082516108a79391929190910190612659565b612259838361250a565b61226660008484846122d8565b6108a75760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610743565b60006001600160a01b0384163b1561246857836001600160a01b031663150b7a026123016110a0565b8786866040518563ffffffff1660e01b81526004016123239493929190612c97565b602060405180830381600087803b15801561233d57600080fd5b505af192505050801561236d575060408051601f3d908101601f1916820190925261236a91810190612b03565b60015b61241d573d80801561239b576040519150601f19603f3d011682016040523d82523d6000602084013e6123a0565b606091505b5080516124155760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610743565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a02000000000000000000000000000000000000000000000000000000001490506112df565b506001949350505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061062257507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610622565b6001600160a01b0382166125605760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610743565b6000818152609960205260409020546001600160a01b0316156125c55760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610743565b6001600160a01b0382166000908152609a602052604081208054600192906125ee908490612d3f565b9091555050600081815260996020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b82805461266590612dd0565b90600052602060002090601f01602090048101928261268757600085556126cd565b82601f106126a057805160ff19168380011785556126cd565b828001600101855582156126cd579182015b828111156126cd5782518255916020019190600101906126b2565b506126d99291506126dd565b5090565b5b808211156126d957600081556001016126de565b600061270561270084612d17565b612ce6565b905082815283838301111561271957600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b038116811461062557600080fd5b60008083601f840112612758578182fd5b50813567ffffffffffffffff81111561276f578182fd5b602083019150836020808302850101111561278957600080fd5b9250929050565b8035801515811461062557600080fd5b60008083601f8401126127b1578182fd5b50813567ffffffffffffffff8111156127c8578182fd5b60208301915083602082850101111561278957600080fd5b6000602082840312156127f1578081fd5b61201182612730565b6000806040838503121561280c578081fd5b61281583612730565b915061282360208401612730565b90509250929050565b60008060008060608587031215612841578182fd5b61284a85612730565b935061285860208601612730565b9250604085013567ffffffffffffffff811115612873578283fd5b61287f87828801612747565b95989497509550505050565b600080600080600080608087890312156128a3578182fd5b6128ac87612730565b95506128ba60208801612730565b9450604087013567ffffffffffffffff808211156128d6578384fd5b6128e28a838b01612747565b909650945060608901359150808211156128fa578384fd5b5061290789828a016127a0565b979a9699509497509295939492505050565b60008060006060848603121561292d578283fd5b61293684612730565b925061294460208501612730565b915061295260408501612790565b90509250925092565b60008060006060848603121561296f578283fd5b61297884612730565b925061298660208501612730565b9150604084013590509250925092565b600080600080608085870312156129ab578384fd5b6129b485612730565b93506129c260208601612730565b925060408501359150606085013567ffffffffffffffff8111156129e4578182fd5b8501601f810187136129f4578182fd5b612a03878235602084016126f2565b91505092959194509250565b60008060408385031215612a21578182fd5b612a2a83612730565b915061282360208401612790565b60008060408385031215612a4a578182fd5b612a5383612730565b946020939093013593505050565b60008060008060608587031215612a76578182fd5b612a7f85612730565b935060208501359250604085013567ffffffffffffffff811115612aa1578283fd5b61287f878288016127a0565b600060208284031215612abe578081fd5b5035919050565b60008060408385031215612ad7578182fd5b8235915061282360208401612730565b600060208284031215612af8578081fd5b813561201181612e52565b600060208284031215612b14578081fd5b815161201181612e52565b600060208284031215612b30578081fd5b815167ffffffffffffffff811115612b46578182fd5b8201601f81018413612b56578182fd5b8051612b6461270082612d17565b818152856020838501011115612b78578384fd5b612b89826020830160208601612d8d565b95945050505050565b60008060408385031215612ba4578182fd5b82359150602083013567ffffffffffffffff811115612bc1578182fd5b8301601f81018513612bd1578182fd5b612be0858235602084016126f2565b9150509250929050565b60008151808452612c02816020860160208601612d8d565b601f01601f19169290920160200192915050565b60007f416363657373436f6e74726f6c3a206163636f756e742000000000000000000082528351612c4e816017850160208801612d8d565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351612c8b816028840160208801612d8d565b01602801949350505050565b60006001600160a01b03808716835280861660208401525083604083015260806060830152612cc96080830184612bea565b9695505050505050565b6000602082526120116020830184612bea565b604051601f8201601f1916810167ffffffffffffffff81118282101715612d0f57612d0f612e3c565b604052919050565b600067ffffffffffffffff821115612d3157612d31612e3c565b50601f01601f191660200190565b60008219821115612d5257612d52612e26565b500190565b6000816000190483118215151615612d7157612d71612e26565b500290565b600082821015612d8857612d88612e26565b500390565b60005b83811015612da8578181015183820152602001612d90565b838111156108fd5750506000910152565b600081612dc857612dc8612e26565b506000190190565b600281046001821680612de457607f821691505b60208210811415612e0557634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612e1f57612e1f612e26565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b7fffffffff0000000000000000000000000000000000000000000000000000000081168114610ac157600080fdfea2646970667358221220c83f3062f5c33122e1f76a783660dae77ae59803e35f9af1337109ac2ef4a22b64736f6c63430008020033",
  "devdoc": {
    "details": "This contract supports meta transactions.This contract is final, don't inherit from it.",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mint(address,uint256)": {
        "details": "Should be callable only by the AssetTunnel on L1 via MINTER_ROLE.",
        "params": {
          "id": "ERC721 id to be used.",
          "to": "Address that will receive the token."
        }
      },
      "mint(address,uint256,bytes)": {
        "details": "Should be callable only by the AssetTunnel on L1.If you want to retain token metadata from L2 to L1 during exit, you must implement this method.",
        "params": {
          "data": "Associated token metadata, which is decoded & used to set the token's metadata hash.",
          "id": "ERC721 id to be used.",
          "to": "Address that will receive the token."
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setTokenURI(uint256,string)": {
        "details": "The metadata hash for the ERC721 may need to be manually set or overridden.",
        "params": {
          "id": "The token id.",
          "uri": "The full token URI to be used for the token id."
        }
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "params": {
          "id": "The token to get the uri of."
        },
        "returns": {
          "_0": "URI The token's URI string."
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "title": "This contract is for AssetERC721 which can be minted by a minter role.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initialize(address,address)": {
        "notice": "fulfills the purpose of a constructor in upgradeable contracts"
      },
      "mint(address,uint256)": {
        "notice": "Mint an ERC721 Asset with the provided id."
      },
      "mint(address,uint256,bytes)": {
        "notice": "Mint an ERC721 Asset with the provided id."
      },
      "setTokenURI(uint256,string)": {
        "notice": "Set the metadatahash for a given token id."
      },
      "tokenURI(uint256)": {
        "notice": "A distinct Uniform Resource Identifier (URI) for a given asset."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7669,
        "contract": "src/solc_0.8/polygon/root/asset/AssetERC721.sol:AssetERC721",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7672,
        "contract": "src/solc_0.8/polygon/root/asset/AssetERC721.sol:AssetERC721",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 9670,
        "contract": "src/solc_0.8/polygon/root/asset/AssetERC721.sol:AssetERC721",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10532,
        "contract": "src/solc_0.8/polygon/root/asset/AssetERC721.sol:AssetERC721",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 7074,
        "contract": "src/solc_0.8/polygon/root/asset/AssetERC721.sol:AssetERC721",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)7069_storage)"
      },
      {
        "astId": 7361,
        "contract": "src/solc_0.8/polygon/root/asset/AssetERC721.sol:AssetERC721",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7992,
        "contract": "src/solc_0.8/polygon/root/asset/AssetERC721.sol:AssetERC721",
        "label": "_name",
        "offset": 0,
        "slot": "151",
        "type": "t_string_storage"
      },
      {
        "astId": 7994,
        "contract": "src/solc_0.8/polygon/root/asset/AssetERC721.sol:AssetERC721",
        "label": "_symbol",
        "offset": 0,
        "slot": "152",
        "type": "t_string_storage"
      },
      {
        "astId": 7998,
        "contract": "src/solc_0.8/polygon/root/asset/AssetERC721.sol:AssetERC721",
        "label": "_owners",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 8002,
        "contract": "src/solc_0.8/polygon/root/asset/AssetERC721.sol:AssetERC721",
        "label": "_balances",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8006,
        "contract": "src/solc_0.8/polygon/root/asset/AssetERC721.sol:AssetERC721",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "155",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 8012,
        "contract": "src/solc_0.8/polygon/root/asset/AssetERC721.sol:AssetERC721",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "156",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 8823,
        "contract": "src/solc_0.8/polygon/root/asset/AssetERC721.sol:AssetERC721",
        "label": "__gap",
        "offset": 0,
        "slot": "157",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 22953,
        "contract": "src/solc_0.8/polygon/root/asset/AssetERC721.sol:AssetERC721",
        "label": "__gap1",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 22955,
        "contract": "src/solc_0.8/polygon/root/asset/AssetERC721.sol:AssetERC721",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "251",
        "type": "t_address"
      },
      {
        "astId": 22957,
        "contract": "src/solc_0.8/polygon/root/asset/AssetERC721.sol:AssetERC721",
        "label": "baseTokenURI",
        "offset": 0,
        "slot": "252",
        "type": "t_string_storage"
      },
      {
        "astId": 22961,
        "contract": "src/solc_0.8/polygon/root/asset/AssetERC721.sol:AssetERC721",
        "label": "tokenUris",
        "offset": 0,
        "slot": "253",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 23440,
        "contract": "src/solc_0.8/polygon/root/asset/AssetERC721.sol:AssetERC721",
        "label": "__gap2",
        "offset": 0,
        "slot": "254",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)7069_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)7069_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)7069_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 7066,
            "contract": "src/solc_0.8/polygon/root/asset/AssetERC721.sol:AssetERC721",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 7068,
            "contract": "src/solc_0.8/polygon/root/asset/AssetERC721.sol:AssetERC721",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}