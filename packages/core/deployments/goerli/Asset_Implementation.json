{
  "address": "0x9b48829aB0BCca6305c7E94a272d829Fa5984C8d",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IAssetERC721",
          "name": "assetERC721",
          "type": "address"
        }
      ],
      "name": "AssetERC721Set",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bouncer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "Bouncer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldBouncerAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newBouncerAdmin",
          "type": "address"
        }
      ],
      "name": "BouncerAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newId",
          "type": "uint256"
        }
      ],
      "name": "Extraction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "predicate",
          "type": "address"
        }
      ],
      "name": "PredicateSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "superOperator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "SuperOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_assetERC721",
      "outputs": [
        {
          "internalType": "contract IAssetERC721",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "changeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newBouncerAdmin",
          "type": "address"
        }
      ],
      "name": "changeBouncerAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "collectionIndexOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "collectionOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "doesHashExist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "extractERC721From",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBouncerAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getChainIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bouncerAdmin",
          "type": "address"
        },
        {
          "internalType": "contract IAssetERC721",
          "name": "assetERC721",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "chainIndex",
          "type": "uint8"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bouncerAdmin",
          "type": "address"
        },
        {
          "internalType": "contract IAssetERC721",
          "name": "assetERC721",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "chainIndex",
          "type": "uint8"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isOperator",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "isBouncer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "isCollection",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "isSuperOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "metadataHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint40",
          "name": "packId",
          "type": "uint40"
        },
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mintDeficit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mintMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAllFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAssetERC721",
          "name": "assetERC721",
          "type": "address"
        }
      ],
      "name": "setAssetERC721",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bouncer",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setBouncer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "predicate",
          "type": "address"
        }
      ],
      "name": "setPredicate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "superOperator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setSuperOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "id",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb691c468edbed41d688076204beb034d8fb2ed52ab4e52bb76b9499a01cdcbf6",
  "receipt": {
    "to": null,
    "from": "0xA796AE911621E00809E0E7C8f0AD6BF118E5139e",
    "contractAddress": "0x9b48829aB0BCca6305c7E94a272d829Fa5984C8d",
    "transactionIndex": 11,
    "gasUsed": "3694987",
    "logsBloom": "0x
    "blockHash": "0x2978616fee27a09b28ed8912c772f19a2493266b8b31d7238d6d2f40d03db382",
    "transactionHash": "0xb691c468edbed41d688076204beb034d8fb2ed52ab4e52bb76b9499a01cdcbf6",
    "logs": [],
    "blockNumber": 7381768,
    "cumulativeGasUsed": "7962999",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "65e08b938528b163bea66d16d1e23da8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IAssetERC721\",\"name\":\"assetERC721\",\"type\":\"address\"}],\"name\":\"AssetERC721Set\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bouncer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"Bouncer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldBouncerAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newBouncerAdmin\",\"type\":\"address\"}],\"name\":\"BouncerAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newId\",\"type\":\"uint256\"}],\"name\":\"Extraction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"predicate\",\"type\":\"address\"}],\"name\":\"PredicateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"superOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SuperOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_assetERC721\",\"outputs\":[{\"internalType\":\"contract IAssetERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBouncerAdmin\",\"type\":\"address\"}],\"name\":\"changeBouncerAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"collectionIndexOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"collectionOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"doesHashExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"extractERC721From\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBouncerAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getChainIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bouncerAdmin\",\"type\":\"address\"},{\"internalType\":\"contract IAssetERC721\",\"name\":\"assetERC721\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"chainIndex\",\"type\":\"uint8\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bouncerAdmin\",\"type\":\"address\"},{\"internalType\":\"contract IAssetERC721\",\"name\":\"assetERC721\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"chainIndex\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOperator\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isBouncer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isCollection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isSuperOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"metadataHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"packId\",\"type\":\"uint40\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintDeficit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAllFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAssetERC721\",\"name\":\"assetERC721\",\"type\":\"address\"}],\"name\":\"setAssetERC721\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bouncer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setBouncer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"predicate\",\"type\":\"address\"}],\"name\":\"setPredicate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"superOperator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setSuperOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"id\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"params\":{\"id\":\"the token type of which to get the balance of.\",\"owner\":\"The address of the token holder.\"},\"returns\":{\"_0\":\"the balance of `owner` for the token type `id`.\"}},\"balanceOfBatch(address[],uint256[])\":{\"params\":{\"ids\":\"ids of each token type to query.\",\"owners\":\"the addresses of the token holders queried.\"},\"returns\":{\"_0\":\"the balance of each `owners` for each token type `ids`.\"}},\"burn(uint256,uint256)\":{\"params\":{\"amount\":\"amount of token to burn.\",\"id\":\"token type which will be burnt.\"}},\"burnFrom(address,uint256,uint256)\":{\"params\":{\"amount\":\"amount of token to burn.\",\"from\":\"address whose token is to be burnt.\",\"id\":\"token type which will be burnt.\"}},\"changeAdmin(address)\":{\"details\":\"Change the administrator to be `newAdmin`.\",\"params\":{\"newAdmin\":\"The address of the new administrator.\"}},\"changeBouncerAdmin(address)\":{\"params\":{\"newBouncerAdmin\":\"address of the new minting administrator.\"}},\"collectionIndexOf(uint256)\":{\"params\":{\"id\":\"the token to get the index of.\"},\"returns\":{\"_0\":\"the index/order at which the token `id` was minted in a collection.\"}},\"collectionOf(uint256)\":{\"params\":{\"id\":\"the token to get the collection of.\"},\"returns\":{\"_0\":\"the collection the NFT is part of.\"}},\"doesHashExist(uint256)\":{\"details\":\"if IS_NFT > 0 then PACK_NUM_FT_TYPES may be 0\",\"params\":{\"id\":\"the token to check.\"},\"returns\":{\"_0\":\"bool whether a given id has a valid structure.\"}},\"extractERC721From(address,uint256,address)\":{\"details\":\"Extraction is limited to bouncers.\",\"params\":{\"id\":\"the token type to extract from.\",\"sender\":\"address which own the token to be extracted.\",\"to\":\"address which will receive the token.\"},\"returns\":{\"_0\":\"newId the id of the newly minted NFT.\"}},\"getAdmin()\":{\"details\":\"Get the current administrator of this contract.\",\"returns\":{\"_0\":\"The current administrator of this contract.\"}},\"getBouncerAdmin()\":{\"returns\":{\"_0\":\"the current minting administrator in charge of minting rights.\"}},\"getChainIndex(uint256)\":{\"details\":\"take care not to confuse chainIndex with chain ID.\",\"params\":{\"id\":\"the token id to query.\"},\"returns\":{\"_0\":\"chainIndex the chainIndex that the token was minted on originally.\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"operator\":\"address of authorized operator.\",\"owner\":\"the owner of the tokens.\"},\"returns\":{\"isOperator\":\"true if the operator is approved, false if not.\"}},\"isBouncer(address)\":{\"params\":{\"who\":\"The address to query.\"},\"returns\":{\"_0\":\"whether the address has minting rights.\"}},\"isCollection(uint256)\":{\"params\":{\"id\":\"collectionId to check.\"},\"returns\":{\"_0\":\"whether the id is a collection.\"}},\"isSuperOperator(address)\":{\"params\":{\"who\":\"The address to query.\"},\"returns\":{\"_0\":\"whether the address has superOperator rights.\"}},\"mint(address,uint256,uint256,bytes)\":{\"details\":\"Should be callable only by AssetERC1155Tunnel.Encoded bytes32 metadata hash must be provided as data. Make sure minting is done only by this function.\",\"params\":{\"account\":\"user address for whom token is being minted.\",\"amount\":\"amount of token being minted.\",\"data\":\"token metadata.\",\"id\":\"token which is being minted.\"}},\"mint(address,uint40,bytes32,uint256,address,bytes)\":{\"details\":\"Function implementation reserved for future use cases on L1.For this function it is not required to provide data.\",\"params\":{\"creator\":\"address of the creator of the token.\",\"data\":\"extra data to accompany the minting call.\",\"hash\":\"hash of an IPFS cidv1 folder that contains the metadata of the token type in the file 0.json.\",\"owner\":\"address that will receive the tokens.\",\"packId\":\"unique packId for that token.\",\"supply\":\"number of tokens minted for that token type.\"},\"returns\":{\"id\":\"the id of the newly minted token type.\"}},\"mintDeficit(address,uint256,uint256)\":{\"details\":\"This mint calls for add instead of replace in packedTokenBalance\",\"params\":{\"account\":\"address of the ownerof tokens.\",\"amount\":\"quantity of the token to be minted.\",\"id\":\"id of the token to be minted.\"}},\"mintMultiple(address,uint256[],uint256[],bytes)\":{\"details\":\"Should be callable only by AssetERC1155Tunnel.Encoded bytes32[] metadata hashes must be provided as data.\",\"params\":{\"amounts\":\"supply for each token type.\",\"data\":\"token metadata.\",\"ids\":\"ids to mint.\",\"to\":\"address to mint to.\"}},\"name()\":{\"returns\":{\"_name\":\"the name of the tokens.\"}},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"call data should be optimized to order ids so packedBalance can be used efficiently.\",\"params\":{\"data\":\"aditional data accompanying the transfer.\",\"from\":\"address from which tokens are transfered.\",\"ids\":\"ids of each token type transfered.\",\"to\":\"address to which the token will be transfered.\",\"values\":\"amount of each token type transfered.\"}},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"params\":{\"data\":\"aditional data accompanying the transfer.\",\"from\":\"address from which tokens are transfered.\",\"id\":\"the token type transfered.\",\"to\":\"address to which the token will be transfered.\",\"value\":\"amount of token transfered.\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"approved\":\"whether to approve or revoke\",\"operator\":\"address which will be granted rights to transfer all tokens of the caller.\"}},\"setApprovalForAllFor(address,address,bool)\":{\"details\":\"used for Meta Transaction (from metaTransactionContract).\",\"params\":{\"approved\":\"whether to approve or revoke.\",\"operator\":\"address which will be granted rights to transfer all token owned by `sender`.\",\"sender\":\"address which grant approval.\"}},\"setAssetERC721(address)\":{\"params\":{\"assetERC721\":\"the contract address to set the ERC721 contract to.\"},\"returns\":{\"_0\":\"true if the operation completes successfully.\"}},\"setBouncer(address,bool)\":{\"params\":{\"bouncer\":\"address that will be given/removed minting bouncer rights.\",\"enabled\":\"set whether the address is enabled or disabled as a minting bouncer.\"}},\"setPredicate(address)\":{\"params\":{\"predicate\":\"address that will be given minting rights for L1.\"}},\"setSuperOperator(address,bool)\":{\"params\":{\"enabled\":\"set whether the superOperator is enabled or disabled.\",\"superOperator\":\"address that will be given/removed superOperator right.\"}},\"supportsInterface(bytes4)\":{\"params\":{\"id\":\"the interface identifier, as specified in ERC-165.\"},\"returns\":{\"_0\":\"`true` if the contract implements `id`.\"}},\"symbol()\":{\"returns\":{\"_symbol\":\"the symbol of the tokens.\"}},\"uri(uint256)\":{\"params\":{\"id\":\"ERC1155 token to get the uri of.\"},\"returns\":{\"_0\":\"URI string\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balanceOf(address,uint256)\":{\"notice\":\"Get the balance of `owner` for the token type `id`.\"},\"balanceOfBatch(address[],uint256[])\":{\"notice\":\"Get the balance of `owners` for each token type `ids`.\"},\"burn(uint256,uint256)\":{\"notice\":\"Burns `amount` tokens of type `id`.\"},\"burnFrom(address,uint256,uint256)\":{\"notice\":\"Burns `amount` tokens of type `id` from `from`.\"},\"changeBouncerAdmin(address)\":{\"notice\":\"Change the minting administrator to be `newBouncerAdmin`.\"},\"collectionIndexOf(uint256)\":{\"notice\":\"Gives the index at which an NFT was minted in a collection : first of a collection get the zero index.\"},\"collectionOf(uint256)\":{\"notice\":\"Gives the collection a specific token belongs to.\"},\"doesHashExist(uint256)\":{\"notice\":\"Whether or not an ERC1155 or ERC721 tokenId has a valid structure and the metadata hash exists.\"},\"extractERC721From(address,uint256,address)\":{\"notice\":\"Extracts an EIP-721 Asset from an EIP-1155 Asset.\"},\"getBouncerAdmin()\":{\"notice\":\"Returns the current administrator in charge of minting rights.\"},\"getChainIndex(uint256)\":{\"notice\":\"Queries the chainIndex that a token was minted on originally.\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Queries the approval status of `operator` for owner `owner`.\"},\"isBouncer(address)\":{\"notice\":\"check whether address `who` is given minting bouncer rights.\"},\"isCollection(uint256)\":{\"notice\":\"Return wether the id is a collection\"},\"isSuperOperator(address)\":{\"notice\":\"check whether address `who` is given superOperator rights.\"},\"mint(address,uint256,uint256,bytes)\":{\"notice\":\"Creates `amount` tokens of token type `id`, and assigns them to `account`.\"},\"mint(address,uint40,bytes32,uint256,address,bytes)\":{\"notice\":\"Mint a token type for `creator` on slot `packId`.\"},\"mintDeficit(address,uint256,uint256)\":{\"notice\":\"function to be called by tunnel to mint deficit of minted tokens\"},\"mintMultiple(address,uint256[],uint256[],bytes)\":{\"notice\":\"Creates `amounts` tokens of token types `ids`, and assigns them to `account`.\"},\"name()\":{\"notice\":\"A descriptive name for the collection of tokens in this contract.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Transfers `values` tokens of type `ids` from  `from` to `to` (with safety call).\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"notice\":\"Transfers `value` tokens of type `id` from  `from` to `to`  (with safety call).\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Enable or disable approval for `operator` to manage all of the caller's tokens.\"},\"setApprovalForAllFor(address,address,bool)\":{\"notice\":\"Enable or disable approval for `operator` to manage all `sender`'s tokens.\"},\"setAssetERC721(address)\":{\"notice\":\"Set the ERC721 contract.\"},\"setBouncer(address,bool)\":{\"notice\":\"Enable or disable the ability of `bouncer` to mint tokens (minting bouncer rights).\"},\"setPredicate(address)\":{\"notice\":\"Set the address that will be able to mint on L1 (limited to custom predicate).\"},\"setSuperOperator(address,bool)\":{\"notice\":\"Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights).\"},\"supportsInterface(bytes4)\":{\"notice\":\"Query if a contract implements interface `id`.\"},\"symbol()\":{\"notice\":\"An abbreviated name for the collection of tokens in this contract.\"},\"uri(uint256)\":{\"notice\":\"A distinct Uniform Resource Identifier (URI) for a given ERC1155 asset.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/solc_0.8/assetERC1155/AssetERC1155.sol\":\"AssetERC1155\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-0.8/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xc743d2235b8854045c308d2f8f1ed88efed6c2bebf2b7a4a51ea42480c82e566\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"src/solc_0.8/asset/libraries/ERC1155ERC721Helper.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nlibrary ERC1155ERC721Helper {\\n    bytes32 private constant base32Alphabet = 0x6162636465666768696A6B6C6D6E6F707172737475767778797A323334353637;\\n\\n    uint256 public constant CREATOR_OFFSET_MULTIPLIER = uint256(2)**(256 - 160);\\n    uint256 public constant IS_NFT_OFFSET_MULTIPLIER = uint256(2)**(256 - 160 - 1);\\n    uint256 public constant CHAIN_INDEX_OFFSET_MULTIPLIER = uint256(2)**(256 - 160 - 1 - 8);\\n    uint256 public constant PACK_ID_OFFSET_MULTIPLIER = uint256(2)**(256 - 160 - 1 - 32 - 40);\\n    uint256 public constant PACK_NUM_FT_TYPES_OFFSET_MULTIPLIER = uint256(2)**(256 - 160 - 1 - 32 - 40 - 12);\\n    uint256 public constant NFT_INDEX_OFFSET = 63;\\n\\n    uint256 public constant IS_NFT = 0x0000000000000000000000000000000000000000800000000000000000000000;\\n    uint256 public constant NOT_IS_NFT = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFFFFFFFFFFF;\\n    uint256 public constant NFT_INDEX = 0x0000000000000000000000000000000000000000007FFFFF8000000000000000;\\n    uint256 public constant NOT_NFT_INDEX = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8000007FFFFFFFFFFFFFFF;\\n    uint256 public constant URI_ID = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000007FFFFFFFFFFFF800;\\n    uint256 public constant PACK_ID = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000007FFFFFFFFF800000;\\n    uint256 public constant PACK_INDEX = 0x00000000000000000000000000000000000000000000000000000000000007FF;\\n    uint256 public constant PACK_NUM_FT_TYPES = 0x00000000000000000000000000000000000000000000000000000000007FF800;\\n    uint256 public constant CHAIN_INDEX = 0x00000000000000000000000000000000000000007F8000000000000000000000;\\n    uint256 public constant NOT_CHAIN_INDEX = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF807FFFFFFFFFFFFFFFFFFFFF;\\n\\n    uint256 public constant MAX_SUPPLY = uint256(2)**32 - 1;\\n    uint256 public constant MAX_PACK_SIZE = uint256(2)**11;\\n    uint256 public constant MAX_NUM_FT = uint256(2)**12;\\n\\n    function toFullURI(bytes32 hash, uint256 id) external pure returns (string memory) {\\n        return string(abi.encodePacked(\\\"ipfs://bafybei\\\", hash2base32(hash), \\\"/\\\", uint2str(id & PACK_INDEX), \\\".json\\\"));\\n    }\\n\\n    // solium-disable-next-line security/no-assign-params\\n    function hash2base32(bytes32 hash) public pure returns (string memory _uintAsString) {\\n        uint256 _i = uint256(hash);\\n        uint256 k = 52;\\n        bytes memory bstr = new bytes(k);\\n        bstr[--k] = base32Alphabet[uint8((_i % 8) << 2)]; // uint8 s = uint8((256 - skip) % 5);  // (_i % (2**s)) << (5-s)\\n        _i /= 8;\\n        while (k > 0) {\\n            bstr[--k] = base32Alphabet[_i % 32];\\n            _i /= 32;\\n        }\\n        return string(bstr);\\n    }\\n\\n    // solium-disable-next-line security/no-assign-params\\n    function uint2str(uint256 _i) public pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            bstr[--k] = bytes1(uint8(48 + uint8(_i % 10)));\\n            _i /= 10;\\n        }\\n\\n        return string(bstr);\\n    }\\n}\\n\",\"keccak256\":\"0x0fa0ba1d7e2e46c9fb7e1029731be7ddbb648c6909c08967d7106f5d4956d6b3\",\"license\":\"MIT\"},\"src/solc_0.8/assetERC1155/AssetBaseERC1155.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-0.8/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport \\\"../common/interfaces/IAssetERC721.sol\\\";\\nimport \\\"../common/Libraries/ObjectLib32.sol\\\";\\nimport \\\"../common/BaseWithStorage/WithSuperOperators.sol\\\";\\nimport \\\"../asset/libraries/ERC1155ERC721Helper.sol\\\";\\n\\n// solhint-disable max-states-count\\nabstract contract AssetBaseERC1155 is WithSuperOperators, IERC1155 {\\n    using Address for address;\\n    using ObjectLib32 for ObjectLib32.Operations;\\n    using ObjectLib32 for uint256;\\n\\n    bytes4 private constant ERC1155_IS_RECEIVER = 0x4e2312e0;\\n    bytes4 private constant ERC1155_RECEIVED = 0xf23a6e61;\\n    bytes4 private constant ERC1155_BATCH_RECEIVED = 0xbc197c81;\\n\\n    mapping(address => uint256) private _numNFTPerAddress; // erc721\\n    mapping(uint256 => uint256) private _owners; // erc721\\n    mapping(address => mapping(uint256 => uint256)) private _packedTokenBalance; // erc1155\\n    mapping(address => mapping(address => bool)) private _operatorsForAll; // erc721 and erc1155\\n    mapping(uint256 => address) private _erc721operators; // erc721\\n    mapping(uint256 => bytes32) internal _metadataHash; // erc721 and erc1155\\n    mapping(uint256 => bytes) internal _rarityPacks; // rarity configuration per packs (2 bits per Asset) *DEPRECATED*\\n    mapping(uint256 => uint32) private _nextCollectionIndex; // extraction\\n\\n    // @note : Deprecated.\\n    mapping(address => address) private _creatorship; // creatorship transfer // deprecated\\n\\n    mapping(address => bool) private _bouncers; // the contracts allowed to mint\\n\\n    // @note : Deprecated.\\n    mapping(address => bool) private _metaTransactionContracts;\\n\\n    address private _bouncerAdmin;\\n\\n    bool internal _init;\\n\\n    bytes4 internal constant ERC165ID = 0x01ffc9a7;\\n\\n    uint256 internal _initBits;\\n    address internal _predicate; // used in place of polygon's `PREDICATE_ROLE`\\n\\n    uint8 internal _chainIndex; // modify this for l2\\n\\n    address internal _trustedForwarder;\\n\\n    IAssetERC721 public _assetERC721;\\n\\n    uint256[20] private __gap;\\n    // solhint-enable max-states-count\\n\\n    event BouncerAdminChanged(address indexed oldBouncerAdmin, address indexed newBouncerAdmin);\\n    event Bouncer(address indexed bouncer, bool indexed enabled);\\n    event Extraction(uint256 indexed id, uint256 indexed newId);\\n    event AssetERC721Set(IAssetERC721 indexed assetERC721);\\n\\n    function init(\\n        address trustedForwarder,\\n        address admin,\\n        address bouncerAdmin,\\n        IAssetERC721 assetERC721,\\n        uint8 chainIndex\\n    ) public {\\n        // one-time init of bitfield's previous versions\\n        _checkInit(1);\\n        _admin = admin;\\n        _bouncerAdmin = bouncerAdmin;\\n        _assetERC721 = assetERC721;\\n        __ERC2771Handler_initialize(trustedForwarder);\\n        _chainIndex = chainIndex;\\n    }\\n\\n    /// @notice Change the minting administrator to be `newBouncerAdmin`.\\n    /// @param newBouncerAdmin address of the new minting administrator.\\n    function changeBouncerAdmin(address newBouncerAdmin) external {\\n        require(_msgSender() == _bouncerAdmin, \\\"!BOUNCER_ADMIN\\\");\\n        require(newBouncerAdmin != address(0), \\\"AssetBaseERC1155: new bouncer admin can't be zero address\\\");\\n        emit BouncerAdminChanged(_bouncerAdmin, newBouncerAdmin);\\n        _bouncerAdmin = newBouncerAdmin;\\n    }\\n\\n    /// @notice Enable or disable the ability of `bouncer` to mint tokens (minting bouncer rights).\\n    /// @param bouncer address that will be given/removed minting bouncer rights.\\n    /// @param enabled set whether the address is enabled or disabled as a minting bouncer.\\n    function setBouncer(address bouncer, bool enabled) external {\\n        require(_msgSender() == _bouncerAdmin, \\\"!BOUNCER_ADMIN\\\");\\n        _bouncers[bouncer] = enabled;\\n        emit Bouncer(bouncer, enabled);\\n    }\\n\\n    /// @notice Transfers `value` tokens of type `id` from  `from` to `to`  (with safety call).\\n    /// @param from address from which tokens are transfered.\\n    /// @param to address to which the token will be transfered.\\n    /// @param id the token type transfered.\\n    /// @param value amount of token transfered.\\n    /// @param data aditional data accompanying the transfer.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external override {\\n        require(to != address(0), \\\"TO==0\\\");\\n        require(from != address(0), \\\"FROM==0\\\");\\n        bool success = _transferFrom(from, to, id, value);\\n        if (success) {\\n            require(_checkOnERC1155Received(_msgSender(), from, to, id, value, data), \\\"1155_TRANSFER_REJECTED\\\");\\n        }\\n    }\\n\\n    /// @notice Transfers `values` tokens of type `ids` from  `from` to `to` (with safety call).\\n    /// @dev call data should be optimized to order ids so packedBalance can be used efficiently.\\n    /// @param from address from which tokens are transfered.\\n    /// @param to address to which the token will be transfered.\\n    /// @param ids ids of each token type transfered.\\n    /// @param values amount of each token type transfered.\\n    /// @param data aditional data accompanying the transfer.\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external override {\\n        require(ids.length == values.length, \\\"MISMATCHED_ARR_LEN\\\");\\n        require(to != address(0), \\\"TO==0\\\");\\n        require(from != address(0), \\\"FROM==0\\\");\\n        address msgSender = _msgSender();\\n        bool authorized = from == msgSender || isApprovedForAll(from, msgSender);\\n\\n        _batchTransferFrom(from, to, ids, values, authorized);\\n        emit TransferBatch(msgSender, from, to, ids, values);\\n        require(_checkOnERC1155BatchReceived(msgSender, from, to, ids, values, data), \\\"1155_TRANSFER_REJECTED\\\");\\n    }\\n\\n    /// @notice Enable or disable approval for `operator` to manage all `sender`'s tokens.\\n    /// @dev used for Meta Transaction (from metaTransactionContract).\\n    /// @param sender address which grant approval.\\n    /// @param operator address which will be granted rights to transfer all token owned by `sender`.\\n    /// @param approved whether to approve or revoke.\\n    function setApprovalForAllFor(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) external {\\n        require(sender == _msgSender() || _superOperators[_msgSender()], \\\"!AUTHORIZED\\\");\\n        _setApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @notice Enable or disable approval for `operator` to manage all of the caller's tokens.\\n    /// @param operator address which will be granted rights to transfer all tokens of the caller.\\n    /// @param approved whether to approve or revoke\\n    function setApprovalForAll(address operator, bool approved) external override(IERC1155) {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /// @notice Returns the current administrator in charge of minting rights.\\n    /// @return the current minting administrator in charge of minting rights.\\n    function getBouncerAdmin() external view returns (address) {\\n        return _bouncerAdmin;\\n    }\\n\\n    /// @notice check whether address `who` is given minting bouncer rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has minting rights.\\n    function isBouncer(address who) public view returns (bool) {\\n        return _bouncers[who];\\n    }\\n\\n    /// @notice Get the balance of `owners` for each token type `ids`.\\n    /// @param owners the addresses of the token holders queried.\\n    /// @param ids ids of each token type to query.\\n    /// @return the balance of each `owners` for each token type `ids`.\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids)\\n        external\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(owners.length == ids.length, \\\"ARG_LENGTH_MISMATCH\\\");\\n        uint256[] memory balances = new uint256[](ids.length);\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            balances[i] = balanceOf(owners[i], ids[i]);\\n        }\\n        return balances;\\n    }\\n\\n    /// @notice A descriptive name for the collection of tokens in this contract.\\n    /// @return _name the name of the tokens.\\n    function name() external pure returns (string memory _name) {\\n        return \\\"Sandbox's ASSETs\\\";\\n    }\\n\\n    /// @notice An abbreviated name for the collection of tokens in this contract.\\n    /// @return _symbol the symbol of the tokens.\\n    function symbol() external pure returns (string memory _symbol) {\\n        return \\\"ASSET\\\";\\n    }\\n\\n    /// @notice Query if a contract implements interface `id`.\\n    /// @param id the interface identifier, as specified in ERC-165.\\n    /// @return `true` if the contract implements `id`.\\n    function supportsInterface(bytes4 id) external pure override returns (bool) {\\n        return\\n            id == 0x01ffc9a7 || //ERC165\\n            id == 0xd9b67a26 || // ERC1155\\n            id == 0x0e89341c || // ERC1155 metadata\\n            id == 0x572b6c05; // ERC2771\\n    }\\n\\n    /// Collection methods for ERC721s extracted from an ERC1155 -----------------------------------------------------\\n\\n    /// @notice Gives the collection a specific token belongs to.\\n    /// @param id the token to get the collection of.\\n    /// @return the collection the NFT is part of.\\n    function collectionOf(uint256 id) public view returns (uint256) {\\n        require(doesHashExist(id), \\\"INVALID_ID\\\"); // Note: doesHashExist must track ERC721s\\n        uint256 collectionId = id & ERC1155ERC721Helper.NOT_NFT_INDEX & ERC1155ERC721Helper.NOT_IS_NFT;\\n        require(doesHashExist(collectionId), \\\"UNMINTED_COLLECTION\\\");\\n        return collectionId;\\n    }\\n\\n    /// @notice Return wether the id is a collection\\n    /// @param id collectionId to check.\\n    /// @return whether the id is a collection.\\n    function isCollection(uint256 id) external view returns (bool) {\\n        uint256 collectionId = id & ERC1155ERC721Helper.NOT_NFT_INDEX & ERC1155ERC721Helper.NOT_IS_NFT;\\n        return doesHashExist(collectionId);\\n    }\\n\\n    /// @notice Gives the index at which an NFT was minted in a collection : first of a collection get the zero index.\\n    /// @param id the token to get the index of.\\n    /// @return the index/order at which the token `id` was minted in a collection.\\n    function collectionIndexOf(uint256 id) external view returns (uint256) {\\n        collectionOf(id); // this check if id and collection indeed was ever minted\\n        return uint24((id & ERC1155ERC721Helper.NFT_INDEX) >> ERC1155ERC721Helper.NFT_INDEX_OFFSET);\\n    }\\n\\n    /// end collection methods ---------------------------------------------------------------------------------------\\n\\n    /// @notice Whether or not an ERC1155 or ERC721 tokenId has a valid structure and the metadata hash exists.\\n    /// @param id the token to check.\\n    /// @return bool whether a given id has a valid structure.\\n    /// @dev if IS_NFT > 0 then PACK_NUM_FT_TYPES may be 0\\n    function doesHashExist(uint256 id) public view returns (bool) {\\n        return (((id & ERC1155ERC721Helper.PACK_INDEX) <=\\n            ((id & ERC1155ERC721Helper.PACK_NUM_FT_TYPES) / ERC1155ERC721Helper.PACK_NUM_FT_TYPES_OFFSET_MULTIPLIER)) &&\\n            _metadataHash[id & ERC1155ERC721Helper.URI_ID] != 0);\\n    }\\n\\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given ERC1155 asset.\\n    /// @param id ERC1155 token to get the uri of.\\n    /// @return URI string\\n    function uri(uint256 id) public view returns (string memory) {\\n        require(doesHashExist(id), \\\"INVALID_ID\\\"); // prevent returning invalid uri\\n        return ERC1155ERC721Helper.toFullURI(_metadataHash[id & ERC1155ERC721Helper.URI_ID], id);\\n    }\\n\\n    /// @notice Get the balance of `owner` for the token type `id`.\\n    /// @param owner The address of the token holder.\\n    /// @param id the token type of which to get the balance of.\\n    /// @return the balance of `owner` for the token type `id`.\\n    function balanceOf(address owner, uint256 id) public view override returns (uint256) {\\n        require(doesHashExist(id), \\\"INVALID_ID\\\");\\n        (uint256 bin, uint256 index) = id.getTokenBinIndex();\\n        return _packedTokenBalance[owner][bin].getValueInBin(index);\\n    }\\n\\n    /// @notice Extracts an EIP-721 Asset from an EIP-1155 Asset.\\n    /// @dev Extraction is limited to bouncers.\\n    /// @param sender address which own the token to be extracted.\\n    /// @param id the token type to extract from.\\n    /// @param to address which will receive the token.\\n    /// @return newId the id of the newly minted NFT.\\n    function extractERC721From(\\n        address sender,\\n        uint256 id,\\n        address to\\n    ) external returns (uint256) {\\n        require(sender == _msgSender() || isApprovedForAll(sender, _msgSender()), \\\"!AUTHORIZED\\\");\\n        require(isBouncer(_msgSender()), \\\"!BOUNCER\\\");\\n        require(to != address(0), \\\"TO==0\\\");\\n        require(id & ERC1155ERC721Helper.IS_NFT == 0, \\\"UNIQUE_ERC1155\\\");\\n        uint24 tokenCollectionIndex = uint24(_nextCollectionIndex[id]) + 1;\\n        _nextCollectionIndex[id] = tokenCollectionIndex;\\n        string memory metaData = uri(id);\\n        uint256 newId =\\n            id +\\n                ERC1155ERC721Helper.IS_NFT_OFFSET_MULTIPLIER + // newId is always an NFT; IS_NFT is 1\\n                (tokenCollectionIndex) *\\n                2**ERC1155ERC721Helper.NFT_INDEX_OFFSET; // uint24 nft index\\n        _burnFT(sender, id, 1);\\n        _assetERC721.mint(to, newId, bytes(abi.encode(metaData)));\\n        emit Extraction(id, newId);\\n        return newId;\\n    }\\n\\n    /// @notice Set the ERC721 contract.\\n    /// @param assetERC721 the contract address to set the ERC721 contract to.\\n    /// @return true if the operation completes successfully.\\n    function setAssetERC721(IAssetERC721 assetERC721) external returns (bool) {\\n        require(_admin == _msgSender(), \\\"!AUTHORIZED\\\");\\n        _assetERC721 = assetERC721;\\n        emit AssetERC721Set(assetERC721);\\n        return true;\\n    }\\n\\n    /// @notice Queries the approval status of `operator` for owner `owner`.\\n    /// @param owner the owner of the tokens.\\n    /// @param operator address of authorized operator.\\n    /// @return isOperator true if the operator is approved, false if not.\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        override(IERC1155)\\n        returns (bool isOperator)\\n    {\\n        require(owner != address(0), \\\"OWNER==0\\\");\\n        require(operator != address(0), \\\"OPERATOR==0\\\");\\n        return _operatorsForAll[owner][operator] || _superOperators[operator];\\n    }\\n\\n    /// @notice Queries the chainIndex that a token was minted on originally.\\n    /// @param id the token id to query.\\n    /// @return chainIndex the chainIndex that the token was minted on originally.\\n    /// @dev take care not to confuse chainIndex with chain ID.\\n    function getChainIndex(uint256 id) external pure returns (uint256) {\\n        return uint8((id & ERC1155ERC721Helper.CHAIN_INDEX) / ERC1155ERC721Helper.CHAIN_INDEX_OFFSET_MULTIPLIER);\\n    }\\n\\n    function __ERC2771Handler_initialize(address forwarder) internal {\\n        _trustedForwarder = forwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function getTrustedForwarder() external view returns (address) {\\n        return _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n\\n    function _setApprovalForAll(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) internal {\\n        require(sender != address(0), \\\"SENDER==0\\\");\\n        require(sender != operator, \\\"SENDER==OPERATOR\\\");\\n        require(operator != address(0), \\\"OPERATOR==0\\\");\\n        require(!_superOperators[operator], \\\"APPR_EXISTING_SUPEROPERATOR\\\");\\n        _operatorsForAll[sender][operator] = approved;\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /* solhint-disable code-complexity */\\n    function _batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bool authorized\\n    ) internal {\\n        uint256 numItems = ids.length;\\n        uint256 bin;\\n        uint256 index;\\n        uint256 balFrom;\\n        uint256 balTo;\\n\\n        uint256 lastBin;\\n        require(authorized, \\\"OPERATOR_!AUTH\\\");\\n\\n        for (uint256 i = 0; i < numItems; i++) {\\n            if (from == to) {\\n                _checkEnoughBalance(from, ids[i], values[i]);\\n            } else if (values[i] > 0) {\\n                (bin, index) = ids[i].getTokenBinIndex();\\n                if (lastBin == 0) {\\n                    lastBin = bin;\\n                    balFrom = ObjectLib32.updateTokenBalance(\\n                        _packedTokenBalance[from][bin],\\n                        index,\\n                        values[i],\\n                        ObjectLib32.Operations.SUB\\n                    );\\n                    balTo = ObjectLib32.updateTokenBalance(\\n                        _packedTokenBalance[to][bin],\\n                        index,\\n                        values[i],\\n                        ObjectLib32.Operations.ADD\\n                    );\\n                } else {\\n                    if (bin != lastBin) {\\n                        _packedTokenBalance[from][lastBin] = balFrom;\\n                        _packedTokenBalance[to][lastBin] = balTo;\\n                        balFrom = _packedTokenBalance[from][bin];\\n                        balTo = _packedTokenBalance[to][bin];\\n                        lastBin = bin;\\n                    }\\n\\n                    balFrom = balFrom.updateTokenBalance(index, values[i], ObjectLib32.Operations.SUB);\\n                    balTo = balTo.updateTokenBalance(index, values[i], ObjectLib32.Operations.ADD);\\n                }\\n            }\\n        }\\n\\n        if (bin != 0 && from != to) {\\n            _packedTokenBalance[from][bin] = balFrom;\\n            _packedTokenBalance[to][bin] = balTo;\\n        }\\n    }\\n\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal {\\n        require(amount > 0 && amount <= ERC1155ERC721Helper.MAX_SUPPLY, \\\"INVALID_AMOUNT\\\");\\n        _burnFT(from, id, uint32(amount));\\n        emit TransferSingle(_msgSender(), from, address(0), id, amount);\\n    }\\n\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal {\\n        address operator = _msgSender();\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            require(amounts[i] > 0 && amounts[i] <= ERC1155ERC721Helper.MAX_SUPPLY, \\\"INVALID_AMOUNT\\\");\\n            _burnFT(from, ids[i], uint32(amounts[i]));\\n        }\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    function _burnFT(\\n        address from,\\n        uint256 id,\\n        uint32 amount\\n    ) internal {\\n        (uint256 bin, uint256 index) = (id).getTokenBinIndex();\\n        _packedTokenBalance[from][bin] = _packedTokenBalance[from][bin].updateTokenBalance(\\n            index,\\n            amount,\\n            ObjectLib32.Operations.SUB\\n        );\\n    }\\n\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal {\\n        uint16 offset = 0;\\n        while (offset < amounts.length) {\\n            _mintPack(offset, amounts, to, ids);\\n            offset += 8;\\n        }\\n        _completeBatchMint(_msgSender(), to, ids, amounts, data);\\n    }\\n\\n    function _mintPack(\\n        uint16 offset,\\n        uint256[] memory supplies,\\n        address owner,\\n        uint256[] memory ids\\n    ) internal {\\n        (uint256 bin, uint256 index) = ids[offset].getTokenBinIndex();\\n        for (uint256 i = 0; i < 8 && offset + i < supplies.length; i++) {\\n            uint256 j = offset + i;\\n            if (supplies[j] > 0) {\\n                _packedTokenBalance[owner][bin] = _packedTokenBalance[owner][bin].updateTokenBalance(\\n                    index + i,\\n                    supplies[j],\\n                    ObjectLib32.Operations.ADD\\n                );\\n            }\\n        }\\n    }\\n\\n    function _transferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value\\n    ) internal returns (bool) {\\n        address sender = _msgSender();\\n        bool authorized = from == sender || isApprovedForAll(from, sender);\\n\\n        require(authorized, \\\"OPERATOR_!AUTH\\\");\\n        if (value > 0) {\\n            (uint256 bin, uint256 index) = id.getTokenBinIndex();\\n            _packedTokenBalance[from][bin] = _packedTokenBalance[from][bin].updateTokenBalance(\\n                index,\\n                value,\\n                ObjectLib32.Operations.SUB\\n            );\\n            _packedTokenBalance[to][bin] = _packedTokenBalance[to][bin].updateTokenBalance(\\n                index,\\n                value,\\n                ObjectLib32.Operations.ADD\\n            );\\n        }\\n\\n        emit TransferSingle(sender, from, to, id, value);\\n        return true;\\n    }\\n\\n    function _mint(\\n        address operator,\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal {\\n        (uint256 bin, uint256 index) = id.getTokenBinIndex();\\n        _packedTokenBalance[account][bin] = _packedTokenBalance[account][bin].updateTokenBalance(\\n            index,\\n            amount,\\n            ObjectLib32.Operations.REPLACE\\n        );\\n\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n        require(_checkOnERC1155Received(operator, address(0), account, id, amount, data), \\\"TRANSFER_REJECTED\\\");\\n    }\\n\\n    function _mintBatches(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal {\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            if (amounts[i] > 0) {\\n                (uint256 bin, uint256 index) = ids[i].getTokenBinIndex();\\n                _packedTokenBalance[to][bin] = _packedTokenBalance[to][bin].updateTokenBalance(\\n                    index,\\n                    amounts[i],\\n                    ObjectLib32.Operations.REPLACE\\n                );\\n            }\\n        }\\n        _completeBatchMint(_msgSender(), to, ids, amounts, data);\\n    }\\n\\n    function _mintDeficit(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal {\\n        address sender = _msgSender();\\n        (uint256 bin, uint256 index) = id.getTokenBinIndex();\\n        _packedTokenBalance[account][bin] = _packedTokenBalance[account][bin].updateTokenBalance(\\n            index,\\n            amount,\\n            ObjectLib32.Operations.ADD\\n        );\\n\\n        emit TransferSingle(sender, address(0), account, id, amount);\\n        require(_checkOnERC1155Received(sender, address(0), account, id, amount, \\\"\\\"), \\\"TRANSFER_REJECTED\\\");\\n    }\\n\\n    /// @dev Allows the use of a bitfield to track the initialized status of the version `v` passed in as an arg.\\n    /// If the bit at the index corresponding to the given version is already set, revert.\\n    /// Otherwise, set the bit and return.\\n    /// @param v The version of this contract.\\n    function _checkInit(uint256 v) internal {\\n        require((_initBits >> v) & uint256(1) != 1, \\\"ALREADY_INITIALISED\\\");\\n        _initBits = _initBits | (uint256(1) << v);\\n    }\\n\\n    function _completeBatchMint(\\n        address operator,\\n        address owner,\\n        uint256[] memory ids,\\n        uint256[] memory supplies,\\n        bytes memory data\\n    ) internal {\\n        emit TransferBatch(operator, address(0), owner, ids, supplies);\\n        require(_checkOnERC1155BatchReceived(operator, address(0), owner, ids, supplies, data), \\\"TRANSFER_REJECTED\\\");\\n    }\\n\\n    function _checkEnoughBalance(\\n        address from,\\n        uint256 id,\\n        uint256 value\\n    ) internal view {\\n        (uint256 bin, uint256 index) = id.getTokenBinIndex();\\n        require(_packedTokenBalance[from][bin].getValueInBin(index) >= value, \\\"BALANCE_TOO_LOW\\\");\\n    }\\n\\n    function _checkOnERC1155Received(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes memory data\\n    ) internal returns (bool) {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n\\n        return IERC1155Receiver(to).onERC1155Received(operator, from, id, value, data) == ERC1155_RECEIVED;\\n    }\\n\\n    function _checkOnERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal returns (bool) {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n        bytes4 retval = IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, values, data);\\n        return (retval == ERC1155_BATCH_RECEIVED);\\n    }\\n}\\n\",\"keccak256\":\"0x479397c156421b904b18355cf427a668707db0aaccd5af9a300b9684fed7b7b3\",\"license\":\"MIT\"},\"src/solc_0.8/assetERC1155/AssetERC1155.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"./AssetBaseERC1155.sol\\\";\\n\\n// solhint-disable-next-line no-empty-blocks\\ncontract AssetERC1155 is AssetBaseERC1155 {\\n    event PredicateSet(address predicate);\\n\\n    function initialize(\\n        address trustedForwarder,\\n        address admin,\\n        address bouncerAdmin,\\n        IAssetERC721 assetERC721,\\n        uint8 chainIndex\\n    ) external {\\n        init(trustedForwarder, admin, bouncerAdmin, assetERC721, chainIndex);\\n    }\\n\\n    /// @notice Mint a token type for `creator` on slot `packId`.\\n    /// @dev Function implementation reserved for future use cases on L1.\\n    /// @dev For this function it is not required to provide data.\\n    /// @param creator address of the creator of the token.\\n    /// @param packId unique packId for that token.\\n    /// @param hash hash of an IPFS cidv1 folder that contains the metadata of the token type in the file 0.json.\\n    /// @param supply number of tokens minted for that token type.\\n    /// @param owner address that will receive the tokens.\\n    /// @param data extra data to accompany the minting call.\\n    /// @return id the id of the newly minted token type.\\n    function mint(\\n        address creator,\\n        uint40 packId,\\n        bytes32 hash,\\n        uint256 supply,\\n        address owner,\\n        bytes calldata data\\n    ) external returns (uint256 id) {\\n        require(hash != 0, \\\"HASH==0\\\");\\n        require(isBouncer(_msgSender()), \\\"!BOUNCER\\\");\\n        require(owner != address(0), \\\"TO==0\\\");\\n        id = _generateTokenId(creator, supply, packId, supply == 1 ? 0 : 1, 0);\\n        uint256 uriId = id & ERC1155ERC721Helper.URI_ID;\\n        require(uint256(_metadataHash[uriId]) == 0, \\\"ID_TAKEN\\\");\\n        _metadataHash[uriId] = hash;\\n        _mint(_msgSender(), owner, id, supply, data);\\n    }\\n\\n    /// @notice Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n    /// @dev Should be callable only by AssetERC1155Tunnel.\\n    /// @dev Encoded bytes32 metadata hash must be provided as data.\\n    /// Make sure minting is done only by this function.\\n    /// @param account user address for whom token is being minted.\\n    /// @param id token which is being minted.\\n    /// @param amount amount of token being minted.\\n    /// @param data token metadata.\\n    function mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external {\\n        require(_msgSender() == _predicate, \\\"!PREDICATE\\\");\\n        require(data.length > 0, \\\"METADATA_MISSING\\\");\\n        require(account != address(0), \\\"TO==0\\\");\\n        uint256 uriId = id & ERC1155ERC721Helper.URI_ID;\\n        require(uint256(_metadataHash[uriId]) == 0, \\\"ID_TAKEN\\\");\\n        _metadataHash[uriId] = abi.decode(data, (bytes32));\\n        _mint(_msgSender(), account, id, amount, data);\\n    }\\n\\n    /// @notice Creates `amounts` tokens of token types `ids`, and assigns them to `account`.\\n    /// @dev Should be callable only by AssetERC1155Tunnel.\\n    /// @dev Encoded bytes32[] metadata hashes must be provided as data.\\n    /// @param to address to mint to.\\n    /// @param ids ids to mint.\\n    /// @param amounts supply for each token type.\\n    /// @param data token metadata.\\n    function mintMultiple(\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external {\\n        require(ids.length == amounts.length, \\\"AssetERC1155: ids and amounts length mismatch\\\");\\n        require(_msgSender() == _predicate, \\\"!PREDICATE\\\");\\n        require(data.length > 0, \\\"METADATA_MISSING\\\");\\n        require(to != address(0), \\\"TO==0\\\");\\n        bytes32[] memory hashes = abi.decode(data, (bytes32[]));\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 uriId = ids[i] & ERC1155ERC721Helper.URI_ID;\\n            require(uint256(_metadataHash[uriId]) == 0, \\\"ID_TAKEN\\\");\\n            _metadataHash[uriId] = hashes[i];\\n        }\\n        _mintBatches(to, ids, amounts, data);\\n    }\\n\\n    /// @notice function to be called by tunnel to mint deficit of minted tokens\\n    /// @dev This mint calls for add instead of replace in packedTokenBalance\\n    /// @param account address of the ownerof tokens.\\n    /// @param id id of the token to be minted.\\n    /// @param amount quantity of the token to be minted.\\n    function mintDeficit(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) external {\\n        require(_msgSender() == _predicate, \\\"!PREDICATE\\\");\\n        _mintDeficit(account, id, amount);\\n    }\\n\\n    /// @notice Set the address that will be able to mint on L1 (limited to custom predicate).\\n    /// @param predicate address that will be given minting rights for L1.\\n    function setPredicate(address predicate) external {\\n        require(_msgSender() == _admin, \\\"!ADMIN\\\");\\n        _predicate = predicate;\\n        emit PredicateSet(predicate);\\n    }\\n\\n    /// @notice Burns `amount` tokens of type `id`.\\n    /// @param id token type which will be burnt.\\n    /// @param amount amount of token to burn.\\n    function burn(uint256 id, uint256 amount) external {\\n        _burn(_msgSender(), id, amount);\\n    }\\n\\n    /// @notice Burns `amount` tokens of type `id` from `from`.\\n    /// @param from address whose token is to be burnt.\\n    /// @param id token type which will be burnt.\\n    /// @param amount amount of token to burn.\\n    function burnFrom(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) external {\\n        require(from == _msgSender() || isApprovedForAll(from, _msgSender()), \\\"!AUTHORIZED\\\");\\n        _burn(from, id, amount);\\n    }\\n\\n    function metadataHash(uint256 id) external view returns (bytes32) {\\n        return _metadataHash[id & ERC1155ERC721Helper.URI_ID];\\n    }\\n\\n    function _generateTokenId(\\n        address creator,\\n        uint256 supply,\\n        uint40 packId,\\n        uint16 numFTs,\\n        uint16 packIndex\\n    ) internal view returns (uint256) {\\n        require(supply > 0 && supply <= ERC1155ERC721Helper.MAX_SUPPLY, \\\"SUPPLY_OUT_OF_BOUNDS\\\");\\n        require(numFTs >= 0 && numFTs <= ERC1155ERC721Helper.MAX_NUM_FT, \\\"NUM_FT_OUT_OF_BOUNDS\\\");\\n        return\\n            uint256(uint160(creator)) *\\n            ERC1155ERC721Helper.CREATOR_OFFSET_MULTIPLIER + // CREATOR uint160\\n            (supply == 1 ? uint256(1) * ERC1155ERC721Helper.IS_NFT_OFFSET_MULTIPLIER : 0) + // minted as NFT(1)|FT(0), 1 bit\\n            uint256(_chainIndex) *\\n            ERC1155ERC721Helper.CHAIN_INDEX_OFFSET_MULTIPLIER + // mainnet = 0, polygon = 1, uint8\\n            uint256(packId) *\\n            ERC1155ERC721Helper.PACK_ID_OFFSET_MULTIPLIER + // packId (unique pack), uint40\\n            numFTs *\\n            ERC1155ERC721Helper.PACK_NUM_FT_TYPES_OFFSET_MULTIPLIER + // number of fungible token in the pack, 12 bits\\n            packIndex; // packIndex (position in the pack), 11 bits\\n    }\\n}\\n\",\"keccak256\":\"0xa08522de30b8880b694030265fb0dcfbc708b30b9278bdc7749a5aed648ffbb1\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/WithAdmin.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\ncontract WithAdmin {\\n    address internal _admin;\\n\\n    /// @dev Emits when the contract administrator is changed.\\n    /// @param oldAdmin The address of the previous administrator.\\n    /// @param newAdmin The address of the new administrator.\\n    event AdminChanged(address indexed oldAdmin, address indexed newAdmin);\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == _admin, \\\"ADMIN_ONLY\\\");\\n        _;\\n    }\\n\\n    /// @dev Get the current administrator of this contract.\\n    /// @return The current administrator of this contract.\\n    function getAdmin() external view returns (address) {\\n        return _admin;\\n    }\\n\\n    /// @dev Change the administrator to be `newAdmin`.\\n    /// @param newAdmin The address of the new administrator.\\n    function changeAdmin(address newAdmin) external {\\n        require(msg.sender == _admin, \\\"ADMIN_ACCESS_DENIED\\\");\\n        emit AdminChanged(_admin, newAdmin);\\n        _admin = newAdmin;\\n    }\\n}\\n\",\"keccak256\":\"0x0239f3f826576fc7c050503f29a708b20b8b682df569e3d67bd83a836b0c925a\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/WithSuperOperators.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\nimport \\\"./WithAdmin.sol\\\";\\n\\ncontract WithSuperOperators is WithAdmin {\\n    mapping(address => bool) internal _superOperators;\\n\\n    event SuperOperator(address indexed superOperator, bool indexed enabled);\\n\\n    /// @notice Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights).\\n    /// @param superOperator address that will be given/removed superOperator right.\\n    /// @param enabled set whether the superOperator is enabled or disabled.\\n    function setSuperOperator(address superOperator, bool enabled) external {\\n        require(msg.sender == _admin, \\\"only admin is allowed to add super operators\\\");\\n        _superOperators[superOperator] = enabled;\\n        emit SuperOperator(superOperator, enabled);\\n    }\\n\\n    /// @notice check whether address `who` is given superOperator rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has superOperator rights.\\n    function isSuperOperator(address who) public view returns (bool) {\\n        return _superOperators[who];\\n    }\\n}\\n\",\"keccak256\":\"0x007c3f90984d5b3e4f47ac067040c66cb7dbee1dc7de1ce7777e5c38a44b6734\",\"license\":\"MIT\"},\"src/solc_0.8/common/Libraries/ObjectLib32.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\nlibrary ObjectLib32 {\\n    enum Operations {ADD, SUB, REPLACE}\\n    // Constants regarding bin or chunk sizes for balance packing\\n    uint256 internal constant TYPES_BITS_SIZE = 32; // Max size of each object\\n    uint256 internal constant TYPES_PER_UINT256 = 256 / TYPES_BITS_SIZE; // Number of types per uint256\\n    uint256 internal constant TYPE_ELIMINATOR = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFFFFFFFFFFF;\\n\\n    //\\n    // Objects and Tokens Functions\\n    //\\n\\n    /// @dev Return the bin number and index within that bin where ID is\\n    /// @param tokenId Object type\\n    /// @return bin Bin number.\\n    /// @return index ID's index within that bin.\\n    function getTokenBinIndex(uint256 tokenId) internal pure returns (uint256 bin, uint256 index) {\\n        uint256 id = tokenId & TYPE_ELIMINATOR;\\n        unchecked {bin = (id * TYPES_BITS_SIZE) / 256;}\\n        index = tokenId % TYPES_PER_UINT256;\\n        return (bin, index);\\n    }\\n\\n    /**\\n     * @dev update the balance of a type provided in binBalances\\n     * @param binBalances Uint256 containing the balances of objects\\n     * @param index Index of the object in the provided bin\\n     * @param amount Value to update the type balance\\n     * @param operation Which operation to conduct :\\n     *     Operations.REPLACE : Replace type balance with amount\\n     *     Operations.ADD     : ADD amount to type balance\\n     *     Operations.SUB     : Substract amount from type balance\\n     */\\n    function updateTokenBalance(\\n        uint256 binBalances,\\n        uint256 index,\\n        uint256 amount,\\n        Operations operation\\n    ) internal pure returns (uint256 newBinBalance) {\\n        uint256 objectBalance = 0;\\n        if (operation == Operations.ADD) {\\n            objectBalance = getValueInBin(binBalances, index);\\n            newBinBalance = writeValueInBin(binBalances, index, objectBalance + amount);\\n        } else if (operation == Operations.SUB) {\\n            objectBalance = getValueInBin(binBalances, index);\\n            require(objectBalance >= amount, \\\"can't substract more than there is\\\");\\n            newBinBalance = writeValueInBin(binBalances, index, objectBalance - amount);\\n        } else if (operation == Operations.REPLACE) {\\n            newBinBalance = writeValueInBin(binBalances, index, amount);\\n        } else {\\n            revert(\\\"Invalid operation\\\"); // Bad operation\\n        }\\n\\n        return newBinBalance;\\n    }\\n\\n    /*\\n     * @dev return value in binValue at position index\\n     * @param binValue uint256 containing the balances of TYPES_PER_UINT256 types\\n     * @param index index at which to retrieve value\\n     * @return Value at given index in bin\\n     */\\n    function getValueInBin(uint256 binValue, uint256 index) internal pure returns (uint256) {\\n        // Mask to retrieve data for a given binData\\n        uint256 mask = (uint256(1) << TYPES_BITS_SIZE) - 1;\\n\\n        // Shift amount\\n        uint256 rightShift = 256 - TYPES_BITS_SIZE * (index + 1);\\n        return (binValue >> rightShift) & mask;\\n    }\\n\\n    /**\\n     * @dev return the updated binValue after writing amount at index\\n     * @param binValue uint256 containing the balances of TYPES_PER_UINT256 types\\n     * @param index Index at which to retrieve value\\n     * @param amount Value to store at index in bin\\n     * @return Value at given index in bin\\n     */\\n    function writeValueInBin(\\n        uint256 binValue,\\n        uint256 index,\\n        uint256 amount\\n    ) internal pure returns (uint256) {\\n        require(amount < 2**TYPES_BITS_SIZE, \\\"Amount to write in bin is too large\\\");\\n\\n        // Mask to retrieve data for a given binData\\n        uint256 mask = (uint256(1) << TYPES_BITS_SIZE) - 1;\\n\\n        // Shift amount\\n        uint256 leftShift = 256 - TYPES_BITS_SIZE * (index + 1);\\n        return (binValue & ~(mask << leftShift)) | (amount << leftShift);\\n    }\\n}\\n\",\"keccak256\":\"0x1971311157835cb7d98deba635ae3dd28d72ff562632b8808fad43236e916fbc\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IAssetERC721.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport {IERC721Base} from \\\"./IERC721Base.sol\\\";\\n\\ninterface IAssetERC721 is IERC721Base {\\n    function setTokenURI(uint256 id, string memory uri) external;\\n\\n    function tokenURI(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa9a1229c39d9183bae268c1dc80150390b1a64483b8c785161e92faa51b5c1a0\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC721Base.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport {IERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport {IERC721ExtendedToken} from \\\"./IERC721ExtendedToken.sol\\\";\\n\\ninterface IERC721Base is IERC721Upgradeable {\\n    function mint(address to, uint256 id) external;\\n\\n    function mint(\\n        address to,\\n        uint256 id,\\n        bytes calldata metaData\\n    ) external;\\n\\n    function approveFor(\\n        address from,\\n        address operator,\\n        uint256 id\\n    ) external;\\n\\n    function setApprovalForAllFor(\\n        address from,\\n        address operator,\\n        bool approved\\n    ) external;\\n\\n    function burnFrom(address from, uint256 id) external;\\n\\n    function burn(uint256 id) external;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external override;\\n\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids\\n    ) external;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external;\\n\\n    function exists(uint256 tokenId) external view returns (bool);\\n\\n    function supportsInterface(bytes4 id) external view override returns (bool);\\n\\n    function setTrustedForwarder(address trustedForwarder) external;\\n\\n    function isTrustedForwarder(address forwarder) external returns (bool);\\n\\n    function getTrustedForwarder() external returns (address trustedForwarder);\\n}\\n\",\"keccak256\":\"0x515a9d8e988c63547108b16b7efd4942ab15887529a98861a522dea6dbb0437d\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC721ExtendedToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\ninterface IERC721ExtendedToken {\\n    function approveFor(\\n        address sender,\\n        address operator,\\n        uint256 id\\n    ) external;\\n\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids\\n    ) external;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external;\\n\\n    function setApprovalForAllFor(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) external;\\n\\n    function burn(uint256 id) external;\\n\\n    function burnFrom(address from, uint256 id) external;\\n}\\n\",\"keccak256\":\"0xe574d923fe66e20909df0d06b73478d2922e4865d85c578db60bda34f6273d45\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061421c806100206000396000f3fe608060405234801561001057600080fd5b50600436106102ab5760003560e01c80638f2839701161017b578063c7778baa116100d8578063e985e9c51161008c578063f242432a11610071578063f242432a14610621578063f6c983fb14610634578063ff23be5314610647576102ab565b8063e985e9c5146105fb578063eeb5a5d11461060e576102ab565b8063d12e76d0116100bd578063d12e76d0146105c2578063d5de8e49146105d5578063d9f37f8e146105e8576102ab565b8063c7778baa1461059e578063ce1b815f146105b1576102ab565b8063ac9fe4211161012f578063b9b75ebc11610114578063b9b75ebc14610565578063bd9ff41b14610578578063c0d241501461058b576102ab565b8063ac9fe4211461053f578063b390c0ab14610552576102ab565b806398fbde641161016057806398fbde64146105085780639bc88b9c1461051b578063a22cb4651461052c576102ab565b80638f283970146104bc57806395d89b41146104cf576102ab565b80632eb2c2d611610229578063572b6c05116101dd5780636e9960c3116101c25780636e9960c314610471578063731133e91461049657806376596d21146104a9576102ab565b8063572b6c0514610423578063654b748a14610445576102ab565b8063409146131161020e57806340914613146103c45780634c4d07e7146103d75780634e1273f414610403576102ab565b80632eb2c2d61461039e57806331e5361f146103b1576102ab565b806306fdde0311610280578063124d91e511610265578063124d91e514610349578063219cc8bc1461035c5780632e712b461461038b576102ab565b806306fdde03146103215780630e89341c14610336576102ab565b80628c2676146102b0578062fdd58e146102c557806301ffc9a7146102eb578063049476df1461030e575b600080fd5b6102c36102be3660046136ec565b61065a565b005b6102d86102d33660046139b9565b61066e565b6040519081526020015b60405180910390f35b6102fe6102f9366004613c6c565b610712565b60405190151581526020016102e2565b6102c361031c366004613698565b6107e5565b610329610934565b6040516102e29190613f27565b610329610344366004613c54565b61096c565b6102c3610357366004613a25565b610a8b565b6102d861036a366004613c54565b6bffffffff80000000000007ff191660009081526007602052604090205490565b6102d8610399366004613c54565b610b03565b6102c36103ac366004613761565b610b1b565b6102fe6103bf366004613698565b610dfb565b6102c36103d2366004613a25565b610eac565b6102fe6103e5366004613698565b6001600160a01b03166000908152600b602052604090205460ff1690565b610416610411366004613b44565b610f21565b6040516102e29190613eef565b6102fe610431366004613698565b6010546001600160a01b0390811691161490565b6102fe610453366004613698565b6001600160a01b031660009081526001602052604090205460ff1690565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016102e2565b6102c36104a4366004613a59565b61107d565b6102c36104b73660046136ec565b611236565b6102c36104ca366004613698565b6112e7565b60408051808201909152600581527f41535345540000000000000000000000000000000000000000000000000000006020820152610329565b6102d8610516366004613ac1565b6113a9565b600d546001600160a01b031661047e565b6102c361053a366004613985565b611571565b6102c361054d366004613985565b611587565b6102c3610560366004613d2b565b61165b565b6102c3610573366004613985565b61166d565b6102fe610586366004613c54565b61172b565b6102c36105993660046138dc565b61174d565b6102d86105ac366004613c54565b611a58565b6010546001600160a01b031661047e565b6102c36105d0366004613698565b611b14565b6102d86105e3366004613c54565b611bdf565b60115461047e906001600160a01b031681565b6102fe6106093660046136b4565b611c0e565b6102c361061c36600461381c565b611d0c565b6102c361062f366004613862565b611d9d565b6102fe610642366004613c54565b611ee7565b6102d86106553660046139e4565b611f36565b6106678585858585611236565b5050505050565b600061067982611ee7565b6106ca5760405162461bcd60e51b815260206004820152600a60248201527f494e56414c49445f49440000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6000806106d684612205565b6001600160a01b038716600090815260046020908152604080832085845290915290205491935091506107099082612254565b95945050505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316148061077557507fd9b67a26000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b806107a957507f0e89341c000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b806107dd57507f572b6c05000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b90505b919050565b600d546001600160a01b03166107f9612299565b6001600160a01b03161461084f5760405162461bcd60e51b815260206004820152600e60248201527f21424f554e4345525f41444d494e00000000000000000000000000000000000060448201526064016106c1565b6001600160a01b0381166108cb5760405162461bcd60e51b815260206004820152603960248201527f417373657442617365455243313135353a206e657720626f756e63657220616460448201527f6d696e2063616e2774206265207a65726f20616464726573730000000000000060648201526084016106c1565b600d546040516001600160a01b038084169216907f1bab6ababbec5519512e9ee16964953ec0f72839126138285cac1f1136bd642e90600090a3600d805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60408051808201909152601081527f53616e64626f782773204153534554730000000000000000000000000000000060208201525b90565b606061097782611ee7565b6109c35760405162461bcd60e51b815260206004820152600a60248201527f494e56414c49445f49440000000000000000000000000000000000000000000060448201526064016106c1565b6bffffffff80000000000007ff198216600090815260076020526040908190205490517f55f43cd4000000000000000000000000000000000000000000000000000000008152600481019190915260248101839052733A9eF4A703862611Af6355Ee8481672FF9161aB6906355f43cd49060440160006040518083038186803b158015610a4f57600080fd5b505af4158015610a63573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107dd9190810190613ca4565b610a93612299565b6001600160a01b0316836001600160a01b03161480610ab95750610ab983610609612299565b610af35760405162461bcd60e51b815260206004820152600b60248201526a085055551213d49256915160aa1b60448201526064016106c1565b610afe8383836122e3565b505050565b6000610b0e82611a58565b5050603f1c62ffffff1690565b848314610b6a5760405162461bcd60e51b815260206004820152601260248201527f4d49534d4154434845445f4152525f4c454e000000000000000000000000000060448201526064016106c1565b6001600160a01b038716610ba85760405162461bcd60e51b81526020600482015260056024820152640544f3d3d360dc1b60448201526064016106c1565b6001600160a01b038816610bfe5760405162461bcd60e51b815260206004820152600760248201527f46524f4d3d3d300000000000000000000000000000000000000000000000000060448201526064016106c1565b6000610c08612299565b90506000816001600160a01b03168a6001600160a01b03161480610c315750610c318a83611c0e565b9050610ca48a8a8a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808e0282810182019093528d82529093508d92508c9182918501908490808284376000920191909152508892506123c5915050565b886001600160a01b03168a6001600160a01b0316836001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8b8b8b8b604051610cf79493929190613ec8565b60405180910390a4610da3828b8b8b8b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808f0282810182019093528e82529093508e92508d91829185019084908082843760009201919091525050604080516020601f8e018190048102820181019092528c815292508c91508b908190840183828082843760009201919091525061272f92505050565b610def5760405162461bcd60e51b815260206004820152601660248201527f313135355f5452414e534645525f52454a45435445440000000000000000000060448201526064016106c1565b50505050505050505050565b6000610e05612299565b6000546001600160a01b03908116911614610e505760405162461bcd60e51b815260206004820152600b60248201526a085055551213d49256915160aa1b60448201526064016106c1565b6011805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091556040517f5a91617bd1e0deac2e7e6f6fbd384ff93d50ab3d50b6f3cec6b7979a7b5c9de090600090a2506001919050565b600f546001600160a01b0316610ec0612299565b6001600160a01b031614610f165760405162461bcd60e51b815260206004820152600a60248201527f215052454449434154450000000000000000000000000000000000000000000060448201526064016106c1565b610afe838383612824565b6060838214610f725760405162461bcd60e51b815260206004820152601360248201527f4152475f4c454e4754485f4d49534d415443480000000000000000000000000060448201526064016106c1565b60008267ffffffffffffffff811115610f9b57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610fc4578160200160208202803683370190505b50905060005b8381101561107357611036878783818110610ff557634e487b7160e01b600052603260045260246000fd5b905060200201602081019061100a9190613698565b86868481811061102a57634e487b7160e01b600052603260045260246000fd5b9050602002013561066e565b82828151811061105657634e487b7160e01b600052603260045260246000fd5b60209081029190910101528061106b81614147565b915050610fca565b5095945050505050565b600f546001600160a01b0316611091612299565b6001600160a01b0316146110e75760405162461bcd60e51b815260206004820152600a60248201527f215052454449434154450000000000000000000000000000000000000000000060448201526064016106c1565b806111345760405162461bcd60e51b815260206004820152601060248201527f4d455441444154415f4d495353494e470000000000000000000000000000000060448201526064016106c1565b6001600160a01b0385166111725760405162461bcd60e51b81526020600482015260056024820152640544f3d3d360dc1b60448201526064016106c1565b6bffffffff80000000000007ff198416600081815260076020526040902054156111c95760405162461bcd60e51b815260206004820152600860248201526724a22faa20a5a2a760c11b60448201526064016106c1565b6111d582840184613c54565b60008281526007602052604090205561122e6111ef612299565b87878787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061294392505050565b505050505050565b6112406001612a45565b6000805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b0387811691909117909255600d8054821686841617905560118054821685841617905560108054909116918716919091179055600f805460ff90921674010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff90921691909117905550505050565b6000546001600160a01b031633146113415760405162461bcd60e51b815260206004820152601360248201527f41444d494e5f4143434553535f44454e4945440000000000000000000000000060448201526064016106c1565b600080546040516001600160a01b03808516939216917f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f91a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000856113f85760405162461bcd60e51b815260206004820152600760248201527f484153483d3d300000000000000000000000000000000000000000000000000060448201526064016106c1565b6114036103e5612299565b61144f5760405162461bcd60e51b815260206004820152600860248201527f21424f554e43455200000000000000000000000000000000000000000000000060448201526064016106c1565b6001600160a01b03841661148d5760405162461bcd60e51b81526020600482015260056024820152640544f3d3d360dc1b60448201526064016106c1565b6114af888689886001146114a25760016114a5565b60005b60ff166000612ab0565b6bffffffff80000000000007ff198116600081815260076020526040902054919250901561150a5760405162461bcd60e51b815260206004820152600860248201526724a22faa20a5a2a760c11b60448201526064016106c1565b6000818152600760205260409020879055611565611526612299565b86848988888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061294392505050565b50979650505050505050565b61158361157c612299565b8383612c6a565b5050565b6000546001600160a01b031633146116075760405162461bcd60e51b815260206004820152602c60248201527f6f6e6c792061646d696e20697320616c6c6f77656420746f206164642073757060448201527f6572206f70657261746f7273000000000000000000000000000000000000000060648201526084016106c1565b6001600160a01b038216600081815260016020526040808220805460ff191685151590811790915590519092917f44f92d27abdf4cfb6a7d712c3af68f3be086d4ca747ab802c36f67d6790060d891a35050565b611583611666612299565b83836122e3565b600d546001600160a01b0316611681612299565b6001600160a01b0316146116d75760405162461bcd60e51b815260206004820152600e60248201527f21424f554e4345525f41444d494e00000000000000000000000000000000000060448201526064016106c1565b6001600160a01b0382166000818152600b6020526040808220805460ff191685151590811790915590519092917f5ecd928ac22825e06273a3e8db8118dd7fe11bd2637ecfe4bfa25154948bd85f91a35050565b60006b807fffff800000000000000019821661174681611ee7565b9392505050565b8483146117c25760405162461bcd60e51b815260206004820152602d60248201527f4173736574455243313135353a2069647320616e6420616d6f756e7473206c6560448201527f6e677468206d69736d617463680000000000000000000000000000000000000060648201526084016106c1565b600f546001600160a01b03166117d6612299565b6001600160a01b03161461182c5760405162461bcd60e51b815260206004820152600a60248201527f215052454449434154450000000000000000000000000000000000000000000060448201526064016106c1565b806118795760405162461bcd60e51b815260206004820152601060248201527f4d455441444154415f4d495353494e470000000000000000000000000000000060448201526064016106c1565b6001600160a01b0387166118b75760405162461bcd60e51b81526020600482015260056024820152640544f3d3d360dc1b60448201526064016106c1565b60006118c582840184613bad565b905060005b868110156119ab5760006bffffffff80000000000007ff1989898481811061190257634e487b7160e01b600052603260045260246000fd5b90506020020135169050600760008281526020019081526020016000205460001c60001461195d5760405162461bcd60e51b815260206004820152600860248201526724a22faa20a5a2a760c11b60448201526064016106c1565b82828151811061197d57634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160009283526007909152604090912055806119a381614147565b9150506118ca565b50611a4e8888888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808c0282810182019093528b82529093508b92508a91829185019084908082843760009201919091525050604080516020601f8b018190048102820181019092528981529250899150889081908401838280828437600092019190915250612e4e92505050565b5050505050505050565b6000611a6382611ee7565b611aaf5760405162461bcd60e51b815260206004820152600a60248201527f494e56414c49445f49440000000000000000000000000000000000000000000060448201526064016106c1565b6b807fffff8000000000000000198216611ac881611ee7565b6107dd5760405162461bcd60e51b815260206004820152601360248201527f554e4d494e5445445f434f4c4c454354494f4e0000000000000000000000000060448201526064016106c1565b6000546001600160a01b0316611b28612299565b6001600160a01b031614611b7e5760405162461bcd60e51b815260206004820152600660248201527f2141444d494e000000000000000000000000000000000000000000000000000060448201526064016106c1565b600f805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527f41f738d25e68ffb96e8fd4d3de42056b6bf6961dd470e7b1158c46534596bbc99060200160405180910390a150565b6000611bed60576002614013565b611c05906b7f80000000000000000000008416613faa565b60ff1692915050565b60006001600160a01b038316611c665760405162461bcd60e51b815260206004820152600860248201527f4f574e45523d3d3000000000000000000000000000000000000000000000000060448201526064016106c1565b6001600160a01b038216611cbc5760405162461bcd60e51b815260206004820152600b60248201527f4f50455241544f523d3d3000000000000000000000000000000000000000000060448201526064016106c1565b6001600160a01b0380841660009081526005602090815260408083209386168352929052205460ff16806117465750506001600160a01b031660009081526001602052604090205460ff16919050565b611d14612299565b6001600160a01b0316836001600160a01b03161480611d58575060016000611d3a612299565b6001600160a01b0316815260208101919091526040016000205460ff165b611d925760405162461bcd60e51b815260206004820152600b60248201526a085055551213d49256915160aa1b60448201526064016106c1565b610afe838383612c6a565b6001600160a01b038516611ddb5760405162461bcd60e51b81526020600482015260056024820152640544f3d3d360dc1b60448201526064016106c1565b6001600160a01b038616611e315760405162461bcd60e51b815260206004820152600760248201527f46524f4d3d3d300000000000000000000000000000000000000000000000000060448201526064016106c1565b6000611e3f87878787612f68565b90508015611ede57611e92611e52612299565b8888888888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061311492505050565b611ede5760405162461bcd60e51b815260206004820152601660248201527f313135355f5452414e534645525f52454a45435445440000000000000000000060448201526064016106c1565b50505050505050565b6000611ef5600b6002614013565b611f0490627ff8008416613faa565b6107ff8316111580156107dd5750506bffffffff80000000000007ff1916600090815260076020526040902054151590565b6000611f40612299565b6001600160a01b0316846001600160a01b03161480611f665750611f6684610609612299565b611fa05760405162461bcd60e51b815260206004820152600b60248201526a085055551213d49256915160aa1b60448201526064016106c1565b611fab6103e5612299565b611ff75760405162461bcd60e51b815260206004820152600860248201527f21424f554e43455200000000000000000000000000000000000000000000000060448201526064016106c1565b6001600160a01b0382166120355760405162461bcd60e51b81526020600482015260056024820152640544f3d3d360dc1b60448201526064016106c1565b6b8000000000000000000000008316156120915760405162461bcd60e51b815260206004820152600e60248201527f554e495155455f4552433131353500000000000000000000000000000000000060448201526064016106c1565b6000838152600960205260408120546120b19063ffffffff166001613f6b565b600085815260096020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001662ffffff84161790559091506120f88561096c565b90506000612108603f6002614004565b6121179062ffffff85166140e5565b612123605f6002614013565b61212d9088613f92565b6121379190613f92565b9050612145878760016131e4565b6011546040516001600160a01b03909116906394d008ef908790849061216f908790602001613f27565b6040516020818303038152906040526040518463ffffffff1660e01b815260040161219c93929190613ea0565b600060405180830381600087803b1580156121b657600080fd5b505af11580156121ca573d6000803e3d6000fd5b50506040518392508891507faa923cda6d3360ee3cd49c083ac1fe5e062a5739b82a32d597a65168c0c6926c90600090a39695505050505050565b6000807fffffffffffffffffffffffffffffffffffffffff7fffffffffffffffffffffff8316610100602082020492506122426020610100613faa565b61224c9085614162565b915050915091565b6000806122676001640100000000614104565b90506000612276846001613f92565b6122819060206140e5565b61228d90610100614104565b9490941c169392505050565b6010546000906001600160a01b03163314156122dc57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c610969565b5033610969565b60008111801561230a575060016122fc60206002614013565b6123069190614104565b8111155b6123565760405162461bcd60e51b815260206004820152600e60248201527f494e56414c49445f414d4f554e5400000000000000000000000000000000000060448201526064016106c1565b6123618383836131e4565b60006001600160a01b038416612375612299565b6001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6285856040516123b8929190918252602082015260400190565b60405180910390a4505050565b82516000808080808661241a5760405162461bcd60e51b815260206004820152600e60248201527f4f50455241544f525f214155544800000000000000000000000000000000000060448201526064016106c1565b60005b868110156126bf578a6001600160a01b03168c6001600160a01b0316141561249d576124988c8b838151811061246357634e487b7160e01b600052603260045260246000fd5b60200260200101518b848151811061248b57634e487b7160e01b600052603260045260246000fd5b602002602001015161325f565b6126ad565b60008982815181106124bf57634e487b7160e01b600052603260045260246000fd5b602002602001015111156126ad576124fd8a82815181106124f057634e487b7160e01b600052603260045260246000fd5b6020026020010151612205565b9096509450816125cb576001600160a01b038c1660009081526004602090815260408083208984529091529020548951879350612566919087908c908590811061255757634e487b7160e01b600052603260045260246000fd5b602002602001015160016132ee565b6001600160a01b038c1660009081526004602090815260408083208a84529091529020548a519195506125c49187908c90859081106125b557634e487b7160e01b600052603260045260246000fd5b602002602001015160006132ee565b92506126ad565b81861461262a576001600160a01b038c8116600090815260046020818152604080842087855280835281852099909955938f16835290815282822094825284815282822095909555878152948452808520549290935291909220549084905b612669858a838151811061264e57634e487b7160e01b600052603260045260246000fd5b60200260200101516001876132ee909392919063ffffffff16565b93506126aa858a838151811061268f57634e487b7160e01b600052603260045260246000fd5b60200260200101516000866132ee909392919063ffffffff16565b92505b806126b781614147565b91505061241d565b5084158015906126e15750896001600160a01b03168b6001600160a01b031614155b15612722576001600160a01b03808c1660009081526004602081815260408084208a85528252808420889055938e1683529081528282208883529052208290555b5050505050505050505050565b60006001600160a01b0385163b6127485750600161281a565b6040517fbc197c810000000000000000000000000000000000000000000000000000000081526000906001600160a01b0387169063bc197c8190612798908b908b908a908a908a90600401613dff565b602060405180830381600087803b1580156127b257600080fd5b505af11580156127c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ea9190613c88565b6001600160e01b0319167fbc197c8100000000000000000000000000000000000000000000000000000000149150505b9695505050505050565b600061282e612299565b905060008061283c85612205565b6001600160a01b03881660009081526004602090815260408083208584529091528120549294509092506128749190839087906132ee565b6001600160a01b03878116600081815260046020908152604080832088845282528083209590955584518a8152908101899052919390928716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46128f783600088888860405180602001604052806000815250613114565b61122e5760405162461bcd60e51b815260206004820152601160248201527f5452414e534645525f52454a454354454400000000000000000000000000000060448201526064016106c1565b60008061294f85612205565b6001600160a01b0388166000908152600460209081526040808320858452909152902054919350915061298590828660026132ee565b6001600160a01b03878116600081815260046020908152604080832088845282528083209590955584518a8152908101899052919390928b16917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46129f987600088888888613114565b611ede5760405162461bcd60e51b815260206004820152601160248201527f5452414e534645525f52454a454354454400000000000000000000000000000060448201526064016106c1565b600181600e54901c1660011415612a9e5760405162461bcd60e51b815260206004820152601360248201527f414c52454144595f494e495449414c495345440000000000000000000000000060448201526064016106c1565b806001901b600e5417600e8190555050565b60008085118015612ad857506001612aca60206002614013565b612ad49190614104565b8511155b612b245760405162461bcd60e51b815260206004820152601460248201527f535550504c595f4f55545f4f465f424f554e445300000000000000000000000060448201526064016106c1565b612b30600c6002614013565b8361ffff161115612b835760405162461bcd60e51b815260206004820152601460248201527f4e554d5f46545f4f55545f4f465f424f554e445300000000000000000000000060448201526064016106c1565b61ffff8216612b94600b6002614013565b612ba29061ffff86166140e5565b612bae60176002614013565b612bbf9064ffffffffff88166140e5565b612bcb60576002614013565b600f54612bf3919074010000000000000000000000000000000000000000900460ff166140e5565b88600114612c02576000612c19565b612c0e605f6002614013565b612c199060016140e5565b612c2560606002614013565b612c38906001600160a01b038d166140e5565b612c429190613f92565b612c4c9190613f92565b612c569190613f92565b612c609190613f92565b61281a9190613f92565b6001600160a01b038316612cc05760405162461bcd60e51b815260206004820152600960248201527f53454e4445523d3d30000000000000000000000000000000000000000000000060448201526064016106c1565b816001600160a01b0316836001600160a01b03161415612d225760405162461bcd60e51b815260206004820152601060248201527f53454e4445523d3d4f50455241544f520000000000000000000000000000000060448201526064016106c1565b6001600160a01b038216612d785760405162461bcd60e51b815260206004820152600b60248201527f4f50455241544f523d3d3000000000000000000000000000000000000000000060448201526064016106c1565b6001600160a01b03821660009081526001602052604090205460ff1615612de15760405162461bcd60e51b815260206004820152601b60248201527f415050525f4558495354494e475f53555045524f50455241544f52000000000060448201526064016106c1565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60005b8251811015612f4d576000838281518110612e7c57634e487b7160e01b600052603260045260246000fd5b60200260200101511115612f3b57600080612eb08684815181106124f057634e487b7160e01b600052603260045260246000fd5b91509150612f1081868581518110612ed857634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b038b1660009081526004835260408082208883529093529190912054919060026132ee565b6001600160a01b03881660009081526004602090815260408083209583529490529290922091909155505b80612f4581614147565b915050612e51565b50612f62612f59612299565b8585858561347c565b50505050565b600080612f73612299565b90506000816001600160a01b0316876001600160a01b03161480612f9c5750612f9c8783611c0e565b905080612feb5760405162461bcd60e51b815260206004820152600e60248201527f4f50455241544f525f214155544800000000000000000000000000000000000060448201526064016106c1565b83156130a757600080612ffd87612205565b6001600160a01b038b166000908152600460209081526040808320858452909152902054919350915061303390828860016132ee565b6001600160a01b03808b166000908152600460208181526040808420888552825280842095909555928c16825282528281208582529091529081205461307c91839089906132ee565b6001600160a01b03891660009081526004602090815260408083209583529490529290922091909155505b856001600160a01b0316876001600160a01b0316836001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6288886040516130ff929190918252602082015260400190565b60405180910390a45060019695505050505050565b60006001600160a01b0385163b61312d5750600161281a565b6040517ff23a6e6100000000000000000000000000000000000000000000000000000000808252906001600160a01b0387169063f23a6e619061317c908b908b908a908a908a90600401613e5d565b602060405180830381600087803b15801561319657600080fd5b505af11580156131aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131ce9190613c88565b6001600160e01b03191614979650505050505050565b6000806131f084612205565b6001600160a01b03871660009081526004602090815260408083208584529091529020549193509150613230908263ffffffff808716906001906132ee16565b6001600160a01b0390951660009081526004602090815260408083209483529390529190912093909355505050565b60008061326b84612205565b6001600160a01b0387166000908152600460209081526040808320858452909152902054919350915083906132a09083612254565b10156106675760405162461bcd60e51b815260206004820152600f60248201527f42414c414e43455f544f4f5f4c4f57000000000000000000000000000000000060448201526064016106c1565b6000808083600281111561331257634e487b7160e01b600052602160045260246000fd5b141561333f576133228686612254565b905061333886866133338785613f92565b61352f565b9150613473565b600183600281111561336157634e487b7160e01b600052602160045260246000fd5b14156133f8576133718686612254565b9050838110156133e95760405162461bcd60e51b815260206004820152602260248201527f63616e277420737562737472616374206d6f7265207468616e2074686572652060448201527f697300000000000000000000000000000000000000000000000000000000000060648201526084016106c1565b61333886866133338785614104565b600283600281111561341a57634e487b7160e01b600052602160045260246000fd5b141561342b5761333886868661352f565b60405162461bcd60e51b815260206004820152601160248201527f496e76616c6964206f7065726174696f6e00000000000000000000000000000060448201526064016106c1565b50949350505050565b836001600160a01b031660006001600160a01b0316866001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb86866040516134cc929190613f02565b60405180910390a46134e38560008686868661272f565b6106675760405162461bcd60e51b815260206004820152601160248201527f5452414e534645525f52454a454354454400000000000000000000000000000060448201526064016106c1565b600061353d60206002614004565b82106135b15760405162461bcd60e51b815260206004820152602360248201527f416d6f756e7420746f20777269746520696e2062696e20697320746f6f206c6160448201527f726765000000000000000000000000000000000000000000000000000000000060648201526084016106c1565b60006135c36001640100000000614104565b905060006135d2856001613f92565b6135dd9060206140e5565b6135e990610100614104565b91821b199590951692901b919091179392505050565b60008083601f840112613610578182fd5b50813567ffffffffffffffff811115613627578182fd5b602083019150836020808302850101111561364157600080fd5b9250929050565b803580151581146107e057600080fd5b60008083601f840112613669578182fd5b50813567ffffffffffffffff811115613680578182fd5b60208301915083602082850101111561364157600080fd5b6000602082840312156136a9578081fd5b8135611746816141b8565b600080604083850312156136c6578081fd5b82356136d1816141b8565b915060208301356136e1816141b8565b809150509250929050565b600080600080600060a08688031215613703578081fd5b853561370e816141b8565b9450602086013561371e816141b8565b9350604086013561372e816141b8565b9250606086013561373e816141b8565b9150608086013560ff81168114613753578182fd5b809150509295509295909350565b60008060008060008060008060a0898b03121561377c578283fd5b8835613787816141b8565b97506020890135613797816141b8565b9650604089013567ffffffffffffffff808211156137b3578485fd5b6137bf8c838d016135ff565b909850965060608b01359150808211156137d7578485fd5b6137e38c838d016135ff565b909650945060808b01359150808211156137fb578384fd5b506138088b828c01613658565b999c989b5096995094979396929594505050565b600080600060608486031215613830578283fd5b833561383b816141b8565b9250602084013561384b816141b8565b915061385960408501613648565b90509250925092565b60008060008060008060a0878903121561387a578182fd5b8635613885816141b8565b95506020870135613895816141b8565b94506040870135935060608701359250608087013567ffffffffffffffff8111156138be578283fd5b6138ca89828a01613658565b979a9699509497509295939492505050565b60008060008060008060006080888a0312156138f6578081fd5b8735613901816141b8565b9650602088013567ffffffffffffffff8082111561391d578283fd5b6139298b838c016135ff565b909850965060408a0135915080821115613941578283fd5b61394d8b838c016135ff565b909650945060608a0135915080821115613965578283fd5b506139728a828b01613658565b989b979a50959850939692959293505050565b60008060408385031215613997578182fd5b82356139a2816141b8565b91506139b060208401613648565b90509250929050565b600080604083850312156139cb578182fd5b82356139d6816141b8565b946020939093013593505050565b6000806000606084860312156139f8578081fd5b8335613a03816141b8565b9250602084013591506040840135613a1a816141b8565b809150509250925092565b600080600060608486031215613a39578081fd5b8335613a44816141b8565b95602085013595506040909401359392505050565b600080600080600060808688031215613a70578283fd5b8535613a7b816141b8565b94506020860135935060408601359250606086013567ffffffffffffffff811115613aa4578182fd5b613ab088828901613658565b969995985093965092949392505050565b600080600080600080600060c0888a031215613adb578081fd5b8735613ae6816141b8565b9650602088013564ffffffffff81168114613aff578182fd5b955060408801359450606088013593506080880135613b1d816141b8565b925060a088013567ffffffffffffffff811115613b38578182fd5b6139728a828b01613658565b60008060008060408587031215613b59578182fd5b843567ffffffffffffffff80821115613b70578384fd5b613b7c888389016135ff565b90965094506020870135915080821115613b94578384fd5b50613ba1878288016135ff565b95989497509550505050565b60006020808385031215613bbf578182fd5b823567ffffffffffffffff80821115613bd6578384fd5b818501915085601f830112613be9578384fd5b813581811115613bfb57613bfb6141a2565b8381029150613c0b848301613f3a565b8181528481019084860184860187018a1015613c25578788fd5b8795505b83861015613c47578035835260019590950194918601918601613c29565b5098975050505050505050565b600060208284031215613c65578081fd5b5035919050565b600060208284031215613c7d578081fd5b8135611746816141d0565b600060208284031215613c99578081fd5b8151611746816141d0565b600060208284031215613cb5578081fd5b815167ffffffffffffffff80821115613ccc578283fd5b818401915084601f830112613cdf578283fd5b815181811115613cf157613cf16141a2565b613d046020601f19601f84011601613f3a565b9150808252856020828501011115613d1a578384fd5b61347381602084016020860161411b565b60008060408385031215613d3d578182fd5b50508035926020909101359150565b60008284527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115613d7d578081fd5b6020830280836020870137939093016020019283525090919050565b6000815180845260208085019450808401835b83811015613dc857815187529582019590820190600101613dac565b509495945050505050565b60008151808452613deb81602086016020860161411b565b601f01601f19169290920160200192915050565b60006001600160a01b03808816835280871660208401525060a06040830152613e2b60a0830186613d99565b8281036060840152613e3d8186613d99565b90508281036080840152613e518185613dd3565b98975050505050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a06080830152613e9560a0830184613dd3565b979650505050505050565b60006001600160a01b0385168252836020830152606060408301526107096060830184613dd3565b600060408252613edc604083018688613d4c565b8281036020840152613e95818587613d4c565b6000602082526117466020830184613d99565b600060408252613f156040830185613d99565b82810360208401526107098185613d99565b6000602082526117466020830184613dd3565b604051601f8201601f1916810167ffffffffffffffff81118282101715613f6357613f636141a2565b604052919050565b600062ffffff808316818516808303821115613f8957613f89614176565b01949350505050565b60008219821115613fa557613fa5614176565b500190565b600082613fb957613fb961418c565b500490565b80825b6001808611613fd05750613ffb565b818704821115613fe257613fe2614176565b80861615613fef57918102915b9490941c938002613fc1565b94509492505050565b60006117466000198484614021565b600061174660001960ff8516845b60008261403057506001611746565b8161403d57506000611746565b8160018114614053576002811461405d5761408a565b6001915050611746565b60ff84111561406e5761406e614176565b6001841b91508482111561408457614084614176565b50611746565b5060208310610133831016604e8410600b84101617156140bd575081810a838111156140b8576140b8614176565b611746565b6140ca8484846001613fbe565b8086048211156140dc576140dc614176565b02949350505050565b60008160001904831182151516156140ff576140ff614176565b500290565b60008282101561411657614116614176565b500390565b60005b8381101561413657818101518382015260200161411e565b83811115612f625750506000910152565b600060001982141561415b5761415b614176565b5060010190565b6000826141715761417161418c565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146141cd57600080fd5b50565b6001600160e01b0319811681146141cd57600080fdfea2646970667358221220e7c88783439eae50fb42587d04db4e800720628008501df71cad978c2cf18fcb64736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102ab5760003560e01c80638f2839701161017b578063c7778baa116100d8578063e985e9c51161008c578063f242432a11610071578063f242432a14610621578063f6c983fb14610634578063ff23be5314610647576102ab565b8063e985e9c5146105fb578063eeb5a5d11461060e576102ab565b8063d12e76d0116100bd578063d12e76d0146105c2578063d5de8e49146105d5578063d9f37f8e146105e8576102ab565b8063c7778baa1461059e578063ce1b815f146105b1576102ab565b8063ac9fe4211161012f578063b9b75ebc11610114578063b9b75ebc14610565578063bd9ff41b14610578578063c0d241501461058b576102ab565b8063ac9fe4211461053f578063b390c0ab14610552576102ab565b806398fbde641161016057806398fbde64146105085780639bc88b9c1461051b578063a22cb4651461052c576102ab565b80638f283970146104bc57806395d89b41146104cf576102ab565b80632eb2c2d611610229578063572b6c05116101dd5780636e9960c3116101c25780636e9960c314610471578063731133e91461049657806376596d21146104a9576102ab565b8063572b6c0514610423578063654b748a14610445576102ab565b8063409146131161020e57806340914613146103c45780634c4d07e7146103d75780634e1273f414610403576102ab565b80632eb2c2d61461039e57806331e5361f146103b1576102ab565b806306fdde0311610280578063124d91e511610265578063124d91e514610349578063219cc8bc1461035c5780632e712b461461038b576102ab565b806306fdde03146103215780630e89341c14610336576102ab565b80628c2676146102b0578062fdd58e146102c557806301ffc9a7146102eb578063049476df1461030e575b600080fd5b6102c36102be3660046136ec565b61065a565b005b6102d86102d33660046139b9565b61066e565b6040519081526020015b60405180910390f35b6102fe6102f9366004613c6c565b610712565b60405190151581526020016102e2565b6102c361031c366004613698565b6107e5565b610329610934565b6040516102e29190613f27565b610329610344366004613c54565b61096c565b6102c3610357366004613a25565b610a8b565b6102d861036a366004613c54565b6bffffffff80000000000007ff191660009081526007602052604090205490565b6102d8610399366004613c54565b610b03565b6102c36103ac366004613761565b610b1b565b6102fe6103bf366004613698565b610dfb565b6102c36103d2366004613a25565b610eac565b6102fe6103e5366004613698565b6001600160a01b03166000908152600b602052604090205460ff1690565b610416610411366004613b44565b610f21565b6040516102e29190613eef565b6102fe610431366004613698565b6010546001600160a01b0390811691161490565b6102fe610453366004613698565b6001600160a01b031660009081526001602052604090205460ff1690565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016102e2565b6102c36104a4366004613a59565b61107d565b6102c36104b73660046136ec565b611236565b6102c36104ca366004613698565b6112e7565b60408051808201909152600581527f41535345540000000000000000000000000000000000000000000000000000006020820152610329565b6102d8610516366004613ac1565b6113a9565b600d546001600160a01b031661047e565b6102c361053a366004613985565b611571565b6102c361054d366004613985565b611587565b6102c3610560366004613d2b565b61165b565b6102c3610573366004613985565b61166d565b6102fe610586366004613c54565b61172b565b6102c36105993660046138dc565b61174d565b6102d86105ac366004613c54565b611a58565b6010546001600160a01b031661047e565b6102c36105d0366004613698565b611b14565b6102d86105e3366004613c54565b611bdf565b60115461047e906001600160a01b031681565b6102fe6106093660046136b4565b611c0e565b6102c361061c36600461381c565b611d0c565b6102c361062f366004613862565b611d9d565b6102fe610642366004613c54565b611ee7565b6102d86106553660046139e4565b611f36565b6106678585858585611236565b5050505050565b600061067982611ee7565b6106ca5760405162461bcd60e51b815260206004820152600a60248201527f494e56414c49445f49440000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6000806106d684612205565b6001600160a01b038716600090815260046020908152604080832085845290915290205491935091506107099082612254565b95945050505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316148061077557507fd9b67a26000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b806107a957507f0e89341c000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b806107dd57507f572b6c05000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b90505b919050565b600d546001600160a01b03166107f9612299565b6001600160a01b03161461084f5760405162461bcd60e51b815260206004820152600e60248201527f21424f554e4345525f41444d494e00000000000000000000000000000000000060448201526064016106c1565b6001600160a01b0381166108cb5760405162461bcd60e51b815260206004820152603960248201527f417373657442617365455243313135353a206e657720626f756e63657220616460448201527f6d696e2063616e2774206265207a65726f20616464726573730000000000000060648201526084016106c1565b600d546040516001600160a01b038084169216907f1bab6ababbec5519512e9ee16964953ec0f72839126138285cac1f1136bd642e90600090a3600d805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60408051808201909152601081527f53616e64626f782773204153534554730000000000000000000000000000000060208201525b90565b606061097782611ee7565b6109c35760405162461bcd60e51b815260206004820152600a60248201527f494e56414c49445f49440000000000000000000000000000000000000000000060448201526064016106c1565b6bffffffff80000000000007ff198216600090815260076020526040908190205490517f55f43cd400000000000000000000000000000000000000000000000000000000815260048101919091526024810183905273__$22fbfd89be1e25db7d564b4a9955403d23$__906355f43cd49060440160006040518083038186803b158015610a4f57600080fd5b505af4158015610a63573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107dd9190810190613ca4565b610a93612299565b6001600160a01b0316836001600160a01b03161480610ab95750610ab983610609612299565b610af35760405162461bcd60e51b815260206004820152600b60248201526a085055551213d49256915160aa1b60448201526064016106c1565b610afe8383836122e3565b505050565b6000610b0e82611a58565b5050603f1c62ffffff1690565b848314610b6a5760405162461bcd60e51b815260206004820152601260248201527f4d49534d4154434845445f4152525f4c454e000000000000000000000000000060448201526064016106c1565b6001600160a01b038716610ba85760405162461bcd60e51b81526020600482015260056024820152640544f3d3d360dc1b60448201526064016106c1565b6001600160a01b038816610bfe5760405162461bcd60e51b815260206004820152600760248201527f46524f4d3d3d300000000000000000000000000000000000000000000000000060448201526064016106c1565b6000610c08612299565b90506000816001600160a01b03168a6001600160a01b03161480610c315750610c318a83611c0e565b9050610ca48a8a8a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808e0282810182019093528d82529093508d92508c9182918501908490808284376000920191909152508892506123c5915050565b886001600160a01b03168a6001600160a01b0316836001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8b8b8b8b604051610cf79493929190613ec8565b60405180910390a4610da3828b8b8b8b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808f0282810182019093528e82529093508e92508d91829185019084908082843760009201919091525050604080516020601f8e018190048102820181019092528c815292508c91508b908190840183828082843760009201919091525061272f92505050565b610def5760405162461bcd60e51b815260206004820152601660248201527f313135355f5452414e534645525f52454a45435445440000000000000000000060448201526064016106c1565b50505050505050505050565b6000610e05612299565b6000546001600160a01b03908116911614610e505760405162461bcd60e51b815260206004820152600b60248201526a085055551213d49256915160aa1b60448201526064016106c1565b6011805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091556040517f5a91617bd1e0deac2e7e6f6fbd384ff93d50ab3d50b6f3cec6b7979a7b5c9de090600090a2506001919050565b600f546001600160a01b0316610ec0612299565b6001600160a01b031614610f165760405162461bcd60e51b815260206004820152600a60248201527f215052454449434154450000000000000000000000000000000000000000000060448201526064016106c1565b610afe838383612824565b6060838214610f725760405162461bcd60e51b815260206004820152601360248201527f4152475f4c454e4754485f4d49534d415443480000000000000000000000000060448201526064016106c1565b60008267ffffffffffffffff811115610f9b57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610fc4578160200160208202803683370190505b50905060005b8381101561107357611036878783818110610ff557634e487b7160e01b600052603260045260246000fd5b905060200201602081019061100a9190613698565b86868481811061102a57634e487b7160e01b600052603260045260246000fd5b9050602002013561066e565b82828151811061105657634e487b7160e01b600052603260045260246000fd5b60209081029190910101528061106b81614147565b915050610fca565b5095945050505050565b600f546001600160a01b0316611091612299565b6001600160a01b0316146110e75760405162461bcd60e51b815260206004820152600a60248201527f215052454449434154450000000000000000000000000000000000000000000060448201526064016106c1565b806111345760405162461bcd60e51b815260206004820152601060248201527f4d455441444154415f4d495353494e470000000000000000000000000000000060448201526064016106c1565b6001600160a01b0385166111725760405162461bcd60e51b81526020600482015260056024820152640544f3d3d360dc1b60448201526064016106c1565b6bffffffff80000000000007ff198416600081815260076020526040902054156111c95760405162461bcd60e51b815260206004820152600860248201526724a22faa20a5a2a760c11b60448201526064016106c1565b6111d582840184613c54565b60008281526007602052604090205561122e6111ef612299565b87878787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061294392505050565b505050505050565b6112406001612a45565b6000805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b0387811691909117909255600d8054821686841617905560118054821685841617905560108054909116918716919091179055600f805460ff90921674010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff90921691909117905550505050565b6000546001600160a01b031633146113415760405162461bcd60e51b815260206004820152601360248201527f41444d494e5f4143434553535f44454e4945440000000000000000000000000060448201526064016106c1565b600080546040516001600160a01b03808516939216917f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f91a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000856113f85760405162461bcd60e51b815260206004820152600760248201527f484153483d3d300000000000000000000000000000000000000000000000000060448201526064016106c1565b6114036103e5612299565b61144f5760405162461bcd60e51b815260206004820152600860248201527f21424f554e43455200000000000000000000000000000000000000000000000060448201526064016106c1565b6001600160a01b03841661148d5760405162461bcd60e51b81526020600482015260056024820152640544f3d3d360dc1b60448201526064016106c1565b6114af888689886001146114a25760016114a5565b60005b60ff166000612ab0565b6bffffffff80000000000007ff198116600081815260076020526040902054919250901561150a5760405162461bcd60e51b815260206004820152600860248201526724a22faa20a5a2a760c11b60448201526064016106c1565b6000818152600760205260409020879055611565611526612299565b86848988888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061294392505050565b50979650505050505050565b61158361157c612299565b8383612c6a565b5050565b6000546001600160a01b031633146116075760405162461bcd60e51b815260206004820152602c60248201527f6f6e6c792061646d696e20697320616c6c6f77656420746f206164642073757060448201527f6572206f70657261746f7273000000000000000000000000000000000000000060648201526084016106c1565b6001600160a01b038216600081815260016020526040808220805460ff191685151590811790915590519092917f44f92d27abdf4cfb6a7d712c3af68f3be086d4ca747ab802c36f67d6790060d891a35050565b611583611666612299565b83836122e3565b600d546001600160a01b0316611681612299565b6001600160a01b0316146116d75760405162461bcd60e51b815260206004820152600e60248201527f21424f554e4345525f41444d494e00000000000000000000000000000000000060448201526064016106c1565b6001600160a01b0382166000818152600b6020526040808220805460ff191685151590811790915590519092917f5ecd928ac22825e06273a3e8db8118dd7fe11bd2637ecfe4bfa25154948bd85f91a35050565b60006b807fffff800000000000000019821661174681611ee7565b9392505050565b8483146117c25760405162461bcd60e51b815260206004820152602d60248201527f4173736574455243313135353a2069647320616e6420616d6f756e7473206c6560448201527f6e677468206d69736d617463680000000000000000000000000000000000000060648201526084016106c1565b600f546001600160a01b03166117d6612299565b6001600160a01b03161461182c5760405162461bcd60e51b815260206004820152600a60248201527f215052454449434154450000000000000000000000000000000000000000000060448201526064016106c1565b806118795760405162461bcd60e51b815260206004820152601060248201527f4d455441444154415f4d495353494e470000000000000000000000000000000060448201526064016106c1565b6001600160a01b0387166118b75760405162461bcd60e51b81526020600482015260056024820152640544f3d3d360dc1b60448201526064016106c1565b60006118c582840184613bad565b905060005b868110156119ab5760006bffffffff80000000000007ff1989898481811061190257634e487b7160e01b600052603260045260246000fd5b90506020020135169050600760008281526020019081526020016000205460001c60001461195d5760405162461bcd60e51b815260206004820152600860248201526724a22faa20a5a2a760c11b60448201526064016106c1565b82828151811061197d57634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160009283526007909152604090912055806119a381614147565b9150506118ca565b50611a4e8888888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808c0282810182019093528b82529093508b92508a91829185019084908082843760009201919091525050604080516020601f8b018190048102820181019092528981529250899150889081908401838280828437600092019190915250612e4e92505050565b5050505050505050565b6000611a6382611ee7565b611aaf5760405162461bcd60e51b815260206004820152600a60248201527f494e56414c49445f49440000000000000000000000000000000000000000000060448201526064016106c1565b6b807fffff8000000000000000198216611ac881611ee7565b6107dd5760405162461bcd60e51b815260206004820152601360248201527f554e4d494e5445445f434f4c4c454354494f4e0000000000000000000000000060448201526064016106c1565b6000546001600160a01b0316611b28612299565b6001600160a01b031614611b7e5760405162461bcd60e51b815260206004820152600660248201527f2141444d494e000000000000000000000000000000000000000000000000000060448201526064016106c1565b600f805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527f41f738d25e68ffb96e8fd4d3de42056b6bf6961dd470e7b1158c46534596bbc99060200160405180910390a150565b6000611bed60576002614013565b611c05906b7f80000000000000000000008416613faa565b60ff1692915050565b60006001600160a01b038316611c665760405162461bcd60e51b815260206004820152600860248201527f4f574e45523d3d3000000000000000000000000000000000000000000000000060448201526064016106c1565b6001600160a01b038216611cbc5760405162461bcd60e51b815260206004820152600b60248201527f4f50455241544f523d3d3000000000000000000000000000000000000000000060448201526064016106c1565b6001600160a01b0380841660009081526005602090815260408083209386168352929052205460ff16806117465750506001600160a01b031660009081526001602052604090205460ff16919050565b611d14612299565b6001600160a01b0316836001600160a01b03161480611d58575060016000611d3a612299565b6001600160a01b0316815260208101919091526040016000205460ff165b611d925760405162461bcd60e51b815260206004820152600b60248201526a085055551213d49256915160aa1b60448201526064016106c1565b610afe838383612c6a565b6001600160a01b038516611ddb5760405162461bcd60e51b81526020600482015260056024820152640544f3d3d360dc1b60448201526064016106c1565b6001600160a01b038616611e315760405162461bcd60e51b815260206004820152600760248201527f46524f4d3d3d300000000000000000000000000000000000000000000000000060448201526064016106c1565b6000611e3f87878787612f68565b90508015611ede57611e92611e52612299565b8888888888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061311492505050565b611ede5760405162461bcd60e51b815260206004820152601660248201527f313135355f5452414e534645525f52454a45435445440000000000000000000060448201526064016106c1565b50505050505050565b6000611ef5600b6002614013565b611f0490627ff8008416613faa565b6107ff8316111580156107dd5750506bffffffff80000000000007ff1916600090815260076020526040902054151590565b6000611f40612299565b6001600160a01b0316846001600160a01b03161480611f665750611f6684610609612299565b611fa05760405162461bcd60e51b815260206004820152600b60248201526a085055551213d49256915160aa1b60448201526064016106c1565b611fab6103e5612299565b611ff75760405162461bcd60e51b815260206004820152600860248201527f21424f554e43455200000000000000000000000000000000000000000000000060448201526064016106c1565b6001600160a01b0382166120355760405162461bcd60e51b81526020600482015260056024820152640544f3d3d360dc1b60448201526064016106c1565b6b8000000000000000000000008316156120915760405162461bcd60e51b815260206004820152600e60248201527f554e495155455f4552433131353500000000000000000000000000000000000060448201526064016106c1565b6000838152600960205260408120546120b19063ffffffff166001613f6b565b600085815260096020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001662ffffff84161790559091506120f88561096c565b90506000612108603f6002614004565b6121179062ffffff85166140e5565b612123605f6002614013565b61212d9088613f92565b6121379190613f92565b9050612145878760016131e4565b6011546040516001600160a01b03909116906394d008ef908790849061216f908790602001613f27565b6040516020818303038152906040526040518463ffffffff1660e01b815260040161219c93929190613ea0565b600060405180830381600087803b1580156121b657600080fd5b505af11580156121ca573d6000803e3d6000fd5b50506040518392508891507faa923cda6d3360ee3cd49c083ac1fe5e062a5739b82a32d597a65168c0c6926c90600090a39695505050505050565b6000807fffffffffffffffffffffffffffffffffffffffff7fffffffffffffffffffffff8316610100602082020492506122426020610100613faa565b61224c9085614162565b915050915091565b6000806122676001640100000000614104565b90506000612276846001613f92565b6122819060206140e5565b61228d90610100614104565b9490941c169392505050565b6010546000906001600160a01b03163314156122dc57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c610969565b5033610969565b60008111801561230a575060016122fc60206002614013565b6123069190614104565b8111155b6123565760405162461bcd60e51b815260206004820152600e60248201527f494e56414c49445f414d4f554e5400000000000000000000000000000000000060448201526064016106c1565b6123618383836131e4565b60006001600160a01b038416612375612299565b6001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6285856040516123b8929190918252602082015260400190565b60405180910390a4505050565b82516000808080808661241a5760405162461bcd60e51b815260206004820152600e60248201527f4f50455241544f525f214155544800000000000000000000000000000000000060448201526064016106c1565b60005b868110156126bf578a6001600160a01b03168c6001600160a01b0316141561249d576124988c8b838151811061246357634e487b7160e01b600052603260045260246000fd5b60200260200101518b848151811061248b57634e487b7160e01b600052603260045260246000fd5b602002602001015161325f565b6126ad565b60008982815181106124bf57634e487b7160e01b600052603260045260246000fd5b602002602001015111156126ad576124fd8a82815181106124f057634e487b7160e01b600052603260045260246000fd5b6020026020010151612205565b9096509450816125cb576001600160a01b038c1660009081526004602090815260408083208984529091529020548951879350612566919087908c908590811061255757634e487b7160e01b600052603260045260246000fd5b602002602001015160016132ee565b6001600160a01b038c1660009081526004602090815260408083208a84529091529020548a519195506125c49187908c90859081106125b557634e487b7160e01b600052603260045260246000fd5b602002602001015160006132ee565b92506126ad565b81861461262a576001600160a01b038c8116600090815260046020818152604080842087855280835281852099909955938f16835290815282822094825284815282822095909555878152948452808520549290935291909220549084905b612669858a838151811061264e57634e487b7160e01b600052603260045260246000fd5b60200260200101516001876132ee909392919063ffffffff16565b93506126aa858a838151811061268f57634e487b7160e01b600052603260045260246000fd5b60200260200101516000866132ee909392919063ffffffff16565b92505b806126b781614147565b91505061241d565b5084158015906126e15750896001600160a01b03168b6001600160a01b031614155b15612722576001600160a01b03808c1660009081526004602081815260408084208a85528252808420889055938e1683529081528282208883529052208290555b5050505050505050505050565b60006001600160a01b0385163b6127485750600161281a565b6040517fbc197c810000000000000000000000000000000000000000000000000000000081526000906001600160a01b0387169063bc197c8190612798908b908b908a908a908a90600401613dff565b602060405180830381600087803b1580156127b257600080fd5b505af11580156127c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ea9190613c88565b6001600160e01b0319167fbc197c8100000000000000000000000000000000000000000000000000000000149150505b9695505050505050565b600061282e612299565b905060008061283c85612205565b6001600160a01b03881660009081526004602090815260408083208584529091528120549294509092506128749190839087906132ee565b6001600160a01b03878116600081815260046020908152604080832088845282528083209590955584518a8152908101899052919390928716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46128f783600088888860405180602001604052806000815250613114565b61122e5760405162461bcd60e51b815260206004820152601160248201527f5452414e534645525f52454a454354454400000000000000000000000000000060448201526064016106c1565b60008061294f85612205565b6001600160a01b0388166000908152600460209081526040808320858452909152902054919350915061298590828660026132ee565b6001600160a01b03878116600081815260046020908152604080832088845282528083209590955584518a8152908101899052919390928b16917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46129f987600088888888613114565b611ede5760405162461bcd60e51b815260206004820152601160248201527f5452414e534645525f52454a454354454400000000000000000000000000000060448201526064016106c1565b600181600e54901c1660011415612a9e5760405162461bcd60e51b815260206004820152601360248201527f414c52454144595f494e495449414c495345440000000000000000000000000060448201526064016106c1565b806001901b600e5417600e8190555050565b60008085118015612ad857506001612aca60206002614013565b612ad49190614104565b8511155b612b245760405162461bcd60e51b815260206004820152601460248201527f535550504c595f4f55545f4f465f424f554e445300000000000000000000000060448201526064016106c1565b612b30600c6002614013565b8361ffff161115612b835760405162461bcd60e51b815260206004820152601460248201527f4e554d5f46545f4f55545f4f465f424f554e445300000000000000000000000060448201526064016106c1565b61ffff8216612b94600b6002614013565b612ba29061ffff86166140e5565b612bae60176002614013565b612bbf9064ffffffffff88166140e5565b612bcb60576002614013565b600f54612bf3919074010000000000000000000000000000000000000000900460ff166140e5565b88600114612c02576000612c19565b612c0e605f6002614013565b612c199060016140e5565b612c2560606002614013565b612c38906001600160a01b038d166140e5565b612c429190613f92565b612c4c9190613f92565b612c569190613f92565b612c609190613f92565b61281a9190613f92565b6001600160a01b038316612cc05760405162461bcd60e51b815260206004820152600960248201527f53454e4445523d3d30000000000000000000000000000000000000000000000060448201526064016106c1565b816001600160a01b0316836001600160a01b03161415612d225760405162461bcd60e51b815260206004820152601060248201527f53454e4445523d3d4f50455241544f520000000000000000000000000000000060448201526064016106c1565b6001600160a01b038216612d785760405162461bcd60e51b815260206004820152600b60248201527f4f50455241544f523d3d3000000000000000000000000000000000000000000060448201526064016106c1565b6001600160a01b03821660009081526001602052604090205460ff1615612de15760405162461bcd60e51b815260206004820152601b60248201527f415050525f4558495354494e475f53555045524f50455241544f52000000000060448201526064016106c1565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60005b8251811015612f4d576000838281518110612e7c57634e487b7160e01b600052603260045260246000fd5b60200260200101511115612f3b57600080612eb08684815181106124f057634e487b7160e01b600052603260045260246000fd5b91509150612f1081868581518110612ed857634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b038b1660009081526004835260408082208883529093529190912054919060026132ee565b6001600160a01b03881660009081526004602090815260408083209583529490529290922091909155505b80612f4581614147565b915050612e51565b50612f62612f59612299565b8585858561347c565b50505050565b600080612f73612299565b90506000816001600160a01b0316876001600160a01b03161480612f9c5750612f9c8783611c0e565b905080612feb5760405162461bcd60e51b815260206004820152600e60248201527f4f50455241544f525f214155544800000000000000000000000000000000000060448201526064016106c1565b83156130a757600080612ffd87612205565b6001600160a01b038b166000908152600460209081526040808320858452909152902054919350915061303390828860016132ee565b6001600160a01b03808b166000908152600460208181526040808420888552825280842095909555928c16825282528281208582529091529081205461307c91839089906132ee565b6001600160a01b03891660009081526004602090815260408083209583529490529290922091909155505b856001600160a01b0316876001600160a01b0316836001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6288886040516130ff929190918252602082015260400190565b60405180910390a45060019695505050505050565b60006001600160a01b0385163b61312d5750600161281a565b6040517ff23a6e6100000000000000000000000000000000000000000000000000000000808252906001600160a01b0387169063f23a6e619061317c908b908b908a908a908a90600401613e5d565b602060405180830381600087803b15801561319657600080fd5b505af11580156131aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131ce9190613c88565b6001600160e01b03191614979650505050505050565b6000806131f084612205565b6001600160a01b03871660009081526004602090815260408083208584529091529020549193509150613230908263ffffffff808716906001906132ee16565b6001600160a01b0390951660009081526004602090815260408083209483529390529190912093909355505050565b60008061326b84612205565b6001600160a01b0387166000908152600460209081526040808320858452909152902054919350915083906132a09083612254565b10156106675760405162461bcd60e51b815260206004820152600f60248201527f42414c414e43455f544f4f5f4c4f57000000000000000000000000000000000060448201526064016106c1565b6000808083600281111561331257634e487b7160e01b600052602160045260246000fd5b141561333f576133228686612254565b905061333886866133338785613f92565b61352f565b9150613473565b600183600281111561336157634e487b7160e01b600052602160045260246000fd5b14156133f8576133718686612254565b9050838110156133e95760405162461bcd60e51b815260206004820152602260248201527f63616e277420737562737472616374206d6f7265207468616e2074686572652060448201527f697300000000000000000000000000000000000000000000000000000000000060648201526084016106c1565b61333886866133338785614104565b600283600281111561341a57634e487b7160e01b600052602160045260246000fd5b141561342b5761333886868661352f565b60405162461bcd60e51b815260206004820152601160248201527f496e76616c6964206f7065726174696f6e00000000000000000000000000000060448201526064016106c1565b50949350505050565b836001600160a01b031660006001600160a01b0316866001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb86866040516134cc929190613f02565b60405180910390a46134e38560008686868661272f565b6106675760405162461bcd60e51b815260206004820152601160248201527f5452414e534645525f52454a454354454400000000000000000000000000000060448201526064016106c1565b600061353d60206002614004565b82106135b15760405162461bcd60e51b815260206004820152602360248201527f416d6f756e7420746f20777269746520696e2062696e20697320746f6f206c6160448201527f726765000000000000000000000000000000000000000000000000000000000060648201526084016106c1565b60006135c36001640100000000614104565b905060006135d2856001613f92565b6135dd9060206140e5565b6135e990610100614104565b91821b199590951692901b919091179392505050565b60008083601f840112613610578182fd5b50813567ffffffffffffffff811115613627578182fd5b602083019150836020808302850101111561364157600080fd5b9250929050565b803580151581146107e057600080fd5b60008083601f840112613669578182fd5b50813567ffffffffffffffff811115613680578182fd5b60208301915083602082850101111561364157600080fd5b6000602082840312156136a9578081fd5b8135611746816141b8565b600080604083850312156136c6578081fd5b82356136d1816141b8565b915060208301356136e1816141b8565b809150509250929050565b600080600080600060a08688031215613703578081fd5b853561370e816141b8565b9450602086013561371e816141b8565b9350604086013561372e816141b8565b9250606086013561373e816141b8565b9150608086013560ff81168114613753578182fd5b809150509295509295909350565b60008060008060008060008060a0898b03121561377c578283fd5b8835613787816141b8565b97506020890135613797816141b8565b9650604089013567ffffffffffffffff808211156137b3578485fd5b6137bf8c838d016135ff565b909850965060608b01359150808211156137d7578485fd5b6137e38c838d016135ff565b909650945060808b01359150808211156137fb578384fd5b506138088b828c01613658565b999c989b5096995094979396929594505050565b600080600060608486031215613830578283fd5b833561383b816141b8565b9250602084013561384b816141b8565b915061385960408501613648565b90509250925092565b60008060008060008060a0878903121561387a578182fd5b8635613885816141b8565b95506020870135613895816141b8565b94506040870135935060608701359250608087013567ffffffffffffffff8111156138be578283fd5b6138ca89828a01613658565b979a9699509497509295939492505050565b60008060008060008060006080888a0312156138f6578081fd5b8735613901816141b8565b9650602088013567ffffffffffffffff8082111561391d578283fd5b6139298b838c016135ff565b909850965060408a0135915080821115613941578283fd5b61394d8b838c016135ff565b909650945060608a0135915080821115613965578283fd5b506139728a828b01613658565b989b979a50959850939692959293505050565b60008060408385031215613997578182fd5b82356139a2816141b8565b91506139b060208401613648565b90509250929050565b600080604083850312156139cb578182fd5b82356139d6816141b8565b946020939093013593505050565b6000806000606084860312156139f8578081fd5b8335613a03816141b8565b9250602084013591506040840135613a1a816141b8565b809150509250925092565b600080600060608486031215613a39578081fd5b8335613a44816141b8565b95602085013595506040909401359392505050565b600080600080600060808688031215613a70578283fd5b8535613a7b816141b8565b94506020860135935060408601359250606086013567ffffffffffffffff811115613aa4578182fd5b613ab088828901613658565b969995985093965092949392505050565b600080600080600080600060c0888a031215613adb578081fd5b8735613ae6816141b8565b9650602088013564ffffffffff81168114613aff578182fd5b955060408801359450606088013593506080880135613b1d816141b8565b925060a088013567ffffffffffffffff811115613b38578182fd5b6139728a828b01613658565b60008060008060408587031215613b59578182fd5b843567ffffffffffffffff80821115613b70578384fd5b613b7c888389016135ff565b90965094506020870135915080821115613b94578384fd5b50613ba1878288016135ff565b95989497509550505050565b60006020808385031215613bbf578182fd5b823567ffffffffffffffff80821115613bd6578384fd5b818501915085601f830112613be9578384fd5b813581811115613bfb57613bfb6141a2565b8381029150613c0b848301613f3a565b8181528481019084860184860187018a1015613c25578788fd5b8795505b83861015613c47578035835260019590950194918601918601613c29565b5098975050505050505050565b600060208284031215613c65578081fd5b5035919050565b600060208284031215613c7d578081fd5b8135611746816141d0565b600060208284031215613c99578081fd5b8151611746816141d0565b600060208284031215613cb5578081fd5b815167ffffffffffffffff80821115613ccc578283fd5b818401915084601f830112613cdf578283fd5b815181811115613cf157613cf16141a2565b613d046020601f19601f84011601613f3a565b9150808252856020828501011115613d1a578384fd5b61347381602084016020860161411b565b60008060408385031215613d3d578182fd5b50508035926020909101359150565b60008284527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115613d7d578081fd5b6020830280836020870137939093016020019283525090919050565b6000815180845260208085019450808401835b83811015613dc857815187529582019590820190600101613dac565b509495945050505050565b60008151808452613deb81602086016020860161411b565b601f01601f19169290920160200192915050565b60006001600160a01b03808816835280871660208401525060a06040830152613e2b60a0830186613d99565b8281036060840152613e3d8186613d99565b90508281036080840152613e518185613dd3565b98975050505050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a06080830152613e9560a0830184613dd3565b979650505050505050565b60006001600160a01b0385168252836020830152606060408301526107096060830184613dd3565b600060408252613edc604083018688613d4c565b8281036020840152613e95818587613d4c565b6000602082526117466020830184613d99565b600060408252613f156040830185613d99565b82810360208401526107098185613d99565b6000602082526117466020830184613dd3565b604051601f8201601f1916810167ffffffffffffffff81118282101715613f6357613f636141a2565b604052919050565b600062ffffff808316818516808303821115613f8957613f89614176565b01949350505050565b60008219821115613fa557613fa5614176565b500190565b600082613fb957613fb961418c565b500490565b80825b6001808611613fd05750613ffb565b818704821115613fe257613fe2614176565b80861615613fef57918102915b9490941c938002613fc1565b94509492505050565b60006117466000198484614021565b600061174660001960ff8516845b60008261403057506001611746565b8161403d57506000611746565b8160018114614053576002811461405d5761408a565b6001915050611746565b60ff84111561406e5761406e614176565b6001841b91508482111561408457614084614176565b50611746565b5060208310610133831016604e8410600b84101617156140bd575081810a838111156140b8576140b8614176565b611746565b6140ca8484846001613fbe565b8086048211156140dc576140dc614176565b02949350505050565b60008160001904831182151516156140ff576140ff614176565b500290565b60008282101561411657614116614176565b500390565b60005b8381101561413657818101518382015260200161411e565b83811115612f625750506000910152565b600060001982141561415b5761415b614176565b5060010190565b6000826141715761417161418c565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146141cd57600080fd5b50565b6001600160e01b0319811681146141cd57600080fdfea2646970667358221220e7c88783439eae50fb42587d04db4e800720628008501df71cad978c2cf18fcb64736f6c63430008020033",
  "libraries": {
    "ERC1155ERC721Helper": "0x3A9eF4A703862611Af6355Ee8481672FF9161aB6",
    "AssetHelper": "0x1e8d7e1D3E8ACd7B852883A3bDDc83a230Ad4113"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "params": {
          "id": "the token type of which to get the balance of.",
          "owner": "The address of the token holder."
        },
        "returns": {
          "_0": "the balance of `owner` for the token type `id`."
        }
      },
      "balanceOfBatch(address[],uint256[])": {
        "params": {
          "ids": "ids of each token type to query.",
          "owners": "the addresses of the token holders queried."
        },
        "returns": {
          "_0": "the balance of each `owners` for each token type `ids`."
        }
      },
      "burn(uint256,uint256)": {
        "params": {
          "amount": "amount of token to burn.",
          "id": "token type which will be burnt."
        }
      },
      "burnFrom(address,uint256,uint256)": {
        "params": {
          "amount": "amount of token to burn.",
          "from": "address whose token is to be burnt.",
          "id": "token type which will be burnt."
        }
      },
      "changeAdmin(address)": {
        "details": "Change the administrator to be `newAdmin`.",
        "params": {
          "newAdmin": "The address of the new administrator."
        }
      },
      "changeBouncerAdmin(address)": {
        "params": {
          "newBouncerAdmin": "address of the new minting administrator."
        }
      },
      "collectionIndexOf(uint256)": {
        "params": {
          "id": "the token to get the index of."
        },
        "returns": {
          "_0": "the index/order at which the token `id` was minted in a collection."
        }
      },
      "collectionOf(uint256)": {
        "params": {
          "id": "the token to get the collection of."
        },
        "returns": {
          "_0": "the collection the NFT is part of."
        }
      },
      "doesHashExist(uint256)": {
        "details": "if IS_NFT > 0 then PACK_NUM_FT_TYPES may be 0",
        "params": {
          "id": "the token to check."
        },
        "returns": {
          "_0": "bool whether a given id has a valid structure."
        }
      },
      "extractERC721From(address,uint256,address)": {
        "details": "Extraction is limited to bouncers.",
        "params": {
          "id": "the token type to extract from.",
          "sender": "address which own the token to be extracted.",
          "to": "address which will receive the token."
        },
        "returns": {
          "_0": "newId the id of the newly minted NFT."
        }
      },
      "getAdmin()": {
        "details": "Get the current administrator of this contract.",
        "returns": {
          "_0": "The current administrator of this contract."
        }
      },
      "getBouncerAdmin()": {
        "returns": {
          "_0": "the current minting administrator in charge of minting rights."
        }
      },
      "getChainIndex(uint256)": {
        "details": "take care not to confuse chainIndex with chain ID.",
        "params": {
          "id": "the token id to query."
        },
        "returns": {
          "_0": "chainIndex the chainIndex that the token was minted on originally."
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "operator": "address of authorized operator.",
          "owner": "the owner of the tokens."
        },
        "returns": {
          "isOperator": "true if the operator is approved, false if not."
        }
      },
      "isBouncer(address)": {
        "params": {
          "who": "The address to query."
        },
        "returns": {
          "_0": "whether the address has minting rights."
        }
      },
      "isCollection(uint256)": {
        "params": {
          "id": "collectionId to check."
        },
        "returns": {
          "_0": "whether the id is a collection."
        }
      },
      "isSuperOperator(address)": {
        "params": {
          "who": "The address to query."
        },
        "returns": {
          "_0": "whether the address has superOperator rights."
        }
      },
      "mint(address,uint256,uint256,bytes)": {
        "details": "Should be callable only by AssetERC1155Tunnel.Encoded bytes32 metadata hash must be provided as data. Make sure minting is done only by this function.",
        "params": {
          "account": "user address for whom token is being minted.",
          "amount": "amount of token being minted.",
          "data": "token metadata.",
          "id": "token which is being minted."
        }
      },
      "mint(address,uint40,bytes32,uint256,address,bytes)": {
        "details": "Function implementation reserved for future use cases on L1.For this function it is not required to provide data.",
        "params": {
          "creator": "address of the creator of the token.",
          "data": "extra data to accompany the minting call.",
          "hash": "hash of an IPFS cidv1 folder that contains the metadata of the token type in the file 0.json.",
          "owner": "address that will receive the tokens.",
          "packId": "unique packId for that token.",
          "supply": "number of tokens minted for that token type."
        },
        "returns": {
          "id": "the id of the newly minted token type."
        }
      },
      "mintDeficit(address,uint256,uint256)": {
        "details": "This mint calls for add instead of replace in packedTokenBalance",
        "params": {
          "account": "address of the ownerof tokens.",
          "amount": "quantity of the token to be minted.",
          "id": "id of the token to be minted."
        }
      },
      "mintMultiple(address,uint256[],uint256[],bytes)": {
        "details": "Should be callable only by AssetERC1155Tunnel.Encoded bytes32[] metadata hashes must be provided as data.",
        "params": {
          "amounts": "supply for each token type.",
          "data": "token metadata.",
          "ids": "ids to mint.",
          "to": "address to mint to."
        }
      },
      "name()": {
        "returns": {
          "_name": "the name of the tokens."
        }
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "call data should be optimized to order ids so packedBalance can be used efficiently.",
        "params": {
          "data": "aditional data accompanying the transfer.",
          "from": "address from which tokens are transfered.",
          "ids": "ids of each token type transfered.",
          "to": "address to which the token will be transfered.",
          "values": "amount of each token type transfered."
        }
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "params": {
          "data": "aditional data accompanying the transfer.",
          "from": "address from which tokens are transfered.",
          "id": "the token type transfered.",
          "to": "address to which the token will be transfered.",
          "value": "amount of token transfered."
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "approved": "whether to approve or revoke",
          "operator": "address which will be granted rights to transfer all tokens of the caller."
        }
      },
      "setApprovalForAllFor(address,address,bool)": {
        "details": "used for Meta Transaction (from metaTransactionContract).",
        "params": {
          "approved": "whether to approve or revoke.",
          "operator": "address which will be granted rights to transfer all token owned by `sender`.",
          "sender": "address which grant approval."
        }
      },
      "setAssetERC721(address)": {
        "params": {
          "assetERC721": "the contract address to set the ERC721 contract to."
        },
        "returns": {
          "_0": "true if the operation completes successfully."
        }
      },
      "setBouncer(address,bool)": {
        "params": {
          "bouncer": "address that will be given/removed minting bouncer rights.",
          "enabled": "set whether the address is enabled or disabled as a minting bouncer."
        }
      },
      "setPredicate(address)": {
        "params": {
          "predicate": "address that will be given minting rights for L1."
        }
      },
      "setSuperOperator(address,bool)": {
        "params": {
          "enabled": "set whether the superOperator is enabled or disabled.",
          "superOperator": "address that will be given/removed superOperator right."
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "id": "the interface identifier, as specified in ERC-165."
        },
        "returns": {
          "_0": "`true` if the contract implements `id`."
        }
      },
      "symbol()": {
        "returns": {
          "_symbol": "the symbol of the tokens."
        }
      },
      "uri(uint256)": {
        "params": {
          "id": "ERC1155 token to get the uri of."
        },
        "returns": {
          "_0": "URI string"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "balanceOf(address,uint256)": {
        "notice": "Get the balance of `owner` for the token type `id`."
      },
      "balanceOfBatch(address[],uint256[])": {
        "notice": "Get the balance of `owners` for each token type `ids`."
      },
      "burn(uint256,uint256)": {
        "notice": "Burns `amount` tokens of type `id`."
      },
      "burnFrom(address,uint256,uint256)": {
        "notice": "Burns `amount` tokens of type `id` from `from`."
      },
      "changeBouncerAdmin(address)": {
        "notice": "Change the minting administrator to be `newBouncerAdmin`."
      },
      "collectionIndexOf(uint256)": {
        "notice": "Gives the index at which an NFT was minted in a collection : first of a collection get the zero index."
      },
      "collectionOf(uint256)": {
        "notice": "Gives the collection a specific token belongs to."
      },
      "doesHashExist(uint256)": {
        "notice": "Whether or not an ERC1155 or ERC721 tokenId has a valid structure and the metadata hash exists."
      },
      "extractERC721From(address,uint256,address)": {
        "notice": "Extracts an EIP-721 Asset from an EIP-1155 Asset."
      },
      "getBouncerAdmin()": {
        "notice": "Returns the current administrator in charge of minting rights."
      },
      "getChainIndex(uint256)": {
        "notice": "Queries the chainIndex that a token was minted on originally."
      },
      "isApprovedForAll(address,address)": {
        "notice": "Queries the approval status of `operator` for owner `owner`."
      },
      "isBouncer(address)": {
        "notice": "check whether address `who` is given minting bouncer rights."
      },
      "isCollection(uint256)": {
        "notice": "Return wether the id is a collection"
      },
      "isSuperOperator(address)": {
        "notice": "check whether address `who` is given superOperator rights."
      },
      "mint(address,uint256,uint256,bytes)": {
        "notice": "Creates `amount` tokens of token type `id`, and assigns them to `account`."
      },
      "mint(address,uint40,bytes32,uint256,address,bytes)": {
        "notice": "Mint a token type for `creator` on slot `packId`."
      },
      "mintDeficit(address,uint256,uint256)": {
        "notice": "function to be called by tunnel to mint deficit of minted tokens"
      },
      "mintMultiple(address,uint256[],uint256[],bytes)": {
        "notice": "Creates `amounts` tokens of token types `ids`, and assigns them to `account`."
      },
      "name()": {
        "notice": "A descriptive name for the collection of tokens in this contract."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "notice": "Transfers `values` tokens of type `ids` from  `from` to `to` (with safety call)."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "notice": "Transfers `value` tokens of type `id` from  `from` to `to`  (with safety call)."
      },
      "setApprovalForAll(address,bool)": {
        "notice": "Enable or disable approval for `operator` to manage all of the caller's tokens."
      },
      "setApprovalForAllFor(address,address,bool)": {
        "notice": "Enable or disable approval for `operator` to manage all `sender`'s tokens."
      },
      "setAssetERC721(address)": {
        "notice": "Set the ERC721 contract."
      },
      "setBouncer(address,bool)": {
        "notice": "Enable or disable the ability of `bouncer` to mint tokens (minting bouncer rights)."
      },
      "setPredicate(address)": {
        "notice": "Set the address that will be able to mint on L1 (limited to custom predicate)."
      },
      "setSuperOperator(address,bool)": {
        "notice": "Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights)."
      },
      "supportsInterface(bytes4)": {
        "notice": "Query if a contract implements interface `id`."
      },
      "symbol()": {
        "notice": "An abbreviated name for the collection of tokens in this contract."
      },
      "uri(uint256)": {
        "notice": "A distinct Uniform Resource Identifier (URI) for a given ERC1155 asset."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 32964,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 33420,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_superOperators",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 20366,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_numNFTPerAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 20370,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_owners",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 20376,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_packedTokenBalance",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 20382,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_operatorsForAll",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 20386,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_erc721operators",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 20390,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_metadataHash",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 20394,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_rarityPacks",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_bytes_storage)"
      },
      {
        "astId": 20398,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_nextCollectionIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint32)"
      },
      {
        "astId": 20402,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_creatorship",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 20406,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_bouncers",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 20410,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_metaTransactionContracts",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 20412,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_bouncerAdmin",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 20414,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_init",
        "offset": 20,
        "slot": "13",
        "type": "t_bool"
      },
      {
        "astId": 20419,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_initBits",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 20421,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_predicate",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 20423,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_chainIndex",
        "offset": 20,
        "slot": "15",
        "type": "t_uint8"
      },
      {
        "astId": 20425,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 20428,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "_assetERC721",
        "offset": 0,
        "slot": "17",
        "type": "t_contract(IAssetERC721)34788"
      },
      {
        "astId": 20432,
        "contract": "src/solc_0.8/assetERC1155/AssetERC1155.sol:AssetERC1155",
        "label": "__gap",
        "offset": 0,
        "slot": "18",
        "type": "t_array(t_uint256)20_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)20_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[20]",
        "numberOfBytes": "640"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IAssetERC721)34788": {
        "encoding": "inplace",
        "label": "contract IAssetERC721",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}