{
  "address": "0xa3DD2025c948879E967A63ae434979C9e92A23d4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint16[]",
              "name": "gemIds",
              "type": "uint16[]"
            },
            {
              "internalType": "bytes32",
              "name": "blockHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IAssetAttributesRegistry.GemEvent[]",
          "name": "events",
          "type": "tuple[]"
        }
      ],
      "name": "getAttributes",
      "outputs": [
        {
          "internalType": "uint32[]",
          "name": "values",
          "type": "uint32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xa2b9eba0c88f72d513914def690b4c29e09f176e89ab542a24abb8d60178bd8e",
  "receipt": {
    "to": null,
    "from": "0xA796AE911621E00809E0E7C8f0AD6BF118E5139e",
    "contractAddress": "0xa3DD2025c948879E967A63ae434979C9e92A23d4",
    "transactionIndex": 2,
    "gasUsed": "537586",
    "logsBloom": "0x
    "blockHash": "0x7c8511d6736ebe7fe79d34331ca6cc6ffc39ead13dd3df0453c0e432a5acbf16",
    "transactionHash": "0xa2b9eba0c88f72d513914def690b4c29e09f176e89ab542a24abb8d60178bd8e",
    "logs": [],
    "blockNumber": 5612700,
    "cumulativeGasUsed": "923567",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "964f7818f39ebb9ad733ad81e286fb40",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16[]\",\"name\":\"gemIds\",\"type\":\"uint16[]\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IAssetAttributesRegistry.GemEvent[]\",\"name\":\"events\",\"type\":\"tuple[]\"}],\"name\":\"getAttributes\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"values\",\"type\":\"uint32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getAttributes(uint256,(uint16[],bytes32)[])\":{\"params\":{\"assetId\":\"The asset tokenId.\",\"events\":\"An array of GemEvents. Be aware that only gemEvents from the last CatalystApplied event onwards should be used to populate a query. If gemEvents from multiple CatalystApplied events are included the output values will be incorrect.\"},\"returns\":{\"values\":\"An array of values for each gem present in the asset.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getAttributes(uint256,(uint16[],bytes32)[])\":{\"notice\":\"Returns the values for each gem included in a given asset.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/solc_0.8/catalyst/DefaultAttributes.sol\":\"DefaultAttributes\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"src/solc_0.8/catalyst/DefaultAttributes.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../common/interfaces/IAttributes.sol\\\";\\n\\ncontract DefaultAttributes is IAttributes {\\n    uint256 internal constant MAX_NUM_GEMS = 15;\\n    uint256 internal constant MAX_NUM_GEM_TYPES = 256;\\n\\n    /// @notice Returns the values for each gem included in a given asset.\\n    /// @param assetId The asset tokenId.\\n    /// @param events An array of GemEvents. Be aware that only gemEvents from the last CatalystApplied event onwards should be used to populate a query. If gemEvents from multiple CatalystApplied events are included the output values will be incorrect.\\n    /// @return values An array of values for each gem present in the asset.\\n    function getAttributes(uint256 assetId, IAssetAttributesRegistry.GemEvent[] calldata events)\\n        external\\n        pure\\n        override\\n        returns (uint32[] memory values)\\n    {\\n        values = new uint32[](MAX_NUM_GEM_TYPES);\\n\\n        uint256 numGems;\\n        for (uint256 i = 0; i < events.length; i++) {\\n            numGems += events[i].gemIds.length;\\n        }\\n        require(numGems <= MAX_NUM_GEMS, \\\"TOO_MANY_GEMS\\\");\\n\\n        uint32 minValue = (uint32(numGems) - 1) * 5 + 1;\\n\\n        uint256 numGemsSoFar = 0;\\n        for (uint256 i = 0; i < events.length; i++) {\\n            numGemsSoFar += events[i].gemIds.length;\\n            for (uint256 j = 0; j < events[i].gemIds.length; j++) {\\n                uint256 gemId = events[i].gemIds[j];\\n                uint256 slotIndex = numGemsSoFar - events[i].gemIds.length + j;\\n                if (values[gemId] == 0) {\\n                    // first gem : value = roll between ((numGemsSoFar-1)*5+1) and 25\\n                    values[gemId] = _computeValue(\\n                        assetId,\\n                        gemId,\\n                        events[i].blockHash,\\n                        slotIndex,\\n                        (uint32(numGemsSoFar) - 1) * 5 + 1\\n                    );\\n                    // bump previous values:\\n                    if (values[gemId] < minValue) {\\n                        values[gemId] = minValue;\\n                    }\\n                } else {\\n                    // further gem, previous roll are overriden with 25 and new roll between 1 and 25\\n                    uint32 newRoll = _computeValue(assetId, gemId, events[i].blockHash, slotIndex, 1);\\n                    values[gemId] = (((values[gemId] - 1) / 25) + 1) * 25 + newRoll;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev compute a random value between min to 25.\\n    /// example: 1-25, 6-25, 11-25, 16-25\\n    /// @param assetId The id of the asset.\\n    /// @param gemId The id of the gem.\\n    /// @param blockHash The blockHash from the gemEvent.\\n    /// @param slotIndex Index of the current gem.\\n    /// @param min The minumum value this gem can have.\\n    /// @return The computed value for the given gem.\\n    function _computeValue(\\n        uint256 assetId,\\n        uint256 gemId,\\n        bytes32 blockHash,\\n        uint256 slotIndex,\\n        uint32 min\\n    ) internal pure returns (uint32) {\\n        return min + uint16(uint256(keccak256(abi.encodePacked(gemId, assetId, blockHash, slotIndex))) % (26 - min));\\n    }\\n}\\n\",\"keccak256\":\"0xca1c7c116ff335bf7d8a6d252ab8da42cccf2c31213b8940383e52ed42387330\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IAssetAttributesRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\npragma experimental ABIEncoderV2;\\n\\ninterface IAssetAttributesRegistry {\\n    struct GemEvent {\\n        uint16[] gemIds;\\n        bytes32 blockHash;\\n    }\\n\\n    function getRecord(uint256 assetId)\\n        external\\n        view\\n        returns (\\n            bool exists,\\n            uint16 catalystId,\\n            uint16[] memory gemIds\\n        );\\n\\n    function getAttributes(uint256 assetId, GemEvent[] calldata events) external view returns (uint32[] memory values);\\n\\n    function setCatalyst(\\n        uint256 assetId,\\n        uint16 catalystId,\\n        uint16[] calldata gemIds\\n    ) external;\\n\\n    function setCatalystWithBlockNumber(\\n        uint256 assetId,\\n        uint16 catalystId,\\n        uint16[] calldata gemIds,\\n        uint64 blockNumber\\n    ) external;\\n\\n    function addGems(uint256 assetId, uint16[] calldata gemIds) external;\\n\\n    function setMigrationContract(address _migrationContract) external;\\n}\\n\",\"keccak256\":\"0x6cc55099edc820bd7fbf4811e51ae3a5cb7a8bf81e2f38b5447cd606eb543a99\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IAttributes.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IAssetAttributesRegistry.sol\\\";\\n\\ninterface IAttributes {\\n    function getAttributes(uint256 assetId, IAssetAttributesRegistry.GemEvent[] calldata events)\\n        external\\n        view\\n        returns (uint32[] memory values);\\n}\\n\",\"keccak256\":\"0x4cbdba9ad3fae8334fe614ae28fb3136454eada28f13f911ffce9c8c701c56a7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506108c6806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806374903c8614610030575b600080fd5b61004361003e3660046105e0565b610059565b6040516100509190610659565b60405180910390f35b60408051610100808252612020820190925260609160208201612000803683370190505090506000805b838110156100e6578484828181106100ab57634e487b7160e01b600052603260045260246000fd5b90506020028101906100bd919061070f565b6100c790806106a3565b6100d291508361074c565b9150806100de81610817565b915050610083565b50600f811115610156576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f544f4f5f4d414e595f47454d5300000000000000000000000000000000000000604482015260640160405180910390fd5b60006101636001836107f2565b61016e9060056107af565b610179906001610764565b90506000805b8581101561053f578686828181106101a757634e487b7160e01b600052603260045260246000fd5b90506020028101906101b9919061070f565b6101c390806106a3565b6101ce91508361074c565b915060005b8787838181106101f357634e487b7160e01b600052603260045260246000fd5b9050602002810190610205919061070f565b61020f90806106a3565b905081101561052c57600088888481811061023a57634e487b7160e01b600052603260045260246000fd5b905060200281019061024c919061070f565b61025690806106a3565b8381811061027457634e487b7160e01b600052603260045260246000fd5b905060200201602081019061028991906105b7565b61ffff1690506000828a8a868181106102b257634e487b7160e01b600052603260045260246000fd5b90506020028101906102c4919061070f565b6102ce90806106a3565b6102d99150876107db565b6102e3919061074c565b905087828151811061030557634e487b7160e01b600052603260045260246000fd5b602002602001015163ffffffff16600014156104335761037d8b838c8c8881811061034057634e487b7160e01b600052603260045260246000fd5b9050602002810190610352919061070f565b602001358461036260018b6107f2565b61036d9060056107af565b610378906001610764565b61054a565b88838151811061039d57634e487b7160e01b600052603260045260246000fd5b602002602001019063ffffffff16908163ffffffff16815250508563ffffffff168883815181106103de57634e487b7160e01b600052603260045260246000fd5b602002602001015163ffffffff16101561042e578588838151811061041357634e487b7160e01b600052603260045260246000fd5b602002602001019063ffffffff16908163ffffffff16815250505b610517565b60006104788c848d8d8981811061045a57634e487b7160e01b600052603260045260246000fd5b905060200281019061046c919061070f565b6020013585600161054a565b905080601960018b868151811061049f57634e487b7160e01b600052603260045260246000fd5b60200260200101516104b191906107f2565b6104bb919061078c565b6104c6906001610764565b6104d19060196107af565b6104db9190610764565b8984815181106104fb57634e487b7160e01b600052603260045260246000fd5b602002602001019063ffffffff16908163ffffffff1681525050505b5050808061052490610817565b9150506101d3565b508061053781610817565b91505061017f565b505050509392505050565b600061055782601a6107f2565b6040805160208082018990528183018a90526060820188905260808083018890528351808403909101815260a0909201909252805191012061059f9163ffffffff1690610850565b6105ad9061ffff1683610764565b9695505050505050565b6000602082840312156105c8578081fd5b813561ffff811681146105d9578182fd5b9392505050565b6000806000604084860312156105f4578182fd5b83359250602084013567ffffffffffffffff80821115610612578384fd5b818601915086601f830112610625578384fd5b813581811115610633578485fd5b8760208083028501011115610646578485fd5b6020830194508093505050509250925092565b6020808252825182820181905260009190848201906040850190845b8181101561069757835163ffffffff1683529284019291840191600101610675565b50909695505050505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126106d7578283fd5b83018035915067ffffffffffffffff8211156106f1578283fd5b602090810192508102360382131561070857600080fd5b9250929050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1833603018112610742578182fd5b9190910192915050565b6000821982111561075f5761075f610864565b500190565b600063ffffffff80831681851680830382111561078357610783610864565b01949350505050565b600063ffffffff808416806107a3576107a361087a565b92169190910492915050565b600063ffffffff808316818516818304811182151516156107d2576107d2610864565b02949350505050565b6000828210156107ed576107ed610864565b500390565b600063ffffffff8381169083168181101561080f5761080f610864565b039392505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561084957610849610864565b5060010190565b60008261085f5761085f61087a565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fdfea2646970667358221220a791bc7c0e69af2f3e6bf137d85a775ee87565d378600e47200564291f18040e64736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806374903c8614610030575b600080fd5b61004361003e3660046105e0565b610059565b6040516100509190610659565b60405180910390f35b60408051610100808252612020820190925260609160208201612000803683370190505090506000805b838110156100e6578484828181106100ab57634e487b7160e01b600052603260045260246000fd5b90506020028101906100bd919061070f565b6100c790806106a3565b6100d291508361074c565b9150806100de81610817565b915050610083565b50600f811115610156576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f544f4f5f4d414e595f47454d5300000000000000000000000000000000000000604482015260640160405180910390fd5b60006101636001836107f2565b61016e9060056107af565b610179906001610764565b90506000805b8581101561053f578686828181106101a757634e487b7160e01b600052603260045260246000fd5b90506020028101906101b9919061070f565b6101c390806106a3565b6101ce91508361074c565b915060005b8787838181106101f357634e487b7160e01b600052603260045260246000fd5b9050602002810190610205919061070f565b61020f90806106a3565b905081101561052c57600088888481811061023a57634e487b7160e01b600052603260045260246000fd5b905060200281019061024c919061070f565b61025690806106a3565b8381811061027457634e487b7160e01b600052603260045260246000fd5b905060200201602081019061028991906105b7565b61ffff1690506000828a8a868181106102b257634e487b7160e01b600052603260045260246000fd5b90506020028101906102c4919061070f565b6102ce90806106a3565b6102d99150876107db565b6102e3919061074c565b905087828151811061030557634e487b7160e01b600052603260045260246000fd5b602002602001015163ffffffff16600014156104335761037d8b838c8c8881811061034057634e487b7160e01b600052603260045260246000fd5b9050602002810190610352919061070f565b602001358461036260018b6107f2565b61036d9060056107af565b610378906001610764565b61054a565b88838151811061039d57634e487b7160e01b600052603260045260246000fd5b602002602001019063ffffffff16908163ffffffff16815250508563ffffffff168883815181106103de57634e487b7160e01b600052603260045260246000fd5b602002602001015163ffffffff16101561042e578588838151811061041357634e487b7160e01b600052603260045260246000fd5b602002602001019063ffffffff16908163ffffffff16815250505b610517565b60006104788c848d8d8981811061045a57634e487b7160e01b600052603260045260246000fd5b905060200281019061046c919061070f565b6020013585600161054a565b905080601960018b868151811061049f57634e487b7160e01b600052603260045260246000fd5b60200260200101516104b191906107f2565b6104bb919061078c565b6104c6906001610764565b6104d19060196107af565b6104db9190610764565b8984815181106104fb57634e487b7160e01b600052603260045260246000fd5b602002602001019063ffffffff16908163ffffffff1681525050505b5050808061052490610817565b9150506101d3565b508061053781610817565b91505061017f565b505050509392505050565b600061055782601a6107f2565b6040805160208082018990528183018a90526060820188905260808083018890528351808403909101815260a0909201909252805191012061059f9163ffffffff1690610850565b6105ad9061ffff1683610764565b9695505050505050565b6000602082840312156105c8578081fd5b813561ffff811681146105d9578182fd5b9392505050565b6000806000604084860312156105f4578182fd5b83359250602084013567ffffffffffffffff80821115610612578384fd5b818601915086601f830112610625578384fd5b813581811115610633578485fd5b8760208083028501011115610646578485fd5b6020830194508093505050509250925092565b6020808252825182820181905260009190848201906040850190845b8181101561069757835163ffffffff1683529284019291840191600101610675565b50909695505050505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126106d7578283fd5b83018035915067ffffffffffffffff8211156106f1578283fd5b602090810192508102360382131561070857600080fd5b9250929050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1833603018112610742578182fd5b9190910192915050565b6000821982111561075f5761075f610864565b500190565b600063ffffffff80831681851680830382111561078357610783610864565b01949350505050565b600063ffffffff808416806107a3576107a361087a565b92169190910492915050565b600063ffffffff808316818516818304811182151516156107d2576107d2610864565b02949350505050565b6000828210156107ed576107ed610864565b500390565b600063ffffffff8381169083168181101561080f5761080f610864565b039392505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561084957610849610864565b5060010190565b60008261085f5761085f61087a565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fdfea2646970667358221220a791bc7c0e69af2f3e6bf137d85a775ee87565d378600e47200564291f18040e64736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getAttributes(uint256,(uint16[],bytes32)[])": {
        "params": {
          "assetId": "The asset tokenId.",
          "events": "An array of GemEvents. Be aware that only gemEvents from the last CatalystApplied event onwards should be used to populate a query. If gemEvents from multiple CatalystApplied events are included the output values will be incorrect."
        },
        "returns": {
          "values": "An array of values for each gem present in the asset."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getAttributes(uint256,(uint16[],bytes32)[])": {
        "notice": "Returns the values for each gem included in a given asset."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}