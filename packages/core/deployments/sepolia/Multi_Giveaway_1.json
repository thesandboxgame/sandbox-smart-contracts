{
  "address": "0xE165ceF12A156D96ab5E22c138260675c45f0a35",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "ids",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct ClaimERC1155ERC721ERC20.ERC1155Claim[]",
          "name": "erc1155",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "ids",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct ClaimERC1155ERC721ERC20.ERC721Claim[]",
          "name": "erc721",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "address[]",
              "name": "contractAddresses",
              "type": "address[]"
            }
          ],
          "indexed": false,
          "internalType": "struct ClaimERC1155ERC721ERC20.ERC20Claim",
          "name": "erc20",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "ClaimedMultipleTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiryTime",
          "type": "uint256"
        }
      ],
      "name": "NewGiveaway",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "expiryTime",
          "type": "uint256"
        }
      ],
      "name": "addNewGiveaway",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "changeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint256[]",
                  "name": "ids",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "values",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address",
                  "name": "contractAddress",
                  "type": "address"
                }
              ],
              "internalType": "struct ClaimERC1155ERC721ERC20.ERC1155Claim[]",
              "name": "erc1155",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256[]",
                  "name": "ids",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address",
                  "name": "contractAddress",
                  "type": "address"
                }
              ],
              "internalType": "struct ClaimERC1155ERC721ERC20.ERC721Claim[]",
              "name": "erc721",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address[]",
                  "name": "contractAddresses",
                  "type": "address[]"
                }
              ],
              "internalType": "struct ClaimERC1155ERC721ERC20.ERC20Claim",
              "name": "erc20",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "salt",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ClaimERC1155ERC721ERC20.Claim",
          "name": "claim",
          "type": "tuple"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "claimMultipleTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "rootHashes",
          "type": "bytes32[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint256[]",
                  "name": "ids",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "values",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address",
                  "name": "contractAddress",
                  "type": "address"
                }
              ],
              "internalType": "struct ClaimERC1155ERC721ERC20.ERC1155Claim[]",
              "name": "erc1155",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256[]",
                  "name": "ids",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address",
                  "name": "contractAddress",
                  "type": "address"
                }
              ],
              "internalType": "struct ClaimERC1155ERC721ERC20.ERC721Claim[]",
              "name": "erc721",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address[]",
                  "name": "contractAddresses",
                  "type": "address[]"
                }
              ],
              "internalType": "struct ClaimERC1155ERC721ERC20.ERC20Claim",
              "name": "erc20",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "salt",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ClaimERC1155ERC721ERC20.Claim[]",
          "name": "claims",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes32[][]",
          "name": "proofs",
          "type": "bytes32[][]"
        }
      ],
      "name": "claimMultipleTokensFromMultipleMerkleTree",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "claimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bytes32[]",
          "name": "rootHashes",
          "type": "bytes32[]"
        }
      ],
      "name": "getClaimedStatus",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xb9b1b92b145f9c7676eeaedf35eb41982245bdfcd89ff882e5fab622e684bd32",
  "receipt": {
    "to": null,
    "from": "0xA796AE911621E00809E0E7C8f0AD6BF118E5139e",
    "contractAddress": "0xE165ceF12A156D96ab5E22c138260675c45f0a35",
    "transactionIndex": 66,
    "gasUsed": "1859423",
    "logsBloom": "0x
    "blockHash": "0x2e01d2c2dccfc186294f20f727ba87fa956301bb5e6488af95eca9c69bbde837",
    "transactionHash": "0xb9b1b92b145f9c7676eeaedf35eb41982245bdfcd89ff882e5fab622e684bd32",
    "logs": [],
    "blockNumber": 5442381,
    "cumulativeGasUsed": "13719831",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x39D01ecc951C2c1f20ba0549e62212659c4d1e06"
  ],
  "numDeployments": 1,
  "solcInputHash": "f0d1e9c0f4c8061a6170520ab18edc38",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct ClaimERC1155ERC721ERC20.ERC1155Claim[]\",\"name\":\"erc1155\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct ClaimERC1155ERC721ERC20.ERC721Claim[]\",\"name\":\"erc721\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"contractAddresses\",\"type\":\"address[]\"}],\"indexed\":false,\"internalType\":\"struct ClaimERC1155ERC721ERC20.ERC20Claim\",\"name\":\"erc20\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"ClaimedMultipleTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"}],\"name\":\"NewGiveaway\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"}],\"name\":\"addNewGiveaway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct ClaimERC1155ERC721ERC20.ERC1155Claim[]\",\"name\":\"erc1155\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct ClaimERC1155ERC721ERC20.ERC721Claim[]\",\"name\":\"erc721\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"contractAddresses\",\"type\":\"address[]\"}],\"internalType\":\"struct ClaimERC1155ERC721ERC20.ERC20Claim\",\"name\":\"erc20\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"internalType\":\"struct ClaimERC1155ERC721ERC20.Claim\",\"name\":\"claim\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"claimMultipleTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"rootHashes\",\"type\":\"bytes32[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct ClaimERC1155ERC721ERC20.ERC1155Claim[]\",\"name\":\"erc1155\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct ClaimERC1155ERC721ERC20.ERC721Claim[]\",\"name\":\"erc721\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"contractAddresses\",\"type\":\"address[]\"}],\"internalType\":\"struct ClaimERC1155ERC721ERC20.ERC20Claim\",\"name\":\"erc20\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"internalType\":\"struct ClaimERC1155ERC721ERC20.Claim[]\",\"name\":\"claims\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"proofs\",\"type\":\"bytes32[][]\"}],\"name\":\"claimMultipleTokensFromMultipleMerkleTree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"rootHashes\",\"type\":\"bytes32[]\"}],\"name\":\"getClaimedStatus\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addNewGiveaway(bytes32,uint256)\":{\"params\":{\"expiryTime\":\"The expiry time for the giveaway.\",\"merkleRoot\":\"The merkle root hash of the claim data.\"}},\"changeAdmin(address)\":{\"details\":\"Change the administrator to be `newAdmin`.\",\"params\":{\"newAdmin\":\"The address of the new administrator.\"}},\"claimMultipleTokens(bytes32,(address,(uint256[],uint256[],address)[],(uint256[],address)[],(uint256[],address[]),bytes32),bytes32[])\":{\"details\":\"Public function used to perform validity checks and progress to claim multiple token types in one claim.\",\"params\":{\"claim\":\"The claim struct containing the destination address, all items to be claimed and optional salt param.\",\"merkleRoot\":\"The merkle root hash for the specific set of items being claimed.\",\"proof\":\"The proof provided by the user performing the claim function.\"}},\"claimMultipleTokensFromMultipleMerkleTree(bytes32[],(address,(uint256[],uint256[],address)[],(uint256[],address)[],(uint256[],address[]),bytes32)[],bytes32[][])\":{\"params\":{\"claims\":\"The array of claim structs, each containing a destination address, the giveaway items to be claimed and an optional salt param.\",\"proofs\":\"The proofs submitted for verification.\"}},\"getAdmin()\":{\"details\":\"Get the current administrator of this contract.\",\"returns\":{\"_0\":\"The current administrator of this contract.\"}},\"getClaimedStatus(address,bytes32[])\":{\"params\":{\"rootHashes\":\"The array of giveaway root hashes to check.\",\"user\":\"The user (intended token destination) address.\"},\"returns\":{\"_0\":\"claimedGiveaways The array of bools confirming whether or not the giveaways relating to the root hashes provided have been claimed.\"}}},\"title\":\"MultiGiveaway contract.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addNewGiveaway(bytes32,uint256)\":{\"notice\":\"Function to add a new giveaway.\"},\"claimMultipleTokensFromMultipleMerkleTree(bytes32[],(address,(uint256[],uint256[],address)[],(uint256[],address)[],(uint256[],address[]),bytes32)[],bytes32[][])\":{\"notice\":\"Function to permit the claiming of multiple tokens from multiple giveaways to a reserved address.\"},\"getClaimedStatus(address,bytes32[])\":{\"notice\":\"Function to check which giveaways have been claimed by a particular user.\"}},\"notice\":\"This contract manages claims for multiple token types.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/solc_0.8/claims/MultiGiveaway0/MultiGiveaway0.sol\":\"MultiGiveaway0\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-0.8/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xc743d2235b8854045c308d2f8f1ed88efed6c2bebf2b7a4a51ea42480c82e566\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n        return computedHash;\\n    }\\n}\\n\",\"keccak256\":\"0x9c35727c74a6ffd8d02237b414e7bfb532c0323b1088709def98ea5c628157de\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/solc_0.8/claims/MultiGiveaway/ClaimERC1155ERC721ERC20.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport {IERC1155} from \\\"@openzeppelin/contracts-0.8/token/ERC1155/IERC1155.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts-0.8/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts-0.8/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {MerkleProof} from \\\"@openzeppelin/contracts-0.8/utils/cryptography/MerkleProof.sol\\\";\\nimport {IERC721Extended} from \\\"../../common/interfaces/IERC721Extended.sol\\\";\\n\\ncontract ClaimERC1155ERC721ERC20 {\\n    using SafeERC20 for IERC20;\\n\\n    struct Claim {\\n        address to;\\n        ERC1155Claim[] erc1155;\\n        ERC721Claim[] erc721;\\n        ERC20Claim erc20;\\n        bytes32 salt;\\n    }\\n\\n    struct ERC1155Claim {\\n        uint256[] ids;\\n        uint256[] values;\\n        address contractAddress;\\n    }\\n\\n    struct ERC721Claim {\\n        uint256[] ids;\\n        address contractAddress;\\n    }\\n\\n    struct ERC20Claim {\\n        uint256[] amounts;\\n        address[] contractAddresses;\\n    }\\n\\n    /// @dev Emits when a successful claim occurs.\\n    /// @param to The destination address for the claimed ERC1155, ERC721 and ERC20 tokens.\\n    /// @param erc1155 The array of ERC1155Claim structs containing the ids, values and ERC1155 contract address.\\n    /// @param erc721 The array of ERC721Claim structs containing the ids and ERC721 contract address.\\n    /// @param erc20 The ERC20Claim struct containing the amounts and ERC20 contract addresses.\\n    /// @param merkleRoot The merkle root hash for the specific set of items being claimed.\\n    event ClaimedMultipleTokens(\\n        address to,\\n        ERC1155Claim[] erc1155,\\n        ERC721Claim[] erc721,\\n        ERC20Claim erc20,\\n        bytes32 merkleRoot\\n    );\\n\\n    /// @dev Internal function used to claim multiple token types in one claim.\\n    /// @param merkleRoot The merkle root hash for the specific set of items being claimed.\\n    /// @param claim The claim struct containing the destination address, all items to be claimed and optional salt param.\\n    /// @param proof The proof provided by the user performing the claim function.\\n    function _claimERC1155ERC721ERC20(\\n        bytes32 merkleRoot,\\n        Claim memory claim,\\n        bytes32[] calldata proof\\n    ) internal {\\n        _checkValidity(merkleRoot, claim, proof);\\n        for (uint256 i = 0; i < claim.erc1155.length; i++) {\\n            require(claim.erc1155[i].ids.length == claim.erc1155[i].values.length, \\\"CLAIM_INVALID_INPUT\\\");\\n            _transferERC1155(claim.to, claim.erc1155[i].ids, claim.erc1155[i].values, claim.erc1155[i].contractAddress);\\n        }\\n        for (uint256 i = 0; i < claim.erc721.length; i++) {\\n            _transferERC721(claim.to, claim.erc721[i].ids, claim.erc721[i].contractAddress);\\n        }\\n        if (claim.erc20.amounts.length != 0) {\\n            require(claim.erc20.amounts.length == claim.erc20.contractAddresses.length, \\\"CLAIM_INVALID_INPUT\\\");\\n            _transferERC20(claim.to, claim.erc20.amounts, claim.erc20.contractAddresses);\\n        }\\n        emit ClaimedMultipleTokens(claim.to, claim.erc1155, claim.erc721, claim.erc20, merkleRoot);\\n    }\\n\\n    /// @dev Private function used to check the validity of a specific claim.\\n    /// @param merkleRoot The merkle root hash for the specific set of items being claimed.\\n    /// @param claim The claim struct containing the destination address, all items to be claimed and optional salt param.\\n    /// @param proof The proof provided by the user performing the claim function.\\n    function _checkValidity(\\n        bytes32 merkleRoot,\\n        Claim memory claim,\\n        bytes32[] memory proof\\n    ) private pure {\\n        bytes32 leaf = _generateClaimHash(claim);\\n        require(MerkleProof.verify(proof, merkleRoot, leaf), \\\"CLAIM_INVALID\\\");\\n    }\\n\\n    /// @dev Internal function used to generate a hash from an encoded claim.\\n    /// @param claim The claim struct.\\n    function _generateClaimHash(Claim memory claim) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(claim));\\n    }\\n\\n    /// @dev Private function used to transfer the ERC1155 tokens specified in a specific claim.\\n    /// @param to The destination address for the claimed tokens.\\n    /// @param ids The array of ERC1155 ids.\\n    /// @param values The amount of ERC1155 tokens of each id to be transferred.\\n    /// @param contractAddress The ERC1155 token contract address.\\n    function _transferERC1155(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        address contractAddress\\n    ) private {\\n        require(contractAddress != address(0), \\\"CLAIM_INVALID_CONTRACT_ZERO_ADDRESS\\\");\\n        IERC1155(contractAddress).safeBatchTransferFrom(address(this), to, ids, values, \\\"\\\");\\n    }\\n\\n    /// @dev Private function used to transfer the ERC721tokens specified in a specific claim.\\n    /// @param to The destination address for the claimed tokens.\\n    /// @param ids The array of ERC721 ids.\\n    /// @param contractAddress The ERC721 token contract address.\\n    function _transferERC721(\\n        address to,\\n        uint256[] memory ids,\\n        address contractAddress\\n    ) private {\\n        require(contractAddress != address(0), \\\"CLAIM_INVALID_CONTRACT_ZERO_ADDRESS\\\");\\n        IERC721Extended(contractAddress).safeBatchTransferFrom(address(this), to, ids, \\\"\\\");\\n    }\\n\\n    /// @dev Private function used to transfer the ERC20 tokens specified in a specific claim.\\n    /// @param to The destination address for the claimed tokens.\\n    /// @param amounts The array of amounts of ERC20 tokens to be transferred.\\n    /// @param contractAddresses The array of ERC20 token contract addresses.\\n    function _transferERC20(\\n        address to,\\n        uint256[] memory amounts,\\n        address[] memory contractAddresses\\n    ) private {\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            address erc20ContractAddress = contractAddresses[i];\\n            uint256 erc20Amount = amounts[i];\\n            require(erc20ContractAddress != address(0), \\\"CLAIM_INVALID_CONTRACT_ZERO_ADDRESS\\\");\\n            IERC20(erc20ContractAddress).safeTransferFrom(address(this), to, erc20Amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x45ed9f89846992168f507bccc43d477bfab363ab02c17849c8a1ffe6b8ee55b2\",\"license\":\"MIT\"},\"src/solc_0.8/claims/MultiGiveaway0/MultiGiveaway0.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-0.8/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport \\\"../MultiGiveaway/ClaimERC1155ERC721ERC20.sol\\\";\\nimport \\\"../../common/BaseWithStorage/WithAdmin.sol\\\";\\n\\n/// @title MultiGiveaway contract.\\n/// @notice This contract manages claims for multiple token types.\\ncontract MultiGiveaway0 is WithAdmin, ClaimERC1155ERC721ERC20 {\\n    ///////////////////////////////  Data //////////////////////////////\\n\\n    bytes4 private constant ERC1155_RECEIVED = 0xf23a6e61;\\n    bytes4 private constant ERC1155_BATCH_RECEIVED = 0xbc197c81;\\n    bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\\n    bytes4 internal constant ERC721_BATCH_RECEIVED = 0x4b808c46;\\n\\n    mapping(address => mapping(bytes32 => bool)) public claimed;\\n    mapping(bytes32 => uint256) internal _expiryTime;\\n\\n    ///////////////////////////////  Events //////////////////////////////\\n\\n    event NewGiveaway(bytes32 merkleRoot, uint256 expiryTime);\\n\\n    ///////////////////////////////  Constructor /////////////////////////\\n\\n    constructor(address admin) {\\n        _admin = admin;\\n    }\\n\\n    ///////////////////////////////  Functions ///////////////////////////\\n\\n    /// @notice Function to add a new giveaway.\\n    /// @param merkleRoot The merkle root hash of the claim data.\\n    /// @param expiryTime The expiry time for the giveaway.\\n    function addNewGiveaway(bytes32 merkleRoot, uint256 expiryTime) external onlyAdmin {\\n        _expiryTime[merkleRoot] = expiryTime;\\n        emit NewGiveaway(merkleRoot, expiryTime);\\n    }\\n\\n    /// @notice Function to check which giveaways have been claimed by a particular user.\\n    /// @param user The user (intended token destination) address.\\n    /// @param rootHashes The array of giveaway root hashes to check.\\n    /// @return claimedGiveaways The array of bools confirming whether or not the giveaways relating to the root hashes provided have been claimed.\\n    function getClaimedStatus(address user, bytes32[] calldata rootHashes) external view returns (bool[] memory) {\\n        bool[] memory claimedGiveaways = new bool[](rootHashes.length);\\n        for (uint256 i = 0; i < rootHashes.length; i++) {\\n            claimedGiveaways[i] = claimed[user][rootHashes[i]];\\n        }\\n        return claimedGiveaways;\\n    }\\n\\n    /// @notice Function to permit the claiming of multiple tokens from multiple giveaways to a reserved address.\\n    /// @param claims The array of claim structs, each containing a destination address, the giveaway items to be claimed and an optional salt param.\\n    /// @param proofs The proofs submitted for verification.\\n    function claimMultipleTokensFromMultipleMerkleTree(\\n        bytes32[] calldata rootHashes,\\n        Claim[] memory claims,\\n        bytes32[][] calldata proofs\\n    ) external {\\n        require(claims.length == rootHashes.length, \\\"INVALID_INPUT\\\");\\n        require(claims.length == proofs.length, \\\"INVALID_INPUT\\\");\\n        for (uint256 i = 0; i < rootHashes.length; i++) {\\n            claimMultipleTokens(rootHashes[i], claims[i], proofs[i]);\\n        }\\n    }\\n\\n    /// @dev Public function used to perform validity checks and progress to claim multiple token types in one claim.\\n    /// @param merkleRoot The merkle root hash for the specific set of items being claimed.\\n    /// @param claim The claim struct containing the destination address, all items to be claimed and optional salt param.\\n    /// @param proof The proof provided by the user performing the claim function.\\n    function claimMultipleTokens(\\n        bytes32 merkleRoot,\\n        Claim memory claim,\\n        bytes32[] calldata proof\\n    ) public {\\n        uint256 giveawayExpiryTime = _expiryTime[merkleRoot];\\n        require(claim.to != address(0), \\\"INVALID_TO_ZERO_ADDRESS\\\");\\n        require(claim.to != address(this), \\\"DESTINATION_MULTIGIVEAWAY_CONTRACT\\\");\\n        require(giveawayExpiryTime != 0, \\\"GIVEAWAY_DOES_NOT_EXIST\\\");\\n        require(block.timestamp < giveawayExpiryTime, \\\"CLAIM_PERIOD_IS_OVER\\\");\\n        require(claimed[claim.to][merkleRoot] == false, \\\"DESTINATION_ALREADY_CLAIMED\\\");\\n        claimed[claim.to][merkleRoot] = true;\\n        _claimERC1155ERC721ERC20(merkleRoot, claim, proof);\\n    }\\n\\n    function onERC721Received(\\n        address, /*operator*/\\n        address, /*from*/\\n        uint256, /*id*/\\n        bytes calldata /*data*/\\n    ) external pure returns (bytes4) {\\n        return ERC721_RECEIVED;\\n    }\\n\\n    function onERC721BatchReceived(\\n        address, /*operator*/\\n        address, /*from*/\\n        uint256[] calldata, /*ids*/\\n        bytes calldata /*data*/\\n    ) external pure returns (bytes4) {\\n        return ERC721_BATCH_RECEIVED;\\n    }\\n\\n    function onERC1155Received(\\n        address, /*operator*/\\n        address, /*from*/\\n        uint256, /*id*/\\n        uint256, /*value*/\\n        bytes calldata /*data*/\\n    ) external pure returns (bytes4) {\\n        return ERC1155_RECEIVED;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address, /*operator*/\\n        address, /*from*/\\n        uint256[] calldata, /*ids*/\\n        uint256[] calldata, /*values*/\\n        bytes calldata /*data*/\\n    ) external pure returns (bytes4) {\\n        return ERC1155_BATCH_RECEIVED;\\n    }\\n}\\n\",\"keccak256\":\"0xc30be40603435d8ddb286192691e71c0c8d4a712d2b1fa6ae608f7997d29a301\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/WithAdmin.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\ncontract WithAdmin {\\n    address internal _admin;\\n\\n    /// @dev Emits when the contract administrator is changed.\\n    /// @param oldAdmin The address of the previous administrator.\\n    /// @param newAdmin The address of the new administrator.\\n    event AdminChanged(address indexed oldAdmin, address indexed newAdmin);\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == _admin, \\\"ADMIN_ONLY\\\");\\n        _;\\n    }\\n\\n    /// @dev Get the current administrator of this contract.\\n    /// @return The current administrator of this contract.\\n    function getAdmin() external view returns (address) {\\n        return _admin;\\n    }\\n\\n    /// @dev Change the administrator to be `newAdmin`.\\n    /// @param newAdmin The address of the new administrator.\\n    function changeAdmin(address newAdmin) external {\\n        require(msg.sender == _admin, \\\"ADMIN_ACCESS_DENIED\\\");\\n        emit AdminChanged(_admin, newAdmin);\\n        _admin = newAdmin;\\n    }\\n}\\n\",\"keccak256\":\"0x0239f3f826576fc7c050503f29a708b20b8b682df569e3d67bd83a836b0c925a\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC721Extended.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-0.8/token/ERC721/IERC721.sol\\\";\\n\\ninterface IERC721Extended is IERC721 {\\n    function approveFor(\\n        address sender,\\n        address operator,\\n        uint256 id\\n    ) external;\\n\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external;\\n\\n    function setApprovalForAllFor(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) external;\\n\\n    function burn(uint256 id) external;\\n\\n    function burnFrom(address from, uint256 id) external;\\n}\\n\",\"keccak256\":\"0x7859e5f756379e10b50869355595471e6a9379b95dced4f68d00355f6b15a9c5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051620020e5380380620020e583398101604081905261003191610056565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b600060208284031215610067578081fd5b81516001600160a01b038116811461007d578182fd5b9392505050565b61205180620000946000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c80636e9960c311610081578063bc197c811161005b578063bc197c8114610229578063c850933214610264578063f23a6e6114610277576100c9565b80636e9960c3146101db5780638f283970146101f6578063a7d235be14610209576100c9565b806325839ca7116100b257806325839ca71461017a5780634b808c461461018f5780636aea75f1146101c8576100c9565b80630f2d940b146100ce578063150b7a0214610111575b600080fd5b6100fc6100dc366004611992565b600160209081526000928352604080842090915290825290205460ff1681565b60405190151581526020015b60405180910390f35b61014961011f366004611870565b7f150b7a020000000000000000000000000000000000000000000000000000000095945050505050565b6040517fffffffff000000000000000000000000000000000000000000000000000000009091168152602001610108565b61018d610188366004611aa9565b6102b0565b005b61014961019d3660046117e2565b7f4b808c46000000000000000000000000000000000000000000000000000000009695505050505050565b61018d6101d6366004611b16565b61050d565b6000546040516001600160a01b039091168152602001610108565b61018d610204366004611711565b6105b6565b61021c610217366004611941565b610683565b6040516101089190611ddf565b61014961023736600461172b565b7fbc197c810000000000000000000000000000000000000000000000000000000098975050505050505050565b61018d6102723660046119bb565b61078e565b6101496102853660046118dd565b7ff23a6e61000000000000000000000000000000000000000000000000000000009695505050505050565b60008481526002602052604090205483516001600160a01b031661031b5760405162461bcd60e51b815260206004820152601760248201527f494e56414c49445f544f5f5a45524f5f4144445245535300000000000000000060448201526064015b60405180910390fd5b83516001600160a01b031630141561039b5760405162461bcd60e51b815260206004820152602260248201527f44455354494e4154494f4e5f4d554c544947495645415741595f434f4e54524160448201527f43540000000000000000000000000000000000000000000000000000000000006064820152608401610312565b806103e85760405162461bcd60e51b815260206004820152601760248201527f47495645415741595f444f45535f4e4f545f45584953540000000000000000006044820152606401610312565b8042106104375760405162461bcd60e51b815260206004820152601460248201527f434c41494d5f504552494f445f49535f4f5645520000000000000000000000006044820152606401610312565b83516001600160a01b0316600090815260016020908152604080832088845290915290205460ff16156104ac5760405162461bcd60e51b815260206004820152601b60248201527f44455354494e4154494f4e5f414c52454144595f434c41494d454400000000006044820152606401610312565b83516001600160a01b0316600090815260016020818152604080842089855290915290912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169091179055610506858585856108d7565b5050505050565b6000546001600160a01b031633146105675760405162461bcd60e51b815260206004820152600a60248201527f41444d494e5f4f4e4c59000000000000000000000000000000000000000000006044820152606401610312565b60008281526002602090815260409182902083905581518481529081018390527fcf995c8d29c258a6c2056e0d5ddfa67f3634d25f5eed5dcf65ead06195b1a271910160405180910390a15050565b6000546001600160a01b031633146106105760405162461bcd60e51b815260206004820152601360248201527f41444d494e5f4143434553535f44454e494544000000000000000000000000006044820152606401610312565b600080546040516001600160a01b03808516939216917f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f91a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b606060008267ffffffffffffffff8111156106ae57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156106d7578160200160208202803683370190505b50905060005b83811015610783576001600160a01b03861660009081526001602052604081209086868481811061071e57634e487b7160e01b600052603260045260246000fd5b90506020020135815260200190815260200160002060009054906101000a900460ff1682828151811061076157634e487b7160e01b600052603260045260246000fd5b911515602092830291909101909101528061077b81611fc0565b9150506106dd565b5090505b9392505050565b825184146107de5760405162461bcd60e51b815260206004820152600d60248201527f494e56414c49445f494e505554000000000000000000000000000000000000006044820152606401610312565b8251811461082e5760405162461bcd60e51b815260206004820152600d60248201527f494e56414c49445f494e505554000000000000000000000000000000000000006044820152606401610312565b60005b848110156108cf576108bd86868381811061085c57634e487b7160e01b600052603260045260246000fd5b9050602002013585838151811061088357634e487b7160e01b600052603260045260246000fd5b60200260200101518585858181106108ab57634e487b7160e01b600052603260045260246000fd5b90506020028101906101889190611eda565b806108c781611fc0565b915050610831565b505050505050565b6109158484848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610bea92505050565b60005b836020015151811015610a83578360200151818151811061094957634e487b7160e01b600052603260045260246000fd5b602002602001015160200151518460200151828151811061097a57634e487b7160e01b600052603260045260246000fd5b60200260200101516000015151146109d45760405162461bcd60e51b815260206004820152601360248201527f434c41494d5f494e56414c49445f494e505554000000000000000000000000006044820152606401610312565b610a71846000015185602001518381518110610a0057634e487b7160e01b600052603260045260246000fd5b60200260200101516000015186602001518481518110610a3057634e487b7160e01b600052603260045260246000fd5b60200260200101516020015187602001518581518110610a6057634e487b7160e01b600052603260045260246000fd5b602002602001015160400151610c54565b80610a7b81611fc0565b915050610918565b5060005b836040015151811015610b1357610b01846000015185604001518381518110610ac057634e487b7160e01b600052603260045260246000fd5b60200260200101516000015186604001518481518110610af057634e487b7160e01b600052603260045260246000fd5b602002602001015160200151610d39565b80610b0b81611fc0565b915050610a87565b506060830151515115610b9557606083015160208101515190515114610b7b5760405162461bcd60e51b815260206004820152601360248201527f434c41494d5f494e56414c49445f494e505554000000000000000000000000006044820152606401610312565b825160608401518051602090910151610b95929190610e1b565b7fccb3b0181cc8d8090505df7a2b9d7e4c07de5f4e24c836176be4834d6f15feb4836000015184602001518560400151866060015188604051610bdc959493929190611d84565b60405180910390a150505050565b6000610bf583610f18565b9050610c02828583610f49565b610c4e5760405162461bcd60e51b815260206004820152600d60248201527f434c41494d5f494e56414c4944000000000000000000000000000000000000006044820152606401610312565b50505050565b6001600160a01b038116610cb65760405162461bcd60e51b815260206004820152602360248201527f434c41494d5f494e56414c49445f434f4e54524143545f5a45524f5f4144445260448201526245535360e81b6064820152608401610312565b6040517f2eb2c2d60000000000000000000000000000000000000000000000000000000081526001600160a01b03821690632eb2c2d690610d01903090889088908890600401611ce8565b600060405180830381600087803b158015610d1b57600080fd5b505af1158015610d2f573d6000803e3d6000fd5b5050505050505050565b6001600160a01b038116610d9b5760405162461bcd60e51b815260206004820152602360248201527f434c41494d5f494e56414c49445f434f4e54524143545f5a45524f5f4144445260448201526245535360e81b6064820152608401610312565b6040517f28cfbd460000000000000000000000000000000000000000000000000000000081526001600160a01b038216906328cfbd4690610de490309087908790600401611d40565b600060405180830381600087803b158015610dfe57600080fd5b505af1158015610e12573d6000803e3d6000fd5b50505050505050565b60005b8251811015610c4e576000828281518110610e4957634e487b7160e01b600052603260045260246000fd5b602002602001015190506000848381518110610e7557634e487b7160e01b600052603260045260246000fd5b6020026020010151905060006001600160a01b0316826001600160a01b03161415610eee5760405162461bcd60e51b815260206004820152602360248201527f434c41494d5f494e56414c49445f434f4e54524143545f5a45524f5f4144445260448201526245535360e81b6064820152608401610312565b610f036001600160a01b038316308884610f5f565b50508080610f1090611fc0565b915050610e1e565b600081604051602001610f2b9190611e58565b6040516020818303038152906040528051906020012090505b919050565b600082610f568584610fe7565b14949350505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052610c4e9085906110a1565b600081815b845181101561109957600085828151811061101757634e487b7160e01b600052603260045260246000fd5b60200260200101519050808311611059576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250611086565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b508061109181611fc0565b915050610fec565b509392505050565b60006110f6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661118b9092919063ffffffff16565b80519091501561118657808060200190518101906111149190611a89565b6111865760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610312565b505050565b606061119a84846000856111a2565b949350505050565b60608247101561121a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610312565b843b6112685760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610312565b600080866001600160a01b031685876040516112849190611ccc565b60006040518083038185875af1925050503d80600081146112c1576040519150601f19603f3d011682016040523d82523d6000602084013e6112c6565b606091505b50915091506112d68282866112e1565b979650505050505050565b606083156112f0575081610787565b8251156113005782518084602001fd5b8160405162461bcd60e51b81526004016103129190611e25565b80356001600160a01b0381168114610f4457600080fd5b60008083601f840112611342578182fd5b50813567ffffffffffffffff811115611359578182fd5b602083019150836020808302850101111561137357600080fd5b9250929050565b600082601f83011261138a578081fd5b8135602061139f61139a83611f70565b611f3f565b82815281810190858301855b858110156114485781358801606080601f19838d030112156113cb578889fd5b6113d481611f3f565b8783013567ffffffffffffffff808211156113ed578b8cfd5b6113fb8e8b848801016114f6565b8352604091508185013581811115611411578c8dfd5b61141f8f8c838901016114f6565b8b850152505061143083850161131a565b908201528652505092840192908401906001016113ab565b5090979650505050505050565b600082601f830112611465578081fd5b8135602061147561139a83611f70565b82815281810190858301855b858110156114485781358801604080601f19838d030112156114a1578889fd5b6114aa81611f3f565b8783013567ffffffffffffffff8111156114c2578a8bfd5b6114d08d8a838701016114f6565b8252506114de82840161131a565b81890152865250509284019290840190600101611481565b600082601f830112611506578081fd5b8135602061151661139a83611f70565b8281528181019085830183850287018401881015611532578586fd5b855b8581101561144857813584529284019290840190600101611534565b60008083601f840112611561578182fd5b50813567ffffffffffffffff811115611578578182fd5b60208301915083602082850101111561137357600080fd5b600060a082840312156115a1578081fd5b6115ab60a0611f3f565b90506115b68261131a565b8152602082013567ffffffffffffffff808211156115d357600080fd5b6115df8583860161137a565b602084015260408401359150808211156115f857600080fd5b61160485838601611455565b6040840152606084013591508082111561161d57600080fd5b5061162a84828501611640565b6060830152506080820135608082015292915050565b600060408284031215611651578081fd5b61165b6040611f3f565b9050813567ffffffffffffffff8082111561167557600080fd5b611681858386016114f6565b835260209150818401358181111561169857600080fd5b84019050601f810185136116ab57600080fd5b80356116b961139a82611f70565b81815283810190838501858402850186018910156116d657600080fd5b600094505b83851015611700576116ec8161131a565b8352600194909401939185019185016116db565b508085870152505050505092915050565b600060208284031215611722578081fd5b6107878261131a565b60008060008060008060008060a0898b031215611746578384fd5b61174f8961131a565b975061175d60208a0161131a565b9650604089013567ffffffffffffffff80821115611779578586fd5b6117858c838d01611331565b909850965060608b013591508082111561179d578586fd5b6117a98c838d01611331565b909650945060808b01359150808211156117c1578384fd5b506117ce8b828c01611550565b999c989b5096995094979396929594505050565b600080600080600080608087890312156117fa578384fd5b6118038761131a565b95506118116020880161131a565b9450604087013567ffffffffffffffff8082111561182d578586fd5b6118398a838b01611331565b90965094506060890135915080821115611851578384fd5b5061185e89828a01611550565b979a9699509497509295939492505050565b600080600080600060808688031215611887578283fd5b6118908661131a565b945061189e6020870161131a565b935060408601359250606086013567ffffffffffffffff8111156118c0578182fd5b6118cc88828901611550565b969995985093965092949392505050565b60008060008060008060a087890312156118f5578384fd5b6118fe8761131a565b955061190c6020880161131a565b94506040870135935060608701359250608087013567ffffffffffffffff811115611935578283fd5b61185e89828a01611550565b600080600060408486031215611955578081fd5b61195e8461131a565b9250602084013567ffffffffffffffff811115611979578182fd5b61198586828701611331565b9497909650939450505050565b600080604083850312156119a4578182fd5b6119ad8361131a565b946020939093013593505050565b6000806000806000606086880312156119d2578283fd5b853567ffffffffffffffff808211156119e9578485fd5b6119f589838a01611331565b9097509550602091508782013581811115611a0e578586fd5b8801601f81018a13611a1e578586fd5b8035611a2c61139a82611f70565b81815284810190838601895b84811015611a6157611a4f8f898435890101611590565b84529287019290870190600101611a38565b50909850505050604089013592505080821115611a7c578283fd5b506118cc88828901611331565b600060208284031215611a9a578081fd5b81518015158114610787578182fd5b60008060008060608587031215611abe578182fd5b84359350602085013567ffffffffffffffff80821115611adc578384fd5b611ae888838901611590565b94506040870135915080821115611afd578384fd5b50611b0a87828801611331565b95989497509550505050565b60008060408385031215611b28578182fd5b50508035926020909101359150565b6000815180845260208085018081965082840281019150828601855b85811015611bb7578284038952815160608151818752611b7582880182611c29565b9150508682015186820388880152611b8d8282611c29565b6040938401516001600160a01b031697909301969096525098850198935090840190600101611b53565b5091979650505050505050565b6000815180845260208085018081965082840281019150828601855b85811015611bb7578284038952815160408151818752611c0282880182611c29565b928801516001600160a01b0316968801969096525098850198935090840190600101611be0565b6000815180845260208085019450808401835b83811015611c5857815187529582019590820190600101611c3c565b509495945050505050565b6000815160408452611c786040850182611c29565b602084810151868303878301528051808452908201935090918491908301905b80831015611cc15784516001600160a01b03168252938301936001929092019190830190611c98565b509695505050505050565b60008251611cde818460208701611f94565b9190910192915050565b60006001600160a01b03808716835280861660208401525060a06040830152611d1460a0830185611c29565b8281036060840152611d268185611c29565b838103608090940193909352508152602001949350505050565b60006001600160a01b03808616835280851660208401525060806040830152611d6c6080830184611c29565b82810360609093019290925281526020019392505050565b60006001600160a01b038716825260a06020830152611da660a0830187611b37565b8281036040840152611db88187611bc4565b90508281036060840152611dcc8186611c63565b9150508260808301529695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015611e19578351151583529284019291840191600101611dfb565b50909695505050505050565b6000602082528251806020840152611e44816040850160208701611f94565b601f01601f19169190910160400192915050565b6000602082526001600160a01b038351166020830152602083015160a06040840152611e8760c0840182611b37565b90506040840151601f1980858403016060860152611ea58383611bc4565b9250606086015191508085840301608086015250611ec38282611c63565b915050608084015160a08401528091505092915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112611f0e578283fd5b83018035915067ffffffffffffffff821115611f28578283fd5b602090810192508102360382131561137357600080fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611f6857611f68612005565b604052919050565b600067ffffffffffffffff821115611f8a57611f8a612005565b5060209081020190565b60005b83811015611faf578181015183820152602001611f97565b83811115610c4e5750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611ffe57634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220e85853fd22a5e3a55dc984dab511dd88ed73453f2baac585962fe33debf36e9164736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100c95760003560e01c80636e9960c311610081578063bc197c811161005b578063bc197c8114610229578063c850933214610264578063f23a6e6114610277576100c9565b80636e9960c3146101db5780638f283970146101f6578063a7d235be14610209576100c9565b806325839ca7116100b257806325839ca71461017a5780634b808c461461018f5780636aea75f1146101c8576100c9565b80630f2d940b146100ce578063150b7a0214610111575b600080fd5b6100fc6100dc366004611992565b600160209081526000928352604080842090915290825290205460ff1681565b60405190151581526020015b60405180910390f35b61014961011f366004611870565b7f150b7a020000000000000000000000000000000000000000000000000000000095945050505050565b6040517fffffffff000000000000000000000000000000000000000000000000000000009091168152602001610108565b61018d610188366004611aa9565b6102b0565b005b61014961019d3660046117e2565b7f4b808c46000000000000000000000000000000000000000000000000000000009695505050505050565b61018d6101d6366004611b16565b61050d565b6000546040516001600160a01b039091168152602001610108565b61018d610204366004611711565b6105b6565b61021c610217366004611941565b610683565b6040516101089190611ddf565b61014961023736600461172b565b7fbc197c810000000000000000000000000000000000000000000000000000000098975050505050505050565b61018d6102723660046119bb565b61078e565b6101496102853660046118dd565b7ff23a6e61000000000000000000000000000000000000000000000000000000009695505050505050565b60008481526002602052604090205483516001600160a01b031661031b5760405162461bcd60e51b815260206004820152601760248201527f494e56414c49445f544f5f5a45524f5f4144445245535300000000000000000060448201526064015b60405180910390fd5b83516001600160a01b031630141561039b5760405162461bcd60e51b815260206004820152602260248201527f44455354494e4154494f4e5f4d554c544947495645415741595f434f4e54524160448201527f43540000000000000000000000000000000000000000000000000000000000006064820152608401610312565b806103e85760405162461bcd60e51b815260206004820152601760248201527f47495645415741595f444f45535f4e4f545f45584953540000000000000000006044820152606401610312565b8042106104375760405162461bcd60e51b815260206004820152601460248201527f434c41494d5f504552494f445f49535f4f5645520000000000000000000000006044820152606401610312565b83516001600160a01b0316600090815260016020908152604080832088845290915290205460ff16156104ac5760405162461bcd60e51b815260206004820152601b60248201527f44455354494e4154494f4e5f414c52454144595f434c41494d454400000000006044820152606401610312565b83516001600160a01b0316600090815260016020818152604080842089855290915290912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169091179055610506858585856108d7565b5050505050565b6000546001600160a01b031633146105675760405162461bcd60e51b815260206004820152600a60248201527f41444d494e5f4f4e4c59000000000000000000000000000000000000000000006044820152606401610312565b60008281526002602090815260409182902083905581518481529081018390527fcf995c8d29c258a6c2056e0d5ddfa67f3634d25f5eed5dcf65ead06195b1a271910160405180910390a15050565b6000546001600160a01b031633146106105760405162461bcd60e51b815260206004820152601360248201527f41444d494e5f4143434553535f44454e494544000000000000000000000000006044820152606401610312565b600080546040516001600160a01b03808516939216917f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f91a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b606060008267ffffffffffffffff8111156106ae57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156106d7578160200160208202803683370190505b50905060005b83811015610783576001600160a01b03861660009081526001602052604081209086868481811061071e57634e487b7160e01b600052603260045260246000fd5b90506020020135815260200190815260200160002060009054906101000a900460ff1682828151811061076157634e487b7160e01b600052603260045260246000fd5b911515602092830291909101909101528061077b81611fc0565b9150506106dd565b5090505b9392505050565b825184146107de5760405162461bcd60e51b815260206004820152600d60248201527f494e56414c49445f494e505554000000000000000000000000000000000000006044820152606401610312565b8251811461082e5760405162461bcd60e51b815260206004820152600d60248201527f494e56414c49445f494e505554000000000000000000000000000000000000006044820152606401610312565b60005b848110156108cf576108bd86868381811061085c57634e487b7160e01b600052603260045260246000fd5b9050602002013585838151811061088357634e487b7160e01b600052603260045260246000fd5b60200260200101518585858181106108ab57634e487b7160e01b600052603260045260246000fd5b90506020028101906101889190611eda565b806108c781611fc0565b915050610831565b505050505050565b6109158484848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610bea92505050565b60005b836020015151811015610a83578360200151818151811061094957634e487b7160e01b600052603260045260246000fd5b602002602001015160200151518460200151828151811061097a57634e487b7160e01b600052603260045260246000fd5b60200260200101516000015151146109d45760405162461bcd60e51b815260206004820152601360248201527f434c41494d5f494e56414c49445f494e505554000000000000000000000000006044820152606401610312565b610a71846000015185602001518381518110610a0057634e487b7160e01b600052603260045260246000fd5b60200260200101516000015186602001518481518110610a3057634e487b7160e01b600052603260045260246000fd5b60200260200101516020015187602001518581518110610a6057634e487b7160e01b600052603260045260246000fd5b602002602001015160400151610c54565b80610a7b81611fc0565b915050610918565b5060005b836040015151811015610b1357610b01846000015185604001518381518110610ac057634e487b7160e01b600052603260045260246000fd5b60200260200101516000015186604001518481518110610af057634e487b7160e01b600052603260045260246000fd5b602002602001015160200151610d39565b80610b0b81611fc0565b915050610a87565b506060830151515115610b9557606083015160208101515190515114610b7b5760405162461bcd60e51b815260206004820152601360248201527f434c41494d5f494e56414c49445f494e505554000000000000000000000000006044820152606401610312565b825160608401518051602090910151610b95929190610e1b565b7fccb3b0181cc8d8090505df7a2b9d7e4c07de5f4e24c836176be4834d6f15feb4836000015184602001518560400151866060015188604051610bdc959493929190611d84565b60405180910390a150505050565b6000610bf583610f18565b9050610c02828583610f49565b610c4e5760405162461bcd60e51b815260206004820152600d60248201527f434c41494d5f494e56414c4944000000000000000000000000000000000000006044820152606401610312565b50505050565b6001600160a01b038116610cb65760405162461bcd60e51b815260206004820152602360248201527f434c41494d5f494e56414c49445f434f4e54524143545f5a45524f5f4144445260448201526245535360e81b6064820152608401610312565b6040517f2eb2c2d60000000000000000000000000000000000000000000000000000000081526001600160a01b03821690632eb2c2d690610d01903090889088908890600401611ce8565b600060405180830381600087803b158015610d1b57600080fd5b505af1158015610d2f573d6000803e3d6000fd5b5050505050505050565b6001600160a01b038116610d9b5760405162461bcd60e51b815260206004820152602360248201527f434c41494d5f494e56414c49445f434f4e54524143545f5a45524f5f4144445260448201526245535360e81b6064820152608401610312565b6040517f28cfbd460000000000000000000000000000000000000000000000000000000081526001600160a01b038216906328cfbd4690610de490309087908790600401611d40565b600060405180830381600087803b158015610dfe57600080fd5b505af1158015610e12573d6000803e3d6000fd5b50505050505050565b60005b8251811015610c4e576000828281518110610e4957634e487b7160e01b600052603260045260246000fd5b602002602001015190506000848381518110610e7557634e487b7160e01b600052603260045260246000fd5b6020026020010151905060006001600160a01b0316826001600160a01b03161415610eee5760405162461bcd60e51b815260206004820152602360248201527f434c41494d5f494e56414c49445f434f4e54524143545f5a45524f5f4144445260448201526245535360e81b6064820152608401610312565b610f036001600160a01b038316308884610f5f565b50508080610f1090611fc0565b915050610e1e565b600081604051602001610f2b9190611e58565b6040516020818303038152906040528051906020012090505b919050565b600082610f568584610fe7565b14949350505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052610c4e9085906110a1565b600081815b845181101561109957600085828151811061101757634e487b7160e01b600052603260045260246000fd5b60200260200101519050808311611059576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250611086565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b508061109181611fc0565b915050610fec565b509392505050565b60006110f6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661118b9092919063ffffffff16565b80519091501561118657808060200190518101906111149190611a89565b6111865760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610312565b505050565b606061119a84846000856111a2565b949350505050565b60608247101561121a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610312565b843b6112685760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610312565b600080866001600160a01b031685876040516112849190611ccc565b60006040518083038185875af1925050503d80600081146112c1576040519150601f19603f3d011682016040523d82523d6000602084013e6112c6565b606091505b50915091506112d68282866112e1565b979650505050505050565b606083156112f0575081610787565b8251156113005782518084602001fd5b8160405162461bcd60e51b81526004016103129190611e25565b80356001600160a01b0381168114610f4457600080fd5b60008083601f840112611342578182fd5b50813567ffffffffffffffff811115611359578182fd5b602083019150836020808302850101111561137357600080fd5b9250929050565b600082601f83011261138a578081fd5b8135602061139f61139a83611f70565b611f3f565b82815281810190858301855b858110156114485781358801606080601f19838d030112156113cb578889fd5b6113d481611f3f565b8783013567ffffffffffffffff808211156113ed578b8cfd5b6113fb8e8b848801016114f6565b8352604091508185013581811115611411578c8dfd5b61141f8f8c838901016114f6565b8b850152505061143083850161131a565b908201528652505092840192908401906001016113ab565b5090979650505050505050565b600082601f830112611465578081fd5b8135602061147561139a83611f70565b82815281810190858301855b858110156114485781358801604080601f19838d030112156114a1578889fd5b6114aa81611f3f565b8783013567ffffffffffffffff8111156114c2578a8bfd5b6114d08d8a838701016114f6565b8252506114de82840161131a565b81890152865250509284019290840190600101611481565b600082601f830112611506578081fd5b8135602061151661139a83611f70565b8281528181019085830183850287018401881015611532578586fd5b855b8581101561144857813584529284019290840190600101611534565b60008083601f840112611561578182fd5b50813567ffffffffffffffff811115611578578182fd5b60208301915083602082850101111561137357600080fd5b600060a082840312156115a1578081fd5b6115ab60a0611f3f565b90506115b68261131a565b8152602082013567ffffffffffffffff808211156115d357600080fd5b6115df8583860161137a565b602084015260408401359150808211156115f857600080fd5b61160485838601611455565b6040840152606084013591508082111561161d57600080fd5b5061162a84828501611640565b6060830152506080820135608082015292915050565b600060408284031215611651578081fd5b61165b6040611f3f565b9050813567ffffffffffffffff8082111561167557600080fd5b611681858386016114f6565b835260209150818401358181111561169857600080fd5b84019050601f810185136116ab57600080fd5b80356116b961139a82611f70565b81815283810190838501858402850186018910156116d657600080fd5b600094505b83851015611700576116ec8161131a565b8352600194909401939185019185016116db565b508085870152505050505092915050565b600060208284031215611722578081fd5b6107878261131a565b60008060008060008060008060a0898b031215611746578384fd5b61174f8961131a565b975061175d60208a0161131a565b9650604089013567ffffffffffffffff80821115611779578586fd5b6117858c838d01611331565b909850965060608b013591508082111561179d578586fd5b6117a98c838d01611331565b909650945060808b01359150808211156117c1578384fd5b506117ce8b828c01611550565b999c989b5096995094979396929594505050565b600080600080600080608087890312156117fa578384fd5b6118038761131a565b95506118116020880161131a565b9450604087013567ffffffffffffffff8082111561182d578586fd5b6118398a838b01611331565b90965094506060890135915080821115611851578384fd5b5061185e89828a01611550565b979a9699509497509295939492505050565b600080600080600060808688031215611887578283fd5b6118908661131a565b945061189e6020870161131a565b935060408601359250606086013567ffffffffffffffff8111156118c0578182fd5b6118cc88828901611550565b969995985093965092949392505050565b60008060008060008060a087890312156118f5578384fd5b6118fe8761131a565b955061190c6020880161131a565b94506040870135935060608701359250608087013567ffffffffffffffff811115611935578283fd5b61185e89828a01611550565b600080600060408486031215611955578081fd5b61195e8461131a565b9250602084013567ffffffffffffffff811115611979578182fd5b61198586828701611331565b9497909650939450505050565b600080604083850312156119a4578182fd5b6119ad8361131a565b946020939093013593505050565b6000806000806000606086880312156119d2578283fd5b853567ffffffffffffffff808211156119e9578485fd5b6119f589838a01611331565b9097509550602091508782013581811115611a0e578586fd5b8801601f81018a13611a1e578586fd5b8035611a2c61139a82611f70565b81815284810190838601895b84811015611a6157611a4f8f898435890101611590565b84529287019290870190600101611a38565b50909850505050604089013592505080821115611a7c578283fd5b506118cc88828901611331565b600060208284031215611a9a578081fd5b81518015158114610787578182fd5b60008060008060608587031215611abe578182fd5b84359350602085013567ffffffffffffffff80821115611adc578384fd5b611ae888838901611590565b94506040870135915080821115611afd578384fd5b50611b0a87828801611331565b95989497509550505050565b60008060408385031215611b28578182fd5b50508035926020909101359150565b6000815180845260208085018081965082840281019150828601855b85811015611bb7578284038952815160608151818752611b7582880182611c29565b9150508682015186820388880152611b8d8282611c29565b6040938401516001600160a01b031697909301969096525098850198935090840190600101611b53565b5091979650505050505050565b6000815180845260208085018081965082840281019150828601855b85811015611bb7578284038952815160408151818752611c0282880182611c29565b928801516001600160a01b0316968801969096525098850198935090840190600101611be0565b6000815180845260208085019450808401835b83811015611c5857815187529582019590820190600101611c3c565b509495945050505050565b6000815160408452611c786040850182611c29565b602084810151868303878301528051808452908201935090918491908301905b80831015611cc15784516001600160a01b03168252938301936001929092019190830190611c98565b509695505050505050565b60008251611cde818460208701611f94565b9190910192915050565b60006001600160a01b03808716835280861660208401525060a06040830152611d1460a0830185611c29565b8281036060840152611d268185611c29565b838103608090940193909352508152602001949350505050565b60006001600160a01b03808616835280851660208401525060806040830152611d6c6080830184611c29565b82810360609093019290925281526020019392505050565b60006001600160a01b038716825260a06020830152611da660a0830187611b37565b8281036040840152611db88187611bc4565b90508281036060840152611dcc8186611c63565b9150508260808301529695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015611e19578351151583529284019291840191600101611dfb565b50909695505050505050565b6000602082528251806020840152611e44816040850160208701611f94565b601f01601f19169190910160400192915050565b6000602082526001600160a01b038351166020830152602083015160a06040840152611e8760c0840182611b37565b90506040840151601f1980858403016060860152611ea58383611bc4565b9250606086015191508085840301608086015250611ec38282611c63565b915050608084015160a08401528091505092915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112611f0e578283fd5b83018035915067ffffffffffffffff821115611f28578283fd5b602090810192508102360382131561137357600080fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611f6857611f68612005565b604052919050565b600067ffffffffffffffff821115611f8a57611f8a612005565b5060209081020190565b60005b83811015611faf578181015183820152602001611f97565b83811115610c4e5750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611ffe57634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220e85853fd22a5e3a55dc984dab511dd88ed73453f2baac585962fe33debf36e9164736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addNewGiveaway(bytes32,uint256)": {
        "params": {
          "expiryTime": "The expiry time for the giveaway.",
          "merkleRoot": "The merkle root hash of the claim data."
        }
      },
      "changeAdmin(address)": {
        "details": "Change the administrator to be `newAdmin`.",
        "params": {
          "newAdmin": "The address of the new administrator."
        }
      },
      "claimMultipleTokens(bytes32,(address,(uint256[],uint256[],address)[],(uint256[],address)[],(uint256[],address[]),bytes32),bytes32[])": {
        "details": "Public function used to perform validity checks and progress to claim multiple token types in one claim.",
        "params": {
          "claim": "The claim struct containing the destination address, all items to be claimed and optional salt param.",
          "merkleRoot": "The merkle root hash for the specific set of items being claimed.",
          "proof": "The proof provided by the user performing the claim function."
        }
      },
      "claimMultipleTokensFromMultipleMerkleTree(bytes32[],(address,(uint256[],uint256[],address)[],(uint256[],address)[],(uint256[],address[]),bytes32)[],bytes32[][])": {
        "params": {
          "claims": "The array of claim structs, each containing a destination address, the giveaway items to be claimed and an optional salt param.",
          "proofs": "The proofs submitted for verification."
        }
      },
      "getAdmin()": {
        "details": "Get the current administrator of this contract.",
        "returns": {
          "_0": "The current administrator of this contract."
        }
      },
      "getClaimedStatus(address,bytes32[])": {
        "params": {
          "rootHashes": "The array of giveaway root hashes to check.",
          "user": "The user (intended token destination) address."
        },
        "returns": {
          "_0": "claimedGiveaways The array of bools confirming whether or not the giveaways relating to the root hashes provided have been claimed."
        }
      }
    },
    "title": "MultiGiveaway contract.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addNewGiveaway(bytes32,uint256)": {
        "notice": "Function to add a new giveaway."
      },
      "claimMultipleTokensFromMultipleMerkleTree(bytes32[],(address,(uint256[],uint256[],address)[],(uint256[],address)[],(uint256[],address[]),bytes32)[],bytes32[][])": {
        "notice": "Function to permit the claiming of multiple tokens from multiple giveaways to a reserved address."
      },
      "getClaimedStatus(address,bytes32[])": {
        "notice": "Function to check which giveaways have been claimed by a particular user."
      }
    },
    "notice": "This contract manages claims for multiple token types.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1732,
        "contract": "src/solc_0.8/claims/MultiGiveaway0/MultiGiveaway0.sol:MultiGiveaway0",
        "label": "_admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1420,
        "contract": "src/solc_0.8/claims/MultiGiveaway0/MultiGiveaway0.sol:MultiGiveaway0",
        "label": "claimed",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_bool))"
      },
      {
        "astId": 1424,
        "contract": "src/solc_0.8/claims/MultiGiveaway0/MultiGiveaway0.sol:MultiGiveaway0",
        "label": "_expiryTime",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_bool)"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}