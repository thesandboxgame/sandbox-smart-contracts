{
  "address": "0x6b4831e24F0cd73d4150EF4694aA87d6c104A774",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newERC1155MultiplierLimit",
          "type": "uint256"
        }
      ],
      "name": "ERC1155MultiplierLimitSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractERC1155",
          "type": "address"
        }
      ],
      "name": "ERC1155MultiplierListDeleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractERC1155",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "multipliers",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "ERC1155MultiplierListSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newERC721MultiplierLimit",
          "type": "uint256"
        }
      ],
      "name": "ERC721MultiplierLimitSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractERC721",
          "type": "address"
        }
      ],
      "name": "ERC721MultiplierListDeleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractERC721",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "multipliers",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "balanceOf",
          "type": "bool"
        }
      ],
      "name": "ERC721MultiplierListSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountStaked",
          "type": "uint256"
        }
      ],
      "name": "computeMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractsLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractERC1155",
          "type": "address"
        }
      ],
      "name": "deleteERC1155MultiplierList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractERC721",
          "type": "address"
        }
      ],
      "name": "deleteERC721MultiplierList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "reqContract",
          "type": "address"
        }
      ],
      "name": "getERC1155MultiplierList",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "ids",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "multipliers",
              "type": "uint256[]"
            },
            {
              "internalType": "bool",
              "name": "balanceOf",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "internalType": "struct ContributionRules.MultiplierRule",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "reqContract",
          "type": "address"
        }
      ],
      "name": "getERC721MultiplierList",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "ids",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "multipliers",
              "type": "uint256[]"
            },
            {
              "internalType": "bool",
              "name": "balanceOf",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "internalType": "struct ContributionRules.MultiplierRule",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getMaxGlobalMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "idsLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC1155",
          "name": "reqContract",
          "type": "address"
        }
      ],
      "name": "isERC1155MemberMultiplierList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "reqContract",
          "type": "address"
        }
      ],
      "name": "isERC721MemberMultiplierList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "multiplierBalanceOfERC1155",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "multiplierBalanceOfERC721",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "multiplierLimitERC1155",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "multiplierLimitERC721",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "contract IERC721",
          "name": "contractERC721",
          "type": "address"
        }
      ],
      "name": "multiplierLogarithm",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newLimit",
          "type": "uint256"
        }
      ],
      "name": "setERC1155MultiplierLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractERC1155",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "multipliers",
          "type": "uint256[]"
        }
      ],
      "name": "setERC1155MultiplierList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newLimit",
          "type": "uint256"
        }
      ],
      "name": "setERC721MultiplierLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractERC721",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "multipliers",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "balanceOf",
          "type": "bool"
        }
      ],
      "name": "setERC721MultiplierList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe33e683bfa737974fb9815963d0a627aa6a808b49b98d4aac8a5b999811b6abe",
  "receipt": {
    "to": null,
    "from": "0x7074BB056C53ACC0b6091dd3FAe591aa3A4acC88",
    "contractAddress": "0x6b4831e24F0cd73d4150EF4694aA87d6c104A774",
    "transactionIndex": 38,
    "gasUsed": "2128643",
    "logsBloom": "0x0000000000000000000000000000000000000000000000000080000040000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000800001000000000000000100000000000000000000020000000000000000000800000000000000000080000000000000400000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000004000800010000000000001000000018000000000000000000000100000000020000000020000000000000000000000010000000800000000000000000000100000",
    "blockHash": "0x6da77c5d6f8ec98c614567256205a777fc5fa3dbfc63470635506c78acca118f",
    "transactionHash": "0xe33e683bfa737974fb9815963d0a627aa6a808b49b98d4aac8a5b999811b6abe",
    "logs": [
      {
        "transactionIndex": 38,
        "blockNumber": 33147757,
        "transactionHash": "0xe33e683bfa737974fb9815963d0a627aa6a808b49b98d4aac8a5b999811b6abe",
        "address": "0x6b4831e24F0cd73d4150EF4694aA87d6c104A774",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007074bb056c53acc0b6091dd3fae591aa3a4acc88"
        ],
        "data": "0x",
        "logIndex": 126,
        "blockHash": "0x6da77c5d6f8ec98c614567256205a777fc5fa3dbfc63470635506c78acca118f"
      },
      {
        "transactionIndex": 38,
        "blockNumber": 33147757,
        "transactionHash": "0xe33e683bfa737974fb9815963d0a627aa6a808b49b98d4aac8a5b999811b6abe",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000007074bb056c53acc0b6091dd3fae591aa3a4acc88",
          "0x00000000000000000000000067b94473d81d0cd00849d563c94d0432ac988b49"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000e2dfaf980f040000000000000000000000000000000000000000000000000554ef51b853617df70000000000000000000000000000000000000000000018f2434235d388654eba000000000000000000000000000000000000000000000005540c7208bb5279f70000000000000000000000000000000000000000000018f244251583207452ba",
        "logIndex": 127,
        "blockHash": "0x6da77c5d6f8ec98c614567256205a777fc5fa3dbfc63470635506c78acca118f"
      }
    ],
    "blockNumber": 33147757,
    "cumulativeGasUsed": "6275033",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "95c7aac143cdd47e5a0deeb870149f31",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newERC1155MultiplierLimit\",\"type\":\"uint256\"}],\"name\":\"ERC1155MultiplierLimitSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractERC1155\",\"type\":\"address\"}],\"name\":\"ERC1155MultiplierListDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractERC1155\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"multipliers\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"ERC1155MultiplierListSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newERC721MultiplierLimit\",\"type\":\"uint256\"}],\"name\":\"ERC721MultiplierLimitSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractERC721\",\"type\":\"address\"}],\"name\":\"ERC721MultiplierListDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractERC721\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"multipliers\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"balanceOf\",\"type\":\"bool\"}],\"name\":\"ERC721MultiplierListSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"}],\"name\":\"computeMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractsLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractERC1155\",\"type\":\"address\"}],\"name\":\"deleteERC1155MultiplierList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractERC721\",\"type\":\"address\"}],\"name\":\"deleteERC721MultiplierList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reqContract\",\"type\":\"address\"}],\"name\":\"getERC1155MultiplierList\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"multipliers\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"balanceOf\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"internalType\":\"struct ContributionRules.MultiplierRule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reqContract\",\"type\":\"address\"}],\"name\":\"getERC721MultiplierList\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"multipliers\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"balanceOf\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"internalType\":\"struct ContributionRules.MultiplierRule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getMaxGlobalMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"idsLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"reqContract\",\"type\":\"address\"}],\"name\":\"isERC1155MemberMultiplierList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"reqContract\",\"type\":\"address\"}],\"name\":\"isERC721MemberMultiplierList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"multiplierBalanceOfERC1155\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"multiplierBalanceOfERC721\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiplierLimitERC1155\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiplierLimitERC721\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"contract IERC721\",\"name\":\"contractERC721\",\"type\":\"address\"}],\"name\":\"multiplierLogarithm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLimit\",\"type\":\"uint256\"}],\"name\":\"setERC1155MultiplierLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractERC1155\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"multipliers\",\"type\":\"uint256[]\"}],\"name\":\"setERC1155MultiplierList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLimit\",\"type\":\"uint256\"}],\"name\":\"setERC721MultiplierLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractERC721\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"multipliers\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"balanceOf\",\"type\":\"bool\"}],\"name\":\"setERC721MultiplierList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/solc_0.8/defi/rules/ContributionRules.sol\":\"ContributionRules\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-0.8/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/solc_0.8/common/Libraries/SafeMathWithRequire.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that revert\\n */\\nlibrary SafeMathWithRequire {\\n    uint256 private constant DECIMALS_18 = 1000000000000000000;\\n    uint256 private constant DECIMALS_12 = 1000000000000;\\n    uint256 private constant DECIMALS_9 = 1000000000;\\n    uint256 private constant DECIMALS_6 = 1000000;\\n\\n    function sqrt6(uint256 a) internal pure returns (uint256 c) {\\n        a = a * DECIMALS_12;\\n        uint256 tmp = (a + 1) / 2;\\n        c = a;\\n        // tmp cannot be zero unless a = 0 which skip the loop\\n        while (tmp < c) {\\n            c = tmp;\\n            tmp = ((a / tmp) + tmp) / 2;\\n        }\\n    }\\n\\n    function sqrt3(uint256 a) internal pure returns (uint256 c) {\\n        a = a * DECIMALS_6;\\n        uint256 tmp = (a + 1) / 2;\\n        c = a;\\n        // tmp cannot be zero unless a = 0 which skip the loop\\n        while (tmp < c) {\\n            c = tmp;\\n            tmp = ((a / tmp) + tmp) / 2;\\n        }\\n    }\\n\\n    function cbrt6(uint256 a) internal pure returns (uint256 c) {\\n        a = a * DECIMALS_18;\\n        uint256 tmp = (a + 2) / 3;\\n        c = a;\\n        // tmp cannot be zero unless a = 0 which skip the loop\\n        while (tmp < c) {\\n            c = tmp;\\n            uint256 tmpSquare = tmp**2;\\n            require(tmpSquare > tmp, \\\"overflow\\\");\\n            tmp = ((a / tmpSquare) + (tmp * 2)) / 3;\\n        }\\n        return c;\\n    }\\n\\n    function cbrt3(uint256 a) internal pure returns (uint256 c) {\\n        a = a * DECIMALS_9;\\n        uint256 tmp = (a + 2) / 3;\\n        c = a;\\n        // tmp cannot be zero unless a = 0 which skip the loop\\n        while (tmp < c) {\\n            c = tmp;\\n            uint256 tmpSquare = tmp**2;\\n            require(tmpSquare > tmp, \\\"overflow\\\");\\n            tmp = ((a / tmpSquare) + (tmp * 2)) / 3;\\n        }\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0x2e94c73bd0addb97d5c53a51453ce73c8f033d504f84b1227dc0f10ea2586750\",\"license\":\"MIT\"},\"src/solc_0.8/defi/interfaces/IContributionRules.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.2;\\n\\ninterface IContributionRules {\\n    function computeMultiplier(address account, uint256 amountStaked) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xc2514b3afffa88153188436b097b83f51ff478ac787405a2213fa49f72c970a9\",\"license\":\"MIT\"},\"src/solc_0.8/defi/rules/ContributionRules.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.2;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts-0.8/access/Ownable.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts-0.8/utils/Address.sol\\\";\\nimport {SafeMathWithRequire} from \\\"../../common/Libraries/SafeMathWithRequire.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts-0.8/token/ERC721/IERC721.sol\\\";\\nimport {IERC1155} from \\\"@openzeppelin/contracts-0.8/token/ERC1155/IERC1155.sol\\\";\\nimport {IContributionRules} from \\\"../interfaces/IContributionRules.sol\\\";\\n\\ncontract ContributionRules is Ownable, IContributionRules {\\n    using Address for address;\\n\\n    // LIMITS\\n    // we limited the number of Ids and contracts that we can have in the lists\\n    // to avoid the risk of DoS caused by gas limits being exceeded during the iterations\\n    uint256 public constant idsLimit = 64;\\n    uint256 public constant contractsLimit = 4;\\n    uint256 public constant maxMultiplier = 1000;\\n    uint256 public multiplierLimitERC721 = 1000;\\n    uint256 public multiplierLimitERC1155 = 1000;\\n\\n    uint256 internal constant DECIMALS_7 = 10_000_000;\\n    uint256 internal constant MIDPOINT_9 = 500_000_000;\\n    uint256 internal constant NFT_FACTOR_6 = 10000;\\n    uint256 internal constant NFT_CONSTANT_3 = 9000;\\n    uint256 internal constant ROOT3_FACTOR = 697;\\n\\n    struct MultiplierRule {\\n        uint256[] ids;\\n        uint256[] multipliers;\\n        bool balanceOf;\\n        uint256 index;\\n    }\\n\\n    mapping(IERC721 => MultiplierRule) internal _listERC721;\\n    mapping(IERC1155 => MultiplierRule) internal _listERC1155;\\n    IERC721[] internal _listERC721Index;\\n    IERC1155[] internal _listERC1155Index;\\n\\n    event ERC1155MultiplierListSet(address indexed contractERC1155, uint256[] multipliers, uint256[] ids);\\n    event ERC721MultiplierListSet(address indexed contractERC721, uint256[] multipliers, uint256[] ids, bool balanceOf);\\n    event ERC1155MultiplierListDeleted(address indexed contractERC1155);\\n    event ERC721MultiplierListDeleted(address indexed contractERC721);\\n    event ERC721MultiplierLimitSet(uint256 newERC721MultiplierLimit);\\n    event ERC1155MultiplierLimitSet(uint256 newERC1155MultiplierLimit);\\n\\n    modifier isContract(address account) {\\n        require(account.isContract(), \\\"ContributionRules: is not contract\\\");\\n\\n        _;\\n    }\\n\\n    modifier isERC721MemberList(address contractERC721) {\\n        require(\\n            isERC721MemberMultiplierList(IERC721(contractERC721)),\\n            \\\"ContributionRules: contract is not in the list\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier isERC1155MemberList(address contractERC1155) {\\n        require(\\n            isERC1155MemberMultiplierList(IERC1155(contractERC1155)),\\n            \\\"ContributionRules: contract is not in the list\\\"\\n        );\\n        _;\\n    }\\n\\n    function computeMultiplier(address account, uint256 amountStaked) external view override returns (uint256) {\\n        uint256 multiplierERC721 = multiplierBalanceOfERC721(account);\\n        uint256 multiplierERC1155 = multiplierBalanceOfERC1155(account);\\n\\n        // check if the calculated multipliers exceeds the limit\\n        if (multiplierLimitERC721 < multiplierERC721) {\\n            multiplierERC721 = multiplierLimitERC721;\\n        }\\n\\n        if (multiplierLimitERC1155 < multiplierERC1155) {\\n            multiplierERC1155 = multiplierLimitERC1155;\\n        }\\n\\n        return amountStaked + ((amountStaked * (multiplierERC721 + multiplierERC1155)) / 100);\\n    }\\n\\n    function setERC721MultiplierLimit(uint256 _newLimit) external onlyOwner {\\n        require(_newLimit <= maxMultiplier, \\\"ContributionRules: invalid newLimit\\\");\\n\\n        multiplierLimitERC721 = _newLimit;\\n\\n        emit ERC721MultiplierLimitSet(_newLimit);\\n    }\\n\\n    function setERC1155MultiplierLimit(uint256 _newLimit) external onlyOwner {\\n        require(_newLimit <= maxMultiplier, \\\"ContributionRules: invalid newLimit\\\");\\n\\n        multiplierLimitERC1155 = _newLimit;\\n\\n        emit ERC1155MultiplierLimitSet(_newLimit);\\n    }\\n\\n    function setERC1155MultiplierList(\\n        address contractERC1155,\\n        uint256[] memory ids,\\n        uint256[] memory multipliers\\n    ) external onlyOwner isContract(contractERC1155) {\\n        require(ids.length > 0 && ids.length <= idsLimit, \\\"ContributionRules: invalid array of ids\\\");\\n        require(multipliers.length > 0, \\\"ContributionRules: invalid array of multipliers\\\");\\n\\n        IERC1155 multContract = IERC1155(contractERC1155);\\n\\n        // if it's a new member create a new registry, instead, only update\\n        if (isERC1155MemberMultiplierList(multContract) == false) {\\n            // Limiting the size of the array (interations) to avoid the risk of DoS.\\n            require(contractsLimit > _listERC1155Index.length, \\\"ContributionRules: contractsLimit exceeded\\\");\\n            _listERC1155Index.push(multContract);\\n            _listERC1155[multContract].index = _listERC1155Index.length - 1;\\n        }\\n\\n        _listERC1155[multContract].ids = ids;\\n        _listERC1155[multContract].multipliers = multipliers;\\n        _listERC1155[multContract].balanceOf = false;\\n\\n        emit ERC1155MultiplierListSet(contractERC1155, multipliers, ids);\\n    }\\n\\n    function setERC721MultiplierList(\\n        address contractERC721,\\n        uint256[] memory ids,\\n        uint256[] memory multipliers,\\n        bool balanceOf\\n    ) external onlyOwner isContract(contractERC721) {\\n        require(\\n            balanceOf == true || (ids.length > 0 && multipliers.length == ids.length),\\n            \\\"ContributionRules: invalid list\\\"\\n        );\\n        require(ids.length <= idsLimit, \\\"ContributionRules: invalid array of ids\\\");\\n\\n        IERC721 multContract = IERC721(contractERC721);\\n\\n        // if it's a new member create a new registry, instead, only update\\n        if (isERC721MemberMultiplierList(multContract) == false) {\\n            // Limiting the size of the array (interations) to avoid the risk of DoS.\\n            require(contractsLimit > _listERC721Index.length, \\\"ContributionRules: contractsLimit exceeded\\\");\\n            _listERC721Index.push(multContract);\\n            _listERC721[multContract].index = _listERC721Index.length - 1;\\n        }\\n\\n        _listERC721[multContract].multipliers = multipliers;\\n        _listERC721[multContract].balanceOf = balanceOf;\\n        _listERC721[multContract].ids = ids;\\n\\n        emit ERC721MultiplierListSet(contractERC721, multipliers, ids, balanceOf);\\n    }\\n\\n    function getMaxGlobalMultiplier(address account) external view returns (uint256) {\\n        return multiplierBalanceOfERC721(account) + multiplierBalanceOfERC1155(account);\\n    }\\n\\n    function getERC721MultiplierList(address reqContract)\\n        external\\n        view\\n        isContract(reqContract)\\n        isERC721MemberList(reqContract)\\n        returns (MultiplierRule memory)\\n    {\\n        return _listERC721[IERC721(reqContract)];\\n    }\\n\\n    function getERC1155MultiplierList(address reqContract)\\n        external\\n        view\\n        isContract(reqContract)\\n        isERC1155MemberList(reqContract)\\n        returns (MultiplierRule memory)\\n    {\\n        return _listERC1155[IERC1155(reqContract)];\\n    }\\n\\n    function deleteERC721MultiplierList(address contractERC721)\\n        external\\n        isContract(contractERC721)\\n        isERC721MemberList(contractERC721)\\n        onlyOwner\\n    {\\n        IERC721 reqContract = IERC721(contractERC721);\\n        uint256 indexToDelete = _listERC721[reqContract].index;\\n        IERC721 addrToMove = _listERC721Index[_listERC721Index.length - 1];\\n        _listERC721Index[indexToDelete] = addrToMove;\\n        _listERC721[addrToMove].index = indexToDelete;\\n        _listERC721Index.pop();\\n\\n        emit ERC721MultiplierListDeleted(address(reqContract));\\n    }\\n\\n    function deleteERC1155MultiplierList(address contractERC1155)\\n        external\\n        isContract(contractERC1155)\\n        isERC1155MemberList(contractERC1155)\\n        onlyOwner\\n    {\\n        IERC1155 reqContract = IERC1155(contractERC1155);\\n        uint256 indexToDelete = _listERC1155[reqContract].index;\\n        IERC1155 addrToMove = _listERC1155Index[_listERC1155Index.length - 1];\\n        _listERC1155Index[indexToDelete] = addrToMove;\\n        _listERC1155[addrToMove].index = indexToDelete;\\n        _listERC1155Index.pop();\\n\\n        emit ERC1155MultiplierListDeleted(address(reqContract));\\n    }\\n\\n    function isERC721MemberMultiplierList(IERC721 reqContract) public view returns (bool) {\\n        return !(_listERC721Index.length == 0) && (_listERC721Index[_listERC721[reqContract].index] == reqContract);\\n    }\\n\\n    function isERC1155MemberMultiplierList(IERC1155 reqContract) public view returns (bool) {\\n        return !(_listERC1155Index.length == 0) && (_listERC1155Index[_listERC1155[reqContract].index] == reqContract);\\n    }\\n\\n    function multiplierBalanceOfERC721(address account) public view returns (uint256) {\\n        uint256 _multiplier = 0;\\n\\n        for (uint256 i = 0; i < _listERC721Index.length; i++) {\\n            IERC721 reqContract = _listERC721Index[i];\\n\\n            if (_listERC721[reqContract].balanceOf == true) {\\n                _multiplier = _multiplier + multiplierLogarithm(account, reqContract);\\n            } else {\\n                for (uint256 j = 0; j < _listERC721[reqContract].ids.length; j++) {\\n                    address owner = reqContract.ownerOf(_listERC721[reqContract].ids[j]);\\n                    if (owner == account) {\\n                        _multiplier = _multiplier + _listERC721[reqContract].multipliers[j];\\n                    }\\n                }\\n            }\\n        }\\n\\n        return _multiplier;\\n    }\\n\\n    function multiplierBalanceOfERC1155(address account) public view returns (uint256) {\\n        uint256 _multiplier = 0;\\n        for (uint256 i = 0; i < _listERC1155Index.length; i++) {\\n            IERC1155 reqContract = _listERC1155Index[i];\\n\\n            for (uint256 j = 0; j < _listERC1155[reqContract].ids.length; j++) {\\n                uint256 _bal = reqContract.balanceOf(account, _listERC1155[reqContract].ids[j]);\\n\\n                if (_bal > 0) {\\n                    _multiplier = _multiplier + _listERC1155[reqContract].multipliers[j];\\n                }\\n            }\\n        }\\n\\n        return _multiplier;\\n    }\\n\\n    function multiplierLogarithm(address account, IERC721 contractERC721) public view returns (uint256) {\\n        uint256 balERC721 = contractERC721.balanceOf(account);\\n\\n        if (balERC721 == 0) {\\n            return 0;\\n        }\\n\\n        uint256 _multiplierERC721 =\\n            NFT_FACTOR_6 * (NFT_CONSTANT_3 + SafeMathWithRequire.cbrt3((((balERC721 - 1) * ROOT3_FACTOR) + 1)));\\n        if (_multiplierERC721 > MIDPOINT_9) {\\n            _multiplierERC721 = MIDPOINT_9 + (_multiplierERC721 - MIDPOINT_9) / 10;\\n        }\\n\\n        return _multiplierERC721 / DECIMALS_7;\\n    }\\n\\n    function renounceOwnership() public view override onlyOwner {\\n        revert(\\\"ContributionRules: can't renounceOwnership\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x474935d423e9025e13758deaa2fdd3469f3892a890e51b0e6f538e2dd3be69e0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526103e86001556103e860025534801561001c57600080fd5b506100263361002b565b61007b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61245a8061008a6000396000f3fe608060405234801561001057600080fd5b506004361061018d5760003560e01c8063bb04b749116100e3578063dfe8d78b1161008c578063f0f4985611610066578063f0f4985614610314578063f2fde38b1461031c578063f47398661461032f5761018d565b8063dfe8d78b146102f0578063e255911214610303578063e5604c561461030b5761018d565b8063c6ee034c116100bd578063c6ee034c146102b7578063ccf144b0146102ca578063d71df33b146102dd5761018d565b8063bb04b7491461026e578063bd53c87614610291578063c51520d7146102a45761018d565b80633f6f66f511610145578063715018a61161011f578063715018a61461023857806383d8a49b146102405780638da5cb5b146102535761018d565b80633f6f66f5146102095780634eb2a85f1461021c57806360423854146102255761018d565b8063254c77a411610176578063254c77a4146101c35780632dbbf782146101d657806337490e5b146101e95761018d565b80630187aea01461019257806311b2dc16146101ae575b600080fd5b61019b6103e881565b6040519081526020015b60405180910390f35b6101c16101bc366004612120565b610342565b005b61019b6101d1366004611f81565b610455565b6101c16101e4366004611f81565b610479565b6101fc6101f7366004611f81565b610710565b6040516101a591906121e7565b61019b6102173660046120f5565b610909565b61019b60015481565b6101c1610233366004612120565b610976565b6101c1610a7d565b61019b61024e366004611f81565b610b45565b6000546040516001600160a01b0390911681526020016101a5565b61028161027c366004611f81565b610d47565b60405190151581526020016101a5565b6101fc61029f366004611f81565b610db2565b61019b6102b23660046120bd565b610fa7565b6101c16102c5366004611fc0565b6110da565b61019b6102d8366004611f81565b61145f565b6101c16102eb366004611f81565b61162e565b6102816102fe366004611f81565b6118c4565b61019b604081565b61019b60025481565b61019b600481565b6101c161032a366004611f81565b611912565b6101c161033d366004612033565b6119f4565b6000546001600160a01b031633146103a15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6103e88111156104195760405162461bcd60e51b815260206004820152602360248201527f436f6e747269627574696f6e52756c65733a20696e76616c6964206e65774c6960448201527f6d697400000000000000000000000000000000000000000000000000000000006064820152608401610398565b60018190556040518181527fa8a94b42c787336b81afae8b2a2f11f8eb5f176aca98cfeb0e67f99aac0ae76a906020015b60405180910390a150565b60006104608261145f565b61046983610b45565b6104739190612243565b92915050565b806001600160a01b0381163b6104dc5760405162461bcd60e51b815260206004820152602260248201527f436f6e747269627574696f6e52756c65733a206973206e6f7420636f6e74726160448201526118dd60f21b6064820152608401610398565b816104e6816118c4565b6105585760405162461bcd60e51b815260206004820152602e60248201527f436f6e747269627574696f6e52756c65733a20636f6e7472616374206973206e60448201527f6f7420696e20746865206c6973740000000000000000000000000000000000006064820152608401610398565b6000546001600160a01b031633146105b25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610398565b6001600160a01b03831660009081526004602052604081206003015460068054869391906105e2906001906123b1565b8154811061060057634e487b7160e01b600052603260045260246000fd5b600091825260209091200154600680546001600160a01b03909216925082918490811061063d57634e487b7160e01b600052603260045260246000fd5b6000918252602080832091909101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03948516179055918316815260049091526040902060030182905560068054806106a557634e487b7160e01b600052603160045260246000fd5b6000828152602081208201600019908101805473ffffffffffffffffffffffffffffffffffffffff191690559091019091556040516001600160a01b038516917fee22cfa3793184abd6ebfbb6c11480b34c2cef4faf388b801e80660ee64b579f91a2505050505050565b61073d60405180608001604052806060815260200160608152602001600015158152602001600081525090565b816001600160a01b0381163b6107a05760405162461bcd60e51b815260206004820152602260248201527f436f6e747269627574696f6e52756c65733a206973206e6f7420636f6e74726160448201526118dd60f21b6064820152608401610398565b826107aa816118c4565b61081c5760405162461bcd60e51b815260206004820152602e60248201527f436f6e747269627574696f6e52756c65733a20636f6e7472616374206973206e60448201527f6f7420696e20746865206c6973740000000000000000000000000000000000006064820152608401610398565b6001600160a01b0384166000908152600460209081526040918290208251815460a09381028201840190945260808101848152909391928492849184018282801561088657602002820191906000526020600020905b815481526020019060010190808311610872575b50505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156108de57602002820191906000526020600020905b8154815260200190600101908083116108ca575b5050509183525050600282015460ff1615156020820152600390910154604090910152949350505050565b60008061091584610b45565b905060006109228561145f565b90508160015410156109345760015491505b80600254101561094357506002545b606461094f8284612243565b6109599086612392565b610963919061225b565b61096d9085612243565b95945050505050565b6000546001600160a01b031633146109d05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610398565b6103e8811115610a485760405162461bcd60e51b815260206004820152602360248201527f436f6e747269627574696f6e52756c65733a20696e76616c6964206e65774c6960448201527f6d697400000000000000000000000000000000000000000000000000000000006064820152608401610398565b60028190556040518181527fb3b5f59f1f2b30b5f1c0e5c569c9737f2557713e082b60b911ce49a28a17e1f79060200161044a565b6000546001600160a01b03163314610ad75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610398565b60405162461bcd60e51b815260206004820152602a60248201527f436f6e747269627574696f6e52756c65733a2063616e27742072656e6f756e6360448201527f654f776e657273686970000000000000000000000000000000000000000000006064820152608401610398565b600080805b600554811015610d4057600060058281548110610b7757634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b0316808352600390915260409091206002015490915060ff16151560011415610bca57610bb98582610fa7565b610bc39084612243565b9250610d2d565b60005b6001600160a01b038216600090815260036020526040902054811015610d2b576001600160a01b03821660008181526003602052604081208054919291636352211e919085908110610c2f57634e487b7160e01b600052603260045260246000fd5b90600052602060002001546040518263ffffffff1660e01b8152600401610c5891815260200190565b60206040518083038186803b158015610c7057600080fd5b505afa158015610c84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca89190611fa4565b9050866001600160a01b0316816001600160a01b03161415610d18576001600160a01b0383166000908152600360205260409020600101805483908110610cff57634e487b7160e01b600052603260045260246000fd5b906000526020600020015485610d159190612243565b94505b5080610d23816123c8565b915050610bcd565b505b5080610d38816123c8565b915050610b4a565b5092915050565b6005546000901580159061047357506001600160a01b03821660008181526003602081905260409091200154600580549091908110610d9657634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03161492915050565b610ddf60405180608001604052806060815260200160608152602001600015158152602001600081525090565b816001600160a01b0381163b610e425760405162461bcd60e51b815260206004820152602260248201527f436f6e747269627574696f6e52756c65733a206973206e6f7420636f6e74726160448201526118dd60f21b6064820152608401610398565b82610e4c81610d47565b610ebe5760405162461bcd60e51b815260206004820152602e60248201527f436f6e747269627574696f6e52756c65733a20636f6e7472616374206973206e60448201527f6f7420696e20746865206c6973740000000000000000000000000000000000006064820152608401610398565b6001600160a01b0384166000908152600360209081526040918290208251815460a09381028201840190945260808101848152909391928492849184018282801561088657602002820191906000526020600020908154815260200190600101908083116108725750505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156108de57602002820191906000526020600020908154815260200190600101908083116108ca575050509183525050600282015460ff1615156020820152600390910154604090910152949350505050565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b03838116600483015260009182918416906370a082319060240160206040518083038186803b15801561100657600080fd5b505afa15801561101a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103e9190612138565b90508061104f576000915050610473565b600061107c6102b96110626001856123b1565b61106c9190612392565b611077906001612243565b611d54565b61108890612328612243565b61109490612710612392565b9050631dcd65008111156110cd57600a6110b2631dcd6500836123b1565b6110bc919061225b565b6110ca90631dcd6500612243565b90505b61096d629896808261225b565b6000546001600160a01b031633146111345760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610398565b826001600160a01b0381163b6111975760405162461bcd60e51b815260206004820152602260248201527f436f6e747269627574696f6e52756c65733a206973206e6f7420636f6e74726160448201526118dd60f21b6064820152608401610398565b600083511180156111aa57506040835111155b61121c5760405162461bcd60e51b815260206004820152602760248201527f436f6e747269627574696f6e52756c65733a20696e76616c696420617272617960448201527f206f6620696473000000000000000000000000000000000000000000000000006064820152608401610398565b60008251116112935760405162461bcd60e51b815260206004820152602f60248201527f436f6e747269627574696f6e52756c65733a20696e76616c696420617272617960448201527f206f66206d756c7469706c6965727300000000000000000000000000000000006064820152608401610398565b8361129d816118c4565b61139c576006546004116113195760405162461bcd60e51b815260206004820152602a60248201527f436f6e747269627574696f6e52756c65733a20636f6e7472616374734c696d6960448201527f74206578636565646564000000000000000000000000000000000000000000006064820152608401610398565b600680546001808201835560008390527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f909101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038516179055905461137f91906123b1565b6001600160a01b0382166000908152600460205260409020600301555b6001600160a01b038116600090815260046020908152604090912085516113c592870190611e84565b506001600160a01b038116600090815260046020908152604090912084516113f592600190920191860190611e84565b506001600160a01b0380821660009081526004602052604090819020600201805460ff1916905551908616907f7b486d93ca562a4cdffc23976220456f031607475580f6ffafae799291624ab290611450908690889061218a565b60405180910390a25050505050565b600080805b600654811015610d405760006006828154811061149157634e487b7160e01b600052603260045260246000fd5b60009182526020822001546001600160a01b031691505b6001600160a01b038216600090815260046020526040902054811015611619576001600160a01b0382166000818152600460205260408120805491929162fdd58e918a918690811061150a57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b039092166004830152602482015260440160206040518083038186803b15801561157257600080fd5b505afa158015611586573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115aa9190612138565b90508015611606576001600160a01b03831660009081526004602052604090206001018054839081106115ed57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154856116039190612243565b94505b5080611611816123c8565b9150506114a8565b50508080611626906123c8565b915050611464565b806001600160a01b0381163b6116915760405162461bcd60e51b815260206004820152602260248201527f436f6e747269627574696f6e52756c65733a206973206e6f7420636f6e74726160448201526118dd60f21b6064820152608401610398565b8161169b81610d47565b61170d5760405162461bcd60e51b815260206004820152602e60248201527f436f6e747269627574696f6e52756c65733a20636f6e7472616374206973206e60448201527f6f7420696e20746865206c6973740000000000000000000000000000000000006064820152608401610398565b6000546001600160a01b031633146117675760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610398565b6001600160a01b0383166000908152600360208190526040822001546005805486939190611797906001906123b1565b815481106117b557634e487b7160e01b600052603260045260246000fd5b600091825260209091200154600580546001600160a01b0390921692508291849081106117f257634e487b7160e01b600052603260045260246000fd5b6000918252602080832091909101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0394851617905591831681526003918290526040902001829055600580548061185957634e487b7160e01b600052603160045260246000fd5b6000828152602081208201600019908101805473ffffffffffffffffffffffffffffffffffffffff191690559091019091556040516001600160a01b038516917fd48581b30704212f3e5a542f84e0a344663c83bfad12110bcca49d4861f5952b91a2505050505050565b6006546000901580159061047357506001600160a01b038216600081815260046020526040902060030154600680549091908110610d9657634e487b7160e01b600052603260045260246000fd5b6000546001600160a01b0316331461196c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610398565b6001600160a01b0381166119e85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610398565b6119f181611e27565b50565b6000546001600160a01b03163314611a4e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610398565b836001600160a01b0381163b611ab15760405162461bcd60e51b815260206004820152602260248201527f436f6e747269627574696f6e52756c65733a206973206e6f7420636f6e74726160448201526118dd60f21b6064820152608401610398565b60018215151480611acf575060008451118015611acf575083518351145b611b1b5760405162461bcd60e51b815260206004820152601f60248201527f436f6e747269627574696f6e52756c65733a20696e76616c6964206c697374006044820152606401610398565b604084511115611b935760405162461bcd60e51b815260206004820152602760248201527f436f6e747269627574696f6e52756c65733a20696e76616c696420617272617960448201527f206f6620696473000000000000000000000000000000000000000000000000006064820152608401610398565b84611b9d81610d47565b611c9d57600554600411611c195760405162461bcd60e51b815260206004820152602a60248201527f436f6e747269627574696f6e52756c65733a20636f6e7472616374734c696d6960448201527f74206578636565646564000000000000000000000000000000000000000000006064820152608401610398565b600580546001808201835560008390527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0909101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385161790559054611c7f91906123b1565b6001600160a01b038216600090815260036020819052604090912001555b6001600160a01b03811660009081526003602090815260409091208551611ccc92600190920191870190611e84565b506001600160a01b038116600090815260036020908152604090912060028101805460ff19168615151790558651611d0692880190611e84565b50856001600160a01b03167fc899474e882f1c85ac4f9de43336e3796e75a275390fdec75969fa031e23b7f5858786604051611d44939291906121af565b60405180910390a2505050505050565b6000611d64633b9aca0083612392565b915060006003611d75846002612243565b611d7f919061225b565b90508291505b81811015611e21579050806000611d9d6002836122c1565b9050818111611dee5760405162461bcd60e51b815260206004820152600860248201527f6f766572666c6f770000000000000000000000000000000000000000000000006044820152606401610398565b6003611dfb836002612392565b611e05838761225b565b611e0f9190612243565b611e19919061225b565b915050611d85565b50919050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b828054828255906000526020600020908101928215611ebf579160200282015b82811115611ebf578251825591602001919060010190611ea4565b50611ecb929150611ecf565b5090565b5b80821115611ecb5760008155600101611ed0565b600082601f830112611ef4578081fd5b8135602067ffffffffffffffff80831115611f1157611f116123f9565b818302604051601f19603f83011681018181108482111715611f3557611f356123f9565b60405284815283810192508684018288018501891015611f53578687fd5b8692505b85831015611f75578035845292840192600192909201918401611f57565b50979650505050505050565b600060208284031215611f92578081fd5b8135611f9d8161240f565b9392505050565b600060208284031215611fb5578081fd5b8151611f9d8161240f565b600080600060608486031215611fd4578182fd5b8335611fdf8161240f565b9250602084013567ffffffffffffffff80821115611ffb578384fd5b61200787838801611ee4565b9350604086013591508082111561201c578283fd5b5061202986828701611ee4565b9150509250925092565b60008060008060808587031215612048578081fd5b84356120538161240f565b9350602085013567ffffffffffffffff8082111561206f578283fd5b61207b88838901611ee4565b94506040870135915080821115612090578283fd5b5061209d87828801611ee4565b925050606085013580151581146120b2578182fd5b939692955090935050565b600080604083850312156120cf578182fd5b82356120da8161240f565b915060208301356120ea8161240f565b809150509250929050565b60008060408385031215612107578182fd5b82356121128161240f565b946020939093013593505050565b600060208284031215612131578081fd5b5035919050565b600060208284031215612149578081fd5b5051919050565b6000815180845260208085019450808401835b8381101561217f57815187529582019590820190600101612163565b509495945050505050565b60006040825261219d6040830185612150565b828103602084015261096d8185612150565b6000606082526121c26060830186612150565b82810360208401526121d48186612150565b9150508215156040830152949350505050565b60006020825282516080602084015261220360a0840182612150565b90506020840151601f198483030160408501526122208282612150565b915050604084015115156060840152606084015160808401528091505092915050565b60008219821115612256576122566123e3565b500190565b60008261227657634e487b7160e01b81526012600452602481fd5b500490565b80825b600180861161228d57506122b8565b81870482111561229f5761229f6123e3565b808616156122ac57918102915b9490941c93800261227e565b94509492505050565b6000611f9d60001960ff8516846000826122dd57506001611f9d565b816122ea57506000611f9d565b8160018114612300576002811461230a57612337565b6001915050611f9d565b60ff84111561231b5761231b6123e3565b6001841b915084821115612331576123316123e3565b50611f9d565b5060208310610133831016604e8410600b841016171561236a575081810a83811115612365576123656123e3565b611f9d565b612377848484600161227b565b808604821115612389576123896123e3565b02949350505050565b60008160001904831182151516156123ac576123ac6123e3565b500290565b6000828210156123c3576123c36123e3565b500390565b60006000198214156123dc576123dc6123e3565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146119f157600080fdfea264697066735822122052b466d64eb34550e9efe92c2e8c0cde42898ef230e41845005cbadd1b631fbb64736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018d5760003560e01c8063bb04b749116100e3578063dfe8d78b1161008c578063f0f4985611610066578063f0f4985614610314578063f2fde38b1461031c578063f47398661461032f5761018d565b8063dfe8d78b146102f0578063e255911214610303578063e5604c561461030b5761018d565b8063c6ee034c116100bd578063c6ee034c146102b7578063ccf144b0146102ca578063d71df33b146102dd5761018d565b8063bb04b7491461026e578063bd53c87614610291578063c51520d7146102a45761018d565b80633f6f66f511610145578063715018a61161011f578063715018a61461023857806383d8a49b146102405780638da5cb5b146102535761018d565b80633f6f66f5146102095780634eb2a85f1461021c57806360423854146102255761018d565b8063254c77a411610176578063254c77a4146101c35780632dbbf782146101d657806337490e5b146101e95761018d565b80630187aea01461019257806311b2dc16146101ae575b600080fd5b61019b6103e881565b6040519081526020015b60405180910390f35b6101c16101bc366004612120565b610342565b005b61019b6101d1366004611f81565b610455565b6101c16101e4366004611f81565b610479565b6101fc6101f7366004611f81565b610710565b6040516101a591906121e7565b61019b6102173660046120f5565b610909565b61019b60015481565b6101c1610233366004612120565b610976565b6101c1610a7d565b61019b61024e366004611f81565b610b45565b6000546040516001600160a01b0390911681526020016101a5565b61028161027c366004611f81565b610d47565b60405190151581526020016101a5565b6101fc61029f366004611f81565b610db2565b61019b6102b23660046120bd565b610fa7565b6101c16102c5366004611fc0565b6110da565b61019b6102d8366004611f81565b61145f565b6101c16102eb366004611f81565b61162e565b6102816102fe366004611f81565b6118c4565b61019b604081565b61019b60025481565b61019b600481565b6101c161032a366004611f81565b611912565b6101c161033d366004612033565b6119f4565b6000546001600160a01b031633146103a15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6103e88111156104195760405162461bcd60e51b815260206004820152602360248201527f436f6e747269627574696f6e52756c65733a20696e76616c6964206e65774c6960448201527f6d697400000000000000000000000000000000000000000000000000000000006064820152608401610398565b60018190556040518181527fa8a94b42c787336b81afae8b2a2f11f8eb5f176aca98cfeb0e67f99aac0ae76a906020015b60405180910390a150565b60006104608261145f565b61046983610b45565b6104739190612243565b92915050565b806001600160a01b0381163b6104dc5760405162461bcd60e51b815260206004820152602260248201527f436f6e747269627574696f6e52756c65733a206973206e6f7420636f6e74726160448201526118dd60f21b6064820152608401610398565b816104e6816118c4565b6105585760405162461bcd60e51b815260206004820152602e60248201527f436f6e747269627574696f6e52756c65733a20636f6e7472616374206973206e60448201527f6f7420696e20746865206c6973740000000000000000000000000000000000006064820152608401610398565b6000546001600160a01b031633146105b25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610398565b6001600160a01b03831660009081526004602052604081206003015460068054869391906105e2906001906123b1565b8154811061060057634e487b7160e01b600052603260045260246000fd5b600091825260209091200154600680546001600160a01b03909216925082918490811061063d57634e487b7160e01b600052603260045260246000fd5b6000918252602080832091909101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03948516179055918316815260049091526040902060030182905560068054806106a557634e487b7160e01b600052603160045260246000fd5b6000828152602081208201600019908101805473ffffffffffffffffffffffffffffffffffffffff191690559091019091556040516001600160a01b038516917fee22cfa3793184abd6ebfbb6c11480b34c2cef4faf388b801e80660ee64b579f91a2505050505050565b61073d60405180608001604052806060815260200160608152602001600015158152602001600081525090565b816001600160a01b0381163b6107a05760405162461bcd60e51b815260206004820152602260248201527f436f6e747269627574696f6e52756c65733a206973206e6f7420636f6e74726160448201526118dd60f21b6064820152608401610398565b826107aa816118c4565b61081c5760405162461bcd60e51b815260206004820152602e60248201527f436f6e747269627574696f6e52756c65733a20636f6e7472616374206973206e60448201527f6f7420696e20746865206c6973740000000000000000000000000000000000006064820152608401610398565b6001600160a01b0384166000908152600460209081526040918290208251815460a09381028201840190945260808101848152909391928492849184018282801561088657602002820191906000526020600020905b815481526020019060010190808311610872575b50505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156108de57602002820191906000526020600020905b8154815260200190600101908083116108ca575b5050509183525050600282015460ff1615156020820152600390910154604090910152949350505050565b60008061091584610b45565b905060006109228561145f565b90508160015410156109345760015491505b80600254101561094357506002545b606461094f8284612243565b6109599086612392565b610963919061225b565b61096d9085612243565b95945050505050565b6000546001600160a01b031633146109d05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610398565b6103e8811115610a485760405162461bcd60e51b815260206004820152602360248201527f436f6e747269627574696f6e52756c65733a20696e76616c6964206e65774c6960448201527f6d697400000000000000000000000000000000000000000000000000000000006064820152608401610398565b60028190556040518181527fb3b5f59f1f2b30b5f1c0e5c569c9737f2557713e082b60b911ce49a28a17e1f79060200161044a565b6000546001600160a01b03163314610ad75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610398565b60405162461bcd60e51b815260206004820152602a60248201527f436f6e747269627574696f6e52756c65733a2063616e27742072656e6f756e6360448201527f654f776e657273686970000000000000000000000000000000000000000000006064820152608401610398565b600080805b600554811015610d4057600060058281548110610b7757634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b0316808352600390915260409091206002015490915060ff16151560011415610bca57610bb98582610fa7565b610bc39084612243565b9250610d2d565b60005b6001600160a01b038216600090815260036020526040902054811015610d2b576001600160a01b03821660008181526003602052604081208054919291636352211e919085908110610c2f57634e487b7160e01b600052603260045260246000fd5b90600052602060002001546040518263ffffffff1660e01b8152600401610c5891815260200190565b60206040518083038186803b158015610c7057600080fd5b505afa158015610c84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca89190611fa4565b9050866001600160a01b0316816001600160a01b03161415610d18576001600160a01b0383166000908152600360205260409020600101805483908110610cff57634e487b7160e01b600052603260045260246000fd5b906000526020600020015485610d159190612243565b94505b5080610d23816123c8565b915050610bcd565b505b5080610d38816123c8565b915050610b4a565b5092915050565b6005546000901580159061047357506001600160a01b03821660008181526003602081905260409091200154600580549091908110610d9657634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03161492915050565b610ddf60405180608001604052806060815260200160608152602001600015158152602001600081525090565b816001600160a01b0381163b610e425760405162461bcd60e51b815260206004820152602260248201527f436f6e747269627574696f6e52756c65733a206973206e6f7420636f6e74726160448201526118dd60f21b6064820152608401610398565b82610e4c81610d47565b610ebe5760405162461bcd60e51b815260206004820152602e60248201527f436f6e747269627574696f6e52756c65733a20636f6e7472616374206973206e60448201527f6f7420696e20746865206c6973740000000000000000000000000000000000006064820152608401610398565b6001600160a01b0384166000908152600360209081526040918290208251815460a09381028201840190945260808101848152909391928492849184018282801561088657602002820191906000526020600020908154815260200190600101908083116108725750505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156108de57602002820191906000526020600020908154815260200190600101908083116108ca575050509183525050600282015460ff1615156020820152600390910154604090910152949350505050565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b03838116600483015260009182918416906370a082319060240160206040518083038186803b15801561100657600080fd5b505afa15801561101a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103e9190612138565b90508061104f576000915050610473565b600061107c6102b96110626001856123b1565b61106c9190612392565b611077906001612243565b611d54565b61108890612328612243565b61109490612710612392565b9050631dcd65008111156110cd57600a6110b2631dcd6500836123b1565b6110bc919061225b565b6110ca90631dcd6500612243565b90505b61096d629896808261225b565b6000546001600160a01b031633146111345760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610398565b826001600160a01b0381163b6111975760405162461bcd60e51b815260206004820152602260248201527f436f6e747269627574696f6e52756c65733a206973206e6f7420636f6e74726160448201526118dd60f21b6064820152608401610398565b600083511180156111aa57506040835111155b61121c5760405162461bcd60e51b815260206004820152602760248201527f436f6e747269627574696f6e52756c65733a20696e76616c696420617272617960448201527f206f6620696473000000000000000000000000000000000000000000000000006064820152608401610398565b60008251116112935760405162461bcd60e51b815260206004820152602f60248201527f436f6e747269627574696f6e52756c65733a20696e76616c696420617272617960448201527f206f66206d756c7469706c6965727300000000000000000000000000000000006064820152608401610398565b8361129d816118c4565b61139c576006546004116113195760405162461bcd60e51b815260206004820152602a60248201527f436f6e747269627574696f6e52756c65733a20636f6e7472616374734c696d6960448201527f74206578636565646564000000000000000000000000000000000000000000006064820152608401610398565b600680546001808201835560008390527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f909101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038516179055905461137f91906123b1565b6001600160a01b0382166000908152600460205260409020600301555b6001600160a01b038116600090815260046020908152604090912085516113c592870190611e84565b506001600160a01b038116600090815260046020908152604090912084516113f592600190920191860190611e84565b506001600160a01b0380821660009081526004602052604090819020600201805460ff1916905551908616907f7b486d93ca562a4cdffc23976220456f031607475580f6ffafae799291624ab290611450908690889061218a565b60405180910390a25050505050565b600080805b600654811015610d405760006006828154811061149157634e487b7160e01b600052603260045260246000fd5b60009182526020822001546001600160a01b031691505b6001600160a01b038216600090815260046020526040902054811015611619576001600160a01b0382166000818152600460205260408120805491929162fdd58e918a918690811061150a57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b039092166004830152602482015260440160206040518083038186803b15801561157257600080fd5b505afa158015611586573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115aa9190612138565b90508015611606576001600160a01b03831660009081526004602052604090206001018054839081106115ed57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154856116039190612243565b94505b5080611611816123c8565b9150506114a8565b50508080611626906123c8565b915050611464565b806001600160a01b0381163b6116915760405162461bcd60e51b815260206004820152602260248201527f436f6e747269627574696f6e52756c65733a206973206e6f7420636f6e74726160448201526118dd60f21b6064820152608401610398565b8161169b81610d47565b61170d5760405162461bcd60e51b815260206004820152602e60248201527f436f6e747269627574696f6e52756c65733a20636f6e7472616374206973206e60448201527f6f7420696e20746865206c6973740000000000000000000000000000000000006064820152608401610398565b6000546001600160a01b031633146117675760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610398565b6001600160a01b0383166000908152600360208190526040822001546005805486939190611797906001906123b1565b815481106117b557634e487b7160e01b600052603260045260246000fd5b600091825260209091200154600580546001600160a01b0390921692508291849081106117f257634e487b7160e01b600052603260045260246000fd5b6000918252602080832091909101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0394851617905591831681526003918290526040902001829055600580548061185957634e487b7160e01b600052603160045260246000fd5b6000828152602081208201600019908101805473ffffffffffffffffffffffffffffffffffffffff191690559091019091556040516001600160a01b038516917fd48581b30704212f3e5a542f84e0a344663c83bfad12110bcca49d4861f5952b91a2505050505050565b6006546000901580159061047357506001600160a01b038216600081815260046020526040902060030154600680549091908110610d9657634e487b7160e01b600052603260045260246000fd5b6000546001600160a01b0316331461196c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610398565b6001600160a01b0381166119e85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610398565b6119f181611e27565b50565b6000546001600160a01b03163314611a4e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610398565b836001600160a01b0381163b611ab15760405162461bcd60e51b815260206004820152602260248201527f436f6e747269627574696f6e52756c65733a206973206e6f7420636f6e74726160448201526118dd60f21b6064820152608401610398565b60018215151480611acf575060008451118015611acf575083518351145b611b1b5760405162461bcd60e51b815260206004820152601f60248201527f436f6e747269627574696f6e52756c65733a20696e76616c6964206c697374006044820152606401610398565b604084511115611b935760405162461bcd60e51b815260206004820152602760248201527f436f6e747269627574696f6e52756c65733a20696e76616c696420617272617960448201527f206f6620696473000000000000000000000000000000000000000000000000006064820152608401610398565b84611b9d81610d47565b611c9d57600554600411611c195760405162461bcd60e51b815260206004820152602a60248201527f436f6e747269627574696f6e52756c65733a20636f6e7472616374734c696d6960448201527f74206578636565646564000000000000000000000000000000000000000000006064820152608401610398565b600580546001808201835560008390527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0909101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385161790559054611c7f91906123b1565b6001600160a01b038216600090815260036020819052604090912001555b6001600160a01b03811660009081526003602090815260409091208551611ccc92600190920191870190611e84565b506001600160a01b038116600090815260036020908152604090912060028101805460ff19168615151790558651611d0692880190611e84565b50856001600160a01b03167fc899474e882f1c85ac4f9de43336e3796e75a275390fdec75969fa031e23b7f5858786604051611d44939291906121af565b60405180910390a2505050505050565b6000611d64633b9aca0083612392565b915060006003611d75846002612243565b611d7f919061225b565b90508291505b81811015611e21579050806000611d9d6002836122c1565b9050818111611dee5760405162461bcd60e51b815260206004820152600860248201527f6f766572666c6f770000000000000000000000000000000000000000000000006044820152606401610398565b6003611dfb836002612392565b611e05838761225b565b611e0f9190612243565b611e19919061225b565b915050611d85565b50919050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b828054828255906000526020600020908101928215611ebf579160200282015b82811115611ebf578251825591602001919060010190611ea4565b50611ecb929150611ecf565b5090565b5b80821115611ecb5760008155600101611ed0565b600082601f830112611ef4578081fd5b8135602067ffffffffffffffff80831115611f1157611f116123f9565b818302604051601f19603f83011681018181108482111715611f3557611f356123f9565b60405284815283810192508684018288018501891015611f53578687fd5b8692505b85831015611f75578035845292840192600192909201918401611f57565b50979650505050505050565b600060208284031215611f92578081fd5b8135611f9d8161240f565b9392505050565b600060208284031215611fb5578081fd5b8151611f9d8161240f565b600080600060608486031215611fd4578182fd5b8335611fdf8161240f565b9250602084013567ffffffffffffffff80821115611ffb578384fd5b61200787838801611ee4565b9350604086013591508082111561201c578283fd5b5061202986828701611ee4565b9150509250925092565b60008060008060808587031215612048578081fd5b84356120538161240f565b9350602085013567ffffffffffffffff8082111561206f578283fd5b61207b88838901611ee4565b94506040870135915080821115612090578283fd5b5061209d87828801611ee4565b925050606085013580151581146120b2578182fd5b939692955090935050565b600080604083850312156120cf578182fd5b82356120da8161240f565b915060208301356120ea8161240f565b809150509250929050565b60008060408385031215612107578182fd5b82356121128161240f565b946020939093013593505050565b600060208284031215612131578081fd5b5035919050565b600060208284031215612149578081fd5b5051919050565b6000815180845260208085019450808401835b8381101561217f57815187529582019590820190600101612163565b509495945050505050565b60006040825261219d6040830185612150565b828103602084015261096d8185612150565b6000606082526121c26060830186612150565b82810360208401526121d48186612150565b9150508215156040830152949350505050565b60006020825282516080602084015261220360a0840182612150565b90506020840151601f198483030160408501526122208282612150565b915050604084015115156060840152606084015160808401528091505092915050565b60008219821115612256576122566123e3565b500190565b60008261227657634e487b7160e01b81526012600452602481fd5b500490565b80825b600180861161228d57506122b8565b81870482111561229f5761229f6123e3565b808616156122ac57918102915b9490941c93800261227e565b94509492505050565b6000611f9d60001960ff8516846000826122dd57506001611f9d565b816122ea57506000611f9d565b8160018114612300576002811461230a57612337565b6001915050611f9d565b60ff84111561231b5761231b6123e3565b6001841b915084821115612331576123316123e3565b50611f9d565b5060208310610133831016604e8410600b841016171561236a575081810a83811115612365576123656123e3565b611f9d565b612377848484600161227b565b808604821115612389576123896123e3565b02949350505050565b60008160001904831182151516156123ac576123ac6123e3565b500290565b6000828210156123c3576123c36123e3565b500390565b60006000198214156123dc576123dc6123e3565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146119f157600080fdfea264697066735822122052b466d64eb34550e9efe92c2e8c0cde42898ef230e41845005cbadd1b631fbb64736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 539,
        "contract": "src/solc_0.8/defi/rules/ContributionRules.sol:ContributionRules",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 39978,
        "contract": "src/solc_0.8/defi/rules/ContributionRules.sol:ContributionRules",
        "label": "multiplierLimitERC721",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 39981,
        "contract": "src/solc_0.8/defi/rules/ContributionRules.sol:ContributionRules",
        "label": "multiplierLimitERC1155",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 40013,
        "contract": "src/solc_0.8/defi/rules/ContributionRules.sol:ContributionRules",
        "label": "_listERC721",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_contract(IERC721)4247,t_struct(MultiplierRule)40007_storage)"
      },
      {
        "astId": 40019,
        "contract": "src/solc_0.8/defi/rules/ContributionRules.sol:ContributionRules",
        "label": "_listERC1155",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_contract(IERC1155)1986,t_struct(MultiplierRule)40007_storage)"
      },
      {
        "astId": 40023,
        "contract": "src/solc_0.8/defi/rules/ContributionRules.sol:ContributionRules",
        "label": "_listERC721Index",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_contract(IERC721)4247)dyn_storage"
      },
      {
        "astId": 40027,
        "contract": "src/solc_0.8/defi/rules/ContributionRules.sol:ContributionRules",
        "label": "_listERC1155Index",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_contract(IERC1155)1986)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IERC1155)1986)dyn_storage": {
        "base": "t_contract(IERC1155)1986",
        "encoding": "dynamic_array",
        "label": "contract IERC1155[]",
        "numberOfBytes": "32"
      },
      "t_array(t_contract(IERC721)4247)dyn_storage": {
        "base": "t_contract(IERC721)4247",
        "encoding": "dynamic_array",
        "label": "contract IERC721[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC1155)1986": {
        "encoding": "inplace",
        "label": "contract IERC1155",
        "numberOfBytes": "20"
      },
      "t_contract(IERC721)4247": {
        "encoding": "inplace",
        "label": "contract IERC721",
        "numberOfBytes": "20"
      },
      "t_mapping(t_contract(IERC1155)1986,t_struct(MultiplierRule)40007_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IERC1155)1986",
        "label": "mapping(contract IERC1155 => struct ContributionRules.MultiplierRule)",
        "numberOfBytes": "32",
        "value": "t_struct(MultiplierRule)40007_storage"
      },
      "t_mapping(t_contract(IERC721)4247,t_struct(MultiplierRule)40007_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IERC721)4247",
        "label": "mapping(contract IERC721 => struct ContributionRules.MultiplierRule)",
        "numberOfBytes": "32",
        "value": "t_struct(MultiplierRule)40007_storage"
      },
      "t_struct(MultiplierRule)40007_storage": {
        "encoding": "inplace",
        "label": "struct ContributionRules.MultiplierRule",
        "members": [
          {
            "astId": 39999,
            "contract": "src/solc_0.8/defi/rules/ContributionRules.sol:ContributionRules",
            "label": "ids",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 40002,
            "contract": "src/solc_0.8/defi/rules/ContributionRules.sol:ContributionRules",
            "label": "multipliers",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 40004,
            "contract": "src/solc_0.8/defi/rules/ContributionRules.sol:ContributionRules",
            "label": "balanceOf",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 40006,
            "contract": "src/solc_0.8/defi/rules/ContributionRules.sol:ContributionRules",
            "label": "index",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}