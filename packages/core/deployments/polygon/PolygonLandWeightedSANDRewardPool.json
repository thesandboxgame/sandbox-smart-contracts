{
  "address": "0x4AB071C42C28c4858C4BAc171F06b13586b20F30",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "stakeToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC721",
          "name": "multiplierNFToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rewardDuration",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "multiplier",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "contribution",
          "type": "uint256"
        }
      ],
      "name": "MultiplierComputed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newNFTMultiplierToken",
          "type": "address"
        }
      ],
      "name": "SetNFTMultiplierToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newRewardToken",
          "type": "address"
        }
      ],
      "name": "SetRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newStakeLPToken",
          "type": "address"
        }
      ],
      "name": "SetStakeLPToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountStaked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numLands",
          "type": "uint256"
        }
      ],
      "name": "computeContribution",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "computeMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "contributionOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "duration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTimeRewardApplicable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "multiplierOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "notifyRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "periodFinish",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardDistribution",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerTokenStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardDistribution",
          "type": "address"
        }
      ],
      "name": "setRewardDistribution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalContributions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRewardPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4f4ccfd60255245fa25d534efddd509f2567328d20ac179b50579e9038cf9a52",
  "receipt": {
    "to": null,
    "from": "0x7074BB056C53ACC0b6091dd3FAe591aa3A4acC88",
    "contractAddress": "0x4AB071C42C28c4858C4BAc171F06b13586b20F30",
    "transactionIndex": 26,
    "gasUsed": "1696971",
    "logsBloom": "0x0000000000000000000000000000000000000000000000000080000040000000000000000000000000000000000000000000a000000000000000000000100000000008008000000000000000000000800001000000000000000100000000000020000000020000000000000000000800000000000000000080000000000000400000000000000000000000000000000000000000000000000000000000000040200000000000000000000000000000000000000000000000000000000000004000000000000000000001000400000000000000000000000000100000000020000000000000000000000000000000000000000800000000000000000000100000",
    "blockHash": "0x6022b9e1daf00a462217732be100dc7b0299e97258f938cecd3e635177b194e7",
    "transactionHash": "0x4f4ccfd60255245fa25d534efddd509f2567328d20ac179b50579e9038cf9a52",
    "logs": [
      {
        "transactionIndex": 26,
        "blockNumber": 22522053,
        "transactionHash": "0x4f4ccfd60255245fa25d534efddd509f2567328d20ac179b50579e9038cf9a52",
        "address": "0x4AB071C42C28c4858C4BAc171F06b13586b20F30",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007074bb056c53acc0b6091dd3fae591aa3a4acc88"
        ],
        "data": "0x",
        "logIndex": 163,
        "blockHash": "0x6022b9e1daf00a462217732be100dc7b0299e97258f938cecd3e635177b194e7"
      },
      {
        "transactionIndex": 26,
        "blockNumber": 22522053,
        "transactionHash": "0x4f4ccfd60255245fa25d534efddd509f2567328d20ac179b50579e9038cf9a52",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000007074bb056c53acc0b6091dd3fae591aa3a4acc88",
          "0x0000000000000000000000004f856f79f54592a48c8a1a1fafa1b0a3ac053f99"
        ],
        "data": "0x000000000000000000000000000000000000000000000000010f4c604236160000000000000000000000000000000000000000000000000561b4dc3cdd1560000000000000000000000000000000000000000000000044e2617383d7fec8d2e100000000000000000000000000000000000000000000000560a58fdc9adf4a000000000000000000000000000000000000000000000044e26282d03840fee8e1",
        "logIndex": 164,
        "blockHash": "0x6022b9e1daf00a462217732be100dc7b0299e97258f938cecd3e635177b194e7"
      }
    ],
    "blockNumber": 22522053,
    "cumulativeGasUsed": "6526008",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x369582d2010b6ed950b571f4101e3bb9b554876f",
    "0xBbba073C31bF03b8ACf7c28EF0738DeCF3695683",
    "0x4ebcFb9F8b4df38ce149C655541D591aFb6a03BD",
    2419200
  ],
  "solcInputHash": "3693816c7d194b00a026fe67276c2025",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC721\",\"name\":\"multiplierNFToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contribution\",\"type\":\"uint256\"}],\"name\":\"MultiplierComputed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newNFTMultiplierToken\",\"type\":\"address\"}],\"name\":\"SetNFTMultiplierToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRewardToken\",\"type\":\"address\"}],\"name\":\"SetRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newStakeLPToken\",\"type\":\"address\"}],\"name\":\"SetStakeLPToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numLands\",\"type\":\"uint256\"}],\"name\":\"computeContribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"computeMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"contributionOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"multiplierOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDistribution\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardDistribution\",\"type\":\"address\"}],\"name\":\"setRewardDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalContributions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"notifyRewardAmount(uint256)\":{\"params\":{\"reward\":\"number of token to be distributed over the duration\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Reward Pool based on unipool contract : https://github.com/Synthetixio/Unipool/blob/master/contracts/Unipool.sol\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/solc_0.8/polygon/LiquidityMining/PolygonLandWeightedSANDRewardPool.sol\":\"PolygonLandWeightedSANDRewardPool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-0.8/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1278c76b840063ff5e14a2d7c5707812c1eabc2342ed040bf862c2d7552102fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0xa1477864def7febd9826918e50482a1ee7068b337b03804a7e0e98c674ac57c2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2526b7c6a366fc211bbc176078ab02b83833e7682abcc5b3bed9d700b34e2a3e\",\"license\":\"MIT\"},\"src/solc_0.8/common/Libraries/SafeMathWithRequire.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-0.8/utils/math/SafeMath.sol\\\";\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that revert\\n */\\nlibrary SafeMathWithRequire {\\n    using SafeMath for uint256;\\n\\n    uint256 private constant DECIMALS_18 = 1000000000000000000;\\n    uint256 private constant DECIMALS_12 = 1000000000000;\\n    uint256 private constant DECIMALS_9 = 1000000000;\\n    uint256 private constant DECIMALS_6 = 1000000;\\n\\n    function sqrt6(uint256 a) internal pure returns (uint256 c) {\\n        a = a.mul(DECIMALS_12);\\n        uint256 tmp = a.add(1) / 2;\\n        c = a;\\n        // tmp cannot be zero unless a = 0 which skip the loop\\n        while (tmp < c) {\\n            c = tmp;\\n            tmp = ((a / tmp) + tmp) / 2;\\n        }\\n    }\\n\\n    function sqrt3(uint256 a) internal pure returns (uint256 c) {\\n        a = a.mul(DECIMALS_6);\\n        uint256 tmp = a.add(1) / 2;\\n        c = a;\\n        // tmp cannot be zero unless a = 0 which skip the loop\\n        while (tmp < c) {\\n            c = tmp;\\n            tmp = ((a / tmp) + tmp) / 2;\\n        }\\n    }\\n\\n    function cbrt6(uint256 a) internal pure returns (uint256 c) {\\n        a = a.mul(DECIMALS_18);\\n        uint256 tmp = a.add(2) / 3;\\n        c = a;\\n        // tmp cannot be zero unless a = 0 which skip the loop\\n        while (tmp < c) {\\n            c = tmp;\\n            uint256 tmpSquare = tmp**2;\\n            require(tmpSquare > tmp, \\\"overflow\\\");\\n            tmp = ((a / tmpSquare) + (tmp * 2)) / 3;\\n        }\\n        return c;\\n    }\\n\\n    function cbrt3(uint256 a) internal pure returns (uint256 c) {\\n        a = a.mul(DECIMALS_9);\\n        uint256 tmp = a.add(2) / 3;\\n        c = a;\\n        // tmp cannot be zero unless a = 0 which skip the loop\\n        while (tmp < c) {\\n            c = tmp;\\n            uint256 tmpSquare = tmp**2;\\n            require(tmpSquare > tmp, \\\"overflow\\\");\\n            tmp = ((a / tmpSquare) + (tmp * 2)) / 3;\\n        }\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xf84c167fc04b9aa4ae5699388f47eda3b084c493d1f398bf5e2d3b1a09662813\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC165.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\n/**\\n * @title ERC165\\n * @dev https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 {\\n    /**\\n     * @notice Query if a contract implements interface `interfaceId`\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @dev Interface identification is specified in ERC-165. This function\\n     * uses less than 30,000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6e8f1480b9e8885a477435d3e9be9c4ce687ae1ad25c4f68aad279721b28a754\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC721.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\nimport \\\"./IERC165.sol\\\";\\nimport \\\"./IERC721Events.sol\\\";\\n\\n/**\\n * @title ERC721 Non-Fungible Token Standard basic interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\n/*interface*/\\ninterface IERC721 is IERC165, IERC721Events {\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    //   function exists(uint256 tokenId) external view returns (bool exists);\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xbafb9481d175a6b7b70c79ca93ded658524f2951bcb76541664e12c2e30d8415\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC721Events.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\n/**\\n * @title ERC721 Non-Fungible Token Standard basic interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Events {\\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\\n    // Duplicate event, ERC1155 ApprovalForAll\\n    // event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\n}\\n\",\"keccak256\":\"0xda46057f4e00c1d7f56c13b840958a94ac339218e74c680f83a763e3ceccdc5f\",\"license\":\"MIT\"},\"src/solc_0.8/polygon/LiquidityMining/IRewardDistributionRecipient.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-0.8/access/Ownable.sol\\\";\\n\\nabstract contract IRewardDistributionRecipient is Ownable {\\n    address public rewardDistribution;\\n\\n    function notifyRewardAmount(uint256 reward) external virtual;\\n\\n    modifier onlyRewardDistribution() {\\n        require(_msgSender() == rewardDistribution, \\\"Caller is not reward distribution\\\");\\n        _;\\n    }\\n\\n    modifier onlyRewardDistributionOrAccount(address account) {\\n        require(\\n            _msgSender() == rewardDistribution || _msgSender() == account,\\n            \\\"Caller is not reward distribution or account\\\"\\n        );\\n        _;\\n    }\\n\\n    function setRewardDistribution(address _rewardDistribution) external onlyOwner {\\n        rewardDistribution = _rewardDistribution;\\n    }\\n}\\n\",\"keccak256\":\"0x1effe4e467e08c20c8a2ee52b6a4c03965dee2cdd5065a3afa0cffd37d5a2d71\",\"license\":\"MIT\"},\"src/solc_0.8/polygon/LiquidityMining/PolygonLandWeightedSANDRewardPool.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-0.8/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../../common/Libraries/SafeMathWithRequire.sol\\\";\\nimport \\\"./IRewardDistributionRecipient.sol\\\";\\nimport \\\"../../common/interfaces/IERC721.sol\\\";\\n\\ncontract PolygonLPTokenWrapper {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    uint256 internal constant DECIMALS_18 = 1000000000000000000;\\n\\n    IERC20 internal _stakeToken;\\n\\n    uint256 private _totalSupply;\\n    mapping(address => uint256) private _balances;\\n\\n    constructor(IERC20 stakeToken) {\\n        _stakeToken = stakeToken;\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function stake(uint256 amount) public virtual {\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\\n        _stakeToken.safeTransferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    function withdraw(uint256 amount) public virtual {\\n        _totalSupply = _totalSupply.sub(amount);\\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\\n        _stakeToken.safeTransfer(msg.sender, amount);\\n    }\\n}\\n\\n///@notice Reward Pool based on unipool contract : https://github.com/Synthetixio/Unipool/blob/master/contracts/Unipool.sol\\n//with the addition of NFT multiplier reward\\ncontract PolygonLandWeightedSANDRewardPool is PolygonLPTokenWrapper, IRewardDistributionRecipient, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeMathWithRequire for uint256;\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n\\n    event RewardAdded(uint256 reward);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward);\\n    event MultiplierComputed(address indexed user, uint256 multiplier, uint256 contribution);\\n\\n    uint256 public immutable duration;\\n\\n    uint256 public periodFinish = 0;\\n    uint256 public rewardRate = 0;\\n    uint256 public lastUpdateTime;\\n    uint256 public rewardPerTokenStored;\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n    mapping(address => uint256) public rewards;\\n\\n    uint256 internal constant DECIMALS_9 = 1000000000;\\n    uint256 internal constant MIDPOINT_9 = 500000000;\\n    uint256 internal constant NFT_FACTOR_6 = 10000;\\n    uint256 internal constant NFT_CONSTANT_3 = 9000;\\n    uint256 internal constant ROOT3_FACTOR = 697;\\n\\n    IERC20 internal _rewardToken;\\n    IERC721 internal _multiplierNFToken;\\n\\n    uint256 internal _totalContributions;\\n    mapping(address => uint256) internal _multipliers;\\n    mapping(address => uint256) internal _contributions;\\n\\n    constructor(\\n        IERC20 stakeToken,\\n        IERC20 rewardToken,\\n        IERC721 multiplierNFToken,\\n        uint256 rewardDuration\\n    ) PolygonLPTokenWrapper(stakeToken) {\\n        _rewardToken = rewardToken;\\n        _multiplierNFToken = multiplierNFToken;\\n        duration = rewardDuration;\\n    }\\n\\n    function totalContributions() public view returns (uint256) {\\n        return _totalContributions;\\n    }\\n\\n    function contributionOf(address account) public view returns (uint256) {\\n        return _contributions[account];\\n    }\\n\\n    function multiplierOf(address account) public view returns (uint256) {\\n        return _multipliers[account];\\n    }\\n\\n    modifier updateReward(address account) {\\n        rewardPerTokenStored = rewardPerToken();\\n\\n        if (block.timestamp >= periodFinish || _totalContributions != 0) {\\n            // ensure reward past the first staker do not get lost\\n            lastUpdateTime = lastTimeRewardApplicable();\\n        }\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return Math.min(block.timestamp, periodFinish);\\n    }\\n\\n    function rewardPerToken() public view returns (uint256) {\\n        if (totalContributions() == 0) {\\n            return rewardPerTokenStored;\\n        }\\n        return\\n            rewardPerTokenStored.add(\\n                lastTimeRewardApplicable().sub(lastUpdateTime).mul(rewardRate).mul(1e24).div(totalContributions())\\n            );\\n    }\\n\\n    function earned(address account) public view returns (uint256) {\\n        return\\n            contributionOf(account).mul(rewardPerToken().sub(userRewardPerTokenPaid[account])).div(1e24).add(\\n                rewards[account]\\n            );\\n    }\\n\\n    function computeContribution(uint256 amountStaked, uint256 numLands) public pure returns (uint256) {\\n        if (numLands == 0) {\\n            return amountStaked;\\n        }\\n        uint256 nftContrib = NFT_FACTOR_6.mul(NFT_CONSTANT_3.add(numLands.sub(1).mul(ROOT3_FACTOR).add(1).cbrt3()));\\n        if (nftContrib > MIDPOINT_9) {\\n            nftContrib = MIDPOINT_9.add(nftContrib.sub(MIDPOINT_9).div(10));\\n        }\\n        return amountStaked.add(amountStaked.mul(nftContrib).div(DECIMALS_9));\\n    }\\n\\n    function updateContribution(address account) internal {\\n        _totalContributions = _totalContributions.sub(contributionOf(account));\\n        _multipliers[account] = _multiplierNFToken.balanceOf(account);\\n\\n        uint256 contribution = computeContribution(balanceOf(account), multiplierOf(account));\\n\\n        _totalContributions = _totalContributions.add(contribution);\\n        _contributions[account] = contribution;\\n    }\\n\\n    function computeMultiplier(address account) public onlyRewardDistributionOrAccount(account) updateReward(account) {\\n        updateContribution(account);\\n\\n        emit MultiplierComputed(account, multiplierOf(account), contributionOf(account));\\n    }\\n\\n    function stake(uint256 amount) public override nonReentrant updateReward(msg.sender) {\\n        require(amount > 0, \\\"Cannot stake 0\\\");\\n\\n        super.stake(amount);\\n\\n        updateContribution(msg.sender);\\n\\n        emit Staked(msg.sender, amount);\\n    }\\n\\n    function withdraw(uint256 amount) public override nonReentrant updateReward(msg.sender) {\\n        require(amount > 0, \\\"Cannot withdraw 0\\\");\\n\\n        super.withdraw(amount);\\n\\n        updateContribution(msg.sender);\\n\\n        emit Withdrawn(msg.sender, amount);\\n    }\\n\\n    function exit() external {\\n        withdraw(balanceOf(msg.sender));\\n        getReward();\\n    }\\n\\n    function getReward() public nonReentrant updateReward(msg.sender) {\\n        uint256 reward = rewards[msg.sender];\\n        if (reward > 0) {\\n            rewards[msg.sender] = 0;\\n            _rewardToken.safeTransfer(msg.sender, reward);\\n            emit RewardPaid(msg.sender, reward);\\n        }\\n    }\\n\\n    ///@notice to be called after the amount of reward tokens (specified by the reward parameter) has been sent to the contract\\n    // Note that the reward should be divisible by the duration to avoid reward token lost\\n    ///@param reward number of token to be distributed over the duration\\n    function notifyRewardAmount(uint256 reward) external override onlyRewardDistribution updateReward(address(0)) {\\n        if (block.timestamp >= periodFinish) {\\n            rewardRate = reward.div(duration);\\n        } else {\\n            uint256 remaining = periodFinish.sub(block.timestamp);\\n            uint256 leftover = remaining.mul(rewardRate);\\n            rewardRate = reward.add(leftover).div(duration);\\n        }\\n        lastUpdateTime = block.timestamp;\\n        periodFinish = block.timestamp.add(duration);\\n        emit RewardAdded(reward);\\n    }\\n\\n    // Add Setter functions for every external contract\\n\\n    function SetRewardToken(address newRewardToken) external onlyOwner {\\n        require(newRewardToken.isContract(), \\\"Bad RewardToken address\\\");\\n\\n        _rewardToken = IERC20(newRewardToken);\\n    }\\n\\n    function SetStakeLPToken(address newStakeLPToken) external onlyOwner {\\n        require(newStakeLPToken.isContract(), \\\"Bad StakeToken address\\\");\\n\\n        _stakeToken = IERC20(newStakeLPToken);\\n    }\\n\\n    function SetNFTMultiplierToken(address newNFTMultiplierToken) external onlyOwner {\\n        require(newNFTMultiplierToken.isContract(), \\\"Bad NFTMultiplierToken address\\\");\\n\\n        _multiplierNFToken = IERC721(newNFTMultiplierToken);\\n    }\\n}\\n\",\"keccak256\":\"0x8d54e0e013d8b82bf1298fb122b58e9c9a811fc5785a17f2be77832a88d88dd2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052600060065560006007553480156200001b57600080fd5b5060405162001d2538038062001d258339810160408190526200003e91620000ee565b600080546001600160a01b0319166001600160a01b038616178155620000613390565b600380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001600555600c80546001600160a01b039485166001600160a01b031991821617909155600d8054939094169216919091179091556080525062000160565b6000806000806080858703121562000104578384fd5b8451620001118162000147565b6020860151909450620001248162000147565b6040860151909350620001378162000147565b6060959095015193969295505050565b6001600160a01b03811681146200015d57600080fd5b50565b608051611b94620001916000396000818161025101528181610947015281816109a301526109de0152611b946000f3fe608060405234801561001057600080fd5b50600436106101d95760003560e01c8063715018a611610104578063c8f33c91116100a2578063df136d6511610071578063df136d6514610411578063e9fad8ee1461041a578063ebe2b12b14610422578063f2fde38b1461042b576101d9565b8063c8f33c91146103c4578063cd3daf9d146103cd578063d7805ece146103d5578063de4ef212146103fe576101d9565b80638b876347116100de5780638b876347146103575780638da5cb5b146103775780638e4a524814610388578063a694fc3a146103b1576101d9565b8063715018a61461033e5780637b0a47ee1461034657806380faa57d1461034f576101d9565b80631b510c141161017c5780633d18b9121161014b5780633d18b912146102e757806362dfa108146102ef5780636f8c206c1461030257806370a0823114610315576101d9565b80631b510c14146102a65780632e1a7d4d146102b957806337c08923146102cc5780633c6b16ab146102d4576101d9565b80630d68b761116101b85780630d68b761146102395780630fb5a6b41461024c578063101114cf1461027357806318160ddd1461029e576101d9565b80628cc262146101de5780630700037d146102045780630756844114610224575b600080fd5b6101f16101ec36600461187e565b61043e565b6040519081526020015b60405180910390f35b6101f161021236600461187e565b600b6020526000908152604090205481565b61023761023236600461187e565b6104bf565b005b61023761024736600461187e565b6105a4565b6101f17f000000000000000000000000000000000000000000000000000000000000000081565b600454610286906001600160a01b031681565b6040516001600160a01b0390911681526020016101fb565b6101f161062d565b6101f16102b43660046118f5565b610634565b6102376102c73660046118c5565b6106cf565b600e546101f1565b6102376102e23660046118c5565b61083b565b610237610a3c565b6102376102fd36600461187e565b610b81565b61023761031036600461187e565b610cfd565b6101f161032336600461187e565b6001600160a01b031660009081526002602052604090205490565b610237610ddd565b6101f160075481565b6101f1610e8e565b6101f161036536600461187e565b600a6020526000908152604090205481565b6003546001600160a01b0316610286565b6101f161039636600461187e565b6001600160a01b03166000908152600f602052604090205490565b6102376103bf3660046118c5565b610ea1565b6101f160085481565b6101f1611000565b6101f16103e336600461187e565b6001600160a01b031660009081526010602052604090205490565b61023761040c36600461187e565b611052565b6101f160095481565b610237611132565b6101f160065481565b61023761043936600461187e565b611155565b6001600160a01b0381166000908152600b6020908152604080832054600a9092528220546104b991906104b39069d3c21bcecceda1000000906104ad9061048d90610487611000565b90611294565b6001600160a01b0388166000908152601060205260409020545b906112a7565b906112b3565b906112bf565b92915050565b6003546001600160a01b0316331461051e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b0381163b6105755760405162461bcd60e51b815260206004820152601660248201527f426164205374616b65546f6b656e2061646472657373000000000000000000006044820152606401610515565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6003546001600160a01b031633146105fe5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610515565b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001545b90565b6000816106425750816104b9565b600061067961067061066761066260016104b36102b96104a78a84611294565b6112cb565b612328906112bf565b612710906112a7565b9050631dcd65008111156106ab576106a861069d600a6104ad84631dcd6500611294565b631dcd6500906112bf565b90505b6106c76106c0633b9aca006104ad87856112a7565b85906112bf565b949350505050565b600260055414156107225760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610515565b600260055533610730611000565b600955600654421015806107455750600e5415155b1561075657610752610e8e565b6008555b6001600160a01b0381161561079a5761076e8161043e565b6001600160a01b0382166000908152600b6020908152604080832093909355600954600a909152919020555b600082116107ea5760405162461bcd60e51b815260206004820152601160248201527f43616e6e6f7420776974686472617720300000000000000000000000000000006044820152606401610515565b6107f38261139e565b6107fc336113f6565b60405182815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5906020015b60405180910390a250506001600555565b6004546001600160a01b0316336001600160a01b0316146108c45760405162461bcd60e51b815260206004820152602160248201527f43616c6c6572206973206e6f742072657761726420646973747269627574696f60448201527f6e000000000000000000000000000000000000000000000000000000000000006064820152608401610515565b60006108ce611000565b600955600654421015806108e35750600e5415155b156108f4576108f0610e8e565b6008555b6001600160a01b038116156109385761090c8161043e565b6001600160a01b0382166000908152600b6020908152604080832093909355600954600a909152919020555b60065442106109735761096b827f00000000000000000000000000000000000000000000000000000000000000006112b3565b6007556109d2565b6006546000906109839042611294565b9050600061099c600754836112a790919063ffffffff16565b90506109cc7f00000000000000000000000000000000000000000000000000000000000000006104ad86846112bf565b60075550505b426008819055610a02907f00000000000000000000000000000000000000000000000000000000000000006112bf565b6006556040518281527fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9060200160405180910390a15050565b60026005541415610a8f5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610515565b600260055533610a9d611000565b60095560065442101580610ab25750600e5415155b15610ac357610abf610e8e565b6008555b6001600160a01b03811615610b0757610adb8161043e565b6001600160a01b0382166000908152600b6020908152604080832093909355600954600a909152919020555b336000908152600b60205260409020548015610b7857336000818152600b6020526040812055600c54610b46916001600160a01b03909116908361151d565b60405181815233907fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e04869060200161082a565b50506001600555565b60045481906001600160a01b0316336001600160a01b03161480610bad5750336001600160a01b038216145b610c1f5760405162461bcd60e51b815260206004820152602c60248201527f43616c6c6572206973206e6f742072657761726420646973747269627574696f60448201527f6e206f72206163636f756e7400000000000000000000000000000000000000006064820152608401610515565b81610c28611000565b60095560065442101580610c3d5750600e5415155b15610c4e57610c4a610e8e565b6008555b6001600160a01b03811615610c9257610c668161043e565b6001600160a01b0382166000908152600b6020908152604080832093909355600954600a909152919020555b610c9b836113f6565b6001600160a01b0383166000818152600f602090815260408083205460108352928190205481519384529183019190915280517fe483f88a85578f0fc325c6aabb8f618d2d0f712d8e98493e8cc1fba91d61b7789281900390910190a2505050565b6003546001600160a01b03163314610d575760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610515565b6001600160a01b0381163b610dae5760405162461bcd60e51b815260206004820152601760248201527f42616420526577617264546f6b656e20616464726573730000000000000000006044820152606401610515565b600c805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6003546001600160a01b03163314610e375760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610515565b6003546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36003805473ffffffffffffffffffffffffffffffffffffffff19169055565b6000610e9c426006546115cb565b905090565b60026005541415610ef45760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610515565b600260055533610f02611000565b60095560065442101580610f175750600e5415155b15610f2857610f24610e8e565b6008555b6001600160a01b03811615610f6c57610f408161043e565b6001600160a01b0382166000908152600b6020908152604080832093909355600954600a909152919020555b60008211610fbc5760405162461bcd60e51b815260206004820152600e60248201527f43616e6e6f74207374616b6520300000000000000000000000000000000000006044820152606401610515565b610fc5826115e1565b610fce336113f6565b60405182815233907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d9060200161082a565b600061100b600e5490565b6110185750600954610631565b610e9c611049611027600e5490565b6104ad69d3c21bcecceda10000006104a76007546104a7600854610487610e8e565b600954906112bf565b6003546001600160a01b031633146110ac5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610515565b6001600160a01b0381163b6111035760405162461bcd60e51b815260206004820152601e60248201527f426164204e46544d756c7469706c696572546f6b656e206164647265737300006044820152606401610515565b600d805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b3360009081526002602052604090205461114b906102c7565b611153610a3c565b565b6003546001600160a01b031633146111af5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610515565b6001600160a01b03811661122b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610515565b6003546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60006112a08284611aec565b9392505050565b60006112a08284611acd565b60006112a0828461197d565b60006112a08284611965565b60006112db82633b9aca006112a7565b9150600060036112ec8460026112bf565b6112f6919061197d565b90508291505b818110156113985790508060006113146002836119fc565b90508181116113655760405162461bcd60e51b815260206004820152600860248201527f6f766572666c6f770000000000000000000000000000000000000000000000006044820152606401610515565b6003611372836002611acd565b61137c838761197d565b6113869190611965565b611390919061197d565b9150506112fc565b50919050565b6001546113ab9082611294565b600155336000908152600260205260409020546113c89082611294565b3360008181526002602052604081209290925590546113f3916001600160a01b03909116908361151d565b50565b611421611418826001600160a01b031660009081526010602052604090205490565b600e5490611294565b600e55600d546040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152909116906370a082319060240160206040518083038186803b15801561148257600080fd5b505afa158015611496573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ba91906118dd565b6001600160a01b0382166000908152600f602081815260408084208590556002825283205491905290916114ee91906102b4565b600e549091506114fe90826112bf565b600e556001600160a01b03909116600090815260106020526040902055565b6040516001600160a01b0383166024820152604481018290526115c69084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611637565b505050565b60008183106115da57816112a0565b5090919050565b6001546115ee90826112bf565b6001553360009081526002602052604090205461160b90826112bf565b3360008181526002602052604081209290925590546113f3916001600160a01b0390911690308461171c565b600061168c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166117739092919063ffffffff16565b8051909150156115c657808060200190518101906116aa91906118a5565b6115c65760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610515565b6040516001600160a01b038085166024830152831660448201526064810182905261176d9085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401611562565b50505050565b60606106c7848460008585843b6117cc5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610515565b600080866001600160a01b031685876040516117e89190611916565b60006040518083038185875af1925050503d8060008114611825576040519150601f19603f3d011682016040523d82523d6000602084013e61182a565b606091505b509150915061183a828286611845565b979650505050505050565b606083156118545750816112a0565b8251156118645782518084602001fd5b8160405162461bcd60e51b81526004016105159190611932565b60006020828403121561188f578081fd5b81356001600160a01b03811681146112a0578182fd5b6000602082840312156118b6578081fd5b815180151581146112a0578182fd5b6000602082840312156118d6578081fd5b5035919050565b6000602082840312156118ee578081fd5b5051919050565b60008060408385031215611907578081fd5b50508035926020909101359150565b60008251611928818460208701611b03565b9190910192915050565b6000602082528251806020840152611951816040850160208701611b03565b601f01601f19169190910160400192915050565b6000821982111561197857611978611b2f565b500190565b6000826119b1577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b80825b60018086116119c857506119f3565b8187048211156119da576119da611b2f565b808616156119e757918102915b9490941c9380026119b9565b94509492505050565b60006112a060001960ff851684600082611a18575060016112a0565b81611a25575060006112a0565b8160018114611a3b5760028114611a4557611a72565b60019150506112a0565b60ff841115611a5657611a56611b2f565b6001841b915084821115611a6c57611a6c611b2f565b506112a0565b5060208310610133831016604e8410600b8410161715611aa5575081810a83811115611aa057611aa0611b2f565b6112a0565b611ab284848460016119b6565b808604821115611ac457611ac4611b2f565b02949350505050565b6000816000190483118215151615611ae757611ae7611b2f565b500290565b600082821015611afe57611afe611b2f565b500390565b60005b83811015611b1e578181015183820152602001611b06565b8381111561176d5750506000910152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea26469706673582212206c97a442352b91fe8cff8034d6847e2c71391cbd1bed18374c5c0c19ee2f2e3164736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101d95760003560e01c8063715018a611610104578063c8f33c91116100a2578063df136d6511610071578063df136d6514610411578063e9fad8ee1461041a578063ebe2b12b14610422578063f2fde38b1461042b576101d9565b8063c8f33c91146103c4578063cd3daf9d146103cd578063d7805ece146103d5578063de4ef212146103fe576101d9565b80638b876347116100de5780638b876347146103575780638da5cb5b146103775780638e4a524814610388578063a694fc3a146103b1576101d9565b8063715018a61461033e5780637b0a47ee1461034657806380faa57d1461034f576101d9565b80631b510c141161017c5780633d18b9121161014b5780633d18b912146102e757806362dfa108146102ef5780636f8c206c1461030257806370a0823114610315576101d9565b80631b510c14146102a65780632e1a7d4d146102b957806337c08923146102cc5780633c6b16ab146102d4576101d9565b80630d68b761116101b85780630d68b761146102395780630fb5a6b41461024c578063101114cf1461027357806318160ddd1461029e576101d9565b80628cc262146101de5780630700037d146102045780630756844114610224575b600080fd5b6101f16101ec36600461187e565b61043e565b6040519081526020015b60405180910390f35b6101f161021236600461187e565b600b6020526000908152604090205481565b61023761023236600461187e565b6104bf565b005b61023761024736600461187e565b6105a4565b6101f17f000000000000000000000000000000000000000000000000000000000000000081565b600454610286906001600160a01b031681565b6040516001600160a01b0390911681526020016101fb565b6101f161062d565b6101f16102b43660046118f5565b610634565b6102376102c73660046118c5565b6106cf565b600e546101f1565b6102376102e23660046118c5565b61083b565b610237610a3c565b6102376102fd36600461187e565b610b81565b61023761031036600461187e565b610cfd565b6101f161032336600461187e565b6001600160a01b031660009081526002602052604090205490565b610237610ddd565b6101f160075481565b6101f1610e8e565b6101f161036536600461187e565b600a6020526000908152604090205481565b6003546001600160a01b0316610286565b6101f161039636600461187e565b6001600160a01b03166000908152600f602052604090205490565b6102376103bf3660046118c5565b610ea1565b6101f160085481565b6101f1611000565b6101f16103e336600461187e565b6001600160a01b031660009081526010602052604090205490565b61023761040c36600461187e565b611052565b6101f160095481565b610237611132565b6101f160065481565b61023761043936600461187e565b611155565b6001600160a01b0381166000908152600b6020908152604080832054600a9092528220546104b991906104b39069d3c21bcecceda1000000906104ad9061048d90610487611000565b90611294565b6001600160a01b0388166000908152601060205260409020545b906112a7565b906112b3565b906112bf565b92915050565b6003546001600160a01b0316331461051e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b0381163b6105755760405162461bcd60e51b815260206004820152601660248201527f426164205374616b65546f6b656e2061646472657373000000000000000000006044820152606401610515565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6003546001600160a01b031633146105fe5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610515565b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001545b90565b6000816106425750816104b9565b600061067961067061066761066260016104b36102b96104a78a84611294565b6112cb565b612328906112bf565b612710906112a7565b9050631dcd65008111156106ab576106a861069d600a6104ad84631dcd6500611294565b631dcd6500906112bf565b90505b6106c76106c0633b9aca006104ad87856112a7565b85906112bf565b949350505050565b600260055414156107225760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610515565b600260055533610730611000565b600955600654421015806107455750600e5415155b1561075657610752610e8e565b6008555b6001600160a01b0381161561079a5761076e8161043e565b6001600160a01b0382166000908152600b6020908152604080832093909355600954600a909152919020555b600082116107ea5760405162461bcd60e51b815260206004820152601160248201527f43616e6e6f7420776974686472617720300000000000000000000000000000006044820152606401610515565b6107f38261139e565b6107fc336113f6565b60405182815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5906020015b60405180910390a250506001600555565b6004546001600160a01b0316336001600160a01b0316146108c45760405162461bcd60e51b815260206004820152602160248201527f43616c6c6572206973206e6f742072657761726420646973747269627574696f60448201527f6e000000000000000000000000000000000000000000000000000000000000006064820152608401610515565b60006108ce611000565b600955600654421015806108e35750600e5415155b156108f4576108f0610e8e565b6008555b6001600160a01b038116156109385761090c8161043e565b6001600160a01b0382166000908152600b6020908152604080832093909355600954600a909152919020555b60065442106109735761096b827f00000000000000000000000000000000000000000000000000000000000000006112b3565b6007556109d2565b6006546000906109839042611294565b9050600061099c600754836112a790919063ffffffff16565b90506109cc7f00000000000000000000000000000000000000000000000000000000000000006104ad86846112bf565b60075550505b426008819055610a02907f00000000000000000000000000000000000000000000000000000000000000006112bf565b6006556040518281527fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9060200160405180910390a15050565b60026005541415610a8f5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610515565b600260055533610a9d611000565b60095560065442101580610ab25750600e5415155b15610ac357610abf610e8e565b6008555b6001600160a01b03811615610b0757610adb8161043e565b6001600160a01b0382166000908152600b6020908152604080832093909355600954600a909152919020555b336000908152600b60205260409020548015610b7857336000818152600b6020526040812055600c54610b46916001600160a01b03909116908361151d565b60405181815233907fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e04869060200161082a565b50506001600555565b60045481906001600160a01b0316336001600160a01b03161480610bad5750336001600160a01b038216145b610c1f5760405162461bcd60e51b815260206004820152602c60248201527f43616c6c6572206973206e6f742072657761726420646973747269627574696f60448201527f6e206f72206163636f756e7400000000000000000000000000000000000000006064820152608401610515565b81610c28611000565b60095560065442101580610c3d5750600e5415155b15610c4e57610c4a610e8e565b6008555b6001600160a01b03811615610c9257610c668161043e565b6001600160a01b0382166000908152600b6020908152604080832093909355600954600a909152919020555b610c9b836113f6565b6001600160a01b0383166000818152600f602090815260408083205460108352928190205481519384529183019190915280517fe483f88a85578f0fc325c6aabb8f618d2d0f712d8e98493e8cc1fba91d61b7789281900390910190a2505050565b6003546001600160a01b03163314610d575760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610515565b6001600160a01b0381163b610dae5760405162461bcd60e51b815260206004820152601760248201527f42616420526577617264546f6b656e20616464726573730000000000000000006044820152606401610515565b600c805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6003546001600160a01b03163314610e375760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610515565b6003546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36003805473ffffffffffffffffffffffffffffffffffffffff19169055565b6000610e9c426006546115cb565b905090565b60026005541415610ef45760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610515565b600260055533610f02611000565b60095560065442101580610f175750600e5415155b15610f2857610f24610e8e565b6008555b6001600160a01b03811615610f6c57610f408161043e565b6001600160a01b0382166000908152600b6020908152604080832093909355600954600a909152919020555b60008211610fbc5760405162461bcd60e51b815260206004820152600e60248201527f43616e6e6f74207374616b6520300000000000000000000000000000000000006044820152606401610515565b610fc5826115e1565b610fce336113f6565b60405182815233907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d9060200161082a565b600061100b600e5490565b6110185750600954610631565b610e9c611049611027600e5490565b6104ad69d3c21bcecceda10000006104a76007546104a7600854610487610e8e565b600954906112bf565b6003546001600160a01b031633146110ac5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610515565b6001600160a01b0381163b6111035760405162461bcd60e51b815260206004820152601e60248201527f426164204e46544d756c7469706c696572546f6b656e206164647265737300006044820152606401610515565b600d805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b3360009081526002602052604090205461114b906102c7565b611153610a3c565b565b6003546001600160a01b031633146111af5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610515565b6001600160a01b03811661122b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610515565b6003546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60006112a08284611aec565b9392505050565b60006112a08284611acd565b60006112a0828461197d565b60006112a08284611965565b60006112db82633b9aca006112a7565b9150600060036112ec8460026112bf565b6112f6919061197d565b90508291505b818110156113985790508060006113146002836119fc565b90508181116113655760405162461bcd60e51b815260206004820152600860248201527f6f766572666c6f770000000000000000000000000000000000000000000000006044820152606401610515565b6003611372836002611acd565b61137c838761197d565b6113869190611965565b611390919061197d565b9150506112fc565b50919050565b6001546113ab9082611294565b600155336000908152600260205260409020546113c89082611294565b3360008181526002602052604081209290925590546113f3916001600160a01b03909116908361151d565b50565b611421611418826001600160a01b031660009081526010602052604090205490565b600e5490611294565b600e55600d546040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152909116906370a082319060240160206040518083038186803b15801561148257600080fd5b505afa158015611496573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ba91906118dd565b6001600160a01b0382166000908152600f602081815260408084208590556002825283205491905290916114ee91906102b4565b600e549091506114fe90826112bf565b600e556001600160a01b03909116600090815260106020526040902055565b6040516001600160a01b0383166024820152604481018290526115c69084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611637565b505050565b60008183106115da57816112a0565b5090919050565b6001546115ee90826112bf565b6001553360009081526002602052604090205461160b90826112bf565b3360008181526002602052604081209290925590546113f3916001600160a01b0390911690308461171c565b600061168c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166117739092919063ffffffff16565b8051909150156115c657808060200190518101906116aa91906118a5565b6115c65760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610515565b6040516001600160a01b038085166024830152831660448201526064810182905261176d9085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401611562565b50505050565b60606106c7848460008585843b6117cc5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610515565b600080866001600160a01b031685876040516117e89190611916565b60006040518083038185875af1925050503d8060008114611825576040519150601f19603f3d011682016040523d82523d6000602084013e61182a565b606091505b509150915061183a828286611845565b979650505050505050565b606083156118545750816112a0565b8251156118645782518084602001fd5b8160405162461bcd60e51b81526004016105159190611932565b60006020828403121561188f578081fd5b81356001600160a01b03811681146112a0578182fd5b6000602082840312156118b6578081fd5b815180151581146112a0578182fd5b6000602082840312156118d6578081fd5b5035919050565b6000602082840312156118ee578081fd5b5051919050565b60008060408385031215611907578081fd5b50508035926020909101359150565b60008251611928818460208701611b03565b9190910192915050565b6000602082528251806020840152611951816040850160208701611b03565b601f01601f19169190910160400192915050565b6000821982111561197857611978611b2f565b500190565b6000826119b1577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b80825b60018086116119c857506119f3565b8187048211156119da576119da611b2f565b808616156119e757918102915b9490941c9380026119b9565b94509492505050565b60006112a060001960ff851684600082611a18575060016112a0565b81611a25575060006112a0565b8160018114611a3b5760028114611a4557611a72565b60019150506112a0565b60ff841115611a5657611a56611b2f565b6001841b915084821115611a6c57611a6c611b2f565b506112a0565b5060208310610133831016604e8410600b8410161715611aa5575081810a83811115611aa057611aa0611b2f565b6112a0565b611ab284848460016119b6565b808604821115611ac457611ac4611b2f565b02949350505050565b6000816000190483118215151615611ae757611ae7611b2f565b500290565b600082821015611afe57611afe611b2f565b500390565b60005b83811015611b1e578181015183820152602001611b06565b8381111561176d5750506000910152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea26469706673582212206c97a442352b91fe8cff8034d6847e2c71391cbd1bed18374c5c0c19ee2f2e3164736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "notifyRewardAmount(uint256)": {
        "params": {
          "reward": "number of token to be distributed over the duration"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Reward Pool based on unipool contract : https://github.com/Synthetixio/Unipool/blob/master/contracts/Unipool.sol",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 22849,
        "contract": "src/solc_0.8/polygon/LiquidityMining/PolygonLandWeightedSANDRewardPool.sol:PolygonLandWeightedSANDRewardPool",
        "label": "_stakeToken",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)424"
      },
      {
        "astId": 22851,
        "contract": "src/solc_0.8/polygon/LiquidityMining/PolygonLandWeightedSANDRewardPool.sol:PolygonLandWeightedSANDRewardPool",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 22855,
        "contract": "src/solc_0.8/polygon/LiquidityMining/PolygonLandWeightedSANDRewardPool.sol:PolygonLandWeightedSANDRewardPool",
        "label": "_balances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7,
        "contract": "src/solc_0.8/polygon/LiquidityMining/PolygonLandWeightedSANDRewardPool.sol:PolygonLandWeightedSANDRewardPool",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 22778,
        "contract": "src/solc_0.8/polygon/LiquidityMining/PolygonLandWeightedSANDRewardPool.sol:PolygonLandWeightedSANDRewardPool",
        "label": "rewardDistribution",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 120,
        "contract": "src/solc_0.8/polygon/LiquidityMining/PolygonLandWeightedSANDRewardPool.sol:PolygonLandWeightedSANDRewardPool",
        "label": "_status",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 23014,
        "contract": "src/solc_0.8/polygon/LiquidityMining/PolygonLandWeightedSANDRewardPool.sol:PolygonLandWeightedSANDRewardPool",
        "label": "periodFinish",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 23017,
        "contract": "src/solc_0.8/polygon/LiquidityMining/PolygonLandWeightedSANDRewardPool.sol:PolygonLandWeightedSANDRewardPool",
        "label": "rewardRate",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 23019,
        "contract": "src/solc_0.8/polygon/LiquidityMining/PolygonLandWeightedSANDRewardPool.sol:PolygonLandWeightedSANDRewardPool",
        "label": "lastUpdateTime",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 23021,
        "contract": "src/solc_0.8/polygon/LiquidityMining/PolygonLandWeightedSANDRewardPool.sol:PolygonLandWeightedSANDRewardPool",
        "label": "rewardPerTokenStored",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 23025,
        "contract": "src/solc_0.8/polygon/LiquidityMining/PolygonLandWeightedSANDRewardPool.sol:PolygonLandWeightedSANDRewardPool",
        "label": "userRewardPerTokenPaid",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 23029,
        "contract": "src/solc_0.8/polygon/LiquidityMining/PolygonLandWeightedSANDRewardPool.sol:PolygonLandWeightedSANDRewardPool",
        "label": "rewards",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 23047,
        "contract": "src/solc_0.8/polygon/LiquidityMining/PolygonLandWeightedSANDRewardPool.sol:PolygonLandWeightedSANDRewardPool",
        "label": "_rewardToken",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IERC20)424"
      },
      {
        "astId": 23050,
        "contract": "src/solc_0.8/polygon/LiquidityMining/PolygonLandWeightedSANDRewardPool.sol:PolygonLandWeightedSANDRewardPool",
        "label": "_multiplierNFToken",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(IERC721)22106"
      },
      {
        "astId": 23052,
        "contract": "src/solc_0.8/polygon/LiquidityMining/PolygonLandWeightedSANDRewardPool.sol:PolygonLandWeightedSANDRewardPool",
        "label": "_totalContributions",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 23056,
        "contract": "src/solc_0.8/polygon/LiquidityMining/PolygonLandWeightedSANDRewardPool.sol:PolygonLandWeightedSANDRewardPool",
        "label": "_multipliers",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 23060,
        "contract": "src/solc_0.8/polygon/LiquidityMining/PolygonLandWeightedSANDRewardPool.sol:PolygonLandWeightedSANDRewardPool",
        "label": "_contributions",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)424": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IERC721)22106": {
        "encoding": "inplace",
        "label": "contract IERC721",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}