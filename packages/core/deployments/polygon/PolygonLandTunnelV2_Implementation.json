{
  "address": "0xaA85fc97F9AdBCbdCf6Aded88491bfc6cf8aB49A",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "MessageSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "size",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "limit",
          "type": "uint32"
        }
      ],
      "name": "SetGasLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxLands",
          "type": "uint256"
        }
      ],
      "name": "SetMaxAllowedLands",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "maxGasLimit",
          "type": "uint32"
        }
      ],
      "name": "SetMaxGasLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newForwarder",
          "type": "address"
        }
      ],
      "name": "TrustedForwarderSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "sizes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "xs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ys",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "batchTransferQuadToL1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "childToken",
      "outputs": [
        {
          "internalType": "contract IPolygonLandV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxChild",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxRootTunnel",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "gasLimits",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fxChild",
          "type": "address"
        },
        {
          "internalType": "contract IPolygonLandV2",
          "name": "_childToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_trustedForwarder",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_maxGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_maxAllowedLands",
          "type": "uint256"
        },
        {
          "internalType": "uint32[5]",
          "name": "limits",
          "type": "uint32[5]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxAllowedLands",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxGasLimitOnL1",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stateId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "rootMessageSender",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "processMessageFromRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fxRootTunnel",
          "type": "address"
        }
      ],
      "name": "setFxRootTunnel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "size",
          "type": "uint8"
        },
        {
          "internalType": "uint32",
          "name": "limit",
          "type": "uint32"
        }
      ],
      "name": "setGasLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxAllowedLands",
          "type": "uint256"
        }
      ],
      "name": "setMaxAllowedLands",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_maxGasLimit",
          "type": "uint32"
        }
      ],
      "name": "setMaxLimitOnL1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[5]",
          "name": "limits",
          "type": "uint32[5]"
        }
      ],
      "name": "setupGasLimits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x95399327a0c107aae40ba523d6404ddccee5c285219629f725096d5b411db32a",
  "receipt": {
    "to": null,
    "from": "0x7074BB056C53ACC0b6091dd3FAe591aa3A4acC88",
    "contractAddress": "0xaA85fc97F9AdBCbdCf6Aded88491bfc6cf8aB49A",
    "transactionIndex": 59,
    "gasUsed": "2228256",
    "logsBloom": "0x0000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000800000000000000000000100000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000004000000000000000000001000000000000080000000000000000100000000000000000000000000000000000000000000000000800000004000000000000100020",
    "blockHash": "0x5b3fa2561a9f11562775a35283c310c4e0fde6a35db188b8fae044e2a15d57ef",
    "transactionHash": "0x95399327a0c107aae40ba523d6404ddccee5c285219629f725096d5b411db32a",
    "logs": [
      {
        "transactionIndex": 59,
        "blockNumber": 45862639,
        "transactionHash": "0x95399327a0c107aae40ba523d6404ddccee5c285219629f725096d5b411db32a",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000007074bb056c53acc0b6091dd3fae591aa3a4acc88",
          "0x000000000000000000000000127685d6dd6683085da4b6a041efcef1681e5c9c"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000eb4402c727648000000000000000000000000000000000000000000000000123cd2f5c28f3a35b000000000000000000000000000000000000000000000fc412b0e81ca6e3dfb100000000000000000000000000000000000000000000000122e1eb5961cc3edb000000000000000000000000000000000000000000000fc4139c2c1f6e0b4431",
        "logIndex": 270,
        "blockHash": "0x5b3fa2561a9f11562775a35283c310c4e0fde6a35db188b8fae044e2a15d57ef"
      }
    ],
    "blockNumber": 45862639,
    "cumulativeGasUsed": "11481236",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e1aa5651f7645b1641ef34120369a942",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"size\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"limit\",\"type\":\"uint32\"}],\"name\":\"SetGasLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxLands\",\"type\":\"uint256\"}],\"name\":\"SetMaxAllowedLands\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"maxGasLimit\",\"type\":\"uint32\"}],\"name\":\"SetMaxGasLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newForwarder\",\"type\":\"address\"}],\"name\":\"TrustedForwarderSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"sizes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"xs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ys\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"batchTransferQuadToL1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"childToken\",\"outputs\":[{\"internalType\":\"contract IPolygonLandV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxChild\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxRootTunnel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"gasLimits\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxChild\",\"type\":\"address\"},{\"internalType\":\"contract IPolygonLandV2\",\"name\":\"_childToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_maxGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_maxAllowedLands\",\"type\":\"uint256\"},{\"internalType\":\"uint32[5]\",\"name\":\"limits\",\"type\":\"uint32[5]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAllowedLands\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxGasLimitOnL1\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stateId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rootMessageSender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"processMessageFromRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxRootTunnel\",\"type\":\"address\"}],\"name\":\"setFxRootTunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"size\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"limit\",\"type\":\"uint32\"}],\"name\":\"setGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxAllowedLands\",\"type\":\"uint256\"}],\"name\":\"setMaxAllowedLands\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_maxGasLimit\",\"type\":\"uint32\"}],\"name\":\"setMaxLimitOnL1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[5]\",\"name\":\"limits\",\"type\":\"uint32[5]\"}],\"name\":\"setupGasLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"The Sandbox\",\"kind\":\"dev\",\"methods\":{\"batchTransferQuadToL1(address,uint256[],uint256[],uint256[],bytes)\":{\"params\":{\"data\":\"data send to the receiver onERC721BatchReceived on L1\",\"sizes\":\"sizes of quad\",\"to\":\"address of the receiver on L1\",\"xs\":\"x coordinates of quads\",\"ys\":\"y coordinates of quads\"}},\"getTrustedForwarder()\":{\"returns\":{\"_0\":\"trustedForwarder address of the trusted forwarder\"}},\"initialize(address,address,address,uint32,uint256,uint32[5])\":{\"params\":{\"_childToken\":\"address of the token on the child chain\",\"_fxChild\":\"child contract for state receiver\",\"_maxAllowedLands\":\"maximum number of Lands accepted\",\"_maxGasLimit\":\"maximum accepted gas limit\",\"_trustedForwarder\":\"address of an ERC2771 meta transaction sender contract\",\"limits\":\"the estimated gas that the L1 tx will use per quad size\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"address to check\"},\"returns\":{\"_0\":\"is trusted\"}},\"onERC721BatchReceived(address,address,uint256[],bytes)\":{\"details\":\"called on ERC721 batch transfer to this contract\",\"params\":{\"operator\":\"address of the one sending the ERC721 Token\"},\"returns\":{\"_0\":\"onERC721BatchReceived function selector\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"called on ERC721 transfer to this contract\",\"params\":{\"operator\":\"address of the one sending the ERC721 Token\"},\"returns\":{\"_0\":\"onERC721Received function selector\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Pauses all token transfers across bridge\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setFxRootTunnel(address)\":{\"details\":\"only owner can call this funtion\",\"params\":{\"_fxRootTunnel\":\"address of the fx-root tunnel\"}},\"setGasLimit(uint8,uint32)\":{\"params\":{\"limit\":\"the estimated gas that the L1 tx will use\",\"size\":\"the size of the quad\"}},\"setMaxAllowedLands(uint256)\":{\"params\":{\"_maxAllowedLands\":\"maximum number of lands accepted\"}},\"setMaxLimitOnL1(uint32)\":{\"params\":{\"_maxGasLimit\":\"maximum accepted gas limit\"}},\"setTrustedForwarder(address)\":{\"details\":\"Change the address of the trusted forwarder for meta-TX\",\"params\":{\"trustedForwarder\":\"The new trustedForwarder\"}},\"setupGasLimits(uint32[5])\":{\"params\":{\"limits\":\"the estimated gas that the L1 tx will use per quad size\"}},\"supportsInterface(bytes4)\":{\"details\":\"to be called by external contact to check if this contract supports ERC721 token and batch token receive\",\"params\":{\"interfaceId\":\"the interface to be checked if supported by the contract\"},\"returns\":{\"_0\":\"0x5e8bf644 is the interface of IERC721MandatoryTokenReceiver and 0x01ffc9a7 for the Eip 165 supports interface's interface id\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Unpauses all token transfers across bridge\"}},\"title\":\"PolygonLandTunnelV2\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchTransferQuadToL1(address,uint256[],uint256[],uint256[],bytes)\":{\"notice\":\"send a batch of quads to L1\"},\"getTrustedForwarder()\":{\"notice\":\"Get the current trusted forwarder\"},\"initialize(address,address,address,uint32,uint256,uint32[5])\":{\"notice\":\"initialize the contract\"},\"isTrustedForwarder(address)\":{\"notice\":\"Checks if an address is a trusted forwarder\"},\"setFxRootTunnel(address)\":{\"notice\":\"sets the fx-root tunnel\"},\"setGasLimit(uint8,uint32)\":{\"notice\":\"set the estimate of gas that the L1 transaction will use per quad size\"},\"setMaxAllowedLands(uint256)\":{\"notice\":\"set the limit of lands we can send in one tx to L1\"},\"setMaxLimitOnL1(uint32)\":{\"notice\":\"set the limit of estimated gas we accept when sending a batch of quads to L1\"},\"setupGasLimits(uint32[5])\":{\"notice\":\"set the estimate of gas that the L1 transaction will use per quad size\"}},\"notice\":\"LAND tunnel on the child chain\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/solc_0.8/polygon/child/land/PolygonLandTunnelV2.sol\":\"PolygonLandTunnelV2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@maticnetwork/fx-portal/contracts/tunnel/FxBaseChildTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// IFxMessageProcessor represents interface to process message\\ninterface IFxMessageProcessor {\\n    function processMessageFromRoot(\\n        uint256 stateId,\\n        address rootMessageSender,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n/**\\n * @notice Mock child tunnel contract to receive and send message from L2\\n */\\nabstract contract FxBaseChildTunnel is IFxMessageProcessor {\\n    // MessageTunnel on L1 will get data from this event\\n    event MessageSent(bytes message);\\n\\n    // fx child\\n    address public fxChild;\\n\\n    // fx root tunnel\\n    address public fxRootTunnel;\\n\\n    constructor(address _fxChild) {\\n        fxChild = _fxChild;\\n    }\\n\\n    // Sender must be fxRootTunnel in case of ERC20 tunnel\\n    modifier validateSender(address sender) {\\n        require(sender == fxRootTunnel, \\\"FxBaseChildTunnel: INVALID_SENDER_FROM_ROOT\\\");\\n        _;\\n    }\\n\\n    // set fxRootTunnel if not set already\\n    function setFxRootTunnel(address _fxRootTunnel) external virtual {\\n        require(fxRootTunnel == address(0x0), \\\"FxBaseChildTunnel: ROOT_TUNNEL_ALREADY_SET\\\");\\n        fxRootTunnel = _fxRootTunnel;\\n    }\\n\\n    function processMessageFromRoot(\\n        uint256 stateId,\\n        address rootMessageSender,\\n        bytes calldata data\\n    ) external override {\\n        require(msg.sender == fxChild, \\\"FxBaseChildTunnel: INVALID_SENDER\\\");\\n        _processMessageFromRoot(stateId, rootMessageSender, data);\\n    }\\n\\n    /**\\n     * @notice Emit message that can be received on Root Tunnel\\n     * @dev Call the internal function when need to emit message\\n     * @param message bytes message that will be sent to Root Tunnel\\n     * some message examples -\\n     *   abi.encode(tokenId);\\n     *   abi.encode(tokenId, tokenMetadata);\\n     *   abi.encode(messageType, messageData);\\n     */\\n    function _sendMessageToRoot(bytes memory message) internal {\\n        emit MessageSent(message);\\n    }\\n\\n    /**\\n     * @notice Process message received from Root Tunnel\\n     * @dev function needs to be implemented to handle message as per requirement\\n     * This is called by onStateReceive function.\\n     * Since it is called via a system call, any event will not be emitted during its execution.\\n     * @param stateId unique state id\\n     * @param sender root message sender\\n     * @param message bytes message that was sent from Root Tunnel\\n     */\\n    function _processMessageFromRoot(\\n        uint256 stateId,\\n        address sender,\\n        bytes memory message\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0x4e102fe11245e851e0f581b1fd4d5a3de2a86254a39e25d7ecc6d4a5947bcbd8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf93da311a3b34a8363a759c404d575746fa38351fb29ecd646c608e27219ebec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/ERC2771Handler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\n/**\\n * @title ERC2771Handler\\n * @author The Sandbox\\n * @notice Handle meta-transactions\\n * @dev minimal ERC2771 handler to keep bytecode-size down\\n * based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.6.0/contracts/metatx/ERC2771Context.sol\\n * with an initializer for proxies and a mutable forwarder\\n */\\nabstract contract ERC2771Handler {\\n    address internal _trustedForwarder;\\n\\n    event TrustedForwarderSet(address indexed newForwarder);\\n\\n    /**\\n     * @dev Initializes the contract\\n     * @param forwarder trusted forwarder address\\n     */\\n    function __ERC2771Handler_initialize(address forwarder) internal {\\n        _trustedForwarder = forwarder;\\n        emit TrustedForwarderSet(_trustedForwarder);\\n    }\\n\\n    /**\\n     * @notice Checks if an address is a trusted forwarder\\n     * @param forwarder address to check\\n     * @return is trusted\\n     */\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    /**\\n     * @notice Get the current trusted forwarder\\n     * @return trustedForwarder address of the trusted forwarder\\n     */\\n    function getTrustedForwarder() external view returns (address) {\\n        return _trustedForwarder;\\n    }\\n\\n    /**\\n     * @dev if the call comes from the trusted forwarder, it gets the real sender by checking the encoded address in the data\\n     * @return sender address of the real sender\\n     */\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    /**\\n     * @dev if the call comes from the trusted forwarder, it substracts the sender address from `msg.data` to get the real `msg.data`\\n     * @return the real `msg.data`\\n     */\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x33482ab5e863b2f5cc22fb9e77f8eff3484e08601326989da02ae1b147245669\",\"license\":\"MIT\"},\"src/solc_0.8/common/fx-portal/FxBaseChildTunnelUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport {FxBaseChildTunnel} from \\\"@maticnetwork/fx-portal/contracts/tunnel/FxBaseChildTunnel.sol\\\";\\n\\n/**\\n * @title FxBaseChildTunnelUpgradeable\\n * @author The Sandbox\\n * @dev Upgradeable version of the fx-portal tunnel for the child chain\\n */\\nabstract contract FxBaseChildTunnelUpgradeable is FxBaseChildTunnel {\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor() FxBaseChildTunnel(address(0)) {}\\n\\n    /**\\n     * @dev Initializes the contract\\n     * @param _fxChild fx child\\n     */\\n    function __FxBaseChildTunnelUpgradeable_initialize(address _fxChild) internal {\\n        fxChild = _fxChild;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x2b424e57064c2ca157bd7f12d55b75f87b0d2b3d85c787abcf10cf548b823b4f\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC721MandatoryTokenReceiver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\n/**\\n * @title IERC721MandatoryTokenReceiver\\n * @author The Sandbox\\n * @notice Interface for any contract that wants to support safeBatchTransfers\\n * from ERC721 asset contracts.\\n * @dev The ERC-165 identifier for this interface is 0x5e8bf644.\\n */\\ninterface IERC721MandatoryTokenReceiver {\\n    /**\\n     * @notice Whenever tokens are transferred to this contract via {IERC721-safeBatchTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     * @param operator sender\\n     * @param from owner of the tokens\\n     * @param ids token ids\\n     * @param data extra data\\n     * @return 0x4b808c46 if the transfer is a success\\n     */\\n    function onERC721BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external returns (bytes4); // needs to return 0x4b808c46\\n\\n    /**\\n     * @notice Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     * @param operator sender\\n     * @param from owner of the token\\n     * @param tokenId token id\\n     * @param data extra data\\n     * @return 0x4b808c46 if the transfer is a success\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4); // needs to return 0x150b7a02\\n}\\n\",\"keccak256\":\"0x6e1235c041b7d8747fa458037006e8df72bea62474dd04977e210d19914b7f5d\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/ILandToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\n/// @title ILandToken\\n/// @author The Sandbox\\n/// @notice Interface of the LAND token including quad methods\\ninterface ILandToken {\\n    /// @notice transfer multiple quad (aligned to a quad tree with size 3, 6, 12 or 24 only)\\n    /// @param from current owner of the quad\\n    /// @param to destination\\n    /// @param sizes list of sizes for each quad\\n    /// @param xs list of bottom left x coordinates for each quad\\n    /// @param ys list of bottom left y coordinates for each quad\\n    /// @param data additional data\\n    function batchTransferQuad(\\n        address from,\\n        address to,\\n        uint256[] calldata sizes,\\n        uint256[] calldata xs,\\n        uint256[] calldata ys,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice transfer one quad (aligned to a quad tree with size 3, 6, 12 or 24 only)\\n    /// @param from current owner of the quad\\n    /// @param to destination\\n    /// @param size size of the quad\\n    /// @param x The top left x coordinate of the quad\\n    /// @param y The top left y coordinate of the quad\\n    /// @param data additional data\\n    function transferQuad(\\n        address from,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Transfer many tokens between 2 addresses.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param ids The ids of the tokens.\\n    /// @param data Additional data.\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5df895e3442904d5f6a6ad3b4b34a2ec61d4a97a4b3feea57d5bb611d14a7e3e\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IPolygonLand.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport {ILandToken} from \\\"./ILandToken.sol\\\";\\n\\n/**\\n * @title IPolygonLand\\n * @author The Sandbox\\n * @notice Interface of the LAND token on the child chain\\n */\\ninterface IPolygonLand is ILandToken {\\n    /**\\n     * @notice Mint a new quad (aligned to a quad tree with size 1, 3, 6, 12 or 24 only)\\n     * @param to The recipient of the new quad\\n     * @param size The size of the new quad\\n     * @param x The top left x coordinate of the new quad\\n     * @param y The top left y coordinate of the new quad\\n     * @param data extra data to pass to the transfer\\n     */\\n    function mintQuad(\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes memory data\\n    ) external;\\n\\n    /**\\n     * @notice Checks if a LAND exists by its coordinates\\n     * @param size size of the quad\\n     * @param x x coordinate\\n     * @param y y coordinate\\n     * @return does the LAND exist\\n     */\\n    function exists(\\n        uint256 size,\\n        uint256 x,\\n        uint256 y\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x725deed21224d8adb2b2cc1dd0615447abee654e519cd9e22ffa505954dfc15d\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IPolygonLandV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"./IPolygonLand.sol\\\";\\n\\n/**\\n * @title IPolygonLandV2\\n * @author The Sandbox\\n * @notice interface of the LAND v2 based on IPolygonLand\\n */\\ninterface IPolygonLandV2 is IPolygonLand {\\n    /**\\n     * @notice checks if an address if an operator\\n     * @param who address checked\\n     * @return is it super operator\\n     */\\n    function isSuperOperator(address who) external view returns (bool);\\n\\n    /**\\n     * @notice checks if a parent quad has child quads already minted.\\n     *  Then mints the rest child quads and transfers the parent quad.\\n     *  Should only be called by the tunnel.\\n     * @param to The recipient of the new quad\\n     * @param size The size of the new quad\\n     * @param x The top left x coordinate of the new quad\\n     * @param y The top left y coordinate of the new quad\\n     * @param data extra data to pass to the transfer\\n     */\\n    function mintAndTransferQuad(\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe22361fa285d86bb8986dc25bf0263b2f413eaf99cdf3d616de318541cb8afdc\",\"license\":\"MIT\"},\"src/solc_0.8/polygon/child/land/PolygonLandTunnelV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport {FxBaseChildTunnelUpgradeable} from \\\"../../../common/fx-portal/FxBaseChildTunnelUpgradeable.sol\\\";\\nimport {\\n    OwnableUpgradeable,\\n    ContextUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport {IPolygonLandV2} from \\\"../../../common/interfaces/IPolygonLandV2.sol\\\";\\nimport {IERC721MandatoryTokenReceiver} from \\\"../../../common/interfaces/IERC721MandatoryTokenReceiver.sol\\\";\\nimport {ERC2771Handler} from \\\"../../../common/BaseWithStorage/ERC2771Handler.sol\\\";\\n\\n/**\\n * @title PolygonLandTunnelV2\\n * @author The Sandbox\\n * @notice LAND tunnel on the child chain\\n */\\ncontract PolygonLandTunnelV2 is\\n    FxBaseChildTunnelUpgradeable,\\n    IERC721MandatoryTokenReceiver,\\n    ERC2771Handler,\\n    OwnableUpgradeable,\\n    PausableUpgradeable\\n{\\n    bool internal transferringToL1;\\n    uint32 public maxGasLimitOnL1;\\n    uint256 public maxAllowedLands;\\n    IPolygonLandV2 public childToken;\\n\\n    mapping(uint8 => uint32) public gasLimits;\\n\\n    event SetGasLimit(uint8 indexed size, uint32 indexed limit);\\n    event SetMaxGasLimit(uint32 maxGasLimit);\\n    event SetMaxAllowedLands(uint256 maxLands);\\n    event Deposit(address indexed user, uint256 size, uint256 x, uint256 y, bytes data);\\n    event Withdraw(address indexed user, uint256 size, uint256 x, uint256 y, bytes data);\\n\\n    /// @notice initialize the contract\\n    /// @param _fxChild child contract for state receiver\\n    /// @param _childToken address of the token on the child chain\\n    /// @param _trustedForwarder address of an ERC2771 meta transaction sender contract\\n    /// @param _maxGasLimit maximum accepted gas limit\\n    /// @param _maxAllowedLands maximum number of Lands accepted\\n    /// @param limits the estimated gas that the L1 tx will use per quad size\\n    function initialize(\\n        address _fxChild,\\n        IPolygonLandV2 _childToken,\\n        address _trustedForwarder,\\n        uint32 _maxGasLimit,\\n        uint256 _maxAllowedLands,\\n        uint32[5] memory limits\\n    ) public initializer {\\n        __Ownable_init();\\n        __Pausable_init();\\n        childToken = _childToken;\\n        _setMaxLimitOnL1(_maxGasLimit);\\n        _setMaxAllowedLands(_maxAllowedLands);\\n        setupGasLimits(limits);\\n        __FxBaseChildTunnelUpgradeable_initialize(_fxChild);\\n        __ERC2771Handler_initialize(_trustedForwarder);\\n    }\\n\\n    /// @notice set the limit of lands we can send in one tx to L1\\n    /// @param _maxAllowedLands maximum number of lands accepted\\n    function setMaxAllowedLands(uint256 _maxAllowedLands) external onlyOwner {\\n        require(_maxAllowedLands > 0, \\\"PolygonLandTunnelV2: max allowed value cannot be zero\\\");\\n        maxAllowedLands = _maxAllowedLands;\\n        emit SetMaxAllowedLands(_maxAllowedLands);\\n    }\\n\\n    /// @notice set the estimate of gas that the L1 transaction will use per quad size\\n    /// @param  size the size of the quad\\n    /// @param  limit the estimated gas that the L1 tx will use\\n    function setGasLimit(uint8 size, uint32 limit) external onlyOwner {\\n        require(size == 1 || size == 3 || size == 6 || size == 12 || size == 24, \\\"PolygonLandTunnelV2: invalid data\\\");\\n\\n        _setGasLimit(size, limit);\\n    }\\n\\n    /// @notice set the estimate of gas that the L1 transaction will use per quad size\\n    /// @param  limits the estimated gas that the L1 tx will use per quad size\\n    function setupGasLimits(uint32[5] memory limits) public onlyOwner {\\n        _setGasLimit(1, limits[0]);\\n        _setGasLimit(3, limits[1]);\\n        _setGasLimit(6, limits[2]);\\n        _setGasLimit(12, limits[3]);\\n        _setGasLimit(24, limits[4]);\\n    }\\n\\n    /// @notice send a batch of quads to L1\\n    /// @param  to address of the receiver on L1\\n    /// @param  sizes sizes of quad\\n    /// @param  xs x coordinates of quads\\n    /// @param  ys y coordinates of quads\\n    /// @param  data data send to the receiver onERC721BatchReceived on L1\\n    function batchTransferQuadToL1(\\n        address to,\\n        uint256[] calldata sizes,\\n        uint256[] calldata xs,\\n        uint256[] calldata ys,\\n        bytes memory data\\n    ) external whenNotPaused() {\\n        require(to != address(0), \\\"PolygonLandTunnelV2: can't send to zero address\\\");\\n        require(sizes.length == xs.length, \\\"PolygonLandTunnelV2: sizes's and x's length are different\\\");\\n        require(sizes.length == ys.length, \\\"PolygonLandTunnelV2: x's and y's length are different\\\");\\n\\n        uint32 totalGasLimit = 0;\\n        uint256 lands = 0;\\n        for (uint256 i = 0; i < sizes.length; i++) {\\n            totalGasLimit += gasLimits[uint8(sizes[i])];\\n            lands += sizes[i] * sizes[i];\\n        }\\n\\n        require(lands <= maxAllowedLands, \\\"PolygonLandTunnelV2: Exceeds max allowed lands.\\\");\\n        require(totalGasLimit < maxGasLimitOnL1, \\\"PolygonLandTunnelV2: Exceeds gas limit on L1.\\\");\\n        transferringToL1 = true;\\n        for (uint256 i = 0; i < sizes.length; i++) {\\n            childToken.transferQuad(_msgSender(), address(this), sizes[i], xs[i], ys[i], data);\\n            emit Withdraw(to, sizes[i], xs[i], ys[i], data);\\n        }\\n        _sendMessageToRoot(abi.encode(to, sizes, xs, ys, data));\\n        transferringToL1 = false;\\n    }\\n\\n    /// @notice sets the fx-root tunnel\\n    /// @dev only owner can call this funtion\\n    /// @param _fxRootTunnel address of the fx-root tunnel\\n    function setFxRootTunnel(address _fxRootTunnel) external override onlyOwner {\\n        require(fxRootTunnel == address(0), \\\"PolygonLandTunnelV2: ROOT_TUNNEL_ALREADY_SET\\\");\\n\\n        fxRootTunnel = _fxRootTunnel;\\n    }\\n\\n    /// @dev Change the address of the trusted forwarder for meta-TX\\n    /// @param trustedForwarder The new trustedForwarder\\n    function setTrustedForwarder(address trustedForwarder) external onlyOwner {\\n        _trustedForwarder = trustedForwarder;\\n\\n        emit TrustedForwarderSet(trustedForwarder);\\n    }\\n\\n    /// @notice set the limit of estimated gas we accept when sending a batch of quads to L1\\n    /// @param _maxGasLimit maximum accepted gas limit\\n    function setMaxLimitOnL1(uint32 _maxGasLimit) external onlyOwner {\\n        _setMaxLimitOnL1(_maxGasLimit);\\n    }\\n\\n    /// @dev Pauses all token transfers across bridge\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /// @dev Unpauses all token transfers across bridge\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /// @dev called on ERC721 transfer to this contract\\n    /// @param operator address of the one sending the ERC721 Token\\n    /// @return onERC721Received function selector\\n    function onERC721Received(\\n        address operator,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external view override returns (bytes4) {\\n        require(transferringToL1 || childToken.isSuperOperator(operator), \\\"PolygonLandTunnelV2: !BRIDGING\\\");\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /// @dev called on ERC721 batch transfer to this contract\\n    /// @param operator address of the one sending the ERC721 Token\\n    /// @return onERC721BatchReceived function selector\\n    function onERC721BatchReceived(\\n        address operator,\\n        address,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) external view override returns (bytes4) {\\n        require(transferringToL1 || childToken.isSuperOperator(operator), \\\"PolygonLandTunnelV2: !BRIDGING\\\");\\n        return this.onERC721BatchReceived.selector;\\n    }\\n\\n    /// @dev to be called by external contact to check if this contract supports ERC721 token and batch token receive\\n    /// @param interfaceId the interface to be checked if supported by the contract\\n    /// @return 0x5e8bf644 is the interface of IERC721MandatoryTokenReceiver and 0x01ffc9a7 for the Eip 165 supports interface's interface id\\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool) {\\n        return interfaceId == 0x5e8bf644 || interfaceId == 0x01ffc9a7;\\n    }\\n\\n    function _processMessageFromRoot(\\n        uint256,\\n        address sender,\\n        bytes memory data\\n    ) internal override validateSender(sender) {\\n        _syncDeposit(data);\\n    }\\n\\n    function _setMaxLimitOnL1(uint32 _maxGasLimit) internal {\\n        maxGasLimitOnL1 = _maxGasLimit;\\n        emit SetMaxGasLimit(_maxGasLimit);\\n    }\\n\\n    function _setMaxAllowedLands(uint256 _maxAllowedLands) internal {\\n        require(_maxAllowedLands > 0, \\\"PolygonLandTunnelV2: max allowed value cannot be zero\\\");\\n        maxAllowedLands = _maxAllowedLands;\\n        emit SetMaxAllowedLands(_maxAllowedLands);\\n    }\\n\\n    function _syncDeposit(bytes memory syncData) internal {\\n        (address to, uint256 size, uint256 x, uint256 y, bytes memory data) =\\n            abi.decode(syncData, (address, uint256, uint256, uint256, bytes));\\n        childToken.mintAndTransferQuad(to, size, x, y, data);\\n        emit Deposit(to, size, x, y, data);\\n    }\\n\\n    function _msgSender() internal view override(ContextUpgradeable, ERC2771Handler) returns (address) {\\n        return ERC2771Handler._msgSender();\\n    }\\n\\n    function _msgData() internal view override(ContextUpgradeable, ERC2771Handler) returns (bytes calldata) {\\n        return ERC2771Handler._msgData();\\n    }\\n\\n    function _setGasLimit(uint8 size, uint32 limit) internal {\\n        gasLimits[size] = limit;\\n        emit SetGasLimit(size, limit);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9326c0d24efccdbdc4f6d84ca0d8554c8720deaea27f995326ac9250f575e242\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600080546001600160a01b031916905561276a806100306000396000f3fe608060405234801561001057600080fd5b50600436106101ae5760003560e01c8063715018a6116100ee578063ac0007de11610097578063da74222811610071578063da742228146103c0578063ee89d41c146103d3578063f2fde38b146103e8578063fe8138c7146103fb576101ae565b8063ac0007de14610389578063c7fd66251461039c578063ce1b815f146103af576101ae565b806388837094116100c857806388837094146103525780638da5cb5b146103655780639a7c4b7114610376576101ae565b8063715018a61461032f5780637f1e9cb0146103375780638456cb591461034a576101ae565b80633f360a401161015b5780634b808c46116101355780634b808c46146102df578063572b6c05146102f25780635c975abb1461031457806366142f371461031c576101ae565b80633f360a40146102995780633f4ba83a146102ac578063450d11f0146102b4576101ae565b8063150b7a021161018c578063150b7a02146102075780631e00b31a1461024b57806321f599f21461025e576101ae565b806301ffc9a7146101b357806308311f1f146101db5780630c9e0557146101f2575b600080fd5b6101c66101c136600461232a565b61040e565b60405190151581526020015b60405180910390f35b6101e460cc5481565b6040519081526020016101d2565b61020561020036600461236a565b6104a9565b005b61021a610215366004612104565b6105d9565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016101d2565b6102056102593660046123dc565b6106f5565b61028461026c3660046123f6565b60ce6020526000908152604090205463ffffffff1681565b60405163ffffffff90911681526020016101d2565b6102056102a7366004612175565b61077a565b610205610d1e565b6000546102c7906001600160a01b031681565b6040516001600160a01b0390911681526020016101d2565b61021a6102ed366004612072565b610da1565b6101c6610300366004611fa3565b6034546001600160a01b0390811691161490565b6101c6610ebe565b61020561032a366004612410565b610ec8565b610205611000565b6001546102c7906001600160a01b031681565b610205611083565b610205610360366004611fa3565b611104565b6067546001600160a01b03166102c7565b610205610384366004612382565b61122b565b60cd546102c7906001600160a01b031681565b6102056103aa36600461227b565b6112f2565b6034546001600160a01b03166102c7565b6102056103ce366004611fa3565b6114d7565b60cb5461028490610100900463ffffffff1681565b6102056103f6366004611fa3565b6115a7565b6102056104093660046122ef565b6116a5565b60007f5e8bf644000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614806104a157507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b90505b919050565b6104b1611765565b6001600160a01b03166104cc6067546001600160a01b031690565b6001600160a01b0316146105275760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6000811161059d5760405162461bcd60e51b815260206004820152603560248201527f506f6c79676f6e4c616e6454756e6e656c56323a206d617820616c6c6f77656460448201527f2076616c75652063616e6e6f74206265207a65726f0000000000000000000000606482015260840161051e565b60cc8190556040518181527f6a3bbca20bd7b0c5d945e5bb9afef92d4dccb8dcee37b78dc8e333e847569f80906020015b60405180910390a150565b60cb5460009060ff168061067e575060cd546040517f654b748a0000000000000000000000000000000000000000000000000000000081526001600160a01b0388811660048301529091169063654b748a9060240160206040518083038186803b15801561064657600080fd5b505afa15801561065a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067e919061230a565b6106ca5760405162461bcd60e51b815260206004820152601e60248201527f506f6c79676f6e4c616e6454756e6e656c56323a20214252494447494e470000604482015260640161051e565b507f150b7a020000000000000000000000000000000000000000000000000000000095945050505050565b6106fd611765565b6001600160a01b03166107186067546001600160a01b031690565b6001600160a01b03161461076e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161051e565b61077781611774565b50565b610782610ebe565b156107cf5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015260640161051e565b6001600160a01b03881661084b5760405162461bcd60e51b815260206004820152602f60248201527f506f6c79676f6e4c616e6454756e6e656c56323a2063616e27742073656e642060448201527f746f207a65726f20616464726573730000000000000000000000000000000000606482015260840161051e565b8584146108c05760405162461bcd60e51b815260206004820152603960248201527f506f6c79676f6e4c616e6454756e6e656c56323a2073697a6573277320616e6460448201527f20782773206c656e6774682061726520646966666572656e7400000000000000606482015260840161051e565b8582146109355760405162461bcd60e51b815260206004820152603560248201527f506f6c79676f6e4c616e6454756e6e656c56323a2078277320616e642079277360448201527f206c656e6774682061726520646966666572656e740000000000000000000000606482015260840161051e565b60008060005b88811015610a0c5760ce60008b8b8481811061096757634e487b7160e01b600052603260045260246000fd5b6020908102929092013560ff16835250810191909152604001600020546109949063ffffffff1684612665565b92508989828181106109b657634e487b7160e01b600052603260045260246000fd5b905060200201358a8a838181106109dd57634e487b7160e01b600052603260045260246000fd5b905060200201356109ee919061268d565b6109f8908361264d565b915080610a04816126d8565b91505061093b565b5060cc54811115610a855760405162461bcd60e51b815260206004820152602f60248201527f506f6c79676f6e4c616e6454756e6e656c56323a2045786365656473206d617860448201527f20616c6c6f776564206c616e64732e0000000000000000000000000000000000606482015260840161051e565b60cb5463ffffffff610100909104811690831610610b0b5760405162461bcd60e51b815260206004820152602d60248201527f506f6c79676f6e4c616e6454756e6e656c56323a20457863656564732067617360448201527f206c696d6974206f6e204c312e00000000000000000000000000000000000000606482015260840161051e565b60cb805460ff1916600117905560005b88811015610cd15760cd546001600160a01b03166338bb305a610b3c611765565b308d8d86818110610b5d57634e487b7160e01b600052603260045260246000fd5b905060200201358c8c87818110610b8457634e487b7160e01b600052603260045260246000fd5b905060200201358b8b88818110610bab57634e487b7160e01b600052603260045260246000fd5b905060200201358a6040518763ffffffff1660e01b8152600401610bd4969594939291906124bb565b600060405180830381600087803b158015610bee57600080fd5b505af1158015610c02573d6000803e3d6000fd5b505050508a6001600160a01b03167f91ee42a3ae048785d7370790775b6bf02c58c5d7bfb5de80f6d7cb27e46a207e8b8b84818110610c5157634e487b7160e01b600052603260045260246000fd5b905060200201358a8a85818110610c7857634e487b7160e01b600052603260045260246000fd5b90506020020135898986818110610c9f57634e487b7160e01b600052603260045260246000fd5b9050602002013588604051610cb794939291906125c5565b60405180910390a280610cc9816126d8565b915050610b1b565b50610d088a8a8a8a8a8a8a8a604051602001610cf4989796959493929190612505565b6040516020818303038152906040526117de565b505060cb805460ff191690555050505050505050565b610d26611765565b6001600160a01b0316610d416067546001600160a01b031690565b6001600160a01b031614610d975760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161051e565b610d9f61180d565b565b60cb5460009060ff1680610e46575060cd546040517f654b748a0000000000000000000000000000000000000000000000000000000081526001600160a01b0389811660048301529091169063654b748a9060240160206040518083038186803b158015610e0e57600080fd5b505afa158015610e22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e46919061230a565b610e925760405162461bcd60e51b815260206004820152601e60248201527f506f6c79676f6e4c616e6454756e6e656c56323a20214252494447494e470000604482015260640161051e565b507f4b808c46000000000000000000000000000000000000000000000000000000009695505050505050565b60995460ff165b90565b610ed0611765565b6001600160a01b0316610eeb6067546001600160a01b031690565b6001600160a01b031614610f415760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161051e565b8160ff1660011480610f5657508160ff166003145b80610f6457508160ff166006145b80610f7257508160ff16600c145b80610f8057508160ff166018145b610ff25760405162461bcd60e51b815260206004820152602160248201527f506f6c79676f6e4c616e6454756e6e656c56323a20696e76616c69642064617460448201527f6100000000000000000000000000000000000000000000000000000000000000606482015260840161051e565b610ffc82826118b1565b5050565b611008611765565b6001600160a01b03166110236067546001600160a01b031690565b6001600160a01b0316146110795760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161051e565b610d9f6000611921565b61108b611765565b6001600160a01b03166110a66067546001600160a01b031690565b6001600160a01b0316146110fc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161051e565b610d9f611980565b61110c611765565b6001600160a01b03166111276067546001600160a01b031690565b6001600160a01b03161461117d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161051e565b6001546001600160a01b0316156111fc5760405162461bcd60e51b815260206004820152602c60248201527f506f6c79676f6e4c616e6454756e6e656c56323a20524f4f545f54554e4e454c60448201527f5f414c52454144595f5345540000000000000000000000000000000000000000606482015260840161051e565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000546001600160a01b031633146112ab5760405162461bcd60e51b815260206004820152602160248201527f4678426173654368696c6454756e6e656c3a20494e56414c49445f53454e444560448201527f5200000000000000000000000000000000000000000000000000000000000000606482015260840161051e565b6112ec848484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611a0b92505050565b50505050565b603454600160a81b900460ff166113275760345474010000000000000000000000000000000000000000900460ff161561132b565b303b155b61139d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161051e565b603454600160a81b900460ff1615801561141b57603480547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff7fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff909116600160a81b1716740100000000000000000000000000000000000000001790555b611423611a99565b61142b611b16565b60cd805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03881617905561145c84611774565b61146583610527565b61146e826116a5565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03891617905561149f85611b93565b80156114ce57603480547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff1690555b50505050505050565b6114df611765565b6001600160a01b03166114fa6067546001600160a01b031690565b6001600160a01b0316146115505760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161051e565b6034805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517fd91237492a9e30cd2faf361fc103998a382ff0ec2b1b07dc1cbebb76ae2f1ea290600090a250565b6115af611765565b6001600160a01b03166115ca6067546001600160a01b031690565b6001600160a01b0316146116205760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161051e565b6001600160a01b03811661169c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161051e565b61077781611921565b6116ad611765565b6001600160a01b03166116c86067546001600160a01b031690565b6001600160a01b03161461171e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161051e565b61173160018260005b60200201516118b1565b61173e6003826001611727565b61174b6006826002611727565b611758600c826003611727565b6107776018826004611727565b600061176f611bf0565b905090565b60cb80547fffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000ff1661010063ffffffff8416908102919091179091556040519081527f59750b13637aff7a39455c6fb86108b91deab78a6d1046f7bd72cfdfae2f4d90906020016105ce565b7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036816040516105ce91906125b2565b611815610ebe565b6118615760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604482015260640161051e565b6099805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611894611765565b6040516001600160a01b03909116815260200160405180910390a1565b60ff8216600081815260ce602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff861690811790915590519092917ffc6e32fc7effd308d33dfd4879e53051d8b83cb5d4b7826ff3e38473c0e57dd991a35050565b606780546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611988610ebe565b156119d55760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015260640161051e565b6099805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611894611765565b60015482906001600160a01b03808316911614611a905760405162461bcd60e51b815260206004820152602b60248201527f4678426173654368696c6454756e6e656c3a20494e56414c49445f53454e444560448201527f525f46524f4d5f524f4f54000000000000000000000000000000000000000000606482015260840161051e565b6112ec82611c3a565b603454600160a81b900460ff16611b065760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161051e565b611b0e611d33565b610d9f611da0565b603454600160a81b900460ff16611b835760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161051e565b611b8b611d33565b610d9f611e1d565b6034805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383811691909117918290556040519116907fd91237492a9e30cd2faf361fc103998a382ff0ec2b1b07dc1cbebb76ae2f1ea290600090a250565b6034546000906001600160a01b0316331415611c3357507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c610ec5565b5033610ec5565b600080600080600085806020019051810190611c569190611fc6565b60cd546040517f4e6a0f44000000000000000000000000000000000000000000000000000000008152959a50939850919650945092506001600160a01b031690634e6a0f4490611cb29088908890889088908890600401612573565b600060405180830381600087803b158015611ccc57600080fd5b505af1158015611ce0573d6000803e3d6000fd5b50505050846001600160a01b03167f86beac9ed9e1aa4efb77b948567a4c352c177bb58b134f4c9d0d92c2c8ffbfb185858585604051611d2394939291906125c5565b60405180910390a2505050505050565b603454600160a81b900460ff16610d9f5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161051e565b603454600160a81b900460ff16611e0d5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161051e565b610d9f611e18611765565b611921565b603454600160a81b900460ff16611e8a5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161051e565b6099805460ff19169055565b60008083601f840112611ea7578182fd5b50813567ffffffffffffffff811115611ebe578182fd5b6020830191508360208083028501011115611ed857600080fd5b9250929050565b600082601f830112611eef578081fd5b611ef960a06125f4565b80838560a086011115611f0a578384fd5b835b6005811015611f3357611f1e82611f7e565b84526020938401939190910190600101611f0c565b509095945050505050565b60008083601f840112611f4f578182fd5b50813567ffffffffffffffff811115611f66578182fd5b602083019150836020828501011115611ed857600080fd5b803563ffffffff811681146104a457600080fd5b803560ff811681146104a457600080fd5b600060208284031215611fb4578081fd5b8135611fbf8161271f565b9392505050565b600080600080600060a08688031215611fdd578081fd5b8551611fe88161271f565b80955050602086015193506040860151925060608601519150608086015167ffffffffffffffff81111561201a578182fd5b8601601f8101881361202a578182fd5b805161203d61203882612625565b6125f4565b818152896020838501011115612051578384fd5b6120628260208301602086016126ac565b8093505050509295509295909350565b6000806000806000806080878903121561208a578081fd5b86356120958161271f565b955060208701356120a58161271f565b9450604087013567ffffffffffffffff808211156120c1578283fd5b6120cd8a838b01611e96565b909650945060608901359150808211156120e5578283fd5b506120f289828a01611f3e565b979a9699509497509295939492505050565b60008060008060006080868803121561211b578081fd5b85356121268161271f565b945060208601356121368161271f565b935060408601359250606086013567ffffffffffffffff811115612158578182fd5b61216488828901611f3e565b969995985093965092949392505050565b60008060008060008060008060a0898b031215612190578182fd5b883561219b8161271f565b9750602089013567ffffffffffffffff808211156121b7578384fd5b6121c38c838d01611e96565b909950975060408b01359150808211156121db578384fd5b6121e78c838d01611e96565b909750955060608b01359150808211156121ff578384fd5b61220b8c838d01611e96565b909550935060808b0135915080821115612223578283fd5b508901601f81018b13612234578182fd5b803561224261203882612625565b8181528c6020838501011115612256578384fd5b8160208401602083013783602083830101528093505050509295985092959890939650565b6000806000806000806101408789031215612294578384fd5b863561229f8161271f565b955060208701356122af8161271f565b945060408701356122bf8161271f565b93506122cd60608801611f7e565b9250608087013591506122e38860a08901611edf565b90509295509295509295565b600060a08284031215612300578081fd5b611fbf8383611edf565b60006020828403121561231b578081fd5b81518015158114611fbf578182fd5b60006020828403121561233b578081fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114611fbf578182fd5b60006020828403121561237b578081fd5b5035919050565b60008060008060608587031215612397578182fd5b8435935060208501356123a98161271f565b9250604085013567ffffffffffffffff8111156123c4578283fd5b6123d087828801611f3e565b95989497509550505050565b6000602082840312156123ed578081fd5b611fbf82611f7e565b600060208284031215612407578081fd5b611fbf82611f92565b60008060408385031215612422578182fd5b61242b83611f92565b915061243960208401611f7e565b90509250929050565b60008284527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115612473578081fd5b6020830280836020870137939093016020019283525090919050565b600081518084526124a78160208601602086016126ac565b601f01601f19169290920160200192915050565b60006001600160a01b03808916835280881660208401525085604083015284606083015283608083015260c060a08301526124f960c083018461248f565b98975050505050505050565b60006001600160a01b038a16825260a0602083015261252860a08301898b612442565b828103604084015261253b81888a612442565b90508281036060840152612550818688612442565b90508281036080840152612564818561248f565b9b9a5050505050505050505050565b60006001600160a01b038716825285602083015284604083015283606083015260a060808301526125a760a083018461248f565b979650505050505050565b600060208252611fbf602083018461248f565b6000858252846020830152836040830152608060608301526125ea608083018461248f565b9695505050505050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561261d5761261d612709565b604052919050565b600067ffffffffffffffff82111561263f5761263f612709565b50601f01601f191660200190565b60008219821115612660576126606126f3565b500190565b600063ffffffff808316818516808303821115612684576126846126f3565b01949350505050565b60008160001904831182151516156126a7576126a76126f3565b500290565b60005b838110156126c75781810151838201526020016126af565b838111156112ec5750506000910152565b60006000198214156126ec576126ec6126f3565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461077757600080fdfea2646970667358221220a8653a7d556bc5df1758492a85ebf04c8af9ce6be964608ffa4d9183c31e966764736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101ae5760003560e01c8063715018a6116100ee578063ac0007de11610097578063da74222811610071578063da742228146103c0578063ee89d41c146103d3578063f2fde38b146103e8578063fe8138c7146103fb576101ae565b8063ac0007de14610389578063c7fd66251461039c578063ce1b815f146103af576101ae565b806388837094116100c857806388837094146103525780638da5cb5b146103655780639a7c4b7114610376576101ae565b8063715018a61461032f5780637f1e9cb0146103375780638456cb591461034a576101ae565b80633f360a401161015b5780634b808c46116101355780634b808c46146102df578063572b6c05146102f25780635c975abb1461031457806366142f371461031c576101ae565b80633f360a40146102995780633f4ba83a146102ac578063450d11f0146102b4576101ae565b8063150b7a021161018c578063150b7a02146102075780631e00b31a1461024b57806321f599f21461025e576101ae565b806301ffc9a7146101b357806308311f1f146101db5780630c9e0557146101f2575b600080fd5b6101c66101c136600461232a565b61040e565b60405190151581526020015b60405180910390f35b6101e460cc5481565b6040519081526020016101d2565b61020561020036600461236a565b6104a9565b005b61021a610215366004612104565b6105d9565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016101d2565b6102056102593660046123dc565b6106f5565b61028461026c3660046123f6565b60ce6020526000908152604090205463ffffffff1681565b60405163ffffffff90911681526020016101d2565b6102056102a7366004612175565b61077a565b610205610d1e565b6000546102c7906001600160a01b031681565b6040516001600160a01b0390911681526020016101d2565b61021a6102ed366004612072565b610da1565b6101c6610300366004611fa3565b6034546001600160a01b0390811691161490565b6101c6610ebe565b61020561032a366004612410565b610ec8565b610205611000565b6001546102c7906001600160a01b031681565b610205611083565b610205610360366004611fa3565b611104565b6067546001600160a01b03166102c7565b610205610384366004612382565b61122b565b60cd546102c7906001600160a01b031681565b6102056103aa36600461227b565b6112f2565b6034546001600160a01b03166102c7565b6102056103ce366004611fa3565b6114d7565b60cb5461028490610100900463ffffffff1681565b6102056103f6366004611fa3565b6115a7565b6102056104093660046122ef565b6116a5565b60007f5e8bf644000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614806104a157507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b90505b919050565b6104b1611765565b6001600160a01b03166104cc6067546001600160a01b031690565b6001600160a01b0316146105275760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6000811161059d5760405162461bcd60e51b815260206004820152603560248201527f506f6c79676f6e4c616e6454756e6e656c56323a206d617820616c6c6f77656460448201527f2076616c75652063616e6e6f74206265207a65726f0000000000000000000000606482015260840161051e565b60cc8190556040518181527f6a3bbca20bd7b0c5d945e5bb9afef92d4dccb8dcee37b78dc8e333e847569f80906020015b60405180910390a150565b60cb5460009060ff168061067e575060cd546040517f654b748a0000000000000000000000000000000000000000000000000000000081526001600160a01b0388811660048301529091169063654b748a9060240160206040518083038186803b15801561064657600080fd5b505afa15801561065a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067e919061230a565b6106ca5760405162461bcd60e51b815260206004820152601e60248201527f506f6c79676f6e4c616e6454756e6e656c56323a20214252494447494e470000604482015260640161051e565b507f150b7a020000000000000000000000000000000000000000000000000000000095945050505050565b6106fd611765565b6001600160a01b03166107186067546001600160a01b031690565b6001600160a01b03161461076e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161051e565b61077781611774565b50565b610782610ebe565b156107cf5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015260640161051e565b6001600160a01b03881661084b5760405162461bcd60e51b815260206004820152602f60248201527f506f6c79676f6e4c616e6454756e6e656c56323a2063616e27742073656e642060448201527f746f207a65726f20616464726573730000000000000000000000000000000000606482015260840161051e565b8584146108c05760405162461bcd60e51b815260206004820152603960248201527f506f6c79676f6e4c616e6454756e6e656c56323a2073697a6573277320616e6460448201527f20782773206c656e6774682061726520646966666572656e7400000000000000606482015260840161051e565b8582146109355760405162461bcd60e51b815260206004820152603560248201527f506f6c79676f6e4c616e6454756e6e656c56323a2078277320616e642079277360448201527f206c656e6774682061726520646966666572656e740000000000000000000000606482015260840161051e565b60008060005b88811015610a0c5760ce60008b8b8481811061096757634e487b7160e01b600052603260045260246000fd5b6020908102929092013560ff16835250810191909152604001600020546109949063ffffffff1684612665565b92508989828181106109b657634e487b7160e01b600052603260045260246000fd5b905060200201358a8a838181106109dd57634e487b7160e01b600052603260045260246000fd5b905060200201356109ee919061268d565b6109f8908361264d565b915080610a04816126d8565b91505061093b565b5060cc54811115610a855760405162461bcd60e51b815260206004820152602f60248201527f506f6c79676f6e4c616e6454756e6e656c56323a2045786365656473206d617860448201527f20616c6c6f776564206c616e64732e0000000000000000000000000000000000606482015260840161051e565b60cb5463ffffffff610100909104811690831610610b0b5760405162461bcd60e51b815260206004820152602d60248201527f506f6c79676f6e4c616e6454756e6e656c56323a20457863656564732067617360448201527f206c696d6974206f6e204c312e00000000000000000000000000000000000000606482015260840161051e565b60cb805460ff1916600117905560005b88811015610cd15760cd546001600160a01b03166338bb305a610b3c611765565b308d8d86818110610b5d57634e487b7160e01b600052603260045260246000fd5b905060200201358c8c87818110610b8457634e487b7160e01b600052603260045260246000fd5b905060200201358b8b88818110610bab57634e487b7160e01b600052603260045260246000fd5b905060200201358a6040518763ffffffff1660e01b8152600401610bd4969594939291906124bb565b600060405180830381600087803b158015610bee57600080fd5b505af1158015610c02573d6000803e3d6000fd5b505050508a6001600160a01b03167f91ee42a3ae048785d7370790775b6bf02c58c5d7bfb5de80f6d7cb27e46a207e8b8b84818110610c5157634e487b7160e01b600052603260045260246000fd5b905060200201358a8a85818110610c7857634e487b7160e01b600052603260045260246000fd5b90506020020135898986818110610c9f57634e487b7160e01b600052603260045260246000fd5b9050602002013588604051610cb794939291906125c5565b60405180910390a280610cc9816126d8565b915050610b1b565b50610d088a8a8a8a8a8a8a8a604051602001610cf4989796959493929190612505565b6040516020818303038152906040526117de565b505060cb805460ff191690555050505050505050565b610d26611765565b6001600160a01b0316610d416067546001600160a01b031690565b6001600160a01b031614610d975760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161051e565b610d9f61180d565b565b60cb5460009060ff1680610e46575060cd546040517f654b748a0000000000000000000000000000000000000000000000000000000081526001600160a01b0389811660048301529091169063654b748a9060240160206040518083038186803b158015610e0e57600080fd5b505afa158015610e22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e46919061230a565b610e925760405162461bcd60e51b815260206004820152601e60248201527f506f6c79676f6e4c616e6454756e6e656c56323a20214252494447494e470000604482015260640161051e565b507f4b808c46000000000000000000000000000000000000000000000000000000009695505050505050565b60995460ff165b90565b610ed0611765565b6001600160a01b0316610eeb6067546001600160a01b031690565b6001600160a01b031614610f415760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161051e565b8160ff1660011480610f5657508160ff166003145b80610f6457508160ff166006145b80610f7257508160ff16600c145b80610f8057508160ff166018145b610ff25760405162461bcd60e51b815260206004820152602160248201527f506f6c79676f6e4c616e6454756e6e656c56323a20696e76616c69642064617460448201527f6100000000000000000000000000000000000000000000000000000000000000606482015260840161051e565b610ffc82826118b1565b5050565b611008611765565b6001600160a01b03166110236067546001600160a01b031690565b6001600160a01b0316146110795760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161051e565b610d9f6000611921565b61108b611765565b6001600160a01b03166110a66067546001600160a01b031690565b6001600160a01b0316146110fc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161051e565b610d9f611980565b61110c611765565b6001600160a01b03166111276067546001600160a01b031690565b6001600160a01b03161461117d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161051e565b6001546001600160a01b0316156111fc5760405162461bcd60e51b815260206004820152602c60248201527f506f6c79676f6e4c616e6454756e6e656c56323a20524f4f545f54554e4e454c60448201527f5f414c52454144595f5345540000000000000000000000000000000000000000606482015260840161051e565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000546001600160a01b031633146112ab5760405162461bcd60e51b815260206004820152602160248201527f4678426173654368696c6454756e6e656c3a20494e56414c49445f53454e444560448201527f5200000000000000000000000000000000000000000000000000000000000000606482015260840161051e565b6112ec848484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611a0b92505050565b50505050565b603454600160a81b900460ff166113275760345474010000000000000000000000000000000000000000900460ff161561132b565b303b155b61139d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161051e565b603454600160a81b900460ff1615801561141b57603480547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff7fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff909116600160a81b1716740100000000000000000000000000000000000000001790555b611423611a99565b61142b611b16565b60cd805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03881617905561145c84611774565b61146583610527565b61146e826116a5565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03891617905561149f85611b93565b80156114ce57603480547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff1690555b50505050505050565b6114df611765565b6001600160a01b03166114fa6067546001600160a01b031690565b6001600160a01b0316146115505760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161051e565b6034805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517fd91237492a9e30cd2faf361fc103998a382ff0ec2b1b07dc1cbebb76ae2f1ea290600090a250565b6115af611765565b6001600160a01b03166115ca6067546001600160a01b031690565b6001600160a01b0316146116205760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161051e565b6001600160a01b03811661169c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161051e565b61077781611921565b6116ad611765565b6001600160a01b03166116c86067546001600160a01b031690565b6001600160a01b03161461171e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161051e565b61173160018260005b60200201516118b1565b61173e6003826001611727565b61174b6006826002611727565b611758600c826003611727565b6107776018826004611727565b600061176f611bf0565b905090565b60cb80547fffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000ff1661010063ffffffff8416908102919091179091556040519081527f59750b13637aff7a39455c6fb86108b91deab78a6d1046f7bd72cfdfae2f4d90906020016105ce565b7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036816040516105ce91906125b2565b611815610ebe565b6118615760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604482015260640161051e565b6099805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611894611765565b6040516001600160a01b03909116815260200160405180910390a1565b60ff8216600081815260ce602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff861690811790915590519092917ffc6e32fc7effd308d33dfd4879e53051d8b83cb5d4b7826ff3e38473c0e57dd991a35050565b606780546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611988610ebe565b156119d55760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015260640161051e565b6099805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611894611765565b60015482906001600160a01b03808316911614611a905760405162461bcd60e51b815260206004820152602b60248201527f4678426173654368696c6454756e6e656c3a20494e56414c49445f53454e444560448201527f525f46524f4d5f524f4f54000000000000000000000000000000000000000000606482015260840161051e565b6112ec82611c3a565b603454600160a81b900460ff16611b065760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161051e565b611b0e611d33565b610d9f611da0565b603454600160a81b900460ff16611b835760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161051e565b611b8b611d33565b610d9f611e1d565b6034805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383811691909117918290556040519116907fd91237492a9e30cd2faf361fc103998a382ff0ec2b1b07dc1cbebb76ae2f1ea290600090a250565b6034546000906001600160a01b0316331415611c3357507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c610ec5565b5033610ec5565b600080600080600085806020019051810190611c569190611fc6565b60cd546040517f4e6a0f44000000000000000000000000000000000000000000000000000000008152959a50939850919650945092506001600160a01b031690634e6a0f4490611cb29088908890889088908890600401612573565b600060405180830381600087803b158015611ccc57600080fd5b505af1158015611ce0573d6000803e3d6000fd5b50505050846001600160a01b03167f86beac9ed9e1aa4efb77b948567a4c352c177bb58b134f4c9d0d92c2c8ffbfb185858585604051611d2394939291906125c5565b60405180910390a2505050505050565b603454600160a81b900460ff16610d9f5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161051e565b603454600160a81b900460ff16611e0d5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161051e565b610d9f611e18611765565b611921565b603454600160a81b900460ff16611e8a5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161051e565b6099805460ff19169055565b60008083601f840112611ea7578182fd5b50813567ffffffffffffffff811115611ebe578182fd5b6020830191508360208083028501011115611ed857600080fd5b9250929050565b600082601f830112611eef578081fd5b611ef960a06125f4565b80838560a086011115611f0a578384fd5b835b6005811015611f3357611f1e82611f7e565b84526020938401939190910190600101611f0c565b509095945050505050565b60008083601f840112611f4f578182fd5b50813567ffffffffffffffff811115611f66578182fd5b602083019150836020828501011115611ed857600080fd5b803563ffffffff811681146104a457600080fd5b803560ff811681146104a457600080fd5b600060208284031215611fb4578081fd5b8135611fbf8161271f565b9392505050565b600080600080600060a08688031215611fdd578081fd5b8551611fe88161271f565b80955050602086015193506040860151925060608601519150608086015167ffffffffffffffff81111561201a578182fd5b8601601f8101881361202a578182fd5b805161203d61203882612625565b6125f4565b818152896020838501011115612051578384fd5b6120628260208301602086016126ac565b8093505050509295509295909350565b6000806000806000806080878903121561208a578081fd5b86356120958161271f565b955060208701356120a58161271f565b9450604087013567ffffffffffffffff808211156120c1578283fd5b6120cd8a838b01611e96565b909650945060608901359150808211156120e5578283fd5b506120f289828a01611f3e565b979a9699509497509295939492505050565b60008060008060006080868803121561211b578081fd5b85356121268161271f565b945060208601356121368161271f565b935060408601359250606086013567ffffffffffffffff811115612158578182fd5b61216488828901611f3e565b969995985093965092949392505050565b60008060008060008060008060a0898b031215612190578182fd5b883561219b8161271f565b9750602089013567ffffffffffffffff808211156121b7578384fd5b6121c38c838d01611e96565b909950975060408b01359150808211156121db578384fd5b6121e78c838d01611e96565b909750955060608b01359150808211156121ff578384fd5b61220b8c838d01611e96565b909550935060808b0135915080821115612223578283fd5b508901601f81018b13612234578182fd5b803561224261203882612625565b8181528c6020838501011115612256578384fd5b8160208401602083013783602083830101528093505050509295985092959890939650565b6000806000806000806101408789031215612294578384fd5b863561229f8161271f565b955060208701356122af8161271f565b945060408701356122bf8161271f565b93506122cd60608801611f7e565b9250608087013591506122e38860a08901611edf565b90509295509295509295565b600060a08284031215612300578081fd5b611fbf8383611edf565b60006020828403121561231b578081fd5b81518015158114611fbf578182fd5b60006020828403121561233b578081fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114611fbf578182fd5b60006020828403121561237b578081fd5b5035919050565b60008060008060608587031215612397578182fd5b8435935060208501356123a98161271f565b9250604085013567ffffffffffffffff8111156123c4578283fd5b6123d087828801611f3e565b95989497509550505050565b6000602082840312156123ed578081fd5b611fbf82611f7e565b600060208284031215612407578081fd5b611fbf82611f92565b60008060408385031215612422578182fd5b61242b83611f92565b915061243960208401611f7e565b90509250929050565b60008284527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115612473578081fd5b6020830280836020870137939093016020019283525090919050565b600081518084526124a78160208601602086016126ac565b601f01601f19169290920160200192915050565b60006001600160a01b03808916835280881660208401525085604083015284606083015283608083015260c060a08301526124f960c083018461248f565b98975050505050505050565b60006001600160a01b038a16825260a0602083015261252860a08301898b612442565b828103604084015261253b81888a612442565b90508281036060840152612550818688612442565b90508281036080840152612564818561248f565b9b9a5050505050505050505050565b60006001600160a01b038716825285602083015284604083015283606083015260a060808301526125a760a083018461248f565b979650505050505050565b600060208252611fbf602083018461248f565b6000858252846020830152836040830152608060608301526125ea608083018461248f565b9695505050505050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561261d5761261d612709565b604052919050565b600067ffffffffffffffff82111561263f5761263f612709565b50601f01601f191660200190565b60008219821115612660576126606126f3565b500190565b600063ffffffff808316818516808303821115612684576126846126f3565b01949350505050565b60008160001904831182151516156126a7576126a76126f3565b500290565b60005b838110156126c75781810151838201526020016126af565b838111156112ec5750506000910152565b60006000198214156126ec576126ec6126f3565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461077757600080fdfea2646970667358221220a8653a7d556bc5df1758492a85ebf04c8af9ce6be964608ffa4d9183c31e966764736f6c63430008020033",
  "devdoc": {
    "author": "The Sandbox",
    "kind": "dev",
    "methods": {
      "batchTransferQuadToL1(address,uint256[],uint256[],uint256[],bytes)": {
        "params": {
          "data": "data send to the receiver onERC721BatchReceived on L1",
          "sizes": "sizes of quad",
          "to": "address of the receiver on L1",
          "xs": "x coordinates of quads",
          "ys": "y coordinates of quads"
        }
      },
      "getTrustedForwarder()": {
        "returns": {
          "_0": "trustedForwarder address of the trusted forwarder"
        }
      },
      "initialize(address,address,address,uint32,uint256,uint32[5])": {
        "params": {
          "_childToken": "address of the token on the child chain",
          "_fxChild": "child contract for state receiver",
          "_maxAllowedLands": "maximum number of Lands accepted",
          "_maxGasLimit": "maximum accepted gas limit",
          "_trustedForwarder": "address of an ERC2771 meta transaction sender contract",
          "limits": "the estimated gas that the L1 tx will use per quad size"
        }
      },
      "isTrustedForwarder(address)": {
        "params": {
          "forwarder": "address to check"
        },
        "returns": {
          "_0": "is trusted"
        }
      },
      "onERC721BatchReceived(address,address,uint256[],bytes)": {
        "details": "called on ERC721 batch transfer to this contract",
        "params": {
          "operator": "address of the one sending the ERC721 Token"
        },
        "returns": {
          "_0": "onERC721BatchReceived function selector"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "called on ERC721 transfer to this contract",
        "params": {
          "operator": "address of the one sending the ERC721 Token"
        },
        "returns": {
          "_0": "onERC721Received function selector"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Pauses all token transfers across bridge"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setFxRootTunnel(address)": {
        "details": "only owner can call this funtion",
        "params": {
          "_fxRootTunnel": "address of the fx-root tunnel"
        }
      },
      "setGasLimit(uint8,uint32)": {
        "params": {
          "limit": "the estimated gas that the L1 tx will use",
          "size": "the size of the quad"
        }
      },
      "setMaxAllowedLands(uint256)": {
        "params": {
          "_maxAllowedLands": "maximum number of lands accepted"
        }
      },
      "setMaxLimitOnL1(uint32)": {
        "params": {
          "_maxGasLimit": "maximum accepted gas limit"
        }
      },
      "setTrustedForwarder(address)": {
        "details": "Change the address of the trusted forwarder for meta-TX",
        "params": {
          "trustedForwarder": "The new trustedForwarder"
        }
      },
      "setupGasLimits(uint32[5])": {
        "params": {
          "limits": "the estimated gas that the L1 tx will use per quad size"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "to be called by external contact to check if this contract supports ERC721 token and batch token receive",
        "params": {
          "interfaceId": "the interface to be checked if supported by the contract"
        },
        "returns": {
          "_0": "0x5e8bf644 is the interface of IERC721MandatoryTokenReceiver and 0x01ffc9a7 for the Eip 165 supports interface's interface id"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Unpauses all token transfers across bridge"
      }
    },
    "title": "PolygonLandTunnelV2",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "batchTransferQuadToL1(address,uint256[],uint256[],uint256[],bytes)": {
        "notice": "send a batch of quads to L1"
      },
      "getTrustedForwarder()": {
        "notice": "Get the current trusted forwarder"
      },
      "initialize(address,address,address,uint32,uint256,uint32[5])": {
        "notice": "initialize the contract"
      },
      "isTrustedForwarder(address)": {
        "notice": "Checks if an address is a trusted forwarder"
      },
      "setFxRootTunnel(address)": {
        "notice": "sets the fx-root tunnel"
      },
      "setGasLimit(uint8,uint32)": {
        "notice": "set the estimate of gas that the L1 transaction will use per quad size"
      },
      "setMaxAllowedLands(uint256)": {
        "notice": "set the limit of lands we can send in one tx to L1"
      },
      "setMaxLimitOnL1(uint32)": {
        "notice": "set the limit of estimated gas we accept when sending a batch of quads to L1"
      },
      "setupGasLimits(uint32[5])": {
        "notice": "set the estimate of gas that the L1 transaction will use per quad size"
      }
    },
    "notice": "LAND tunnel on the child chain",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1933,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandTunnelV2.sol:PolygonLandTunnelV2",
        "label": "fxChild",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1935,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandTunnelV2.sol:PolygonLandTunnelV2",
        "label": "fxRootTunnel",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 40323,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandTunnelV2.sol:PolygonLandTunnelV2",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 35420,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandTunnelV2.sol:PolygonLandTunnelV2",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 10217,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandTunnelV2.sol:PolygonLandTunnelV2",
        "label": "_initialized",
        "offset": 20,
        "slot": "52",
        "type": "t_bool"
      },
      {
        "astId": 10220,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandTunnelV2.sol:PolygonLandTunnelV2",
        "label": "_initializing",
        "offset": 21,
        "slot": "52",
        "type": "t_bool"
      },
      {
        "astId": 12276,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandTunnelV2.sol:PolygonLandTunnelV2",
        "label": "__gap",
        "offset": 0,
        "slot": "53",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 9994,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandTunnelV2.sol:PolygonLandTunnelV2",
        "label": "_owner",
        "offset": 0,
        "slot": "103",
        "type": "t_address"
      },
      {
        "astId": 10108,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandTunnelV2.sol:PolygonLandTunnelV2",
        "label": "__gap",
        "offset": 0,
        "slot": "104",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 10305,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandTunnelV2.sol:PolygonLandTunnelV2",
        "label": "_paused",
        "offset": 0,
        "slot": "153",
        "type": "t_bool"
      },
      {
        "astId": 10396,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandTunnelV2.sol:PolygonLandTunnelV2",
        "label": "__gap",
        "offset": 0,
        "slot": "154",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 64658,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandTunnelV2.sol:PolygonLandTunnelV2",
        "label": "transferringToL1",
        "offset": 0,
        "slot": "203",
        "type": "t_bool"
      },
      {
        "astId": 64660,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandTunnelV2.sol:PolygonLandTunnelV2",
        "label": "maxGasLimitOnL1",
        "offset": 1,
        "slot": "203",
        "type": "t_uint32"
      },
      {
        "astId": 64662,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandTunnelV2.sol:PolygonLandTunnelV2",
        "label": "maxAllowedLands",
        "offset": 0,
        "slot": "204",
        "type": "t_uint256"
      },
      {
        "astId": 64665,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandTunnelV2.sol:PolygonLandTunnelV2",
        "label": "childToken",
        "offset": 0,
        "slot": "205",
        "type": "t_contract(IPolygonLandV2)42767"
      },
      {
        "astId": 64669,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandTunnelV2.sol:PolygonLandTunnelV2",
        "label": "gasLimits",
        "offset": 0,
        "slot": "206",
        "type": "t_mapping(t_uint8,t_uint32)"
      },
      {
        "astId": 65343,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandTunnelV2.sol:PolygonLandTunnelV2",
        "label": "__gap",
        "offset": 0,
        "slot": "207",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IPolygonLandV2)42767": {
        "encoding": "inplace",
        "label": "contract IPolygonLandV2",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint8,t_uint32)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}