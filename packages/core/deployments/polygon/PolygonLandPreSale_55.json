{
  "address": "0x2c22c0416cAb0Ad8E0431bf8307a8b113b300dEa",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "landAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sandContractAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "initialMetaTx",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "initialWalletAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "expiryTime",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "initialSigningWallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "initialMaxCommissionRate",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "estate",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "feeDistributor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "authValidator",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "topCornerId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountPaid",
          "type": "uint256"
        }
      ],
      "name": "LandQuadPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newMaxCommissionRate",
          "type": "uint256"
        }
      ],
      "name": "MaxCommissionRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "metaTransactionProcessor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "MetaTransactionProcessor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newWallet",
          "type": "address"
        }
      ],
      "name": "NewReceivingWallet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "referee",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "commission",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "commissionRate",
          "type": "uint256"
        }
      ],
      "name": "ReferralUsed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newSigningWallet",
          "type": "address"
        }
      ],
      "name": "SigningWalletUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "reserved",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "info",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "assetIds",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes",
          "name": "referral",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "buyLandWithSand",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "changeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "referral",
          "type": "bytes"
        }
      ],
      "name": "decodeReferral",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "disableWallet",
          "type": "address"
        }
      ],
      "name": "disablePreviousSigningWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExpiryTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxCommissionRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMerkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSigningWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "isMetaTransactionProcessor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "referee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "expiryTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "commissionRate",
          "type": "uint256"
        }
      ],
      "name": "isReferralValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "metaTransactionProcessor",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setMetaTransactionProcessor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "newWallet",
          "type": "address"
        }
      ],
      "name": "setReceivingWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMaxCommissionRate",
          "type": "uint256"
        }
      ],
      "name": "updateMaxCommissionRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newSigningWallet",
          "type": "address"
        }
      ],
      "name": "updateSigningWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "assetIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "withdrawAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x03b8bba8ce04041a5c0315cea94e5f325139d160bc8394789e6901d731e4ec34",
  "receipt": {
    "to": null,
    "from": "0xCba49d154b4Bb9a9aD7F5Dad396CB9a0a3a62ABc",
    "contractAddress": "0x2c22c0416cAb0Ad8E0431bf8307a8b113b300dEa",
    "transactionIndex": 59,
    "gasUsed": "2668417",
    "logsBloom": "0x
    "blockHash": "0x75fc17c8da9daf997cc94da684975538b10aaf14d8845077c68afbe98dcd6d14",
    "transactionHash": "0x03b8bba8ce04041a5c0315cea94e5f325139d160bc8394789e6901d731e4ec34",
    "logs": [
      {
        "transactionIndex": 59,
        "blockNumber": 54140109,
        "transactionHash": "0x03b8bba8ce04041a5c0315cea94e5f325139d160bc8394789e6901d731e4ec34",
        "address": "0x2c22c0416cAb0Ad8E0431bf8307a8b113b300dEa",
        "topics": [
          "0xb21eb88b4e33b3f1281830a7178d74d8aa73220416215726b68ae23d539515cb"
        ],
        "data": "0x000000000000000000000000bbba073c31bf03b8acf7c28ef0738decf36956830000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 210,
        "blockHash": "0x75fc17c8da9daf997cc94da684975538b10aaf14d8845077c68afbe98dcd6d14"
      },
      {
        "transactionIndex": 59,
        "blockNumber": 54140109,
        "transactionHash": "0x03b8bba8ce04041a5c0315cea94e5f325139d160bc8394789e6901d731e4ec34",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000cba49d154b4bb9a9ad7f5dad396cb9a0a3a62abc",
          "0x00000000000000000000000073d378cfeaa5cbe8daed64128ebdc91322aa586b"
        ],
        "data": "0x000000000000000000000000000000000000000000000000011cb82723004f00000000000000000000000000000000000000000000000000675740a32c69ccbb0000000000000000000000000000000000000000000003e76c43660f118f4496000000000000000000000000000000000000000000000000663a887c09697dbb0000000000000000000000000000000000000000000003e76d601e36348f9396",
        "logIndex": 211,
        "blockHash": "0x75fc17c8da9daf997cc94da684975538b10aaf14d8845077c68afbe98dcd6d14"
      }
    ],
    "blockNumber": 54140109,
    "cumulativeGasUsed": "8265722",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9d305a42A3975Ee4c1C57555BeD5919889DCE63F",
    "0xBbba073C31bF03b8ACf7c28EF0738DeCF3695683",
    "0xBbba073C31bF03b8ACf7c28EF0738DeCF3695683",
    "0xfD30a48Bc6c56E24B0ebF1B0117d750e2CFf7531",
    "0x1b47567CBE36e63293A7A2018F79687f942aB24C",
    "0x05a0a701d14e98297670b510f5090989f775c18a85cde11c8087f78e270fd611",
    1710936000,
    "0x3044719d139F866a44c988823513eCB93060bF1b",
    2000,
    "0x0000000000000000000000000000000000000000",
    "0xd19cc137bb848d3a48ad8ad883886b67c26761dc",
    "0x42a4a3795446A4c070565da201c6303fC78a2569",
    "0x7804fb2AF15bB1323795A888B09913cEf629Ffda"
  ],
  "numDeployments": 1,
  "linkedData": [
    {
      "x": 176,
      "y": 33,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x45656edeafda4f9a0d027a18a91c238992b516be363390afa95cf57deca2dc94",
      "assetIds": []
    },
    {
      "x": 172,
      "y": 31,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x1ced86ff9a616674148a7019a83798e0f8702c2b34f2db7f116d19609a8328a1",
      "assetIds": []
    },
    {
      "x": 170,
      "y": 33,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0xf88765b67fbe27289e58688160ae25f6ffaf53e6b14a21fc14acb267510bdcaf",
      "assetIds": []
    },
    {
      "x": 162,
      "y": 21,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0xb75e97528106f682b95de7547ecd4f3411d64612e7822c102417f7e3e3308a97",
      "assetIds": []
    },
    {
      "x": 162,
      "y": 17,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0xf198b89f923b4289862b0c6adce9dceb71ed05f8f2213484e22a4d6c057426b6",
      "assetIds": []
    },
    {
      "x": 170,
      "y": 16,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x5f53352665f3c3186f48df1a3c49a116f1a7a4f5af07f2f49e880d895dbdcb96",
      "assetIds": []
    },
    {
      "x": 175,
      "y": 22,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0xc8b32ff37c80ab6d95092d098016fa41ca4ec3a0221038c536e71b213f4699ff",
      "assetIds": []
    },
    {
      "x": 176,
      "y": 19,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x1d450e8207f24a1994a45a7ea714819e808ad7a1adf3fe88ee3ed940a9417620",
      "assetIds": []
    },
    {
      "x": 168,
      "y": 35,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x1df7802f208f9447c4eb716f8af8113a4423e6b1b7b06b92a6405b04376350ea",
      "assetIds": []
    },
    {
      "x": 169,
      "y": 35,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x02a3a670b29e48c33de3d53014995e989ad862364d2054650f738e3d125973be",
      "assetIds": []
    },
    {
      "x": 170,
      "y": 35,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x093023fd6992d56203d212a10ed90b69775c729f250ae860602beb0033f45586",
      "assetIds": []
    },
    {
      "x": 171,
      "y": 35,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x3768caceabd8f7312f1f6a23836af7aa6bd2d41f93021370e08f53ee0cd0124b",
      "assetIds": []
    },
    {
      "x": 172,
      "y": 35,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xdd4aba40f7925c5d56c12b4089e9af5c53c8af94b3c1d0df57e3456e5e65470d",
      "assetIds": []
    },
    {
      "x": 173,
      "y": 35,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x85a8b1d5e38f76ee787b81dd0371b33a9952dd439984dfee653c75c5d22feca1",
      "assetIds": []
    },
    {
      "x": 174,
      "y": 35,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xaed712562da13f360e4c618d44986fda1d80908a62ac32ab7b842d630fd78110",
      "assetIds": []
    },
    {
      "x": 175,
      "y": 35,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xa1c8d14c0edf83a75bf5dc56aa6c4f75f5da687cd1c5471c9d40b7f9b8242da3",
      "assetIds": []
    },
    {
      "x": 176,
      "y": 35,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xed1d1432ed3ab1eb2cc139c217d9178106a9dc23413ea29941cfdacc0c8f67e5",
      "assetIds": []
    },
    {
      "x": 179,
      "y": 35,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x782de60ef28c900281877a32a929078e691e5952893165782b670ea0318ca726",
      "assetIds": []
    },
    {
      "x": 179,
      "y": 34,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x9a29b94ce035240f3069fd721de30aa30d5d49ecd8d4fa8320465dc760e6dea2",
      "assetIds": []
    },
    {
      "x": 179,
      "y": 33,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x66e8e56faad258e4f7ab9eef20b21c716ee6b4d7a135a6e265225c781caf95bd",
      "assetIds": []
    },
    {
      "x": 179,
      "y": 32,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xd713e6215e418dbd114f02ddf7f0c36d93cc1598b8435de1a0ab58bf48300a6c",
      "assetIds": []
    },
    {
      "x": 179,
      "y": 31,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x94e809a3214741b064ea28061ddd0d373722554130736d29dc390ff57862e51c",
      "assetIds": []
    },
    {
      "x": 179,
      "y": 30,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x94c610c48661b58cb8302aca038fd3eff35fab8dae58077e71a12d8a2f4fdfd4",
      "assetIds": []
    },
    {
      "x": 179,
      "y": 23,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xaf1c1f33fe8967e4f361d750bc6d8fc412bf98d3e3570463020f074f09e92f8a",
      "assetIds": []
    },
    {
      "x": 179,
      "y": 22,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xa86f6e890041c7f874969e15a8b5ef1caf3df8edb017aa94e1665b80680d5402",
      "assetIds": []
    },
    {
      "x": 179,
      "y": 21,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x6be146e832feaf339a739013afe46bd9b6a54661923ea813f190943c1934bd58",
      "assetIds": []
    },
    {
      "x": 179,
      "y": 20,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xb6497c69a60e385d862695de35d47d7ec811e495524bbc3de54d39a65064ccca",
      "assetIds": []
    },
    {
      "x": 179,
      "y": 18,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x0b2c85fef93a871498a15272c673d3e49aee576e561e87a94a5fb58d9230f833",
      "assetIds": []
    },
    {
      "x": 179,
      "y": 19,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x6be6ab94a02adb70943f90a40d3717e66ec203d6c27ce2421a18fe60cb433c67",
      "assetIds": []
    },
    {
      "x": 174,
      "y": 18,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x1aee9ae4f077ce07bf9b5d45765a9fe42d6bf5422898c6d61fcb1041a02c4870",
      "assetIds": []
    },
    {
      "x": 175,
      "y": 18,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x082f772c502a17fff3e04f8ccf008c3a89135b6a2dd18d6e840f45fa65640008",
      "assetIds": []
    },
    {
      "x": 176,
      "y": 18,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x6c7b285a304e7b3e2fd56561c9b1bd2428c61e98e9924637d714d228ccaeaec5",
      "assetIds": []
    },
    {
      "x": 177,
      "y": 18,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xb1a8d16e8eca96798247b8c6a76e34ac9b58e7f9b1f72f40a551d248db0057d4",
      "assetIds": []
    },
    {
      "x": 178,
      "y": 18,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x4ad138ab7393dc2c45b2571defc588e5bae161605bc68165ffcf51e4689271cf",
      "assetIds": []
    },
    {
      "x": 178,
      "y": 23,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xec5ca7c68c4b0f1740acbb25af193097a7de914d6860dc4dab53a5b6965a6633",
      "assetIds": []
    },
    {
      "x": 177,
      "y": 23,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xb682f38f11b447febbf69326ae41a02f295871cdbb88ebc6fccea65d551f7a6b",
      "assetIds": []
    },
    {
      "x": 176,
      "y": 23,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xefcff7e688db5bd334faef296701eaff6aee2c4e653a95f687b77e7ca37b42bb",
      "assetIds": []
    },
    {
      "x": 175,
      "y": 23,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x8614ae4ee84ccd73ed137baebb3781fefb2e7b7d619d32827e0d0a2770f40d17",
      "assetIds": []
    },
    {
      "x": 174,
      "y": 23,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x2b444160f0cf40267194609b280bd2500f45146cbc7940a05f7c42a1fa11e6bd",
      "assetIds": []
    },
    {
      "x": 174,
      "y": 22,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x00dbbcca5b0bca7ff179e5094c7debb8e39aa6bc1e788e8552ac158de528c047",
      "assetIds": []
    },
    {
      "x": 174,
      "y": 21,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x90aa21ae360829bfeac81f6a386aaf223cdd43f6ff275e08c517b529f315ae72",
      "assetIds": []
    },
    {
      "x": 174,
      "y": 20,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x0fe28e7acea5884906bb5d3342a40f879dc75b069667444926adb9752f269701",
      "assetIds": []
    },
    {
      "x": 174,
      "y": 19,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x08caf79acd975095bb60ce8fdfd088fd7423149a1433536f7a836136c3218722",
      "assetIds": []
    },
    {
      "x": 175,
      "y": 21,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x69245c63999b048755cd43baefafd1ea86d4ca45851d86be6a7fb71dacd853cc",
      "assetIds": []
    },
    {
      "x": 176,
      "y": 21,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xb77deb42feee2698cfe697e700b0050e8f9cdc9a6693819f48ff49f735036c7b",
      "assetIds": []
    },
    {
      "x": 176,
      "y": 22,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xb5ba799cc20ac979264a86d42fb5769564ef55b2d01ff0a67b7872ea4c17dbc2",
      "assetIds": []
    },
    {
      "x": 178,
      "y": 22,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x7a7a15a302684dced06e735ca9b195e84eb43406590a16d8c1ed92af67146d23",
      "assetIds": []
    },
    {
      "x": 178,
      "y": 21,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x85f586f29f6480b0f18f554373088408f19e23bbb3ccdc50cf6c0d92882e1f32",
      "assetIds": []
    },
    {
      "x": 178,
      "y": 20,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xe0c106697ba1a3beb3db9552d70f7159a0723151dcd55fe5aa7ea51f065b81e3",
      "assetIds": []
    },
    {
      "x": 178,
      "y": 19,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x2540c58edaf09ace60c15844062eb2cb595fd2d9d65ba80f10b47f12756a68e9",
      "assetIds": []
    },
    {
      "x": 177,
      "y": 19,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x8deeb7e3cf38e52a98a204566c0ec58d316d52bec9ba7ead7e0add8117d07cb6",
      "assetIds": []
    },
    {
      "x": 177,
      "y": 20,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x2caa947a6e7767ff22ae4d9b55291050619589911be1f8d73316a879933eb2e9",
      "assetIds": []
    },
    {
      "x": 177,
      "y": 21,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x6e59ca18cfce876ed7c486bf3d5cdcf95c9545c540a643d4212dd93d7a98189b",
      "assetIds": []
    },
    {
      "x": 176,
      "y": 20,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xb4e28f64c44dff0fdc7d62904960c90f6adb7178c2df6026de076d678fd46edc",
      "assetIds": []
    },
    {
      "x": 175,
      "y": 20,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xc7e061f9af4f88c079992202139788493c516c1d8e7ed347b6e5840248ded4e6",
      "assetIds": []
    },
    {
      "x": 175,
      "y": 19,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x40c76d5d4a2f601d2509c9900e6bb265be43e90951a07134d5a25729e042de43",
      "assetIds": []
    },
    {
      "x": 177,
      "y": 32,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x7386f83333938100dbb14d87e5778ac0f05fa95078620562baaa7a639e9348ae",
      "assetIds": []
    },
    {
      "x": 178,
      "y": 32,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x4f981e2db34ab9ab9f2ffc068d528066e1b61cc02dc47b95273c61d8f2198b69",
      "assetIds": []
    },
    {
      "x": 178,
      "y": 31,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x37fbdbccb8f3cc06ae8d227108752cad0e8f2f293733ee57de8bc30e32a88e23",
      "assetIds": []
    },
    {
      "x": 177,
      "y": 31,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x8614dba9383437823c8ed43af28b878cc21d2d6fe0f6cd1ce0d26997c1d312be",
      "assetIds": []
    },
    {
      "x": 177,
      "y": 30,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xefc1aec950481f779c91272487293d90730868d261bf6ef0362084c13f21b240",
      "assetIds": []
    },
    {
      "x": 178,
      "y": 30,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x5cc1b42ff6173738acf267612fc8d55d7ea3fb5d1a2f330ec554602a77e483c3",
      "assetIds": []
    },
    {
      "x": 176,
      "y": 34,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x281208f0f483869bc53e483822c50d97334ab50400a1ab0b76bf0934524e7955",
      "assetIds": []
    },
    {
      "x": 175,
      "y": 34,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xc7b8c99616120b54e2e3d4add3434cfc178031475eb07e7438d389a052519e1d",
      "assetIds": []
    },
    {
      "x": 174,
      "y": 34,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x96686b70bd23f994a1a5b47e20ddbb494beb74e4314536aea32835e3552dea6c",
      "assetIds": []
    },
    {
      "x": 173,
      "y": 34,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x7287a62545181e3bd42413fd85801ee9dfde4b6ab1b8a6c97c765f5e0cdacf89",
      "assetIds": []
    },
    {
      "x": 172,
      "y": 34,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xec6d06115f3c90891fc19013b278fb08aa7eb9b5492d24f9b575f1cd4b86d70b",
      "assetIds": []
    },
    {
      "x": 171,
      "y": 34,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x79e8dd749c05cade1067a85dd0937457eb5a30ce928596b5e1cf21d3551b712b",
      "assetIds": []
    },
    {
      "x": 170,
      "y": 34,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xef8de0ec1266038b5b6b7b68a0cbe0e2e555d8b407570025077922cbb584d415",
      "assetIds": []
    },
    {
      "x": 169,
      "y": 34,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x9afd70f86b65d2f25bf792934396582dce9a2290d8fdb11d2a3d1a2a5c8b42c1",
      "assetIds": []
    },
    {
      "x": 168,
      "y": 34,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x9749cd305669c2305cb9e4638993135f98dbba54954163c586e48d77badb57df",
      "assetIds": []
    },
    {
      "x": 175,
      "y": 33,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xe007ccb457f7b24619e8625669f218ba039b8b1e34760ae190151880a40f7525",
      "assetIds": []
    },
    {
      "x": 174,
      "y": 33,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x7b132f1dbc4fd299f8a9df93e78e2c26f5838468d1a4c78c1bc9f5f42dd71c85",
      "assetIds": []
    },
    {
      "x": 173,
      "y": 33,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x7c942687ef3b52263e3dfb173f0a3da3da66b321b2eba31b08a159225aee8783",
      "assetIds": []
    },
    {
      "x": 172,
      "y": 33,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x713fae27dd5cf2e6b4d20310730533866e0b5556340dd7809e9ed899e9eb1e02",
      "assetIds": []
    },
    {
      "x": 171,
      "y": 33,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x130a872cadf6ca382539f648d0b6e5fabfb60554b27f1f463c19262f95123492",
      "assetIds": []
    },
    {
      "x": 169,
      "y": 33,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x42ed2169f68a83420cf62c0f8b1fac3a0128be4770ddaa84413c97f16d06ed6b",
      "assetIds": []
    },
    {
      "x": 168,
      "y": 33,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x3d7c4b92c6992c40bddb713e794fbf209bd467c8a4044295be81472e9d0ad615",
      "assetIds": []
    },
    {
      "x": 168,
      "y": 32,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x50252737732872d13b5abe7ef82a9032b83950ee99990e271355bfc01a322610",
      "assetIds": []
    },
    {
      "x": 168,
      "y": 31,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xaf6ed6c78e6c48c06d72e868858484df28542a0d73d5dd02aa55f99ec15236ff",
      "assetIds": []
    },
    {
      "x": 169,
      "y": 31,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x5ecce82dc82ef90f25b67e4861dfaa16861293a6fdb22d5a6f344b17b71631eb",
      "assetIds": []
    },
    {
      "x": 169,
      "y": 30,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x7da47d2e97e348664a87e2e0005cc66982951025bfbcfffa2488c4352ed7527a",
      "assetIds": []
    },
    {
      "x": 168,
      "y": 30,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xf8f000125f2d59ce3f96880186405a7a4c9505d3fea89cebe210ee5a201495eb",
      "assetIds": []
    },
    {
      "x": 169,
      "y": 32,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x2362f193f58106819426e936d8a0d3925c757d52668b0afc2b01c48ecfa7dca6",
      "assetIds": []
    },
    {
      "x": 170,
      "y": 32,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xe97317d5a278b8e8e2dbef61d8742ea7180d7da14df0d760aa222f9d4d8eb297",
      "assetIds": []
    },
    {
      "x": 171,
      "y": 32,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x87e0cdd18682188c51af22c3d0d275f3f18296ae45fb3ec0231e28283ce64fe3",
      "assetIds": []
    },
    {
      "x": 172,
      "y": 32,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xc530ec6965f5c6413a5bb151af583afd13bf4047db2ceee90f6c87f6ec3e4883",
      "assetIds": []
    },
    {
      "x": 173,
      "y": 32,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x49686216fa687c6c7876cb04f1446c8dec1e290783a85cf33d1400aed1efc518",
      "assetIds": []
    },
    {
      "x": 173,
      "y": 31,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x19bdf15c9a6d79412c485cfba77f216cd83391414bc1c0781101c609e05fde92",
      "assetIds": []
    },
    {
      "x": 173,
      "y": 30,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xa14a9fa450a4b9ea205834ab802943ee0d6103f9ff6cd6e8d74cadbc733a214d",
      "assetIds": []
    },
    {
      "x": 172,
      "y": 30,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xe8ed6198f3da11fa4ee4b8a018d5b46d247ef4dee5a639a74a41775b0f838e37",
      "assetIds": []
    },
    {
      "x": 171,
      "y": 30,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xc47f7ba07196679f437f65f2ace915071cf1231f587514702831fc94591a9e94",
      "assetIds": []
    },
    {
      "x": 171,
      "y": 31,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x182933ebe5a6f6cbcca5cc2294c4b49156c551aa31973ea0aa8edfe752896a1f",
      "assetIds": []
    },
    {
      "x": 170,
      "y": 31,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x1e50df06cabf3c8474b9cd8b1573b08a2fd0b34dc0b6e8c7ec7af0d313d1c802",
      "assetIds": []
    },
    {
      "x": 170,
      "y": 30,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x80fe1d9a85140add2b4178c7d2d3e980c1df2fec06d5495d755ac3222f638652",
      "assetIds": []
    },
    {
      "x": 162,
      "y": 32,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xdc1215385c216394be350d430b22670ea279ab4e6661a76f8ad2f71f94a3927b",
      "assetIds": []
    },
    {
      "x": 164,
      "y": 32,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x0cdbb8392f08710b8e0742d1d514f769f91b725772bca49090223b87be7eb43b",
      "assetIds": []
    },
    {
      "x": 164,
      "y": 31,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x0f08335a53b71a2d50356906a8adc44635b248d6b389b5acb09903a57367bd46",
      "assetIds": []
    },
    {
      "x": 164,
      "y": 30,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x86f9446dda6991900e491289758bceaaec8f64c08dba9fcfbff5c5d574994e62",
      "assetIds": []
    },
    {
      "x": 163,
      "y": 30,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xbf31436d42f170b9c8acb99cef33a6f62becd6b632c62ba7a45a52a9e52f1a6e",
      "assetIds": []
    },
    {
      "x": 162,
      "y": 30,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xd5159d8fde8190e997c05cc662ad9aeee196c6290c1ebe4a33c8ecd5f02412f3",
      "assetIds": []
    },
    {
      "x": 162,
      "y": 31,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x83dc6f05ff0c75eb2e44a8433503796829b549d3c5a75233339b3cc7a7700441",
      "assetIds": []
    },
    {
      "x": 163,
      "y": 31,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x5f85e9ee2495eb94d2ff8b93fd8253968e546224b1e33db51fdbd72ddd9b95a7",
      "assetIds": []
    },
    {
      "x": 161,
      "y": 29,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x7ba5a82eb71789254e1131eb408c2082ed571e841b2105ffe031ffa7afbbbdc8",
      "assetIds": []
    },
    {
      "x": 161,
      "y": 28,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xed27f936e3062fdf1802d476c695b0e78145b2c69c74c997fdcd7ae2e047e955",
      "assetIds": []
    },
    {
      "x": 161,
      "y": 27,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x5f556c147fda5fb51b432501d2168e9aaf9174285a6bf88ffd22f485a74577bb",
      "assetIds": []
    },
    {
      "x": 161,
      "y": 26,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x37113989ce0901164942a95da7720e1d33c867097d04ef0a51c7e1b5ff5da227",
      "assetIds": []
    },
    {
      "x": 161,
      "y": 25,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xa12ae5feb2f81714a464ec40c2284609ecf7e0bf4be4736bc3dcde0f964f8cf9",
      "assetIds": []
    },
    {
      "x": 161,
      "y": 24,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x33442c88e29e5a6c66f5c0ebe457c2aefc2c4f597bf49db812d313f10bb187a2",
      "assetIds": []
    },
    {
      "x": 161,
      "y": 23,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xb9b27c8fb93b2a1f01aead28037536e9db8cb92ef89f883f78364e2cafd4ff7e",
      "assetIds": []
    },
    {
      "x": 162,
      "y": 23,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x31708388200cc826f602a729f4957cab57585ce456ad720b36e16cc083d9f832",
      "assetIds": []
    },
    {
      "x": 163,
      "y": 23,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xa248ca6166d35fda03fd673151f5e94e40ed01f3abb0e081e0966339cf08d07f",
      "assetIds": []
    },
    {
      "x": 164,
      "y": 23,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x70fa3438bf8db5f4ac78805cee81cf9c984a5b44c108825e97a2ac3f332bff9e",
      "assetIds": []
    },
    {
      "x": 165,
      "y": 23,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xf17d447248d8d54c10b26a955a5cc4415446ae6f42e6d4d3ac60d3e43061592a",
      "assetIds": []
    },
    {
      "x": 166,
      "y": 23,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x70d2c8b279a2aaf18959c2186f805462917afef47b94da2ef1aba5ab9597933f",
      "assetIds": []
    },
    {
      "x": 167,
      "y": 23,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xf5b03d5940fc6d79ed6784c28d7e511b0bffb0d52ad768c4ae18b2887559ac60",
      "assetIds": []
    },
    {
      "x": 162,
      "y": 22,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xdcb1d95e9779054c9c1ba7a418201c73e867c4f54bc855583c8f46f6563859f6",
      "assetIds": []
    },
    {
      "x": 161,
      "y": 22,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xc9cb008698ce9910e1f939791995059a275b67848dd7658a38cd04efc14dc71c",
      "assetIds": []
    },
    {
      "x": 163,
      "y": 22,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xd66671bdac88ef2c57b8fd0c1b46cb1c9d2d17650d24c75f34f31be638adcace",
      "assetIds": []
    },
    {
      "x": 164,
      "y": 22,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x600ff501000cbfdcaa7a9fec278a653bca39ce3bf44f523cf09837ed4c7bf0d7",
      "assetIds": []
    },
    {
      "x": 165,
      "y": 22,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x36a8e9b5af5e4c59ee3eebcde2929c874be73bc9391fc71c853ad6243907e110",
      "assetIds": []
    },
    {
      "x": 166,
      "y": 22,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x270b22315920ba7090dc881d024ac2623d465b8c775fbb7d2bec18371bc84b59",
      "assetIds": []
    },
    {
      "x": 167,
      "y": 22,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x900ffdf6ebb58ccc2bdb0f0717894494f4c85e1adeb7c060eb69e4fffc9a5976",
      "assetIds": []
    },
    {
      "x": 166,
      "y": 21,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x4e896f91daeda0b7fdcd37206c49d9d876f4fbc45f0f7de7c9410fb0bead524a",
      "assetIds": []
    },
    {
      "x": 165,
      "y": 21,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x49cde7d0e3c27ad0c8a5874a1963b5b29c315c59865af37b738b6c761d12721b",
      "assetIds": []
    },
    {
      "x": 164,
      "y": 21,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xfe32498718046aaee5fd7cbee9bc3c67238b859097665fe30331bb42e4944408",
      "assetIds": []
    },
    {
      "x": 163,
      "y": 21,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xb4734b81e45d0c59e7f5f73467a8d08f33f58a851cd87fa691d5c5faafd4922f",
      "assetIds": []
    },
    {
      "x": 161,
      "y": 21,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x31fb500d86c1e2fa41852d6f2edfcfd45d94f9e8b32bbe0e1d3505f03bd610ce",
      "assetIds": []
    },
    {
      "x": 161,
      "y": 20,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x7e57e70b130acff9330fd2f7bc3b97af873c4722bab201a76460f98ea66e0844",
      "assetIds": []
    },
    {
      "x": 162,
      "y": 20,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x2df82b08b2f154f3bbea5426c5306e79c35016f3a2e0f5b98b10e3f2b42db35d",
      "assetIds": []
    },
    {
      "x": 163,
      "y": 20,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xf07959b170de6b84779bb41ec135ee5ed83dfe16573c1944e9a24ace26b74e12",
      "assetIds": []
    },
    {
      "x": 164,
      "y": 20,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xb7a132fd2938b7fe7d3d80d7759538320fc150b86692b50315bab5b5b43be970",
      "assetIds": []
    },
    {
      "x": 161,
      "y": 19,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xc56cd24d897dc297c69dbe77868802f75eefb0f2e4d93598d38f3181d963441a",
      "assetIds": []
    },
    {
      "x": 162,
      "y": 19,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x87d1591b034336bb6cf848567d3dcb569e3ce5419c702a4100970b0aa31aa6ec",
      "assetIds": []
    },
    {
      "x": 163,
      "y": 19,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xf77ddcc273ba47a5134a7410c64e4e4dcb19b732b2097ce61b5c1ff804ebd777",
      "assetIds": []
    },
    {
      "x": 164,
      "y": 19,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xd2c1e7beeb286e9f1e5f5db00ff6ca050949a00f404293efba7f5fc093d7fda8",
      "assetIds": []
    },
    {
      "x": 164,
      "y": 18,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xa5dcd9bb172aba422cbd9e7cafb95821152ff6da49888daba39805eb763f55b6",
      "assetIds": []
    },
    {
      "x": 163,
      "y": 18,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x5fb0a7b5afe1490313d5775b8728dac8043a3c7eed5e8ab2436f4c7fde5b0d9d",
      "assetIds": []
    },
    {
      "x": 162,
      "y": 18,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x5ad61b949169e6305e42e28de2598cc8c61dd110abe096abf26db5bde897880d",
      "assetIds": []
    },
    {
      "x": 161,
      "y": 18,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xedf1debd02fa2c25a6541ce329b0c434d9eeb8cc4b155bd63bcbce36e1c76e8f",
      "assetIds": []
    },
    {
      "x": 161,
      "y": 17,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x497f9a69c8d953885d08ace25c90f734684bb8eb814e262eb63b14a67509c927",
      "assetIds": []
    },
    {
      "x": 163,
      "y": 17,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x975de88ba9b23bd87e78bed54d4533d360283687843096a4cbe587106a085dad",
      "assetIds": []
    },
    {
      "x": 164,
      "y": 17,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x3c5d37172bd29f4f468d6b93d5ba4fbc7e19555702b4fa0eb5a21fb74f8a5849",
      "assetIds": []
    },
    {
      "x": 165,
      "y": 17,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x6dcb8081974d734c78091d0c5293eba5e233505bfed0c484b7fb3629ad7b8c1d",
      "assetIds": []
    },
    {
      "x": 166,
      "y": 17,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xd35a81969b5f4cf530e3654cba1603327fe64f6512ab3dbd6bd5b2a0d96ac395",
      "assetIds": []
    },
    {
      "x": 167,
      "y": 17,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xc43bfe80c9c5d43ffa2f7aa84f4ad81a7d0c92aae2d6b0cfb593077e1c600119",
      "assetIds": []
    },
    {
      "x": 168,
      "y": 17,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x9fe93ed498d803687e6bb19267711a2a47e533772cac8b1e993a854934d79b4f",
      "assetIds": []
    },
    {
      "x": 168,
      "y": 16,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xecfdf2c15773e17aba449badfd0c044ae24f619753b0dcac52d2084752d2ea81",
      "assetIds": []
    },
    {
      "x": 169,
      "y": 16,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xca7981fc391ed342800288b55ca3c288a2e927c6bdbe31f7026dd861a154e1bc",
      "assetIds": []
    },
    {
      "x": 170,
      "y": 17,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x4e1e19c002229c4cc4d94e9bddaf7ac2b7b6519e43dba0459e0a37f72a501d74",
      "assetIds": []
    },
    {
      "x": 169,
      "y": 17,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xfb595f262f168caa3e4dac0bde3fcd6d3ace1880db9223756207a81be5129733",
      "assetIds": []
    },
    {
      "x": 170,
      "y": 15,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x4f39fba860299932da1e6453cbe69fbd2580e79fcb5d2bb57fae1b7ad26868a3",
      "assetIds": []
    },
    {
      "x": 169,
      "y": 15,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x4427273a2996c6ae770039640286eb6a1a5baa8fa99d36e0177631b8e787c45d",
      "assetIds": []
    },
    {
      "x": 168,
      "y": 15,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xddce969aa5d482701717510583f17522dd233f2c1243e13418b9ee79d022b2fd",
      "assetIds": []
    },
    {
      "x": 167,
      "y": 15,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x1c02d1f97dbdbf9c7ae799d0b24fb32e25e9d1d873df6b2cfc293eb0bf51b79e",
      "assetIds": []
    },
    {
      "x": 166,
      "y": 15,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x89321d25b08186d1089084138d9777a9ce15beaac76d281361486bad7ff882dc",
      "assetIds": []
    },
    {
      "x": 165,
      "y": 15,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xa14c2cd12e9655efe8fd17a2d0951f25c7ce775121b836a8b30083f2e43b2c25",
      "assetIds": []
    },
    {
      "x": 164,
      "y": 15,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xecd2234c45a5bc7802e1a60e43dd674414503c37af973535c38c8cb99342aca4",
      "assetIds": []
    },
    {
      "x": 163,
      "y": 15,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x5bd363fba863dbf0ef7a287920e9f3b5818e6428ba2432edbddfd31af83a9c2a",
      "assetIds": []
    },
    {
      "x": 162,
      "y": 15,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x145ab166ce945b49b8151631575e9387e61fccd1e7b19a945bc0f15a7bf7f34a",
      "assetIds": []
    },
    {
      "x": 161,
      "y": 15,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x95cdadecd512abd8dcbb29e1eb6c6f8fae19bc3ba1a46ae79df4e7e65a2cb905",
      "assetIds": []
    },
    {
      "x": 167,
      "y": 16,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x620feee51dd8e82fa0ba14d1305ed95a4e4c015c5ff243b2ca2a42152948c276",
      "assetIds": []
    },
    {
      "x": 166,
      "y": 16,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x7c66aeb506295cb5a96c01b5f16168e43059c82b304f7ec1a046efa61d2dd2df",
      "assetIds": []
    },
    {
      "x": 165,
      "y": 16,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x664b1bc7063e8caf432d6393cce60cdc1613b006d05ca89eaef46af72ed1b981",
      "assetIds": []
    },
    {
      "x": 164,
      "y": 16,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x31a871ce249c59d9798b6d3b615fee034cf14bcd79004b5529710784f704e0a9",
      "assetIds": []
    },
    {
      "x": 163,
      "y": 16,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x91de0d62b9f15f0d62d387175d9f82936b14c84270beec9af83d7e87c35f8051",
      "assetIds": []
    },
    {
      "x": 162,
      "y": 16,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x1081975eafa04c9fc3a93d9eb6daf642dfb0cc76e1c5bb762aef1b93a08e2444",
      "assetIds": []
    },
    {
      "x": 161,
      "y": 16,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x553abdc1ae997330790c62c4dd03a4339a10f0d600c4fc230f41816b8d0228dd",
      "assetIds": []
    },
    {
      "x": 160,
      "y": 14,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xc433a3070e267d884305a120173d286e2fd0eb3c7123ddd761cc09df944dbbda",
      "assetIds": []
    },
    {
      "x": 161,
      "y": 14,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x363390b6118bb585234f2a35b2f91e3ef29ad6ba1f351e9387386745edd6030b",
      "assetIds": []
    },
    {
      "x": 161,
      "y": 13,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xbf2aa11f410ed6f75879bc745dfadbb9e4be63bfc37871f192f529b0e566d701",
      "assetIds": []
    },
    {
      "x": 161,
      "y": 12,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xe168982f062213f6de9ae073a15578758fc468130caa9dc4d22c671a27cdd965",
      "assetIds": []
    },
    {
      "x": 160,
      "y": 12,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x886a02ca06c6681d202e868b4359859e0996ce783f632305d25474bf0f6cc034",
      "assetIds": []
    },
    {
      "x": 160,
      "y": 13,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x39aad78cd89a8e591c464051d456b4bd33c2adf3929dd2941836650fb09a4513",
      "assetIds": []
    },
    {
      "x": 165,
      "y": 14,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xab1e39fbf47a241e68a691012452e039ff09e90433dd476b37eea12f279e7c82",
      "assetIds": []
    },
    {
      "x": 166,
      "y": 14,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xff630fed4c517b91d8bd09fd36260a8e776811e3a3139f9a3545acaec1a552af",
      "assetIds": []
    },
    {
      "x": 167,
      "y": 14,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xe657768d526c19f1b7d42f416a619060890155f46407e1d47e51af8575f9dd9a",
      "assetIds": []
    },
    {
      "x": 167,
      "y": 13,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x65f939af5f21fb303671aec7d6915ac534514f2fa720c73f575fc15b3c5dc99c",
      "assetIds": []
    },
    {
      "x": 167,
      "y": 12,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x42e1277b1b893960ce81a964808e8e8b3b3640561fdd312cc3c9af36609b1899",
      "assetIds": []
    },
    {
      "x": 166,
      "y": 12,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x792d8c2b70864479035b0fada454d0bcab62665dc8ddcb0507a8c98697cfaf38",
      "assetIds": []
    },
    {
      "x": 165,
      "y": 12,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x409132177bbe97fdf0b46d9da94769fc496f7a2092345ed99df47a0370150eb9",
      "assetIds": []
    },
    {
      "x": 165,
      "y": 13,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x707750de1509c917efaeb8e5f9543324d8b38efb97bb27b951ef249891d1cc5a",
      "assetIds": []
    },
    {
      "x": 166,
      "y": 13,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x0ab4b96fbd2dcf34db3df07f83d944cad3afc78d4de2302d57fc86af7d011f2c",
      "assetIds": []
    },
    {
      "x": 171,
      "y": 14,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xa212878149cb2abfdd97f43b010d041590a676b5780937e80b654d36a616ecde",
      "assetIds": []
    },
    {
      "x": 172,
      "y": 14,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x8ad590a16da62c26280f2c27f1460bafd07f2f39c1208615de70046b1c00982d",
      "assetIds": []
    },
    {
      "x": 173,
      "y": 14,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x11a2f5161e8156b4d1826aa51c8dae9971b7be959092f8ec442d85703a79a69d",
      "assetIds": []
    },
    {
      "x": 173,
      "y": 13,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x7e2c0b46be9d4442954b1294fa0bd71f8c46a770c21e7c055b637c19f31879c2",
      "assetIds": []
    },
    {
      "x": 173,
      "y": 12,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x04086053d5df81b9124cebf557583de639198b51f1d0f26039eb751a9302229d",
      "assetIds": []
    },
    {
      "x": 172,
      "y": 12,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x95daf832d27a87f476dcbcf8bbd45a63b0ee82b90a358d241d1a6f8a7bc6e5db",
      "assetIds": []
    },
    {
      "x": 172,
      "y": 13,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x5d854331513b44a9a58a62aa1dc8cdd376065c178772a96ed4028f0360218360",
      "assetIds": []
    },
    {
      "x": 171,
      "y": 13,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x2c2ec38c2aefc010ebe757a4746c4089292ad4baa4087aabc96805135bfcd941",
      "assetIds": []
    },
    {
      "x": 171,
      "y": 12,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0xb68eacd2ea7c1ecc25bd4a6865d8c553d42e2b9758270fe57483e85f3f553c30",
      "assetIds": []
    },
    {
      "x": 162,
      "y": 35,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x0b54ee159834fe83bd9a8e225c55ac55d0ed8ddc9e7aeb636833328f2fd1b930",
      "assetIds": []
    },
    {
      "x": 163,
      "y": 35,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xc8d64f99f6186e8b961ad2901125b54fdbfa5b08f1540e985c0fe55a348245a2",
      "assetIds": []
    },
    {
      "x": 164,
      "y": 35,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xdc827e3a9eb05f3086d60713ae8c5bf8dbdf9c7d92d4a44e58b2418816125578",
      "assetIds": []
    },
    {
      "x": 164,
      "y": 34,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xa93c56a6a8afd3867f754e257430bbfe6ad51191a0a157c8868145f4cb83beca",
      "assetIds": []
    },
    {
      "x": 164,
      "y": 33,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x95495d2b9855d749c1135bfd27cc1bf921199faa0d33fbd0819f5db2f38ff028",
      "assetIds": []
    },
    {
      "x": 163,
      "y": 33,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xb1ec00144f57a8322fc49fdad8869ab42044b8c8ce71aceec99f1a0844e5bdfe",
      "assetIds": []
    },
    {
      "x": 162,
      "y": 33,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x09d34e7ffb1cd3f1d6d2e9f576a2d33a58bb01afe4000f2a4da36242b2f32775",
      "assetIds": []
    },
    {
      "x": 162,
      "y": 34,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xddb421c9551933c0186a444887994cd23cb6c309fef7fe557baf5f3d2a0af1d6",
      "assetIds": []
    },
    {
      "x": 163,
      "y": 34,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xeb4cd46d8b02ad9fa8696fba7410c574ca6ffac6d8f3599186b44df72dd75a40",
      "assetIds": []
    },
    {
      "x": 163,
      "y": 32,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x06bb2bcb133a1b90937b1360b5e33b47114f4e8ce078679e9ff1c662bd34df74",
      "assetIds": []
    },
    {
      "x": 177,
      "y": 35,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0xd5bed2cf3f2384ecc4f2a0babeb9f8b3b2b782bac46c16affdd158bb27d814c8",
      "assetIds": []
    },
    {
      "x": 178,
      "y": 35,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0xd87098d9080711a648f102feb388738b509460f32731c5f99a2fc213d9d9c0a4",
      "assetIds": []
    },
    {
      "x": 178,
      "y": 34,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x65c803ff01069f6edd7713b74727bcced57b9f6f893e7b06580145fff21805e9",
      "assetIds": []
    },
    {
      "x": 177,
      "y": 34,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x94e29ab9dba226d24596f7ade03676a5afd51d1bec2d6c31199728400aab2ad3",
      "assetIds": []
    },
    {
      "x": 177,
      "y": 33,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xe7253487c3473d7707c64c7b1a5b9f302327e10ab67062b054a4af709b439365",
      "assetIds": []
    },
    {
      "x": 178,
      "y": 33,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xbd1533058185cef3f638d08bea8a4b5dbeae003a38faeff65c987f7c69fdedda",
      "assetIds": []
    },
    {
      "x": 167,
      "y": 21,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x174091304038adfdbce26bb3ae244783cd26ede37bd49f5408fbadcea0165c5e",
      "assetIds": []
    },
    {
      "x": 177,
      "y": 22,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x750a4e111add234f318fc8bf4cc669be1c40a890027b8c87f86daf41695079f4",
      "assetIds": []
    },
    {
      "x": 165,
      "y": 33,
      "size": 3,
      "price": "8648000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x497f15b4e4d4d9306f8f2894a268acf24b13ce0575b6790033c688330328fd43",
      "assetIds": []
    },
    {
      "x": 165,
      "y": 30,
      "size": 3,
      "price": "8648000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x16862675136ac244c5a6747adedb55254cfcf0eacd5fc5da02cfcacec97fa0fb",
      "assetIds": []
    },
    {
      "x": 174,
      "y": 30,
      "size": 3,
      "price": "8648000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x773974d0c43ab2e412b213299500b5229eb61b32b4ca9b7bb7e010ec7380fe06",
      "assetIds": []
    },
    {
      "x": 162,
      "y": 24,
      "size": 6,
      "price": "32772000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x5168c1d0a3051616ef0ee9dba8ac1294ec34407fd3064358f78e98452bf389ff",
      "assetIds": []
    },
    {
      "x": 168,
      "y": 24,
      "size": 6,
      "price": "32772000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0xa599f71d0634cd3eb7a7db302c87a24365bb48cdfe3728d296c3aa42a6ffb68f",
      "assetIds": []
    },
    {
      "x": 174,
      "y": 24,
      "size": 6,
      "price": "32772000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x2de3111da342ac9513d65afa15023926007008a346aca41a05de3471600ce6d7",
      "assetIds": []
    },
    {
      "x": 168,
      "y": 18,
      "size": 6,
      "price": "32772000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x490cb70f911d7310401dd3de69db01eb1aa36cb56a969656e9c9c135740f2faf",
      "assetIds": []
    },
    {
      "x": 174,
      "y": 12,
      "size": 6,
      "price": "32772000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0xaa8b8153845538b2ce01922eeb32a34ff9db623319a7965d28bf799efd4db7e9",
      "assetIds": []
    },
    {
      "x": 165,
      "y": 18,
      "size": 3,
      "price": "8648000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x78bf89491b0fe2aab10d3afa4b9a76d1d9bcd3554ead9c22ede06ca653140cbd",
      "assetIds": []
    },
    {
      "x": 171,
      "y": 15,
      "size": 3,
      "price": "8648000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x35a0e8d36c3f293358e48f050d05648caf5e5a23e67611bdb3470481a5178c7b",
      "assetIds": []
    },
    {
      "x": 168,
      "y": 12,
      "size": 3,
      "price": "8648000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x9d5cc71f0173f9cad9c95952c7ac655dbff4f7d06e0842d021eba6d38a5c266d",
      "assetIds": []
    },
    {
      "x": 162,
      "y": 12,
      "size": 3,
      "price": "8648000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x37a8147f5ad7d326b721daad7a4f425c3c18007b2ab15078f55ada759e8b6f50",
      "assetIds": []
    }
  ],
  "solcInputHash": "b42a863a795806b4ea3a8f05dfa42539",
  "metadata": "{\"compiler\":{\"version\":\"0.6.5+commit.f956cc89\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"landAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sandContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialMetaTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"initialWalletAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"initialSigningWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialMaxCommissionRate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"estate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeDistributor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"authValidator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"topCornerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPaid\",\"type\":\"uint256\"}],\"name\":\"LandQuadPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newMaxCommissionRate\",\"type\":\"uint256\"}],\"name\":\"MaxCommissionRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"metaTransactionProcessor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"MetaTransactionProcessor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"NewReceivingWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"}],\"name\":\"ReferralUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSigningWallet\",\"type\":\"address\"}],\"name\":\"SigningWalletUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reserved\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"info\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"assetIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"referral\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"buyLandWithSand\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"referral\",\"type\":\"bytes\"}],\"name\":\"decodeReferral\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"disableWallet\",\"type\":\"address\"}],\"name\":\"disablePreviousSigningWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExpiryTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxCommissionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSigningWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isMetaTransactionProcessor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"}],\"name\":\"isReferralValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"metaTransactionProcessor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setMetaTransactionProcessor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setReceivingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxCommissionRate\",\"type\":\"uint256\"}],\"name\":\"updateMaxCommissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSigningWallet\",\"type\":\"address\"}],\"name\":\"updateSigningWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"assetIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"withdrawAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"buyLandWithSand(address,address,address,uint256[],bytes32,uint256[],bytes32[],bytes,bytes)\":{\"params\":{\"assetIds\":\"asset ids (lands) that will be bought\",\"buyer\":\"address that perform the payment\",\"info\":\"[X_INDEX=0] x coordinate of the Land [Y_INDEX=1] y coordinate of the Land [SIZE_INDEX=2] size of the pack of Land to purchase [PRICE_INDEX=3] price in SAND to purchase that Land\",\"proof\":\"merkleProof for that particular Land\",\"referral\":\"referral id\",\"reserved\":\"the reserved address (if any)\",\"salt\":\"The salt submitted for verification.\",\"signature\":\"A signed message specifying tx details\",\"to\":\"address that will own the purchased Land\"}},\"changeAdmin(address)\":{\"details\":\"change the administrator to be `newAdmin`.\",\"params\":{\"newAdmin\":\"address of the new administrator.\"}},\"disablePreviousSigningWallet(address)\":{\"details\":\"Disable compromised signing wallet\",\"params\":{\"disableWallet\":\"The wallet address to be disabled\"}},\"getAdmin()\":{\"details\":\"gives the current administrator of this contract.\",\"returns\":{\"_0\":\"the current administrator of this contract.\"}},\"getSigningWallet()\":{\"details\":\"signing wallet authorized for referral\",\"returns\":{\"_0\":\"the address of the signing wallet\"}},\"isMetaTransactionProcessor(address)\":{\"details\":\"check whether address `who` is given meta-transaction execution rights.\",\"params\":{\"who\":\"The address to query.\"},\"returns\":{\"_0\":\"whether the address has meta-transaction execution rights.\"}},\"isReferralValid(bytes,address,address,uint256,uint256)\":{\"params\":{\"commissionRate\":\"The commissionRate of the referral\",\"expiryTime\":\"The expiry time of the referral\",\"referee\":\"The address of the referee\",\"referrer\":\"The address of the referrer\",\"signature\":\"The signature to check (signed referral)\"},\"returns\":{\"_0\":\"True if the referral is valid\"}},\"setMetaTransactionProcessor(address,bool)\":{\"details\":\"Enable or disable the ability of `metaTransactionProcessor` to perform meta-tx (metaTransactionProcessor rights).\",\"params\":{\"enabled\":\"set whether the metaTransactionProcessor is enabled or disabled.\",\"metaTransactionProcessor\":\"address that will be given/removed metaTransactionProcessor rights.\"}},\"setReceivingWallet(address)\":{\"params\":{\"newWallet\":\"address of the new receiving wallet\"}},\"updateMaxCommissionRate(uint256)\":{\"details\":\"Update the maximum commission rate\",\"params\":{\"newMaxCommissionRate\":\"The new maximum commission rate\"}},\"updateSigningWallet(address)\":{\"details\":\"Update the signing wallet The previous wallet is still valid for a grace period (_previousSigningDelay). If you want to disable the previous wallet, use the disablePreviousSigningWallet function.\",\"params\":{\"newSigningWallet\":\"The new address of the signing wallet\"}},\"withdrawAssets(address,uint256[],uint256[])\":{\"params\":{\"assetIds\":\"the assetIds to be transferred\",\"to\":\"intended recipient of the asset tokens\",\"values\":\"the quantities of the assetIds to be transferred\"}}},\"title\":\"Estate Sale contract with referral\"},\"userdoc\":{\"methods\":{\"buyLandWithSand(address,address,address,uint256[],bytes32,uint256[],bytes32[],bytes,bytes)\":{\"notice\":\"buy Land with SAND using the merkle proof associated with it\"},\"getExpiryTime()\":{\"notice\":\"Gets the expiry time for the current sale\"},\"getMaxCommissionRate()\":{\"notice\":\"the max commission rate\"},\"getMerkleRoot()\":{\"notice\":\"Gets the Merkle root associated with the current sale\"},\"isReferralValid(bytes,address,address,uint256,uint256)\":{\"notice\":\"Check if a referral is valid\"},\"setReceivingWallet(address)\":{\"notice\":\"set the wallet receiving the proceeds\"},\"withdrawAssets(address,uint256[],uint256[])\":{\"notice\":\"enable Admin to withdraw remaining assets from EstateSaleWithFee contract\"}},\"notice\":\"This contract manages the sale of our lands as Estates\"}},\"settings\":{\"compilationTarget\":{\"src/solc_0.6/EstateSale/EstateSaleWithAuth.sol\":\"EstateSaleWithAuth\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-0.6/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n\\n        if (v != 27 && v != 28) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n}\\n\",\"keccak256\":\"0x1efcb1ccef6b3bce65467c4b704cec8d0582e35ff48352269ba8cda4b54ae3da\"},\"@openzeppelin/contracts-0.6/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xfa152b6e88a1dc50780e8f1580426dc23ad2e1e2c2f086a088adf206a202f453\"},\"@openzeppelin/contracts-0.6/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\"},\"@openzeppelin/contracts-0.6/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x31691ad0817f8cb338531b78d2ab2989027d9f27e6f8e62492b754fed9429b10\"},\"@openzeppelin/contracts-0.6/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5c26b39d26f7ed489e555d955dcd3e01872972e71fdd1528e93ec164e4f23385\"},\"@openzeppelin/contracts-0.6/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf3b30f8a49631420635a8c35daacfcaa338012755f18a76fdd118730256f9a27\"},\"@openzeppelin/contracts-0.6/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf5fa8cbdffa5ef8be49b246b5628facc30b71707e78a45d80d93b64eff3fe390\"},\"@openzeppelin/contracts-0.6/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x7ff0067f2d7df4187eaa1cb4800949b929602c9d9cb20fcaee6922a7613ef2fb\"},\"src/solc_0.6/EstateSale/AuthValidator.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.6.5;\\n\\nimport \\\"@openzeppelin/contracts-0.6/cryptography/ECDSA.sol\\\";\\nimport \\\"../common/BaseWithStorage/Admin.sol\\\";\\n\\ncontract AuthValidator is Admin {\\n    address public _signingAuthWallet;\\n\\n    event SigningWallet(address indexed signingWallet);\\n\\n    constructor(address adminWallet, address initialSigningWallet) public {\\n        require(adminWallet != address(0), \\\"AuthValidator: zero address\\\");\\n\\n        _admin = adminWallet;\\n        _updateSigningAuthWallet(initialSigningWallet);\\n    }\\n\\n    function updateSigningAuthWallet(address newSigningWallet) external onlyAdmin {\\n        _updateSigningAuthWallet(newSigningWallet);\\n    }\\n\\n    function _updateSigningAuthWallet(address newSigningWallet) internal {\\n        require(newSigningWallet != address(0), \\\"AuthValidator: INVALID_SIGNING_WALLET\\\");\\n        _signingAuthWallet = newSigningWallet;\\n        emit SigningWallet(newSigningWallet);\\n    }\\n\\n    function isAuthValid(bytes memory signature, bytes32 hashedData) public view returns (bool) {\\n        address signer = ECDSA.recover(ECDSA.toEthSignedMessageHash(hashedData), signature);\\n        return signer == _signingAuthWallet;\\n    }\\n}\\n\",\"keccak256\":\"0x949c6063b3d90a8c53ca8d3c80a1097da05b7189e87d8c8825b97acc17dbd38e\"},\"src/solc_0.6/EstateSale/EstateSaleWithAuth.sol\":{\"content\":\"/* solhint-disable not-rely-on-time, func-order */\\npragma solidity 0.6.5;\\n\\nimport \\\"@openzeppelin/contracts-0.6/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.6/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.6/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.6/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.6/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"./ILandToken.sol\\\";\\nimport \\\"../common/BaseWithStorage/MetaTransactionReceiver.sol\\\";\\nimport \\\"../ReferralValidator/ReferralValidator.sol\\\";\\nimport \\\"./AuthValidator.sol\\\";\\n\\n/// @title Estate Sale contract with referral\\n/// @notice This contract manages the sale of our lands as Estates\\ncontract EstateSaleWithAuth is ReentrancyGuard, MetaTransactionReceiver, ReferralValidator {\\n    using SafeMath for uint256;\\n    using Address for address;\\n    using SafeERC20 for IERC20;\\n\\n    event LandQuadPurchased(\\n        address indexed buyer,\\n        address indexed to,\\n        uint256 indexed topCornerId,\\n        uint256 size,\\n        uint256 price,\\n        address token,\\n        uint256 amountPaid\\n    );\\n\\n    event NewReceivingWallet(address indexed newWallet);\\n\\n    /// @notice set the wallet receiving the proceeds\\n    /// @param newWallet address of the new receiving wallet\\n    function setReceivingWallet(address payable newWallet) external {\\n        require(newWallet != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(msg.sender == _admin, \\\"NOT_AUTHORIZED\\\");\\n        _wallet = newWallet;\\n\\n        emit NewReceivingWallet(newWallet);\\n    }\\n\\n    /// @notice buy Land with SAND using the merkle proof associated with it\\n    /// @param buyer address that perform the payment\\n    /// @param to address that will own the purchased Land\\n    /// @param reserved the reserved address (if any)\\n    /// @param info [X_INDEX=0] x coordinate of the Land [Y_INDEX=1] y coordinate of the Land [SIZE_INDEX=2] size of the pack of Land to purchase [PRICE_INDEX=3] price in SAND to purchase that Land\\n    /// @param salt The salt submitted for verification.\\n    /// @param assetIds asset ids (lands) that will be bought\\n    /// @param proof merkleProof for that particular Land\\n    /// @param referral referral id\\n    /// @param signature A signed message specifying tx details\\n    function buyLandWithSand(\\n        address buyer,\\n        address to,\\n        address reserved,\\n        uint256[] calldata info,\\n        bytes32 salt,\\n        uint256[] calldata assetIds,\\n        bytes32[] calldata proof,\\n        bytes calldata referral,\\n        bytes calldata signature\\n    ) external nonReentrant {\\n        _checkAddressesAndExpiryTime(buyer, reserved);\\n        _checkAuthAndProofValidity(to, reserved, info, salt, assetIds, proof, signature);\\n        _handleFeeAndReferral(buyer, info[PRICE_INDEX], referral);\\n        _mint(buyer, to, info);\\n        _sendAssets(to, assetIds);\\n    }\\n\\n    /// @notice Gets the expiry time for the current sale\\n    /// @return The expiry time, as a unix epoch\\n    function getExpiryTime() external view returns (uint256) {\\n        return _expiryTime;\\n    }\\n\\n    /// @notice Gets the Merkle root associated with the current sale\\n    /// @return The Merkle root, as a bytes32 hash\\n    function getMerkleRoot() external view returns (bytes32) {\\n        return _merkleRoot;\\n    }\\n\\n    /// @notice enable Admin to withdraw remaining assets from EstateSaleWithFee contract\\n    /// @param to intended recipient of the asset tokens\\n    /// @param assetIds the assetIds to be transferred\\n    /// @param values the quantities of the assetIds to be transferred\\n    function withdrawAssets(\\n        address to,\\n        uint256[] calldata assetIds,\\n        uint256[] calldata values\\n    ) external {\\n        require(msg.sender == _admin, \\\"NOT_AUTHORIZED\\\");\\n        _asset.safeBatchTransferFrom(address(this), to, assetIds, values, \\\"\\\");\\n    }\\n\\n    function onERC1155Received(\\n        address, /*operator*/\\n        address, /*from*/\\n        uint256, /*id*/\\n        uint256, /*value*/\\n        bytes calldata /*data*/\\n    ) external pure returns (bytes4) {\\n        return 0xf23a6e61;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address, /*operator*/\\n        address, /*from*/\\n        uint256[] calldata, /*ids*/\\n        uint256[] calldata, /*values*/\\n        bytes calldata /*data*/\\n    ) external pure returns (bytes4) {\\n        return 0xbc197c81;\\n    }\\n\\n    function _sendAssets(address to, uint256[] memory assetIds) internal {\\n        uint256[] memory values = new uint256[](assetIds.length);\\n        for (uint256 i = 0; i < assetIds.length; i++) {\\n            values[i] = 1;\\n        }\\n        _asset.safeBatchTransferFrom(address(this), to, assetIds, values, \\\"\\\");\\n    }\\n\\n    // NOTE: _checkAddressesAndExpiryTime & _checkAuthAndProofValidity were split due to a stack too deep issue\\n    function _checkAddressesAndExpiryTime(address buyer, address reserved) internal view {\\n        /* solium-disable-next-line security/no-block-members */\\n        require(block.timestamp < _expiryTime, \\\"SALE_IS_OVER\\\");\\n        require(buyer == msg.sender || _metaTransactionContracts[msg.sender], \\\"NOT_AUTHORIZED\\\");\\n        require(reserved == address(0) || reserved == buyer, \\\"RESERVED_LAND\\\");\\n    }\\n\\n    // NOTE: _checkAddressesAndExpiryTime & _checkAuthAndProofValidity were split due to a stack too deep issue\\n    function _checkAuthAndProofValidity(\\n        address to,\\n        address reserved,\\n        uint256[] memory info,\\n        bytes32 salt,\\n        uint256[] memory assetIds,\\n        bytes32[] memory proof,\\n        bytes memory signature\\n    ) internal view {\\n        bytes32 hashedData = keccak256(\\n            abi.encodePacked(\\n                to,\\n                reserved,\\n                info[X_INDEX],\\n                info[Y_INDEX],\\n                info[SIZE_INDEX],\\n                info[PRICE_INDEX],\\n                salt,\\n                keccak256(abi.encodePacked(assetIds)),\\n                keccak256(abi.encodePacked(proof))\\n            )\\n        );\\n        require(_authValidator.isAuthValid(signature, hashedData), \\\"INVALID_AUTH\\\");\\n\\n        bytes32 leaf = _generateLandHash(\\n            info[X_INDEX],\\n            info[Y_INDEX],\\n            info[SIZE_INDEX],\\n            info[PRICE_INDEX],\\n            reserved,\\n            salt,\\n            assetIds\\n        );\\n        require(_verify(proof, leaf), \\\"INVALID_LAND\\\");\\n    }\\n\\n    function _mint(\\n        address buyer,\\n        address to,\\n        uint256[] memory info\\n    ) internal {\\n        if (info[SIZE_INDEX] == 1 || _estate == address(0)) {\\n            _land.mintQuad(to, info[SIZE_INDEX], info[X_INDEX], info[Y_INDEX], \\\"\\\");\\n        } else {\\n            _land.mintQuad(_estate, info[SIZE_INDEX], info[X_INDEX], info[Y_INDEX], abi.encode(to));\\n        }\\n        emit LandQuadPurchased(\\n            buyer,\\n            to,\\n            info[X_INDEX] + (info[Y_INDEX] * GRID_SIZE),\\n            info[SIZE_INDEX],\\n            info[PRICE_INDEX],\\n            address(_sand),\\n            info[PRICE_INDEX]\\n        );\\n    }\\n\\n    function _generateLandHash(\\n        uint256 x,\\n        uint256 y,\\n        uint256 size,\\n        uint256 price,\\n        address reserved,\\n        bytes32 salt,\\n        uint256[] memory assetIds\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(x, y, size, price, reserved, salt, assetIds));\\n    }\\n\\n    function _verify(bytes32[] memory proof, bytes32 leaf) internal view returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash < proofElement) {\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        return computedHash == _merkleRoot;\\n    }\\n\\n    function _handleFeeAndReferral(\\n        address buyer,\\n        uint256 priceInSand,\\n        bytes memory referral\\n    ) internal {\\n        // send 5% fee to a specially configured instance of FeeDistributor.sol\\n        uint256 remainingAmountInSand = _handleSandFee(buyer, priceInSand);\\n\\n        // calculate referral based on 95% of original priceInSand\\n        handleReferralWithERC20(buyer, remainingAmountInSand, referral, _wallet, address(_sand));\\n    }\\n\\n    function _handleSandFee(address buyer, uint256 priceInSand) internal returns (uint256) {\\n        uint256 feeAmountInSand = priceInSand.mul(FEE).div(100);\\n        _sand.safeTransferFrom(buyer, address(_feeDistributor), feeAmountInSand);\\n        return priceInSand.sub(feeAmountInSand);\\n    }\\n\\n    uint256 internal constant GRID_SIZE = 408; // 408 is the size of the Land\\n\\n    IERC1155 internal immutable _asset;\\n    ILandToken internal immutable _land;\\n    IERC20 internal immutable _sand;\\n    address internal immutable _estate;\\n    address internal immutable _feeDistributor;\\n\\n    address payable internal _wallet;\\n    AuthValidator internal _authValidator;\\n    uint256 internal immutable _expiryTime;\\n    bytes32 internal immutable _merkleRoot;\\n\\n    uint256 private constant FEE = 5; // percentage of land sale price to be diverted to a specially configured instance of FeeDistributor, shown as an integer\\n    // buyLandWithSand info indexes\\n    uint256 private constant X_INDEX = 0;\\n    uint256 private constant Y_INDEX = 1;\\n    uint256 private constant SIZE_INDEX = 2;\\n    uint256 private constant PRICE_INDEX = 3;\\n\\n    constructor(\\n        address landAddress,\\n        address sandContractAddress,\\n        address initialMetaTx,\\n        address admin,\\n        address payable initialWalletAddress,\\n        bytes32 merkleRoot,\\n        uint256 expiryTime,\\n        address initialSigningWallet,\\n        uint256 initialMaxCommissionRate,\\n        address estate,\\n        address asset,\\n        address feeDistributor,\\n        address authValidator\\n    ) public ReferralValidator(initialSigningWallet, initialMaxCommissionRate) {\\n        require(landAddress.isContract(), \\\"EstateSaleWithAuth: is not a contract\\\");\\n        require(sandContractAddress.isContract(), \\\"EstateSaleWithAuth: is not a contract\\\");\\n        require(initialMetaTx != address(0), \\\"EstateSaleWithAuth: zero address\\\");\\n        require(admin != address(0), \\\"EstateSaleWithAuth: zero address\\\");\\n        require(initialWalletAddress != address(0), \\\"EstateSaleWithAuth: zero address\\\");\\n        require(asset.isContract(), \\\"EstateSaleWithAuth: is not a contract\\\");\\n        require(feeDistributor != address(0), \\\"EstateSaleWithAuth: zero address\\\");\\n        require(authValidator.isContract(), \\\"EstateSaleWithAuth: is not a contract\\\");\\n\\n\\n        _land = ILandToken(landAddress);\\n        _sand = IERC20(sandContractAddress);\\n        _setMetaTransactionProcessor(initialMetaTx, true);\\n        _wallet = initialWalletAddress;\\n        _merkleRoot = merkleRoot;\\n        _expiryTime = expiryTime;\\n        _admin = admin;\\n        _estate = estate;\\n        _asset = IERC1155(asset);\\n        _feeDistributor = feeDistributor;\\n        _authValidator = AuthValidator(authValidator);\\n    }\\n}\\n\",\"keccak256\":\"0x039331cd15021fe3b9312674d873fdc02b968ae2af5343caf14e6c054a2fcc1d\"},\"src/solc_0.6/EstateSale/ILandToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.5;\\n\\n\\ninterface ILandToken {\\n    function mintQuad(\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8d03b53d325fbb052d78f274b106f14bf9a5afc928451b26bc9e579585ae44b2\"},\"src/solc_0.6/ReferralValidator/ReferralValidator.sol\":{\"content\":\"/* solhint-disable not-rely-on-time, func-order */\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.5;\\n\\nimport \\\"@openzeppelin/contracts-0.6/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.6/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.6/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.6/math/SafeMath.sol\\\";\\nimport \\\"../common/BaseWithStorage/Admin.sol\\\";\\n\\n\\n/// @dev This contract verifies if a referral is valid\\ncontract ReferralValidator is Admin {\\n    using Address for address;\\n    using SafeERC20 for IERC20;\\n\\n    address private _signingWallet;\\n    uint256 private _maxCommissionRate;\\n\\n    mapping(address => uint256) private _previousSigningWallets;\\n    uint256 constant private _previousSigningDelay = 10 days;\\n\\n    event ReferralUsed(\\n        address indexed referrer,\\n        address indexed referee,\\n        address indexed token,\\n        uint256 amount,\\n        uint256 commission,\\n        uint256 commissionRate\\n    );\\n\\n    event SigningWalletUpdated(address indexed newSigningWallet);\\n    event MaxCommissionRateUpdated(uint256 indexed newMaxCommissionRate);\\n\\n    constructor(address initialSigningWallet, uint256 initialMaxCommissionRate) public {\\n        require(initialSigningWallet != address(0), \\\"ReferralValidator: zero address\\\");\\n\\n        _signingWallet = initialSigningWallet;\\n        _maxCommissionRate = initialMaxCommissionRate;\\n    }\\n\\n    /**\\n     * @dev Update the signing wallet\\n     * The previous wallet is still valid for a grace period (_previousSigningDelay). If you want to\\n     * disable the previous wallet, use the disablePreviousSigningWallet function.\\n     * @param newSigningWallet The new address of the signing wallet\\n     */\\n    function updateSigningWallet(address newSigningWallet) external onlyAdmin {\\n        require(newSigningWallet != address(0), \\\"ReferralValidator: zero address\\\");\\n        _previousSigningWallets[_signingWallet] = now + _previousSigningDelay;\\n        _signingWallet = newSigningWallet;\\n\\n        emit SigningWalletUpdated(newSigningWallet);\\n    }\\n\\n     /**\\n     * @dev Disable compromised signing wallet\\n     * @param disableWallet The wallet address to be disabled\\n     */\\n    function disablePreviousSigningWallet(address disableWallet) external {\\n        require(_admin == msg.sender, \\\"ReferralValidator: Sender not admin\\\");\\n        require(disableWallet != address(0), \\\"ReferralValidator: zero address\\\");\\n        _previousSigningWallets[disableWallet] = 0;\\n    }\\n\\n    /**\\n     * @dev signing wallet authorized for referral\\n     * @return the address of the signing wallet\\n     */\\n    function getSigningWallet() external view returns (address) {\\n        return _signingWallet;\\n    }\\n\\n    /**\\n     * @notice the max commission rate\\n     * @return the maximum commission rate that a referral can give\\n     */\\n    function getMaxCommissionRate() external view returns (uint256) {\\n        return _maxCommissionRate;\\n    }\\n\\n    /**\\n     * @dev Update the maximum commission rate\\n     * @param newMaxCommissionRate The new maximum commission rate\\n     */\\n    function updateMaxCommissionRate(uint256 newMaxCommissionRate) external onlyAdmin {\\n        _maxCommissionRate = newMaxCommissionRate;\\n\\n        emit MaxCommissionRateUpdated(newMaxCommissionRate);\\n    }\\n\\n    function handleReferralWithETH(\\n        uint256 amount,\\n        bytes memory referral,\\n        address payable destination\\n    ) internal {\\n        uint256 amountForDestination = amount;\\n\\n        require(msg.value >= amount, \\\"ReferralValidator: insufficient funds\\\");\\n\\n        if (referral.length > 0) {\\n            (bytes memory signature, address referrer, address referee, uint256 expiryTime, uint256 commissionRate) = decodeReferral(referral);\\n\\n            require(commissionRate < 10000, \\\"ReferralValidator: invalid commisionRate\\\");\\n\\n            uint256 commission = 0;\\n\\n            if (isReferralValid(signature, referrer, referee, expiryTime, commissionRate)) {\\n                commission = SafeMath.div(SafeMath.mul(amount, commissionRate), 10000);\\n\\n                emit ReferralUsed(referrer, referee, address(0), amount, commission, commissionRate);\\n                amountForDestination = SafeMath.sub(amountForDestination, commission);\\n            }\\n\\n            if (commission > 0) {\\n                // solhint-disable-next-line avoid-low-level-calls\\n                (bool success, ) = payable(referrer).call{value:commission}(\\\"\\\");\\n                require(success, \\\"ReferralValidator: Transfer failed.\\\");\\n            }\\n        }\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, ) = destination.call{value:amountForDestination}(\\\"\\\");\\n        require(success, \\\"ReferralValidator: Transfer failed.\\\");\\n    }\\n\\n    function handleReferralWithERC20(\\n        address buyer,\\n        uint256 amount,\\n        bytes memory referral,\\n        address payable destination,\\n        address tokenAddress\\n    ) internal {\\n        IERC20 token = IERC20(tokenAddress);\\n        uint256 amountForDestination = amount;\\n\\n        if (referral.length > 0) {\\n            (bytes memory signature, address referrer, address referee, uint256 expiryTime, uint256 commissionRate) = decodeReferral(referral);\\n\\n            uint256 commission = 0;\\n\\n            if (isReferralValid(signature, referrer, referee, expiryTime, commissionRate)) {\\n                commission = SafeMath.div(SafeMath.mul(amount, commissionRate), 10000);\\n\\n                emit ReferralUsed(referrer, referee, tokenAddress, amount, commission, commissionRate);\\n                amountForDestination = SafeMath.sub(amountForDestination, commission);\\n            }\\n\\n            if (commission > 0) {\\n                token.safeTransferFrom(buyer, referrer, commission);\\n            }\\n        }\\n\\n        token.safeTransferFrom(buyer, destination, amountForDestination);\\n    }\\n\\n    /**\\n     * @notice Check if a referral is valid\\n     * @param signature The signature to check (signed referral)\\n     * @param referrer The address of the referrer\\n     * @param referee The address of the referee\\n     * @param expiryTime The expiry time of the referral\\n     * @param commissionRate The commissionRate of the referral\\n     * @return True if the referral is valid\\n     */\\n    function isReferralValid(\\n        bytes memory signature,\\n        address referrer,\\n        address referee,\\n        uint256 expiryTime,\\n        uint256 commissionRate\\n    ) public view returns (bool) {\\n        if (commissionRate > _maxCommissionRate || referrer == referee || now > expiryTime) {\\n            return false;\\n        }\\n\\n        bytes32 hashedData = keccak256(abi.encodePacked(referrer, referee, expiryTime, commissionRate));\\n\\n        address signer = ECDSA.recover(keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hashedData)), signature);\\n\\n        if (_previousSigningWallets[signer] >= now) {\\n            return true;\\n        }\\n\\n        return _signingWallet == signer;\\n    }\\n\\n    function decodeReferral(bytes memory referral)\\n        public\\n        pure\\n        returns (\\n            bytes memory,\\n            address,\\n            address,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        (bytes memory signature, address referrer, address referee, uint256 expiryTime, uint256 commissionRate) = abi.decode(\\n            referral,\\n            (bytes, address, address, uint256, uint256)\\n        );\\n\\n        return (signature, referrer, referee, expiryTime, commissionRate);\\n    }\\n}\\n\",\"keccak256\":\"0xad5300e058f15841c54f3bc70ad5c89a6c9a0853aa6e0b542e7a9e59192687d2\"},\"src/solc_0.6/common/BaseWithStorage/Admin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.5;\\n\\n\\ncontract Admin {\\n    address internal _admin;\\n\\n    /// @dev emitted when the contract administrator is changed.\\n    /// @param oldAdmin address of the previous administrator.\\n    /// @param newAdmin address of the new administrator.\\n    event AdminChanged(address oldAdmin, address newAdmin);\\n\\n    /// @dev gives the current administrator of this contract.\\n    /// @return the current administrator of this contract.\\n    function getAdmin() external view returns (address) {\\n        return _admin;\\n    }\\n\\n    /// @dev change the administrator to be `newAdmin`.\\n    /// @param newAdmin address of the new administrator.\\n    function changeAdmin(address newAdmin) external {\\n        require(msg.sender == _admin, \\\"only admin can change admin\\\");\\n        require(_admin != newAdmin, \\\"already admin\\\");\\n        emit AdminChanged(_admin, newAdmin);\\n        _admin = newAdmin;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == _admin, \\\"only admin allowed\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xe1a95ec41b32e523a6fad060f90aa6d03a72a545857a91c2f51473b6072637dc\"},\"src/solc_0.6/common/BaseWithStorage/MetaTransactionReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.5;\\n\\nimport \\\"./Admin.sol\\\";\\n\\ncontract MetaTransactionReceiver is Admin {\\n    mapping(address => bool) internal _metaTransactionContracts;\\n\\n    /// @dev emiited when a meta transaction processor is enabled/disabled\\n    /// @param metaTransactionProcessor address that will be given/removed metaTransactionProcessor rights.\\n    /// @param enabled set whether the metaTransactionProcessor is enabled or disabled.\\n    event MetaTransactionProcessor(address metaTransactionProcessor, bool enabled);\\n\\n    /// @dev Enable or disable the ability of `metaTransactionProcessor` to perform meta-tx (metaTransactionProcessor rights).\\n    /// @param metaTransactionProcessor address that will be given/removed metaTransactionProcessor rights.\\n    /// @param enabled set whether the metaTransactionProcessor is enabled or disabled.\\n    function setMetaTransactionProcessor(address metaTransactionProcessor, bool enabled) public onlyAdmin {\\n        _setMetaTransactionProcessor(metaTransactionProcessor, enabled);\\n    }\\n\\n    function _setMetaTransactionProcessor(address metaTransactionProcessor, bool enabled) internal {\\n        require(metaTransactionProcessor != address(0), \\\"MetaTransactionReceiver: zero address\\\");\\n        _metaTransactionContracts[metaTransactionProcessor] = enabled;\\n        emit MetaTransactionProcessor(metaTransactionProcessor, enabled);\\n    }\\n\\n    /// @dev check whether address `who` is given meta-transaction execution rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has meta-transaction execution rights.\\n    function isMetaTransactionProcessor(address who) external view returns (bool) {\\n        return _metaTransactionContracts[who];\\n    }\\n}\\n\",\"keccak256\":\"0x4a11e21dfc85fb9330c02abc019bfb5b1e40d0fcd36e2a2e652d4c06b6e8105b\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b50604051620031e9380380620031e983398181016040526101a08110156200003957600080fd5b508051602082015160408301516060840151608085015160a086015160c087015160e08801516101008901516101208a01516101408b01516101608c0151610180909c015160016000559a9b999a9899979896979596949593949293919290919085856001600160a01b038216620000f8576040805162461bcd60e51b815260206004820152601f60248201527f526566657272616c56616c696461746f723a207a65726f206164647265737300604482015290519081900360640190fd5b600380546001600160a01b0319166001600160a01b0393841617905560045562000130908e1662000459602090811b62002adc17901c565b6200016d5760405162461bcd60e51b8152600401808060200182810382526025815260200180620031c46025913960400191505060405180910390fd5b6200018c8c6001600160a01b03166200045960201b62002adc1760201c565b620001c95760405162461bcd60e51b8152600401808060200182810382526025815260200180620031c46025913960400191505060405180910390fd5b6001600160a01b038b1662000214576040805162461bcd60e51b815260206004820181905260248201526000805160206200317f833981519152604482015290519081900360640190fd5b6001600160a01b038a166200025f576040805162461bcd60e51b815260206004820181905260248201526000805160206200317f833981519152604482015290519081900360640190fd5b6001600160a01b038916620002aa576040805162461bcd60e51b815260206004820181905260248201526000805160206200317f833981519152604482015290519081900360640190fd5b620002c9836001600160a01b03166200045960201b62002adc1760201c565b620003065760405162461bcd60e51b8152600401808060200182810382526025815260200180620031c46025913960400191505060405180910390fd5b6001600160a01b03821662000351576040805162461bcd60e51b815260206004820181905260248201526000805160206200317f833981519152604482015290519081900360640190fd5b62000370816001600160a01b03166200045960201b62002adc1760201c565b620003ad5760405162461bcd60e51b8152600401808060200182810382526025815260200180620031c46025913960400191505060405180910390fd5b6001600160601b031960608e811b821660a0528d901b1660c052620003dd8b60016001600160e01b036200045f16565b600680546001600160a01b039a8b166001600160a01b031991821617909155610140989098526101209690965260018054998916998816999099179098556001600160601b0319606092831b811660e05290821b811660805296901b909516610100525060078054919093169116179055506200050a92505050565b3b151590565b6001600160a01b038216620004a65760405162461bcd60e51b81526004018080602001828103825260258152602001806200319f6025913960400191505060405180910390fd5b6001600160a01b038216600081815260026020908152604091829020805460ff191685151590811790915582519384529083015280517fb21eb88b4e33b3f1281830a7178d74d8aa73220416215726b68ae23d539515cb9281900390910190a15050565b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c6101205161014051612bef6200059060003980610be0528061247e525080610bbc528061159d5250806124fc525080611af25280611c4f525080611aa85280611e4e52806124d9525080611b235280611c205250806111075280611f3a5250612bef6000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c8063984d6252116100b2578063c10a420811610081578063dc5074af11610066578063dc5074af146108a0578063e56f8a9e146108c6578063f23a6e61146108e357610136565b8063c10a4208146107c1578063caed35001461089857610136565b8063984d62521461055f578063ab1cc78c14610631578063b522ecff14610639578063bc197c811461065f57610136565b806365194ce71161010957806378e6e5b9116100ee57806378e6e5b9146104e55780638a04af6a1461050b5780638f2839701461053957610136565b806365194ce7146103635780636e9960c3146104c157610136565b80631187fd3c1461013b57806325cb5bc01461031b578063495906571461033557806358bc29441461033d575b600080fd5b610319600480360361012081101561015257600080fd5b6001600160a01b038235811692602081013582169260408201359092169181019060808101606082013564010000000081111561018e57600080fd5b8201836020820111156101a057600080fd5b803590602001918460208302840111640100000000831117156101c257600080fd5b919390928235926040810190602001356401000000008111156101e457600080fd5b8201836020820111156101f657600080fd5b8035906020019184602083028401116401000000008311171561021857600080fd5b91939092909160208101903564010000000081111561023657600080fd5b82018360208201111561024857600080fd5b8035906020019184602083028401116401000000008311171561026a57600080fd5b91939092909160208101903564010000000081111561028857600080fd5b82018360208201111561029a57600080fd5b803590602001918460018302840111640100000000831117156102bc57600080fd5b9193909290916020810190356401000000008111156102da57600080fd5b8201836020820111156102ec57600080fd5b8035906020019184600183028401116401000000008311171561030e57600080fd5b509092509050610978565b005b610323610bba565b60408051918252519081900360200190f35b610323610bde565b6103196004803603602081101561035357600080fd5b50356001600160a01b0316610c02565b6104096004803603602081101561037957600080fd5b81019060208101813564010000000081111561039457600080fd5b8201836020820111156103a657600080fd5b803590602001918460018302840111640100000000831117156103c857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610d2e945050505050565b6040518080602001866001600160a01b03166001600160a01b03168152602001856001600160a01b03166001600160a01b03168152602001848152602001838152602001828103825287818151815260200191508051906020019080838360005b8381101561048257818101518382015260200161046a565b50505050905090810190601f1680156104af5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b6104c9610e33565b604080516001600160a01b039092168252519081900360200190f35b610319600480360360208110156104fb57600080fd5b50356001600160a01b0316610e42565b6103196004803603604081101561052157600080fd5b506001600160a01b0381351690602001351515610f00565b6103196004803603602081101561054f57600080fd5b50356001600160a01b0316610f6d565b6103196004803603606081101561057557600080fd5b6001600160a01b0382351691908101906040810160208201356401000000008111156105a057600080fd5b8201836020820111156105b257600080fd5b803590602001918460208302840111640100000000831117156105d457600080fd5b9193909290916020810190356401000000008111156105f257600080fd5b82018360208201111561060457600080fd5b8035906020019184602083028401116401000000008311171561062657600080fd5b5090925090506110a6565b610323611231565b6103196004803603602081101561064f57600080fd5b50356001600160a01b0316611237565b61078c600480360360a081101561067557600080fd5b6001600160a01b0382358116926020810135909116918101906060810160408201356401000000008111156106a957600080fd5b8201836020820111156106bb57600080fd5b803590602001918460208302840111640100000000831117156106dd57600080fd5b9193909290916020810190356401000000008111156106fb57600080fd5b82018360208201111561070d57600080fd5b8035906020019184602083028401116401000000008311171561072f57600080fd5b91939092909160208101903564010000000081111561074d57600080fd5b82018360208201111561075f57600080fd5b8035906020019184600183028401116401000000008311171561078157600080fd5b509092509050611348565b604080517fffffffff000000000000000000000000000000000000000000000000000000009092168252519081900360200190f35b610884600480360360a08110156107d757600080fd5b8101906020810181356401000000008111156107f257600080fd5b82018360208201111561080457600080fd5b8035906020019184600183028401116401000000008311171561082657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550506001600160a01b038335811694506020840135169260408101359250606001359050611375565b604080519115158252519081900360200190f35b6104c96114b1565b610884600480360360208110156108b657600080fd5b50356001600160a01b03166114c0565b610319600480360360208110156108dc57600080fd5b50356114de565b61078c600480360360a08110156108f957600080fd5b6001600160a01b03823581169260208101359091169160408201359160608101359181019060a08101608082013564010000000081111561093957600080fd5b82018360208201111561094b57600080fd5b8035906020019184600183028401116401000000008311171561096d57600080fd5b509092509050611570565b600260005414156109d0576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026000556109df8e8d61159b565b610ad68d8d8d8d80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508c8c8c80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508b8b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020601f8d018190048102820181019092528b815292508b91508a90819084018382808284376000920191909152506116fe92505050565b610b2a8e8c8c6003818110610ae757fe5b9050602002013586868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611a8192505050565b610b688e8e8d8d80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611ad292505050565b610ba58d898980806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611ec392505050565b50506001600055505050505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b6001546001600160a01b03163314610c61576040805162461bcd60e51b815260206004820152601260248201527f6f6e6c792061646d696e20616c6c6f7765640000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b038116610cbc576040805162461bcd60e51b815260206004820152601f60248201527f526566657272616c56616c696461746f723a207a65726f206164647265737300604482015290519081900360640190fd5b600380546001600160a01b03908116600090815260056020526040808220620d2f0042019055835473ffffffffffffffffffffffffffffffffffffffff1916928516928317909355915190917fbbb5fb2ee7e707ae0c968f63e94211ea81e66a718c34e2f810a7619e5678a21791a250565b606060008060008060606000806000808a80602001905160a0811015610d5357600080fd5b8101908080516040519392919084640100000000821115610d7357600080fd5b908301906020820185811115610d8857600080fd5b8251640100000000811182820188101715610da257600080fd5b82525081516020918201929091019080838360005b83811015610dcf578181015183820152602001610db7565b50505050905090810190601f168015610dfc5780820380516001836020036101000a031916815260200191505b5060409081526020820151908201516060830151608090930151959f50909d509b5099509197505050505050505091939590929450565b6001546001600160a01b031690565b6001546001600160a01b03163314610e8b5760405162461bcd60e51b8152600401808060200182810382526023815260200180612b056023913960400191505060405180910390fd5b6001600160a01b038116610ee6576040805162461bcd60e51b815260206004820152601f60248201527f526566657272616c56616c696461746f723a207a65726f206164647265737300604482015290519081900360640190fd5b6001600160a01b0316600090815260056020526040812055565b6001546001600160a01b03163314610f5f576040805162461bcd60e51b815260206004820152601260248201527f6f6e6c792061646d696e20616c6c6f7765640000000000000000000000000000604482015290519081900360640190fd5b610f698282612087565b5050565b6001546001600160a01b03163314610fcc576040805162461bcd60e51b815260206004820152601b60248201527f6f6e6c792061646d696e2063616e206368616e67652061646d696e0000000000604482015290519081900360640190fd5b6001546001600160a01b038281169116141561102f576040805162461bcd60e51b815260206004820152600d60248201527f616c72656164792061646d696e00000000000000000000000000000000000000604482015290519081900360640190fd5b600154604080516001600160a01b039283168152918316602083015280517f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f9281900390910190a16001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001546001600160a01b03163314611105576040805162461bcd60e51b815260206004820152600e60248201527f4e4f545f415554484f52495a4544000000000000000000000000000000000000604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632eb2c2d63087878787876040518763ffffffff1660e01b815260040180876001600160a01b03166001600160a01b03168152602001866001600160a01b03166001600160a01b031681526020018060200180602001806020018481038452888882818152602001925060200280828437600083820152601f01601f19169091018581038452868152602090810191508790870280828437600081840152601f19601f8201169050808301925050508481038252600081526020016020019950505050505050505050600060405180830381600087803b15801561121257600080fd5b505af1158015611226573d6000803e3d6000fd5b505050505050505050565b60045490565b6001600160a01b038116611292576040805162461bcd60e51b815260206004820152600c60248201527f5a45524f5f414444524553530000000000000000000000000000000000000000604482015290519081900360640190fd5b6001546001600160a01b031633146112f1576040805162461bcd60e51b815260206004820152600e60248201527f4e4f545f415554484f52495a4544000000000000000000000000000000000000604482015290519081900360640190fd5b6006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f4d66958b757eb92a1b43d02be4c38c9500b73f532420ee3706cb43d420ba023690600090a250565b7fbc197c810000000000000000000000000000000000000000000000000000000098975050505050505050565b60006004548211806113985750836001600160a01b0316856001600160a01b0316145b806113a257508242115b156113af575060006114a8565b60408051606087811b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000009081166020808501919091529188901b166034830152604882018690526068808301869052835180840390910181526088830184528051908201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000060a884015260c48084018290528451808503909101815260e49093019093528151910120600090611466908961214e565b6001600160a01b0381166000908152600560205260409020549091504211611493576001925050506114a8565b6003546001600160a01b039081169116149150505b95945050505050565b6003546001600160a01b031690565b6001600160a01b031660009081526002602052604090205460ff1690565b6001546001600160a01b0316331461153d576040805162461bcd60e51b815260206004820152601260248201527f6f6e6c792061646d696e20616c6c6f7765640000000000000000000000000000604482015290519081900360640190fd5b600481905560405181907f774069781371d65424b3b0b101c1d40014532cac040f979595b99a3fcf8ce08c90600090a250565b7ff23a6e61000000000000000000000000000000000000000000000000000000009695505050505050565b7f0000000000000000000000000000000000000000000000000000000000000000421061160f576040805162461bcd60e51b815260206004820152600c60248201527f53414c455f49535f4f5645520000000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b03821633148061163557503360009081526002602052604090205460ff165b611686576040805162461bcd60e51b815260206004820152600e60248201527f4e4f545f415554484f52495a4544000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b03811615806116ad5750816001600160a01b0316816001600160a01b0316145b610f69576040805162461bcd60e51b815260206004820152600d60248201527f52455345525645445f4c414e4400000000000000000000000000000000000000604482015290519081900360640190fd5b600087878760008151811061170f57fe5b60200260200101518860018151811061172457fe5b60200260200101518960028151811061173957fe5b60200260200101518a60038151811061174e57fe5b60200260200101518a8a60405160200180828051906020019060200280838360005b83811015611788578181015183820152602001611770565b50505050905001915050604051602081830303815290604052805190602001208a60405160200180828051906020019060200280838360005b838110156117d95781810151838201526020016117c1565b5050505090500191505060405160208183030381529060405280519060200120604051602001808a6001600160a01b03166001600160a01b031660601b8152601401896001600160a01b03166001600160a01b031660601b81526014018881526020018781526020018681526020018581526020018481526020018381526020018281526020019950505050505050505050604051602081830303815290604052805190602001209050600760009054906101000a90046001600160a01b03166001600160a01b031663012847ed83836040518363ffffffff1660e01b81526004018080602001838152602001828103825284818151815260200191508051906020019080838360005b838110156118fb5781810151838201526020016118e3565b50505050905090810190601f1680156119285780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561194657600080fd5b505afa15801561195a573d6000803e3d6000fd5b505050506040513d602081101561197057600080fd5b50516119c3576040805162461bcd60e51b815260206004820152600c60248201527f494e56414c49445f415554480000000000000000000000000000000000000000604482015290519081900360640190fd5b6000611a24876000815181106119d557fe5b6020026020010151886001815181106119ea57fe5b6020026020010151896002815181106119ff57fe5b60200260200101518a600381518110611a1457fe5b60200260200101518c8b8b612337565b9050611a3084826123dc565b611226576040805162461bcd60e51b815260206004820152600c60248201527f494e56414c49445f4c414e440000000000000000000000000000000000000000604482015290519081900360640190fd5b6000611a8d84846124a5565b600654909150611acc908590839085906001600160a01b03167f000000000000000000000000000000000000000000000000000000000000000061253f565b50505050565b80600281518110611adf57fe5b602002602001015160011480611b1c57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316155b15611c1e577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636e1e3bbf8383600281518110611b5e57fe5b602002602001015184600081518110611b7357fe5b602002602001015185600181518110611b8857fe5b60200260200101516040518563ffffffff1660e01b815260040180856001600160a01b03166001600160a01b031681526020018481526020018381526020018281526020018060200182810382526000815260200160200195505050505050600060405180830381600087803b158015611c0157600080fd5b505af1158015611c15573d6000803e3d6000fd5b50505050611dbe565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636e1e3bbf7f000000000000000000000000000000000000000000000000000000000000000083600281518110611c7b57fe5b602002602001015184600081518110611c9057fe5b602002602001015185600181518110611ca557fe5b60200260200101518760405160200180826001600160a01b03166001600160a01b031681526020019150506040516020818303038152906040526040518663ffffffff1660e01b815260040180866001600160a01b03166001600160a01b0316815260200185815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611d55578181015183820152602001611d3d565b50505050905090810190601f168015611d825780820380516001836020036101000a031916815260200191505b509650505050505050600060405180830381600087803b158015611da557600080fd5b505af1158015611db9573d6000803e3d6000fd5b505050505b61019881600181518110611dce57fe5b60200260200101510281600081518110611de457fe5b602002602001015101826001600160a01b0316846001600160a01b03167fe4dfa6ac11314892f3029b34a25b1a887da3b1cab2bbf8506d87128ba6e3ac0284600281518110611e2f57fe5b602002602001015185600381518110611e4457fe5b60200260200101517f000000000000000000000000000000000000000000000000000000000000000087600381518110611e7a57fe5b602002602001015160405180858152602001848152602001836001600160a01b03166001600160a01b0316815260200182815260200194505050505060405180910390a4505050565b6060815167ffffffffffffffff81118015611edd57600080fd5b50604051908082528060200260200182016040528015611f07578160200160208202803683370190505b50905060005b8251811015611f37576001828281518110611f2457fe5b6020908102919091010152600101611f0d565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632eb2c2d6308585856040518563ffffffff1660e01b815260040180856001600160a01b03166001600160a01b03168152602001846001600160a01b03166001600160a01b03168152602001806020018060200180602001848103845286818151815260200191508051906020019060200280838360005b83811015611ff2578181015183820152602001611fda565b50505050905001848103835285818151815260200191508051906020019060200280838360005b83811015612031578181015183820152602001612019565b50505050905001848103825260008152602001602001975050505050505050600060405180830381600087803b15801561206a57600080fd5b505af115801561207e573d6000803e3d6000fd5b50505050505050565b6001600160a01b0382166120cc5760405162461bcd60e51b8152600401808060200182810382526025815260200180612b6b6025913960400191505060405180910390fd5b6001600160a01b03821660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915582519384529083015280517fb21eb88b4e33b3f1281830a7178d74d8aa73220416215726b68ae23d539515cb9281900390910190a15050565b600081516041146121a6576040805162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015290519081900360640190fd5b60208201516040830151606084015160001a7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156122175760405162461bcd60e51b8152600401808060200182810382526022815260200180612ae36022913960400191505060405180910390fd5b8060ff16601b1415801561222f57508060ff16601c14155b1561226b5760405162461bcd60e51b8152600401808060200182810382526022815260200180612b286022913960400191505060405180910390fd5b60408051600080825260208083018085528a905260ff85168385015260608301879052608083018690529251909260019260a080820193601f1981019281900390910190855afa1580156122c3573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661232b576040805162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015290519081900360640190fd5b93505050505b92915050565b60008787878787878760405160200180888152602001878152602001868152602001858152602001846001600160a01b03166001600160a01b031660601b8152601401838152602001828051906020019060200280838360005b838110156123a9578181015183820152602001612391565b50505050905001975050505050505050604051602081830303815290604052805190602001209050979650505050505050565b600081815b845181101561247b5760008582815181106123f857fe5b60200260200101519050808310156124405782816040516020018083815260200182815260200192505050604051602081830303815290604052805190602001209250612472565b808360405160200180838152602001828152602001925050506040516020818303038152906040528051906020012092505b506001016123e1565b507f0000000000000000000000000000000000000000000000000000000000000000149392505050565b6000806124ca60646124be85600563ffffffff61264716565b9063ffffffff6126a716565b90506125276001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016857f00000000000000000000000000000000000000000000000000000000000000008463ffffffff6126e916565b612537838263ffffffff61277116565b949350505050565b8251819085901561262c57606060008060008061255b8a610d2e565b93985091965094509250905060006125768686868686611375565b15612604576125906125888d84612647565b6127106126a7565b9050886001600160a01b0316846001600160a01b0316866001600160a01b03167fac7a699eb95c3c6d390ec4626de17ef9a67b35891efdb197beba7c7fdd45fac48f858760405180848152602001838152602001828152602001935050505060405180910390a46126018782612771565b96505b8015612625576126256001600160a01b0389168e878463ffffffff6126e916565b5050505050505b61207e6001600160a01b03831688868463ffffffff6126e916565b60008261265657506000612331565b8282028284828161266357fe5b04146126a05760405162461bcd60e51b8152600401808060200182810382526021815260200180612b4a6021913960400191505060405180910390fd5b9392505050565b60006126a083836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506127b3565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052611acc908590612855565b60006126a083836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061290b565b6000818361283f5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156128045781810151838201526020016127ec565b50505050905090810190601f1680156128315780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161284b57fe5b0495945050505050565b60606128aa826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166129659092919063ffffffff16565b805190915015612906578080602001905160208110156128c957600080fd5b50516129065760405162461bcd60e51b815260040180806020018281038252602a815260200180612b90602a913960400191505060405180910390fd5b505050565b6000818484111561295d5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156128045781810151838201526020016127ec565b505050900390565b60606125378484600085606061297a85612adc565b6129cb576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310612a0a5780518252601f1990920191602091820191016129eb565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612a6c576040519150601f19603f3d011682016040523d82523d6000602084013e612a71565b606091505b50915091508115612a855791506125379050565b805115612a955780518082602001fd5b60405162461bcd60e51b81526020600482018181528651602484015286518793919283926044019190850190808383600083156128045781810151838201526020016127ec565b3b15159056fe45434453413a20696e76616c6964207369676e6174757265202773272076616c7565526566657272616c56616c696461746f723a2053656e646572206e6f742061646d696e45434453413a20696e76616c6964207369676e6174757265202776272076616c7565536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774d6574615472616e73616374696f6e52656365697665723a207a65726f20616464726573735361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a264697066735822122077f2d13cbcb85fa08010a53c1e4ef27117b031e8c1c9273d55cef362af299f3164736f6c6343000605003345737461746553616c6557697468417574683a207a65726f20616464726573734d6574615472616e73616374696f6e52656365697665723a207a65726f206164647265737345737461746553616c6557697468417574683a206973206e6f74206120636f6e7472616374",
  "deployedBytecode": "",
  "devdoc": {
    "methods": {
      "buyLandWithSand(address,address,address,uint256[],bytes32,uint256[],bytes32[],bytes,bytes)": {
        "params": {
          "assetIds": "asset ids (lands) that will be bought",
          "buyer": "address that perform the payment",
          "info": "[X_INDEX=0] x coordinate of the Land [Y_INDEX=1] y coordinate of the Land [SIZE_INDEX=2] size of the pack of Land to purchase [PRICE_INDEX=3] price in SAND to purchase that Land",
          "proof": "merkleProof for that particular Land",
          "referral": "referral id",
          "reserved": "the reserved address (if any)",
          "salt": "The salt submitted for verification.",
          "signature": "A signed message specifying tx details",
          "to": "address that will own the purchased Land"
        }
      },
      "changeAdmin(address)": {
        "details": "change the administrator to be `newAdmin`.",
        "params": {
          "newAdmin": "address of the new administrator."
        }
      },
      "disablePreviousSigningWallet(address)": {
        "details": "Disable compromised signing wallet",
        "params": {
          "disableWallet": "The wallet address to be disabled"
        }
      },
      "getAdmin()": {
        "details": "gives the current administrator of this contract.",
        "returns": {
          "_0": "the current administrator of this contract."
        }
      },
      "getSigningWallet()": {
        "details": "signing wallet authorized for referral",
        "returns": {
          "_0": "the address of the signing wallet"
        }
      },
      "isMetaTransactionProcessor(address)": {
        "details": "check whether address `who` is given meta-transaction execution rights.",
        "params": {
          "who": "The address to query."
        },
        "returns": {
          "_0": "whether the address has meta-transaction execution rights."
        }
      },
      "isReferralValid(bytes,address,address,uint256,uint256)": {
        "params": {
          "commissionRate": "The commissionRate of the referral",
          "expiryTime": "The expiry time of the referral",
          "referee": "The address of the referee",
          "referrer": "The address of the referrer",
          "signature": "The signature to check (signed referral)"
        },
        "returns": {
          "_0": "True if the referral is valid"
        }
      },
      "setMetaTransactionProcessor(address,bool)": {
        "details": "Enable or disable the ability of `metaTransactionProcessor` to perform meta-tx (metaTransactionProcessor rights).",
        "params": {
          "enabled": "set whether the metaTransactionProcessor is enabled or disabled.",
          "metaTransactionProcessor": "address that will be given/removed metaTransactionProcessor rights."
        }
      },
      "setReceivingWallet(address)": {
        "params": {
          "newWallet": "address of the new receiving wallet"
        }
      },
      "updateMaxCommissionRate(uint256)": {
        "details": "Update the maximum commission rate",
        "params": {
          "newMaxCommissionRate": "The new maximum commission rate"
        }
      },
      "updateSigningWallet(address)": {
        "details": "Update the signing wallet The previous wallet is still valid for a grace period (_previousSigningDelay). If you want to disable the previous wallet, use the disablePreviousSigningWallet function.",
        "params": {
          "newSigningWallet": "The new address of the signing wallet"
        }
      },
      "withdrawAssets(address,uint256[],uint256[])": {
        "params": {
          "assetIds": "the assetIds to be transferred",
          "to": "intended recipient of the asset tokens",
          "values": "the quantities of the assetIds to be transferred"
        }
      }
    },
    "title": "Estate Sale contract with referral"
  },
  "userdoc": {
    "methods": {
      "buyLandWithSand(address,address,address,uint256[],bytes32,uint256[],bytes32[],bytes,bytes)": {
        "notice": "buy Land with SAND using the merkle proof associated with it"
      },
      "getExpiryTime()": {
        "notice": "Gets the expiry time for the current sale"
      },
      "getMaxCommissionRate()": {
        "notice": "the max commission rate"
      },
      "getMerkleRoot()": {
        "notice": "Gets the Merkle root associated with the current sale"
      },
      "isReferralValid(bytes,address,address,uint256,uint256)": {
        "notice": "Check if a referral is valid"
      },
      "setReceivingWallet(address)": {
        "notice": "set the wallet receiving the proceeds"
      },
      "withdrawAssets(address,uint256[],uint256[])": {
        "notice": "enable Admin to withdraw remaining assets from EstateSaleWithFee contract"
      }
    },
    "notice": "This contract manages the sale of our lands as Estates"
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1129,
        "contract": "src/solc_0.6/EstateSale/EstateSaleWithAuth.sol:EstateSaleWithAuth",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 14099,
        "contract": "src/solc_0.6/EstateSale/EstateSaleWithAuth.sol:EstateSaleWithAuth",
        "label": "_admin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 14168,
        "contract": "src/solc_0.6/EstateSale/EstateSaleWithAuth.sol:EstateSaleWithAuth",
        "label": "_metaTransactionContracts",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 12200,
        "contract": "src/solc_0.6/EstateSale/EstateSaleWithAuth.sol:EstateSaleWithAuth",
        "label": "_signingWallet",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 12202,
        "contract": "src/solc_0.6/EstateSale/EstateSaleWithAuth.sol:EstateSaleWithAuth",
        "label": "_maxCommissionRate",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 12206,
        "contract": "src/solc_0.6/EstateSale/EstateSaleWithAuth.sol:EstateSaleWithAuth",
        "label": "_previousSigningWallets",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7750,
        "contract": "src/solc_0.6/EstateSale/EstateSaleWithAuth.sol:EstateSaleWithAuth",
        "label": "_wallet",
        "offset": 0,
        "slot": "6",
        "type": "t_address_payable"
      },
      {
        "astId": 7752,
        "contract": "src/solc_0.6/EstateSale/EstateSaleWithAuth.sol:EstateSaleWithAuth",
        "label": "_authValidator",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(AuthValidator)7063"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AuthValidator)7063": {
        "encoding": "inplace",
        "label": "contract AuthValidator",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}