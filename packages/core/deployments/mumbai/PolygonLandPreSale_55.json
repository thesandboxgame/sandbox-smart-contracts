{
  "address": "0xeE3A1E25085c39aAb5abD57757E29F90C54A30E6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "landAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sandContractAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "initialMetaTx",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "initialWalletAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "expiryTime",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "initialSigningWallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "initialMaxCommissionRate",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "estate",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "feeDistributor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "authValidator",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "topCornerId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountPaid",
          "type": "uint256"
        }
      ],
      "name": "LandQuadPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newMaxCommissionRate",
          "type": "uint256"
        }
      ],
      "name": "MaxCommissionRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "metaTransactionProcessor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "MetaTransactionProcessor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newWallet",
          "type": "address"
        }
      ],
      "name": "NewReceivingWallet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "referee",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "commission",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "commissionRate",
          "type": "uint256"
        }
      ],
      "name": "ReferralUsed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newSigningWallet",
          "type": "address"
        }
      ],
      "name": "SigningWalletUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "reserved",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "info",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "assetIds",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes",
          "name": "referral",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "buyLandWithSand",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "changeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "referral",
          "type": "bytes"
        }
      ],
      "name": "decodeReferral",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "disableWallet",
          "type": "address"
        }
      ],
      "name": "disablePreviousSigningWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExpiryTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxCommissionRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMerkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSigningWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "isMetaTransactionProcessor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "referee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "expiryTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "commissionRate",
          "type": "uint256"
        }
      ],
      "name": "isReferralValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "metaTransactionProcessor",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setMetaTransactionProcessor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "newWallet",
          "type": "address"
        }
      ],
      "name": "setReceivingWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMaxCommissionRate",
          "type": "uint256"
        }
      ],
      "name": "updateMaxCommissionRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newSigningWallet",
          "type": "address"
        }
      ],
      "name": "updateSigningWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "assetIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "withdrawAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3449539c033444d44fe3a4821f1ea15cab3d1a3016cf11542197fa3ab406c664",
  "receipt": {
    "to": null,
    "from": "0x5F890c9522dCE5670d741D4277BFCC2d9cA8Af02",
    "contractAddress": "0xeE3A1E25085c39aAb5abD57757E29F90C54A30E6",
    "transactionIndex": 0,
    "gasUsed": "2668381",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000040010000000000002000080000020000200000000000000008000000000000000000000000000000000000000000000000000000000800000000000000000000100020000000000000000000000000000000000000000000000000000000080000000010000000000000000000000000000000000000000000000000000000000000000200000200000000000000000000000000000000000000000000000000000000000004000000000000000000001000000000000000000000000000000108008001000000000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0xa3a22a3bc2f1150df391a1a8733f958ebd87d9273288d47d1308ef4a6c130905",
    "transactionHash": "0x3449539c033444d44fe3a4821f1ea15cab3d1a3016cf11542197fa3ab406c664",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 46129531,
        "transactionHash": "0x3449539c033444d44fe3a4821f1ea15cab3d1a3016cf11542197fa3ab406c664",
        "address": "0xeE3A1E25085c39aAb5abD57757E29F90C54A30E6",
        "topics": [
          "0xb21eb88b4e33b3f1281830a7178d74d8aa73220416215726b68ae23d539515cb"
        ],
        "data": "0x000000000000000000000000592daadc9ea7f56a81de1fd27a723bd407709c460000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 0,
        "blockHash": "0xa3a22a3bc2f1150df391a1a8733f958ebd87d9273288d47d1308ef4a6c130905"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 46129531,
        "transactionHash": "0x3449539c033444d44fe3a4821f1ea15cab3d1a3016cf11542197fa3ab406c664",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001c70a298e4260000000000000000000000000000000000000000000000000bf89616c585031fe9000000000000000000000000000000000000000000001339c2cda1823291c78600000000000000000000000000000000000000000000000bf879a622ec1ef9e9000000000000000000000000000000000000000000001339c2ea1224cb75ed86",
        "logIndex": 1,
        "blockHash": "0xa3a22a3bc2f1150df391a1a8733f958ebd87d9273288d47d1308ef4a6c130905"
      }
    ],
    "blockNumber": 46129531,
    "cumulativeGasUsed": "2668381",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x525129b95bA89B9800e47ef3dc7d23fBAd27b1a3",
    "0x592daadC9eA7F56A81De1FD27A723Bd407709c46",
    "0x592daadC9eA7F56A81De1FD27A723Bd407709c46",
    "0x49c4D4C94829B9c44052C5f5Cb164Fc612181165",
    "0xa5Eb9C9Eb4F4c35B9Be8cFaAA7909F9ebe6Cb609",
    "0xb83a4d19506b89ef5ac440bea46b90f2f1e23d566fe9bf88050bce6f0e7b7c00",
    2025000000,
    "0xB7060D3FeCAC3AE1F0A0AA416E3e8E472257950e",
    2000,
    "0x0000000000000000000000000000000000000000",
    "0xB766Af2EfCB61bd5a261E007D8866f005E305D5d",
    "0xAc3ff31f526Af7f386ea43649e3fa67e329AeF93",
    "0x1d3CE3489a064aEFc9928fe08F9d2Dd968F5c969"
  ],
  "numDeployments": 1,
  "linkedData": [
    {
      "x": 176,
      "y": 33,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x471882a8d7e9c2cd213233d403f199dc1c2fe8cf55dfcc25ad3b9dbba10a7d34",
      "assetIds": []
    },
    {
      "x": 172,
      "y": 31,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0xb0b069819536111c5bbd98644272ac079645e92d7c83275a2eec70331fc01c84",
      "assetIds": []
    },
    {
      "x": 170,
      "y": 33,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x5a10ad7f7a0a131d96437ac3780b42ed5f70c6d91a0f9d333c68d34a3b199615",
      "assetIds": []
    },
    {
      "x": 162,
      "y": 21,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x8f948e2962a883c6601ed8a97c1e08bb00b0d29f9b316a5c6ac8463f11ba1467",
      "assetIds": []
    },
    {
      "x": 162,
      "y": 17,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x09bc13c306aeeb0f5327ce0cb6aff058fe60abd8b5719bd16a15f3df5be848fc",
      "assetIds": []
    },
    {
      "x": 170,
      "y": 16,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0xdf8a0647e07eb61f4957fde0efaba75542b22a810c120ae22198529f1e3ffead",
      "assetIds": []
    },
    {
      "x": 175,
      "y": 22,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0xc49d4217a26d6f0d5b33758dd58bd80c96c46ad7d8b7439570ed6efd7d3d18d2",
      "assetIds": []
    },
    {
      "x": 176,
      "y": 19,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0xbf515b190f5479e1d72110248c1ad5b82fb68c7c697c7baee703bab413e0ba27",
      "assetIds": []
    },
    {
      "x": 168,
      "y": 35,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x025b2cd9cd2db337853c0e4653a9be8316cfacb075b7c892bb3db84631ffb723",
      "assetIds": []
    },
    {
      "x": 169,
      "y": 35,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x6115a472b7dafbda1271da7bdb88d06a1b3fdd1119636aeedd7a9c7d55d25a96",
      "assetIds": []
    },
    {
      "x": 170,
      "y": 35,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xf2b038e188897f5e6d79a8d1112363c819c85a4920d50ac2591fb3c325b69f84",
      "assetIds": []
    },
    {
      "x": 171,
      "y": 35,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x98b030de5357014782fc2368efcf8a8637e5b1a2db5c2e70b652d5f517ef7a82",
      "assetIds": []
    },
    {
      "x": 172,
      "y": 35,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xd9e25660135821556c630a0807521c4cdd251e5207fd7dc960264d1ac1ea162b",
      "assetIds": []
    },
    {
      "x": 173,
      "y": 35,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x18ccc671c21452b61bd8e881da37d522bc2033af32e1bd0f6f0d39179824569b",
      "assetIds": []
    },
    {
      "x": 174,
      "y": 35,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x3355c0c6dca43a7fdfa895dfc6ef6f2f0d245d89926968bbf81afb4ffd8fb8ed",
      "assetIds": []
    },
    {
      "x": 175,
      "y": 35,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x64c6e487fb2c661b1e5d0aa1301b60a490ae9c8eff7c6e890b1d2546d95c385a",
      "assetIds": []
    },
    {
      "x": 176,
      "y": 35,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xff91584c5deff201b34371aa54ffabf0fa34a42f33045c0b3dfbe891ddbf0ce3",
      "assetIds": []
    },
    {
      "x": 179,
      "y": 35,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x97b96a0fca150e379faa10b11f8717cbfe4cc9417759fc246f06e093dd56c2a7",
      "assetIds": []
    },
    {
      "x": 179,
      "y": 34,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x90a635d77c5aa569a925d33d6847b9be0e8868b65a4e91cdf7c7d0998307bdf7",
      "assetIds": []
    },
    {
      "x": 179,
      "y": 33,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x1ddeb8583ea89a9a4eb88d40a4a0934bdf0d3aadad7cd3cf42becf20dcd05e1e",
      "assetIds": []
    },
    {
      "x": 179,
      "y": 32,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x2bf6e57600f95bf8135ee285e7760fc70c306d11e857f26ade028e89356be495",
      "assetIds": []
    },
    {
      "x": 179,
      "y": 31,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x8cd315d8950c7f001cf08acaf37a45d335598593977e3eed0ff97605478b5b2f",
      "assetIds": []
    },
    {
      "x": 179,
      "y": 30,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xa11bee059923a1bae83843f781230752b4311250440f661afb36e8e78b9240aa",
      "assetIds": []
    },
    {
      "x": 179,
      "y": 23,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x2ec42a491e192e5168ec5f500b018fb06763125a7b1af38a0afc008de3a2cf5c",
      "assetIds": []
    },
    {
      "x": 179,
      "y": 22,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xda1c0936156b78b4c014114880eccfa8f85713796104b0c05708360456138454",
      "assetIds": []
    },
    {
      "x": 179,
      "y": 21,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x13262a313f5ef47912dcdf9b791b80d3bfd6a1f2b72119111d795abbcc456b9e",
      "assetIds": []
    },
    {
      "x": 179,
      "y": 20,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x152670e8ca36b5bbf13fcad634af76952f94c69df511f8b2c32b78232f6bafd6",
      "assetIds": []
    },
    {
      "x": 179,
      "y": 18,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xe04ff55016b17a5bccd146a259e0daf87f624f7f0eff6f84cf7a5ac87c12dd6f",
      "assetIds": []
    },
    {
      "x": 179,
      "y": 19,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xf89b768c00faeb0367e81767dfa8d6b86b9d314c63e650c8235cf39ede7dceaa",
      "assetIds": []
    },
    {
      "x": 174,
      "y": 18,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x538a560f4d4dd75fa2f29e4e953e3740bc10b33fcc9602c374e9453f59c6c3eb",
      "assetIds": []
    },
    {
      "x": 175,
      "y": 18,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x217736d2a1b10586761c275f7926fd5bfdc3f780e8001e7fafbe46647709ea2e",
      "assetIds": []
    },
    {
      "x": 176,
      "y": 18,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x69075a1173381839b221a2eca3cad424c290a98ed435421aeff05df976800275",
      "assetIds": []
    },
    {
      "x": 177,
      "y": 18,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xee4ae79e38abcd528568e6ddbab706c2bd8fbad046cbaf509c3531a4ded9b72e",
      "assetIds": []
    },
    {
      "x": 178,
      "y": 18,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x69bef75401eeb1b90cd006eeda1c5461f2465dabc52e486dc47e75d7a6c16936",
      "assetIds": []
    },
    {
      "x": 178,
      "y": 23,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xaf83bf077f30d18c0a54120df71fb82588a7ac7b5935f9398ff0726d2fa7ca9e",
      "assetIds": []
    },
    {
      "x": 177,
      "y": 23,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xea45aff0bdd1fe36e6cff3ff3d60320076e463071ea80145147db9bfaa0a2eeb",
      "assetIds": []
    },
    {
      "x": 176,
      "y": 23,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xe5fe49b330de936a0d4b7d20e3a6a0122995d817fce9d307987372111625d0f7",
      "assetIds": []
    },
    {
      "x": 175,
      "y": 23,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xd6eb8bb319076899f93a24de875b212fe4d8b55cc911eb8cf70fc0efa2550608",
      "assetIds": []
    },
    {
      "x": 174,
      "y": 23,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xa4c9bbba3d96b972b8ccb9cc9067d2127b86490234ce51b5ca16d5cf9c336241",
      "assetIds": []
    },
    {
      "x": 174,
      "y": 22,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x1cfc08009c3f7f428248fd32cb7cd07fe57d69ee45701acd7c9ac28a566ea593",
      "assetIds": []
    },
    {
      "x": 174,
      "y": 21,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x43b58912ded71e4feca9cccd3581d799146dadc198bab82d34071bf770f8ecab",
      "assetIds": []
    },
    {
      "x": 174,
      "y": 20,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x520d145e22fba3cb9b9e60104eeb4916b69239c09d0b942644cb13dbff5281c8",
      "assetIds": []
    },
    {
      "x": 174,
      "y": 19,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x97e524db516f629ba8dc97c6c962be96f7f03cbc3c6ee00d3bfb0b7ee0b0085d",
      "assetIds": []
    },
    {
      "x": 175,
      "y": 21,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xbc0b19da0caecd64fe7bd517d87276e1c725b400e2bf451e06a0fb8e2a788fe2",
      "assetIds": []
    },
    {
      "x": 176,
      "y": 21,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xd34046b96d5f4cf38a61b26a383ae92bc1e4d53f50be7a8d9e1e93dc70d00770",
      "assetIds": []
    },
    {
      "x": 176,
      "y": 22,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x41c013357a6c692e04af8f327ed1d75a85c543419374b64740435c56bd1258e3",
      "assetIds": []
    },
    {
      "x": 178,
      "y": 22,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x72aec25a0b4b370fec0a113a731cfa3bfc368b57bce708d6fee8baf243eb174b",
      "assetIds": []
    },
    {
      "x": 178,
      "y": 21,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x1f1074c90853090b32df63be7622a6364253ef12ad0a44b3566d3dd387024a6c",
      "assetIds": []
    },
    {
      "x": 178,
      "y": 20,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x4570e14859b1d93421d22cc94847b466ed5c51d2422aaa86c72235acc6430155",
      "assetIds": []
    },
    {
      "x": 178,
      "y": 19,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x9a46f05e0a5817330d9971542e0d9cf715efe14bdfa145d8fb91e51d208dc28b",
      "assetIds": []
    },
    {
      "x": 177,
      "y": 19,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xf294672968f1ccdfa2704392255687679ec8955265f227673450f1de8dd76fcc",
      "assetIds": []
    },
    {
      "x": 177,
      "y": 20,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x7f35cd582ab6eaf8c52d50af413f4e359495f95f27e6d929cc008821df86defd",
      "assetIds": []
    },
    {
      "x": 177,
      "y": 21,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x6ffd4fab546abe8684821be41964a347e68e10f771a745ed73d31da96a0f47e6",
      "assetIds": []
    },
    {
      "x": 176,
      "y": 20,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x0758d53ccdb01acea93932f5f59e75066e7d3c49ff2f40d1b7f6abc29b95b8f5",
      "assetIds": []
    },
    {
      "x": 175,
      "y": 20,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x068b348fb72cd1892679c7652b1f29b91da0a8397760a5244fed720ba23fd6ec",
      "assetIds": []
    },
    {
      "x": 175,
      "y": 19,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x6a23f28ef0ef8844c98b7994390cfde91c9d48eff80948b0d57ff2419af9ec4a",
      "assetIds": []
    },
    {
      "x": 177,
      "y": 32,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x29e0b0afad8065c8ba5df3a813cbdcc2a61ed683878d10fdd928f3ebdc1e43c3",
      "assetIds": []
    },
    {
      "x": 178,
      "y": 32,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x229065771a62b99323c0069a5808a2a31aba0848469900351fe68e63aadc1ca4",
      "assetIds": []
    },
    {
      "x": 178,
      "y": 31,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xab3d1b8992824a6ad3167e4d3b8bb26bbec13531e314a1c38a790d7ec28a0d6f",
      "assetIds": []
    },
    {
      "x": 177,
      "y": 31,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x4d28d660725b611abd13e858bcbe4dbd14e5a1d537f8747a22c2f1b517406bce",
      "assetIds": []
    },
    {
      "x": 177,
      "y": 30,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xc611846cbdea6e621ec4e7d8560991590841195bf763cab2b28cc5bc616604db",
      "assetIds": []
    },
    {
      "x": 178,
      "y": 30,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x3746363949b9ce69421f29131aeb796f6b6177713cff4a4e71c190c066324a2f",
      "assetIds": []
    },
    {
      "x": 176,
      "y": 34,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x3d32f2a6eafc23a6c14130bd39b089978baed92ccfbd25ff2e7eb9beec0e7bd8",
      "assetIds": []
    },
    {
      "x": 175,
      "y": 34,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xb33ab41fc3ed657e5c2500c67a54c4d1da394c5f24f073bcf5bd01c797cf8f6a",
      "assetIds": []
    },
    {
      "x": 174,
      "y": 34,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x12524951c3043f048f9053062e32eb01eda530d26067394c1a64272ada33c3c0",
      "assetIds": []
    },
    {
      "x": 173,
      "y": 34,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x2a41092a9050756029fdb5f3b5c0084e5886d3e6aa6e47be33ebe955ad2c7f8f",
      "assetIds": []
    },
    {
      "x": 172,
      "y": 34,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x87128e82251750c9f6518fdd152a13636d3a91e346cf08bd25e452ba2a22a565",
      "assetIds": []
    },
    {
      "x": 171,
      "y": 34,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x717bf50491afff838237461bd567077e91509bb7e62a440bc6d00dbd8b5e262f",
      "assetIds": []
    },
    {
      "x": 170,
      "y": 34,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x909500e912ec84e0d54d8df261aafa56ef94ab37b02f5f7b99ad5aba9cf92408",
      "assetIds": []
    },
    {
      "x": 169,
      "y": 34,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x916e8815b2b76c04955e17c326ddfd6fcc8771cf21856107a5729590d0c95b84",
      "assetIds": []
    },
    {
      "x": 168,
      "y": 34,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x012cbf8dcdaec9a3645acd362b5404e126718d72831977f1890881d30a0defc5",
      "assetIds": []
    },
    {
      "x": 175,
      "y": 33,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x3c006aa2d6cd74771ce3940eea07a0b3b330c6f27593484ca314267a521667ff",
      "assetIds": []
    },
    {
      "x": 174,
      "y": 33,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x5e7cb4f98fe4c6f871f3af8c98376b67b7ae48db901caccc7fcf304d2d7e4dd0",
      "assetIds": []
    },
    {
      "x": 173,
      "y": 33,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xb48e7e7b7db275a8be1cf242276663d1cab27a3ab5472027e689fcd3957025df",
      "assetIds": []
    },
    {
      "x": 172,
      "y": 33,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xf8ab9e264587116dc4b489265332b0628360c7c10e1c10a0a9a24aae44751594",
      "assetIds": []
    },
    {
      "x": 171,
      "y": 33,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xdda32f27c675c346121f1b915ef568a3fa636476320f29dd9c997ae9d72c8dfd",
      "assetIds": []
    },
    {
      "x": 169,
      "y": 33,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xfd7c569cfb9377c3a081ccaf3ee1fb9f661db2fb40db90adf55789a05b5891b3",
      "assetIds": []
    },
    {
      "x": 168,
      "y": 33,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xc5b1980f9f685fe5def15dda4a1369330f4da48fe5491f6ab5ca8e03b7c5ac40",
      "assetIds": []
    },
    {
      "x": 168,
      "y": 32,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x62455f4cdc825c06f897f7ac593db26f353b7c86f5816a2875720f82c8a43650",
      "assetIds": []
    },
    {
      "x": 168,
      "y": 31,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xbad3025d1f81e7ace4f5c6b43bf20e691956714276881950259de9a38b0d3fa9",
      "assetIds": []
    },
    {
      "x": 169,
      "y": 31,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x8f2d9b5e162a1c77e4dd9417d85bb93962fb6fba8f190fd26ac4a29ac1649b69",
      "assetIds": []
    },
    {
      "x": 169,
      "y": 30,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x9db5b8c7686fbc4ad65e0fc21f85b3ff43e18a308e2d4b9f654ad243c2c544ef",
      "assetIds": []
    },
    {
      "x": 168,
      "y": 30,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xf92d435a29b92e1c74abd952295e9c2b47126c49538006f61794a570b3d8adb4",
      "assetIds": []
    },
    {
      "x": 169,
      "y": 32,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x2ccf5f76bf6f964a8ca69d8ff76bf5ff25ce54bd94f9ed0db3d58def441ba4eb",
      "assetIds": []
    },
    {
      "x": 170,
      "y": 32,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xed0acd21c6a76ff33b86bbb74c3bcfe791fefc120dbde08f70574ce08036da13",
      "assetIds": []
    },
    {
      "x": 171,
      "y": 32,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xc11824e65ed76172143bcb138ae88deb38a851a95748e8a4e00db3b12d582a10",
      "assetIds": []
    },
    {
      "x": 172,
      "y": 32,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x196319d3df17c45fabcd66d2cb38a1300114efbdd8eaa2d1563a86fd2cac5b63",
      "assetIds": []
    },
    {
      "x": 173,
      "y": 32,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x0bc2342851f1e528905d6937c46a6673634c279621643255c3ae297593f3e4c3",
      "assetIds": []
    },
    {
      "x": 173,
      "y": 31,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x11df4085776b1262bfd4ac6f4ba50a1a89901202c3be3bf773a1e67c099570ab",
      "assetIds": []
    },
    {
      "x": 173,
      "y": 30,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x2a5492b50a021bf3644e2929bb4da00a5b2353b21669e015bda4e0aba1c955de",
      "assetIds": []
    },
    {
      "x": 172,
      "y": 30,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x92484dd7c886b7ffb2e24fc019c6d01786daca57b684e4fb94831378743a2fe3",
      "assetIds": []
    },
    {
      "x": 171,
      "y": 30,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xf6bba9de7829f0ee1fadd70c2a00b1c3321dae45b8a9319859cb6b6a6331f6fc",
      "assetIds": []
    },
    {
      "x": 171,
      "y": 31,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xaec1cecc81e9f84591d14ebcd60c65f56f4b7229a26bd96d979e6e0f0ff2be08",
      "assetIds": []
    },
    {
      "x": 170,
      "y": 31,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x98ea36d60523283930807f8115fbfb6e54ac1cdfc5594135ac05a55236897630",
      "assetIds": []
    },
    {
      "x": 170,
      "y": 30,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xbba55b7e8e259ae9d54844e1d2d311c3d123a69ac79a32d6edb6488a30527d20",
      "assetIds": []
    },
    {
      "x": 162,
      "y": 32,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x9b1417cdaed4773e2a3606d1259180ba05268360530fe533a7de33a1b3247f29",
      "assetIds": []
    },
    {
      "x": 164,
      "y": 32,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xb3da5f3e495855d0e52836a7ea3431b63eb9d877b01c5c82029a1e4aab9b2d89",
      "assetIds": []
    },
    {
      "x": 164,
      "y": 31,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xd47bd3c64df79ff25660888606797ffb04fa077cd9b5045846d44f11ed9855d8",
      "assetIds": []
    },
    {
      "x": 164,
      "y": 30,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x5741e12b94195ee4a0eda6fa7438fc79edb14f3b4b3f58544f828d5d4cf9a3df",
      "assetIds": []
    },
    {
      "x": 163,
      "y": 30,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x97088f390859cd8bafc7bc184742fc3b212e0e862f5db2597dd5c6c90529e21a",
      "assetIds": []
    },
    {
      "x": 162,
      "y": 30,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xeb856f43c37ca090db864c99d7827cbd763d2f89669da3361a8489fa4263e5e1",
      "assetIds": []
    },
    {
      "x": 162,
      "y": 31,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x7c363ec471fe9f74ac7561a9e75ae09e14bc91ba45637bfdff865ccbb7924b18",
      "assetIds": []
    },
    {
      "x": 163,
      "y": 31,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x35ad0c27a2e91f5e90cf9da14319b98804f62400ba3e7b725283fe82b8b2f510",
      "assetIds": []
    },
    {
      "x": 161,
      "y": 29,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x7dec3334f68e6db2501ab2b95df0f8e856f2f74b5550d714d61c6ef9991524dd",
      "assetIds": []
    },
    {
      "x": 161,
      "y": 28,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xdb51f3ab9b67bb2886498f9a7cad92d62922de19b30370f069f5302656fa2f50",
      "assetIds": []
    },
    {
      "x": 161,
      "y": 27,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xbefa274e19fed88346d0c5a6b7d36fbdcf45a53b84ebe4757bbda38c45612aae",
      "assetIds": []
    },
    {
      "x": 161,
      "y": 26,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x6cbcb936bd8965f0d1f568110561fae0e2268ab780100b517a22c8343718df60",
      "assetIds": []
    },
    {
      "x": 161,
      "y": 25,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x2097655ef7c9e5ce77b9b8ca3f8d41efc31cb5feb37b1846abff6fb89088eded",
      "assetIds": []
    },
    {
      "x": 161,
      "y": 24,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x6283e1c01dc599337b16a5ee160a027423fdc34c728ff820392861c1d3e08512",
      "assetIds": []
    },
    {
      "x": 161,
      "y": 23,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xe0485987d6108fcaf499ad6a59303e3dcce95300daf17732817f682866d52742",
      "assetIds": []
    },
    {
      "x": 162,
      "y": 23,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xae97f7948b0cf1d5bf3bd50a2838015330be23ce0da2a8d4ce2c85e4c8455934",
      "assetIds": []
    },
    {
      "x": 163,
      "y": 23,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x716789f73044a8cb8380be2aca43871f7f050d43612f4faaabc0dba40735a1a4",
      "assetIds": []
    },
    {
      "x": 164,
      "y": 23,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x6dd3b6ac3605bffd55d5800410239dd288d1af8dd2d2d31fc5a1a57fecf7f464",
      "assetIds": []
    },
    {
      "x": 165,
      "y": 23,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x0e8a69d7e3a5c7b40ef156cc9162f57b03aad0acb7cf670a303f848b1edd9182",
      "assetIds": []
    },
    {
      "x": 166,
      "y": 23,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x9a51a06a15d9a459980431dbc4d09cb4bab154a64e38408554754ae5e3908e64",
      "assetIds": []
    },
    {
      "x": 167,
      "y": 23,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xcf87aa45b911a86beecf47113f6d8829b485e1754132909f236f7d6cf7d165ab",
      "assetIds": []
    },
    {
      "x": 162,
      "y": 22,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xa30971e28f56c806f2f41084f860afa52aef564adcaab6accf662b99b33f193a",
      "assetIds": []
    },
    {
      "x": 161,
      "y": 22,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x9fae5b712dcf54ab71e8e2227896b22f03029a8a545be272366d2001b9441087",
      "assetIds": []
    },
    {
      "x": 163,
      "y": 22,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xa6c64cce28561df4f3fada73c2fa105764bd57983f39480ed5155d86f95dd578",
      "assetIds": []
    },
    {
      "x": 164,
      "y": 22,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x00c0aeeed233d7909f248814191be6d2562cf81f776ec3b8f3a074993707942b",
      "assetIds": []
    },
    {
      "x": 165,
      "y": 22,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x562770e331614217b403a421104f0dcbee53ff2015adcd9261d7d94b0690fe53",
      "assetIds": []
    },
    {
      "x": 166,
      "y": 22,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xf5f7674e7cdbf0061cbdaac752461bab486d2222efb905fffbb9291b341793c3",
      "assetIds": []
    },
    {
      "x": 167,
      "y": 22,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xf01bcc1df9fe396c1d665f5a5ac0a65e4a9197dc7258090461b25b8a8afdcc1b",
      "assetIds": []
    },
    {
      "x": 166,
      "y": 21,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xa13703cb3ffbada18591a3a7aae59158494a393f37d8ef4966f42fc751f2cb89",
      "assetIds": []
    },
    {
      "x": 165,
      "y": 21,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xaf3e2e70cef2181519f1ea24d9d293488d7f0afbd412709df88d97db326152cc",
      "assetIds": []
    },
    {
      "x": 164,
      "y": 21,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x3fd6127e6047cd2e0a18e5c1bf47d789baad4abd524cec703ee51e97699f236f",
      "assetIds": []
    },
    {
      "x": 163,
      "y": 21,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x5ebcc055df9f5a2a6b02674f10866f612dcdafb7a959a45b6bc30d4c07eb8155",
      "assetIds": []
    },
    {
      "x": 161,
      "y": 21,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x24eeafa8af6261cb44bc4c72be5e17bb2840b4f47b6c9f88bc59c5a434d0037e",
      "assetIds": []
    },
    {
      "x": 161,
      "y": 20,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x1a1f2f8570e0ca3aa463df0850df452489db6851b6c831ddc4e441c00d66b1d1",
      "assetIds": []
    },
    {
      "x": 162,
      "y": 20,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x17f7d11e6fdb7998c4c7f6de0e19150a9262c8f5968cdd51bc2b0fa6d2b4c6d9",
      "assetIds": []
    },
    {
      "x": 163,
      "y": 20,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xb9216ea2ff767140c8acdf4cf8bbf00499abaf827e2acecbe173f26227b64541",
      "assetIds": []
    },
    {
      "x": 164,
      "y": 20,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x882856e8906414c958705857aea28ac9985b275ac004902545da475f166b52d8",
      "assetIds": []
    },
    {
      "x": 161,
      "y": 19,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x6d466da302115e8781aec1466d26651471ae8ff22997ee1df935bdbf1efd5696",
      "assetIds": []
    },
    {
      "x": 162,
      "y": 19,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x4466ca06ae9fbe4b138e0a6206c9293baf16b1043272a44a3e34b8d1935dc432",
      "assetIds": []
    },
    {
      "x": 163,
      "y": 19,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xabf62adb9a432b18e51c467b77501c715d398d3de40e253c50d5229f3016b32c",
      "assetIds": []
    },
    {
      "x": 164,
      "y": 19,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xe000af097b66060288d502ebbdd2c893308370acbae2bbe8f46f6296dd71e134",
      "assetIds": []
    },
    {
      "x": 164,
      "y": 18,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xf26817d68e05de64d5b259e8211ea85c66f15cd8bf1acb231ad1b31c86e929f1",
      "assetIds": []
    },
    {
      "x": 163,
      "y": 18,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x3782411870bb4be18e0740f9a431c963db031f2310597ea6eac1c43f1ae92004",
      "assetIds": []
    },
    {
      "x": 162,
      "y": 18,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x05f00f9b2cdf5cefa4bf0500086330857d06cd2ac94285d26b4053ddef3e275f",
      "assetIds": []
    },
    {
      "x": 161,
      "y": 18,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x19d373963b703de9c9ca0e1466d76d6070ba8a19933ea84566a69855226776f9",
      "assetIds": []
    },
    {
      "x": 161,
      "y": 17,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x5ce315bb244befc8cd0622db29ff3da28d91a34cc91e6b1dbb05126e0712844f",
      "assetIds": []
    },
    {
      "x": 163,
      "y": 17,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x3cebb04027a5cbc57a5ff281ef648a2d2a09c38b08d8334b8e6c71fae4627c1f",
      "assetIds": []
    },
    {
      "x": 164,
      "y": 17,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x13cad38596b8f6c117ebf74e9971be58007a52fc94378aba9549a40105f39a07",
      "assetIds": []
    },
    {
      "x": 165,
      "y": 17,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x3d9c9ad44caeae13b77f3755e1f30078c438bf1e85ac9294366f46b77207da8c",
      "assetIds": []
    },
    {
      "x": 166,
      "y": 17,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xd71f39e10fd9725909148c046533475ad0624b0c4eb4eeb57ae012a6fda161e3",
      "assetIds": []
    },
    {
      "x": 167,
      "y": 17,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xc90579d6015080b136416913f069a9817aff8ee24e398fc439ee16b7f66557ee",
      "assetIds": []
    },
    {
      "x": 168,
      "y": 17,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x877ac37bee64850b934f19a90a1d146ddeeb22bf0da1743fa583108fc32274d2",
      "assetIds": []
    },
    {
      "x": 168,
      "y": 16,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x8b3272f90d84beb08bc8f02b86454ba89943ac6e81fe760bc2fae2c5b147c4da",
      "assetIds": []
    },
    {
      "x": 169,
      "y": 16,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x015b3e9951f41f8113bc8bb7f9be6df6f40715083f8a7fbfa4582ab1c47a0d82",
      "assetIds": []
    },
    {
      "x": 170,
      "y": 17,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x09e528313d33ad61a1aabfaf25d276758f84eb53dbedb315f3019c58bc92e6ce",
      "assetIds": []
    },
    {
      "x": 169,
      "y": 17,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xc3fc03b2937bdf070b4a52e9bc40f48f4d7e170d44266335798b5f9e00e3eaa0",
      "assetIds": []
    },
    {
      "x": 170,
      "y": 15,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xa23a9edb171a16c2ac618df8d87695cbe76df88c9bc9a05439a4c6379caf98ee",
      "assetIds": []
    },
    {
      "x": 169,
      "y": 15,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x0230f77f9670de8803761cc87b02766de22d9b9735b3a7ad6eec8b51bb8d78ca",
      "assetIds": []
    },
    {
      "x": 168,
      "y": 15,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xbcf7439cec187a69b4fb06a8ff7adc8f4025e0713161a363e7a3481164d2e0aa",
      "assetIds": []
    },
    {
      "x": 167,
      "y": 15,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x42164838071c75b1f339f71e7c122471a0980e608217634178e60392f2bfa4cc",
      "assetIds": []
    },
    {
      "x": 166,
      "y": 15,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xdc8399e19cc1d62400585cd32f68828477a72d13d83c8ca3aea5124fa2defbbb",
      "assetIds": []
    },
    {
      "x": 165,
      "y": 15,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xe88389aabc868a44c859b3a2269c2c4e3bb7a148714c25724b13cb5a08de6b7a",
      "assetIds": []
    },
    {
      "x": 164,
      "y": 15,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xcb9e7a2fd688f5b8830d4590b3c369762d6167b6b15421d9cbbf9b8055b9e1a8",
      "assetIds": []
    },
    {
      "x": 163,
      "y": 15,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xefc7361cb325e7ff0d1ff6e701be2dec79d0b74b3ca6ea7341f918e9867cee6b",
      "assetIds": []
    },
    {
      "x": 162,
      "y": 15,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x0fcbfa73becd9a8a85dd5a08f9813b45b7d16379cbf9a02bfea30905d138ba2a",
      "assetIds": []
    },
    {
      "x": 161,
      "y": 15,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xba4664036ad378776ac1301083a961500ab5624db49b5c4e47117693b7f72cc3",
      "assetIds": []
    },
    {
      "x": 167,
      "y": 16,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xd8f274334f6e46b15c47594b088b362ded82415bc77e198044c6a37c0a7fe709",
      "assetIds": []
    },
    {
      "x": 166,
      "y": 16,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x4a07d73a0a416ba319c069cd7d6b398816e0e7c6e1242c9a25ec0df2fd8e343d",
      "assetIds": []
    },
    {
      "x": 165,
      "y": 16,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x54571d0c3986b3f6017ac3dc8da9605157ec62cf320b0f8d6eca75c572f39c32",
      "assetIds": []
    },
    {
      "x": 164,
      "y": 16,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x07865df9b02dbfde2fdb4d2acc1f06aa4fa129655d957d14e4f7219106e43797",
      "assetIds": []
    },
    {
      "x": 163,
      "y": 16,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x526921dcd115db3bad181841aa8853ac52303224154bebed28915d2d39985a2b",
      "assetIds": []
    },
    {
      "x": 162,
      "y": 16,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x8fa4f76e88753d942aa44c3a9b41ccc20bb84c18180d49782f0060db06fd7da4",
      "assetIds": []
    },
    {
      "x": 161,
      "y": 16,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x558ec15df22219b929f5756889ee0f084e7e0de15a8351a8b596851416f88d00",
      "assetIds": []
    },
    {
      "x": 160,
      "y": 14,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x395a9ed7708a2f3201a493bbfbddf5242eb41ef09808983104b64057f37ada2d",
      "assetIds": []
    },
    {
      "x": 161,
      "y": 14,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xedc2b4e8326443bea55cd6bb054f404c49337ad1f54d1d5a4100a0fafeb0b2eb",
      "assetIds": []
    },
    {
      "x": 161,
      "y": 13,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x92dcec673e38cd67b8b8a6c7f33d514f0f3e0518ea783a2bbff104b7f73a9f71",
      "assetIds": []
    },
    {
      "x": 161,
      "y": 12,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x86d9794e8d9a255110413797cd1b4c54dddeef383a1e278e4d8c38aebdf88283",
      "assetIds": []
    },
    {
      "x": 160,
      "y": 12,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x045d5c6a6d82f8b97e2659edd08dfe6c081ddd827310c355410a45bbdc687e2c",
      "assetIds": []
    },
    {
      "x": 160,
      "y": 13,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xc214ac1e42e2e9cf645e4ae1431871bb1aca88b6c805c8d21c0675e64bcacf60",
      "assetIds": []
    },
    {
      "x": 165,
      "y": 14,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x99ebe105317b207f86445ab09066fce33fb82a5ace6b1832f73b5370cc3abcf9",
      "assetIds": []
    },
    {
      "x": 166,
      "y": 14,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xa151d1ec9dc238e5cf80d89455f994401d4c06bd048f6e1dc3e436157c223562",
      "assetIds": []
    },
    {
      "x": 167,
      "y": 14,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x995783bbc4840c98625a1276a4df17a4d985fa58b5a036b2e7d4b62b47cafe1d",
      "assetIds": []
    },
    {
      "x": 167,
      "y": 13,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x218c499bbcc3a157ab1e75b2760cc02c31c1d123e2d580a88c6a19e65437ada7",
      "assetIds": []
    },
    {
      "x": 167,
      "y": 12,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x1257b0d1907672baad46702c32e9f3eaff02120c6dccfcf6120e37aca85d03a8",
      "assetIds": []
    },
    {
      "x": 166,
      "y": 12,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xf078dc5f052e934aa83716e7b45d40e55d2ddb37a190505c6c3994e73390ed44",
      "assetIds": []
    },
    {
      "x": 165,
      "y": 12,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x5ffd8579511362bbaa229bd7e626609b9d5110ecb177b36202a525f75904fc28",
      "assetIds": []
    },
    {
      "x": 165,
      "y": 13,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x07cb3ec73cd4841b246b392af559c809eace65d821e20f9bc55cf7c1c94c7f3c",
      "assetIds": []
    },
    {
      "x": 166,
      "y": 13,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x1c504c87eb001ed4ff681077f0e87159fb51f7a6c3c48ab64d37d31c177040a3",
      "assetIds": []
    },
    {
      "x": 171,
      "y": 14,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x65a382e0a6da842a1b2e0f3056ab1513c209c0c9a1bcdcd0a5dcc9ffe8804caf",
      "assetIds": []
    },
    {
      "x": 172,
      "y": 14,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xd33463fb44baef01f211ffe8e8a444304e7d1fc08cd9dabe999697b56aa5750b",
      "assetIds": []
    },
    {
      "x": 173,
      "y": 14,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x478477ad019bcb345a914568776e99198b2774765de6bd3f69df51e91db7de74",
      "assetIds": []
    },
    {
      "x": 173,
      "y": 13,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xc671e054fbbc1aefc333d7cde57a26caceebb2ab132cbb107e38515d234cc618",
      "assetIds": []
    },
    {
      "x": 173,
      "y": 12,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x62d3855ee5cbfd1034d506f69e2141100c6df219769083e58287c5c7369d9946",
      "assetIds": []
    },
    {
      "x": 172,
      "y": 12,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xefdfaa3592334954ead45b876b4122796e4c680795dbd9dc24e5d6e81f1e77db",
      "assetIds": []
    },
    {
      "x": 172,
      "y": 13,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xbcdcf5c514106df6d0167b41a949ac72bd5e4ddbeaa399721c640e6c75a0710f",
      "assetIds": []
    },
    {
      "x": 171,
      "y": 13,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x04092be9b69b282fa762fcab69ceeb0d979d4b0ba98501ef8f188f1a1f7b71a6",
      "assetIds": []
    },
    {
      "x": 171,
      "y": 12,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x55917665af0f42c77f56b257904c72df0a1910171f7b986acec9adc4e79be961",
      "assetIds": []
    },
    {
      "x": 162,
      "y": 35,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xfc946a7de1005c1549f0872ebce9c1263a09ca5fc86830cf1309aa612ca216ef",
      "assetIds": []
    },
    {
      "x": 163,
      "y": 35,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x80d80649f7dfd7aae08b97bd181818ea3722978b058d083f00449e1fc7d66ca2",
      "assetIds": []
    },
    {
      "x": 164,
      "y": 35,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xe2dedbdcef9c2f53d192c4f82c5c0714d65e2325fb5f7a91574a9b3c30cd271a",
      "assetIds": []
    },
    {
      "x": 164,
      "y": 34,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x0768d8290c9e90f14abbc47017ccba025a34f9db1051738758432b7cd2fac0ee",
      "assetIds": []
    },
    {
      "x": 164,
      "y": 33,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x53c7935738b6f3a53bf37cb5497d29d405ad366b7611c14db827fd78badd8c61",
      "assetIds": []
    },
    {
      "x": 163,
      "y": 33,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xd1564a427181768764e4c885fbe1fbf3f5495d3e4df18d41e39755711837be7c",
      "assetIds": []
    },
    {
      "x": 162,
      "y": 33,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x7ac96ed7015135a518f1b3ecb161d671415a8656a3ba7ff8e4b9c418dc7baf06",
      "assetIds": []
    },
    {
      "x": 162,
      "y": 34,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x02ab9834702a16415c8a639821e332bae09c75733ffe0d85152ff1f7f3a8720d",
      "assetIds": []
    },
    {
      "x": 163,
      "y": 34,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xed7f462b0a82115782ece7f72c7d232a0d4a367a3a2c7bc9fcf8d02455694207",
      "assetIds": []
    },
    {
      "x": 163,
      "y": 32,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x7bdfd77e69edc883b8c8bf7b80ffbdcf77d1d99dbbacb0bd02b046f53e5ef528",
      "assetIds": []
    },
    {
      "x": 177,
      "y": 35,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x6800695b562007c850af9d5454e5a1700d163376f51818ab655e5a5cfcb8035c",
      "assetIds": []
    },
    {
      "x": 178,
      "y": 35,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0xe6c0967a955b65a06fc3b1ef2be3f0a2989d54a43b361e62a69d68506f114d03",
      "assetIds": []
    },
    {
      "x": 178,
      "y": 34,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0xb25f4d1e26f04ae24b5620d81d6ed720a235ce9b93d8df3cd518c9ed84d5b4ca",
      "assetIds": []
    },
    {
      "x": 177,
      "y": 34,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x46eeb1b4f2ffc00be6342964db051117c30cdbb64202c0aa43d2079e6fa2fd9f",
      "assetIds": []
    },
    {
      "x": 177,
      "y": 33,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xe025a09158a39923d6422dabd037023caacb6edeb679ad1af7962e7f40d080f2",
      "assetIds": []
    },
    {
      "x": 178,
      "y": 33,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0xf0cb657f23b0fe3c484e0b976dea8061deac3150dd55c6158adbb2af9c0897b2",
      "assetIds": []
    },
    {
      "x": 167,
      "y": 21,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x351b5ee31ab381b2272596dcbd728ab1092a40612ce9708a500e2c47e4002cdd",
      "assetIds": []
    },
    {
      "x": 177,
      "y": 22,
      "size": 1,
      "price": "1011000000000000000000",
      "reserved": "",
      "salt": "0x70627a5e74c7bb65808483358952392e9cf55181868aeb0e502cbe3f5976f800",
      "assetIds": []
    },
    {
      "x": 165,
      "y": 33,
      "size": 3,
      "price": "8648000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x76d358e9733f206b0bbca92b5a56e063bcffb2a79f6953bd30d3e4f44051a87e",
      "assetIds": []
    },
    {
      "x": 165,
      "y": 30,
      "size": 3,
      "price": "8648000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x4a4eec591ceccd5d54ef9e68187b7d2982d8869cba2e1a52f34567fe2588ab46",
      "assetIds": []
    },
    {
      "x": 174,
      "y": 30,
      "size": 3,
      "price": "8648000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0xf77e5470d18ef34d83a432257ac1a428c48ab89fd46fa3205f559592ad663c12",
      "assetIds": []
    },
    {
      "x": 162,
      "y": 24,
      "size": 6,
      "price": "32772000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x141e9d2223ca2a3ceaf38c3929e34bfcab856f8fc9f79acb79e0f3387d3267e1",
      "assetIds": []
    },
    {
      "x": 168,
      "y": 24,
      "size": 6,
      "price": "32772000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0xfadacd178736f35a5fcd3b90cb6e640df0832ce07285d9b7fe6e323277edca2c",
      "assetIds": []
    },
    {
      "x": 174,
      "y": 24,
      "size": 6,
      "price": "32772000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0xa11a8b07c9c8e8ee0e61bfb0a0bcd2b1e9967d58aa74b76461116bdf20a1183c",
      "assetIds": []
    },
    {
      "x": 168,
      "y": 18,
      "size": 6,
      "price": "32772000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x3fb5d7028e48c987857c7bc8a81a053efd7a77de8310a1395fd54aef5a9258ee",
      "assetIds": []
    },
    {
      "x": 174,
      "y": 12,
      "size": 6,
      "price": "32772000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0xfa4c16d978c61b6527f674c454c3c52cdbbad3429ca7c12e8cfe49eb5fa1d233",
      "assetIds": []
    },
    {
      "x": 165,
      "y": 18,
      "size": 3,
      "price": "8648000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x9c7d48503f2eb11543f4bbd1025902572b1b89a4b8a76e42e6ef3c6e1b1340d4",
      "assetIds": []
    },
    {
      "x": 171,
      "y": 15,
      "size": 3,
      "price": "8648000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x6184084f5412331fbaf5adc800eb9120c8d9fc83b505d97ebe2a30eb95f3d8fb",
      "assetIds": []
    },
    {
      "x": 168,
      "y": 12,
      "size": 3,
      "price": "8648000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x26f8150614515fe6c2e69d23c9ba8a9ba4d02359e9befc875399c96b04dc415d",
      "assetIds": []
    },
    {
      "x": 162,
      "y": 12,
      "size": 3,
      "price": "8648000000000000000000",
      "reserved": "0x7a9fe22691c811ea339d9b73150e6911a5343dca",
      "salt": "0x0e727fbcbce75186011959c97040b03ca9b483e2ad24f23cf83e97e5494fa3bd",
      "assetIds": []
    }
  ],
  "solcInputHash": "b42a863a795806b4ea3a8f05dfa42539",
  "metadata": "{\"compiler\":{\"version\":\"0.6.5+commit.f956cc89\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"landAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sandContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialMetaTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"initialWalletAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"initialSigningWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialMaxCommissionRate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"estate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeDistributor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"authValidator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"topCornerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPaid\",\"type\":\"uint256\"}],\"name\":\"LandQuadPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newMaxCommissionRate\",\"type\":\"uint256\"}],\"name\":\"MaxCommissionRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"metaTransactionProcessor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"MetaTransactionProcessor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"NewReceivingWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"}],\"name\":\"ReferralUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSigningWallet\",\"type\":\"address\"}],\"name\":\"SigningWalletUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reserved\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"info\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"assetIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"referral\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"buyLandWithSand\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"referral\",\"type\":\"bytes\"}],\"name\":\"decodeReferral\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"disableWallet\",\"type\":\"address\"}],\"name\":\"disablePreviousSigningWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExpiryTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxCommissionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSigningWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isMetaTransactionProcessor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"}],\"name\":\"isReferralValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"metaTransactionProcessor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setMetaTransactionProcessor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setReceivingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxCommissionRate\",\"type\":\"uint256\"}],\"name\":\"updateMaxCommissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSigningWallet\",\"type\":\"address\"}],\"name\":\"updateSigningWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"assetIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"withdrawAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"buyLandWithSand(address,address,address,uint256[],bytes32,uint256[],bytes32[],bytes,bytes)\":{\"params\":{\"assetIds\":\"asset ids (lands) that will be bought\",\"buyer\":\"address that perform the payment\",\"info\":\"[X_INDEX=0] x coordinate of the Land [Y_INDEX=1] y coordinate of the Land [SIZE_INDEX=2] size of the pack of Land to purchase [PRICE_INDEX=3] price in SAND to purchase that Land\",\"proof\":\"merkleProof for that particular Land\",\"referral\":\"referral id\",\"reserved\":\"the reserved address (if any)\",\"salt\":\"The salt submitted for verification.\",\"signature\":\"A signed message specifying tx details\",\"to\":\"address that will own the purchased Land\"}},\"changeAdmin(address)\":{\"details\":\"change the administrator to be `newAdmin`.\",\"params\":{\"newAdmin\":\"address of the new administrator.\"}},\"disablePreviousSigningWallet(address)\":{\"details\":\"Disable compromised signing wallet\",\"params\":{\"disableWallet\":\"The wallet address to be disabled\"}},\"getAdmin()\":{\"details\":\"gives the current administrator of this contract.\",\"returns\":{\"_0\":\"the current administrator of this contract.\"}},\"getSigningWallet()\":{\"details\":\"signing wallet authorized for referral\",\"returns\":{\"_0\":\"the address of the signing wallet\"}},\"isMetaTransactionProcessor(address)\":{\"details\":\"check whether address `who` is given meta-transaction execution rights.\",\"params\":{\"who\":\"The address to query.\"},\"returns\":{\"_0\":\"whether the address has meta-transaction execution rights.\"}},\"isReferralValid(bytes,address,address,uint256,uint256)\":{\"params\":{\"commissionRate\":\"The commissionRate of the referral\",\"expiryTime\":\"The expiry time of the referral\",\"referee\":\"The address of the referee\",\"referrer\":\"The address of the referrer\",\"signature\":\"The signature to check (signed referral)\"},\"returns\":{\"_0\":\"True if the referral is valid\"}},\"setMetaTransactionProcessor(address,bool)\":{\"details\":\"Enable or disable the ability of `metaTransactionProcessor` to perform meta-tx (metaTransactionProcessor rights).\",\"params\":{\"enabled\":\"set whether the metaTransactionProcessor is enabled or disabled.\",\"metaTransactionProcessor\":\"address that will be given/removed metaTransactionProcessor rights.\"}},\"setReceivingWallet(address)\":{\"params\":{\"newWallet\":\"address of the new receiving wallet\"}},\"updateMaxCommissionRate(uint256)\":{\"details\":\"Update the maximum commission rate\",\"params\":{\"newMaxCommissionRate\":\"The new maximum commission rate\"}},\"updateSigningWallet(address)\":{\"details\":\"Update the signing wallet The previous wallet is still valid for a grace period (_previousSigningDelay). If you want to disable the previous wallet, use the disablePreviousSigningWallet function.\",\"params\":{\"newSigningWallet\":\"The new address of the signing wallet\"}},\"withdrawAssets(address,uint256[],uint256[])\":{\"params\":{\"assetIds\":\"the assetIds to be transferred\",\"to\":\"intended recipient of the asset tokens\",\"values\":\"the quantities of the assetIds to be transferred\"}}},\"title\":\"Estate Sale contract with referral\"},\"userdoc\":{\"methods\":{\"buyLandWithSand(address,address,address,uint256[],bytes32,uint256[],bytes32[],bytes,bytes)\":{\"notice\":\"buy Land with SAND using the merkle proof associated with it\"},\"getExpiryTime()\":{\"notice\":\"Gets the expiry time for the current sale\"},\"getMaxCommissionRate()\":{\"notice\":\"the max commission rate\"},\"getMerkleRoot()\":{\"notice\":\"Gets the Merkle root associated with the current sale\"},\"isReferralValid(bytes,address,address,uint256,uint256)\":{\"notice\":\"Check if a referral is valid\"},\"setReceivingWallet(address)\":{\"notice\":\"set the wallet receiving the proceeds\"},\"withdrawAssets(address,uint256[],uint256[])\":{\"notice\":\"enable Admin to withdraw remaining assets from EstateSaleWithFee contract\"}},\"notice\":\"This contract manages the sale of our lands as Estates\"}},\"settings\":{\"compilationTarget\":{\"src/solc_0.6/EstateSale/EstateSaleWithAuth.sol\":\"EstateSaleWithAuth\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-0.6/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n\\n        if (v != 27 && v != 28) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n}\\n\",\"keccak256\":\"0x1efcb1ccef6b3bce65467c4b704cec8d0582e35ff48352269ba8cda4b54ae3da\"},\"@openzeppelin/contracts-0.6/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xfa152b6e88a1dc50780e8f1580426dc23ad2e1e2c2f086a088adf206a202f453\"},\"@openzeppelin/contracts-0.6/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\"},\"@openzeppelin/contracts-0.6/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x31691ad0817f8cb338531b78d2ab2989027d9f27e6f8e62492b754fed9429b10\"},\"@openzeppelin/contracts-0.6/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5c26b39d26f7ed489e555d955dcd3e01872972e71fdd1528e93ec164e4f23385\"},\"@openzeppelin/contracts-0.6/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf3b30f8a49631420635a8c35daacfcaa338012755f18a76fdd118730256f9a27\"},\"@openzeppelin/contracts-0.6/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf5fa8cbdffa5ef8be49b246b5628facc30b71707e78a45d80d93b64eff3fe390\"},\"@openzeppelin/contracts-0.6/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x7ff0067f2d7df4187eaa1cb4800949b929602c9d9cb20fcaee6922a7613ef2fb\"},\"src/solc_0.6/EstateSale/AuthValidator.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.6.5;\\n\\nimport \\\"@openzeppelin/contracts-0.6/cryptography/ECDSA.sol\\\";\\nimport \\\"../common/BaseWithStorage/Admin.sol\\\";\\n\\ncontract AuthValidator is Admin {\\n    address public _signingAuthWallet;\\n\\n    event SigningWallet(address indexed signingWallet);\\n\\n    constructor(address adminWallet, address initialSigningWallet) public {\\n        require(adminWallet != address(0), \\\"AuthValidator: zero address\\\");\\n\\n        _admin = adminWallet;\\n        _updateSigningAuthWallet(initialSigningWallet);\\n    }\\n\\n    function updateSigningAuthWallet(address newSigningWallet) external onlyAdmin {\\n        _updateSigningAuthWallet(newSigningWallet);\\n    }\\n\\n    function _updateSigningAuthWallet(address newSigningWallet) internal {\\n        require(newSigningWallet != address(0), \\\"AuthValidator: INVALID_SIGNING_WALLET\\\");\\n        _signingAuthWallet = newSigningWallet;\\n        emit SigningWallet(newSigningWallet);\\n    }\\n\\n    function isAuthValid(bytes memory signature, bytes32 hashedData) public view returns (bool) {\\n        address signer = ECDSA.recover(ECDSA.toEthSignedMessageHash(hashedData), signature);\\n        return signer == _signingAuthWallet;\\n    }\\n}\\n\",\"keccak256\":\"0x949c6063b3d90a8c53ca8d3c80a1097da05b7189e87d8c8825b97acc17dbd38e\"},\"src/solc_0.6/EstateSale/EstateSaleWithAuth.sol\":{\"content\":\"/* solhint-disable not-rely-on-time, func-order */\\npragma solidity 0.6.5;\\n\\nimport \\\"@openzeppelin/contracts-0.6/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.6/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.6/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.6/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.6/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"./ILandToken.sol\\\";\\nimport \\\"../common/BaseWithStorage/MetaTransactionReceiver.sol\\\";\\nimport \\\"../ReferralValidator/ReferralValidator.sol\\\";\\nimport \\\"./AuthValidator.sol\\\";\\n\\n/// @title Estate Sale contract with referral\\n/// @notice This contract manages the sale of our lands as Estates\\ncontract EstateSaleWithAuth is ReentrancyGuard, MetaTransactionReceiver, ReferralValidator {\\n    using SafeMath for uint256;\\n    using Address for address;\\n    using SafeERC20 for IERC20;\\n\\n    event LandQuadPurchased(\\n        address indexed buyer,\\n        address indexed to,\\n        uint256 indexed topCornerId,\\n        uint256 size,\\n        uint256 price,\\n        address token,\\n        uint256 amountPaid\\n    );\\n\\n    event NewReceivingWallet(address indexed newWallet);\\n\\n    /// @notice set the wallet receiving the proceeds\\n    /// @param newWallet address of the new receiving wallet\\n    function setReceivingWallet(address payable newWallet) external {\\n        require(newWallet != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(msg.sender == _admin, \\\"NOT_AUTHORIZED\\\");\\n        _wallet = newWallet;\\n\\n        emit NewReceivingWallet(newWallet);\\n    }\\n\\n    /// @notice buy Land with SAND using the merkle proof associated with it\\n    /// @param buyer address that perform the payment\\n    /// @param to address that will own the purchased Land\\n    /// @param reserved the reserved address (if any)\\n    /// @param info [X_INDEX=0] x coordinate of the Land [Y_INDEX=1] y coordinate of the Land [SIZE_INDEX=2] size of the pack of Land to purchase [PRICE_INDEX=3] price in SAND to purchase that Land\\n    /// @param salt The salt submitted for verification.\\n    /// @param assetIds asset ids (lands) that will be bought\\n    /// @param proof merkleProof for that particular Land\\n    /// @param referral referral id\\n    /// @param signature A signed message specifying tx details\\n    function buyLandWithSand(\\n        address buyer,\\n        address to,\\n        address reserved,\\n        uint256[] calldata info,\\n        bytes32 salt,\\n        uint256[] calldata assetIds,\\n        bytes32[] calldata proof,\\n        bytes calldata referral,\\n        bytes calldata signature\\n    ) external nonReentrant {\\n        _checkAddressesAndExpiryTime(buyer, reserved);\\n        _checkAuthAndProofValidity(to, reserved, info, salt, assetIds, proof, signature);\\n        _handleFeeAndReferral(buyer, info[PRICE_INDEX], referral);\\n        _mint(buyer, to, info);\\n        _sendAssets(to, assetIds);\\n    }\\n\\n    /// @notice Gets the expiry time for the current sale\\n    /// @return The expiry time, as a unix epoch\\n    function getExpiryTime() external view returns (uint256) {\\n        return _expiryTime;\\n    }\\n\\n    /// @notice Gets the Merkle root associated with the current sale\\n    /// @return The Merkle root, as a bytes32 hash\\n    function getMerkleRoot() external view returns (bytes32) {\\n        return _merkleRoot;\\n    }\\n\\n    /// @notice enable Admin to withdraw remaining assets from EstateSaleWithFee contract\\n    /// @param to intended recipient of the asset tokens\\n    /// @param assetIds the assetIds to be transferred\\n    /// @param values the quantities of the assetIds to be transferred\\n    function withdrawAssets(\\n        address to,\\n        uint256[] calldata assetIds,\\n        uint256[] calldata values\\n    ) external {\\n        require(msg.sender == _admin, \\\"NOT_AUTHORIZED\\\");\\n        _asset.safeBatchTransferFrom(address(this), to, assetIds, values, \\\"\\\");\\n    }\\n\\n    function onERC1155Received(\\n        address, /*operator*/\\n        address, /*from*/\\n        uint256, /*id*/\\n        uint256, /*value*/\\n        bytes calldata /*data*/\\n    ) external pure returns (bytes4) {\\n        return 0xf23a6e61;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address, /*operator*/\\n        address, /*from*/\\n        uint256[] calldata, /*ids*/\\n        uint256[] calldata, /*values*/\\n        bytes calldata /*data*/\\n    ) external pure returns (bytes4) {\\n        return 0xbc197c81;\\n    }\\n\\n    function _sendAssets(address to, uint256[] memory assetIds) internal {\\n        uint256[] memory values = new uint256[](assetIds.length);\\n        for (uint256 i = 0; i < assetIds.length; i++) {\\n            values[i] = 1;\\n        }\\n        _asset.safeBatchTransferFrom(address(this), to, assetIds, values, \\\"\\\");\\n    }\\n\\n    // NOTE: _checkAddressesAndExpiryTime & _checkAuthAndProofValidity were split due to a stack too deep issue\\n    function _checkAddressesAndExpiryTime(address buyer, address reserved) internal view {\\n        /* solium-disable-next-line security/no-block-members */\\n        require(block.timestamp < _expiryTime, \\\"SALE_IS_OVER\\\");\\n        require(buyer == msg.sender || _metaTransactionContracts[msg.sender], \\\"NOT_AUTHORIZED\\\");\\n        require(reserved == address(0) || reserved == buyer, \\\"RESERVED_LAND\\\");\\n    }\\n\\n    // NOTE: _checkAddressesAndExpiryTime & _checkAuthAndProofValidity were split due to a stack too deep issue\\n    function _checkAuthAndProofValidity(\\n        address to,\\n        address reserved,\\n        uint256[] memory info,\\n        bytes32 salt,\\n        uint256[] memory assetIds,\\n        bytes32[] memory proof,\\n        bytes memory signature\\n    ) internal view {\\n        bytes32 hashedData = keccak256(\\n            abi.encodePacked(\\n                to,\\n                reserved,\\n                info[X_INDEX],\\n                info[Y_INDEX],\\n                info[SIZE_INDEX],\\n                info[PRICE_INDEX],\\n                salt,\\n                keccak256(abi.encodePacked(assetIds)),\\n                keccak256(abi.encodePacked(proof))\\n            )\\n        );\\n        require(_authValidator.isAuthValid(signature, hashedData), \\\"INVALID_AUTH\\\");\\n\\n        bytes32 leaf = _generateLandHash(\\n            info[X_INDEX],\\n            info[Y_INDEX],\\n            info[SIZE_INDEX],\\n            info[PRICE_INDEX],\\n            reserved,\\n            salt,\\n            assetIds\\n        );\\n        require(_verify(proof, leaf), \\\"INVALID_LAND\\\");\\n    }\\n\\n    function _mint(\\n        address buyer,\\n        address to,\\n        uint256[] memory info\\n    ) internal {\\n        if (info[SIZE_INDEX] == 1 || _estate == address(0)) {\\n            _land.mintQuad(to, info[SIZE_INDEX], info[X_INDEX], info[Y_INDEX], \\\"\\\");\\n        } else {\\n            _land.mintQuad(_estate, info[SIZE_INDEX], info[X_INDEX], info[Y_INDEX], abi.encode(to));\\n        }\\n        emit LandQuadPurchased(\\n            buyer,\\n            to,\\n            info[X_INDEX] + (info[Y_INDEX] * GRID_SIZE),\\n            info[SIZE_INDEX],\\n            info[PRICE_INDEX],\\n            address(_sand),\\n            info[PRICE_INDEX]\\n        );\\n    }\\n\\n    function _generateLandHash(\\n        uint256 x,\\n        uint256 y,\\n        uint256 size,\\n        uint256 price,\\n        address reserved,\\n        bytes32 salt,\\n        uint256[] memory assetIds\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(x, y, size, price, reserved, salt, assetIds));\\n    }\\n\\n    function _verify(bytes32[] memory proof, bytes32 leaf) internal view returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash < proofElement) {\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        return computedHash == _merkleRoot;\\n    }\\n\\n    function _handleFeeAndReferral(\\n        address buyer,\\n        uint256 priceInSand,\\n        bytes memory referral\\n    ) internal {\\n        // send 5% fee to a specially configured instance of FeeDistributor.sol\\n        uint256 remainingAmountInSand = _handleSandFee(buyer, priceInSand);\\n\\n        // calculate referral based on 95% of original priceInSand\\n        handleReferralWithERC20(buyer, remainingAmountInSand, referral, _wallet, address(_sand));\\n    }\\n\\n    function _handleSandFee(address buyer, uint256 priceInSand) internal returns (uint256) {\\n        uint256 feeAmountInSand = priceInSand.mul(FEE).div(100);\\n        _sand.safeTransferFrom(buyer, address(_feeDistributor), feeAmountInSand);\\n        return priceInSand.sub(feeAmountInSand);\\n    }\\n\\n    uint256 internal constant GRID_SIZE = 408; // 408 is the size of the Land\\n\\n    IERC1155 internal immutable _asset;\\n    ILandToken internal immutable _land;\\n    IERC20 internal immutable _sand;\\n    address internal immutable _estate;\\n    address internal immutable _feeDistributor;\\n\\n    address payable internal _wallet;\\n    AuthValidator internal _authValidator;\\n    uint256 internal immutable _expiryTime;\\n    bytes32 internal immutable _merkleRoot;\\n\\n    uint256 private constant FEE = 5; // percentage of land sale price to be diverted to a specially configured instance of FeeDistributor, shown as an integer\\n    // buyLandWithSand info indexes\\n    uint256 private constant X_INDEX = 0;\\n    uint256 private constant Y_INDEX = 1;\\n    uint256 private constant SIZE_INDEX = 2;\\n    uint256 private constant PRICE_INDEX = 3;\\n\\n    constructor(\\n        address landAddress,\\n        address sandContractAddress,\\n        address initialMetaTx,\\n        address admin,\\n        address payable initialWalletAddress,\\n        bytes32 merkleRoot,\\n        uint256 expiryTime,\\n        address initialSigningWallet,\\n        uint256 initialMaxCommissionRate,\\n        address estate,\\n        address asset,\\n        address feeDistributor,\\n        address authValidator\\n    ) public ReferralValidator(initialSigningWallet, initialMaxCommissionRate) {\\n        require(landAddress.isContract(), \\\"EstateSaleWithAuth: is not a contract\\\");\\n        require(sandContractAddress.isContract(), \\\"EstateSaleWithAuth: is not a contract\\\");\\n        require(initialMetaTx != address(0), \\\"EstateSaleWithAuth: zero address\\\");\\n        require(admin != address(0), \\\"EstateSaleWithAuth: zero address\\\");\\n        require(initialWalletAddress != address(0), \\\"EstateSaleWithAuth: zero address\\\");\\n        require(asset.isContract(), \\\"EstateSaleWithAuth: is not a contract\\\");\\n        require(feeDistributor != address(0), \\\"EstateSaleWithAuth: zero address\\\");\\n        require(authValidator.isContract(), \\\"EstateSaleWithAuth: is not a contract\\\");\\n\\n\\n        _land = ILandToken(landAddress);\\n        _sand = IERC20(sandContractAddress);\\n        _setMetaTransactionProcessor(initialMetaTx, true);\\n        _wallet = initialWalletAddress;\\n        _merkleRoot = merkleRoot;\\n        _expiryTime = expiryTime;\\n        _admin = admin;\\n        _estate = estate;\\n        _asset = IERC1155(asset);\\n        _feeDistributor = feeDistributor;\\n        _authValidator = AuthValidator(authValidator);\\n    }\\n}\\n\",\"keccak256\":\"0x039331cd15021fe3b9312674d873fdc02b968ae2af5343caf14e6c054a2fcc1d\"},\"src/solc_0.6/EstateSale/ILandToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.5;\\n\\n\\ninterface ILandToken {\\n    function mintQuad(\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8d03b53d325fbb052d78f274b106f14bf9a5afc928451b26bc9e579585ae44b2\"},\"src/solc_0.6/ReferralValidator/ReferralValidator.sol\":{\"content\":\"/* solhint-disable not-rely-on-time, func-order */\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.5;\\n\\nimport \\\"@openzeppelin/contracts-0.6/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.6/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.6/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.6/math/SafeMath.sol\\\";\\nimport \\\"../common/BaseWithStorage/Admin.sol\\\";\\n\\n\\n/// @dev This contract verifies if a referral is valid\\ncontract ReferralValidator is Admin {\\n    using Address for address;\\n    using SafeERC20 for IERC20;\\n\\n    address private _signingWallet;\\n    uint256 private _maxCommissionRate;\\n\\n    mapping(address => uint256) private _previousSigningWallets;\\n    uint256 constant private _previousSigningDelay = 10 days;\\n\\n    event ReferralUsed(\\n        address indexed referrer,\\n        address indexed referee,\\n        address indexed token,\\n        uint256 amount,\\n        uint256 commission,\\n        uint256 commissionRate\\n    );\\n\\n    event SigningWalletUpdated(address indexed newSigningWallet);\\n    event MaxCommissionRateUpdated(uint256 indexed newMaxCommissionRate);\\n\\n    constructor(address initialSigningWallet, uint256 initialMaxCommissionRate) public {\\n        require(initialSigningWallet != address(0), \\\"ReferralValidator: zero address\\\");\\n\\n        _signingWallet = initialSigningWallet;\\n        _maxCommissionRate = initialMaxCommissionRate;\\n    }\\n\\n    /**\\n     * @dev Update the signing wallet\\n     * The previous wallet is still valid for a grace period (_previousSigningDelay). If you want to\\n     * disable the previous wallet, use the disablePreviousSigningWallet function.\\n     * @param newSigningWallet The new address of the signing wallet\\n     */\\n    function updateSigningWallet(address newSigningWallet) external onlyAdmin {\\n        require(newSigningWallet != address(0), \\\"ReferralValidator: zero address\\\");\\n        _previousSigningWallets[_signingWallet] = now + _previousSigningDelay;\\n        _signingWallet = newSigningWallet;\\n\\n        emit SigningWalletUpdated(newSigningWallet);\\n    }\\n\\n     /**\\n     * @dev Disable compromised signing wallet\\n     * @param disableWallet The wallet address to be disabled\\n     */\\n    function disablePreviousSigningWallet(address disableWallet) external {\\n        require(_admin == msg.sender, \\\"ReferralValidator: Sender not admin\\\");\\n        require(disableWallet != address(0), \\\"ReferralValidator: zero address\\\");\\n        _previousSigningWallets[disableWallet] = 0;\\n    }\\n\\n    /**\\n     * @dev signing wallet authorized for referral\\n     * @return the address of the signing wallet\\n     */\\n    function getSigningWallet() external view returns (address) {\\n        return _signingWallet;\\n    }\\n\\n    /**\\n     * @notice the max commission rate\\n     * @return the maximum commission rate that a referral can give\\n     */\\n    function getMaxCommissionRate() external view returns (uint256) {\\n        return _maxCommissionRate;\\n    }\\n\\n    /**\\n     * @dev Update the maximum commission rate\\n     * @param newMaxCommissionRate The new maximum commission rate\\n     */\\n    function updateMaxCommissionRate(uint256 newMaxCommissionRate) external onlyAdmin {\\n        _maxCommissionRate = newMaxCommissionRate;\\n\\n        emit MaxCommissionRateUpdated(newMaxCommissionRate);\\n    }\\n\\n    function handleReferralWithETH(\\n        uint256 amount,\\n        bytes memory referral,\\n        address payable destination\\n    ) internal {\\n        uint256 amountForDestination = amount;\\n\\n        require(msg.value >= amount, \\\"ReferralValidator: insufficient funds\\\");\\n\\n        if (referral.length > 0) {\\n            (bytes memory signature, address referrer, address referee, uint256 expiryTime, uint256 commissionRate) = decodeReferral(referral);\\n\\n            require(commissionRate < 10000, \\\"ReferralValidator: invalid commisionRate\\\");\\n\\n            uint256 commission = 0;\\n\\n            if (isReferralValid(signature, referrer, referee, expiryTime, commissionRate)) {\\n                commission = SafeMath.div(SafeMath.mul(amount, commissionRate), 10000);\\n\\n                emit ReferralUsed(referrer, referee, address(0), amount, commission, commissionRate);\\n                amountForDestination = SafeMath.sub(amountForDestination, commission);\\n            }\\n\\n            if (commission > 0) {\\n                // solhint-disable-next-line avoid-low-level-calls\\n                (bool success, ) = payable(referrer).call{value:commission}(\\\"\\\");\\n                require(success, \\\"ReferralValidator: Transfer failed.\\\");\\n            }\\n        }\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, ) = destination.call{value:amountForDestination}(\\\"\\\");\\n        require(success, \\\"ReferralValidator: Transfer failed.\\\");\\n    }\\n\\n    function handleReferralWithERC20(\\n        address buyer,\\n        uint256 amount,\\n        bytes memory referral,\\n        address payable destination,\\n        address tokenAddress\\n    ) internal {\\n        IERC20 token = IERC20(tokenAddress);\\n        uint256 amountForDestination = amount;\\n\\n        if (referral.length > 0) {\\n            (bytes memory signature, address referrer, address referee, uint256 expiryTime, uint256 commissionRate) = decodeReferral(referral);\\n\\n            uint256 commission = 0;\\n\\n            if (isReferralValid(signature, referrer, referee, expiryTime, commissionRate)) {\\n                commission = SafeMath.div(SafeMath.mul(amount, commissionRate), 10000);\\n\\n                emit ReferralUsed(referrer, referee, tokenAddress, amount, commission, commissionRate);\\n                amountForDestination = SafeMath.sub(amountForDestination, commission);\\n            }\\n\\n            if (commission > 0) {\\n                token.safeTransferFrom(buyer, referrer, commission);\\n            }\\n        }\\n\\n        token.safeTransferFrom(buyer, destination, amountForDestination);\\n    }\\n\\n    /**\\n     * @notice Check if a referral is valid\\n     * @param signature The signature to check (signed referral)\\n     * @param referrer The address of the referrer\\n     * @param referee The address of the referee\\n     * @param expiryTime The expiry time of the referral\\n     * @param commissionRate The commissionRate of the referral\\n     * @return True if the referral is valid\\n     */\\n    function isReferralValid(\\n        bytes memory signature,\\n        address referrer,\\n        address referee,\\n        uint256 expiryTime,\\n        uint256 commissionRate\\n    ) public view returns (bool) {\\n        if (commissionRate > _maxCommissionRate || referrer == referee || now > expiryTime) {\\n            return false;\\n        }\\n\\n        bytes32 hashedData = keccak256(abi.encodePacked(referrer, referee, expiryTime, commissionRate));\\n\\n        address signer = ECDSA.recover(keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hashedData)), signature);\\n\\n        if (_previousSigningWallets[signer] >= now) {\\n            return true;\\n        }\\n\\n        return _signingWallet == signer;\\n    }\\n\\n    function decodeReferral(bytes memory referral)\\n        public\\n        pure\\n        returns (\\n            bytes memory,\\n            address,\\n            address,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        (bytes memory signature, address referrer, address referee, uint256 expiryTime, uint256 commissionRate) = abi.decode(\\n            referral,\\n            (bytes, address, address, uint256, uint256)\\n        );\\n\\n        return (signature, referrer, referee, expiryTime, commissionRate);\\n    }\\n}\\n\",\"keccak256\":\"0xad5300e058f15841c54f3bc70ad5c89a6c9a0853aa6e0b542e7a9e59192687d2\"},\"src/solc_0.6/common/BaseWithStorage/Admin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.5;\\n\\n\\ncontract Admin {\\n    address internal _admin;\\n\\n    /// @dev emitted when the contract administrator is changed.\\n    /// @param oldAdmin address of the previous administrator.\\n    /// @param newAdmin address of the new administrator.\\n    event AdminChanged(address oldAdmin, address newAdmin);\\n\\n    /// @dev gives the current administrator of this contract.\\n    /// @return the current administrator of this contract.\\n    function getAdmin() external view returns (address) {\\n        return _admin;\\n    }\\n\\n    /// @dev change the administrator to be `newAdmin`.\\n    /// @param newAdmin address of the new administrator.\\n    function changeAdmin(address newAdmin) external {\\n        require(msg.sender == _admin, \\\"only admin can change admin\\\");\\n        require(_admin != newAdmin, \\\"already admin\\\");\\n        emit AdminChanged(_admin, newAdmin);\\n        _admin = newAdmin;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == _admin, \\\"only admin allowed\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xe1a95ec41b32e523a6fad060f90aa6d03a72a545857a91c2f51473b6072637dc\"},\"src/solc_0.6/common/BaseWithStorage/MetaTransactionReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.5;\\n\\nimport \\\"./Admin.sol\\\";\\n\\ncontract MetaTransactionReceiver is Admin {\\n    mapping(address => bool) internal _metaTransactionContracts;\\n\\n    /// @dev emiited when a meta transaction processor is enabled/disabled\\n    /// @param metaTransactionProcessor address that will be given/removed metaTransactionProcessor rights.\\n    /// @param enabled set whether the metaTransactionProcessor is enabled or disabled.\\n    event MetaTransactionProcessor(address metaTransactionProcessor, bool enabled);\\n\\n    /// @dev Enable or disable the ability of `metaTransactionProcessor` to perform meta-tx (metaTransactionProcessor rights).\\n    /// @param metaTransactionProcessor address that will be given/removed metaTransactionProcessor rights.\\n    /// @param enabled set whether the metaTransactionProcessor is enabled or disabled.\\n    function setMetaTransactionProcessor(address metaTransactionProcessor, bool enabled) public onlyAdmin {\\n        _setMetaTransactionProcessor(metaTransactionProcessor, enabled);\\n    }\\n\\n    function _setMetaTransactionProcessor(address metaTransactionProcessor, bool enabled) internal {\\n        require(metaTransactionProcessor != address(0), \\\"MetaTransactionReceiver: zero address\\\");\\n        _metaTransactionContracts[metaTransactionProcessor] = enabled;\\n        emit MetaTransactionProcessor(metaTransactionProcessor, enabled);\\n    }\\n\\n    /// @dev check whether address `who` is given meta-transaction execution rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has meta-transaction execution rights.\\n    function isMetaTransactionProcessor(address who) external view returns (bool) {\\n        return _metaTransactionContracts[who];\\n    }\\n}\\n\",\"keccak256\":\"0x4a11e21dfc85fb9330c02abc019bfb5b1e40d0fcd36e2a2e652d4c06b6e8105b\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b50604051620031e9380380620031e983398181016040526101a08110156200003957600080fd5b508051602082015160408301516060840151608085015160a086015160c087015160e08801516101008901516101208a01516101408b01516101608c0151610180909c015160016000559a9b999a9899979896979596949593949293919290919085856001600160a01b038216620000f8576040805162461bcd60e51b815260206004820152601f60248201527f526566657272616c56616c696461746f723a207a65726f206164647265737300604482015290519081900360640190fd5b600380546001600160a01b0319166001600160a01b0393841617905560045562000130908e1662000459602090811b62002adc17901c565b6200016d5760405162461bcd60e51b8152600401808060200182810382526025815260200180620031c46025913960400191505060405180910390fd5b6200018c8c6001600160a01b03166200045960201b62002adc1760201c565b620001c95760405162461bcd60e51b8152600401808060200182810382526025815260200180620031c46025913960400191505060405180910390fd5b6001600160a01b038b1662000214576040805162461bcd60e51b815260206004820181905260248201526000805160206200317f833981519152604482015290519081900360640190fd5b6001600160a01b038a166200025f576040805162461bcd60e51b815260206004820181905260248201526000805160206200317f833981519152604482015290519081900360640190fd5b6001600160a01b038916620002aa576040805162461bcd60e51b815260206004820181905260248201526000805160206200317f833981519152604482015290519081900360640190fd5b620002c9836001600160a01b03166200045960201b62002adc1760201c565b620003065760405162461bcd60e51b8152600401808060200182810382526025815260200180620031c46025913960400191505060405180910390fd5b6001600160a01b03821662000351576040805162461bcd60e51b815260206004820181905260248201526000805160206200317f833981519152604482015290519081900360640190fd5b62000370816001600160a01b03166200045960201b62002adc1760201c565b620003ad5760405162461bcd60e51b8152600401808060200182810382526025815260200180620031c46025913960400191505060405180910390fd5b6001600160601b031960608e811b821660a0528d901b1660c052620003dd8b60016001600160e01b036200045f16565b600680546001600160a01b039a8b166001600160a01b031991821617909155610140989098526101209690965260018054998916998816999099179098556001600160601b0319606092831b811660e05290821b811660805296901b909516610100525060078054919093169116179055506200050a92505050565b3b151590565b6001600160a01b038216620004a65760405162461bcd60e51b81526004018080602001828103825260258152602001806200319f6025913960400191505060405180910390fd5b6001600160a01b038216600081815260026020908152604091829020805460ff191685151590811790915582519384529083015280517fb21eb88b4e33b3f1281830a7178d74d8aa73220416215726b68ae23d539515cb9281900390910190a15050565b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c6101205161014051612bef6200059060003980610be0528061247e525080610bbc528061159d5250806124fc525080611af25280611c4f525080611aa85280611e4e52806124d9525080611b235280611c205250806111075280611f3a5250612bef6000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c8063984d6252116100b2578063c10a420811610081578063dc5074af11610066578063dc5074af146108a0578063e56f8a9e146108c6578063f23a6e61146108e357610136565b8063c10a4208146107c1578063caed35001461089857610136565b8063984d62521461055f578063ab1cc78c14610631578063b522ecff14610639578063bc197c811461065f57610136565b806365194ce71161010957806378e6e5b9116100ee57806378e6e5b9146104e55780638a04af6a1461050b5780638f2839701461053957610136565b806365194ce7146103635780636e9960c3146104c157610136565b80631187fd3c1461013b57806325cb5bc01461031b578063495906571461033557806358bc29441461033d575b600080fd5b610319600480360361012081101561015257600080fd5b6001600160a01b038235811692602081013582169260408201359092169181019060808101606082013564010000000081111561018e57600080fd5b8201836020820111156101a057600080fd5b803590602001918460208302840111640100000000831117156101c257600080fd5b919390928235926040810190602001356401000000008111156101e457600080fd5b8201836020820111156101f657600080fd5b8035906020019184602083028401116401000000008311171561021857600080fd5b91939092909160208101903564010000000081111561023657600080fd5b82018360208201111561024857600080fd5b8035906020019184602083028401116401000000008311171561026a57600080fd5b91939092909160208101903564010000000081111561028857600080fd5b82018360208201111561029a57600080fd5b803590602001918460018302840111640100000000831117156102bc57600080fd5b9193909290916020810190356401000000008111156102da57600080fd5b8201836020820111156102ec57600080fd5b8035906020019184600183028401116401000000008311171561030e57600080fd5b509092509050610978565b005b610323610bba565b60408051918252519081900360200190f35b610323610bde565b6103196004803603602081101561035357600080fd5b50356001600160a01b0316610c02565b6104096004803603602081101561037957600080fd5b81019060208101813564010000000081111561039457600080fd5b8201836020820111156103a657600080fd5b803590602001918460018302840111640100000000831117156103c857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610d2e945050505050565b6040518080602001866001600160a01b03166001600160a01b03168152602001856001600160a01b03166001600160a01b03168152602001848152602001838152602001828103825287818151815260200191508051906020019080838360005b8381101561048257818101518382015260200161046a565b50505050905090810190601f1680156104af5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b6104c9610e33565b604080516001600160a01b039092168252519081900360200190f35b610319600480360360208110156104fb57600080fd5b50356001600160a01b0316610e42565b6103196004803603604081101561052157600080fd5b506001600160a01b0381351690602001351515610f00565b6103196004803603602081101561054f57600080fd5b50356001600160a01b0316610f6d565b6103196004803603606081101561057557600080fd5b6001600160a01b0382351691908101906040810160208201356401000000008111156105a057600080fd5b8201836020820111156105b257600080fd5b803590602001918460208302840111640100000000831117156105d457600080fd5b9193909290916020810190356401000000008111156105f257600080fd5b82018360208201111561060457600080fd5b8035906020019184602083028401116401000000008311171561062657600080fd5b5090925090506110a6565b610323611231565b6103196004803603602081101561064f57600080fd5b50356001600160a01b0316611237565b61078c600480360360a081101561067557600080fd5b6001600160a01b0382358116926020810135909116918101906060810160408201356401000000008111156106a957600080fd5b8201836020820111156106bb57600080fd5b803590602001918460208302840111640100000000831117156106dd57600080fd5b9193909290916020810190356401000000008111156106fb57600080fd5b82018360208201111561070d57600080fd5b8035906020019184602083028401116401000000008311171561072f57600080fd5b91939092909160208101903564010000000081111561074d57600080fd5b82018360208201111561075f57600080fd5b8035906020019184600183028401116401000000008311171561078157600080fd5b509092509050611348565b604080517fffffffff000000000000000000000000000000000000000000000000000000009092168252519081900360200190f35b610884600480360360a08110156107d757600080fd5b8101906020810181356401000000008111156107f257600080fd5b82018360208201111561080457600080fd5b8035906020019184600183028401116401000000008311171561082657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550506001600160a01b038335811694506020840135169260408101359250606001359050611375565b604080519115158252519081900360200190f35b6104c96114b1565b610884600480360360208110156108b657600080fd5b50356001600160a01b03166114c0565b610319600480360360208110156108dc57600080fd5b50356114de565b61078c600480360360a08110156108f957600080fd5b6001600160a01b03823581169260208101359091169160408201359160608101359181019060a08101608082013564010000000081111561093957600080fd5b82018360208201111561094b57600080fd5b8035906020019184600183028401116401000000008311171561096d57600080fd5b509092509050611570565b600260005414156109d0576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026000556109df8e8d61159b565b610ad68d8d8d8d80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508c8c8c80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508b8b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020601f8d018190048102820181019092528b815292508b91508a90819084018382808284376000920191909152506116fe92505050565b610b2a8e8c8c6003818110610ae757fe5b9050602002013586868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611a8192505050565b610b688e8e8d8d80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611ad292505050565b610ba58d898980806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611ec392505050565b50506001600055505050505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b6001546001600160a01b03163314610c61576040805162461bcd60e51b815260206004820152601260248201527f6f6e6c792061646d696e20616c6c6f7765640000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b038116610cbc576040805162461bcd60e51b815260206004820152601f60248201527f526566657272616c56616c696461746f723a207a65726f206164647265737300604482015290519081900360640190fd5b600380546001600160a01b03908116600090815260056020526040808220620d2f0042019055835473ffffffffffffffffffffffffffffffffffffffff1916928516928317909355915190917fbbb5fb2ee7e707ae0c968f63e94211ea81e66a718c34e2f810a7619e5678a21791a250565b606060008060008060606000806000808a80602001905160a0811015610d5357600080fd5b8101908080516040519392919084640100000000821115610d7357600080fd5b908301906020820185811115610d8857600080fd5b8251640100000000811182820188101715610da257600080fd5b82525081516020918201929091019080838360005b83811015610dcf578181015183820152602001610db7565b50505050905090810190601f168015610dfc5780820380516001836020036101000a031916815260200191505b5060409081526020820151908201516060830151608090930151959f50909d509b5099509197505050505050505091939590929450565b6001546001600160a01b031690565b6001546001600160a01b03163314610e8b5760405162461bcd60e51b8152600401808060200182810382526023815260200180612b056023913960400191505060405180910390fd5b6001600160a01b038116610ee6576040805162461bcd60e51b815260206004820152601f60248201527f526566657272616c56616c696461746f723a207a65726f206164647265737300604482015290519081900360640190fd5b6001600160a01b0316600090815260056020526040812055565b6001546001600160a01b03163314610f5f576040805162461bcd60e51b815260206004820152601260248201527f6f6e6c792061646d696e20616c6c6f7765640000000000000000000000000000604482015290519081900360640190fd5b610f698282612087565b5050565b6001546001600160a01b03163314610fcc576040805162461bcd60e51b815260206004820152601b60248201527f6f6e6c792061646d696e2063616e206368616e67652061646d696e0000000000604482015290519081900360640190fd5b6001546001600160a01b038281169116141561102f576040805162461bcd60e51b815260206004820152600d60248201527f616c72656164792061646d696e00000000000000000000000000000000000000604482015290519081900360640190fd5b600154604080516001600160a01b039283168152918316602083015280517f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f9281900390910190a16001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001546001600160a01b03163314611105576040805162461bcd60e51b815260206004820152600e60248201527f4e4f545f415554484f52495a4544000000000000000000000000000000000000604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632eb2c2d63087878787876040518763ffffffff1660e01b815260040180876001600160a01b03166001600160a01b03168152602001866001600160a01b03166001600160a01b031681526020018060200180602001806020018481038452888882818152602001925060200280828437600083820152601f01601f19169091018581038452868152602090810191508790870280828437600081840152601f19601f8201169050808301925050508481038252600081526020016020019950505050505050505050600060405180830381600087803b15801561121257600080fd5b505af1158015611226573d6000803e3d6000fd5b505050505050505050565b60045490565b6001600160a01b038116611292576040805162461bcd60e51b815260206004820152600c60248201527f5a45524f5f414444524553530000000000000000000000000000000000000000604482015290519081900360640190fd5b6001546001600160a01b031633146112f1576040805162461bcd60e51b815260206004820152600e60248201527f4e4f545f415554484f52495a4544000000000000000000000000000000000000604482015290519081900360640190fd5b6006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f4d66958b757eb92a1b43d02be4c38c9500b73f532420ee3706cb43d420ba023690600090a250565b7fbc197c810000000000000000000000000000000000000000000000000000000098975050505050505050565b60006004548211806113985750836001600160a01b0316856001600160a01b0316145b806113a257508242115b156113af575060006114a8565b60408051606087811b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000009081166020808501919091529188901b166034830152604882018690526068808301869052835180840390910181526088830184528051908201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000060a884015260c48084018290528451808503909101815260e49093019093528151910120600090611466908961214e565b6001600160a01b0381166000908152600560205260409020549091504211611493576001925050506114a8565b6003546001600160a01b039081169116149150505b95945050505050565b6003546001600160a01b031690565b6001600160a01b031660009081526002602052604090205460ff1690565b6001546001600160a01b0316331461153d576040805162461bcd60e51b815260206004820152601260248201527f6f6e6c792061646d696e20616c6c6f7765640000000000000000000000000000604482015290519081900360640190fd5b600481905560405181907f774069781371d65424b3b0b101c1d40014532cac040f979595b99a3fcf8ce08c90600090a250565b7ff23a6e61000000000000000000000000000000000000000000000000000000009695505050505050565b7f0000000000000000000000000000000000000000000000000000000000000000421061160f576040805162461bcd60e51b815260206004820152600c60248201527f53414c455f49535f4f5645520000000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b03821633148061163557503360009081526002602052604090205460ff165b611686576040805162461bcd60e51b815260206004820152600e60248201527f4e4f545f415554484f52495a4544000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b03811615806116ad5750816001600160a01b0316816001600160a01b0316145b610f69576040805162461bcd60e51b815260206004820152600d60248201527f52455345525645445f4c414e4400000000000000000000000000000000000000604482015290519081900360640190fd5b600087878760008151811061170f57fe5b60200260200101518860018151811061172457fe5b60200260200101518960028151811061173957fe5b60200260200101518a60038151811061174e57fe5b60200260200101518a8a60405160200180828051906020019060200280838360005b83811015611788578181015183820152602001611770565b50505050905001915050604051602081830303815290604052805190602001208a60405160200180828051906020019060200280838360005b838110156117d95781810151838201526020016117c1565b5050505090500191505060405160208183030381529060405280519060200120604051602001808a6001600160a01b03166001600160a01b031660601b8152601401896001600160a01b03166001600160a01b031660601b81526014018881526020018781526020018681526020018581526020018481526020018381526020018281526020019950505050505050505050604051602081830303815290604052805190602001209050600760009054906101000a90046001600160a01b03166001600160a01b031663012847ed83836040518363ffffffff1660e01b81526004018080602001838152602001828103825284818151815260200191508051906020019080838360005b838110156118fb5781810151838201526020016118e3565b50505050905090810190601f1680156119285780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561194657600080fd5b505afa15801561195a573d6000803e3d6000fd5b505050506040513d602081101561197057600080fd5b50516119c3576040805162461bcd60e51b815260206004820152600c60248201527f494e56414c49445f415554480000000000000000000000000000000000000000604482015290519081900360640190fd5b6000611a24876000815181106119d557fe5b6020026020010151886001815181106119ea57fe5b6020026020010151896002815181106119ff57fe5b60200260200101518a600381518110611a1457fe5b60200260200101518c8b8b612337565b9050611a3084826123dc565b611226576040805162461bcd60e51b815260206004820152600c60248201527f494e56414c49445f4c414e440000000000000000000000000000000000000000604482015290519081900360640190fd5b6000611a8d84846124a5565b600654909150611acc908590839085906001600160a01b03167f000000000000000000000000000000000000000000000000000000000000000061253f565b50505050565b80600281518110611adf57fe5b602002602001015160011480611b1c57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316155b15611c1e577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636e1e3bbf8383600281518110611b5e57fe5b602002602001015184600081518110611b7357fe5b602002602001015185600181518110611b8857fe5b60200260200101516040518563ffffffff1660e01b815260040180856001600160a01b03166001600160a01b031681526020018481526020018381526020018281526020018060200182810382526000815260200160200195505050505050600060405180830381600087803b158015611c0157600080fd5b505af1158015611c15573d6000803e3d6000fd5b50505050611dbe565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636e1e3bbf7f000000000000000000000000000000000000000000000000000000000000000083600281518110611c7b57fe5b602002602001015184600081518110611c9057fe5b602002602001015185600181518110611ca557fe5b60200260200101518760405160200180826001600160a01b03166001600160a01b031681526020019150506040516020818303038152906040526040518663ffffffff1660e01b815260040180866001600160a01b03166001600160a01b0316815260200185815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611d55578181015183820152602001611d3d565b50505050905090810190601f168015611d825780820380516001836020036101000a031916815260200191505b509650505050505050600060405180830381600087803b158015611da557600080fd5b505af1158015611db9573d6000803e3d6000fd5b505050505b61019881600181518110611dce57fe5b60200260200101510281600081518110611de457fe5b602002602001015101826001600160a01b0316846001600160a01b03167fe4dfa6ac11314892f3029b34a25b1a887da3b1cab2bbf8506d87128ba6e3ac0284600281518110611e2f57fe5b602002602001015185600381518110611e4457fe5b60200260200101517f000000000000000000000000000000000000000000000000000000000000000087600381518110611e7a57fe5b602002602001015160405180858152602001848152602001836001600160a01b03166001600160a01b0316815260200182815260200194505050505060405180910390a4505050565b6060815167ffffffffffffffff81118015611edd57600080fd5b50604051908082528060200260200182016040528015611f07578160200160208202803683370190505b50905060005b8251811015611f37576001828281518110611f2457fe5b6020908102919091010152600101611f0d565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632eb2c2d6308585856040518563ffffffff1660e01b815260040180856001600160a01b03166001600160a01b03168152602001846001600160a01b03166001600160a01b03168152602001806020018060200180602001848103845286818151815260200191508051906020019060200280838360005b83811015611ff2578181015183820152602001611fda565b50505050905001848103835285818151815260200191508051906020019060200280838360005b83811015612031578181015183820152602001612019565b50505050905001848103825260008152602001602001975050505050505050600060405180830381600087803b15801561206a57600080fd5b505af115801561207e573d6000803e3d6000fd5b50505050505050565b6001600160a01b0382166120cc5760405162461bcd60e51b8152600401808060200182810382526025815260200180612b6b6025913960400191505060405180910390fd5b6001600160a01b03821660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915582519384529083015280517fb21eb88b4e33b3f1281830a7178d74d8aa73220416215726b68ae23d539515cb9281900390910190a15050565b600081516041146121a6576040805162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015290519081900360640190fd5b60208201516040830151606084015160001a7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156122175760405162461bcd60e51b8152600401808060200182810382526022815260200180612ae36022913960400191505060405180910390fd5b8060ff16601b1415801561222f57508060ff16601c14155b1561226b5760405162461bcd60e51b8152600401808060200182810382526022815260200180612b286022913960400191505060405180910390fd5b60408051600080825260208083018085528a905260ff85168385015260608301879052608083018690529251909260019260a080820193601f1981019281900390910190855afa1580156122c3573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661232b576040805162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015290519081900360640190fd5b93505050505b92915050565b60008787878787878760405160200180888152602001878152602001868152602001858152602001846001600160a01b03166001600160a01b031660601b8152601401838152602001828051906020019060200280838360005b838110156123a9578181015183820152602001612391565b50505050905001975050505050505050604051602081830303815290604052805190602001209050979650505050505050565b600081815b845181101561247b5760008582815181106123f857fe5b60200260200101519050808310156124405782816040516020018083815260200182815260200192505050604051602081830303815290604052805190602001209250612472565b808360405160200180838152602001828152602001925050506040516020818303038152906040528051906020012092505b506001016123e1565b507f0000000000000000000000000000000000000000000000000000000000000000149392505050565b6000806124ca60646124be85600563ffffffff61264716565b9063ffffffff6126a716565b90506125276001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016857f00000000000000000000000000000000000000000000000000000000000000008463ffffffff6126e916565b612537838263ffffffff61277116565b949350505050565b8251819085901561262c57606060008060008061255b8a610d2e565b93985091965094509250905060006125768686868686611375565b15612604576125906125888d84612647565b6127106126a7565b9050886001600160a01b0316846001600160a01b0316866001600160a01b03167fac7a699eb95c3c6d390ec4626de17ef9a67b35891efdb197beba7c7fdd45fac48f858760405180848152602001838152602001828152602001935050505060405180910390a46126018782612771565b96505b8015612625576126256001600160a01b0389168e878463ffffffff6126e916565b5050505050505b61207e6001600160a01b03831688868463ffffffff6126e916565b60008261265657506000612331565b8282028284828161266357fe5b04146126a05760405162461bcd60e51b8152600401808060200182810382526021815260200180612b4a6021913960400191505060405180910390fd5b9392505050565b60006126a083836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506127b3565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052611acc908590612855565b60006126a083836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061290b565b6000818361283f5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156128045781810151838201526020016127ec565b50505050905090810190601f1680156128315780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161284b57fe5b0495945050505050565b60606128aa826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166129659092919063ffffffff16565b805190915015612906578080602001905160208110156128c957600080fd5b50516129065760405162461bcd60e51b815260040180806020018281038252602a815260200180612b90602a913960400191505060405180910390fd5b505050565b6000818484111561295d5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156128045781810151838201526020016127ec565b505050900390565b60606125378484600085606061297a85612adc565b6129cb576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310612a0a5780518252601f1990920191602091820191016129eb565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612a6c576040519150601f19603f3d011682016040523d82523d6000602084013e612a71565b606091505b50915091508115612a855791506125379050565b805115612a955780518082602001fd5b60405162461bcd60e51b81526020600482018181528651602484015286518793919283926044019190850190808383600083156128045781810151838201526020016127ec565b3b15159056fe45434453413a20696e76616c6964207369676e6174757265202773272076616c7565526566657272616c56616c696461746f723a2053656e646572206e6f742061646d696e45434453413a20696e76616c6964207369676e6174757265202776272076616c7565536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774d6574615472616e73616374696f6e52656365697665723a207a65726f20616464726573735361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a264697066735822122077f2d13cbcb85fa08010a53c1e4ef27117b031e8c1c9273d55cef362af299f3164736f6c6343000605003345737461746553616c6557697468417574683a207a65726f20616464726573734d6574615472616e73616374696f6e52656365697665723a207a65726f206164647265737345737461746553616c6557697468417574683a206973206e6f74206120636f6e7472616374",
  "deployedBytecode": "",
  "devdoc": {
    "methods": {
      "buyLandWithSand(address,address,address,uint256[],bytes32,uint256[],bytes32[],bytes,bytes)": {
        "params": {
          "assetIds": "asset ids (lands) that will be bought",
          "buyer": "address that perform the payment",
          "info": "[X_INDEX=0] x coordinate of the Land [Y_INDEX=1] y coordinate of the Land [SIZE_INDEX=2] size of the pack of Land to purchase [PRICE_INDEX=3] price in SAND to purchase that Land",
          "proof": "merkleProof for that particular Land",
          "referral": "referral id",
          "reserved": "the reserved address (if any)",
          "salt": "The salt submitted for verification.",
          "signature": "A signed message specifying tx details",
          "to": "address that will own the purchased Land"
        }
      },
      "changeAdmin(address)": {
        "details": "change the administrator to be `newAdmin`.",
        "params": {
          "newAdmin": "address of the new administrator."
        }
      },
      "disablePreviousSigningWallet(address)": {
        "details": "Disable compromised signing wallet",
        "params": {
          "disableWallet": "The wallet address to be disabled"
        }
      },
      "getAdmin()": {
        "details": "gives the current administrator of this contract.",
        "returns": {
          "_0": "the current administrator of this contract."
        }
      },
      "getSigningWallet()": {
        "details": "signing wallet authorized for referral",
        "returns": {
          "_0": "the address of the signing wallet"
        }
      },
      "isMetaTransactionProcessor(address)": {
        "details": "check whether address `who` is given meta-transaction execution rights.",
        "params": {
          "who": "The address to query."
        },
        "returns": {
          "_0": "whether the address has meta-transaction execution rights."
        }
      },
      "isReferralValid(bytes,address,address,uint256,uint256)": {
        "params": {
          "commissionRate": "The commissionRate of the referral",
          "expiryTime": "The expiry time of the referral",
          "referee": "The address of the referee",
          "referrer": "The address of the referrer",
          "signature": "The signature to check (signed referral)"
        },
        "returns": {
          "_0": "True if the referral is valid"
        }
      },
      "setMetaTransactionProcessor(address,bool)": {
        "details": "Enable or disable the ability of `metaTransactionProcessor` to perform meta-tx (metaTransactionProcessor rights).",
        "params": {
          "enabled": "set whether the metaTransactionProcessor is enabled or disabled.",
          "metaTransactionProcessor": "address that will be given/removed metaTransactionProcessor rights."
        }
      },
      "setReceivingWallet(address)": {
        "params": {
          "newWallet": "address of the new receiving wallet"
        }
      },
      "updateMaxCommissionRate(uint256)": {
        "details": "Update the maximum commission rate",
        "params": {
          "newMaxCommissionRate": "The new maximum commission rate"
        }
      },
      "updateSigningWallet(address)": {
        "details": "Update the signing wallet The previous wallet is still valid for a grace period (_previousSigningDelay). If you want to disable the previous wallet, use the disablePreviousSigningWallet function.",
        "params": {
          "newSigningWallet": "The new address of the signing wallet"
        }
      },
      "withdrawAssets(address,uint256[],uint256[])": {
        "params": {
          "assetIds": "the assetIds to be transferred",
          "to": "intended recipient of the asset tokens",
          "values": "the quantities of the assetIds to be transferred"
        }
      }
    },
    "title": "Estate Sale contract with referral"
  },
  "userdoc": {
    "methods": {
      "buyLandWithSand(address,address,address,uint256[],bytes32,uint256[],bytes32[],bytes,bytes)": {
        "notice": "buy Land with SAND using the merkle proof associated with it"
      },
      "getExpiryTime()": {
        "notice": "Gets the expiry time for the current sale"
      },
      "getMaxCommissionRate()": {
        "notice": "the max commission rate"
      },
      "getMerkleRoot()": {
        "notice": "Gets the Merkle root associated with the current sale"
      },
      "isReferralValid(bytes,address,address,uint256,uint256)": {
        "notice": "Check if a referral is valid"
      },
      "setReceivingWallet(address)": {
        "notice": "set the wallet receiving the proceeds"
      },
      "withdrawAssets(address,uint256[],uint256[])": {
        "notice": "enable Admin to withdraw remaining assets from EstateSaleWithFee contract"
      }
    },
    "notice": "This contract manages the sale of our lands as Estates"
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1129,
        "contract": "src/solc_0.6/EstateSale/EstateSaleWithAuth.sol:EstateSaleWithAuth",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 14099,
        "contract": "src/solc_0.6/EstateSale/EstateSaleWithAuth.sol:EstateSaleWithAuth",
        "label": "_admin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 14168,
        "contract": "src/solc_0.6/EstateSale/EstateSaleWithAuth.sol:EstateSaleWithAuth",
        "label": "_metaTransactionContracts",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 12200,
        "contract": "src/solc_0.6/EstateSale/EstateSaleWithAuth.sol:EstateSaleWithAuth",
        "label": "_signingWallet",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 12202,
        "contract": "src/solc_0.6/EstateSale/EstateSaleWithAuth.sol:EstateSaleWithAuth",
        "label": "_maxCommissionRate",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 12206,
        "contract": "src/solc_0.6/EstateSale/EstateSaleWithAuth.sol:EstateSaleWithAuth",
        "label": "_previousSigningWallets",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7750,
        "contract": "src/solc_0.6/EstateSale/EstateSaleWithAuth.sol:EstateSaleWithAuth",
        "label": "_wallet",
        "offset": 0,
        "slot": "6",
        "type": "t_address_payable"
      },
      {
        "astId": 7752,
        "contract": "src/solc_0.6/EstateSale/EstateSaleWithAuth.sol:EstateSaleWithAuth",
        "label": "_authValidator",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(AuthValidator)7063"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AuthValidator)7063": {
        "encoding": "inplace",
        "label": "contract AuthValidator",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}