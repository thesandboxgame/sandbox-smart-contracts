{
  "address": "0x3679bb4b1695a259C9e11D51040eb7A03Df15943",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "OnlyOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "OperatorNotAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "AllowedExecuteMintSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "BaseURISet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_toTokenId",
          "type": "uint256"
        }
      ],
      "name": "BatchMetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_mintTreasury",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_signAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_allowedToExecuteMint",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_maxSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_operatorFiltererSubscription",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_operatorFiltererSubscriptionSubscribe",
          "type": "bool"
        }
      ],
      "name": "ContractInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "mintPrice",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "maxPublicTokensPerWallet",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "maxAllowlistTokensPerWallet",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxMarketingTokens",
          "type": "uint256"
        }
      ],
      "name": "DefaultMintingValuesSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "MetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_personalizationMask",
          "type": "uint256"
        }
      ],
      "name": "Personalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_signAddress",
          "type": "address"
        }
      ],
      "name": "SignAddressSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "burner",
          "type": "address"
        }
      ],
      "name": "TokenBurned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "TokenBurningDisabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "TokenBurningEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "TreasurySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_waveMaxTokens",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_waveMaxTokensToBuy",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_waveSingleTokenPrice",
          "type": "uint256"
        }
      ],
      "name": "WaveSetup",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CONFIGURATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_MINT_PRICE_FULL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TRANSFORMER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addConfigurator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addTransformer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowedToExecuteMint",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "burnedTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        }
      ],
      "name": "burnedTokensCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "burner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burnerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chain",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "checkMintAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        }
      ],
      "name": "didBurnTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableBurning",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableBurning",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "indexWave",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collectionOwner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_initialBaseURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address payable",
          "name": "_mintTreasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_signAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_initialTrustedForwarder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_allowedToExecuteMint",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxSupply",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "registry",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "operatorFiltererSubscription",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "operatorFiltererSubscriptionSubscribe",
              "type": "bool"
            }
          ],
          "internalType": "struct AvatarCollection.OpenseaRegistryFilterParameters",
          "name": "_filterParams",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "mintPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPublicTokensPerWallet",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxAllowlistTokensPerWallet",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxMarketingTokens",
              "type": "uint256"
            }
          ],
          "internalType": "struct AvatarCollection.MintingDefaults",
          "name": "_mintingDefaults",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isBurnEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_signatureId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintTreasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintingDefaults",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "mintPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPublicTokensPerWallet",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxAllowlistTokensPerWallet",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxMarketingTokens",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operatorFilterRegistry",
      "outputs": [
        {
          "internalType": "contract IOperatorFilterRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_personalizationMask",
          "type": "uint256"
        }
      ],
      "name": "operatorPersonalize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "personalizationOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "personalizationTraits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_signatureId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_personalizationMask",
          "type": "uint256"
        }
      ],
      "name": "personalize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_count",
          "type": "uint256"
        }
      ],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_signatureId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "reveal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeConfiguratorRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeTransformerRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_minterToken",
          "type": "address"
        }
      ],
      "name": "setAllowedExecuteMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setAllowlistMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setMarketingMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setPublicMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_signAddress",
          "type": "address"
        }
      ],
      "name": "setSignAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_waveMaxTokensOverall",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_waveMaxTokensPerWallet",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_waveSingleTokenPrice",
          "type": "uint256"
        }
      ],
      "name": "setupWave",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "signAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newRegistry",
          "type": "address"
        }
      ],
      "name": "updateOperatorFilterRegistryAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "waveMaxTokensOverall",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "waveMaxTokensPerWallet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "waveOwnerToClaimedCounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "waveSingleTokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "waveTotalMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2a35d91b1e7e803662704c3a5b3324407e95f4923b13ab87f7cc5abf48600660",
  "receipt": {
    "to": null,
    "from": "0x4BF86138e9DC66Fb65F8b9387C53aB4439FC41FF",
    "contractAddress": "0x3679bb4b1695a259C9e11D51040eb7A03Df15943",
    "transactionIndex": 5,
    "gasUsed": "5367953",
    "logsBloom": "0x
    "blockHash": "0x4fca5ce92140c1026e21047f445e89f51c5013b8d3f55c562db7e28cbdd359b1",
    "transactionHash": "0x2a35d91b1e7e803662704c3a5b3324407e95f4923b13ab87f7cc5abf48600660",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 36834585,
        "transactionHash": "0x2a35d91b1e7e803662704c3a5b3324407e95f4923b13ab87f7cc5abf48600660",
        "address": "0x3679bb4b1695a259C9e11D51040eb7A03Df15943",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 22,
        "blockHash": "0x4fca5ce92140c1026e21047f445e89f51c5013b8d3f55c562db7e28cbdd359b1"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 36834585,
        "transactionHash": "0x2a35d91b1e7e803662704c3a5b3324407e95f4923b13ab87f7cc5abf48600660",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000004bf86138e9dc66fb65f8b9387c53ab4439fc41ff",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000205333994ae1c000000000000000000000000000000000000000000000002a62182b8b525033b100000000000000000000000000000000000000000000117abb269ee8cfca297a00000000000000000000000000000000000000000000002a61f7d857b90551f100000000000000000000000000000000000000000000117abb46f21c69150b3a",
        "logIndex": 23,
        "blockHash": "0x4fca5ce92140c1026e21047f445e89f51c5013b8d3f55c562db7e28cbdd359b1"
      }
    ],
    "blockNumber": 36834585,
    "cumulativeGasUsed": "6670718",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d8f6dd356b04f1599320b76d786c6ae7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"OnlyOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"AllowedExecuteMintSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"BaseURISet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_mintTreasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_signAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_allowedToExecuteMint\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_operatorFiltererSubscription\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_operatorFiltererSubscriptionSubscribe\",\"type\":\"bool\"}],\"name\":\"ContractInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"mintPrice\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maxPublicTokensPerWallet\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maxAllowlistTokensPerWallet\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxMarketingTokens\",\"type\":\"uint256\"}],\"name\":\"DefaultMintingValuesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_personalizationMask\",\"type\":\"uint256\"}],\"name\":\"Personalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_signAddress\",\"type\":\"address\"}],\"name\":\"SignAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"}],\"name\":\"TokenBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TokenBurningDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TokenBurningEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"TreasurySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_waveMaxTokens\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_waveMaxTokensToBuy\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_waveSingleTokenPrice\",\"type\":\"uint256\"}],\"name\":\"WaveSetup\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONFIGURATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_MINT_PRICE_FULL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRANSFORMER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addConfigurator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addTransformer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowedToExecuteMint\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"burnedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"burnedTokensCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"burner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burnerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"checkMintAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"didBurnTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableBurning\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableBurning\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"indexWave\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collectionOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_initialBaseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"_mintTreasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_signAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_initialTrustedForwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_allowedToExecuteMint\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operatorFiltererSubscription\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"operatorFiltererSubscriptionSubscribe\",\"type\":\"bool\"}],\"internalType\":\"struct AvatarCollection.OpenseaRegistryFilterParameters\",\"name\":\"_filterParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mintPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPublicTokensPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAllowlistTokensPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxMarketingTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct AvatarCollection.MintingDefaults\",\"name\":\"_mintingDefaults\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBurnEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_signatureId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingDefaults\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mintPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPublicTokensPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAllowlistTokensPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxMarketingTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorFilterRegistry\",\"outputs\":[{\"internalType\":\"contract IOperatorFilterRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_personalizationMask\",\"type\":\"uint256\"}],\"name\":\"operatorPersonalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"personalizationOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"personalizationTraits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_signatureId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_personalizationMask\",\"type\":\"uint256\"}],\"name\":\"personalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_signatureId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"reveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeConfiguratorRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeTransformerRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minterToken\",\"type\":\"address\"}],\"name\":\"setAllowedExecuteMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setAllowlistMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setMarketingMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPublicMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signAddress\",\"type\":\"address\"}],\"name\":\"setSignAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_waveMaxTokensOverall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_waveMaxTokensPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_waveSingleTokenPrice\",\"type\":\"uint256\"}],\"name\":\"setupWave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRegistry\",\"type\":\"address\"}],\"name\":\"updateOperatorFilterRegistryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"waveMaxTokensOverall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"waveMaxTokensPerWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"waveOwnerToClaimedCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"waveSingleTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"waveTotalMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"qed.team x The Sandbox\",\"events\":{\"AllowedExecuteMintSet(address)\":{\"details\":\"emitted when setAllowedExecuteMint is called\",\"params\":{\"_address\":\"the address that will be allowed to set execute the mint function\"}},\"BaseURISet(string)\":{\"details\":\"emitted when setBaseURI is called\",\"params\":{\"baseURI\":\"an URI that will be used as the base for token URI\"}},\"ContractInitialized(string,string,string,address,address,address,uint256,address,address,bool)\":{\"details\":\"emitted at proxy startup, once only\",\"params\":{\"_allowedToExecuteMint\":\"token address that is allowed to execute the mint function\",\"_maxSupply\":\"max supply of tokens to be allowed to be minted per contract\",\"_mintTreasury\":\"collection treasury address\",\"_name\":\"name of the ERC721 token\",\"_operatorFiltererSubscription\":\"subscription address to use as a template for\",\"_operatorFiltererSubscriptionSubscribe\":\"if to subscribe to the operatorFiltererSubscription address or                                               just copy entries from it\",\"_registry\":\"filter registry to which to register with. For blocking operators that do not respect royalties\",\"_signAddress\":\"signer address that is allowed to create mint signatures\",\"_symbol\":\"token symbol of the ERC721 token\",\"baseURI\":\"an URI that will be used as the base for token URI\"}},\"DefaultMintingValuesSet(uint256,uint256,uint256,uint256)\":{\"details\":\"emitted when initialize or setWaveDefaults is called\",\"params\":{\"maxAllowlistTokensPerWallet\":\"maximum tokens mint per wallet in the allowlist minting\",\"maxMarketingTokens\":\"maximum allowed tokens to be minted in the marketing phase\",\"maxPublicTokensPerWallet\":\"maximum tokens mint per wallet in the public minting\",\"mintPrice\":\"default mint price for both allowlist and public minting\"}},\"Personalized(uint256,uint256)\":{\"details\":\"emitted when personalize is called\",\"params\":{\"_personalizationMask\":\"the exact personalization that was done, as a custom meaning bit-mask\",\"_tokenId\":\"id of the token which had the personalization done\"}},\"SignAddressSet(address)\":{\"details\":\"emitted when setSignAddress is called\",\"params\":{\"_signAddress\":\"new signer address to be set\"}},\"TreasurySet(address)\":{\"details\":\"emitted when setTreasury is called\",\"params\":{\"_owner\":\"new owner address to be saved\"}},\"WaveSetup(uint256,uint256,uint256)\":{\"details\":\"emitted when setupWave is called\",\"params\":{\"_waveMaxTokens\":\"the allowed number of tokens to be minted in this wave (cumulative by all minting wallets)\",\"_waveMaxTokensToBuy\":\"max tokens to buy, per wallet in a given wave\",\"_waveSingleTokenPrice\":\"the price to mint a token in a given wave, in wei\"}}},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"reverts if sender not new pending owner\"},\"addConfigurator(address)\":{\"details\":\"reverts if account is zero address or not called by owner\",\"params\":{\"account\":\"the address that which will be given the specified role role\"}},\"addTransformer(address)\":{\"details\":\"reverts if account is zero address or not called by owner\",\"params\":{\"account\":\"the address that which will be given the specified role role\"}},\"approve(address,uint256)\":{\"details\":\"See OpenZeppelin {IERC721-approve}\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"custom:event\":\"TokenBurned\",\"details\":\"See {ERC721BurnMemoryEnumerableUpgradeable.burn}.      Inherited in order to add the whenNotPaused modifier\",\"params\":{\"tokenId\":\"the token id to be burned\"}},\"burnedTokensCount(address)\":{\"params\":{\"previousOwner\":\"the owner to check for burned tokens\"},\"returns\":{\"_0\":\"number of burned tokens by the indicated owner\"}},\"burnerOf(uint256)\":{\"details\":\"Does NOT revert if token was not burned/doesn't exist\",\"params\":{\"tokenId\":\"the tokenId to be checked who burned it\"},\"returns\":{\"_0\":\"the address of who burned the indicated token ID\"}},\"chain()\":{\"details\":\"returns block.chainid\",\"returns\":{\"_0\":\"current chainID for the blockchain\"}},\"checkMintAllowed(address,uint256)\":{\"params\":{\"_amount\":\"amount to be checked if can be minted\",\"_wallet\":\"wallet to be checked if it can mint\"},\"returns\":{\"_0\":\"if can mint or not\"}},\"didBurnTokens(address)\":{\"params\":{\"previousOwner\":\"the owner to check for burned tokens\"},\"returns\":{\"_0\":\"if the address burned any tokens\"}},\"disableBurning()\":{\"custom:event\":\"TokenBurningDisabled\",\"details\":\"reverts if burning already disabled.      Inherited in order to add the onlyOwner modifier\"},\"enableBurning()\":{\"custom:event\":\"TokenBurningEnabled\",\"details\":\"reverts if burning already enabled.      Inherited in order to add the onlyOwner modifier\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,string,string,string,address,address,address,address,uint256,(address,address,bool),(uint256,uint256,uint256,uint256))\":{\"details\":\"calls all the init functions from the base classes. Emits {ContractInitialized} event\",\"params\":{\"_allowedToExecuteMint\":\"ERC20 token contract through which mint will be done                              It is the only one allowed to call mint\",\"_collectionOwner\":\"the address that will be set as the owner of the collection\",\"_filterParams\":\"Opensea registry filter initialization parameters\",\"_initialBaseURI\":\"an URI that will be used as the base for token URI\",\"_initialTrustedForwarder\":\"trusted forwarder address\",\"_maxSupply\":\"max supply of tokens to be allowed to be minted per contract\",\"_mintTreasury\":\"collection treasury address\",\"_mintingDefaults\":\"default minting values for predefined wave helpers\",\"_name\":\"name of the ERC721 token\",\"_signAddress\":\"signer address that is allowed to create mint signatures\",\"_symbol\":\"token symbol of the ERC721 token\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mint(address,uint256,uint256,bytes)\":{\"custom:event\":\"{Transfer}\",\"params\":{\"_amount\":\"number of token to mint\",\"_signature\":\"signing signature value\",\"_signatureId\":\"signing signature ID\",\"_wallet\":\"minting wallet\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"operatorPersonalize(uint256,uint256)\":{\"custom:event\":\"{Personalized}{MetadataUpdate}\",\"details\":\"reverts if token does not exist or if not authorized\",\"params\":{\"_personalizationMask\":\"a mask where each bit has a custom meaning in-game\",\"_tokenId\":\"what token to personalize\"}},\"owner()\":{\"details\":\"returns OwnableUpgradeable.owner()\",\"returns\":{\"_0\":\"owner of current contract\"}},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"pause()\":{\"details\":\"reverts if not owner of the collection or if not un-paused\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"personalizationOf(uint256)\":{\"details\":\"returns personalizationTraits[_tokenId]\",\"params\":{\"_tokenId\":\"the token ID to check\"},\"returns\":{\"_0\":\"the personalization data as uint256\"}},\"personalize(uint256,bytes,uint256,uint256)\":{\"custom:event\":\"{Personalized}{MetadataUpdate}\",\"details\":\"after checks, it is reduced to personalizationTraits[_tokenId] = _personalizationMask\",\"params\":{\"_personalizationMask\":\"a mask where each bit has a custom meaning in-game\",\"_signature\":\"signing signature\",\"_signatureId\":\"the ID of the provided signature\",\"_tokenId\":\"what token to personalize\"}},\"price(uint256)\":{\"details\":\"returns waveSingleTokenPrice * _count; Does not check if it is possible      to actually mint that much\",\"params\":{\"_count\":\"the number of tokens to estimate mint price for\"},\"returns\":{\"_0\":\"price of minting all the tokens\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"reveal(uint256,uint256,bytes)\":{\"custom:event\":\"{MetadataUpdate}\",\"details\":\"will revert if owner of token is not caller or if signature is not valid\",\"params\":{\"_signature\":\"validation signature\",\"_signatureId\":\"validation signature ID\",\"_tokenId\":\"the ID belonging to the NFT token for which to emit the event\"}},\"revokeConfiguratorRole(address)\":{\"details\":\"reverts if account is zero address or not called by owner\",\"params\":{\"account\":\"the account address for which the role to be revoked\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"revokeTransformerRole(address)\":{\"details\":\"reverts if account is zero address or not called by owner\",\"params\":{\"account\":\"the account address for which the role to be revoked\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See OpenZeppelin {IERC721-safeTransferFrom}\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See OpenZeppelin {IERC721-safeTransferFrom}\"},\"setAllowedExecuteMint(address)\":{\"custom:event\":\"{AllowedExecuteMintSet}{DefaultMintingValuesSet}\",\"details\":\"sets allowedToExecuteMint = _address; address must belong to a contract or reverts\",\"params\":{\"_minterToken\":\"the address that will be allowed to execute the mint function\"}},\"setAllowlistMint()\":{\"custom:event\":\"{WaveSetup}\",\"details\":\"reverts if not authorized\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See OpenZeppelin {IERC721-setApprovalForAll}\"},\"setBaseURI(string)\":{\"custom:event\":\"{BaseURISet}\",\"details\":\"sets baseTokenURI = baseURI\",\"params\":{\"baseURI\":\"an URI that will be used as the base for token URI\"}},\"setMarketingMint()\":{\"custom:event\":\"{WaveSetup}\",\"details\":\"reverts if not authorized\"},\"setPublicMint()\":{\"custom:event\":\"{WaveSetup}\",\"details\":\"reverts if not authorized\"},\"setSignAddress(address)\":{\"custom:event\":\"{SignAddressSet}\",\"details\":\"sets signAddress = _signAddress; address can't be 0\",\"params\":{\"_signAddress\":\"new signer address to be set\"}},\"setTreasury(address)\":{\"custom:event\":\"{TreasurySet}\",\"details\":\"sets mintTreasury = _treasury\",\"params\":{\"_treasury\":\"new treasury address to be saved\"}},\"setupWave(uint256,uint256,uint256)\":{\"custom:event\":\"{WaveSetup}\",\"params\":{\"_waveMaxTokensOverall\":\"the allowed number of tokens to be minted in this wave (cumulative by all minting wallets)\",\"_waveMaxTokensPerWallet\":\"max tokens to buy, per wallet in a given wave\",\"_waveSingleTokenPrice\":\"the price to mint a token in a given wave, in wei                              denoted by the allowedToExecuteMint contract\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See OpenZeppelin {IERC721-transferFrom}\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"reverts if not owner of the collection or if not paused\"}},\"stateVariables\":{\"_availableIds\":{\"details\":\"helper mapping used to determine which IDs are available for minting\"},\"_signatureIds\":{\"details\":\"map used to mark if a specific signatureId was used      values are 0 (default, unused) and 1 (used)      Used to mitigate a possible signature reuse attack\"}},\"title\":\"AvatarCollection\",\"version\":1},\"userdoc\":{\"events\":{\"AllowedExecuteMintSet(address)\":{\"notice\":\"Event emitted when an address was set as allowed to mint\"},\"BaseURISet(string)\":{\"notice\":\"Event emitted when the base token URI for the contract was set or changed\"},\"ContractInitialized(string,string,string,address,address,address,uint256,address,address,bool)\":{\"notice\":\"Event emitted when the contract was initialized.\"},\"DefaultMintingValuesSet(uint256,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when the default values used by wave manipulation functions were changed\"},\"OwnershipTransferStarted(address,address)\":{\"notice\":\"event emitted when the ownership transfer routine has been started\"},\"Personalized(uint256,uint256)\":{\"notice\":\"Event emitted when a token personalization was made.\"},\"SignAddressSet(address)\":{\"notice\":\"Event emitted when the signer address was set or changed\"},\"TokenBurned(uint256,address)\":{\"notice\":\"event emitted when a token was burned\"},\"TokenBurningDisabled()\":{\"notice\":\"event emitted when token burning was disabled\"},\"TokenBurningEnabled()\":{\"notice\":\"event emitted when token burning was enabled\"},\"TreasurySet(address)\":{\"notice\":\"Event emitted when the treasury address was saved\"},\"WaveSetup(uint256,uint256,uint256)\":{\"notice\":\"Event emitted when a wave was set up\"}},\"kind\":\"user\",\"methods\":{\"ADMIN_ROLE()\":{\"notice\":\"identifier for the ADMIN role. This role is only given to the owner of the contract         and allows for adding other addresses to the CONFIGURATOR and TRANSFORMER role\"},\"CONFIGURATOR_ROLE()\":{\"notice\":\"identifier for the CONFIGURATOR role. Owners of this role can call configuration specific         functions on the avatar contract, including setting base URI and changing minting phase\"},\"DEFAULT_MINT_PRICE_FULL()\":{\"notice\":\"default minting price in full tokens (not WEI) when used, this must be         multiplied by the token \\\"allowedToExecuteMint\\\" token decimals\"},\"TRANSFORMER_ROLE()\":{\"notice\":\"identifier for the CONFIGURATOR role. Owners of this role can personalization specific functions         on the avatar contract.\"},\"acceptOwnership()\":{\"notice\":\"second part of a 2 step ownership transfer routine.         Also transfers the ADMIN_ROLE as there can only be 1 ADMIN_ROLE\"},\"addConfigurator(address)\":{\"notice\":\"helper function to grant the CONFIGURATOR role to an address\"},\"addTransformer(address)\":{\"notice\":\"helper function to grant the TRANSFORMER role to an address\"},\"allowedToExecuteMint()\":{\"notice\":\"ERC20 contract through which the minting will be done\"},\"baseTokenURI()\":{\"notice\":\"standard base token URL for ERC721 metadata\"},\"burn(uint256)\":{\"notice\":\"Burns `tokenId`. The caller must own `tokenId` or be an approved operator.\"},\"burnedTokens(address,uint256)\":{\"notice\":\"burner to list of burned tokens mapping; to see what tokens who burned\"},\"burnedTokensCount(address)\":{\"notice\":\"Gets the number of burned tokens by the indicated owner\"},\"burner(uint256)\":{\"notice\":\"tokenId to burner mapping; saves who burned a specific token\"},\"burnerOf(uint256)\":{\"notice\":\"Returns the burner of the `tokenId`\"},\"chain()\":{\"notice\":\"helper automation function\"},\"checkMintAllowed(address,uint256)\":{\"notice\":\"check if the indicated wallet can mint the indicated amount\"},\"constructor\":{\"notice\":\"mitigate a possible Implementation contract takeover, as indicate by         https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#initializing_the_implementation_contract\"},\"didBurnTokens(address)\":{\"notice\":\"Checks if the indicated owner had burned tokens\"},\"disableBurning()\":{\"notice\":\"disables burning of tokens\"},\"enableBurning()\":{\"notice\":\"enables burning of tokens\"},\"indexWave()\":{\"notice\":\"each wave has an index to help track minting/tokens per wallet\"},\"initialize(address,string,string,string,address,address,address,address,uint256,(address,address,bool),(uint256,uint256,uint256,uint256))\":{\"notice\":\"external entry point initialization function in accordance with the upgradable pattern\"},\"isBurnEnabled()\":{\"notice\":\"flag that gates burning\"},\"maxSupply()\":{\"notice\":\"max token supply\"},\"mint(address,uint256,uint256,bytes)\":{\"notice\":\"token minting function. Price is set by wave and is paid in tokens denoted         by the allowedToExecuteMint contract\"},\"mintTreasury()\":{\"notice\":\"treasury address where mint tokens are sent\"},\"mintingDefaults()\":{\"notice\":\"default are used when calling predefined wave setup functions:         setMarketingMint, setAllowlistMint and setPublicMint         see struct MintingDefaults for more details\"},\"operatorPersonalize(uint256,uint256)\":{\"notice\":\"personalize token traits but can be called by owner or special roles address         Used to change the traits of a token based on an in-game action\"},\"owner()\":{\"notice\":\"returns the owner of the contract\"},\"pause()\":{\"notice\":\"pauses the contract\"},\"personalizationOf(uint256)\":{\"notice\":\"get the personalization of the indicated tokenID\"},\"personalizationTraits(uint256)\":{\"notice\":\"stores the personalization for a tokenId\"},\"personalize(uint256,bytes,uint256,uint256)\":{\"notice\":\"personalize token traits according to the provided personalization bit-mask\"},\"price(uint256)\":{\"notice\":\"get the price of minting the indicated number of tokens for the current wave\"},\"renounceOwnership()\":{\"notice\":\"renounce ownership function, made to revert as a failsafe\"},\"reveal(uint256,uint256,bytes)\":{\"notice\":\"helper function to emit the {MetadataUpdate} event in order for marketplaces to, on demand,         refresh metadata, for the provided token ID. Off-chain, gaming mechanics are done and this         function is ultimately called to signal the end of a reveal.\"},\"revokeConfiguratorRole(address)\":{\"notice\":\"helper function to revert the CONFIGURATOR role that was given to an address\"},\"revokeTransformerRole(address)\":{\"notice\":\"helper function to revert the TRANSFORMER role that was given to an address\"},\"setAllowedExecuteMint(address)\":{\"notice\":\"sets which address is allowed to execute the mint function. Also resets default mint price\"},\"setAllowlistMint()\":{\"notice\":\"helper function to set all token configs to that of the allowlist minting phase.         Can be called by owner or specially designated role, CONFIGURATOR.         Uses default values set on contract initialization\"},\"setBaseURI(string)\":{\"notice\":\"sets the base token URI for the contract\"},\"setMarketingMint()\":{\"notice\":\"helper function to set all token configs to that of the marketing minting phase.         Can be called by owner or specially designated role, CONFIGURATOR.         Uses default values set on contract initialization\"},\"setPublicMint()\":{\"notice\":\"helper function to set all token configs to that of the public minting phase.         Can be called by owner or specially designated role, CONFIGURATOR.         Uses default values set on contract initialization\"},\"setSignAddress(address)\":{\"notice\":\"sets the sign address. Emits {SignAddressSet} event\"},\"setTreasury(address)\":{\"notice\":\"saving locally the treasury address\"},\"setupWave(uint256,uint256,uint256)\":{\"notice\":\"function to setup wave parameters. A wave is defined as a combination of allowed number tokens to be         minted in total, per wallet and minting price\"},\"signAddress()\":{\"notice\":\"all signatures must come from this specific address, otherwise are invalid\"},\"unpause()\":{\"notice\":\"unpauses the contract\"},\"updateOperatorFilterRegistryAddress(address)\":{\"notice\":\"Update the address that the contract will make OperatorFilter checks against. When set to the zero         address, checks will be bypassed. OnlyOwner.\"},\"waveMaxTokensOverall()\":{\"notice\":\"max tokens to buy per wave, cumulating all addresses\"},\"waveMaxTokensPerWallet()\":{\"notice\":\"max tokens to buy, per wallet in a given wave\"},\"waveOwnerToClaimedCounts(address,uint256)\":{\"notice\":\"mapping of [owner -> wave index -> minted count]\"},\"waveSingleTokenPrice()\":{\"notice\":\"price of one token mint (in the token denoted by the allowedToExecuteMint contract)\"},\"waveTotalMinted()\":{\"notice\":\"number of total minted tokens in the current running wave\"}},\"notice\":\"ERC721 contract for future Avatar collections.         Is expected to be initialize via {CollectionFactory} or other similar factories Some features: - upgradable - ownable (2 step transfer) and multi-role support for simplifying logistics - OpenSea royalty compliant - ERC4906 compliant - ERC165 compliant - supports ERC2771 for services like Biconomy - supports \\\"burn memory\\\" - keeping track of who burned what token for faster in-game gating checks - minting is only supported via an ERC20 token contract that supports approveAndCall   as mint price is in non-native tokens\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/solc_0.8.15/avatar/AvatarCollection.sol\":\"AvatarCollection\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-0.8.15/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8.15/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8.15/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8.15/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8.15/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8.15/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8.15/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8.15/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-0.8.13/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-0.8.13/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-0.8.13/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-0.8.13/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-0.8.13/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-0.8.13/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-0.8.13/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x2a6a0b9fd2d316dcb4141159a9d13be92654066d6c0ae92757ed908ecdfecff0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-0.8.13/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-0.8.13/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2c0b89cef83f353c6f9488c013d8a5968587ffdd6dfc26aad53774214b97e229\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-0.8.13/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\\n    function __ERC721Enumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Enumerable_init_unchained() internal onlyInitializing {\\n    }\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Upgradeable.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721Upgradeable.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0x2c98457c4171d86094adf9a4fd8cd2402b7e3e309e961f07910a60a576dd100f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-0.8.13/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf1870306db8391db9cf14b41be0da76857a88df0e5c623d2b2338fb30a3bd5ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-0.8.13/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-0.8.13/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-0.8.13/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-0.8.13/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-0.8.13/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-0.8.13/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-0.8.13/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"src/solc_0.8.15/avatar/AvatarCollection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable-0.8.13/access/OwnableUpgradeable.sol\\\";\\nimport {\\n    ReentrancyGuardUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable-0.8.13/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {\\n    AccessControlUpgradeable,\\n    ContextUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable-0.8.13/access/AccessControlUpgradeable.sol\\\";\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable-0.8.13/security/PausableUpgradeable.sol\\\";\\nimport {\\n    ERC721EnumerableUpgradeable,\\n    ERC721Upgradeable,\\n    IERC721Upgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable-0.8.13/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\\\";\\n\\nimport {ECDSA} from \\\"@openzeppelin/contracts-0.8.15/utils/cryptography/ECDSA.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts-0.8.15/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts-0.8.15/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts-0.8.15/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {\\n    UpdatableOperatorFiltererUpgradeable\\n} from \\\"../common/OperatorFilterer/UpdatableOperatorFiltererUpgradeable.sol\\\";\\n\\nimport {ERC2771HandlerUpgradeable} from \\\"../common/BaseWithStorage/ERC2771/ERC2771HandlerUpgradeable.sol\\\";\\nimport {IERC4906} from \\\"../common/IERC4906.sol\\\";\\n\\nimport {CollectionAccessControl} from \\\"./CollectionAccessControl.sol\\\";\\nimport {ERC721BurnMemoryEnumerableUpgradeable} from \\\"./ERC721BurnMemoryEnumerableUpgradeable.sol\\\";\\n\\n/**\\n * @title AvatarCollection\\n * @author qed.team x The Sandbox\\n * @notice ERC721 contract for future Avatar collections.\\n *         Is expected to be initialize via {CollectionFactory} or other similar factories\\n *\\n * Some features:\\n * - upgradable\\n * - ownable (2 step transfer) and multi-role support for simplifying logistics\\n * - OpenSea royalty compliant\\n * - ERC4906 compliant\\n * - ERC165 compliant\\n * - supports ERC2771 for services like Biconomy\\n * - supports \\\"burn memory\\\" - keeping track of who burned what token for faster in-game gating checks\\n * - minting is only supported via an ERC20 token contract that supports approveAndCall\\n *   as mint price is in non-native tokens\\n */\\ncontract AvatarCollection is\\n    ReentrancyGuardUpgradeable,\\n    CollectionAccessControl,\\n    ERC721BurnMemoryEnumerableUpgradeable,\\n    ERC2771HandlerUpgradeable,\\n    UpdatableOperatorFiltererUpgradeable,\\n    PausableUpgradeable,\\n    IERC4906\\n{\\n    /*//////////////////////////////////////////////////////////////\\n                           Type declarations\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Structure used to group default minting parameters in order to avoid stack too deep error\\n     * @param mintPrice default mint price for both allowlist and public minting\\n     * @param maxPublicTokensPerWallet maximum tokens mint per wallet in the public minting\\n     * @param maxAllowlistTokensPerWallet maximum tokens mint per wallet in the allowlist minting\\n     * @param maxMarketingTokens maximum allowed tokens to be minted in the marketing phase\\n     */\\n    struct MintingDefaults {\\n        uint256 mintPrice;\\n        uint256 maxPublicTokensPerWallet;\\n        uint256 maxAllowlistTokensPerWallet;\\n        uint256 maxMarketingTokens;\\n    }\\n\\n    /**\\n     * @notice Structure used to group registry filter parameters in order to avoid stack too deep error\\n     * @param registry filter registry to which to register with. For blocking operators that do not respect royalties\\n     * @param operatorFiltererSubscription subscription address to use as a template for\\n     * @param operatorFiltererSubscriptionSubscribe if to subscribe to the operatorFiltererSubscription address or\\n     *                                              just copy entries from it\\n     */\\n    struct OpenseaRegistryFilterParameters {\\n        address registry;\\n        address operatorFiltererSubscription;\\n        bool operatorFiltererSubscriptionSubscribe;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                           Global state variables\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice default minting price in full tokens (not WEI) when used, this must be\\n    ///         multiplied by the token \\\"allowedToExecuteMint\\\" token decimals\\n    uint256 public constant DEFAULT_MINT_PRICE_FULL = 100;\\n\\n    /// @notice max token supply\\n    uint256 public maxSupply;\\n\\n    /// @notice treasury address where mint tokens are sent\\n    address public mintTreasury;\\n\\n    /// @notice standard base token URL for ERC721 metadata\\n    string public baseTokenURI;\\n\\n    /// @notice max tokens to buy per wave, cumulating all addresses\\n    uint256 public waveMaxTokensOverall;\\n\\n    /// @notice max tokens to buy, per wallet in a given wave\\n    uint256 public waveMaxTokensPerWallet;\\n\\n    /// @notice price of one token mint (in the token denoted by the allowedToExecuteMint contract)\\n    uint256 public waveSingleTokenPrice;\\n\\n    /// @notice number of total minted tokens in the current running wave\\n    uint256 public waveTotalMinted;\\n\\n    /// @notice mapping of [owner -> wave index -> minted count]\\n    mapping(address => mapping(uint256 => uint256)) public waveOwnerToClaimedCounts;\\n\\n    /// @notice each wave has an index to help track minting/tokens per wallet\\n    uint256 public indexWave;\\n\\n    /// @notice default are used when calling predefined wave setup functions:\\n    ///         setMarketingMint, setAllowlistMint and setPublicMint\\n    ///         see struct MintingDefaults for more details\\n    MintingDefaults public mintingDefaults;\\n\\n    /// @notice ERC20 contract through which the minting will be done\\n    address public allowedToExecuteMint;\\n\\n    /// @notice all signatures must come from this specific address, otherwise are invalid\\n    address public signAddress;\\n\\n    /// @notice stores the personalization for a tokenId\\n    mapping(uint256 => uint256) public personalizationTraits;\\n\\n    /// @dev map used to mark if a specific signatureId was used\\n    ///      values are 0 (default, unused) and 1 (used)\\n    ///      Used to mitigate a possible signature reuse attack\\n    mapping(uint256 => uint256) private _signatureIds;\\n\\n    /// @dev helper mapping used to determine which IDs are available for minting\\n    mapping(uint256 => uint256) private _availableIds;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                Events\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Event emitted when a token personalization was made.\\n     * @dev emitted when personalize is called\\n     * @param _tokenId id of the token which had the personalization done\\n     * @param _personalizationMask the exact personalization that was done, as a custom meaning bit-mask\\n     */\\n    event Personalized(uint256 indexed _tokenId, uint256 indexed _personalizationMask);\\n\\n    /**\\n     * @notice Event emitted when the contract was initialized.\\n     * @dev emitted at proxy startup, once only\\n     * @param baseURI an URI that will be used as the base for token URI\\n     * @param _name name of the ERC721 token\\n     * @param _symbol token symbol of the ERC721 token\\n     * @param _mintTreasury collection treasury address\\n     * @param _signAddress signer address that is allowed to create mint signatures\\n     * @param _allowedToExecuteMint token address that is allowed to execute the mint function\\n     * @param _maxSupply max supply of tokens to be allowed to be minted per contract\\n     * @param _registry filter registry to which to register with. For blocking operators that do not respect royalties\\n     * @param _operatorFiltererSubscription subscription address to use as a template for\\n     * @param _operatorFiltererSubscriptionSubscribe if to subscribe to the operatorFiltererSubscription address or\\n     *                                               just copy entries from it\\n     */\\n    event ContractInitialized(\\n        string indexed baseURI,\\n        string indexed _name,\\n        string indexed _symbol,\\n        address _mintTreasury,\\n        address _signAddress,\\n        address _allowedToExecuteMint,\\n        uint256 _maxSupply,\\n        address _registry,\\n        address _operatorFiltererSubscription,\\n        bool _operatorFiltererSubscriptionSubscribe\\n    );\\n\\n    /**\\n     * @notice Event emitted when a wave was set up\\n     * @dev emitted when setupWave is called\\n     * @param _waveMaxTokens the allowed number of tokens to be minted in this wave (cumulative by all minting wallets)\\n     * @param _waveMaxTokensToBuy max tokens to buy, per wallet in a given wave\\n     * @param _waveSingleTokenPrice the price to mint a token in a given wave, in wei\\n     */\\n    event WaveSetup(\\n        uint256 indexed _waveMaxTokens,\\n        uint256 indexed _waveMaxTokensToBuy,\\n        uint256 indexed _waveSingleTokenPrice\\n    );\\n\\n    /**\\n     * @notice Event emitted when an address was set as allowed to mint\\n     * @dev emitted when setAllowedExecuteMint is called\\n     * @param _address the address that will be allowed to set execute the mint function\\n     */\\n    event AllowedExecuteMintSet(address indexed _address);\\n\\n    /**\\n     * @notice Event emitted when the treasury address was saved\\n     * @dev emitted when setTreasury is called\\n     * @param _owner new owner address to be saved\\n     */\\n    event TreasurySet(address indexed _owner);\\n\\n    /**\\n     * @notice Event emitted when the base token URI for the contract was set or changed\\n     * @dev emitted when setBaseURI is called\\n     * @param baseURI an URI that will be used as the base for token URI\\n     */\\n    event BaseURISet(string indexed baseURI);\\n\\n    /**\\n     * @notice Event emitted when the signer address was set or changed\\n     * @dev emitted when setSignAddress is called\\n     * @param _signAddress new signer address to be set\\n     */\\n    event SignAddressSet(address indexed _signAddress);\\n\\n    /**\\n     * @notice Event emitted when the default values used by wave manipulation functions were changed\\n     * @dev emitted when initialize or setWaveDefaults is called\\n     * @param mintPrice default mint price for both allowlist and public minting\\n     * @param maxPublicTokensPerWallet maximum tokens mint per wallet in the public minting\\n     * @param maxAllowlistTokensPerWallet maximum tokens mint per wallet in the allowlist minting\\n     * @param maxMarketingTokens maximum allowed tokens to be minted in the marketing phase\\n     */\\n    event DefaultMintingValuesSet(\\n        uint256 indexed mintPrice,\\n        uint256 indexed maxPublicTokensPerWallet,\\n        uint256 indexed maxAllowlistTokensPerWallet,\\n        uint256 maxMarketingTokens\\n    );\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            Initializers\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice mitigate a possible Implementation contract takeover, as indicate by\\n     *         https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#initializing_the_implementation_contract\\n     */\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @notice external entry point initialization function in accordance with the upgradable pattern\\n     * @dev calls all the init functions from the base classes. Emits {ContractInitialized} event\\n     * @param _collectionOwner the address that will be set as the owner of the collection\\n     * @param _initialBaseURI an URI that will be used as the base for token URI\\n     * @param _name name of the ERC721 token\\n     * @param _symbol token symbol of the ERC721 token\\n     * @param _mintTreasury collection treasury address\\n     * @param _signAddress signer address that is allowed to create mint signatures\\n     * @param _initialTrustedForwarder trusted forwarder address\\n     * @param _allowedToExecuteMint ERC20 token contract through which mint will be done\\n     *                              It is the only one allowed to call mint\\n     * @param _maxSupply max supply of tokens to be allowed to be minted per contract\\n     * @param _filterParams Opensea registry filter initialization parameters\\n     * @param _mintingDefaults default minting values for predefined wave helpers\\n     */\\n    function initialize(\\n        address _collectionOwner,\\n        string memory _initialBaseURI,\\n        string memory _name,\\n        string memory _symbol,\\n        address payable _mintTreasury,\\n        address _signAddress,\\n        address _initialTrustedForwarder,\\n        address _allowedToExecuteMint,\\n        uint256 _maxSupply,\\n        OpenseaRegistryFilterParameters memory _filterParams,\\n        MintingDefaults memory _mintingDefaults\\n    ) external virtual initializer {\\n        __AvatarCollection_init(\\n            _collectionOwner,\\n            _initialBaseURI,\\n            _name,\\n            _symbol,\\n            _mintTreasury,\\n            _signAddress,\\n            _initialTrustedForwarder,\\n            _allowedToExecuteMint,\\n            _maxSupply,\\n            _filterParams,\\n            _mintingDefaults\\n        );\\n    }\\n\\n    /**\\n     * @notice initialization function in accordance with the upgradable pattern\\n     * @dev calls all the init functions from the base classes. Emits {ContractInitialized} event\\n     * @param _collectionOwner the address that will be set as the owner of the collection\\n     * @param _initialBaseURI an URI that will be used as the base for token URI\\n     * @param _name name of the ERC721 token\\n     * @param _symbol token symbol of the ERC721 token\\n     * @param _mintTreasury collection treasury address\\n     * @param _signAddress signer address that is allowed to create mint signatures\\n     * @param _initialTrustedForwarder trusted forwarder address\\n     * @param _allowedToExecuteMint ERC20 token contract through which mint will be done\\n     *                              It is the only one allowed to call mint\\n     * @param _maxSupply max supply of tokens to be allowed to be minted per contract\\n     * @param _filterParams Opensea registry filter initialization parameters\\n     * @param _mintingDefaults default minting values for predefined wave helpers\\n     */\\n    function __AvatarCollection_init(\\n        address _collectionOwner,\\n        string memory _initialBaseURI,\\n        string memory _name,\\n        string memory _symbol,\\n        address payable _mintTreasury,\\n        address _signAddress,\\n        address _initialTrustedForwarder,\\n        address _allowedToExecuteMint,\\n        uint256 _maxSupply,\\n        OpenseaRegistryFilterParameters memory _filterParams,\\n        MintingDefaults memory _mintingDefaults\\n    ) internal onlyInitializing {\\n        require(bytes(_initialBaseURI).length != 0, \\\"AvatarCollection: baseURI is not set\\\");\\n        require(bytes(_name).length != 0, \\\"AvatarCollection: name is empty\\\");\\n        require(bytes(_symbol).length != 0, \\\"AvatarCollection: symbol is empty\\\");\\n        require(_signAddress != address(0), \\\"AvatarCollection: sign address is zero address\\\");\\n        require(_initialTrustedForwarder != address(0), \\\"AvatarCollection: trusted forwarder is zero address\\\");\\n        require(_mintTreasury != address(0), \\\"AvatarCollection: treasury is zero address\\\");\\n        require(_isContract(_allowedToExecuteMint), \\\"AvatarCollection: executor address is not a contract\\\");\\n        require(_maxSupply > 0, \\\"AvatarCollection: max supply should be more than 0\\\");\\n\\n        require(_mintingDefaults.mintPrice > 0, \\\"AvatarCollection: public mint price cannot be 0\\\");\\n        require(\\n            _mintingDefaults.maxPublicTokensPerWallet <= _maxSupply &&\\n                _mintingDefaults.maxAllowlistTokensPerWallet <= _maxSupply,\\n            \\\"AvatarCollection: invalid tokens per wallet configuration\\\"\\n        );\\n        require(_mintingDefaults.maxMarketingTokens <= _maxSupply, \\\"AvatarCollection: invalid marketing share\\\");\\n\\n        __ReentrancyGuard_init();\\n        __InitializeAccessControl(_collectionOwner); // owner is also initialized here\\n        __ERC2771Handler_initialize(_initialTrustedForwarder);\\n        __Pausable_init();\\n        __ERC721_init(_name, _symbol);\\n        __UpdatableOperatorFiltererUpgradeable_init(\\n            _filterParams.registry,\\n            _filterParams.operatorFiltererSubscription,\\n            _filterParams.operatorFiltererSubscriptionSubscribe\\n        );\\n\\n        baseTokenURI = _initialBaseURI;\\n        mintTreasury = _mintTreasury;\\n        signAddress = _signAddress;\\n        allowedToExecuteMint = _allowedToExecuteMint;\\n        maxSupply = _maxSupply;\\n        mintingDefaults = _mintingDefaults;\\n\\n        emit DefaultMintingValuesSet(\\n            _mintingDefaults.mintPrice,\\n            _mintingDefaults.maxPublicTokensPerWallet,\\n            _mintingDefaults.maxAllowlistTokensPerWallet,\\n            _mintingDefaults.maxMarketingTokens\\n        );\\n\\n        emit ContractInitialized(\\n            _initialBaseURI,\\n            _name,\\n            _symbol,\\n            _mintTreasury,\\n            _signAddress,\\n            _allowedToExecuteMint,\\n            _maxSupply,\\n            _filterParams.registry,\\n            _filterParams.operatorFiltererSubscription,\\n            _filterParams.operatorFiltererSubscriptionSubscribe\\n        );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    External and public functions\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice function to setup wave parameters. A wave is defined as a combination of allowed number tokens to be\\n     *         minted in total, per wallet and minting price\\n     * @custom:event {WaveSetup}\\n     * @param _waveMaxTokensOverall the allowed number of tokens to be minted in this wave (cumulative by all minting wallets)\\n     * @param _waveMaxTokensPerWallet max tokens to buy, per wallet in a given wave\\n     * @param _waveSingleTokenPrice the price to mint a token in a given wave, in wei\\n     *                              denoted by the allowedToExecuteMint contract\\n     */\\n    function setupWave(\\n        uint256 _waveMaxTokensOverall,\\n        uint256 _waveMaxTokensPerWallet,\\n        uint256 _waveSingleTokenPrice\\n    ) external authorizedRole(CONFIGURATOR_ROLE) {\\n        require(_waveMaxTokensOverall <= maxSupply, \\\"AvatarCollection: _waveMaxTokens exceeds maxSupply\\\");\\n        require(_waveMaxTokensOverall > 0, \\\"AvatarCollection: max tokens to mint is 0\\\");\\n        require(_waveMaxTokensPerWallet > 0, \\\"AvatarCollection: max tokens to mint per wallet is 0\\\");\\n        require(_waveMaxTokensPerWallet <= _waveMaxTokensOverall, \\\"AvatarCollection: invalid supply configuration\\\");\\n\\n        waveMaxTokensOverall = _waveMaxTokensOverall;\\n        waveMaxTokensPerWallet = _waveMaxTokensPerWallet;\\n        waveSingleTokenPrice = _waveSingleTokenPrice;\\n        waveTotalMinted = 0;\\n        indexWave++;\\n\\n        emit WaveSetup(_waveMaxTokensOverall, _waveMaxTokensPerWallet, _waveSingleTokenPrice);\\n    }\\n\\n    /**\\n     * @notice helper function to set all token configs to that of the marketing minting phase.\\n     *         Can be called by owner or specially designated role, CONFIGURATOR.\\n     *         Uses default values set on contract initialization\\n     * @dev reverts if not authorized\\n     * @custom:event {WaveSetup}\\n     */\\n    function setMarketingMint() external authorizedRole(CONFIGURATOR_ROLE) {\\n        waveMaxTokensOverall = mintingDefaults.maxMarketingTokens;\\n        waveMaxTokensPerWallet = mintingDefaults.maxMarketingTokens;\\n        waveSingleTokenPrice = 0;\\n        waveTotalMinted = 0;\\n        indexWave++;\\n\\n        emit WaveSetup(waveMaxTokensOverall, waveMaxTokensPerWallet, 0);\\n    }\\n\\n    /**\\n     * @notice helper function to set all token configs to that of the allowlist minting phase.\\n     *         Can be called by owner or specially designated role, CONFIGURATOR.\\n     *         Uses default values set on contract initialization\\n     * @dev reverts if not authorized\\n     * @custom:event {WaveSetup}\\n     */\\n    function setAllowlistMint() external authorizedRole(CONFIGURATOR_ROLE) {\\n        waveMaxTokensOverall = maxSupply - totalSupply();\\n        waveMaxTokensPerWallet = mintingDefaults.maxAllowlistTokensPerWallet;\\n        waveSingleTokenPrice = mintingDefaults.mintPrice;\\n        waveTotalMinted = 0;\\n        indexWave++;\\n\\n        emit WaveSetup(waveMaxTokensOverall, waveMaxTokensPerWallet, waveSingleTokenPrice);\\n    }\\n\\n    /**\\n     * @notice helper function to set all token configs to that of the public minting phase.\\n     *         Can be called by owner or specially designated role, CONFIGURATOR.\\n     *         Uses default values set on contract initialization\\n     * @dev reverts if not authorized\\n     * @custom:event {WaveSetup}\\n     */\\n    function setPublicMint() external authorizedRole(CONFIGURATOR_ROLE) {\\n        waveMaxTokensOverall = maxSupply - totalSupply();\\n        waveMaxTokensPerWallet = mintingDefaults.maxPublicTokensPerWallet;\\n        waveSingleTokenPrice = mintingDefaults.mintPrice;\\n        waveTotalMinted = 0;\\n        indexWave++;\\n\\n        emit WaveSetup(waveMaxTokensOverall, waveMaxTokensPerWallet, waveSingleTokenPrice);\\n    }\\n\\n    /**\\n     * @notice token minting function. Price is set by wave and is paid in tokens denoted\\n     *         by the allowedToExecuteMint contract\\n     * @custom:event {Transfer}\\n     * @param _wallet minting wallet\\n     * @param _amount number of token to mint\\n     * @param _signatureId signing signature ID\\n     * @param _signature signing signature value\\n     */\\n    function mint(\\n        address _wallet,\\n        uint256 _amount,\\n        uint256 _signatureId,\\n        bytes memory _signature\\n    ) external whenNotPaused nonReentrant {\\n        require(indexWave > 0, \\\"AvatarCollection: contract is not configured\\\");\\n        require(_msgSender() == allowedToExecuteMint, \\\"AvatarCollection: caller is not allowed\\\");\\n        require(_wallet != address(0), \\\"AvatarCollection: wallet is zero address\\\");\\n        require(_amount > 0, \\\"AvatarCollection: amount cannot be 0\\\");\\n\\n        _checkAndSetSignature({_address: _wallet, _signatureId: _signatureId, _signature: _signature});\\n\\n        require(_checkWaveNotComplete(_amount), \\\"AvatarCollection: wave completed\\\");\\n        require(_checkLimitNotReached(_wallet, _amount), \\\"AvatarCollection: max allowed\\\");\\n\\n        uint256 _price = price(_amount);\\n        if (_price > 0) {\\n            SafeERC20.safeTransferFrom(IERC20(_msgSender()), _wallet, mintTreasury, _price);\\n        }\\n\\n        waveOwnerToClaimedCounts[_wallet][indexWave - 1] += _amount;\\n\\n        waveTotalMinted += _amount;\\n\\n        for (uint256 i; i < _amount; ) {\\n            _safeMint(_wallet, _getRandomToken(_wallet, totalSupply()));\\n\\n            unchecked {++i;}\\n        }\\n    }\\n\\n    /**\\n     * @notice helper function to emit the {MetadataUpdate} event in order for marketplaces to, on demand,\\n     *         refresh metadata, for the provided token ID. Off-chain, gaming mechanics are done and this\\n     *         function is ultimately called to signal the end of a reveal.\\n     * @dev will revert if owner of token is not caller or if signature is not valid\\n     * @custom:event {MetadataUpdate}\\n     * @param _tokenId the ID belonging to the NFT token for which to emit the event\\n     * @param _signatureId validation signature ID\\n     * @param _signature validation signature\\n     */\\n    function reveal(\\n        uint256 _tokenId,\\n        uint256 _signatureId,\\n        bytes memory _signature\\n    ) external whenNotPaused {\\n        address sender = _msgSender();\\n        require(ownerOf(_tokenId) == sender, \\\"AvatarCollection: sender is not owner\\\");\\n\\n        _checkAndSetSignature({_address: sender, _signatureId: _signatureId, _signature: _signature});\\n\\n        emit MetadataUpdate(_tokenId);\\n    }\\n\\n    /**\\n     * @notice pauses the contract\\n     * @dev reverts if not owner of the collection or if not un-paused\\n     */\\n    function pause() external onlyOwner {\\n        super._pause();\\n    }\\n\\n    /**\\n     * @notice unpauses the contract\\n     * @dev reverts if not owner of the collection or if not paused\\n     */\\n    function unpause() external onlyOwner {\\n        super._unpause();\\n    }\\n\\n    /**\\n     * @notice personalize token traits according to the provided personalization bit-mask\\n     * @dev after checks, it is reduced to personalizationTraits[_tokenId] = _personalizationMask\\n     * @custom:event {Personalized}\\n     * @custom:event {MetadataUpdate}\\n     * @param _signatureId the ID of the provided signature\\n     * @param _signature signing signature\\n     * @param _tokenId what token to personalize\\n     * @param _personalizationMask a mask where each bit has a custom meaning in-game\\n     */\\n    function personalize(\\n        uint256 _signatureId,\\n        bytes memory _signature,\\n        uint256 _tokenId,\\n        uint256 _personalizationMask\\n    ) external whenNotPaused {\\n        require(ownerOf(_tokenId) == _msgSender(), \\\"AvatarCollection: sender is not owner\\\");\\n\\n        require(_signatureIds[_signatureId] == 0, \\\"AvatarCollection: signatureId already used\\\");\\n        require(\\n            _checkPersonalizationSignature(\\n                _msgSender(),\\n                _signatureId,\\n                address(this),\\n                block.chainid,\\n                _tokenId,\\n                _personalizationMask,\\n                _signature\\n            ) == signAddress,\\n            \\\"AvatarCollection: signature check failed\\\"\\n        );\\n\\n        _signatureIds[_signatureId] = 1;\\n\\n        _updateTokenTraits(_tokenId, _personalizationMask);\\n    }\\n\\n    /**\\n     * @notice personalize token traits but can be called by owner or special roles address\\n     *         Used to change the traits of a token based on an in-game action\\n     * @dev reverts if token does not exist or if not authorized\\n     * @custom:event {Personalized}\\n     * @custom:event {MetadataUpdate}\\n     * @param _tokenId what token to personalize\\n     * @param _personalizationMask a mask where each bit has a custom meaning in-game\\n     */\\n    function operatorPersonalize(uint256 _tokenId, uint256 _personalizationMask)\\n        external\\n        authorizedRole(TRANSFORMER_ROLE)\\n    {\\n        require(_exists(_tokenId), \\\"AvatarCollection: invalid token ID\\\");\\n\\n        _updateTokenTraits(_tokenId, _personalizationMask);\\n    }\\n\\n    /**\\n     * @notice Burns `tokenId`. The caller must own `tokenId` or be an approved operator.\\n     * @dev See {ERC721BurnMemoryEnumerableUpgradeable.burn}.\\n     *      Inherited in order to add the whenNotPaused modifier\\n     * @custom:event TokenBurned\\n     * @param tokenId the token id to be burned\\n     */\\n    function burn(uint256 tokenId) public override whenNotPaused {\\n        super.burn(tokenId);\\n    }\\n\\n    /**\\n     * @notice enables burning of tokens\\n     * @dev reverts if burning already enabled.\\n     *      Inherited in order to add the onlyOwner modifier\\n     * @custom:event TokenBurningEnabled\\n     */\\n    function enableBurning() public override onlyOwner {\\n        super.enableBurning();\\n    }\\n\\n    /**\\n     * @notice disables burning of tokens\\n     * @dev reverts if burning already disabled.\\n     *      Inherited in order to add the onlyOwner modifier\\n     * @custom:event TokenBurningDisabled\\n     */\\n    function disableBurning() public override onlyOwner {\\n        super.disableBurning();\\n    }\\n\\n    /**\\n     * @notice saving locally the treasury address\\n     * @dev sets mintTreasury = _treasury\\n     * @custom:event {TreasurySet}\\n     * @param _treasury new treasury address to be saved\\n     */\\n    function setTreasury(address _treasury) external onlyOwner {\\n        require(_treasury != address(0), \\\"AvatarCollection: owner is zero address\\\");\\n        mintTreasury = _treasury;\\n        emit TreasurySet(_treasury);\\n    }\\n\\n    /**\\n     * @notice sets the sign address. Emits {SignAddressSet} event\\n     * @dev sets signAddress = _signAddress; address can't be 0\\n     * @custom:event {SignAddressSet}\\n     * @param _signAddress new signer address to be set\\n     */\\n    function setSignAddress(address _signAddress) external onlyOwner {\\n        require(_signAddress != address(0), \\\"AvatarCollection: sign address is zero address\\\");\\n        signAddress = _signAddress;\\n        emit SignAddressSet(_signAddress);\\n    }\\n\\n    /**\\n     * @notice sets which address is allowed to execute the mint function. Also resets default mint price\\n     * @dev sets allowedToExecuteMint = _address; address must belong to a contract or reverts\\n     * @custom:event {AllowedExecuteMintSet}\\n     * @custom:event {DefaultMintingValuesSet}\\n     * @param _minterToken the address that will be allowed to execute the mint function\\n     */\\n    function setAllowedExecuteMint(address _minterToken) external onlyOwner {\\n        require(_isContract(_minterToken), \\\"AvatarCollection: executor address is not a contract\\\");\\n        allowedToExecuteMint = _minterToken;\\n        mintingDefaults.mintPrice = DEFAULT_MINT_PRICE_FULL * 10**IERC20Metadata(_minterToken).decimals();\\n\\n        emit DefaultMintingValuesSet(\\n            mintingDefaults.mintPrice,\\n            mintingDefaults.maxPublicTokensPerWallet,\\n            mintingDefaults.maxAllowlistTokensPerWallet,\\n            mintingDefaults.maxMarketingTokens\\n        );\\n        emit AllowedExecuteMintSet(_minterToken);\\n    }\\n\\n    /**\\n     * @notice sets the base token URI for the contract\\n     * @dev sets baseTokenURI = baseURI\\n     * @custom:event {BaseURISet}\\n     * @param baseURI an URI that will be used as the base for token URI\\n     */\\n    function setBaseURI(string memory baseURI) external authorizedRole(CONFIGURATOR_ROLE) {\\n        require(bytes(baseURI).length != 0, \\\"AvatarCollection: baseURI is not set\\\");\\n        baseTokenURI = baseURI;\\n        emit BaseURISet(baseURI);\\n\\n        // Refreshes the whole collection (https://docs.opensea.io/docs/metadata-standards#metadata-updates)\\n        emit MetadataUpdate(type(uint256).max);\\n    }\\n\\n    /**\\n     * @notice get the personalization of the indicated tokenID\\n     * @dev returns personalizationTraits[_tokenId]\\n     * @param _tokenId the token ID to check\\n     * @return the personalization data as uint256\\n     */\\n    function personalizationOf(uint256 _tokenId) external view returns (uint256) {\\n        return personalizationTraits[_tokenId];\\n    }\\n\\n    /**\\n     * @notice check if the indicated wallet can mint the indicated amount\\n     * @param _wallet wallet to be checked if it can mint\\n     * @param _amount amount to be checked if can be minted\\n     * @return if can mint or not\\n     */\\n    function checkMintAllowed(address _wallet, uint256 _amount) external view returns (bool) {\\n        return _checkWaveNotComplete(_amount) && _checkLimitNotReached(_wallet, _amount);\\n    }\\n\\n    /**\\n     * @notice get the price of minting the indicated number of tokens for the current wave\\n     * @dev returns waveSingleTokenPrice * _count; Does not check if it is possible\\n     *      to actually mint that much\\n     * @param _count the number of tokens to estimate mint price for\\n     * @return price of minting all the tokens\\n     */\\n    function price(uint256 _count) public view virtual returns (uint256) {\\n        return waveSingleTokenPrice * _count;\\n    }\\n\\n    /**\\n     * @notice helper automation function\\n     * @dev returns block.chainid\\n     * @return current chainID for the blockchain\\n     */\\n    function chain() external view returns (uint256) {\\n        return block.chainid;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC721EnumerableUpgradeable, AccessControlUpgradeable)\\n        returns (bool)\\n    {\\n        return interfaceId == type(AccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @notice returns the owner of the contract\\n     * @dev returns OwnableUpgradeable.owner()\\n     * @return owner of current contract\\n     */\\n    function owner() public view override(OwnableUpgradeable, UpdatableOperatorFiltererUpgradeable) returns (address) {\\n        return OwnableUpgradeable.owner();\\n    }\\n\\n    /**\\n     * @dev See OpenZeppelin {IERC721-setApprovalForAll}\\n     */\\n    function setApprovalForAll(address operator, bool approved)\\n        public\\n        override(ERC721Upgradeable, IERC721Upgradeable)\\n        onlyAllowedOperatorApproval(operator)\\n    {\\n        super.setApprovalForAll(operator, approved);\\n    }\\n\\n    /**\\n     * @dev See OpenZeppelin {IERC721-approve}\\n     */\\n    function approve(address operator, uint256 tokenId)\\n        public\\n        override(ERC721Upgradeable, IERC721Upgradeable)\\n        onlyAllowedOperatorApproval(operator)\\n    {\\n        super.approve(operator, tokenId);\\n    }\\n\\n    /**\\n     * @dev See OpenZeppelin {IERC721-transferFrom}\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public override(ERC721Upgradeable, IERC721Upgradeable) onlyAllowedOperator(from) {\\n        super.transferFrom(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See OpenZeppelin {IERC721-safeTransferFrom}\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public override(ERC721Upgradeable, IERC721Upgradeable) onlyAllowedOperator(from) {\\n        super.safeTransferFrom(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See OpenZeppelin {IERC721-safeTransferFrom}\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public override(ERC721Upgradeable, IERC721Upgradeable) onlyAllowedOperator(from) {\\n        super.safeTransferFrom(from, to, tokenId, data);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    Internal and private functions\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice get base TokenURI\\n     * @dev returns baseTokenURI\\n     * @return baseTokenURI\\n     */\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return baseTokenURI;\\n    }\\n\\n    /**\\n     * @notice ERC2771 compatible msg.data getter\\n     * @dev returns ERC2771HandlerUpgradeable._msgData()\\n     * @return msg.data\\n     */\\n    function _msgData() internal view override(ContextUpgradeable, ERC2771HandlerUpgradeable) returns (bytes calldata) {\\n        return ERC2771HandlerUpgradeable._msgData();\\n    }\\n\\n    /**\\n     * @notice ERC2771 compatible msg.sender getter\\n     * @dev returns ERC2771HandlerUpgradeable._msgSender()\\n     * @return sender msg.sender\\n     */\\n    function _msgSender()\\n        internal\\n        view\\n        override(ContextUpgradeable, ERC2771HandlerUpgradeable)\\n        returns (address sender)\\n    {\\n        sender = ERC2771HandlerUpgradeable._msgSender();\\n    }\\n\\n    /**\\n     * @notice checks that the provided signature is valid, while also taking into\\n     *         consideration the provided address and signatureId\\n     * @param _address address to be used in validating the signature\\n     * @param _signatureId signing signature ID\\n     * @param _signature signing signature value\\n     */\\n    function _checkAndSetSignature(\\n        address _address,\\n        uint256 _signatureId,\\n        bytes memory _signature\\n    ) internal {\\n        require(_signatureIds[_signatureId] == 0, \\\"AvatarCollection: signatureId already used\\\");\\n        require(\\n            _checkSignature(_address, _signatureId, address(this), block.chainid, _signature) == signAddress,\\n            \\\"AvatarCollection: signature failed\\\"\\n        );\\n        _signatureIds[_signatureId] = 1;\\n    }\\n\\n    /**\\n     * @notice validates signature\\n     * @dev uses ECDSA.recover on the provided params\\n     * @param _wallet wallet that was used in signature generation\\n     * @param _signatureId id of signature\\n     * @param _contractAddress contract address that was used in signature generation\\n     * @param _chainId chain ID for which the signature was generated\\n     * @param _signature signature\\n     * @return address that validates the provided signature\\n     */\\n    function _checkSignature(\\n        address _wallet,\\n        uint256 _signatureId,\\n        address _contractAddress,\\n        uint256 _chainId,\\n        bytes memory _signature\\n    ) internal pure returns (address) {\\n        return\\n            ECDSA.recover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                        keccak256(abi.encode(_wallet, _signatureId, _contractAddress, _chainId))\\n                    )\\n                ),\\n                _signature\\n            );\\n    }\\n\\n    /**\\n     * @notice validate personalization mask\\n     * @dev uses ECDSA.recover on the provided params\\n     * @param _wallet wallet that was used in signature generation\\n     * @param _signatureId id of signature\\n     * @param _contractAddress contract address that was used in signature generation\\n     * @param _chainId chain ID for which the signature was generated\\n     * @param _tokenId token ID for which the signature was generated\\n     * @param _personalizationMask a mask where each bit has a custom meaning in-game\\n     * @param _signature signature\\n     * @return address that validates the provided signature\\n     */\\n    function _checkPersonalizationSignature(\\n        address _wallet,\\n        uint256 _signatureId,\\n        address _contractAddress,\\n        uint256 _chainId,\\n        uint256 _tokenId,\\n        uint256 _personalizationMask,\\n        bytes memory _signature\\n    ) internal pure returns (address) {\\n        return\\n            ECDSA.recover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                        keccak256(\\n                            abi.encode(\\n                                _wallet,\\n                                _signatureId,\\n                                _contractAddress,\\n                                _chainId,\\n                                _tokenId,\\n                                _personalizationMask\\n                            )\\n                        )\\n                    )\\n                ),\\n                _signature\\n            );\\n    }\\n\\n    /**\\n     * @notice check if the current wave can still mint the indicated amount\\n     * @param _amount number of tokens to check if can be minted\\n     * @return if wave can mint the indicated amount\\n     */\\n    function _checkWaveNotComplete(uint256 _amount) internal view returns (bool) {\\n        return _amount > 0 && waveTotalMinted + _amount <= waveMaxTokensOverall;\\n    }\\n\\n    /**\\n     * @notice checks if current contract limits are respected if minting the indicated amount\\n     * @param _wallet minting wallet, whose restrictions will be considered\\n     * @param _amount number of tokens to mint\\n     * @return if amount can be safely minted\\n     */\\n    function _checkLimitNotReached(address _wallet, uint256 _amount) internal view returns (bool) {\\n        return\\n            waveOwnerToClaimedCounts[_wallet][indexWave - 1] + _amount <= waveMaxTokensPerWallet &&\\n            totalSupply() + _amount <= maxSupply;\\n    }\\n\\n    /**\\n     * @notice actually updates the variables that store the personalization traits per token.\\n     * @dev no checks are done on input validations. Calling functions are expected to do them\\n     * @custom:event {Personalized}\\n     * @custom:event {MetadataUpdate}\\n     * @param _tokenId the ID for the token to personalize\\n     * @param _personalizationMask the personalization mask that will be applied\\n     */\\n    function _updateTokenTraits(uint256 _tokenId, uint256 _personalizationMask) internal {\\n        personalizationTraits[_tokenId] = _personalizationMask;\\n\\n        emit Personalized(_tokenId, _personalizationMask);\\n        emit MetadataUpdate(_tokenId);\\n    }\\n\\n    /**\\n     * @notice Pseudo-random number function. Good enough for our need, thx CyberKongs VX <3!\\n     * @dev pseudo-random implementation using keccak256 over various parameters.\\n     *      This function does not provide true randomness, it is pseudo-random. A determined attacker\\n     *      can identify what token ID will be generated but this has no impact as we shuffle metadata\\n     *      off-chain before any minting.\\n     * @param _wallet the calling account address\\n     * @param _totalSupply total amount of tokens stored by the contract up until this point.\\n     * @return pseudo-random value\\n     */\\n    function _getRandomToken(address _wallet, uint256 _totalSupply) private returns (uint256) {\\n        uint256 remaining = maxSupply - _totalSupply;\\n        uint256 rand =\\n            uint256(keccak256(abi.encodePacked(_wallet, block.difficulty, block.timestamp, remaining))) % remaining;\\n        uint256 value = rand;\\n\\n        if (_availableIds[rand] != 0) {\\n            value = _availableIds[rand];\\n        }\\n\\n        if (_availableIds[remaining - 1] == 0) {\\n            _availableIds[rand] = remaining - 1;\\n        } else {\\n            _availableIds[rand] = _availableIds[remaining - 1];\\n        }\\n\\n        return value;\\n    }\\n\\n    /**\\n     * @notice verifies it the provided address is a smart contract (by code size)\\n     * @dev can be bypassed if called from contract constructors\\n     * @param account account address to verify if it is a contract\\n     */\\n    function _isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * Empty storage space in contracts for future enhancements\\n     * ref: https://github.com/OpenZeppelin/<at>openzeppelin/contracts-upgradeable/issues/13\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x242c13ce00e3d2cb3ef917a2e6e5db31fc1fe84582d8a8341df44324b727b0a8\",\"license\":\"MIT\"},\"src/solc_0.8.15/avatar/CollectionAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport {AccessControlUpgradeable} from \\\"@openzeppelin/contracts-upgradeable-0.8.13/access/AccessControlUpgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable-0.8.13/access/OwnableUpgradeable.sol\\\";\\n\\n/**\\n * @title CollectionAccessControl\\n * @author qed.team x The Sandbox\\n * @notice Access control functionality for avatar collections.\\n *\\n * We wanted an access control functionality that:\\n *   - has owner\\n *   - 2 step owner transfer\\n *   - allows roles\\n *   - only owner can add users to roles\\n *   - transferring owner does not break the above invariants\\n *\\n *   Some functionality was taken directly from Ownable2StepUpgradeable:\\n *   - exactly as they were:\\n *       - _pendingOwner variable\\n *       - OwnershipTransferStarted event\\n *       - pendingOwner\\n *       - transferOwnership\\n *       - _transferOwnership\\n *   - slightly modified\\n *       - acceptOwnership\\n *           - to also transfer roles before changing ownership\\n *\\n *   We could not inherit Ownable2StepUpgradeable directly because:\\n *   - Ownable2StepUpgradeable.acceptOwnership() is not declared virtual\\n */\\nabstract contract CollectionAccessControl is AccessControlUpgradeable, OwnableUpgradeable {\\n    /*//////////////////////////////////////////////////////////////\\n                           Global state variables\\n    //////////////////////////////////////////////////////////////*/\\n    /**\\n     * @notice identifier for the ADMIN role. This role is only given to the owner of the contract\\n     *         and allows for adding other addresses to the CONFIGURATOR and TRANSFORMER role\\n     * @dev keccak256(\\\"ADMIN_ROLE\\\");\\n     */\\n    bytes32 public constant ADMIN_ROLE = 0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775;\\n\\n    /**\\n     * @notice identifier for the CONFIGURATOR role. Owners of this role can call configuration specific\\n     *         functions on the avatar contract, including setting base URI and changing minting phase\\n     * @dev keccak256(\\\"CONFIGURATOR_ROLE\\\")\\n     */\\n    bytes32 public constant CONFIGURATOR_ROLE = 0x3b49a237fe2d18fa4d9642b8a0e065923cceb71b797783b619a030a61d848bf0;\\n\\n    /**\\n     * @notice identifier for the CONFIGURATOR role. Owners of this role can personalization specific functions\\n     *         on the avatar contract.\\n     * @dev keccak256(\\\"TRANSFORMER_ROLE\\\")\\n     */\\n    bytes32 public constant TRANSFORMER_ROLE = 0x69fc995a7cdbc94c95dc768dfaa8ceead6003727063f7d665556608319262298;\\n\\n    /// @dev temporary storage variable for when saving the future-owner in a 2 step ownership transfer routine\\n    address private _pendingOwner;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                Events\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice event emitted when the ownership transfer routine has been started\\n     * @dev emitted when calling transferOwnership\\n     * @param previousOwner the previous owner of the contract\\n     * @param newOwner the new owner of the contract\\n     */\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                Modifiers\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice modifier used to check if the sender has been granted the specific role\\n     *         or if it is the owner that called\\n     * @param role the role to check for\\n     */\\n    modifier authorizedRole(bytes32 role) {\\n        address sender = _msgSender();\\n        require(hasRole(role, sender) || owner() == sender, \\\"CollectionAccessControl: sender not authorized\\\");\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            Initializers\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice initializes the access control logic for the collection.\\n     *         Sets owner as ADMIN role (only him) and gives the owner/ADMIN role admin over the\\n     *         other roles, CONFIGURATOR and TRANSFORMER\\n     * @param owner_ the owner of the contract, that will be set\\n     */\\n    function __InitializeAccessControl(address owner_) internal initializer {\\n        require(owner_ != address(0), \\\"CollectionAccessControl: new owner is the zero address\\\");\\n\\n        __AccessControl_init();\\n\\n        _transferOwnership(owner_);\\n        _grantRole(ADMIN_ROLE, owner_);\\n\\n        // makes ADMIN_ROLE role holders be able to modify/configure the other roles\\n        _setRoleAdmin(CONFIGURATOR_ROLE, ADMIN_ROLE);\\n        _setRoleAdmin(TRANSFORMER_ROLE, ADMIN_ROLE);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    External and public functions\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice helper function to grant the CONFIGURATOR role to an address\\n     * @dev reverts if account is zero address or not called by owner\\n     * @param account the address that which will be given the specified role role\\n     */\\n    function addConfigurator(address account) external onlyOwner {\\n        require(account != address(0), \\\"CollectionAccessControl: account is zero address\\\");\\n        super.grantRole(CONFIGURATOR_ROLE, account);\\n    }\\n\\n    /**\\n     * @notice helper function to revert the CONFIGURATOR role that was given to an address\\n     * @dev reverts if account is zero address or not called by owner\\n     * @param account the account address for which the role to be revoked\\n     */\\n    function revokeConfiguratorRole(address account) external onlyOwner {\\n        require(account != address(0), \\\"CollectionAccessControl: account is zero address\\\");\\n        super.revokeRole(CONFIGURATOR_ROLE, account);\\n    }\\n\\n    /**\\n     * @notice helper function to grant the TRANSFORMER role to an address\\n     * @dev reverts if account is zero address or not called by owner\\n     * @param account the address that which will be given the specified role role\\n     */\\n    function addTransformer(address account) external onlyOwner {\\n        require(account != address(0), \\\"CollectionAccessControl: account is zero address\\\");\\n        super.grantRole(TRANSFORMER_ROLE, account);\\n    }\\n\\n    /**\\n     * @notice helper function to revert the TRANSFORMER role that was given to an address\\n     * @dev reverts if account is zero address or not called by owner\\n     * @param account the account address for which the role to be revoked\\n     */\\n    function revokeTransformerRole(address account) external onlyOwner {\\n        require(account != address(0), \\\"CollectionAccessControl: account is zero address\\\");\\n        super.revokeRole(TRANSFORMER_ROLE, account);\\n    }\\n\\n    /**\\n     * @notice second part of a 2 step ownership transfer routine.\\n     *         Also transfers the ADMIN_ROLE as there can only be 1 ADMIN_ROLE\\n     * @dev reverts if sender not new pending owner\\n     */\\n    function acceptOwnership() external {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"CollectionAccessControl: caller is not the new owner\\\");\\n\\n        super.revokeRole(ADMIN_ROLE, owner());\\n        super.grantRole(ADMIN_ROLE, sender);\\n\\n        _transferOwnership(sender);\\n    }\\n\\n    /**\\n     * @notice renounce ownership function, made to revert as a failsafe\\n     */\\n    function renounceOwnership() public virtual override onlyOwner {\\n        revert(\\\"CollectionAccessControl: Renounce ownership is not available\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n        Functions copied directly from Ownable2StepUpgradeable\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    Internal and private functions\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xdf04b26a243a8470b5f1b37f60353be35e74a842dfa3ab769223d800ded3780d\",\"license\":\"MIT\"},\"src/solc_0.8.15/avatar/ERC721BurnMemoryEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport {\\n    ERC721EnumerableUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable-0.8.13/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\\\";\\n\\n/**\\n * @title ERC721BurnMemoryEnumerableUpgradeable\\n * @author qed.team x The Sandbox\\n * @notice Baseline ERC721 contract to be used by the AvatarCollection contract\\n * - provides the \\\"burn memory\\\" functionality:\\n *     - keeping track of who burned what token for faster in-game gating checks\\n */\\ncontract ERC721BurnMemoryEnumerableUpgradeable is ERC721EnumerableUpgradeable {\\n    /*//////////////////////////////////////////////////////////////\\n                           Global state variables\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice tokenId to burner mapping; saves who burned a specific token\\n    mapping(uint256 => address) public burner;\\n\\n    /// @notice burner to list of burned tokens mapping; to see what tokens who burned\\n    mapping(address => uint256[]) public burnedTokens;\\n\\n    /// @notice flag that gates burning\\n    bool public isBurnEnabled;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                Events\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice event emitted when a token was burned\\n     * @param tokenId the id of the token that was burned\\n     * @param burner the owner that burned the token\\n     */\\n    event TokenBurned(uint256 indexed tokenId, address indexed burner);\\n\\n    /**\\n     * @notice event emitted when token burning was enabled\\n     */\\n    event TokenBurningEnabled();\\n\\n    /**\\n     * @notice event emitted when token burning was disabled\\n     */\\n    event TokenBurningDisabled();\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    External and public functions\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice enables burning of tokens\\n     * @dev must be inherited if access control is to be added\\n     *      reverts if burning already enabled\\n     * @custom:event TokenBurningEnabled\\n     */\\n    function enableBurning() public virtual {\\n        require(!isBurnEnabled, \\\"Burning already enabled\\\");\\n        isBurnEnabled = true;\\n\\n        emit TokenBurningEnabled();\\n    }\\n\\n    /**\\n     * @notice disables burning of tokens\\n     * @dev must be inherited if access control is to be added\\n     *      reverts if burning already disabled\\n     * @custom:event TokenBurningDisabled\\n     */\\n    function disableBurning() public virtual {\\n        require(isBurnEnabled, \\\"Burning already disabled\\\");\\n        isBurnEnabled = false;\\n\\n        emit TokenBurningDisabled();\\n    }\\n\\n    /**\\n     * @notice Burns `tokenId`. The caller must own `tokenId` or be an approved operator.\\n     * @dev See {ERC721EnumerableUpgradeable-_burn}.\\n     *      Reverts if burning is not enabled\\n     * @custom:event TokenBurned\\n     * @param tokenId the token id to be burned\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        require(isBurnEnabled, \\\"Burning is not enabled\\\");\\n        address sender = _msgSender();\\n        require(_isApprovedOrOwner(sender, tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        super._burn(tokenId);\\n        burner[tokenId] = sender;\\n        burnedTokens[sender].push(tokenId);\\n        emit TokenBurned(tokenId, sender);\\n    }\\n\\n    /**\\n     * @notice Returns the burner of the `tokenId`\\n     * @dev Does NOT revert if token was not burned/doesn't exist\\n     * @param tokenId the tokenId to be checked who burned it\\n     * @return the address of who burned the indicated token ID\\n     */\\n    function burnerOf(uint256 tokenId) external view returns (address) {\\n        return burner[tokenId];\\n    }\\n\\n    /**\\n     * @notice Checks if the indicated owner had burned tokens\\n     * @param previousOwner the owner to check for burned tokens\\n     * @return if the address burned any tokens\\n     */\\n    function didBurnTokens(address previousOwner) external view returns (bool) {\\n        return burnedTokens[previousOwner].length != 0;\\n    }\\n\\n    /**\\n     * @notice Gets the number of burned tokens by the indicated owner\\n     * @param previousOwner the owner to check for burned tokens\\n     * @return number of burned tokens by the indicated owner\\n     */\\n    function burnedTokensCount(address previousOwner) external view returns (uint256) {\\n        return burnedTokens[previousOwner].length;\\n    }\\n\\n    /**\\n    Empty storage space in contracts for future enhancements\\n    ref: https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/issues/13\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb9774571c4ad47202818e92db1f285f7cd3b574824bed58860d416d0cf4e8fc3\",\"license\":\"MIT\"},\"src/solc_0.8.15/common/BaseWithStorage/ERC2771/ERC2771HandlerUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.15;\\n\\n/// @dev minimal ERC2771 handler to keep bytecode-size down\\n/// based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.6.0/contracts/metatx/ERC2771Context.sol\\n/// with an initializer for proxies and a mutable forwarder\\n/// @dev same as ERC2771Handler.sol but with gap\\n\\ncontract ERC2771HandlerUpgradeable {\\n    address internal _trustedForwarder;\\n    uint256[49] private __gap;\\n\\n    function __ERC2771Handler_initialize(address forwarder) internal {\\n        _trustedForwarder = forwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function getTrustedForwarder() external view returns (address trustedForwarder) {\\n        return _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x030a45d3f06cfd854854623e3980456a28db9534295b689c7eb5cd17eb91321c\",\"license\":\"MIT\"},\"src/solc_0.8.15/common/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 indexed _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 indexed _fromTokenId, uint256 indexed _toTokenId);\\n}\\n\",\"keccak256\":\"0x5c1466be79926fdb22b403c0816ad503cb4995817ecfb287c283735580b35851\",\"license\":\"MIT\"},\"src/solc_0.8.15/common/OperatorFilterer/IOperatorFilterRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface IOperatorFilterRegistry {\\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\\n\\n    function register(address registrant) external;\\n\\n    function registerAndSubscribe(address registrant, address subscription) external;\\n\\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\\n\\n    function unregister(address addr) external;\\n\\n    function updateOperator(\\n        address registrant,\\n        address operator,\\n        bool filtered\\n    ) external;\\n\\n    function updateOperators(\\n        address registrant,\\n        address[] calldata operators,\\n        bool filtered\\n    ) external;\\n\\n    function updateCodeHash(\\n        address registrant,\\n        bytes32 codehash,\\n        bool filtered\\n    ) external;\\n\\n    function updateCodeHashes(\\n        address registrant,\\n        bytes32[] calldata codeHashes,\\n        bool filtered\\n    ) external;\\n\\n    function subscribe(address registrant, address registrantToSubscribe) external;\\n\\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\\n\\n    function subscriptionOf(address addr) external returns (address registrant);\\n\\n    function subscribers(address registrant) external returns (address[] memory);\\n\\n    function subscriberAt(address registrant, uint256 index) external returns (address);\\n\\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\\n\\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\\n\\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\\n\\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\\n\\n    function filteredOperators(address addr) external returns (address[] memory);\\n\\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\\n\\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\\n\\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\\n\\n    function isRegistered(address addr) external returns (bool);\\n\\n    function codeHashOf(address addr) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf4c2944d52dd8b3dc5598c93bfd05783ea50245832abc2fd4b759ce5f28fb62c\",\"license\":\"MIT\"},\"src/solc_0.8.15/common/OperatorFilterer/UpdatableOperatorFiltererUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable-0.8.13/proxy/utils/Initializable.sol\\\";\\n\\nimport {IOperatorFilterRegistry} from \\\"./IOperatorFilterRegistry.sol\\\";\\n\\nabstract contract UpdatableOperatorFiltererUpgradeable is Initializable {\\n    error OperatorNotAllowed(address operator);\\n    error OnlyOwner();\\n\\n    IOperatorFilterRegistry public operatorFilterRegistry;\\n\\n    function __UpdatableOperatorFiltererUpgradeable_init(\\n        address _registry,\\n        address subscriptionOrRegistrantToCopy,\\n        bool subscribe\\n    ) internal onlyInitializing {\\n        operatorFilterRegistry = IOperatorFilterRegistry(_registry);\\n        // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\\n        // will not revert, but the contract will need to be registered with the registry once it is deployed in\\n        // order for the modifier to filter addresses.\\n        if (address(operatorFilterRegistry).code.length > 0) {\\n            if (subscribe) {\\n                operatorFilterRegistry.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\\n            } else {\\n                if (subscriptionOrRegistrantToCopy != address(0)) {\\n                    operatorFilterRegistry.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\\n                } else {\\n                    operatorFilterRegistry.register(address(this));\\n                }\\n            }\\n        }\\n    }\\n\\n    modifier onlyAllowedOperator(address from) virtual {\\n        // Check registry code length to facilitate testing in environments without a deployed registry.\\n        if (address(operatorFilterRegistry).code.length > 0) {\\n            // Allow spending tokens from addresses with balance\\n            // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\\n            // from an EOA.\\n            if (from == msg.sender) {\\n                _;\\n                return;\\n            }\\n            if (!operatorFilterRegistry.isOperatorAllowed(address(this), msg.sender)) {\\n                revert OperatorNotAllowed(msg.sender);\\n            }\\n        }\\n        _;\\n    }\\n\\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\\n        // Check registry code length to facilitate testing in environments without a deployed registry.\\n        if (address(operatorFilterRegistry).code.length > 0) {\\n            if (!operatorFilterRegistry.isOperatorAllowed(address(this), operator)) {\\n                revert OperatorNotAllowed(operator);\\n            }\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Update the address that the contract will make OperatorFilter checks against. When set to the zero\\n     *         address, checks will be bypassed. OnlyOwner.\\n     */\\n    function updateOperatorFilterRegistryAddress(address newRegistry) public virtual {\\n        if (msg.sender != owner()) {\\n            revert OnlyOwner();\\n        }\\n        operatorFilterRegistry = IOperatorFilterRegistry(newRegistry);\\n    }\\n\\n    /**\\n     * @dev assume the contract has an owner, but leave specific Ownable implementation up to inheriting contract\\n     */\\n    function owner() public view virtual returns (address);\\n}\\n\",\"keccak256\":\"0x31f310117603da2353f567909118464f08a32703ce32111fb30a6f61ba1ceccf\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061048b5760003560e01c80637581a8e611610262578063a90fe86111610151578063d547741f116100ce578063e30c397811610092578063e30c397814610a61578063e3e3506214610a72578063e985e9c514610a86578063ef92539c14610ac3578063f0f4426014610acb578063f2fde38b14610ade57600080fd5b8063d547741f14610a14578063d547cfb714610a27578063d5abeb0114610a2f578063d5d1713f14610a39578063d853015e14610a4c57600080fd5b8063be4ca0cc11610115578063be4ca0cc146109b5578063c763e5a1146109bf578063c87b56dd146109c5578063ca0df4a1146109d8578063ce1b815f14610a0257600080fd5b8063a90fe86114610954578063ac3149e314610967578063b0ccc31e1461097b578063b88d4fde1461098f578063b8d1e532146109a257600080fd5b806390c5c56d116101df57806398603cca116101a357806398603cca146109145780639ea25d7a1461091c578063a217fddf14610926578063a22cb4651461092e578063a6e3ec261461094157600080fd5b806390c5c56d1461089957806391d14854146108c5578063955a53f5146108d857806395d89b41146108eb57806397944ba2146108f357600080fd5b806383bab8a71161022657806383bab8a71461081d5780638456cb59146108575780638c495efb1461085f5780638da5cb5b146108675780638deeed421461086f57600080fd5b80637581a8e6146107d257806375b238fc146107da57806379ba5097146107ef5780637a266db0146107f757806382bc78771461080a57600080fd5b806336568abe1161037e5780635775363c116102fb57806368d4a778116102bf57806368d4a7781461076357806370a082311461078f57806370edac76146107a2578063715018a6146107b7578063731133e9146107bf57600080fd5b80635775363c146106f65780635c975abb146107095780636352211e1461071c578063671b2a311461072f578063677ec90f1461074257600080fd5b8063433ad10611610342578063433ad1061461069b578063442a64b6146106a55780634f6ccce7146106ad57806355f804b3146106c0578063572b6c05146106d357600080fd5b806336568abe146106505780633e84aa5e146106635780633f4ba83a1461066d57806342842e0e1461067557806342966c681461068857600080fd5b806318160ddd1161040c57806326a49e37116103d057806326a49e37146105fa578063283ca77c1461060d5780632f2ff15d146106205780632f745c591461063357806334b35ac01461064657600080fd5b806318160ddd146105955780631992c3f31461059e57806322b56a68146105b157806323b872dd146105c4578063248a9ca3146105d757600080fd5b806307ebec271161045357806307ebec2714610524578063081812fc14610532578063095ea7b31461054557806311db8d1b14610558578063151370451461058257600080fd5b806301ffc9a714610490578063023ba7c3146104b857806302456aa2146104d95780630682bdbc146104e357806306fdde031461050f575b600080fd5b6104a361049e36600461509f565b610af1565b60405190151581526020015b60405180910390f35b6104cb6104c63660046150e1565b610b1c565b6040519081526020016104af565b6104e1610b4e565b005b610207546104f7906001600160a01b031681565b6040516001600160a01b0390911681526020016104af565b610517610c36565b6040516104af9190615165565b610162546104a39060ff1681565b6104f7610540366004615178565b610cc8565b6104e16105533660046150e1565b610cf0565b6104f7610566366004615178565b610160602052600090815260409020546001600160a01b031681565b6104e1610590366004615191565b610db1565b610130546104cb565b6104e16105ac3660046151ae565b610e2a565b6104e16105bf366004615191565b611096565b6104e16105d23660046151da565b6110df565b6104cb6105e5366004615178565b60009081526097602052604090206001015490565b6104cb610608366004615178565b6111b7565b6104a361061b3660046150e1565b6111c8565b6104e161062e36600461521b565b6111eb565b6104cb6106413660046150e1565b611210565b6104cb6102015481565b6104e161065e36600461521b565b6112a7565b6104cb6101ff5481565b6104e1611335565b6104e16106833660046151da565b611347565b6104e1610696366004615178565b611414565b6104cb6101fe5481565b6104e1611425565b6104cb6106bb366004615178565b6114f3565b6104e16106ce3660046152ee565b611588565b6104a36106e1366004615191565b610195546001600160a01b0391821691161490565b6104e1610704366004615191565b61168b565b6101c754600160a01b900460ff166104a3565b6104f761072a366004615178565b6116d1565b6104e161073d366004615323565b611731565b6104cb610750366004615178565b6102086020526000908152604090205481565b6104cb6107713660046150e1565b61020060209081526000928352604080842090915290825290205481565b6104cb61079d366004615191565b61184d565b6104cb600080516020615f2d83398151915281565b6104e16118d3565b6104e16107cd36600461537a565b611949565b6104e1611c8b565b6104cb600080516020615f4d83398151915281565b6104e1611c9b565b6104e1610805366004615191565b611d71565b6104e1610818366004615191565b611db7565b610202546102035461020454610205546108379392919084565b6040805194855260208501939093529183015260608201526080016104af565b6104e1611efa565b6104cb606481565b6104f7611f0a565b6104cb61087d366004615191565b6001600160a01b03166000908152610161602052604090205490565b6104a36108a7366004615191565b6001600160a01b031660009081526101616020526040902054151590565b6104a36108d336600461521b565b611f23565b6104e16108e63660046154c7565b611f4e565b61051761202e565b6104cb610901366004615178565b6000908152610208602052604090205490565b6104e161203d565b6104cb6101fc5481565b6104cb600081565b6104e161093c3660046155d7565b61204d565b6104e161094f366004615605565b612109565b6104e1610962366004615627565b6121e6565b610206546104f7906001600160a01b031681565b6101c7546104f7906001600160a01b031681565b6104e161099d366004615677565b61226f565b6104e16109b0366004615191565b61234a565b6104cb6101fd5481565b466104cb565b6105176109d3366004615178565b6123a6565b6104f76109e6366004615178565b600090815261016060205260409020546001600160a01b031690565b610195546001600160a01b03166104f7565b6104e1610a2236600461521b565b61240c565b610517612431565b6104cb6101f95481565b6104e1610a47366004615191565b6124c0565b6104cb600080516020615f0d83398151915281565b60fb546001600160a01b03166104f7565b6101fa546104f7906001600160a01b031681565b6104a3610a943660046156cb565b6001600160a01b0391821660009081526101016020908152604080832093909416825291909152205460ff1690565b6104e1612506565b6104e1610ad9366004615191565b6125a7565b6104e1610aec366004615191565b612660565b60006001600160e01b0319821663da8def7360e01b1480610b165750610b16826126c6565b92915050565b6101616020528160005260406000208181548110610b3957600080fd5b90600052602060002001600091509150505481565b600080516020615f0d8339815191526000610b676126eb565b9050610b738282611f23565b80610b965750806001600160a01b0316610b8b611f0a565b6001600160a01b0316145b610bbb5760405162461bcd60e51b8152600401610bb2906156f9565b60405180910390fd5b610130546101f954610bcd919061575d565b6101fc55610203546101fd55610202546101fe5560006101ff819055610201805491610bf883615774565b90915550506101fe546101fd546101fc546040517fe564a4bf9e4db3797c60fe6b6be0c2b012e6557df177e1b63883bd29d00db8de90600090a45050565b606060fc8054610c459061578d565b80601f0160208091040260200160405190810160405280929190818152602001828054610c719061578d565b8015610cbe5780601f10610c9357610100808354040283529160200191610cbe565b820191906000526020600020905b815481529060010190602001808311610ca157829003601f168201915b5050505050905090565b6000610cd3826126f5565b50600090815261010060205260409020546001600160a01b031690565b6101c75482906001600160a01b03163b15610da2576101c754604051633185c44d60e21b81523060048201526001600160a01b0383811660248301529091169063c617113490604401602060405180830381865afa158015610d56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7a91906157c7565b610da257604051633b79c77360e21b81526001600160a01b0382166004820152602401610bb2565b610dac8383612754565b505050565b610db9612876565b6001600160a01b038116610ddf5760405162461bcd60e51b8152600401610bb2906157e4565b61020780546001600160a01b0319166001600160a01b0383169081179091556040517f0e58c0652c5df5dddc98a8856c5a814ba7aedf70cc4ef2c72a040d1ff0fe5ebd90600090a250565b600080516020615f0d8339815191526000610e436126eb565b9050610e4f8282611f23565b80610e725750806001600160a01b0316610e67611f0a565b6001600160a01b0316145b610e8e5760405162461bcd60e51b8152600401610bb2906156f9565b6101f954851115610efc5760405162461bcd60e51b815260206004820152603260248201527f417661746172436f6c6c656374696f6e3a205f776176654d6178546f6b656e736044820152712065786365656473206d6178537570706c7960701b6064820152608401610bb2565b60008511610f5e5760405162461bcd60e51b815260206004820152602960248201527f417661746172436f6c6c656374696f6e3a206d617820746f6b656e7320746f2060448201526806d696e7420697320360bc1b6064820152608401610bb2565b60008411610fcb5760405162461bcd60e51b815260206004820152603460248201527f417661746172436f6c6c656374696f6e3a206d617820746f6b656e7320746f2060448201527306d696e74207065722077616c6c657420697320360641b6064820152608401610bb2565b848411156110325760405162461bcd60e51b815260206004820152602e60248201527f417661746172436f6c6c656374696f6e3a20696e76616c696420737570706c7960448201526d1031b7b73334b3bab930ba34b7b760911b6064820152608401610bb2565b6101fc8590556101fd8490556101fe83905560006101ff81905561020180549161105b83615774565b91905055508284867fe564a4bf9e4db3797c60fe6b6be0c2b012e6557df177e1b63883bd29d00db8de60405160405180910390a45050505050565b61109e612876565b6001600160a01b0381166110c45760405162461bcd60e51b8152600401610bb290615832565b6110dc600080516020615f2d833981519152826111eb565b50565b6101c75483906001600160a01b03163b156111a657336001600160a01b038216036111145761110f8484846128e5565b6111b1565b6101c754604051633185c44d60e21b81523060048201523360248201526001600160a01b039091169063c617113490604401602060405180830381865afa158015611163573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118791906157c7565b6111a657604051633b79c77360e21b8152336004820152602401610bb2565b6111b18484846128e5565b50505050565b6000816101fe54610b169190615882565b60006111d38261291d565b80156111e457506111e48383612944565b9392505050565b600082815260976020526040902060010154611206816129c7565b610dac83836129d8565b600061121b8361184d565b821061127d5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610bb2565b506001600160a01b0391909116600090815261012e60209081526040808320938352929052205490565b6112af6126eb565b6001600160a01b0316816001600160a01b0316146113275760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610bb2565b6113318282612a5f565b5050565b61133d612876565b611345612ae4565b565b6101c75483906001600160a01b03163b1561140957336001600160a01b038216036113775761110f848484612b40565b6101c754604051633185c44d60e21b81523060048201523360248201526001600160a01b039091169063c617113490604401602060405180830381865afa1580156113c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ea91906157c7565b61140957604051633b79c77360e21b8152336004820152602401610bb2565b6111b1848484612b40565b61141c612b5b565b6110dc81612ba9565b600080516020615f0d833981519152600061143e6126eb565b905061144a8282611f23565b8061146d5750806001600160a01b0316611462611f0a565b6001600160a01b0316145b6114895760405162461bcd60e51b8152600401610bb2906156f9565b610205546101fc8190556101fd5560006101fe8190556101ff8190556102018054916114b483615774565b919050555060006101fd546101fc547fe564a4bf9e4db3797c60fe6b6be0c2b012e6557df177e1b63883bd29d00db8de60405160405180910390a45050565b60006114ff6101305490565b82106115625760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610bb2565b6101308281548110611576576115766158a1565b90600052602060002001549050919050565b600080516020615f0d83398151915260006115a16126eb565b90506115ad8282611f23565b806115d05750806001600160a01b03166115c5611f0a565b6001600160a01b0316145b6115ec5760405162461bcd60e51b8152600401610bb2906156f9565b825160000361160d5760405162461bcd60e51b8152600401610bb2906158b7565b6101fb61161a8482615949565b50826040516116299190615a09565b604051908190038120907ff9c7803e94e0d3c02900d8a90893a6d5e90dd04d32a4cfe825520f82bf9f32f690600090a2604051600019907ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce790600090a2505050565b611693612876565b6001600160a01b0381166116b95760405162461bcd60e51b8152600401610bb290615832565b6110dc600080516020615f2d8339815191528261240c565b600081815260fe60205260408120546001600160a01b031680610b165760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610bb2565b611739612b5b565b6117416126eb565b6001600160a01b0316611753836116d1565b6001600160a01b0316146117795760405162461bcd60e51b8152600401610bb290615a25565b60008481526102096020526040902054156117a65760405162461bcd60e51b8152600401610bb290615a6a565b610207546001600160a01b03166117c96117be6126eb565b86304687878a612caa565b6001600160a01b0316146118305760405162461bcd60e51b815260206004820152602860248201527f417661746172436f6c6c656374696f6e3a207369676e617475726520636865636044820152671ac819985a5b195960c21b6064820152608401610bb2565b600084815261020960205260409020600190556111b18282612d5d565b60006001600160a01b0382166118b75760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610bb2565b506001600160a01b0316600090815260ff602052604090205490565b6118db612876565b60405162461bcd60e51b815260206004820152603c60248201527f436f6c6c656374696f6e416363657373436f6e74726f6c3a2052656e6f756e6360448201527f65206f776e657273686970206973206e6f7420617661696c61626c65000000006064820152608401610bb2565b611951612b5b565b611959612dc8565b600061020154116119c15760405162461bcd60e51b815260206004820152602c60248201527f417661746172436f6c6c656374696f6e3a20636f6e7472616374206973206e6f60448201526b1d0818dbdb999a59dd5c995960a21b6064820152608401610bb2565b610206546001600160a01b03166119d66126eb565b6001600160a01b031614611a3c5760405162461bcd60e51b815260206004820152602760248201527f417661746172436f6c6c656374696f6e3a2063616c6c6572206973206e6f7420604482015266185b1b1bddd95960ca1b6064820152608401610bb2565b6001600160a01b038416611aa35760405162461bcd60e51b815260206004820152602860248201527f417661746172436f6c6c656374696f6e3a2077616c6c6574206973207a65726f604482015267206164647265737360c01b6064820152608401610bb2565b60008311611aff5760405162461bcd60e51b8152602060048201526024808201527f417661746172436f6c6c656374696f6e3a20616d6f756e742063616e6e6f74206044820152630626520360e41b6064820152608401610bb2565b611b0a848383612e21565b611b138361291d565b611b5f5760405162461bcd60e51b815260206004820181905260248201527f417661746172436f6c6c656374696f6e3a207761766520636f6d706c657465646044820152606401610bb2565b611b698484612944565b611bb55760405162461bcd60e51b815260206004820152601d60248201527f417661746172436f6c6c656374696f6e3a206d617820616c6c6f7765640000006044820152606401610bb2565b6000611bc0846111b7565b90508015611be857611be8611bd36126eb565b6101fa5487906001600160a01b031684612ee0565b6001600160a01b03851660009081526102006020526040812061020154869290611c149060019061575d565b81526020019081526020016000206000828254611c319190615ab4565b92505081905550836101ff6000828254611c4b9190615ab4565b90915550600090505b84811015611c8057611c7886611c7388611c6e6101305490565b612f3a565b613056565b600101611c54565b50506111b160018055565b611c93612876565b611345613076565b6000611ca56126eb565b9050806001600160a01b0316611cc360fb546001600160a01b031690565b6001600160a01b031614611d365760405162461bcd60e51b815260206004820152603460248201527f436f6c6c656374696f6e416363657373436f6e74726f6c3a2063616c6c65722060448201527334b9903737ba103a3432903732bb9037bbb732b960611b6064820152608401610bb2565b611d50600080516020615f4d833981519152610a22611f0a565b611d68600080516020615f4d833981519152826111eb565b6110dc81613103565b611d79612876565b6001600160a01b038116611d9f5760405162461bcd60e51b8152600401610bb290615832565b6110dc600080516020615f0d833981519152826111eb565b611dbf612876565b6001600160a01b0381163b611de65760405162461bcd60e51b8152600401610bb290615acc565b61020680546001600160a01b0319166001600160a01b0383169081179091556040805163313ce56760e01b8152905163313ce567916004808201926020929091908290030181865afa158015611e40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e649190615b20565b611e6f90600a615c27565b611e7a906064615882565b610202819055610204546102035461020554604051908152919290917f084331e3561153129deda7a8a07a82b29226ca4591e48e2473280d8352e920b89060200160405180910390a46040516001600160a01b038216907f8eb903ef93f1949409fbfad9304ceafc3ab8211c9ddbe9732ce8b1ede00efb3490600090a250565b611f02612876565b61134561311c565b6000611f1e60c9546001600160a01b031690565b905090565b60009182526097602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600054610100900460ff1615808015611f6e5750600054600160ff909116105b80611f885750303b158015611f88575060005460ff166001145b611fa45760405162461bcd60e51b8152600401610bb290615c36565b6000805460ff191660011790558015611fc7576000805461ff0019166101001790555b611fda8c8c8c8c8c8c8c8c8c8c8c613161565b8015612020576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050505050565b606060fd8054610c459061578d565b612045612876565b611345613728565b6101c75482906001600160a01b03163b156120ff576101c754604051633185c44d60e21b81523060048201526001600160a01b0383811660248301529091169063c617113490604401602060405180830381865afa1580156120b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d791906157c7565b6120ff57604051633b79c77360e21b81526001600160a01b0382166004820152602401610bb2565b610dac83836137b1565b600080516020615f2d83398151915260006121226126eb565b905061212e8282611f23565b806121515750806001600160a01b0316612146611f0a565b6001600160a01b0316145b61216d5760405162461bcd60e51b8152600401610bb2906156f9565b600084815260fe60205260409020546001600160a01b03166121dc5760405162461bcd60e51b815260206004820152602260248201527f417661746172436f6c6c656374696f6e3a20696e76616c696420746f6b656e20604482015261125160f21b6064820152608401610bb2565b6111b18484612d5d565b6121ee612b5b565b60006121f86126eb565b9050806001600160a01b031661220d856116d1565b6001600160a01b0316146122335760405162461bcd60e51b8152600401610bb290615a25565b61223e818484612e21565b60405184907ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce790600090a250505050565b6101c75484906001600160a01b03163b1561233757336001600160a01b038216036122a5576122a0858585856137c3565b612343565b6101c754604051633185c44d60e21b81523060048201523360248201526001600160a01b039091169063c617113490604401602060405180830381865afa1580156122f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061231891906157c7565b61233757604051633b79c77360e21b8152336004820152602401610bb2565b612343858585856137c3565b5050505050565b612352611f0a565b6001600160a01b0316336001600160a01b03161461238357604051635fc483c560e01b815260040160405180910390fd5b6101c780546001600160a01b0319166001600160a01b0392909216919091179055565b60606123b1826126f5565b60006123bb6137fc565b905060008151116123db57604051806020016040528060008152506111e4565b806123e58461380c565b6040516020016123f6929190615c84565b6040516020818303038152906040529392505050565b600082815260976020526040902060010154612427816129c7565b610dac8383612a5f565b6101fb805461243f9061578d565b80601f016020809104026020016040519081016040528092919081815260200182805461246b9061578d565b80156124b85780601f1061248d576101008083540402835291602001916124b8565b820191906000526020600020905b81548152906001019060200180831161249b57829003601f168201915b505050505081565b6124c8612876565b6001600160a01b0381166124ee5760405162461bcd60e51b8152600401610bb290615832565b6110dc600080516020615f0d8339815191528261240c565b600080516020615f0d833981519152600061251f6126eb565b905061252b8282611f23565b8061254e5750806001600160a01b0316612543611f0a565b6001600160a01b0316145b61256a5760405162461bcd60e51b8152600401610bb2906156f9565b610130546101f95461257c919061575d565b6101fc55610204546101fd55610202546101fe5560006101ff819055610201805491610bf883615774565b6125af612876565b6001600160a01b0381166126155760405162461bcd60e51b815260206004820152602760248201527f417661746172436f6c6c656374696f6e3a206f776e6572206973207a65726f206044820152666164647265737360c81b6064820152608401610bb2565b6101fa80546001600160a01b0319166001600160a01b0383169081179091556040517f3c864541ef71378c6229510ed90f376565ee42d9c5e0904a984a9e863e6db44f90600090a250565b612668612876565b60fb80546001600160a01b0319166001600160a01b03831690811790915561268e611f0a565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b60006001600160e01b0319821663780e9d6360e01b1480610b165750610b168261389f565b6000611f1e6138df565b600081815260fe60205260409020546001600160a01b03166110dc5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610bb2565b600061275f826116d1565b9050806001600160a01b0316836001600160a01b0316036127cc5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610bb2565b806001600160a01b03166127de6126eb565b6001600160a01b031614806127fa57506127fa81610a946126eb565b61286c5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610bb2565b610dac8383613907565b61287e6126eb565b6001600160a01b031661288f611f0a565b6001600160a01b0316146113455760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610bb2565b6128f66128f06126eb565b82613976565b6129125760405162461bcd60e51b8152600401610bb290615cb3565b610dac8383836139f6565b60008082118015610b1657506101fc54826101ff5461293c9190615ab4565b111592915050565b60006101fd54826102006000866001600160a01b03166001600160a01b031681526020019081526020016000206000600161020154612983919061575d565b81526020019081526020016000205461299c9190615ab4565b111580156111e457506101f954826129b46101305490565b6129be9190615ab4565b11159392505050565b6110dc816129d36126eb565b613b68565b6129e28282611f23565b6113315760008281526097602090815260408083206001600160a01b03851684529091529020805460ff19166001179055612a1b6126eb565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b612a698282611f23565b156113315760008281526097602090815260408083206001600160a01b03851684529091529020805460ff19169055612aa06126eb565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b612aec613bc1565b6101c7805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612b236126eb565b6040516001600160a01b03909116815260200160405180910390a1565b610dac8383836040518060200160405280600081525061226f565b6101c754600160a01b900460ff16156113455760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610bb2565b6101625460ff16612bf55760405162461bcd60e51b8152602060048201526016602482015275109d5c9b9a5b99c81a5cc81b9bdd08195b98589b195960521b6044820152606401610bb2565b6000612bff6126eb565b9050612c0b8183613976565b612c275760405162461bcd60e51b8152600401610bb290615cb3565b612c3082613c12565b60008281526101606020908152604080832080546001600160a01b0319166001600160a01b0386169081179091558084526101618352818420805460018101825590855292842090920185905551909184917f33631bcd0a4d34a7e2c240ab0753d5adfb7284d8ac89dab6876ec785c0cfa0e69190a35050565b604080516001600160a01b03808a16602083015291810188905290861660608201526080810185905260a0810184905260c08101839052600090612d519060e0015b60408051601f198184030181529082905280516020918201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000091830191909152603c820152605c016040516020818303038152906040528051906020012083613cb6565b98975050505050505050565b6000828152610208602052604080822083905551829184917f37c5b85bb9cbe019726db5bf44dfd0053ed3e09554d9f97a9778b5b8dd65f6209190a360405182907ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce790600090a25050565b600260015403612e1a5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610bb2565b6002600155565b6000828152610209602052604090205415612e4e5760405162461bcd60e51b8152600401610bb290615a6a565b610207546001600160a01b0316612e688484304686613cda565b6001600160a01b031614612ec95760405162461bcd60e51b815260206004820152602260248201527f417661746172436f6c6c656374696f6e3a207369676e6174757265206661696c604482015261195960f21b6064820152608401610bb2565b506000908152610209602052604090206001905550565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526111b1908590613d1c565b600080826101f954612f4c919061575d565b6040516bffffffffffffffffffffffff19606087901b1660208201524460348201524260548201526074810182905290915060009082906094016040516020818303038152906040528051906020012060001c612fa99190615d00565b600081815261020a6020526040902054909150819015612fd55750600081815261020a60205260409020545b61020a6000612fe560018661575d565b81526020019081526020016000205460000361301b5761300660018461575d565b600083815261020a602052604090205561304d565b61020a600061302b60018661575d565b8152602080820192909252604090810160009081205485825261020a90935220555b95945050505050565b611331828260405180602001604052806000815250613dee565b60018055565b6101625460ff16156130ca5760405162461bcd60e51b815260206004820152601760248201527f4275726e696e6720616c726561647920656e61626c65640000000000000000006044820152606401610bb2565b610162805460ff191660011790556040517f467f7f2d203d48534b64c070fde030b529f5cf61811d094ee55755964c290fdc90600090a1565b60fb80546001600160a01b03191690556110dc81613e21565b613124612b5b565b6101c7805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612b236126eb565b600054610100900460ff166131885760405162461bcd60e51b8152600401610bb290615d22565b89516000036131a95760405162461bcd60e51b8152600401610bb2906158b7565b88516000036131fa5760405162461bcd60e51b815260206004820152601f60248201527f417661746172436f6c6c656374696f6e3a206e616d6520697320656d707479006044820152606401610bb2565b87516000036132555760405162461bcd60e51b815260206004820152602160248201527f417661746172436f6c6c656374696f6e3a2073796d626f6c20697320656d70746044820152607960f81b6064820152608401610bb2565b6001600160a01b03861661327b5760405162461bcd60e51b8152600401610bb2906157e4565b6001600160a01b0385166132ed5760405162461bcd60e51b815260206004820152603360248201527f417661746172436f6c6c656374696f6e3a207472757374656420666f72776172604482015272646572206973207a65726f206164647265737360681b6064820152608401610bb2565b6001600160a01b0387166133565760405162461bcd60e51b815260206004820152602a60248201527f417661746172436f6c6c656374696f6e3a207472656173757279206973207a65604482015269726f206164647265737360b01b6064820152608401610bb2565b6001600160a01b0384163b61337d5760405162461bcd60e51b8152600401610bb290615acc565b600083116133e85760405162461bcd60e51b815260206004820152603260248201527f417661746172436f6c6c656374696f6e3a206d617820737570706c792073686f6044820152710756c64206265206d6f7265207468616e20360741b6064820152608401610bb2565b805161344e5760405162461bcd60e51b815260206004820152602f60248201527f417661746172436f6c6c656374696f6e3a207075626c6963206d696e7420707260448201526e06963652063616e6e6f74206265203608c1b6064820152608401610bb2565b82816020015111158015613466575082816040015111155b6134d85760405162461bcd60e51b815260206004820152603960248201527f417661746172436f6c6c656374696f6e3a20696e76616c696420746f6b656e7360448201527f207065722077616c6c657420636f6e66696775726174696f6e000000000000006064820152608401610bb2565b828160600151111561353e5760405162461bcd60e51b815260206004820152602960248201527f417661746172436f6c6c656374696f6e3a20696e76616c6964206d61726b6574604482015268696e6720736861726560b81b6064820152608401610bb2565b613546613e73565b61354f8b613ea2565b61019580546001600160a01b0319166001600160a01b03871617905561357361404e565b61357d898961407d565b6135948260000151836020015184604001516140ae565b6101fb6135a18b82615949565b506101fa80546001600160a01b03808a166001600160a01b03199283161790925561020780548984169083161790556102068054928716929091169190911790556101f983905580516102028190556020820151610203819055604080840151610204819055606085015161020581905591519093917f084331e3561153129deda7a8a07a82b29226ca4591e48e2473280d8352e920b89161364591815260200190565b60405180910390a48760405161365b9190615a09565b6040518091039020896040516136719190615a09565b60405180910390208b6040516136879190615a09565b60405180910390207f639645c4d40a9a2d28b9351e2c180f9b719e3d0b5f2e16a4cdd6f80aac5588fa8a8a898989600001518a602001518b6040015160405161371397969594939291906001600160a01b0397881681529587166020870152938616604086015260608501929092528416608084015290921660a082015290151560c082015260e00190565b60405180910390a45050505050505050505050565b6101625460ff1661377b5760405162461bcd60e51b815260206004820152601860248201527f4275726e696e6720616c72656164792064697361626c656400000000000000006044820152606401610bb2565b610162805460ff191690556040517f1850cd1d45005aad00a8eae6d720e5f79b185f1386053ff4fa89438667a63b2890600090a1565b6113316137bc6126eb565b83836141e5565b6137d46137ce6126eb565b83613976565b6137f05760405162461bcd60e51b8152600401610bb290615cb3565b6111b1848484846142b4565b60606101fb8054610c459061578d565b60606000613819836142e7565b600101905060008167ffffffffffffffff8111156138395761383961524b565b6040519080825280601f01601f191660200182016040528015613863576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461386d57509392505050565b60006001600160e01b031982166380ac58cd60e01b14806138d057506001600160e01b03198216635b5e139f60e01b145b80610b165750610b16826143bf565b610195546000906001600160a01b03163303613902575060131936013560601c90565b503390565b60008181526101006020526040902080546001600160a01b0319166001600160a01b038416908117909155819061393d826116d1565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080613982836116d1565b9050806001600160a01b0316846001600160a01b031614806139ca57506001600160a01b038082166000908152610101602090815260408083209388168352929052205460ff165b806139ee5750836001600160a01b03166139e384610cc8565b6001600160a01b0316145b949350505050565b826001600160a01b0316613a09826116d1565b6001600160a01b031614613a2f5760405162461bcd60e51b8152600401610bb290615d6d565b6001600160a01b038216613a915760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610bb2565b613a9e83838360016143f4565b826001600160a01b0316613ab1826116d1565b6001600160a01b031614613ad75760405162461bcd60e51b8152600401610bb290615d6d565b60008181526101006020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260ff855283862080546000190190559087168086528386208054600101905586865260fe90945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b613b728282611f23565b61133157613b7f8161452a565b613b8a83602061453c565b604051602001613b9b929190615db2565b60408051601f198184030181529082905262461bcd60e51b8252610bb291600401615165565b6101c754600160a01b900460ff166113455760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610bb2565b6000613c1d826116d1565b9050613c2d8160008460016143f4565b613c36826116d1565b60008381526101006020908152604080832080546001600160a01b03199081169091556001600160a01b03851680855260ff8452828520805460001901905587855260fe909352818420805490911690555192935084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6000806000613cc585856146d8565b91509150613cd28161471d565b509392505050565b604080516001600160a01b038088166020830152918101869052908416606082015260808101839052600090613d129060a001612cec565b9695505050505050565b6000613d71826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166148679092919063ffffffff16565b805190915015610dac5780806020019051810190613d8f91906157c7565b610dac5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610bb2565b613df88383614876565b613e056000848484614a0f565b610dac5760405162461bcd60e51b8152600401610bb290615e27565b60c980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16613e9a5760405162461bcd60e51b8152600401610bb290615d22565b611345614b17565b600054610100900460ff1615808015613ec25750600054600160ff909116105b80613edc5750303b158015613edc575060005460ff166001145b613ef85760405162461bcd60e51b8152600401610bb290615c36565b6000805460ff191660011790558015613f1b576000805461ff0019166101001790555b6001600160a01b038216613f905760405162461bcd60e51b815260206004820152603660248201527f436f6c6c656374696f6e416363657373436f6e74726f6c3a206e6577206f776e604482015275657220697320746865207a65726f206164647265737360501b6064820152608401610bb2565b613f98614b3e565b613fa182613103565b613fb9600080516020615f4d833981519152836129d8565b613fdf600080516020615f0d833981519152600080516020615f4d833981519152614b65565b614005600080516020615f2d833981519152600080516020615f4d833981519152614b65565b8015611331576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b600054610100900460ff166140755760405162461bcd60e51b8152600401610bb290615d22565b611345614bb0565b600054610100900460ff166140a45760405162461bcd60e51b8152600401610bb290615d22565b6113318282614be7565b600054610100900460ff166140d55760405162461bcd60e51b8152600401610bb290615d22565b6101c780546001600160a01b0319166001600160a01b0385169081179091553b15610dac57801561416c576101c754604051633e9f1edf60e11b81523060048201526001600160a01b03848116602483015290911690637d3e3dbe906044015b600060405180830381600087803b15801561414f57600080fd5b505af1158015614163573d6000803e3d6000fd5b50505050505050565b6001600160a01b038216156141b4576101c75460405163a0af290360e01b81523060048201526001600160a01b0384811660248301529091169063a0af290390604401614135565b6101c754604051632210724360e11b81523060048201526001600160a01b0390911690634420e48690602401614135565b816001600160a01b0316836001600160a01b0316036142465760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610bb2565b6001600160a01b0383811660008181526101016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6142bf8484846139f6565b6142cb84848484614a0f565b6111b15760405162461bcd60e51b8152600401610bb290615e27565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106143265772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310614352576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061437057662386f26fc10000830492506010015b6305f5e1008310614388576305f5e100830492506008015b612710831061439c57612710830492506004015b606483106143ae576064830492506002015b600a8310610b165760010192915050565b60006001600160e01b03198216637965db0b60e01b1480610b1657506301ffc9a760e01b6001600160e01b0319831614610b16565b61440084848484614c27565b600181111561446f5760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e7365637574697665207472604482015274185b9cd9995c9cc81b9bdd081cdd5c1c1bdc9d1959605a1b6064820152608401610bb2565b816001600160a01b0385166144cd576144c8816101308054600083815261013160205260408120829055600182018355919091527f2f605e086faac1d93117bbfbc18835d434e9405fadc1ca66faf4b864746daf340155565b6144f0565b836001600160a01b0316856001600160a01b0316146144f0576144f08582614caf565b6001600160a01b038416614507576122a081614d51565b846001600160a01b0316846001600160a01b031614612343576123438482614e06565b6060610b166001600160a01b03831660145b6060600061454b836002615882565b614556906002615ab4565b67ffffffffffffffff81111561456e5761456e61524b565b6040519080825280601f01601f191660200182016040528015614598576020820181803683370190505b509050600360fc1b816000815181106145b3576145b36158a1565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106145e2576145e26158a1565b60200101906001600160f81b031916908160001a9053506000614606846002615882565b614611906001615ab4565b90505b6001811115614689576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110614645576146456158a1565b1a60f81b82828151811061465b5761465b6158a1565b60200101906001600160f81b031916908160001a90535060049490941c9361468281615e79565b9050614614565b5083156111e45760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610bb2565b600080825160410361470e5760208301516040840151606085015160001a61470287828585614e4c565b94509450505050614716565b506000905060025b9250929050565b600081600481111561473157614731615e90565b036147395750565b600181600481111561474d5761474d615e90565b0361479a5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610bb2565b60028160048111156147ae576147ae615e90565b036147fb5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610bb2565b600381600481111561480f5761480f615e90565b036110dc5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610bb2565b60606139ee8484600085614f10565b6001600160a01b0382166148cc5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610bb2565b600081815260fe60205260409020546001600160a01b0316156149315760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610bb2565b61493f6000838360016143f4565b600081815260fe60205260409020546001600160a01b0316156149a45760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610bb2565b6001600160a01b038216600081815260ff602090815260408083208054600101905584835260fe90915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160a01b0384163b15614b0c57836001600160a01b031663150b7a02614a386126eb565b8786866040518563ffffffff1660e01b8152600401614a5a9493929190615ea6565b6020604051808303816000875af1925050508015614a95575060408051601f3d908101601f19168201909252614a9291810190615ed9565b60015b614af2573d808015614ac3576040519150601f19603f3d011682016040523d82523d6000602084013e614ac8565b606091505b508051600003614aea5760405162461bcd60e51b8152600401610bb290615e27565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506139ee565b506001949350505050565b600054610100900460ff166130705760405162461bcd60e51b8152600401610bb290615d22565b600054610100900460ff166113455760405162461bcd60e51b8152600401610bb290615d22565b600082815260976020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b600054610100900460ff16614bd75760405162461bcd60e51b8152600401610bb290615d22565b6101c7805460ff60a01b19169055565b600054610100900460ff16614c0e5760405162461bcd60e51b8152600401610bb290615d22565b60fc614c1a8382615949565b5060fd610dac8282615949565b60018111156111b1576001600160a01b03841615614c6d576001600160a01b038416600090815260ff602052604081208054839290614c6790849061575d565b90915550505b6001600160a01b038316156111b1576001600160a01b038316600090815260ff602052604081208054839290614ca4908490615ab4565b909155505050505050565b60006001614cbc8461184d565b614cc6919061575d565b600083815261012f6020526040902054909150808214614d1c576001600160a01b038416600090815261012e60209081526040808320858452825280832054848452818420819055835261012f90915290208190555b50600091825261012f602090815260408084208490556001600160a01b03909416835261012e81528383209183525290812055565b61013054600090614d649060019061575d565b600083815261013160205260408120546101308054939450909284908110614d8e57614d8e6158a1565b90600052602060002001549050806101308381548110614db057614db06158a1565b60009182526020808320909101929092558281526101319091526040808220849055858252812055610130805480614dea57614dea615ef6565b6001900381819060005260206000200160009055905550505050565b6000614e118361184d565b6001600160a01b03909316600090815261012e60209081526040808320868452825280832085905593825261012f9052919091209190915550565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115614e835750600090506003614f07565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015614ed7573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116614f0057600060019250925050614f07565b9150600090505b94509492505050565b606082471015614f715760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610bb2565b600080866001600160a01b03168587604051614f8d9190615a09565b60006040518083038185875af1925050503d8060008114614fca576040519150601f19603f3d011682016040523d82523d6000602084013e614fcf565b606091505b5091509150614fe087838387614feb565b979650505050505050565b6060831561505a578251600003615053576001600160a01b0385163b6150535760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610bb2565b50816139ee565b6139ee838381511561506f5781518083602001fd5b8060405162461bcd60e51b8152600401610bb29190615165565b6001600160e01b0319811681146110dc57600080fd5b6000602082840312156150b157600080fd5b81356111e481615089565b6001600160a01b03811681146110dc57600080fd5b80356150dc816150bc565b919050565b600080604083850312156150f457600080fd5b82356150ff816150bc565b946020939093013593505050565b60005b83811015615128578181015183820152602001615110565b838111156111b15750506000910152565b6000815180845261515181602086016020860161510d565b601f01601f19169290920160200192915050565b6020815260006111e46020830184615139565b60006020828403121561518a57600080fd5b5035919050565b6000602082840312156151a357600080fd5b81356111e4816150bc565b6000806000606084860312156151c357600080fd5b505081359360208301359350604090920135919050565b6000806000606084860312156151ef57600080fd5b83356151fa816150bc565b9250602084013561520a816150bc565b929592945050506040919091013590565b6000806040838503121561522e57600080fd5b823591506020830135615240816150bc565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261527257600080fd5b813567ffffffffffffffff8082111561528d5761528d61524b565b604051601f8301601f19908116603f011681019082821181831017156152b5576152b561524b565b816040528381528660208588010111156152ce57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006020828403121561530057600080fd5b813567ffffffffffffffff81111561531757600080fd5b6139ee84828501615261565b6000806000806080858703121561533957600080fd5b84359350602085013567ffffffffffffffff81111561535757600080fd5b61536387828801615261565b949794965050505060408301359260600135919050565b6000806000806080858703121561539057600080fd5b843561539b816150bc565b93506020850135925060408501359150606085013567ffffffffffffffff8111156153c557600080fd5b6153d187828801615261565b91505092959194509250565b80151581146110dc57600080fd5b6000606082840312156153fd57600080fd5b6040516060810181811067ffffffffffffffff821117156154205761542061524b565b6040529050808235615431816150bc565b81526020830135615441816150bc565b60208201526040830135615454816153dd565b6040919091015292915050565b60006080828403121561547357600080fd5b6040516080810181811067ffffffffffffffff821117156154965761549661524b565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b60008060008060008060008060008060006102008c8e0312156154e957600080fd5b6154f28c6150d1565b9a5067ffffffffffffffff8060208e0135111561550e57600080fd5b61551e8e60208f01358f01615261565b9a508060408e0135111561553157600080fd5b6155418e60408f01358f01615261565b99508060608e0135111561555457600080fd5b506155658d60608e01358e01615261565b975061557360808d016150d1565b965061558160a08d016150d1565b955061558f60c08d016150d1565b945061559d60e08d016150d1565b93506101008c013592506155b58d6101208e016153eb565b91506155c58d6101808e01615461565b90509295989b509295989b9093969950565b600080604083850312156155ea57600080fd5b82356155f5816150bc565b91506020830135615240816153dd565b6000806040838503121561561857600080fd5b50508035926020909101359150565b60008060006060848603121561563c57600080fd5b8335925060208401359150604084013567ffffffffffffffff81111561566157600080fd5b61566d86828701615261565b9150509250925092565b6000806000806080858703121561568d57600080fd5b8435615698816150bc565b935060208501356156a8816150bc565b925060408501359150606085013567ffffffffffffffff8111156153c557600080fd5b600080604083850312156156de57600080fd5b82356156e9816150bc565b91506020830135615240816150bc565b6020808252602e908201527f436f6c6c656374696f6e416363657373436f6e74726f6c3a2073656e6465722060408201526d1b9bdd08185d5d1a1bdc9a5e995960921b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60008282101561576f5761576f615747565b500390565b60006001820161578657615786615747565b5060010190565b600181811c908216806157a157607f821691505b6020821081036157c157634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156157d957600080fd5b81516111e4816153dd565b6020808252602e908201527f417661746172436f6c6c656374696f6e3a207369676e2061646472657373206960408201526d73207a65726f206164647265737360901b606082015260800190565b60208082526030908201527f436f6c6c656374696f6e416363657373436f6e74726f6c3a206163636f756e7460408201526f206973207a65726f206164647265737360801b606082015260800190565b600081600019048311821515161561589c5761589c615747565b500290565b634e487b7160e01b600052603260045260246000fd5b60208082526024908201527f417661746172436f6c6c656374696f6e3a2062617365555249206973206e6f74604082015263081cd95d60e21b606082015260800190565b601f821115610dac57600081815260208120601f850160051c810160208610156159225750805b601f850160051c820191505b818110156159415782815560010161592e565b505050505050565b815167ffffffffffffffff8111156159635761596361524b565b61597781615971845461578d565b846158fb565b602080601f8311600181146159ac57600084156159945750858301515b600019600386901b1c1916600185901b178555615941565b600085815260208120601f198616915b828110156159db578886015182559484019460019091019084016159bc565b50858210156159f95787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008251615a1b81846020870161510d565b9190910192915050565b60208082526025908201527f417661746172436f6c6c656374696f6e3a2073656e646572206973206e6f742060408201526437bbb732b960d91b606082015260800190565b6020808252602a908201527f417661746172436f6c6c656374696f6e3a207369676e6174757265496420616c6040820152691c9958591e481d5cd95960b21b606082015260800190565b60008219821115615ac757615ac7615747565b500190565b60208082526034908201527f417661746172436f6c6c656374696f6e3a206578656375746f722061646472656040820152731cdcc81a5cc81b9bdd08184818dbdb9d1c9858dd60621b606082015260800190565b600060208284031215615b3257600080fd5b815160ff811681146111e457600080fd5b600181815b80851115615b7e578160001904821115615b6457615b64615747565b80851615615b7157918102915b93841c9390800290615b48565b509250929050565b600082615b9557506001610b16565b81615ba257506000610b16565b8160018114615bb85760028114615bc257615bde565b6001915050610b16565b60ff841115615bd357615bd3615747565b50506001821b610b16565b5060208310610133831016604e8410600b8410161715615c01575081810a610b16565b615c0b8383615b43565b8060001904821115615c1f57615c1f615747565b029392505050565b60006111e460ff841683615b86565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60008351615c9681846020880161510d565b835190830190615caa81836020880161510d565b01949350505050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b600082615d1d57634e487b7160e01b600052601260045260246000fd5b500690565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351615dea81601785016020880161510d565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351615e1b81602884016020880161510d565b01602801949350505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b600081615e8857615e88615747565b506000190190565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613d1290830184615139565b600060208284031215615eeb57600080fd5b81516111e481615089565b634e487b7160e01b600052603160045260246000fdfe3b49a237fe2d18fa4d9642b8a0e065923cceb71b797783b619a030a61d848bf069fc995a7cdbc94c95dc768dfaa8ceead6003727063f7d665556608319262298a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a2646970667358221220f001aacba567e69ba20a380c9c60e7bacce866ccb6c40f490c6bf12ee7bb3ddc64736f6c634300080f0033",
  "devdoc": {
    "author": "qed.team x The Sandbox",
    "events": {
      "AllowedExecuteMintSet(address)": {
        "details": "emitted when setAllowedExecuteMint is called",
        "params": {
          "_address": "the address that will be allowed to set execute the mint function"
        }
      },
      "BaseURISet(string)": {
        "details": "emitted when setBaseURI is called",
        "params": {
          "baseURI": "an URI that will be used as the base for token URI"
        }
      },
      "ContractInitialized(string,string,string,address,address,address,uint256,address,address,bool)": {
        "details": "emitted at proxy startup, once only",
        "params": {
          "_allowedToExecuteMint": "token address that is allowed to execute the mint function",
          "_maxSupply": "max supply of tokens to be allowed to be minted per contract",
          "_mintTreasury": "collection treasury address",
          "_name": "name of the ERC721 token",
          "_operatorFiltererSubscription": "subscription address to use as a template for",
          "_operatorFiltererSubscriptionSubscribe": "if to subscribe to the operatorFiltererSubscription address or                                               just copy entries from it",
          "_registry": "filter registry to which to register with. For blocking operators that do not respect royalties",
          "_signAddress": "signer address that is allowed to create mint signatures",
          "_symbol": "token symbol of the ERC721 token",
          "baseURI": "an URI that will be used as the base for token URI"
        }
      },
      "DefaultMintingValuesSet(uint256,uint256,uint256,uint256)": {
        "details": "emitted when initialize or setWaveDefaults is called",
        "params": {
          "maxAllowlistTokensPerWallet": "maximum tokens mint per wallet in the allowlist minting",
          "maxMarketingTokens": "maximum allowed tokens to be minted in the marketing phase",
          "maxPublicTokensPerWallet": "maximum tokens mint per wallet in the public minting",
          "mintPrice": "default mint price for both allowlist and public minting"
        }
      },
      "Personalized(uint256,uint256)": {
        "details": "emitted when personalize is called",
        "params": {
          "_personalizationMask": "the exact personalization that was done, as a custom meaning bit-mask",
          "_tokenId": "id of the token which had the personalization done"
        }
      },
      "SignAddressSet(address)": {
        "details": "emitted when setSignAddress is called",
        "params": {
          "_signAddress": "new signer address to be set"
        }
      },
      "TreasurySet(address)": {
        "details": "emitted when setTreasury is called",
        "params": {
          "_owner": "new owner address to be saved"
        }
      },
      "WaveSetup(uint256,uint256,uint256)": {
        "details": "emitted when setupWave is called",
        "params": {
          "_waveMaxTokens": "the allowed number of tokens to be minted in this wave (cumulative by all minting wallets)",
          "_waveMaxTokensToBuy": "max tokens to buy, per wallet in a given wave",
          "_waveSingleTokenPrice": "the price to mint a token in a given wave, in wei"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "reverts if sender not new pending owner"
      },
      "addConfigurator(address)": {
        "details": "reverts if account is zero address or not called by owner",
        "params": {
          "account": "the address that which will be given the specified role role"
        }
      },
      "addTransformer(address)": {
        "details": "reverts if account is zero address or not called by owner",
        "params": {
          "account": "the address that which will be given the specified role role"
        }
      },
      "approve(address,uint256)": {
        "details": "See OpenZeppelin {IERC721-approve}"
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "burn(uint256)": {
        "custom:event": "TokenBurned",
        "details": "See {ERC721BurnMemoryEnumerableUpgradeable.burn}.      Inherited in order to add the whenNotPaused modifier",
        "params": {
          "tokenId": "the token id to be burned"
        }
      },
      "burnedTokensCount(address)": {
        "params": {
          "previousOwner": "the owner to check for burned tokens"
        },
        "returns": {
          "_0": "number of burned tokens by the indicated owner"
        }
      },
      "burnerOf(uint256)": {
        "details": "Does NOT revert if token was not burned/doesn't exist",
        "params": {
          "tokenId": "the tokenId to be checked who burned it"
        },
        "returns": {
          "_0": "the address of who burned the indicated token ID"
        }
      },
      "chain()": {
        "details": "returns block.chainid",
        "returns": {
          "_0": "current chainID for the blockchain"
        }
      },
      "checkMintAllowed(address,uint256)": {
        "params": {
          "_amount": "amount to be checked if can be minted",
          "_wallet": "wallet to be checked if it can mint"
        },
        "returns": {
          "_0": "if can mint or not"
        }
      },
      "didBurnTokens(address)": {
        "params": {
          "previousOwner": "the owner to check for burned tokens"
        },
        "returns": {
          "_0": "if the address burned any tokens"
        }
      },
      "disableBurning()": {
        "custom:event": "TokenBurningDisabled",
        "details": "reverts if burning already disabled.      Inherited in order to add the onlyOwner modifier"
      },
      "enableBurning()": {
        "custom:event": "TokenBurningEnabled",
        "details": "reverts if burning already enabled.      Inherited in order to add the onlyOwner modifier"
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,string,string,string,address,address,address,address,uint256,(address,address,bool),(uint256,uint256,uint256,uint256))": {
        "details": "calls all the init functions from the base classes. Emits {ContractInitialized} event",
        "params": {
          "_allowedToExecuteMint": "ERC20 token contract through which mint will be done                              It is the only one allowed to call mint",
          "_collectionOwner": "the address that will be set as the owner of the collection",
          "_filterParams": "Opensea registry filter initialization parameters",
          "_initialBaseURI": "an URI that will be used as the base for token URI",
          "_initialTrustedForwarder": "trusted forwarder address",
          "_maxSupply": "max supply of tokens to be allowed to be minted per contract",
          "_mintTreasury": "collection treasury address",
          "_mintingDefaults": "default minting values for predefined wave helpers",
          "_name": "name of the ERC721 token",
          "_signAddress": "signer address that is allowed to create mint signatures",
          "_symbol": "token symbol of the ERC721 token"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mint(address,uint256,uint256,bytes)": {
        "custom:event": "{Transfer}",
        "params": {
          "_amount": "number of token to mint",
          "_signature": "signing signature value",
          "_signatureId": "signing signature ID",
          "_wallet": "minting wallet"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "operatorPersonalize(uint256,uint256)": {
        "custom:event": "{Personalized}{MetadataUpdate}",
        "details": "reverts if token does not exist or if not authorized",
        "params": {
          "_personalizationMask": "a mask where each bit has a custom meaning in-game",
          "_tokenId": "what token to personalize"
        }
      },
      "owner()": {
        "details": "returns OwnableUpgradeable.owner()",
        "returns": {
          "_0": "owner of current contract"
        }
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "pause()": {
        "details": "reverts if not owner of the collection or if not un-paused"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "personalizationOf(uint256)": {
        "details": "returns personalizationTraits[_tokenId]",
        "params": {
          "_tokenId": "the token ID to check"
        },
        "returns": {
          "_0": "the personalization data as uint256"
        }
      },
      "personalize(uint256,bytes,uint256,uint256)": {
        "custom:event": "{Personalized}{MetadataUpdate}",
        "details": "after checks, it is reduced to personalizationTraits[_tokenId] = _personalizationMask",
        "params": {
          "_personalizationMask": "a mask where each bit has a custom meaning in-game",
          "_signature": "signing signature",
          "_signatureId": "the ID of the provided signature",
          "_tokenId": "what token to personalize"
        }
      },
      "price(uint256)": {
        "details": "returns waveSingleTokenPrice * _count; Does not check if it is possible      to actually mint that much",
        "params": {
          "_count": "the number of tokens to estimate mint price for"
        },
        "returns": {
          "_0": "price of minting all the tokens"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "reveal(uint256,uint256,bytes)": {
        "custom:event": "{MetadataUpdate}",
        "details": "will revert if owner of token is not caller or if signature is not valid",
        "params": {
          "_signature": "validation signature",
          "_signatureId": "validation signature ID",
          "_tokenId": "the ID belonging to the NFT token for which to emit the event"
        }
      },
      "revokeConfiguratorRole(address)": {
        "details": "reverts if account is zero address or not called by owner",
        "params": {
          "account": "the account address for which the role to be revoked"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "revokeTransformerRole(address)": {
        "details": "reverts if account is zero address or not called by owner",
        "params": {
          "account": "the account address for which the role to be revoked"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See OpenZeppelin {IERC721-safeTransferFrom}"
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See OpenZeppelin {IERC721-safeTransferFrom}"
      },
      "setAllowedExecuteMint(address)": {
        "custom:event": "{AllowedExecuteMintSet}{DefaultMintingValuesSet}",
        "details": "sets allowedToExecuteMint = _address; address must belong to a contract or reverts",
        "params": {
          "_minterToken": "the address that will be allowed to execute the mint function"
        }
      },
      "setAllowlistMint()": {
        "custom:event": "{WaveSetup}",
        "details": "reverts if not authorized"
      },
      "setApprovalForAll(address,bool)": {
        "details": "See OpenZeppelin {IERC721-setApprovalForAll}"
      },
      "setBaseURI(string)": {
        "custom:event": "{BaseURISet}",
        "details": "sets baseTokenURI = baseURI",
        "params": {
          "baseURI": "an URI that will be used as the base for token URI"
        }
      },
      "setMarketingMint()": {
        "custom:event": "{WaveSetup}",
        "details": "reverts if not authorized"
      },
      "setPublicMint()": {
        "custom:event": "{WaveSetup}",
        "details": "reverts if not authorized"
      },
      "setSignAddress(address)": {
        "custom:event": "{SignAddressSet}",
        "details": "sets signAddress = _signAddress; address can't be 0",
        "params": {
          "_signAddress": "new signer address to be set"
        }
      },
      "setTreasury(address)": {
        "custom:event": "{TreasurySet}",
        "details": "sets mintTreasury = _treasury",
        "params": {
          "_treasury": "new treasury address to be saved"
        }
      },
      "setupWave(uint256,uint256,uint256)": {
        "custom:event": "{WaveSetup}",
        "params": {
          "_waveMaxTokensOverall": "the allowed number of tokens to be minted in this wave (cumulative by all minting wallets)",
          "_waveMaxTokensPerWallet": "max tokens to buy, per wallet in a given wave",
          "_waveSingleTokenPrice": "the price to mint a token in a given wave, in wei                              denoted by the allowedToExecuteMint contract"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See OpenZeppelin {IERC721-transferFrom}"
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      },
      "unpause()": {
        "details": "reverts if not owner of the collection or if not paused"
      }
    },
    "stateVariables": {
      "_availableIds": {
        "details": "helper mapping used to determine which IDs are available for minting"
      },
      "_signatureIds": {
        "details": "map used to mark if a specific signatureId was used      values are 0 (default, unused) and 1 (used)      Used to mitigate a possible signature reuse attack"
      }
    },
    "title": "AvatarCollection",
    "version": 1
  },
  "userdoc": {
    "events": {
      "AllowedExecuteMintSet(address)": {
        "notice": "Event emitted when an address was set as allowed to mint"
      },
      "BaseURISet(string)": {
        "notice": "Event emitted when the base token URI for the contract was set or changed"
      },
      "ContractInitialized(string,string,string,address,address,address,uint256,address,address,bool)": {
        "notice": "Event emitted when the contract was initialized."
      },
      "DefaultMintingValuesSet(uint256,uint256,uint256,uint256)": {
        "notice": "Event emitted when the default values used by wave manipulation functions were changed"
      },
      "OwnershipTransferStarted(address,address)": {
        "notice": "event emitted when the ownership transfer routine has been started"
      },
      "Personalized(uint256,uint256)": {
        "notice": "Event emitted when a token personalization was made."
      },
      "SignAddressSet(address)": {
        "notice": "Event emitted when the signer address was set or changed"
      },
      "TokenBurned(uint256,address)": {
        "notice": "event emitted when a token was burned"
      },
      "TokenBurningDisabled()": {
        "notice": "event emitted when token burning was disabled"
      },
      "TokenBurningEnabled()": {
        "notice": "event emitted when token burning was enabled"
      },
      "TreasurySet(address)": {
        "notice": "Event emitted when the treasury address was saved"
      },
      "WaveSetup(uint256,uint256,uint256)": {
        "notice": "Event emitted when a wave was set up"
      }
    },
    "kind": "user",
    "methods": {
      "ADMIN_ROLE()": {
        "notice": "identifier for the ADMIN role. This role is only given to the owner of the contract         and allows for adding other addresses to the CONFIGURATOR and TRANSFORMER role"
      },
      "CONFIGURATOR_ROLE()": {
        "notice": "identifier for the CONFIGURATOR role. Owners of this role can call configuration specific         functions on the avatar contract, including setting base URI and changing minting phase"
      },
      "DEFAULT_MINT_PRICE_FULL()": {
        "notice": "default minting price in full tokens (not WEI) when used, this must be         multiplied by the token \"allowedToExecuteMint\" token decimals"
      },
      "TRANSFORMER_ROLE()": {
        "notice": "identifier for the CONFIGURATOR role. Owners of this role can personalization specific functions         on the avatar contract."
      },
      "acceptOwnership()": {
        "notice": "second part of a 2 step ownership transfer routine.         Also transfers the ADMIN_ROLE as there can only be 1 ADMIN_ROLE"
      },
      "addConfigurator(address)": {
        "notice": "helper function to grant the CONFIGURATOR role to an address"
      },
      "addTransformer(address)": {
        "notice": "helper function to grant the TRANSFORMER role to an address"
      },
      "allowedToExecuteMint()": {
        "notice": "ERC20 contract through which the minting will be done"
      },
      "baseTokenURI()": {
        "notice": "standard base token URL for ERC721 metadata"
      },
      "burn(uint256)": {
        "notice": "Burns `tokenId`. The caller must own `tokenId` or be an approved operator."
      },
      "burnedTokens(address,uint256)": {
        "notice": "burner to list of burned tokens mapping; to see what tokens who burned"
      },
      "burnedTokensCount(address)": {
        "notice": "Gets the number of burned tokens by the indicated owner"
      },
      "burner(uint256)": {
        "notice": "tokenId to burner mapping; saves who burned a specific token"
      },
      "burnerOf(uint256)": {
        "notice": "Returns the burner of the `tokenId`"
      },
      "chain()": {
        "notice": "helper automation function"
      },
      "checkMintAllowed(address,uint256)": {
        "notice": "check if the indicated wallet can mint the indicated amount"
      },
      "constructor": {
        "notice": "mitigate a possible Implementation contract takeover, as indicate by         https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#initializing_the_implementation_contract"
      },
      "didBurnTokens(address)": {
        "notice": "Checks if the indicated owner had burned tokens"
      },
      "disableBurning()": {
        "notice": "disables burning of tokens"
      },
      "enableBurning()": {
        "notice": "enables burning of tokens"
      },
      "indexWave()": {
        "notice": "each wave has an index to help track minting/tokens per wallet"
      },
      "initialize(address,string,string,string,address,address,address,address,uint256,(address,address,bool),(uint256,uint256,uint256,uint256))": {
        "notice": "external entry point initialization function in accordance with the upgradable pattern"
      },
      "isBurnEnabled()": {
        "notice": "flag that gates burning"
      },
      "maxSupply()": {
        "notice": "max token supply"
      },
      "mint(address,uint256,uint256,bytes)": {
        "notice": "token minting function. Price is set by wave and is paid in tokens denoted         by the allowedToExecuteMint contract"
      },
      "mintTreasury()": {
        "notice": "treasury address where mint tokens are sent"
      },
      "mintingDefaults()": {
        "notice": "default are used when calling predefined wave setup functions:         setMarketingMint, setAllowlistMint and setPublicMint         see struct MintingDefaults for more details"
      },
      "operatorPersonalize(uint256,uint256)": {
        "notice": "personalize token traits but can be called by owner or special roles address         Used to change the traits of a token based on an in-game action"
      },
      "owner()": {
        "notice": "returns the owner of the contract"
      },
      "pause()": {
        "notice": "pauses the contract"
      },
      "personalizationOf(uint256)": {
        "notice": "get the personalization of the indicated tokenID"
      },
      "personalizationTraits(uint256)": {
        "notice": "stores the personalization for a tokenId"
      },
      "personalize(uint256,bytes,uint256,uint256)": {
        "notice": "personalize token traits according to the provided personalization bit-mask"
      },
      "price(uint256)": {
        "notice": "get the price of minting the indicated number of tokens for the current wave"
      },
      "renounceOwnership()": {
        "notice": "renounce ownership function, made to revert as a failsafe"
      },
      "reveal(uint256,uint256,bytes)": {
        "notice": "helper function to emit the {MetadataUpdate} event in order for marketplaces to, on demand,         refresh metadata, for the provided token ID. Off-chain, gaming mechanics are done and this         function is ultimately called to signal the end of a reveal."
      },
      "revokeConfiguratorRole(address)": {
        "notice": "helper function to revert the CONFIGURATOR role that was given to an address"
      },
      "revokeTransformerRole(address)": {
        "notice": "helper function to revert the TRANSFORMER role that was given to an address"
      },
      "setAllowedExecuteMint(address)": {
        "notice": "sets which address is allowed to execute the mint function. Also resets default mint price"
      },
      "setAllowlistMint()": {
        "notice": "helper function to set all token configs to that of the allowlist minting phase.         Can be called by owner or specially designated role, CONFIGURATOR.         Uses default values set on contract initialization"
      },
      "setBaseURI(string)": {
        "notice": "sets the base token URI for the contract"
      },
      "setMarketingMint()": {
        "notice": "helper function to set all token configs to that of the marketing minting phase.         Can be called by owner or specially designated role, CONFIGURATOR.         Uses default values set on contract initialization"
      },
      "setPublicMint()": {
        "notice": "helper function to set all token configs to that of the public minting phase.         Can be called by owner or specially designated role, CONFIGURATOR.         Uses default values set on contract initialization"
      },
      "setSignAddress(address)": {
        "notice": "sets the sign address. Emits {SignAddressSet} event"
      },
      "setTreasury(address)": {
        "notice": "saving locally the treasury address"
      },
      "setupWave(uint256,uint256,uint256)": {
        "notice": "function to setup wave parameters. A wave is defined as a combination of allowed number tokens to be         minted in total, per wallet and minting price"
      },
      "signAddress()": {
        "notice": "all signatures must come from this specific address, otherwise are invalid"
      },
      "unpause()": {
        "notice": "unpauses the contract"
      },
      "updateOperatorFilterRegistryAddress(address)": {
        "notice": "Update the address that the contract will make OperatorFilter checks against. When set to the zero         address, checks will be bypassed. OnlyOwner."
      },
      "waveMaxTokensOverall()": {
        "notice": "max tokens to buy per wave, cumulating all addresses"
      },
      "waveMaxTokensPerWallet()": {
        "notice": "max tokens to buy, per wallet in a given wave"
      },
      "waveOwnerToClaimedCounts(address,uint256)": {
        "notice": "mapping of [owner -> wave index -> minted count]"
      },
      "waveSingleTokenPrice()": {
        "notice": "price of one token mint (in the token denoted by the allowedToExecuteMint contract)"
      },
      "waveTotalMinted()": {
        "notice": "number of total minted tokens in the current running wave"
      }
    },
    "notice": "ERC721 contract for future Avatar collections.         Is expected to be initialize via {CollectionFactory} or other similar factories Some features: - upgradable - ownable (2 step transfer) and multi-role support for simplifying logistics - OpenSea royalty compliant - ERC4906 compliant - ERC165 compliant - supports ERC2771 for services like Biconomy - supports \"burn memory\" - keeping track of who burned what token for faster in-game gating checks - minting is only supported via an ERC20 token contract that supports approveAndCall   as mint price is in non-native tokens",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2698,
        "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 2701,
        "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3001,
        "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3059,
        "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4921,
        "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5140,
        "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2190,
        "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
        "label": "_roles",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)2185_storage)"
      },
      {
        "astId": 2485,
        "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2570,
        "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
        "label": "_owner",
        "offset": 0,
        "slot": "201",
        "type": "t_address"
      },
      {
        "astId": 2690,
        "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7701,
        "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "251",
        "type": "t_address"
      },
      {
        "astId": 3089,
        "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
        "label": "_name",
        "offset": 0,
        "slot": "252",
        "type": "t_string_storage"
      },
      {
        "astId": 3091,
        "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
        "label": "_symbol",
        "offset": 0,
        "slot": "253",
        "type": "t_string_storage"
      },
      {
        "astId": 3095,
        "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
        "label": "_owners",
        "offset": 0,
        "slot": "254",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3099,
        "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
        "label": "_balances",
        "offset": 0,
        "slot": "255",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3103,
        "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "256",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3109,
        "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "257",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 4029,
        "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
        "label": "__gap",
        "offset": 0,
        "slot": "258",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 4194,
        "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "302",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 4198,
        "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "303",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4201,
        "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
        "label": "_allTokens",
        "offset": 0,
        "slot": "304",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 4205,
        "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "305",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4537,
        "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
        "label": "__gap",
        "offset": 0,
        "slot": "306",
        "type": "t_array(t_uint256)46_storage"
      },
      {
        "astId": 7986,
        "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
        "label": "burner",
        "offset": 0,
        "slot": "352",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 7992,
        "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
        "label": "burnedTokens",
        "offset": 0,
        "slot": "353",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 7995,
        "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
        "label": "isBurnEnabled",
        "offset": 0,
        "slot": "354",
        "type": "t_bool"
      },
      {
        "astId": 8140,
        "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
        "label": "__gap",
        "offset": 0,
        "slot": "355",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 8146,
        "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "405",
        "type": "t_address"
      },
      {
        "astId": 8150,
        "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
        "label": "__gap",
        "offset": 0,
        "slot": "406",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8450,
        "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
        "label": "operatorFilterRegistry",
        "offset": 0,
        "slot": "455",
        "type": "t_contract(IOperatorFilterRegistry)8433"
      },
      {
        "astId": 2881,
        "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
        "label": "_paused",
        "offset": 20,
        "slot": "455",
        "type": "t_bool"
      },
      {
        "astId": 2986,
        "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
        "label": "__gap",
        "offset": 0,
        "slot": "456",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6089,
        "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
        "label": "maxSupply",
        "offset": 0,
        "slot": "505",
        "type": "t_uint256"
      },
      {
        "astId": 6092,
        "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
        "label": "mintTreasury",
        "offset": 0,
        "slot": "506",
        "type": "t_address"
      },
      {
        "astId": 6095,
        "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
        "label": "baseTokenURI",
        "offset": 0,
        "slot": "507",
        "type": "t_string_storage"
      },
      {
        "astId": 6098,
        "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
        "label": "waveMaxTokensOverall",
        "offset": 0,
        "slot": "508",
        "type": "t_uint256"
      },
      {
        "astId": 6101,
        "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
        "label": "waveMaxTokensPerWallet",
        "offset": 0,
        "slot": "509",
        "type": "t_uint256"
      },
      {
        "astId": 6104,
        "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
        "label": "waveSingleTokenPrice",
        "offset": 0,
        "slot": "510",
        "type": "t_uint256"
      },
      {
        "astId": 6107,
        "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
        "label": "waveTotalMinted",
        "offset": 0,
        "slot": "511",
        "type": "t_uint256"
      },
      {
        "astId": 6114,
        "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
        "label": "waveOwnerToClaimedCounts",
        "offset": 0,
        "slot": "512",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 6117,
        "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
        "label": "indexWave",
        "offset": 0,
        "slot": "513",
        "type": "t_uint256"
      },
      {
        "astId": 6121,
        "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
        "label": "mintingDefaults",
        "offset": 0,
        "slot": "514",
        "type": "t_struct(MintingDefaults)6075_storage"
      },
      {
        "astId": 6124,
        "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
        "label": "allowedToExecuteMint",
        "offset": 0,
        "slot": "518",
        "type": "t_address"
      },
      {
        "astId": 6127,
        "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
        "label": "signAddress",
        "offset": 0,
        "slot": "519",
        "type": "t_address"
      },
      {
        "astId": 6132,
        "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
        "label": "personalizationTraits",
        "offset": 0,
        "slot": "520",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 6137,
        "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
        "label": "_signatureIds",
        "offset": 0,
        "slot": "521",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 6142,
        "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
        "label": "_availableIds",
        "offset": 0,
        "slot": "522",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7674,
        "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
        "label": "__gap",
        "offset": 0,
        "slot": "523",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)46_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[46]",
        "numberOfBytes": "1472"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IOperatorFilterRegistry)8433": {
        "encoding": "inplace",
        "label": "contract IOperatorFilterRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)2185_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)2185_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(MintingDefaults)6075_storage": {
        "encoding": "inplace",
        "label": "struct AvatarCollection.MintingDefaults",
        "members": [
          {
            "astId": 6068,
            "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
            "label": "mintPrice",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6070,
            "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
            "label": "maxPublicTokensPerWallet",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6072,
            "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
            "label": "maxAllowlistTokensPerWallet",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6074,
            "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
            "label": "maxMarketingTokens",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(RoleData)2185_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 2182,
            "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 2184,
            "contract": "src/solc_0.8.15/avatar/AvatarCollection.sol:AvatarCollection",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}