{
  "address": "0xaBCFa7350Bf8f6d43F9e559E2705F86FE8504988",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IAssetERC721",
          "name": "assetERC721",
          "type": "address"
        }
      ],
      "name": "AssetERC721Set",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bouncer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "Bouncer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldBouncerAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newBouncerAdmin",
          "type": "address"
        }
      ],
      "name": "BouncerAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newId",
          "type": "uint256"
        }
      ],
      "name": "Extraction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "superOperator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "SuperOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_assetERC721",
      "outputs": [
        {
          "internalType": "contract IAssetERC721",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_childChainManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "changeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newBouncerAdmin",
          "type": "address"
        }
      ],
      "name": "changeBouncerAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "collectionIndexOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "collectionOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "depositData",
          "type": "bytes"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "doesHashExist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "extractERC721From",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBouncerAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getChainIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bouncerAdmin",
          "type": "address"
        },
        {
          "internalType": "contract IAssetERC721",
          "name": "assetERC721",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "chainIndex",
          "type": "uint8"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bouncerAdmin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "childChainManager",
          "type": "address"
        },
        {
          "internalType": "contract IAssetERC721",
          "name": "polygonAssetERC721",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "chainIndex",
          "type": "uint8"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isOperator",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "isBouncer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "isCollection",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "isSuperOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "metadataHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint40",
          "name": "packId",
          "type": "uint40"
        },
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mintDeficit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint40",
          "name": "packId",
          "type": "uint40"
        },
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "supplies",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "rarityPack",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mintMultiple",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAllFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAssetERC721",
          "name": "assetERC721",
          "type": "address"
        }
      ],
      "name": "setAssetERC721",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bouncer",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setBouncer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "superOperator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setSuperOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "id",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "withdrawBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawSingle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd7376db482a034a54065fb0781eaf63bf224b298c1628341ee50c99450b9a673",
  "receipt": {
    "to": null,
    "from": "0x5F890c9522dCE5670d741D4277BFCC2d9cA8Af02",
    "contractAddress": "0xaBCFa7350Bf8f6d43F9e559E2705F86FE8504988",
    "transactionIndex": 4,
    "gasUsed": "4239837",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000010000000000002000000000020000000000000000000008000000000000000000000000000000000000000000000000000000000800000000000000000000100000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000200000200000000000000000000000000000000000000000000000000000000000004000000000000000000001000000000000000000000000000000108000001000000000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0xdf4b74a97d8881024e98a69432afbf83c9fbeeae7e3d43f10531d36524a8ebdc",
    "transactionHash": "0xd7376db482a034a54065fb0781eaf63bf224b298c1628341ee50c99450b9a673",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 27564518,
        "transactionHash": "0xd7376db482a034a54065fb0781eaf63bf224b298c1628341ee50c99450b9a673",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001ffaca5ea0ac4fe00000000000000000000000000000000000000000000000003b54785fd268926000000000000000000000000000000000000000000000605135e1f18f40f1f9900000000000000000000000000000000000000000000000001b59ae0131bc428000000000000000000000000000000000000000000000605155dcbbede19e497",
        "logIndex": 14,
        "blockHash": "0xdf4b74a97d8881024e98a69432afbf83c9fbeeae7e3d43f10531d36524a8ebdc"
      }
    ],
    "blockNumber": 27564518,
    "cumulativeGasUsed": "4610821",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "65e08b938528b163bea66d16d1e23da8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IAssetERC721\",\"name\":\"assetERC721\",\"type\":\"address\"}],\"name\":\"AssetERC721Set\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bouncer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"Bouncer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldBouncerAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newBouncerAdmin\",\"type\":\"address\"}],\"name\":\"BouncerAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newId\",\"type\":\"uint256\"}],\"name\":\"Extraction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"superOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SuperOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_assetERC721\",\"outputs\":[{\"internalType\":\"contract IAssetERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_childChainManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBouncerAdmin\",\"type\":\"address\"}],\"name\":\"changeBouncerAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"collectionIndexOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"collectionOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"depositData\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"doesHashExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"extractERC721From\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBouncerAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getChainIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bouncerAdmin\",\"type\":\"address\"},{\"internalType\":\"contract IAssetERC721\",\"name\":\"assetERC721\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"chainIndex\",\"type\":\"uint8\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bouncerAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"childChainManager\",\"type\":\"address\"},{\"internalType\":\"contract IAssetERC721\",\"name\":\"polygonAssetERC721\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"chainIndex\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOperator\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isBouncer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isCollection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isSuperOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"metadataHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"packId\",\"type\":\"uint40\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintDeficit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"packId\",\"type\":\"uint40\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"supplies\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"rarityPack\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintMultiple\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAllFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAssetERC721\",\"name\":\"assetERC721\",\"type\":\"address\"}],\"name\":\"setAssetERC721\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bouncer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setBouncer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"superOperator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setSuperOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"id\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"withdrawBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawSingle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"AssetERC1155 will be minted only on L2 and can be transferred to L1 and not minted on L1.This contract supports meta transactions.This contract is final, don't inherit from it.\",\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"params\":{\"id\":\"the token type of which to get the balance of.\",\"owner\":\"The address of the token holder.\"},\"returns\":{\"_0\":\"the balance of `owner` for the token type `id`.\"}},\"balanceOfBatch(address[],uint256[])\":{\"params\":{\"ids\":\"ids of each token type to query.\",\"owners\":\"the addresses of the token holders queried.\"},\"returns\":{\"_0\":\"the balance of each `owners` for each token type `ids`.\"}},\"burn(uint256,uint256)\":{\"params\":{\"amount\":\"amount of token to burn.\",\"id\":\"token type which will be burnt.\"}},\"burnFrom(address,uint256,uint256)\":{\"params\":{\"amount\":\"amount of token to burn.\",\"from\":\"address whose token is to be burnt.\",\"id\":\"token type which will be burnt.\"}},\"changeAdmin(address)\":{\"details\":\"Change the administrator to be `newAdmin`.\",\"params\":{\"newAdmin\":\"The address of the new administrator.\"}},\"changeBouncerAdmin(address)\":{\"params\":{\"newBouncerAdmin\":\"address of the new minting administrator.\"}},\"collectionIndexOf(uint256)\":{\"params\":{\"id\":\"the token to get the index of.\"},\"returns\":{\"_0\":\"the index/order at which the token `id` was minted in a collection.\"}},\"collectionOf(uint256)\":{\"params\":{\"id\":\"the token to get the collection of.\"},\"returns\":{\"_0\":\"the collection the NFT is part of.\"}},\"deposit(address,bytes)\":{\"details\":\"Should be callable only by ChildChainManager.Should handle deposit by minting the required tokenId(s) for user.Minting can also be done by other functions.\",\"params\":{\"depositData\":\"abi encoded tokenIds. Batch deposit also supported.\",\"user\":\"user address for whom deposit is being done.\"}},\"doesHashExist(uint256)\":{\"details\":\"if IS_NFT > 0 then PACK_NUM_FT_TYPES may be 0\",\"params\":{\"id\":\"the token to check.\"},\"returns\":{\"_0\":\"bool whether a given id has a valid structure.\"}},\"extractERC721From(address,uint256,address)\":{\"details\":\"Extraction is limited to bouncers.\",\"params\":{\"id\":\"the token type to extract from.\",\"sender\":\"address which own the token to be extracted.\",\"to\":\"address which will receive the token.\"},\"returns\":{\"_0\":\"newId the id of the newly minted NFT.\"}},\"getAdmin()\":{\"details\":\"Get the current administrator of this contract.\",\"returns\":{\"_0\":\"The current administrator of this contract.\"}},\"getBouncerAdmin()\":{\"returns\":{\"_0\":\"the current minting administrator in charge of minting rights.\"}},\"getChainIndex(uint256)\":{\"details\":\"take care not to confuse chainIndex with chain ID.\",\"params\":{\"id\":\"the token id to query.\"},\"returns\":{\"_0\":\"chainIndex the chainIndex that the token was minted on originally.\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"operator\":\"address of authorized operator.\",\"owner\":\"the owner of the tokens.\"},\"returns\":{\"isOperator\":\"true if the operator is approved, false if not.\"}},\"isBouncer(address)\":{\"params\":{\"who\":\"The address to query.\"},\"returns\":{\"_0\":\"whether the address has minting rights.\"}},\"isCollection(uint256)\":{\"params\":{\"id\":\"collectionId to check.\"},\"returns\":{\"_0\":\"whether the id is a collection.\"}},\"isSuperOperator(address)\":{\"params\":{\"who\":\"The address to query.\"},\"returns\":{\"_0\":\"whether the address has superOperator rights.\"}},\"mint(address,uint256,uint256,bytes)\":{\"details\":\"Should be used only by PolygonAssetERC1155Tunnel.This function can be called when the token ID exists on another layer.Encoded bytes32 metadata hash must be provided as data.\",\"params\":{\"data\":\"token metadata.\",\"id\":\"the id of the newly minted token.\",\"owner\":\"address that will receive the tokens.\",\"supply\":\"number of tokens minted for that token type.\"}},\"mint(address,uint40,bytes32,uint256,address,bytes)\":{\"details\":\"For this function it is not required to provide data.\",\"params\":{\"creator\":\"address of the creator of the token.\",\"data\":\"extra data to accompany the minting call.\",\"hash\":\"hash of an IPFS cidv1 folder that contains the metadata of the token type in the file 0.json.\",\"owner\":\"address that will receive the tokens.\",\"packId\":\"unique packId for that token.\",\"supply\":\"number of tokens minted for that token type.\"},\"returns\":{\"id\":\"the id of the newly minted token type.\"}},\"mintDeficit(address,uint256,uint256)\":{\"details\":\"This mint calls for add instead of replace in packedTokenBalance\",\"params\":{\"account\":\"address of the ownerof tokens.\",\"amount\":\"quantity of the token to be minted.\",\"id\":\"id of the token to be minted.\"}},\"mintMultiple(address,uint40,bytes32,uint256[],bytes,address,bytes)\":{\"details\":\"For this function it is not required to provide data.\",\"params\":{\"creator\":\"address of the creator of the tokens.\",\"data\":\"extra data to accompany the minting call.\",\"hash\":\"hash of an IPFS cidv1 folder that contains the metadata of each token type in the files: 0.json, 1.json, 2.json, etc...\",\"owner\":\"address that will receive the tokens.\",\"packId\":\"unique packId for the tokens.\",\"rarityPack\":\"rarity power of each token types packed into 2 bits each.\",\"supplies\":\"number of tokens minted for each token type.\"},\"returns\":{\"ids\":\"the ids of each newly minted token types.\"}},\"name()\":{\"returns\":{\"_name\":\"the name of the tokens.\"}},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"call data should be optimized to order ids so packedBalance can be used efficiently.\",\"params\":{\"data\":\"aditional data accompanying the transfer.\",\"from\":\"address from which tokens are transfered.\",\"ids\":\"ids of each token type transfered.\",\"to\":\"address to which the token will be transfered.\",\"values\":\"amount of each token type transfered.\"}},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"params\":{\"data\":\"aditional data accompanying the transfer.\",\"from\":\"address from which tokens are transfered.\",\"id\":\"the token type transfered.\",\"to\":\"address to which the token will be transfered.\",\"value\":\"amount of token transfered.\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"approved\":\"whether to approve or revoke\",\"operator\":\"address which will be granted rights to transfer all tokens of the caller.\"}},\"setApprovalForAllFor(address,address,bool)\":{\"details\":\"used for Meta Transaction (from metaTransactionContract).\",\"params\":{\"approved\":\"whether to approve or revoke.\",\"operator\":\"address which will be granted rights to transfer all token owned by `sender`.\",\"sender\":\"address which grant approval.\"}},\"setAssetERC721(address)\":{\"params\":{\"assetERC721\":\"the contract address to set the ERC721 contract to.\"},\"returns\":{\"_0\":\"true if the operation completes successfully.\"}},\"setBouncer(address,bool)\":{\"params\":{\"bouncer\":\"address that will be given/removed minting bouncer rights.\",\"enabled\":\"set whether the address is enabled or disabled as a minting bouncer.\"}},\"setSuperOperator(address,bool)\":{\"params\":{\"enabled\":\"set whether the superOperator is enabled or disabled.\",\"superOperator\":\"address that will be given/removed superOperator right.\"}},\"supportsInterface(bytes4)\":{\"params\":{\"id\":\"the interface identifier, as specified in ERC-165.\"},\"returns\":{\"_0\":\"`true` if the contract implements `id`.\"}},\"symbol()\":{\"returns\":{\"_symbol\":\"the symbol of the tokens.\"}},\"uri(uint256)\":{\"params\":{\"id\":\"ERC1155 token to get the uri of.\"},\"returns\":{\"_0\":\"URI string\"}},\"withdrawBatch(uint256[],uint256[])\":{\"details\":\"Should burn user's tokens. This transaction will be verified when exiting on root chain.\",\"params\":{\"amounts\":\"amounts to withdraw.\",\"ids\":\"ids to withdraw.\"}},\"withdrawSingle(uint256,uint256)\":{\"details\":\"Should burn user's tokens. This transaction will be verified when exiting on root chain.\",\"params\":{\"amount\":\"amount to withdraw.\",\"id\":\"id to withdraw.\"}}},\"title\":\"This contract is for AssetERC1155 which can be minted by a minter role.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balanceOf(address,uint256)\":{\"notice\":\"Get the balance of `owner` for the token type `id`.\"},\"balanceOfBatch(address[],uint256[])\":{\"notice\":\"Get the balance of `owners` for each token type `ids`.\"},\"burn(uint256,uint256)\":{\"notice\":\"Burns `amount` tokens of type `id`.\"},\"burnFrom(address,uint256,uint256)\":{\"notice\":\"Burns `amount` tokens of type `id` from `from`.\"},\"changeBouncerAdmin(address)\":{\"notice\":\"Change the minting administrator to be `newBouncerAdmin`.\"},\"collectionIndexOf(uint256)\":{\"notice\":\"Gives the index at which an NFT was minted in a collection : first of a collection get the zero index.\"},\"collectionOf(uint256)\":{\"notice\":\"Gives the collection a specific token belongs to.\"},\"deposit(address,bytes)\":{\"notice\":\"This function is called when a token is deposited to the root chain.\"},\"doesHashExist(uint256)\":{\"notice\":\"Whether or not an ERC1155 or ERC721 tokenId has a valid structure and the metadata hash exists.\"},\"extractERC721From(address,uint256,address)\":{\"notice\":\"Extracts an EIP-721 Asset from an EIP-1155 Asset.\"},\"getBouncerAdmin()\":{\"notice\":\"Returns the current administrator in charge of minting rights.\"},\"getChainIndex(uint256)\":{\"notice\":\"Queries the chainIndex that a token was minted on originally.\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Queries the approval status of `operator` for owner `owner`.\"},\"isBouncer(address)\":{\"notice\":\"check whether address `who` is given minting bouncer rights.\"},\"isCollection(uint256)\":{\"notice\":\"Return wether the id is a collection\"},\"isSuperOperator(address)\":{\"notice\":\"check whether address `who` is given superOperator rights.\"},\"mint(address,uint256,uint256,bytes)\":{\"notice\":\"Creates `amount` tokens of token type `id`, and assigns them to `account`.\"},\"mint(address,uint40,bytes32,uint256,address,bytes)\":{\"notice\":\"Mint a token type for `creator` on slot `packId`.\"},\"mintDeficit(address,uint256,uint256)\":{\"notice\":\"function to be called by tunnel to mint deficit of minted tokens\"},\"mintMultiple(address,uint40,bytes32,uint256[],bytes,address,bytes)\":{\"notice\":\"Mint multiple token types for `creator` on slot `packId`.\"},\"name()\":{\"notice\":\"A descriptive name for the collection of tokens in this contract.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Transfers `values` tokens of type `ids` from  `from` to `to` (with safety call).\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"notice\":\"Transfers `value` tokens of type `id` from  `from` to `to`  (with safety call).\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Enable or disable approval for `operator` to manage all of the caller's tokens.\"},\"setApprovalForAllFor(address,address,bool)\":{\"notice\":\"Enable or disable approval for `operator` to manage all `sender`'s tokens.\"},\"setAssetERC721(address)\":{\"notice\":\"Set the ERC721 contract.\"},\"setBouncer(address,bool)\":{\"notice\":\"Enable or disable the ability of `bouncer` to mint tokens (minting bouncer rights).\"},\"setSuperOperator(address,bool)\":{\"notice\":\"Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights).\"},\"supportsInterface(bytes4)\":{\"notice\":\"Query if a contract implements interface `id`.\"},\"symbol()\":{\"notice\":\"An abbreviated name for the collection of tokens in this contract.\"},\"uri(uint256)\":{\"notice\":\"A distinct Uniform Resource Identifier (URI) for a given ERC1155 asset.\"},\"withdrawBatch(uint256[],uint256[])\":{\"notice\":\"called when user wants to batch withdraw tokens back to root chain.\"},\"withdrawSingle(uint256,uint256)\":{\"notice\":\"called when user wants to withdraw single token back to root chain.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/solc_0.8/polygon/child/asset/PolygonAssetERC1155.sol\":\"PolygonAssetERC1155\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-0.8/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xc743d2235b8854045c308d2f8f1ed88efed6c2bebf2b7a4a51ea42480c82e566\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"src/solc_0.8/asset/libraries/ERC1155ERC721Helper.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nlibrary ERC1155ERC721Helper {\\n    bytes32 private constant base32Alphabet = 0x6162636465666768696A6B6C6D6E6F707172737475767778797A323334353637;\\n\\n    uint256 public constant CREATOR_OFFSET_MULTIPLIER = uint256(2)**(256 - 160);\\n    uint256 public constant IS_NFT_OFFSET_MULTIPLIER = uint256(2)**(256 - 160 - 1);\\n    uint256 public constant CHAIN_INDEX_OFFSET_MULTIPLIER = uint256(2)**(256 - 160 - 1 - 8);\\n    uint256 public constant PACK_ID_OFFSET_MULTIPLIER = uint256(2)**(256 - 160 - 1 - 32 - 40);\\n    uint256 public constant PACK_NUM_FT_TYPES_OFFSET_MULTIPLIER = uint256(2)**(256 - 160 - 1 - 32 - 40 - 12);\\n    uint256 public constant NFT_INDEX_OFFSET = 63;\\n\\n    uint256 public constant IS_NFT = 0x0000000000000000000000000000000000000000800000000000000000000000;\\n    uint256 public constant NOT_IS_NFT = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFFFFFFFFFFF;\\n    uint256 public constant NFT_INDEX = 0x0000000000000000000000000000000000000000007FFFFF8000000000000000;\\n    uint256 public constant NOT_NFT_INDEX = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8000007FFFFFFFFFFFFFFF;\\n    uint256 public constant URI_ID = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000007FFFFFFFFFFFF800;\\n    uint256 public constant PACK_ID = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000007FFFFFFFFF800000;\\n    uint256 public constant PACK_INDEX = 0x00000000000000000000000000000000000000000000000000000000000007FF;\\n    uint256 public constant PACK_NUM_FT_TYPES = 0x00000000000000000000000000000000000000000000000000000000007FF800;\\n    uint256 public constant CHAIN_INDEX = 0x00000000000000000000000000000000000000007F8000000000000000000000;\\n    uint256 public constant NOT_CHAIN_INDEX = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF807FFFFFFFFFFFFFFFFFFFFF;\\n\\n    uint256 public constant MAX_SUPPLY = uint256(2)**32 - 1;\\n    uint256 public constant MAX_PACK_SIZE = uint256(2)**11;\\n    uint256 public constant MAX_NUM_FT = uint256(2)**12;\\n\\n    function toFullURI(bytes32 hash, uint256 id) external pure returns (string memory) {\\n        return string(abi.encodePacked(\\\"ipfs://bafybei\\\", hash2base32(hash), \\\"/\\\", uint2str(id & PACK_INDEX), \\\".json\\\"));\\n    }\\n\\n    // solium-disable-next-line security/no-assign-params\\n    function hash2base32(bytes32 hash) public pure returns (string memory _uintAsString) {\\n        uint256 _i = uint256(hash);\\n        uint256 k = 52;\\n        bytes memory bstr = new bytes(k);\\n        bstr[--k] = base32Alphabet[uint8((_i % 8) << 2)]; // uint8 s = uint8((256 - skip) % 5);  // (_i % (2**s)) << (5-s)\\n        _i /= 8;\\n        while (k > 0) {\\n            bstr[--k] = base32Alphabet[_i % 32];\\n            _i /= 32;\\n        }\\n        return string(bstr);\\n    }\\n\\n    // solium-disable-next-line security/no-assign-params\\n    function uint2str(uint256 _i) public pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            bstr[--k] = bytes1(uint8(48 + uint8(_i % 10)));\\n            _i /= 10;\\n        }\\n\\n        return string(bstr);\\n    }\\n}\\n\",\"keccak256\":\"0x0fa0ba1d7e2e46c9fb7e1029731be7ddbb648c6909c08967d7106f5d4956d6b3\",\"license\":\"MIT\"},\"src/solc_0.8/assetERC1155/AssetBaseERC1155.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-0.8/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport \\\"../common/interfaces/IAssetERC721.sol\\\";\\nimport \\\"../common/Libraries/ObjectLib32.sol\\\";\\nimport \\\"../common/BaseWithStorage/WithSuperOperators.sol\\\";\\nimport \\\"../asset/libraries/ERC1155ERC721Helper.sol\\\";\\n\\n// solhint-disable max-states-count\\nabstract contract AssetBaseERC1155 is WithSuperOperators, IERC1155 {\\n    using Address for address;\\n    using ObjectLib32 for ObjectLib32.Operations;\\n    using ObjectLib32 for uint256;\\n\\n    bytes4 private constant ERC1155_IS_RECEIVER = 0x4e2312e0;\\n    bytes4 private constant ERC1155_RECEIVED = 0xf23a6e61;\\n    bytes4 private constant ERC1155_BATCH_RECEIVED = 0xbc197c81;\\n\\n    mapping(address => uint256) private _numNFTPerAddress; // erc721\\n    mapping(uint256 => uint256) private _owners; // erc721\\n    mapping(address => mapping(uint256 => uint256)) private _packedTokenBalance; // erc1155\\n    mapping(address => mapping(address => bool)) private _operatorsForAll; // erc721 and erc1155\\n    mapping(uint256 => address) private _erc721operators; // erc721\\n    mapping(uint256 => bytes32) internal _metadataHash; // erc721 and erc1155\\n    mapping(uint256 => bytes) internal _rarityPacks; // rarity configuration per packs (2 bits per Asset) *DEPRECATED*\\n    mapping(uint256 => uint32) private _nextCollectionIndex; // extraction\\n\\n    // @note : Deprecated.\\n    mapping(address => address) private _creatorship; // creatorship transfer // deprecated\\n\\n    mapping(address => bool) private _bouncers; // the contracts allowed to mint\\n\\n    // @note : Deprecated.\\n    mapping(address => bool) private _metaTransactionContracts;\\n\\n    address private _bouncerAdmin;\\n\\n    bool internal _init;\\n\\n    bytes4 internal constant ERC165ID = 0x01ffc9a7;\\n\\n    uint256 internal _initBits;\\n    address internal _predicate; // used in place of polygon's `PREDICATE_ROLE`\\n\\n    uint8 internal _chainIndex; // modify this for l2\\n\\n    address internal _trustedForwarder;\\n\\n    IAssetERC721 public _assetERC721;\\n\\n    uint256[20] private __gap;\\n    // solhint-enable max-states-count\\n\\n    event BouncerAdminChanged(address indexed oldBouncerAdmin, address indexed newBouncerAdmin);\\n    event Bouncer(address indexed bouncer, bool indexed enabled);\\n    event Extraction(uint256 indexed id, uint256 indexed newId);\\n    event AssetERC721Set(IAssetERC721 indexed assetERC721);\\n\\n    function init(\\n        address trustedForwarder,\\n        address admin,\\n        address bouncerAdmin,\\n        IAssetERC721 assetERC721,\\n        uint8 chainIndex\\n    ) public {\\n        // one-time init of bitfield's previous versions\\n        _checkInit(1);\\n        _admin = admin;\\n        _bouncerAdmin = bouncerAdmin;\\n        _assetERC721 = assetERC721;\\n        __ERC2771Handler_initialize(trustedForwarder);\\n        _chainIndex = chainIndex;\\n    }\\n\\n    /// @notice Change the minting administrator to be `newBouncerAdmin`.\\n    /// @param newBouncerAdmin address of the new minting administrator.\\n    function changeBouncerAdmin(address newBouncerAdmin) external {\\n        require(_msgSender() == _bouncerAdmin, \\\"!BOUNCER_ADMIN\\\");\\n        require(newBouncerAdmin != address(0), \\\"AssetBaseERC1155: new bouncer admin can't be zero address\\\");\\n        emit BouncerAdminChanged(_bouncerAdmin, newBouncerAdmin);\\n        _bouncerAdmin = newBouncerAdmin;\\n    }\\n\\n    /// @notice Enable or disable the ability of `bouncer` to mint tokens (minting bouncer rights).\\n    /// @param bouncer address that will be given/removed minting bouncer rights.\\n    /// @param enabled set whether the address is enabled or disabled as a minting bouncer.\\n    function setBouncer(address bouncer, bool enabled) external {\\n        require(_msgSender() == _bouncerAdmin, \\\"!BOUNCER_ADMIN\\\");\\n        _bouncers[bouncer] = enabled;\\n        emit Bouncer(bouncer, enabled);\\n    }\\n\\n    /// @notice Transfers `value` tokens of type `id` from  `from` to `to`  (with safety call).\\n    /// @param from address from which tokens are transfered.\\n    /// @param to address to which the token will be transfered.\\n    /// @param id the token type transfered.\\n    /// @param value amount of token transfered.\\n    /// @param data aditional data accompanying the transfer.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external override {\\n        require(to != address(0), \\\"TO==0\\\");\\n        require(from != address(0), \\\"FROM==0\\\");\\n        bool success = _transferFrom(from, to, id, value);\\n        if (success) {\\n            require(_checkOnERC1155Received(_msgSender(), from, to, id, value, data), \\\"1155_TRANSFER_REJECTED\\\");\\n        }\\n    }\\n\\n    /// @notice Transfers `values` tokens of type `ids` from  `from` to `to` (with safety call).\\n    /// @dev call data should be optimized to order ids so packedBalance can be used efficiently.\\n    /// @param from address from which tokens are transfered.\\n    /// @param to address to which the token will be transfered.\\n    /// @param ids ids of each token type transfered.\\n    /// @param values amount of each token type transfered.\\n    /// @param data aditional data accompanying the transfer.\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external override {\\n        require(ids.length == values.length, \\\"MISMATCHED_ARR_LEN\\\");\\n        require(to != address(0), \\\"TO==0\\\");\\n        require(from != address(0), \\\"FROM==0\\\");\\n        address msgSender = _msgSender();\\n        bool authorized = from == msgSender || isApprovedForAll(from, msgSender);\\n\\n        _batchTransferFrom(from, to, ids, values, authorized);\\n        emit TransferBatch(msgSender, from, to, ids, values);\\n        require(_checkOnERC1155BatchReceived(msgSender, from, to, ids, values, data), \\\"1155_TRANSFER_REJECTED\\\");\\n    }\\n\\n    /// @notice Enable or disable approval for `operator` to manage all `sender`'s tokens.\\n    /// @dev used for Meta Transaction (from metaTransactionContract).\\n    /// @param sender address which grant approval.\\n    /// @param operator address which will be granted rights to transfer all token owned by `sender`.\\n    /// @param approved whether to approve or revoke.\\n    function setApprovalForAllFor(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) external {\\n        require(sender == _msgSender() || _superOperators[_msgSender()], \\\"!AUTHORIZED\\\");\\n        _setApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @notice Enable or disable approval for `operator` to manage all of the caller's tokens.\\n    /// @param operator address which will be granted rights to transfer all tokens of the caller.\\n    /// @param approved whether to approve or revoke\\n    function setApprovalForAll(address operator, bool approved) external override(IERC1155) {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /// @notice Returns the current administrator in charge of minting rights.\\n    /// @return the current minting administrator in charge of minting rights.\\n    function getBouncerAdmin() external view returns (address) {\\n        return _bouncerAdmin;\\n    }\\n\\n    /// @notice check whether address `who` is given minting bouncer rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has minting rights.\\n    function isBouncer(address who) public view returns (bool) {\\n        return _bouncers[who];\\n    }\\n\\n    /// @notice Get the balance of `owners` for each token type `ids`.\\n    /// @param owners the addresses of the token holders queried.\\n    /// @param ids ids of each token type to query.\\n    /// @return the balance of each `owners` for each token type `ids`.\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids)\\n        external\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(owners.length == ids.length, \\\"ARG_LENGTH_MISMATCH\\\");\\n        uint256[] memory balances = new uint256[](ids.length);\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            balances[i] = balanceOf(owners[i], ids[i]);\\n        }\\n        return balances;\\n    }\\n\\n    /// @notice A descriptive name for the collection of tokens in this contract.\\n    /// @return _name the name of the tokens.\\n    function name() external pure returns (string memory _name) {\\n        return \\\"Sandbox's ASSETs\\\";\\n    }\\n\\n    /// @notice An abbreviated name for the collection of tokens in this contract.\\n    /// @return _symbol the symbol of the tokens.\\n    function symbol() external pure returns (string memory _symbol) {\\n        return \\\"ASSET\\\";\\n    }\\n\\n    /// @notice Query if a contract implements interface `id`.\\n    /// @param id the interface identifier, as specified in ERC-165.\\n    /// @return `true` if the contract implements `id`.\\n    function supportsInterface(bytes4 id) external pure override returns (bool) {\\n        return\\n            id == 0x01ffc9a7 || //ERC165\\n            id == 0xd9b67a26 || // ERC1155\\n            id == 0x0e89341c || // ERC1155 metadata\\n            id == 0x572b6c05; // ERC2771\\n    }\\n\\n    /// Collection methods for ERC721s extracted from an ERC1155 -----------------------------------------------------\\n\\n    /// @notice Gives the collection a specific token belongs to.\\n    /// @param id the token to get the collection of.\\n    /// @return the collection the NFT is part of.\\n    function collectionOf(uint256 id) public view returns (uint256) {\\n        require(doesHashExist(id), \\\"INVALID_ID\\\"); // Note: doesHashExist must track ERC721s\\n        uint256 collectionId = id & ERC1155ERC721Helper.NOT_NFT_INDEX & ERC1155ERC721Helper.NOT_IS_NFT;\\n        require(doesHashExist(collectionId), \\\"UNMINTED_COLLECTION\\\");\\n        return collectionId;\\n    }\\n\\n    /// @notice Return wether the id is a collection\\n    /// @param id collectionId to check.\\n    /// @return whether the id is a collection.\\n    function isCollection(uint256 id) external view returns (bool) {\\n        uint256 collectionId = id & ERC1155ERC721Helper.NOT_NFT_INDEX & ERC1155ERC721Helper.NOT_IS_NFT;\\n        return doesHashExist(collectionId);\\n    }\\n\\n    /// @notice Gives the index at which an NFT was minted in a collection : first of a collection get the zero index.\\n    /// @param id the token to get the index of.\\n    /// @return the index/order at which the token `id` was minted in a collection.\\n    function collectionIndexOf(uint256 id) external view returns (uint256) {\\n        collectionOf(id); // this check if id and collection indeed was ever minted\\n        return uint24((id & ERC1155ERC721Helper.NFT_INDEX) >> ERC1155ERC721Helper.NFT_INDEX_OFFSET);\\n    }\\n\\n    /// end collection methods ---------------------------------------------------------------------------------------\\n\\n    /// @notice Whether or not an ERC1155 or ERC721 tokenId has a valid structure and the metadata hash exists.\\n    /// @param id the token to check.\\n    /// @return bool whether a given id has a valid structure.\\n    /// @dev if IS_NFT > 0 then PACK_NUM_FT_TYPES may be 0\\n    function doesHashExist(uint256 id) public view returns (bool) {\\n        return (((id & ERC1155ERC721Helper.PACK_INDEX) <=\\n            ((id & ERC1155ERC721Helper.PACK_NUM_FT_TYPES) / ERC1155ERC721Helper.PACK_NUM_FT_TYPES_OFFSET_MULTIPLIER)) &&\\n            _metadataHash[id & ERC1155ERC721Helper.URI_ID] != 0);\\n    }\\n\\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given ERC1155 asset.\\n    /// @param id ERC1155 token to get the uri of.\\n    /// @return URI string\\n    function uri(uint256 id) public view returns (string memory) {\\n        require(doesHashExist(id), \\\"INVALID_ID\\\"); // prevent returning invalid uri\\n        return ERC1155ERC721Helper.toFullURI(_metadataHash[id & ERC1155ERC721Helper.URI_ID], id);\\n    }\\n\\n    /// @notice Get the balance of `owner` for the token type `id`.\\n    /// @param owner The address of the token holder.\\n    /// @param id the token type of which to get the balance of.\\n    /// @return the balance of `owner` for the token type `id`.\\n    function balanceOf(address owner, uint256 id) public view override returns (uint256) {\\n        require(doesHashExist(id), \\\"INVALID_ID\\\");\\n        (uint256 bin, uint256 index) = id.getTokenBinIndex();\\n        return _packedTokenBalance[owner][bin].getValueInBin(index);\\n    }\\n\\n    /// @notice Extracts an EIP-721 Asset from an EIP-1155 Asset.\\n    /// @dev Extraction is limited to bouncers.\\n    /// @param sender address which own the token to be extracted.\\n    /// @param id the token type to extract from.\\n    /// @param to address which will receive the token.\\n    /// @return newId the id of the newly minted NFT.\\n    function extractERC721From(\\n        address sender,\\n        uint256 id,\\n        address to\\n    ) external returns (uint256) {\\n        require(sender == _msgSender() || isApprovedForAll(sender, _msgSender()), \\\"!AUTHORIZED\\\");\\n        require(isBouncer(_msgSender()), \\\"!BOUNCER\\\");\\n        require(to != address(0), \\\"TO==0\\\");\\n        require(id & ERC1155ERC721Helper.IS_NFT == 0, \\\"UNIQUE_ERC1155\\\");\\n        uint24 tokenCollectionIndex = uint24(_nextCollectionIndex[id]) + 1;\\n        _nextCollectionIndex[id] = tokenCollectionIndex;\\n        string memory metaData = uri(id);\\n        uint256 newId =\\n            id +\\n                ERC1155ERC721Helper.IS_NFT_OFFSET_MULTIPLIER + // newId is always an NFT; IS_NFT is 1\\n                (tokenCollectionIndex) *\\n                2**ERC1155ERC721Helper.NFT_INDEX_OFFSET; // uint24 nft index\\n        _burnFT(sender, id, 1);\\n        _assetERC721.mint(to, newId, bytes(abi.encode(metaData)));\\n        emit Extraction(id, newId);\\n        return newId;\\n    }\\n\\n    /// @notice Set the ERC721 contract.\\n    /// @param assetERC721 the contract address to set the ERC721 contract to.\\n    /// @return true if the operation completes successfully.\\n    function setAssetERC721(IAssetERC721 assetERC721) external returns (bool) {\\n        require(_admin == _msgSender(), \\\"!AUTHORIZED\\\");\\n        _assetERC721 = assetERC721;\\n        emit AssetERC721Set(assetERC721);\\n        return true;\\n    }\\n\\n    /// @notice Queries the approval status of `operator` for owner `owner`.\\n    /// @param owner the owner of the tokens.\\n    /// @param operator address of authorized operator.\\n    /// @return isOperator true if the operator is approved, false if not.\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        override(IERC1155)\\n        returns (bool isOperator)\\n    {\\n        require(owner != address(0), \\\"OWNER==0\\\");\\n        require(operator != address(0), \\\"OPERATOR==0\\\");\\n        return _operatorsForAll[owner][operator] || _superOperators[operator];\\n    }\\n\\n    /// @notice Queries the chainIndex that a token was minted on originally.\\n    /// @param id the token id to query.\\n    /// @return chainIndex the chainIndex that the token was minted on originally.\\n    /// @dev take care not to confuse chainIndex with chain ID.\\n    function getChainIndex(uint256 id) external pure returns (uint256) {\\n        return uint8((id & ERC1155ERC721Helper.CHAIN_INDEX) / ERC1155ERC721Helper.CHAIN_INDEX_OFFSET_MULTIPLIER);\\n    }\\n\\n    function __ERC2771Handler_initialize(address forwarder) internal {\\n        _trustedForwarder = forwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function getTrustedForwarder() external view returns (address) {\\n        return _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n\\n    function _setApprovalForAll(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) internal {\\n        require(sender != address(0), \\\"SENDER==0\\\");\\n        require(sender != operator, \\\"SENDER==OPERATOR\\\");\\n        require(operator != address(0), \\\"OPERATOR==0\\\");\\n        require(!_superOperators[operator], \\\"APPR_EXISTING_SUPEROPERATOR\\\");\\n        _operatorsForAll[sender][operator] = approved;\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /* solhint-disable code-complexity */\\n    function _batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bool authorized\\n    ) internal {\\n        uint256 numItems = ids.length;\\n        uint256 bin;\\n        uint256 index;\\n        uint256 balFrom;\\n        uint256 balTo;\\n\\n        uint256 lastBin;\\n        require(authorized, \\\"OPERATOR_!AUTH\\\");\\n\\n        for (uint256 i = 0; i < numItems; i++) {\\n            if (from == to) {\\n                _checkEnoughBalance(from, ids[i], values[i]);\\n            } else if (values[i] > 0) {\\n                (bin, index) = ids[i].getTokenBinIndex();\\n                if (lastBin == 0) {\\n                    lastBin = bin;\\n                    balFrom = ObjectLib32.updateTokenBalance(\\n                        _packedTokenBalance[from][bin],\\n                        index,\\n                        values[i],\\n                        ObjectLib32.Operations.SUB\\n                    );\\n                    balTo = ObjectLib32.updateTokenBalance(\\n                        _packedTokenBalance[to][bin],\\n                        index,\\n                        values[i],\\n                        ObjectLib32.Operations.ADD\\n                    );\\n                } else {\\n                    if (bin != lastBin) {\\n                        _packedTokenBalance[from][lastBin] = balFrom;\\n                        _packedTokenBalance[to][lastBin] = balTo;\\n                        balFrom = _packedTokenBalance[from][bin];\\n                        balTo = _packedTokenBalance[to][bin];\\n                        lastBin = bin;\\n                    }\\n\\n                    balFrom = balFrom.updateTokenBalance(index, values[i], ObjectLib32.Operations.SUB);\\n                    balTo = balTo.updateTokenBalance(index, values[i], ObjectLib32.Operations.ADD);\\n                }\\n            }\\n        }\\n\\n        if (bin != 0 && from != to) {\\n            _packedTokenBalance[from][bin] = balFrom;\\n            _packedTokenBalance[to][bin] = balTo;\\n        }\\n    }\\n\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal {\\n        require(amount > 0 && amount <= ERC1155ERC721Helper.MAX_SUPPLY, \\\"INVALID_AMOUNT\\\");\\n        _burnFT(from, id, uint32(amount));\\n        emit TransferSingle(_msgSender(), from, address(0), id, amount);\\n    }\\n\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal {\\n        address operator = _msgSender();\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            require(amounts[i] > 0 && amounts[i] <= ERC1155ERC721Helper.MAX_SUPPLY, \\\"INVALID_AMOUNT\\\");\\n            _burnFT(from, ids[i], uint32(amounts[i]));\\n        }\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    function _burnFT(\\n        address from,\\n        uint256 id,\\n        uint32 amount\\n    ) internal {\\n        (uint256 bin, uint256 index) = (id).getTokenBinIndex();\\n        _packedTokenBalance[from][bin] = _packedTokenBalance[from][bin].updateTokenBalance(\\n            index,\\n            amount,\\n            ObjectLib32.Operations.SUB\\n        );\\n    }\\n\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal {\\n        uint16 offset = 0;\\n        while (offset < amounts.length) {\\n            _mintPack(offset, amounts, to, ids);\\n            offset += 8;\\n        }\\n        _completeBatchMint(_msgSender(), to, ids, amounts, data);\\n    }\\n\\n    function _mintPack(\\n        uint16 offset,\\n        uint256[] memory supplies,\\n        address owner,\\n        uint256[] memory ids\\n    ) internal {\\n        (uint256 bin, uint256 index) = ids[offset].getTokenBinIndex();\\n        for (uint256 i = 0; i < 8 && offset + i < supplies.length; i++) {\\n            uint256 j = offset + i;\\n            if (supplies[j] > 0) {\\n                _packedTokenBalance[owner][bin] = _packedTokenBalance[owner][bin].updateTokenBalance(\\n                    index + i,\\n                    supplies[j],\\n                    ObjectLib32.Operations.ADD\\n                );\\n            }\\n        }\\n    }\\n\\n    function _transferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value\\n    ) internal returns (bool) {\\n        address sender = _msgSender();\\n        bool authorized = from == sender || isApprovedForAll(from, sender);\\n\\n        require(authorized, \\\"OPERATOR_!AUTH\\\");\\n        if (value > 0) {\\n            (uint256 bin, uint256 index) = id.getTokenBinIndex();\\n            _packedTokenBalance[from][bin] = _packedTokenBalance[from][bin].updateTokenBalance(\\n                index,\\n                value,\\n                ObjectLib32.Operations.SUB\\n            );\\n            _packedTokenBalance[to][bin] = _packedTokenBalance[to][bin].updateTokenBalance(\\n                index,\\n                value,\\n                ObjectLib32.Operations.ADD\\n            );\\n        }\\n\\n        emit TransferSingle(sender, from, to, id, value);\\n        return true;\\n    }\\n\\n    function _mint(\\n        address operator,\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal {\\n        (uint256 bin, uint256 index) = id.getTokenBinIndex();\\n        _packedTokenBalance[account][bin] = _packedTokenBalance[account][bin].updateTokenBalance(\\n            index,\\n            amount,\\n            ObjectLib32.Operations.REPLACE\\n        );\\n\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n        require(_checkOnERC1155Received(operator, address(0), account, id, amount, data), \\\"TRANSFER_REJECTED\\\");\\n    }\\n\\n    function _mintBatches(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal {\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            if (amounts[i] > 0) {\\n                (uint256 bin, uint256 index) = ids[i].getTokenBinIndex();\\n                _packedTokenBalance[to][bin] = _packedTokenBalance[to][bin].updateTokenBalance(\\n                    index,\\n                    amounts[i],\\n                    ObjectLib32.Operations.REPLACE\\n                );\\n            }\\n        }\\n        _completeBatchMint(_msgSender(), to, ids, amounts, data);\\n    }\\n\\n    function _mintDeficit(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal {\\n        address sender = _msgSender();\\n        (uint256 bin, uint256 index) = id.getTokenBinIndex();\\n        _packedTokenBalance[account][bin] = _packedTokenBalance[account][bin].updateTokenBalance(\\n            index,\\n            amount,\\n            ObjectLib32.Operations.ADD\\n        );\\n\\n        emit TransferSingle(sender, address(0), account, id, amount);\\n        require(_checkOnERC1155Received(sender, address(0), account, id, amount, \\\"\\\"), \\\"TRANSFER_REJECTED\\\");\\n    }\\n\\n    /// @dev Allows the use of a bitfield to track the initialized status of the version `v` passed in as an arg.\\n    /// If the bit at the index corresponding to the given version is already set, revert.\\n    /// Otherwise, set the bit and return.\\n    /// @param v The version of this contract.\\n    function _checkInit(uint256 v) internal {\\n        require((_initBits >> v) & uint256(1) != 1, \\\"ALREADY_INITIALISED\\\");\\n        _initBits = _initBits | (uint256(1) << v);\\n    }\\n\\n    function _completeBatchMint(\\n        address operator,\\n        address owner,\\n        uint256[] memory ids,\\n        uint256[] memory supplies,\\n        bytes memory data\\n    ) internal {\\n        emit TransferBatch(operator, address(0), owner, ids, supplies);\\n        require(_checkOnERC1155BatchReceived(operator, address(0), owner, ids, supplies, data), \\\"TRANSFER_REJECTED\\\");\\n    }\\n\\n    function _checkEnoughBalance(\\n        address from,\\n        uint256 id,\\n        uint256 value\\n    ) internal view {\\n        (uint256 bin, uint256 index) = id.getTokenBinIndex();\\n        require(_packedTokenBalance[from][bin].getValueInBin(index) >= value, \\\"BALANCE_TOO_LOW\\\");\\n    }\\n\\n    function _checkOnERC1155Received(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes memory data\\n    ) internal returns (bool) {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n\\n        return IERC1155Receiver(to).onERC1155Received(operator, from, id, value, data) == ERC1155_RECEIVED;\\n    }\\n\\n    function _checkOnERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal returns (bool) {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n        bytes4 retval = IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, values, data);\\n        return (retval == ERC1155_BATCH_RECEIVED);\\n    }\\n}\\n\",\"keccak256\":\"0x479397c156421b904b18355cf427a668707db0aaccd5af9a300b9684fed7b7b3\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/WithAdmin.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\ncontract WithAdmin {\\n    address internal _admin;\\n\\n    /// @dev Emits when the contract administrator is changed.\\n    /// @param oldAdmin The address of the previous administrator.\\n    /// @param newAdmin The address of the new administrator.\\n    event AdminChanged(address indexed oldAdmin, address indexed newAdmin);\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == _admin, \\\"ADMIN_ONLY\\\");\\n        _;\\n    }\\n\\n    /// @dev Get the current administrator of this contract.\\n    /// @return The current administrator of this contract.\\n    function getAdmin() external view returns (address) {\\n        return _admin;\\n    }\\n\\n    /// @dev Change the administrator to be `newAdmin`.\\n    /// @param newAdmin The address of the new administrator.\\n    function changeAdmin(address newAdmin) external {\\n        require(msg.sender == _admin, \\\"ADMIN_ACCESS_DENIED\\\");\\n        emit AdminChanged(_admin, newAdmin);\\n        _admin = newAdmin;\\n    }\\n}\\n\",\"keccak256\":\"0x0239f3f826576fc7c050503f29a708b20b8b682df569e3d67bd83a836b0c925a\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/WithSuperOperators.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\nimport \\\"./WithAdmin.sol\\\";\\n\\ncontract WithSuperOperators is WithAdmin {\\n    mapping(address => bool) internal _superOperators;\\n\\n    event SuperOperator(address indexed superOperator, bool indexed enabled);\\n\\n    /// @notice Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights).\\n    /// @param superOperator address that will be given/removed superOperator right.\\n    /// @param enabled set whether the superOperator is enabled or disabled.\\n    function setSuperOperator(address superOperator, bool enabled) external {\\n        require(msg.sender == _admin, \\\"only admin is allowed to add super operators\\\");\\n        _superOperators[superOperator] = enabled;\\n        emit SuperOperator(superOperator, enabled);\\n    }\\n\\n    /// @notice check whether address `who` is given superOperator rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has superOperator rights.\\n    function isSuperOperator(address who) public view returns (bool) {\\n        return _superOperators[who];\\n    }\\n}\\n\",\"keccak256\":\"0x007c3f90984d5b3e4f47ac067040c66cb7dbee1dc7de1ce7777e5c38a44b6734\",\"license\":\"MIT\"},\"src/solc_0.8/common/Libraries/ObjectLib32.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\nlibrary ObjectLib32 {\\n    enum Operations {ADD, SUB, REPLACE}\\n    // Constants regarding bin or chunk sizes for balance packing\\n    uint256 internal constant TYPES_BITS_SIZE = 32; // Max size of each object\\n    uint256 internal constant TYPES_PER_UINT256 = 256 / TYPES_BITS_SIZE; // Number of types per uint256\\n    uint256 internal constant TYPE_ELIMINATOR = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFFFFFFFFFFF;\\n\\n    //\\n    // Objects and Tokens Functions\\n    //\\n\\n    /// @dev Return the bin number and index within that bin where ID is\\n    /// @param tokenId Object type\\n    /// @return bin Bin number.\\n    /// @return index ID's index within that bin.\\n    function getTokenBinIndex(uint256 tokenId) internal pure returns (uint256 bin, uint256 index) {\\n        uint256 id = tokenId & TYPE_ELIMINATOR;\\n        unchecked {bin = (id * TYPES_BITS_SIZE) / 256;}\\n        index = tokenId % TYPES_PER_UINT256;\\n        return (bin, index);\\n    }\\n\\n    /**\\n     * @dev update the balance of a type provided in binBalances\\n     * @param binBalances Uint256 containing the balances of objects\\n     * @param index Index of the object in the provided bin\\n     * @param amount Value to update the type balance\\n     * @param operation Which operation to conduct :\\n     *     Operations.REPLACE : Replace type balance with amount\\n     *     Operations.ADD     : ADD amount to type balance\\n     *     Operations.SUB     : Substract amount from type balance\\n     */\\n    function updateTokenBalance(\\n        uint256 binBalances,\\n        uint256 index,\\n        uint256 amount,\\n        Operations operation\\n    ) internal pure returns (uint256 newBinBalance) {\\n        uint256 objectBalance = 0;\\n        if (operation == Operations.ADD) {\\n            objectBalance = getValueInBin(binBalances, index);\\n            newBinBalance = writeValueInBin(binBalances, index, objectBalance + amount);\\n        } else if (operation == Operations.SUB) {\\n            objectBalance = getValueInBin(binBalances, index);\\n            require(objectBalance >= amount, \\\"can't substract more than there is\\\");\\n            newBinBalance = writeValueInBin(binBalances, index, objectBalance - amount);\\n        } else if (operation == Operations.REPLACE) {\\n            newBinBalance = writeValueInBin(binBalances, index, amount);\\n        } else {\\n            revert(\\\"Invalid operation\\\"); // Bad operation\\n        }\\n\\n        return newBinBalance;\\n    }\\n\\n    /*\\n     * @dev return value in binValue at position index\\n     * @param binValue uint256 containing the balances of TYPES_PER_UINT256 types\\n     * @param index index at which to retrieve value\\n     * @return Value at given index in bin\\n     */\\n    function getValueInBin(uint256 binValue, uint256 index) internal pure returns (uint256) {\\n        // Mask to retrieve data for a given binData\\n        uint256 mask = (uint256(1) << TYPES_BITS_SIZE) - 1;\\n\\n        // Shift amount\\n        uint256 rightShift = 256 - TYPES_BITS_SIZE * (index + 1);\\n        return (binValue >> rightShift) & mask;\\n    }\\n\\n    /**\\n     * @dev return the updated binValue after writing amount at index\\n     * @param binValue uint256 containing the balances of TYPES_PER_UINT256 types\\n     * @param index Index at which to retrieve value\\n     * @param amount Value to store at index in bin\\n     * @return Value at given index in bin\\n     */\\n    function writeValueInBin(\\n        uint256 binValue,\\n        uint256 index,\\n        uint256 amount\\n    ) internal pure returns (uint256) {\\n        require(amount < 2**TYPES_BITS_SIZE, \\\"Amount to write in bin is too large\\\");\\n\\n        // Mask to retrieve data for a given binData\\n        uint256 mask = (uint256(1) << TYPES_BITS_SIZE) - 1;\\n\\n        // Shift amount\\n        uint256 leftShift = 256 - TYPES_BITS_SIZE * (index + 1);\\n        return (binValue & ~(mask << leftShift)) | (amount << leftShift);\\n    }\\n}\\n\",\"keccak256\":\"0x1971311157835cb7d98deba635ae3dd28d72ff562632b8808fad43236e916fbc\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IAssetERC721.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport {IERC721Base} from \\\"./IERC721Base.sol\\\";\\n\\ninterface IAssetERC721 is IERC721Base {\\n    function setTokenURI(uint256 id, string memory uri) external;\\n\\n    function tokenURI(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa9a1229c39d9183bae268c1dc80150390b1a64483b8c785161e92faa51b5c1a0\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC721Base.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport {IERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport {IERC721ExtendedToken} from \\\"./IERC721ExtendedToken.sol\\\";\\n\\ninterface IERC721Base is IERC721Upgradeable {\\n    function mint(address to, uint256 id) external;\\n\\n    function mint(\\n        address to,\\n        uint256 id,\\n        bytes calldata metaData\\n    ) external;\\n\\n    function approveFor(\\n        address from,\\n        address operator,\\n        uint256 id\\n    ) external;\\n\\n    function setApprovalForAllFor(\\n        address from,\\n        address operator,\\n        bool approved\\n    ) external;\\n\\n    function burnFrom(address from, uint256 id) external;\\n\\n    function burn(uint256 id) external;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external override;\\n\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids\\n    ) external;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external;\\n\\n    function exists(uint256 tokenId) external view returns (bool);\\n\\n    function supportsInterface(bytes4 id) external view override returns (bool);\\n\\n    function setTrustedForwarder(address trustedForwarder) external;\\n\\n    function isTrustedForwarder(address forwarder) external returns (bool);\\n\\n    function getTrustedForwarder() external returns (address trustedForwarder);\\n}\\n\",\"keccak256\":\"0x515a9d8e988c63547108b16b7efd4942ab15887529a98861a522dea6dbb0437d\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC721ExtendedToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\ninterface IERC721ExtendedToken {\\n    function approveFor(\\n        address sender,\\n        address operator,\\n        uint256 id\\n    ) external;\\n\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids\\n    ) external;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external;\\n\\n    function setApprovalForAllFor(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) external;\\n\\n    function burn(uint256 id) external;\\n\\n    function burnFrom(address from, uint256 id) external;\\n}\\n\",\"keccak256\":\"0xe574d923fe66e20909df0d06b73478d2922e4865d85c578db60bda34f6273d45\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/pos-portal/child/IChildToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\ninterface IChildToken {\\n    function deposit(address user, bytes calldata depositData) external;\\n}\\n\",\"keccak256\":\"0x6a612c9bbc2b7e6a141986d9a0ab8d4f58de5ea6ae0dff8b190125ae74b83771\",\"license\":\"MIT\"},\"src/solc_0.8/polygon/child/asset/PolygonAssetERC1155.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"../../../assetERC1155/AssetBaseERC1155.sol\\\";\\nimport \\\"../../../common/interfaces/pos-portal/child/IChildToken.sol\\\";\\n\\n/// @title This contract is for AssetERC1155 which can be minted by a minter role.\\n/// @dev AssetERC1155 will be minted only on L2 and can be transferred to L1 and not minted on L1.\\n/// @dev This contract supports meta transactions.\\n/// @dev This contract is final, don't inherit from it.\\ncontract PolygonAssetERC1155 is AssetBaseERC1155, IChildToken {\\n    address public _childChainManager;\\n\\n    function initialize(\\n        address trustedForwarder,\\n        address admin,\\n        address bouncerAdmin,\\n        address childChainManager,\\n        IAssetERC721 polygonAssetERC721,\\n        uint8 chainIndex\\n    ) external {\\n        require(address(childChainManager) != address(0), \\\"PolygonAssetERC1155Tunnel: childChainManager can't be zero\\\");\\n        init(trustedForwarder, admin, bouncerAdmin, polygonAssetERC721, chainIndex);\\n        _childChainManager = childChainManager;\\n    }\\n\\n    /// @notice Mint a token type for `creator` on slot `packId`.\\n    /// @dev For this function it is not required to provide data.\\n    /// @param creator address of the creator of the token.\\n    /// @param packId unique packId for that token.\\n    /// @param hash hash of an IPFS cidv1 folder that contains the metadata of the token type in the file 0.json.\\n    /// @param supply number of tokens minted for that token type.\\n    /// @param owner address that will receive the tokens.\\n    /// @param data extra data to accompany the minting call.\\n    /// @return id the id of the newly minted token type.\\n    function mint(\\n        address creator,\\n        uint40 packId,\\n        bytes32 hash,\\n        uint256 supply,\\n        address owner,\\n        bytes calldata data\\n    ) external returns (uint256 id) {\\n        require(hash != 0, \\\"HASH==0\\\");\\n        require(isBouncer(_msgSender()), \\\"!BOUNCER\\\");\\n        require(owner != address(0), \\\"TO==0\\\");\\n        id = _generateTokenId(creator, supply, packId, supply == 1 ? 0 : 1, 0);\\n        uint256 uriId = id & ERC1155ERC721Helper.URI_ID;\\n        require(uint256(_metadataHash[uriId]) == 0, \\\"ID_TAKEN\\\");\\n        _metadataHash[uriId] = hash;\\n        _mint(_msgSender(), owner, id, supply, data);\\n    }\\n\\n    /// @notice Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n    /// @dev Should be used only by PolygonAssetERC1155Tunnel.\\n    /// @dev This function can be called when the token ID exists on another layer.\\n    /// @dev Encoded bytes32 metadata hash must be provided as data.\\n    /// @param owner address that will receive the tokens.\\n    /// @param id the id of the newly minted token.\\n    /// @param supply number of tokens minted for that token type.\\n    /// @param data token metadata.\\n    function mint(\\n        address owner,\\n        uint256 id,\\n        uint256 supply,\\n        bytes calldata data\\n    ) external {\\n        require(isBouncer(_msgSender()), \\\"!BOUNCER\\\");\\n        require(data.length > 0, \\\"METADATA_MISSING\\\");\\n        require(owner != address(0), \\\"TO==0\\\");\\n        uint256 uriId = id & ERC1155ERC721Helper.URI_ID;\\n        require(uint256(_metadataHash[uriId]) == 0, \\\"ID_TAKEN\\\");\\n        _metadataHash[uriId] = abi.decode(data, (bytes32));\\n        _mint(_msgSender(), owner, id, supply, data);\\n    }\\n\\n    /// @notice Mint multiple token types for `creator` on slot `packId`.\\n    /// @dev For this function it is not required to provide data.\\n    /// @param creator address of the creator of the tokens.\\n    /// @param packId unique packId for the tokens.\\n    /// @param hash hash of an IPFS cidv1 folder that contains the metadata of each token type in the files: 0.json, 1.json, 2.json, etc...\\n    /// @param supplies number of tokens minted for each token type.\\n    /// @param rarityPack rarity power of each token types packed into 2 bits each.\\n    /// @param owner address that will receive the tokens.\\n    /// @param data extra data to accompany the minting call.\\n    /// @return ids the ids of each newly minted token types.\\n    function mintMultiple(\\n        address creator,\\n        uint40 packId,\\n        bytes32 hash,\\n        uint256[] calldata supplies,\\n        bytes calldata rarityPack,\\n        address owner,\\n        bytes calldata data\\n    ) external returns (uint256[] memory ids) {\\n        require(hash != 0, \\\"HASH==0\\\");\\n        require(isBouncer(_msgSender()), \\\"!BOUNCER\\\");\\n        require(owner != address(0), \\\"TO==0\\\");\\n        ids = _allocateIds(creator, supplies, rarityPack, packId, hash);\\n        _mintBatch(owner, ids, supplies, data);\\n    }\\n\\n    /// @notice function to be called by tunnel to mint deficit of minted tokens\\n    /// @dev This mint calls for add instead of replace in packedTokenBalance\\n    /// @param account address of the ownerof tokens.\\n    /// @param id id of the token to be minted.\\n    /// @param amount quantity of the token to be minted.\\n    function mintDeficit(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) external {\\n        require(isBouncer(_msgSender()), \\\"!BOUNCER\\\");\\n        _mintDeficit(account, id, amount);\\n    }\\n\\n    /// @notice Burns `amount` tokens of type `id`.\\n    /// @param id token type which will be burnt.\\n    /// @param amount amount of token to burn.\\n    function burn(uint256 id, uint256 amount) external {\\n        _burn(_msgSender(), id, amount);\\n    }\\n\\n    /// @notice Burns `amount` tokens of type `id` from `from`.\\n    /// @param from address whose token is to be burnt.\\n    /// @param id token type which will be burnt.\\n    /// @param amount amount of token to burn.\\n    function burnFrom(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) external {\\n        require(from == _msgSender() || isApprovedForAll(from, _msgSender()), \\\"!AUTHORIZED\\\");\\n        _burn(from, id, amount);\\n    }\\n\\n    /// @notice This function is called when a token is deposited to the root chain.\\n    /// @dev Should be callable only by ChildChainManager.\\n    /// @dev Should handle deposit by minting the required tokenId(s) for user.\\n    /// @dev Minting can also be done by other functions.\\n    /// @param user user address for whom deposit is being done.\\n    /// @param depositData abi encoded tokenIds. Batch deposit also supported.\\n    function deposit(address user, bytes calldata depositData) external override {\\n        require(_msgSender() == _childChainManager, \\\"!DEPOSITOR\\\");\\n        require(user != address(0), \\\"INVALID_DEPOSIT_USER\\\");\\n        (uint256[] memory ids, uint256[] memory amounts, bytes memory data) =\\n            abi.decode(depositData, (uint256[], uint256[], bytes));\\n\\n        _mintBatches(user, ids, amounts, data);\\n    }\\n\\n    /// @notice called when user wants to withdraw single token back to root chain.\\n    /// @dev Should burn user's tokens. This transaction will be verified when exiting on root chain.\\n    /// @param id id to withdraw.\\n    /// @param amount amount to withdraw.\\n    function withdrawSingle(uint256 id, uint256 amount) external {\\n        _burn(_msgSender(), id, amount);\\n    }\\n\\n    /// @notice called when user wants to batch withdraw tokens back to root chain.\\n    /// @dev Should burn user's tokens. This transaction will be verified when exiting on root chain.\\n    /// @param ids ids to withdraw.\\n    /// @param amounts amounts to withdraw.\\n    function withdrawBatch(uint256[] calldata ids, uint256[] calldata amounts) external {\\n        _burnBatch(_msgSender(), ids, amounts);\\n    }\\n\\n    function metadataHash(uint256 id) external view returns (bytes32) {\\n        return _metadataHash[id & ERC1155ERC721Helper.URI_ID];\\n    }\\n\\n    function _allocateIds(\\n        address creator,\\n        uint256[] memory supplies,\\n        bytes memory rarityPack,\\n        uint40 packId,\\n        bytes32 hash\\n    ) internal returns (uint256[] memory ids) {\\n        require(supplies.length > 0, \\\"SUPPLIES<=0\\\");\\n        require(supplies.length <= ERC1155ERC721Helper.MAX_PACK_SIZE, \\\"BATCH_TOO_BIG\\\");\\n        ids = _generateTokenIds(creator, supplies, packId);\\n\\n        require(uint256(_metadataHash[ids[0] & ERC1155ERC721Helper.URI_ID]) == 0, \\\"ID_TAKEN\\\");\\n        _metadataHash[ids[0] & ERC1155ERC721Helper.URI_ID] = hash;\\n        _rarityPacks[ids[0] & ERC1155ERC721Helper.URI_ID] = rarityPack;\\n    }\\n\\n    function _generateTokenIds(\\n        address creator,\\n        uint256[] memory supplies,\\n        uint40 packId\\n    ) internal view returns (uint256[] memory) {\\n        uint16 numTokenTypes = uint16(supplies.length);\\n        uint256[] memory ids = new uint256[](numTokenTypes);\\n        uint16 numNFTs = 0;\\n        for (uint16 i = 0; i < numTokenTypes; i++) {\\n            if (numNFTs == 0) {\\n                if (supplies[i] == 1) {\\n                    numNFTs = uint16(numTokenTypes - i);\\n                }\\n            } else {\\n                require(supplies[i] == 1, \\\"NFTS_MUST_BE_LAST\\\");\\n            }\\n        }\\n        uint16 numFTs = numTokenTypes - numNFTs;\\n        for (uint16 i = 0; i < numTokenTypes; i++) {\\n            ids[i] = _generateTokenId(creator, supplies[i], packId, numFTs, i);\\n        }\\n        return ids;\\n    }\\n\\n    function _generateTokenId(\\n        address creator,\\n        uint256 supply,\\n        uint40 packId,\\n        uint16 numFTs,\\n        uint16 packIndex\\n    ) internal view returns (uint256) {\\n        require(supply > 0 && supply <= ERC1155ERC721Helper.MAX_SUPPLY, \\\"SUPPLY_OUT_OF_BOUNDS\\\");\\n        require(numFTs >= 0 && numFTs <= ERC1155ERC721Helper.MAX_NUM_FT, \\\"NUM_FT_OUT_OF_BOUNDS\\\");\\n        return\\n            uint256(uint160(creator)) *\\n            ERC1155ERC721Helper.CREATOR_OFFSET_MULTIPLIER + // CREATOR uint160\\n            (supply == 1 ? uint256(1) * ERC1155ERC721Helper.IS_NFT_OFFSET_MULTIPLIER : 0) + // minted as NFT(1)|FT(0), 1 bit\\n            uint256(_chainIndex) *\\n            ERC1155ERC721Helper.CHAIN_INDEX_OFFSET_MULTIPLIER + // mainnet = 0, polygon = 1, uint8\\n            uint256(packId) *\\n            ERC1155ERC721Helper.PACK_ID_OFFSET_MULTIPLIER + // packId (unique pack), uint40\\n            numFTs *\\n            ERC1155ERC721Helper.PACK_NUM_FT_TYPES_OFFSET_MULTIPLIER + // number of fungible token in the pack, 12 bits\\n            packIndex; // packIndex (position in the pack), 11 bits\\n    }\\n}\\n\",\"keccak256\":\"0xcd527420405fb4e8a304d2ebf25ef529b871748ba971462064cf3211f537a9c5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614bf6806100206000396000f3fe608060405234801561001057600080fd5b50600436106102dd5760003560e01c80638f28397011610186578063c7778baa116100e3578063e985e9c511610097578063f242432a11610071578063f242432a1461067d578063f6c983fb14610690578063ff23be53146106a3576102dd565b8063e985e9c514610644578063eeb5a5d114610657578063f0bc00d81461066a576102dd565b8063cf2c52cb116100c8578063cf2c52cb1461060b578063d5de8e491461061e578063d9f37f8e14610631576102dd565b8063c7778baa146105e7578063ce1b815f146105fa576102dd565b8063a290f20f1161013a578063b390c0ab1161011f578063b390c0ab146103aa578063b9b75ebc146105c1578063bd9ff41b146105d4576102dd565b8063a290f20f1461059b578063ac9fe421146105ae576102dd565b806398fbde641161016b57806398fbde64146105645780639bc88b9c14610577578063a22cb46514610588576102dd565b80638f2839701461051857806395d89b411461052b576102dd565b806331e5361f1161023f578063572b6c05116101f35780636e9960c3116101cd5780636e9960c3146104e1578063731133e9146104f257806376596d2114610505576102dd565b8063572b6c05146104805780635c5fb521146104a2578063654b748a146104b5576102dd565b80634c4d07e7116102245780634c4d07e7146104095780634e1273f41461043557806353a8eccd14610455576102dd565b806331e5361f146103e357806340914613146103f6576102dd565b8063124d91e5116102965780632262f53f1161027b5780632262f53f146103aa5780632e712b46146103bd5780632eb2c2d6146103d0576102dd565b8063124d91e514610368578063219cc8bc1461037b576102dd565b8063049476df116102c7578063049476df1461032b57806306fdde03146103405780630e89341c14610355576102dd565b8062fdd58e146102e257806301ffc9a714610308575b600080fd5b6102f56102f03660046141ec565b6106b6565b6040519081526020015b60405180910390f35b61031b61031636600461459e565b61075a565b60405190151581526020016102ff565b61033e610339366004613ead565b61082d565b005b61034861097c565b6040516102ff919061483c565b610348610363366004614586565b6109b4565b61033e610376366004614258565b610ad3565b6102f5610389366004614586565b6bffffffff80000000000007ff191660009081526007602052604090205490565b61033e6103b8366004614640565b610b4b565b6102f56103cb366004614586565b610b61565b61033e6103de366004613fea565b610b79565b61031b6103f1366004613ead565b610e59565b61033e610404366004614258565b610f0a565b61031b610417366004613ead565b6001600160a01b03166000908152600b602052604090205460ff1690565b610448610443366004614459565b610f57565b6040516102ff9190614804565b602654610468906001600160a01b031681565b6040516001600160a01b0390911681526020016102ff565b61031b61048e366004613ead565b6010546001600160a01b0390811691161490565b61033e6104b0366004614459565b6110b3565b61031b6104c3366004613ead565b6001600160a01b031660009081526001602052604090205460ff1690565b6000546001600160a01b0316610468565b61033e61050036600461428c565b61112e565b61033e610513366004613f7e565b6112bf565b61033e610526366004613ead565b611370565b60408051808201909152600581527f41535345540000000000000000000000000000000000000000000000000000006020820152610348565b6102f56105723660046143ce565b611432565b600d546001600160a01b0316610468565b61033e610596366004614165565b6115e5565b61033e6105a9366004613f01565b6115f7565b61033e6105bc366004614165565b6116b4565b61033e6105cf366004614165565b611788565b61031b6105e2366004614586565b611846565b6102f56105f5366004614586565b611868565b6010546001600160a01b0316610468565b61033e610619366004614199565b611924565b6102f561062c366004614586565b611a06565b601154610468906001600160a01b031681565b61031b610652366004613ec9565b611a35565b61033e6106653660046140a5565b611b33565b6104486106783660046142f4565b611bc4565b61033e61068b3660046140eb565b611d96565b61031b61069e366004614586565b611ee0565b6102f56106b1366004614217565b611f2f565b60006106c182611ee0565b6107125760405162461bcd60e51b815260206004820152600a60248201527f494e56414c49445f49440000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b60008061071e846121e9565b6001600160a01b038716600090815260046020908152604080832085845290915290205491935091506107519082612238565b95945050505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614806107bd57507fd9b67a26000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b806107f157507f0e89341c000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b8061082557507f572b6c05000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b90505b919050565b600d546001600160a01b031661084161227d565b6001600160a01b0316146108975760405162461bcd60e51b815260206004820152600e60248201527f21424f554e4345525f41444d494e0000000000000000000000000000000000006044820152606401610709565b6001600160a01b0381166109135760405162461bcd60e51b815260206004820152603960248201527f417373657442617365455243313135353a206e657720626f756e63657220616460448201527f6d696e2063616e2774206265207a65726f2061646472657373000000000000006064820152608401610709565b600d546040516001600160a01b038084169216907f1bab6ababbec5519512e9ee16964953ec0f72839126138285cac1f1136bd642e90600090a3600d805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60408051808201909152601081527f53616e64626f782773204153534554730000000000000000000000000000000060208201525b90565b60606109bf82611ee0565b610a0b5760405162461bcd60e51b815260206004820152600a60248201527f494e56414c49445f4944000000000000000000000000000000000000000000006044820152606401610709565b6bffffffff80000000000007ff198216600090815260076020526040908190205490517f55f43cd400000000000000000000000000000000000000000000000000000000815260048101919091526024810183905273201A2383f7DF6Fb4B8382a5727724135f337db77906355f43cd49060440160006040518083038186803b158015610a9757600080fd5b505af4158015610aab573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261082591908101906145d6565b610adb61227d565b6001600160a01b0316836001600160a01b03161480610b015750610b018361065261227d565b610b3b5760405162461bcd60e51b815260206004820152600b60248201526a085055551213d49256915160aa1b6044820152606401610709565b610b468383836122c7565b505050565b610b5d610b5661227d565b83836122c7565b5050565b6000610b6c82611868565b5050603f1c62ffffff1690565b848314610bc85760405162461bcd60e51b815260206004820152601260248201527f4d49534d4154434845445f4152525f4c454e00000000000000000000000000006044820152606401610709565b6001600160a01b038716610c065760405162461bcd60e51b81526020600482015260056024820152640544f3d3d360dc1b6044820152606401610709565b6001600160a01b038816610c5c5760405162461bcd60e51b815260206004820152600760248201527f46524f4d3d3d30000000000000000000000000000000000000000000000000006044820152606401610709565b6000610c6661227d565b90506000816001600160a01b03168a6001600160a01b03161480610c8f5750610c8f8a83611a35565b9050610d028a8a8a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808e0282810182019093528d82529093508d92508c9182918501908490808284376000920191909152508892506123a9915050565b886001600160a01b03168a6001600160a01b0316836001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8b8b8b8b604051610d5594939291906147dd565b60405180910390a4610e01828b8b8b8b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808f0282810182019093528e82529093508e92508d91829185019084908082843760009201919091525050604080516020601f8e018190048102820181019092528c815292508c91508b908190840183828082843760009201919091525061271392505050565b610e4d5760405162461bcd60e51b815260206004820152601660248201527f313135355f5452414e534645525f52454a4543544544000000000000000000006044820152606401610709565b50505050505050505050565b6000610e6361227d565b6000546001600160a01b03908116911614610eae5760405162461bcd60e51b815260206004820152600b60248201526a085055551213d49256915160aa1b6044820152606401610709565b6011805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091556040517f5a91617bd1e0deac2e7e6f6fbd384ff93d50ab3d50b6f3cec6b7979a7b5c9de090600090a2506001919050565b610f1561041761227d565b610f4c5760405162461bcd60e51b815260206004820152600860248201526710a127aaa721a2a960c11b6044820152606401610709565b610b46838383612808565b6060838214610fa85760405162461bcd60e51b815260206004820152601360248201527f4152475f4c454e4754485f4d49534d41544348000000000000000000000000006044820152606401610709565b60008267ffffffffffffffff811115610fd157634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610ffa578160200160208202803683370190505b50905060005b838110156110a95761106c87878381811061102b57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906110409190613ead565b86868481811061106057634e487b7160e01b600052603260045260246000fd5b905060200201356106b6565b82828151811061108c57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806110a181614b21565b915050611000565b5095945050505050565b6111286110be61227d565b8585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060408051602080890282810182019093528882529093508892508791829185019084908082843760009201919091525061292792505050565b50505050565b61113961041761227d565b6111705760405162461bcd60e51b815260206004820152600860248201526710a127aaa721a2a960c11b6044820152606401610709565b806111bd5760405162461bcd60e51b815260206004820152601060248201527f4d455441444154415f4d495353494e47000000000000000000000000000000006044820152606401610709565b6001600160a01b0385166111fb5760405162461bcd60e51b81526020600482015260056024820152640544f3d3d360dc1b6044820152606401610709565b6bffffffff80000000000007ff198416600081815260076020526040902054156112525760405162461bcd60e51b815260206004820152600860248201526724a22faa20a5a2a760c11b6044820152606401610709565b61125e82840184614586565b6000828152600760205260409020556112b761127861227d565b87878787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612aca92505050565b505050505050565b6112c96001612bcc565b6000805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b0387811691909117909255600d8054821686841617905560118054821685841617905560108054909116918716919091179055600f805460ff90921674010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff90921691909117905550505050565b6000546001600160a01b031633146113ca5760405162461bcd60e51b815260206004820152601360248201527f41444d494e5f4143434553535f44454e494544000000000000000000000000006044820152606401610709565b600080546040516001600160a01b03808516939216917f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f91a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000856114815760405162461bcd60e51b815260206004820152600760248201527f484153483d3d30000000000000000000000000000000000000000000000000006044820152606401610709565b61148c61041761227d565b6114c35760405162461bcd60e51b815260206004820152600860248201526710a127aaa721a2a960c11b6044820152606401610709565b6001600160a01b0384166115015760405162461bcd60e51b81526020600482015260056024820152640544f3d3d360dc1b6044820152606401610709565b61152388868988600114611516576001611519565b60005b60ff166000612c37565b6bffffffff80000000000007ff198116600081815260076020526040902054919250901561157e5760405162461bcd60e51b815260206004820152600860248201526724a22faa20a5a2a760c11b6044820152606401610709565b60008181526007602052604090208790556115d961159a61227d565b86848988888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612aca92505050565b50979650505050505050565b610b5d6115f061227d565b8383612df1565b6001600160a01b0383166116735760405162461bcd60e51b815260206004820152603a60248201527f506f6c79676f6e41737365744552433131353554756e6e656c3a206368696c6460448201527f436861696e4d616e616765722063616e2774206265207a65726f0000000000006064820152608401610709565b61168086868685856112bf565b50506026805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055505050565b6000546001600160a01b031633146117345760405162461bcd60e51b815260206004820152602c60248201527f6f6e6c792061646d696e20697320616c6c6f77656420746f206164642073757060448201527f6572206f70657261746f727300000000000000000000000000000000000000006064820152608401610709565b6001600160a01b038216600081815260016020526040808220805460ff191685151590811790915590519092917f44f92d27abdf4cfb6a7d712c3af68f3be086d4ca747ab802c36f67d6790060d891a35050565b600d546001600160a01b031661179c61227d565b6001600160a01b0316146117f25760405162461bcd60e51b815260206004820152600e60248201527f21424f554e4345525f41444d494e0000000000000000000000000000000000006044820152606401610709565b6001600160a01b0382166000818152600b6020526040808220805460ff191685151590811790915590519092917f5ecd928ac22825e06273a3e8db8118dd7fe11bd2637ecfe4bfa25154948bd85f91a35050565b60006b807fffff800000000000000019821661186181611ee0565b9392505050565b600061187382611ee0565b6118bf5760405162461bcd60e51b815260206004820152600a60248201527f494e56414c49445f4944000000000000000000000000000000000000000000006044820152606401610709565b6b807fffff80000000000000001982166118d881611ee0565b6108255760405162461bcd60e51b815260206004820152601360248201527f554e4d494e5445445f434f4c4c454354494f4e000000000000000000000000006044820152606401610709565b6026546001600160a01b031661193861227d565b6001600160a01b03161461198e5760405162461bcd60e51b815260206004820152600a60248201527f214445504f5349544f52000000000000000000000000000000000000000000006044820152606401610709565b6001600160a01b0383166119e45760405162461bcd60e51b815260206004820152601460248201527f494e56414c49445f4445504f5349545f555345520000000000000000000000006044820152606401610709565b600080806119f4848601866144c2565b9250925092506112b786848484612fd5565b6000611a146057600261496d565b611a2c906b7f80000000000000000000008416614904565b60ff1692915050565b60006001600160a01b038316611a8d5760405162461bcd60e51b815260206004820152600860248201527f4f574e45523d3d300000000000000000000000000000000000000000000000006044820152606401610709565b6001600160a01b038216611ae35760405162461bcd60e51b815260206004820152600b60248201527f4f50455241544f523d3d300000000000000000000000000000000000000000006044820152606401610709565b6001600160a01b0380841660009081526005602090815260408083209386168352929052205460ff16806118615750506001600160a01b031660009081526001602052604090205460ff16919050565b611b3b61227d565b6001600160a01b0316836001600160a01b03161480611b7f575060016000611b6161227d565b6001600160a01b0316815260208101919091526040016000205460ff165b611bb95760405162461bcd60e51b815260206004820152600b60248201526a085055551213d49256915160aa1b6044820152606401610709565b610b46838383612df1565b606088611c135760405162461bcd60e51b815260206004820152600760248201527f484153483d3d30000000000000000000000000000000000000000000000000006044820152606401610709565b611c1e61041761227d565b611c555760405162461bcd60e51b815260206004820152600860248201526710a127aaa721a2a960c11b6044820152606401610709565b6001600160a01b038416611c935760405162461bcd60e51b81526020600482015260056024820152640544f3d3d360dc1b6044820152606401610709565b611d148b89898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020601f8d018190048102820181019092528b815292508b91508a9081908401838280828437600081840152601f19601f820116905080830192505050505050508d8d6130e9565b9050611d8884828a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020601f8b0181900481028201810190925289815292508991508890819084018382808284376000920191909152506132da92505050565b9a9950505050505050505050565b6001600160a01b038516611dd45760405162461bcd60e51b81526020600482015260056024820152640544f3d3d360dc1b6044820152606401610709565b6001600160a01b038616611e2a5760405162461bcd60e51b815260206004820152600760248201527f46524f4d3d3d30000000000000000000000000000000000000000000000000006044820152606401610709565b6000611e3887878787613323565b90508015611ed757611e8b611e4b61227d565b8888888888888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506134cf92505050565b611ed75760405162461bcd60e51b815260206004820152601660248201527f313135355f5452414e534645525f52454a4543544544000000000000000000006044820152606401610709565b50505050505050565b6000611eee600b600261496d565b611efd90627ff8008416614904565b6107ff8316111580156108255750506bffffffff80000000000007ff1916600090815260076020526040902054151590565b6000611f3961227d565b6001600160a01b0316846001600160a01b03161480611f5f5750611f5f8461065261227d565b611f995760405162461bcd60e51b815260206004820152600b60248201526a085055551213d49256915160aa1b6044820152606401610709565b611fa461041761227d565b611fdb5760405162461bcd60e51b815260206004820152600860248201526710a127aaa721a2a960c11b6044820152606401610709565b6001600160a01b0382166120195760405162461bcd60e51b81526020600482015260056024820152640544f3d3d360dc1b6044820152606401610709565b6b8000000000000000000000008316156120755760405162461bcd60e51b815260206004820152600e60248201527f554e495155455f455243313135350000000000000000000000000000000000006044820152606401610709565b6000838152600960205260408120546120959063ffffffff1660016148ce565b600085815260096020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001662ffffff84161790559091506120dc856109b4565b905060006120ec603f600261495e565b6120fb9062ffffff8516614a3f565b612107605f600261496d565b61211190886148ec565b61211b91906148ec565b90506121298787600161359f565b6011546040516001600160a01b03909116906394d008ef908790849061215390879060200161483c565b6040516020818303038152906040526040518463ffffffff1660e01b8152600401612180939291906147b5565b600060405180830381600087803b15801561219a57600080fd5b505af11580156121ae573d6000803e3d6000fd5b50506040518392508891507faa923cda6d3360ee3cd49c083ac1fe5e062a5739b82a32d597a65168c0c6926c90600090a39695505050505050565b6000807fffffffffffffffffffffffffffffffffffffffff7fffffffffffffffffffffff8316610100602082020492506122266020610100614904565b6122309085614b3c565b915050915091565b60008061224b6001640100000000614a81565b9050600061225a8460016148ec565b612265906020614a3f565b61227190610100614a81565b9490941c169392505050565b6010546000906001600160a01b03163314156122c057507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c6109b1565b50336109b1565b6000811180156122ee575060016122e06020600261496d565b6122ea9190614a81565b8111155b61233a5760405162461bcd60e51b815260206004820152600e60248201527f494e56414c49445f414d4f554e540000000000000000000000000000000000006044820152606401610709565b61234583838361359f565b60006001600160a01b03841661235961227d565b6001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62858560405161239c929190918252602082015260400190565b60405180910390a4505050565b8251600080808080866123fe5760405162461bcd60e51b815260206004820152600e60248201527f4f50455241544f525f21415554480000000000000000000000000000000000006044820152606401610709565b60005b868110156126a3578a6001600160a01b03168c6001600160a01b031614156124815761247c8c8b838151811061244757634e487b7160e01b600052603260045260246000fd5b60200260200101518b848151811061246f57634e487b7160e01b600052603260045260246000fd5b602002602001015161361a565b612691565b60008982815181106124a357634e487b7160e01b600052603260045260246000fd5b60200260200101511115612691576124e18a82815181106124d457634e487b7160e01b600052603260045260246000fd5b60200260200101516121e9565b9096509450816125af576001600160a01b038c166000908152600460209081526040808320898452909152902054895187935061254a919087908c908590811061253b57634e487b7160e01b600052603260045260246000fd5b602002602001015160016136a9565b6001600160a01b038c1660009081526004602090815260408083208a84529091529020548a519195506125a89187908c908590811061259957634e487b7160e01b600052603260045260246000fd5b602002602001015160006136a9565b9250612691565b81861461260e576001600160a01b038c8116600090815260046020818152604080842087855280835281852099909955938f16835290815282822094825284815282822095909555878152948452808520549290935291909220549084905b61264d858a838151811061263257634e487b7160e01b600052603260045260246000fd5b60200260200101516001876136a9909392919063ffffffff16565b935061268e858a838151811061267357634e487b7160e01b600052603260045260246000fd5b60200260200101516000866136a9909392919063ffffffff16565b92505b8061269b81614b21565b915050612401565b5084158015906126c55750896001600160a01b03168b6001600160a01b031614155b15612706576001600160a01b03808c1660009081526004602081815260408084208a85528252808420889055938e1683529081528282208883529052208290555b5050505050505050505050565b60006001600160a01b0385163b61272c575060016127fe565b6040517fbc197c810000000000000000000000000000000000000000000000000000000081526000906001600160a01b0387169063bc197c819061277c908b908b908a908a908a90600401614714565b602060405180830381600087803b15801561279657600080fd5b505af11580156127aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ce91906145ba565b6001600160e01b0319167fbc197c8100000000000000000000000000000000000000000000000000000000149150505b9695505050505050565b600061281261227d565b9050600080612820856121e9565b6001600160a01b03881660009081526004602090815260408083208584529091528120549294509092506128589190839087906136a9565b6001600160a01b03878116600081815260046020908152604080832088845282528083209590955584518a8152908101899052919390928716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46128db836000888888604051806020016040528060008152506134cf565b6112b75760405162461bcd60e51b815260206004820152601160248201527f5452414e534645525f52454a45435445440000000000000000000000000000006044820152606401610709565b600061293161227d565b905060005b8351811015612a6b57600083828151811061296157634e487b7160e01b600052603260045260246000fd5b60200260200101511180156129b45750600161297f6020600261496d565b6129899190614a81565b8382815181106129a957634e487b7160e01b600052603260045260246000fd5b602002602001015111155b612a005760405162461bcd60e51b815260206004820152600e60248201527f494e56414c49445f414d4f554e540000000000000000000000000000000000006044820152606401610709565b612a5985858381518110612a2457634e487b7160e01b600052603260045260246000fd5b6020026020010151858481518110612a4c57634e487b7160e01b600052603260045260246000fd5b602002602001015161359f565b80612a6381614b21565b915050612936565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051612abc929190614817565b60405180910390a450505050565b600080612ad6856121e9565b6001600160a01b03881660009081526004602090815260408083208584529091529020549193509150612b0c90828660026136a9565b6001600160a01b03878116600081815260046020908152604080832088845282528083209590955584518a8152908101899052919390928b16917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4612b80876000888888886134cf565b611ed75760405162461bcd60e51b815260206004820152601160248201527f5452414e534645525f52454a45435445440000000000000000000000000000006044820152606401610709565b600181600e54901c1660011415612c255760405162461bcd60e51b815260206004820152601360248201527f414c52454144595f494e495449414c49534544000000000000000000000000006044820152606401610709565b806001901b600e5417600e8190555050565b60008085118015612c5f57506001612c516020600261496d565b612c5b9190614a81565b8511155b612cab5760405162461bcd60e51b815260206004820152601460248201527f535550504c595f4f55545f4f465f424f554e44530000000000000000000000006044820152606401610709565b612cb7600c600261496d565b8361ffff161115612d0a5760405162461bcd60e51b815260206004820152601460248201527f4e554d5f46545f4f55545f4f465f424f554e44530000000000000000000000006044820152606401610709565b61ffff8216612d1b600b600261496d565b612d299061ffff8616614a3f565b612d356017600261496d565b612d469064ffffffffff8816614a3f565b612d526057600261496d565b600f54612d7a919074010000000000000000000000000000000000000000900460ff16614a3f565b88600114612d89576000612da0565b612d95605f600261496d565b612da0906001614a3f565b612dac6060600261496d565b612dbf906001600160a01b038d16614a3f565b612dc991906148ec565b612dd391906148ec565b612ddd91906148ec565b612de791906148ec565b6127fe91906148ec565b6001600160a01b038316612e475760405162461bcd60e51b815260206004820152600960248201527f53454e4445523d3d3000000000000000000000000000000000000000000000006044820152606401610709565b816001600160a01b0316836001600160a01b03161415612ea95760405162461bcd60e51b815260206004820152601060248201527f53454e4445523d3d4f50455241544f52000000000000000000000000000000006044820152606401610709565b6001600160a01b038216612eff5760405162461bcd60e51b815260206004820152600b60248201527f4f50455241544f523d3d300000000000000000000000000000000000000000006044820152606401610709565b6001600160a01b03821660009081526001602052604090205460ff1615612f685760405162461bcd60e51b815260206004820152601b60248201527f415050525f4558495354494e475f53555045524f50455241544f5200000000006044820152606401610709565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60005b82518110156130d457600083828151811061300357634e487b7160e01b600052603260045260246000fd5b602002602001015111156130c2576000806130378684815181106124d457634e487b7160e01b600052603260045260246000fd5b915091506130978186858151811061305f57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b038b1660009081526004835260408082208883529093529190912054919060026136a9565b6001600160a01b03881660009081526004602090815260408083209583529490529290922091909155505b806130cc81614b21565b915050612fd8565b506111286130e061227d565b85858585613837565b6060600085511161313c5760405162461bcd60e51b815260206004820152600b60248201527f535550504c4945533c3d300000000000000000000000000000000000000000006044820152606401610709565b613148600b600261496d565b855111156131985760405162461bcd60e51b815260206004820152600d60248201527f42415443485f544f4f5f424947000000000000000000000000000000000000006044820152606401610709565b6131a38686856138ea565b9050600760006bffffffff80000000000007ff19836000815181106131d857634e487b7160e01b600052603260045260246000fd5b60200260200101511681526020019081526020016000205460001c60001461322d5760405162461bcd60e51b815260206004820152600860248201526724a22faa20a5a2a760c11b6044820152606401610709565b81600760006bffffffff80000000000007ff198460008151811061326157634e487b7160e01b600052603260045260246000fd5b60200260200101511681526020019081526020016000208190555083600860006bffffffff80000000000007ff19846000815181106132b057634e487b7160e01b600052603260045260246000fd5b602002602001015116815260200190815260200160002090805190602001906110a9929190613cdf565b60005b82518161ffff161015613308576132f681848787613ae0565b6133016008826148a8565b90506132dd565b61331c61331361227d565b86868686613837565b5050505050565b60008061332e61227d565b90506000816001600160a01b0316876001600160a01b0316148061335757506133578783611a35565b9050806133a65760405162461bcd60e51b815260206004820152600e60248201527f4f50455241544f525f21415554480000000000000000000000000000000000006044820152606401610709565b8315613462576000806133b8876121e9565b6001600160a01b038b16600090815260046020908152604080832085845290915290205491935091506133ee90828860016136a9565b6001600160a01b03808b166000908152600460208181526040808420888552825280842095909555928c16825282528281208582529091529081205461343791839089906136a9565b6001600160a01b03891660009081526004602090815260408083209583529490529290922091909155505b856001600160a01b0316876001600160a01b0316836001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6288886040516134ba929190918252602082015260400190565b60405180910390a45060019695505050505050565b60006001600160a01b0385163b6134e8575060016127fe565b6040517ff23a6e6100000000000000000000000000000000000000000000000000000000808252906001600160a01b0387169063f23a6e6190613537908b908b908a908a908a90600401614772565b602060405180830381600087803b15801561355157600080fd5b505af1158015613565573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061358991906145ba565b6001600160e01b03191614979650505050505050565b6000806135ab846121e9565b6001600160a01b038716600090815260046020908152604080832085845290915290205491935091506135eb908263ffffffff808716906001906136a916565b6001600160a01b0390951660009081526004602090815260408083209483529390529190912093909355505050565b600080613626846121e9565b6001600160a01b03871660009081526004602090815260408083208584529091529020549193509150839061365b9083612238565b101561331c5760405162461bcd60e51b815260206004820152600f60248201527f42414c414e43455f544f4f5f4c4f5700000000000000000000000000000000006044820152606401610709565b600080808360028111156136cd57634e487b7160e01b600052602160045260246000fd5b14156136fa576136dd8686612238565b90506136f386866136ee87856148ec565b613c0f565b915061382e565b600183600281111561371c57634e487b7160e01b600052602160045260246000fd5b14156137b35761372c8686612238565b9050838110156137a45760405162461bcd60e51b815260206004820152602260248201527f63616e277420737562737472616374206d6f7265207468616e2074686572652060448201527f69730000000000000000000000000000000000000000000000000000000000006064820152608401610709565b6136f386866136ee8785614a81565b60028360028111156137d557634e487b7160e01b600052602160045260246000fd5b14156137e6576136f3868686613c0f565b60405162461bcd60e51b815260206004820152601160248201527f496e76616c6964206f7065726174696f6e0000000000000000000000000000006044820152606401610709565b50949350505050565b836001600160a01b031660006001600160a01b0316866001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051613887929190614817565b60405180910390a461389e85600086868686612713565b61331c5760405162461bcd60e51b815260206004820152601160248201527f5452414e534645525f52454a45435445440000000000000000000000000000006044820152606401610709565b8151606090600061ffff821667ffffffffffffffff81111561391c57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015613945578160200160208202803683370190505b5090506000805b8361ffff168161ffff161015613a385761ffff82166139ab57868161ffff168151811061398957634e487b7160e01b600052603260045260246000fd5b6020026020010151600114156139a6576139a38185614a5e565b91505b613a26565b868161ffff16815181106139cf57634e487b7160e01b600052603260045260246000fd5b6020026020010151600114613a265760405162461bcd60e51b815260206004820152601160248201527f4e4654535f4d5553545f42455f4c4153540000000000000000000000000000006044820152606401610709565b80613a3081614aff565b91505061394c565b506000613a458285614a5e565b905060005b8461ffff168161ffff161015613ad357613a9289898361ffff1681518110613a8257634e487b7160e01b600052603260045260246000fd5b6020026020010151898585612c37565b848261ffff1681518110613ab657634e487b7160e01b600052603260045260246000fd5b602090810291909101015280613acb81614aff565b915050613a4a565b5091979650505050505050565b600080613b0a838761ffff16815181106124d457634e487b7160e01b600052603260045260246000fd5b9150915060005b600881108015613b2e57508551613b2c8261ffff8a166148ec565b105b15611ed7576000613b438261ffff8a166148ec565b90506000878281518110613b6757634e487b7160e01b600052603260045260246000fd5b60200260200101511115613bfc57613bd7613b8283856148ec565b888381518110613ba257634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b038a1660009081526004835260408082208a83529093529182205492916136a9565b6001600160a01b03871660009081526004602090815260408083208884529091529020555b5080613c0781614b21565b915050613b11565b6000613c1d6020600261495e565b8210613c915760405162461bcd60e51b815260206004820152602360248201527f416d6f756e7420746f20777269746520696e2062696e20697320746f6f206c6160448201527f72676500000000000000000000000000000000000000000000000000000000006064820152608401610709565b6000613ca36001640100000000614a81565b90506000613cb28560016148ec565b613cbd906020614a3f565b613cc990610100614a81565b91821b199590951692901b919091179392505050565b828054613ceb90614ac4565b90600052602060002090601f016020900481019282613d0d5760008555613d53565b82601f10613d2657805160ff1916838001178555613d53565b82800160010185558215613d53579182015b82811115613d53578251825591602001919060010190613d38565b50613d5f929150613d63565b5090565b5b80821115613d5f5760008155600101613d64565b60008083601f840112613d89578182fd5b50813567ffffffffffffffff811115613da0578182fd5b6020830191508360208083028501011115613dba57600080fd5b9250929050565b600082601f830112613dd1578081fd5b8135602067ffffffffffffffff821115613ded57613ded614b7c565b808202613dfb82820161484f565b838152828101908684018388018501891015613e15578687fd5b8693505b858410156115d9578035835260019390930192918401918401613e19565b8035801515811461082857600080fd5b60008083601f840112613e58578182fd5b50813567ffffffffffffffff811115613e6f578182fd5b602083019150836020828501011115613dba57600080fd5b803564ffffffffff8116811461082857600080fd5b803560ff8116811461082857600080fd5b600060208284031215613ebe578081fd5b813561186181614b92565b60008060408385031215613edb578081fd5b8235613ee681614b92565b91506020830135613ef681614b92565b809150509250929050565b60008060008060008060c08789031215613f19578182fd5b8635613f2481614b92565b95506020870135613f3481614b92565b94506040870135613f4481614b92565b93506060870135613f5481614b92565b92506080870135613f6481614b92565b9150613f7260a08801613e9c565b90509295509295509295565b600080600080600060a08688031215613f95578081fd5b8535613fa081614b92565b94506020860135613fb081614b92565b93506040860135613fc081614b92565b92506060860135613fd081614b92565b9150613fde60808701613e9c565b90509295509295909350565b60008060008060008060008060a0898b031215614005578182fd5b883561401081614b92565b9750602089013561402081614b92565b9650604089013567ffffffffffffffff8082111561403c578384fd5b6140488c838d01613d78565b909850965060608b0135915080821115614060578384fd5b61406c8c838d01613d78565b909650945060808b0135915080821115614084578384fd5b506140918b828c01613e47565b999c989b5096995094979396929594505050565b6000806000606084860312156140b9578081fd5b83356140c481614b92565b925060208401356140d481614b92565b91506140e260408501613e37565b90509250925092565b60008060008060008060a08789031215614103578384fd5b863561410e81614b92565b9550602087013561411e81614b92565b94506040870135935060608701359250608087013567ffffffffffffffff811115614147578283fd5b61415389828a01613e47565b979a9699509497509295939492505050565b60008060408385031215614177578182fd5b823561418281614b92565b915061419060208401613e37565b90509250929050565b6000806000604084860312156141ad578081fd5b83356141b881614b92565b9250602084013567ffffffffffffffff8111156141d3578182fd5b6141df86828701613e47565b9497909650939450505050565b600080604083850312156141fe578182fd5b823561420981614b92565b946020939093013593505050565b60008060006060848603121561422b578081fd5b833561423681614b92565b925060208401359150604084013561424d81614b92565b809150509250925092565b60008060006060848603121561426c578081fd5b833561427781614b92565b95602085013595506040909401359392505050565b6000806000806000608086880312156142a3578283fd5b85356142ae81614b92565b94506020860135935060408601359250606086013567ffffffffffffffff8111156142d7578182fd5b6142e388828901613e47565b969995985093965092949392505050565b60008060008060008060008060008060e08b8d031215614312578384fd5b8a3561431d81614b92565b995061432b60208c01613e87565b985060408b0135975060608b013567ffffffffffffffff8082111561434e578586fd5b61435a8e838f01613d78565b909950975060808d0135915080821115614372578586fd5b61437e8e838f01613e47565b909750955060a08d0135915061439382614b92565b90935060c08c013590808211156143a8578384fd5b506143b58d828e01613e47565b915080935050809150509295989b9194979a5092959850565b600080600080600080600060c0888a0312156143e8578081fd5b87356143f381614b92565b965061440160208901613e87565b95506040880135945060608801359350608088013561441f81614b92565b925060a088013567ffffffffffffffff81111561443a578182fd5b6144468a828b01613e47565b989b979a50959850939692959293505050565b6000806000806040858703121561446e578182fd5b843567ffffffffffffffff80821115614485578384fd5b61449188838901613d78565b909650945060208701359150808211156144a9578384fd5b506144b687828801613d78565b95989497509550505050565b6000806000606084860312156144d6578081fd5b833567ffffffffffffffff808211156144ed578283fd5b6144f987838801613dc1565b9450602086013591508082111561450e578283fd5b61451a87838801613dc1565b9350604086013591508082111561452f578283fd5b508401601f81018613614540578182fd5b803561455361454e82614880565b61484f565b818152876020838501011115614567578384fd5b8160208401602083013783602083830101528093505050509250925092565b600060208284031215614597578081fd5b5035919050565b6000602082840312156145af578081fd5b813561186181614baa565b6000602082840312156145cb578081fd5b815161186181614baa565b6000602082840312156145e7578081fd5b815167ffffffffffffffff8111156145fd578182fd5b8201601f8101841361460d578182fd5b805161461b61454e82614880565b81815285602083850101111561462f578384fd5b610751826020830160208601614a98565b60008060408385031215614652578182fd5b50508035926020909101359150565b60008284527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115614692578081fd5b6020830280836020870137939093016020019283525090919050565b6000815180845260208085019450808401835b838110156146dd578151875295820195908201906001016146c1565b509495945050505050565b60008151808452614700816020860160208601614a98565b601f01601f19169290920160200192915050565b60006001600160a01b03808816835280871660208401525060a0604083015261474060a08301866146ae565b828103606084015261475281866146ae565b9050828103608084015261476681856146e8565b98975050505050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a060808301526147aa60a08301846146e8565b979650505050505050565b60006001600160a01b03851682528360208301526060604083015261075160608301846146e8565b6000604082526147f1604083018688614661565b82810360208401526147aa818587614661565b60006020825261186160208301846146ae565b60006040825261482a60408301856146ae565b828103602084015261075181856146ae565b60006020825261186160208301846146e8565b604051601f8201601f1916810167ffffffffffffffff8111828210171561487857614878614b7c565b604052919050565b600067ffffffffffffffff82111561489a5761489a614b7c565b50601f01601f191660200190565b600061ffff8083168185168083038211156148c5576148c5614b50565b01949350505050565b600062ffffff8083168185168083038211156148c5576148c5614b50565b600082198211156148ff576148ff614b50565b500190565b60008261491357614913614b66565b500490565b80825b600180861161492a5750614955565b81870482111561493c5761493c614b50565b8086161561494957918102915b9490941c93800261491b565b94509492505050565b6000611861600019848461497b565b600061186160001960ff8516845b60008261498a57506001611861565b8161499757506000611861565b81600181146149ad57600281146149b7576149e4565b6001915050611861565b60ff8411156149c8576149c8614b50565b6001841b9150848211156149de576149de614b50565b50611861565b5060208310610133831016604e8410600b8410161715614a17575081810a83811115614a1257614a12614b50565b611861565b614a248484846001614918565b808604821115614a3657614a36614b50565b02949350505050565b6000816000190483118215151615614a5957614a59614b50565b500290565b600061ffff83811690831681811015614a7957614a79614b50565b039392505050565b600082821015614a9357614a93614b50565b500390565b60005b83811015614ab3578181015183820152602001614a9b565b838111156111285750506000910152565b600281046001821680614ad857607f821691505b60208210811415614af957634e487b7160e01b600052602260045260246000fd5b50919050565b600061ffff80831681811415614b1757614b17614b50565b6001019392505050565b6000600019821415614b3557614b35614b50565b5060010190565b600082614b4b57614b4b614b66565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114614ba757600080fd5b50565b6001600160e01b031981168114614ba757600080fdfea26469706673582212207b0fd173f0a6843e22692656e44d63d7e0bc102518403b23fa3a3bddc05b034f64736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102dd5760003560e01c80638f28397011610186578063c7778baa116100e3578063e985e9c511610097578063f242432a11610071578063f242432a1461067d578063f6c983fb14610690578063ff23be53146106a3576102dd565b8063e985e9c514610644578063eeb5a5d114610657578063f0bc00d81461066a576102dd565b8063cf2c52cb116100c8578063cf2c52cb1461060b578063d5de8e491461061e578063d9f37f8e14610631576102dd565b8063c7778baa146105e7578063ce1b815f146105fa576102dd565b8063a290f20f1161013a578063b390c0ab1161011f578063b390c0ab146103aa578063b9b75ebc146105c1578063bd9ff41b146105d4576102dd565b8063a290f20f1461059b578063ac9fe421146105ae576102dd565b806398fbde641161016b57806398fbde64146105645780639bc88b9c14610577578063a22cb46514610588576102dd565b80638f2839701461051857806395d89b411461052b576102dd565b806331e5361f1161023f578063572b6c05116101f35780636e9960c3116101cd5780636e9960c3146104e1578063731133e9146104f257806376596d2114610505576102dd565b8063572b6c05146104805780635c5fb521146104a2578063654b748a146104b5576102dd565b80634c4d07e7116102245780634c4d07e7146104095780634e1273f41461043557806353a8eccd14610455576102dd565b806331e5361f146103e357806340914613146103f6576102dd565b8063124d91e5116102965780632262f53f1161027b5780632262f53f146103aa5780632e712b46146103bd5780632eb2c2d6146103d0576102dd565b8063124d91e514610368578063219cc8bc1461037b576102dd565b8063049476df116102c7578063049476df1461032b57806306fdde03146103405780630e89341c14610355576102dd565b8062fdd58e146102e257806301ffc9a714610308575b600080fd5b6102f56102f03660046141ec565b6106b6565b6040519081526020015b60405180910390f35b61031b61031636600461459e565b61075a565b60405190151581526020016102ff565b61033e610339366004613ead565b61082d565b005b61034861097c565b6040516102ff919061483c565b610348610363366004614586565b6109b4565b61033e610376366004614258565b610ad3565b6102f5610389366004614586565b6bffffffff80000000000007ff191660009081526007602052604090205490565b61033e6103b8366004614640565b610b4b565b6102f56103cb366004614586565b610b61565b61033e6103de366004613fea565b610b79565b61031b6103f1366004613ead565b610e59565b61033e610404366004614258565b610f0a565b61031b610417366004613ead565b6001600160a01b03166000908152600b602052604090205460ff1690565b610448610443366004614459565b610f57565b6040516102ff9190614804565b602654610468906001600160a01b031681565b6040516001600160a01b0390911681526020016102ff565b61031b61048e366004613ead565b6010546001600160a01b0390811691161490565b61033e6104b0366004614459565b6110b3565b61031b6104c3366004613ead565b6001600160a01b031660009081526001602052604090205460ff1690565b6000546001600160a01b0316610468565b61033e61050036600461428c565b61112e565b61033e610513366004613f7e565b6112bf565b61033e610526366004613ead565b611370565b60408051808201909152600581527f41535345540000000000000000000000000000000000000000000000000000006020820152610348565b6102f56105723660046143ce565b611432565b600d546001600160a01b0316610468565b61033e610596366004614165565b6115e5565b61033e6105a9366004613f01565b6115f7565b61033e6105bc366004614165565b6116b4565b61033e6105cf366004614165565b611788565b61031b6105e2366004614586565b611846565b6102f56105f5366004614586565b611868565b6010546001600160a01b0316610468565b61033e610619366004614199565b611924565b6102f561062c366004614586565b611a06565b601154610468906001600160a01b031681565b61031b610652366004613ec9565b611a35565b61033e6106653660046140a5565b611b33565b6104486106783660046142f4565b611bc4565b61033e61068b3660046140eb565b611d96565b61031b61069e366004614586565b611ee0565b6102f56106b1366004614217565b611f2f565b60006106c182611ee0565b6107125760405162461bcd60e51b815260206004820152600a60248201527f494e56414c49445f49440000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b60008061071e846121e9565b6001600160a01b038716600090815260046020908152604080832085845290915290205491935091506107519082612238565b95945050505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614806107bd57507fd9b67a26000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b806107f157507f0e89341c000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b8061082557507f572b6c05000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b90505b919050565b600d546001600160a01b031661084161227d565b6001600160a01b0316146108975760405162461bcd60e51b815260206004820152600e60248201527f21424f554e4345525f41444d494e0000000000000000000000000000000000006044820152606401610709565b6001600160a01b0381166109135760405162461bcd60e51b815260206004820152603960248201527f417373657442617365455243313135353a206e657720626f756e63657220616460448201527f6d696e2063616e2774206265207a65726f2061646472657373000000000000006064820152608401610709565b600d546040516001600160a01b038084169216907f1bab6ababbec5519512e9ee16964953ec0f72839126138285cac1f1136bd642e90600090a3600d805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60408051808201909152601081527f53616e64626f782773204153534554730000000000000000000000000000000060208201525b90565b60606109bf82611ee0565b610a0b5760405162461bcd60e51b815260206004820152600a60248201527f494e56414c49445f4944000000000000000000000000000000000000000000006044820152606401610709565b6bffffffff80000000000007ff198216600090815260076020526040908190205490517f55f43cd400000000000000000000000000000000000000000000000000000000815260048101919091526024810183905273__$22fbfd89be1e25db7d564b4a9955403d23$__906355f43cd49060440160006040518083038186803b158015610a9757600080fd5b505af4158015610aab573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261082591908101906145d6565b610adb61227d565b6001600160a01b0316836001600160a01b03161480610b015750610b018361065261227d565b610b3b5760405162461bcd60e51b815260206004820152600b60248201526a085055551213d49256915160aa1b6044820152606401610709565b610b468383836122c7565b505050565b610b5d610b5661227d565b83836122c7565b5050565b6000610b6c82611868565b5050603f1c62ffffff1690565b848314610bc85760405162461bcd60e51b815260206004820152601260248201527f4d49534d4154434845445f4152525f4c454e00000000000000000000000000006044820152606401610709565b6001600160a01b038716610c065760405162461bcd60e51b81526020600482015260056024820152640544f3d3d360dc1b6044820152606401610709565b6001600160a01b038816610c5c5760405162461bcd60e51b815260206004820152600760248201527f46524f4d3d3d30000000000000000000000000000000000000000000000000006044820152606401610709565b6000610c6661227d565b90506000816001600160a01b03168a6001600160a01b03161480610c8f5750610c8f8a83611a35565b9050610d028a8a8a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808e0282810182019093528d82529093508d92508c9182918501908490808284376000920191909152508892506123a9915050565b886001600160a01b03168a6001600160a01b0316836001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8b8b8b8b604051610d5594939291906147dd565b60405180910390a4610e01828b8b8b8b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808f0282810182019093528e82529093508e92508d91829185019084908082843760009201919091525050604080516020601f8e018190048102820181019092528c815292508c91508b908190840183828082843760009201919091525061271392505050565b610e4d5760405162461bcd60e51b815260206004820152601660248201527f313135355f5452414e534645525f52454a4543544544000000000000000000006044820152606401610709565b50505050505050505050565b6000610e6361227d565b6000546001600160a01b03908116911614610eae5760405162461bcd60e51b815260206004820152600b60248201526a085055551213d49256915160aa1b6044820152606401610709565b6011805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091556040517f5a91617bd1e0deac2e7e6f6fbd384ff93d50ab3d50b6f3cec6b7979a7b5c9de090600090a2506001919050565b610f1561041761227d565b610f4c5760405162461bcd60e51b815260206004820152600860248201526710a127aaa721a2a960c11b6044820152606401610709565b610b46838383612808565b6060838214610fa85760405162461bcd60e51b815260206004820152601360248201527f4152475f4c454e4754485f4d49534d41544348000000000000000000000000006044820152606401610709565b60008267ffffffffffffffff811115610fd157634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610ffa578160200160208202803683370190505b50905060005b838110156110a95761106c87878381811061102b57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906110409190613ead565b86868481811061106057634e487b7160e01b600052603260045260246000fd5b905060200201356106b6565b82828151811061108c57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806110a181614b21565b915050611000565b5095945050505050565b6111286110be61227d565b8585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060408051602080890282810182019093528882529093508892508791829185019084908082843760009201919091525061292792505050565b50505050565b61113961041761227d565b6111705760405162461bcd60e51b815260206004820152600860248201526710a127aaa721a2a960c11b6044820152606401610709565b806111bd5760405162461bcd60e51b815260206004820152601060248201527f4d455441444154415f4d495353494e47000000000000000000000000000000006044820152606401610709565b6001600160a01b0385166111fb5760405162461bcd60e51b81526020600482015260056024820152640544f3d3d360dc1b6044820152606401610709565b6bffffffff80000000000007ff198416600081815260076020526040902054156112525760405162461bcd60e51b815260206004820152600860248201526724a22faa20a5a2a760c11b6044820152606401610709565b61125e82840184614586565b6000828152600760205260409020556112b761127861227d565b87878787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612aca92505050565b505050505050565b6112c96001612bcc565b6000805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b0387811691909117909255600d8054821686841617905560118054821685841617905560108054909116918716919091179055600f805460ff90921674010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff90921691909117905550505050565b6000546001600160a01b031633146113ca5760405162461bcd60e51b815260206004820152601360248201527f41444d494e5f4143434553535f44454e494544000000000000000000000000006044820152606401610709565b600080546040516001600160a01b03808516939216917f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f91a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000856114815760405162461bcd60e51b815260206004820152600760248201527f484153483d3d30000000000000000000000000000000000000000000000000006044820152606401610709565b61148c61041761227d565b6114c35760405162461bcd60e51b815260206004820152600860248201526710a127aaa721a2a960c11b6044820152606401610709565b6001600160a01b0384166115015760405162461bcd60e51b81526020600482015260056024820152640544f3d3d360dc1b6044820152606401610709565b61152388868988600114611516576001611519565b60005b60ff166000612c37565b6bffffffff80000000000007ff198116600081815260076020526040902054919250901561157e5760405162461bcd60e51b815260206004820152600860248201526724a22faa20a5a2a760c11b6044820152606401610709565b60008181526007602052604090208790556115d961159a61227d565b86848988888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612aca92505050565b50979650505050505050565b610b5d6115f061227d565b8383612df1565b6001600160a01b0383166116735760405162461bcd60e51b815260206004820152603a60248201527f506f6c79676f6e41737365744552433131353554756e6e656c3a206368696c6460448201527f436861696e4d616e616765722063616e2774206265207a65726f0000000000006064820152608401610709565b61168086868685856112bf565b50506026805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055505050565b6000546001600160a01b031633146117345760405162461bcd60e51b815260206004820152602c60248201527f6f6e6c792061646d696e20697320616c6c6f77656420746f206164642073757060448201527f6572206f70657261746f727300000000000000000000000000000000000000006064820152608401610709565b6001600160a01b038216600081815260016020526040808220805460ff191685151590811790915590519092917f44f92d27abdf4cfb6a7d712c3af68f3be086d4ca747ab802c36f67d6790060d891a35050565b600d546001600160a01b031661179c61227d565b6001600160a01b0316146117f25760405162461bcd60e51b815260206004820152600e60248201527f21424f554e4345525f41444d494e0000000000000000000000000000000000006044820152606401610709565b6001600160a01b0382166000818152600b6020526040808220805460ff191685151590811790915590519092917f5ecd928ac22825e06273a3e8db8118dd7fe11bd2637ecfe4bfa25154948bd85f91a35050565b60006b807fffff800000000000000019821661186181611ee0565b9392505050565b600061187382611ee0565b6118bf5760405162461bcd60e51b815260206004820152600a60248201527f494e56414c49445f4944000000000000000000000000000000000000000000006044820152606401610709565b6b807fffff80000000000000001982166118d881611ee0565b6108255760405162461bcd60e51b815260206004820152601360248201527f554e4d494e5445445f434f4c4c454354494f4e000000000000000000000000006044820152606401610709565b6026546001600160a01b031661193861227d565b6001600160a01b03161461198e5760405162461bcd60e51b815260206004820152600a60248201527f214445504f5349544f52000000000000000000000000000000000000000000006044820152606401610709565b6001600160a01b0383166119e45760405162461bcd60e51b815260206004820152601460248201527f494e56414c49445f4445504f5349545f555345520000000000000000000000006044820152606401610709565b600080806119f4848601866144c2565b9250925092506112b786848484612fd5565b6000611a146057600261496d565b611a2c906b7f80000000000000000000008416614904565b60ff1692915050565b60006001600160a01b038316611a8d5760405162461bcd60e51b815260206004820152600860248201527f4f574e45523d3d300000000000000000000000000000000000000000000000006044820152606401610709565b6001600160a01b038216611ae35760405162461bcd60e51b815260206004820152600b60248201527f4f50455241544f523d3d300000000000000000000000000000000000000000006044820152606401610709565b6001600160a01b0380841660009081526005602090815260408083209386168352929052205460ff16806118615750506001600160a01b031660009081526001602052604090205460ff16919050565b611b3b61227d565b6001600160a01b0316836001600160a01b03161480611b7f575060016000611b6161227d565b6001600160a01b0316815260208101919091526040016000205460ff165b611bb95760405162461bcd60e51b815260206004820152600b60248201526a085055551213d49256915160aa1b6044820152606401610709565b610b46838383612df1565b606088611c135760405162461bcd60e51b815260206004820152600760248201527f484153483d3d30000000000000000000000000000000000000000000000000006044820152606401610709565b611c1e61041761227d565b611c555760405162461bcd60e51b815260206004820152600860248201526710a127aaa721a2a960c11b6044820152606401610709565b6001600160a01b038416611c935760405162461bcd60e51b81526020600482015260056024820152640544f3d3d360dc1b6044820152606401610709565b611d148b89898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020601f8d018190048102820181019092528b815292508b91508a9081908401838280828437600081840152601f19601f820116905080830192505050505050508d8d6130e9565b9050611d8884828a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020601f8b0181900481028201810190925289815292508991508890819084018382808284376000920191909152506132da92505050565b9a9950505050505050505050565b6001600160a01b038516611dd45760405162461bcd60e51b81526020600482015260056024820152640544f3d3d360dc1b6044820152606401610709565b6001600160a01b038616611e2a5760405162461bcd60e51b815260206004820152600760248201527f46524f4d3d3d30000000000000000000000000000000000000000000000000006044820152606401610709565b6000611e3887878787613323565b90508015611ed757611e8b611e4b61227d565b8888888888888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506134cf92505050565b611ed75760405162461bcd60e51b815260206004820152601660248201527f313135355f5452414e534645525f52454a4543544544000000000000000000006044820152606401610709565b50505050505050565b6000611eee600b600261496d565b611efd90627ff8008416614904565b6107ff8316111580156108255750506bffffffff80000000000007ff1916600090815260076020526040902054151590565b6000611f3961227d565b6001600160a01b0316846001600160a01b03161480611f5f5750611f5f8461065261227d565b611f995760405162461bcd60e51b815260206004820152600b60248201526a085055551213d49256915160aa1b6044820152606401610709565b611fa461041761227d565b611fdb5760405162461bcd60e51b815260206004820152600860248201526710a127aaa721a2a960c11b6044820152606401610709565b6001600160a01b0382166120195760405162461bcd60e51b81526020600482015260056024820152640544f3d3d360dc1b6044820152606401610709565b6b8000000000000000000000008316156120755760405162461bcd60e51b815260206004820152600e60248201527f554e495155455f455243313135350000000000000000000000000000000000006044820152606401610709565b6000838152600960205260408120546120959063ffffffff1660016148ce565b600085815260096020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001662ffffff84161790559091506120dc856109b4565b905060006120ec603f600261495e565b6120fb9062ffffff8516614a3f565b612107605f600261496d565b61211190886148ec565b61211b91906148ec565b90506121298787600161359f565b6011546040516001600160a01b03909116906394d008ef908790849061215390879060200161483c565b6040516020818303038152906040526040518463ffffffff1660e01b8152600401612180939291906147b5565b600060405180830381600087803b15801561219a57600080fd5b505af11580156121ae573d6000803e3d6000fd5b50506040518392508891507faa923cda6d3360ee3cd49c083ac1fe5e062a5739b82a32d597a65168c0c6926c90600090a39695505050505050565b6000807fffffffffffffffffffffffffffffffffffffffff7fffffffffffffffffffffff8316610100602082020492506122266020610100614904565b6122309085614b3c565b915050915091565b60008061224b6001640100000000614a81565b9050600061225a8460016148ec565b612265906020614a3f565b61227190610100614a81565b9490941c169392505050565b6010546000906001600160a01b03163314156122c057507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c6109b1565b50336109b1565b6000811180156122ee575060016122e06020600261496d565b6122ea9190614a81565b8111155b61233a5760405162461bcd60e51b815260206004820152600e60248201527f494e56414c49445f414d4f554e540000000000000000000000000000000000006044820152606401610709565b61234583838361359f565b60006001600160a01b03841661235961227d565b6001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62858560405161239c929190918252602082015260400190565b60405180910390a4505050565b8251600080808080866123fe5760405162461bcd60e51b815260206004820152600e60248201527f4f50455241544f525f21415554480000000000000000000000000000000000006044820152606401610709565b60005b868110156126a3578a6001600160a01b03168c6001600160a01b031614156124815761247c8c8b838151811061244757634e487b7160e01b600052603260045260246000fd5b60200260200101518b848151811061246f57634e487b7160e01b600052603260045260246000fd5b602002602001015161361a565b612691565b60008982815181106124a357634e487b7160e01b600052603260045260246000fd5b60200260200101511115612691576124e18a82815181106124d457634e487b7160e01b600052603260045260246000fd5b60200260200101516121e9565b9096509450816125af576001600160a01b038c166000908152600460209081526040808320898452909152902054895187935061254a919087908c908590811061253b57634e487b7160e01b600052603260045260246000fd5b602002602001015160016136a9565b6001600160a01b038c1660009081526004602090815260408083208a84529091529020548a519195506125a89187908c908590811061259957634e487b7160e01b600052603260045260246000fd5b602002602001015160006136a9565b9250612691565b81861461260e576001600160a01b038c8116600090815260046020818152604080842087855280835281852099909955938f16835290815282822094825284815282822095909555878152948452808520549290935291909220549084905b61264d858a838151811061263257634e487b7160e01b600052603260045260246000fd5b60200260200101516001876136a9909392919063ffffffff16565b935061268e858a838151811061267357634e487b7160e01b600052603260045260246000fd5b60200260200101516000866136a9909392919063ffffffff16565b92505b8061269b81614b21565b915050612401565b5084158015906126c55750896001600160a01b03168b6001600160a01b031614155b15612706576001600160a01b03808c1660009081526004602081815260408084208a85528252808420889055938e1683529081528282208883529052208290555b5050505050505050505050565b60006001600160a01b0385163b61272c575060016127fe565b6040517fbc197c810000000000000000000000000000000000000000000000000000000081526000906001600160a01b0387169063bc197c819061277c908b908b908a908a908a90600401614714565b602060405180830381600087803b15801561279657600080fd5b505af11580156127aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ce91906145ba565b6001600160e01b0319167fbc197c8100000000000000000000000000000000000000000000000000000000149150505b9695505050505050565b600061281261227d565b9050600080612820856121e9565b6001600160a01b03881660009081526004602090815260408083208584529091528120549294509092506128589190839087906136a9565b6001600160a01b03878116600081815260046020908152604080832088845282528083209590955584518a8152908101899052919390928716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46128db836000888888604051806020016040528060008152506134cf565b6112b75760405162461bcd60e51b815260206004820152601160248201527f5452414e534645525f52454a45435445440000000000000000000000000000006044820152606401610709565b600061293161227d565b905060005b8351811015612a6b57600083828151811061296157634e487b7160e01b600052603260045260246000fd5b60200260200101511180156129b45750600161297f6020600261496d565b6129899190614a81565b8382815181106129a957634e487b7160e01b600052603260045260246000fd5b602002602001015111155b612a005760405162461bcd60e51b815260206004820152600e60248201527f494e56414c49445f414d4f554e540000000000000000000000000000000000006044820152606401610709565b612a5985858381518110612a2457634e487b7160e01b600052603260045260246000fd5b6020026020010151858481518110612a4c57634e487b7160e01b600052603260045260246000fd5b602002602001015161359f565b80612a6381614b21565b915050612936565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051612abc929190614817565b60405180910390a450505050565b600080612ad6856121e9565b6001600160a01b03881660009081526004602090815260408083208584529091529020549193509150612b0c90828660026136a9565b6001600160a01b03878116600081815260046020908152604080832088845282528083209590955584518a8152908101899052919390928b16917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4612b80876000888888886134cf565b611ed75760405162461bcd60e51b815260206004820152601160248201527f5452414e534645525f52454a45435445440000000000000000000000000000006044820152606401610709565b600181600e54901c1660011415612c255760405162461bcd60e51b815260206004820152601360248201527f414c52454144595f494e495449414c49534544000000000000000000000000006044820152606401610709565b806001901b600e5417600e8190555050565b60008085118015612c5f57506001612c516020600261496d565b612c5b9190614a81565b8511155b612cab5760405162461bcd60e51b815260206004820152601460248201527f535550504c595f4f55545f4f465f424f554e44530000000000000000000000006044820152606401610709565b612cb7600c600261496d565b8361ffff161115612d0a5760405162461bcd60e51b815260206004820152601460248201527f4e554d5f46545f4f55545f4f465f424f554e44530000000000000000000000006044820152606401610709565b61ffff8216612d1b600b600261496d565b612d299061ffff8616614a3f565b612d356017600261496d565b612d469064ffffffffff8816614a3f565b612d526057600261496d565b600f54612d7a919074010000000000000000000000000000000000000000900460ff16614a3f565b88600114612d89576000612da0565b612d95605f600261496d565b612da0906001614a3f565b612dac6060600261496d565b612dbf906001600160a01b038d16614a3f565b612dc991906148ec565b612dd391906148ec565b612ddd91906148ec565b612de791906148ec565b6127fe91906148ec565b6001600160a01b038316612e475760405162461bcd60e51b815260206004820152600960248201527f53454e4445523d3d3000000000000000000000000000000000000000000000006044820152606401610709565b816001600160a01b0316836001600160a01b03161415612ea95760405162461bcd60e51b815260206004820152601060248201527f53454e4445523d3d4f50455241544f52000000000000000000000000000000006044820152606401610709565b6001600160a01b038216612eff5760405162461bcd60e51b815260206004820152600b60248201527f4f50455241544f523d3d300000000000000000000000000000000000000000006044820152606401610709565b6001600160a01b03821660009081526001602052604090205460ff1615612f685760405162461bcd60e51b815260206004820152601b60248201527f415050525f4558495354494e475f53555045524f50455241544f5200000000006044820152606401610709565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60005b82518110156130d457600083828151811061300357634e487b7160e01b600052603260045260246000fd5b602002602001015111156130c2576000806130378684815181106124d457634e487b7160e01b600052603260045260246000fd5b915091506130978186858151811061305f57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b038b1660009081526004835260408082208883529093529190912054919060026136a9565b6001600160a01b03881660009081526004602090815260408083209583529490529290922091909155505b806130cc81614b21565b915050612fd8565b506111286130e061227d565b85858585613837565b6060600085511161313c5760405162461bcd60e51b815260206004820152600b60248201527f535550504c4945533c3d300000000000000000000000000000000000000000006044820152606401610709565b613148600b600261496d565b855111156131985760405162461bcd60e51b815260206004820152600d60248201527f42415443485f544f4f5f424947000000000000000000000000000000000000006044820152606401610709565b6131a38686856138ea565b9050600760006bffffffff80000000000007ff19836000815181106131d857634e487b7160e01b600052603260045260246000fd5b60200260200101511681526020019081526020016000205460001c60001461322d5760405162461bcd60e51b815260206004820152600860248201526724a22faa20a5a2a760c11b6044820152606401610709565b81600760006bffffffff80000000000007ff198460008151811061326157634e487b7160e01b600052603260045260246000fd5b60200260200101511681526020019081526020016000208190555083600860006bffffffff80000000000007ff19846000815181106132b057634e487b7160e01b600052603260045260246000fd5b602002602001015116815260200190815260200160002090805190602001906110a9929190613cdf565b60005b82518161ffff161015613308576132f681848787613ae0565b6133016008826148a8565b90506132dd565b61331c61331361227d565b86868686613837565b5050505050565b60008061332e61227d565b90506000816001600160a01b0316876001600160a01b0316148061335757506133578783611a35565b9050806133a65760405162461bcd60e51b815260206004820152600e60248201527f4f50455241544f525f21415554480000000000000000000000000000000000006044820152606401610709565b8315613462576000806133b8876121e9565b6001600160a01b038b16600090815260046020908152604080832085845290915290205491935091506133ee90828860016136a9565b6001600160a01b03808b166000908152600460208181526040808420888552825280842095909555928c16825282528281208582529091529081205461343791839089906136a9565b6001600160a01b03891660009081526004602090815260408083209583529490529290922091909155505b856001600160a01b0316876001600160a01b0316836001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6288886040516134ba929190918252602082015260400190565b60405180910390a45060019695505050505050565b60006001600160a01b0385163b6134e8575060016127fe565b6040517ff23a6e6100000000000000000000000000000000000000000000000000000000808252906001600160a01b0387169063f23a6e6190613537908b908b908a908a908a90600401614772565b602060405180830381600087803b15801561355157600080fd5b505af1158015613565573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061358991906145ba565b6001600160e01b03191614979650505050505050565b6000806135ab846121e9565b6001600160a01b038716600090815260046020908152604080832085845290915290205491935091506135eb908263ffffffff808716906001906136a916565b6001600160a01b0390951660009081526004602090815260408083209483529390529190912093909355505050565b600080613626846121e9565b6001600160a01b03871660009081526004602090815260408083208584529091529020549193509150839061365b9083612238565b101561331c5760405162461bcd60e51b815260206004820152600f60248201527f42414c414e43455f544f4f5f4c4f5700000000000000000000000000000000006044820152606401610709565b600080808360028111156136cd57634e487b7160e01b600052602160045260246000fd5b14156136fa576136dd8686612238565b90506136f386866136ee87856148ec565b613c0f565b915061382e565b600183600281111561371c57634e487b7160e01b600052602160045260246000fd5b14156137b35761372c8686612238565b9050838110156137a45760405162461bcd60e51b815260206004820152602260248201527f63616e277420737562737472616374206d6f7265207468616e2074686572652060448201527f69730000000000000000000000000000000000000000000000000000000000006064820152608401610709565b6136f386866136ee8785614a81565b60028360028111156137d557634e487b7160e01b600052602160045260246000fd5b14156137e6576136f3868686613c0f565b60405162461bcd60e51b815260206004820152601160248201527f496e76616c6964206f7065726174696f6e0000000000000000000000000000006044820152606401610709565b50949350505050565b836001600160a01b031660006001600160a01b0316866001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051613887929190614817565b60405180910390a461389e85600086868686612713565b61331c5760405162461bcd60e51b815260206004820152601160248201527f5452414e534645525f52454a45435445440000000000000000000000000000006044820152606401610709565b8151606090600061ffff821667ffffffffffffffff81111561391c57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015613945578160200160208202803683370190505b5090506000805b8361ffff168161ffff161015613a385761ffff82166139ab57868161ffff168151811061398957634e487b7160e01b600052603260045260246000fd5b6020026020010151600114156139a6576139a38185614a5e565b91505b613a26565b868161ffff16815181106139cf57634e487b7160e01b600052603260045260246000fd5b6020026020010151600114613a265760405162461bcd60e51b815260206004820152601160248201527f4e4654535f4d5553545f42455f4c4153540000000000000000000000000000006044820152606401610709565b80613a3081614aff565b91505061394c565b506000613a458285614a5e565b905060005b8461ffff168161ffff161015613ad357613a9289898361ffff1681518110613a8257634e487b7160e01b600052603260045260246000fd5b6020026020010151898585612c37565b848261ffff1681518110613ab657634e487b7160e01b600052603260045260246000fd5b602090810291909101015280613acb81614aff565b915050613a4a565b5091979650505050505050565b600080613b0a838761ffff16815181106124d457634e487b7160e01b600052603260045260246000fd5b9150915060005b600881108015613b2e57508551613b2c8261ffff8a166148ec565b105b15611ed7576000613b438261ffff8a166148ec565b90506000878281518110613b6757634e487b7160e01b600052603260045260246000fd5b60200260200101511115613bfc57613bd7613b8283856148ec565b888381518110613ba257634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b038a1660009081526004835260408082208a83529093529182205492916136a9565b6001600160a01b03871660009081526004602090815260408083208884529091529020555b5080613c0781614b21565b915050613b11565b6000613c1d6020600261495e565b8210613c915760405162461bcd60e51b815260206004820152602360248201527f416d6f756e7420746f20777269746520696e2062696e20697320746f6f206c6160448201527f72676500000000000000000000000000000000000000000000000000000000006064820152608401610709565b6000613ca36001640100000000614a81565b90506000613cb28560016148ec565b613cbd906020614a3f565b613cc990610100614a81565b91821b199590951692901b919091179392505050565b828054613ceb90614ac4565b90600052602060002090601f016020900481019282613d0d5760008555613d53565b82601f10613d2657805160ff1916838001178555613d53565b82800160010185558215613d53579182015b82811115613d53578251825591602001919060010190613d38565b50613d5f929150613d63565b5090565b5b80821115613d5f5760008155600101613d64565b60008083601f840112613d89578182fd5b50813567ffffffffffffffff811115613da0578182fd5b6020830191508360208083028501011115613dba57600080fd5b9250929050565b600082601f830112613dd1578081fd5b8135602067ffffffffffffffff821115613ded57613ded614b7c565b808202613dfb82820161484f565b838152828101908684018388018501891015613e15578687fd5b8693505b858410156115d9578035835260019390930192918401918401613e19565b8035801515811461082857600080fd5b60008083601f840112613e58578182fd5b50813567ffffffffffffffff811115613e6f578182fd5b602083019150836020828501011115613dba57600080fd5b803564ffffffffff8116811461082857600080fd5b803560ff8116811461082857600080fd5b600060208284031215613ebe578081fd5b813561186181614b92565b60008060408385031215613edb578081fd5b8235613ee681614b92565b91506020830135613ef681614b92565b809150509250929050565b60008060008060008060c08789031215613f19578182fd5b8635613f2481614b92565b95506020870135613f3481614b92565b94506040870135613f4481614b92565b93506060870135613f5481614b92565b92506080870135613f6481614b92565b9150613f7260a08801613e9c565b90509295509295509295565b600080600080600060a08688031215613f95578081fd5b8535613fa081614b92565b94506020860135613fb081614b92565b93506040860135613fc081614b92565b92506060860135613fd081614b92565b9150613fde60808701613e9c565b90509295509295909350565b60008060008060008060008060a0898b031215614005578182fd5b883561401081614b92565b9750602089013561402081614b92565b9650604089013567ffffffffffffffff8082111561403c578384fd5b6140488c838d01613d78565b909850965060608b0135915080821115614060578384fd5b61406c8c838d01613d78565b909650945060808b0135915080821115614084578384fd5b506140918b828c01613e47565b999c989b5096995094979396929594505050565b6000806000606084860312156140b9578081fd5b83356140c481614b92565b925060208401356140d481614b92565b91506140e260408501613e37565b90509250925092565b60008060008060008060a08789031215614103578384fd5b863561410e81614b92565b9550602087013561411e81614b92565b94506040870135935060608701359250608087013567ffffffffffffffff811115614147578283fd5b61415389828a01613e47565b979a9699509497509295939492505050565b60008060408385031215614177578182fd5b823561418281614b92565b915061419060208401613e37565b90509250929050565b6000806000604084860312156141ad578081fd5b83356141b881614b92565b9250602084013567ffffffffffffffff8111156141d3578182fd5b6141df86828701613e47565b9497909650939450505050565b600080604083850312156141fe578182fd5b823561420981614b92565b946020939093013593505050565b60008060006060848603121561422b578081fd5b833561423681614b92565b925060208401359150604084013561424d81614b92565b809150509250925092565b60008060006060848603121561426c578081fd5b833561427781614b92565b95602085013595506040909401359392505050565b6000806000806000608086880312156142a3578283fd5b85356142ae81614b92565b94506020860135935060408601359250606086013567ffffffffffffffff8111156142d7578182fd5b6142e388828901613e47565b969995985093965092949392505050565b60008060008060008060008060008060e08b8d031215614312578384fd5b8a3561431d81614b92565b995061432b60208c01613e87565b985060408b0135975060608b013567ffffffffffffffff8082111561434e578586fd5b61435a8e838f01613d78565b909950975060808d0135915080821115614372578586fd5b61437e8e838f01613e47565b909750955060a08d0135915061439382614b92565b90935060c08c013590808211156143a8578384fd5b506143b58d828e01613e47565b915080935050809150509295989b9194979a5092959850565b600080600080600080600060c0888a0312156143e8578081fd5b87356143f381614b92565b965061440160208901613e87565b95506040880135945060608801359350608088013561441f81614b92565b925060a088013567ffffffffffffffff81111561443a578182fd5b6144468a828b01613e47565b989b979a50959850939692959293505050565b6000806000806040858703121561446e578182fd5b843567ffffffffffffffff80821115614485578384fd5b61449188838901613d78565b909650945060208701359150808211156144a9578384fd5b506144b687828801613d78565b95989497509550505050565b6000806000606084860312156144d6578081fd5b833567ffffffffffffffff808211156144ed578283fd5b6144f987838801613dc1565b9450602086013591508082111561450e578283fd5b61451a87838801613dc1565b9350604086013591508082111561452f578283fd5b508401601f81018613614540578182fd5b803561455361454e82614880565b61484f565b818152876020838501011115614567578384fd5b8160208401602083013783602083830101528093505050509250925092565b600060208284031215614597578081fd5b5035919050565b6000602082840312156145af578081fd5b813561186181614baa565b6000602082840312156145cb578081fd5b815161186181614baa565b6000602082840312156145e7578081fd5b815167ffffffffffffffff8111156145fd578182fd5b8201601f8101841361460d578182fd5b805161461b61454e82614880565b81815285602083850101111561462f578384fd5b610751826020830160208601614a98565b60008060408385031215614652578182fd5b50508035926020909101359150565b60008284527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115614692578081fd5b6020830280836020870137939093016020019283525090919050565b6000815180845260208085019450808401835b838110156146dd578151875295820195908201906001016146c1565b509495945050505050565b60008151808452614700816020860160208601614a98565b601f01601f19169290920160200192915050565b60006001600160a01b03808816835280871660208401525060a0604083015261474060a08301866146ae565b828103606084015261475281866146ae565b9050828103608084015261476681856146e8565b98975050505050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a060808301526147aa60a08301846146e8565b979650505050505050565b60006001600160a01b03851682528360208301526060604083015261075160608301846146e8565b6000604082526147f1604083018688614661565b82810360208401526147aa818587614661565b60006020825261186160208301846146ae565b60006040825261482a60408301856146ae565b828103602084015261075181856146ae565b60006020825261186160208301846146e8565b604051601f8201601f1916810167ffffffffffffffff8111828210171561487857614878614b7c565b604052919050565b600067ffffffffffffffff82111561489a5761489a614b7c565b50601f01601f191660200190565b600061ffff8083168185168083038211156148c5576148c5614b50565b01949350505050565b600062ffffff8083168185168083038211156148c5576148c5614b50565b600082198211156148ff576148ff614b50565b500190565b60008261491357614913614b66565b500490565b80825b600180861161492a5750614955565b81870482111561493c5761493c614b50565b8086161561494957918102915b9490941c93800261491b565b94509492505050565b6000611861600019848461497b565b600061186160001960ff8516845b60008261498a57506001611861565b8161499757506000611861565b81600181146149ad57600281146149b7576149e4565b6001915050611861565b60ff8411156149c8576149c8614b50565b6001841b9150848211156149de576149de614b50565b50611861565b5060208310610133831016604e8410600b8410161715614a17575081810a83811115614a1257614a12614b50565b611861565b614a248484846001614918565b808604821115614a3657614a36614b50565b02949350505050565b6000816000190483118215151615614a5957614a59614b50565b500290565b600061ffff83811690831681811015614a7957614a79614b50565b039392505050565b600082821015614a9357614a93614b50565b500390565b60005b83811015614ab3578181015183820152602001614a9b565b838111156111285750506000910152565b600281046001821680614ad857607f821691505b60208210811415614af957634e487b7160e01b600052602260045260246000fd5b50919050565b600061ffff80831681811415614b1757614b17614b50565b6001019392505050565b6000600019821415614b3557614b35614b50565b5060010190565b600082614b4b57614b4b614b66565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114614ba757600080fd5b50565b6001600160e01b031981168114614ba757600080fdfea26469706673582212207b0fd173f0a6843e22692656e44d63d7e0bc102518403b23fa3a3bddc05b034f64736f6c63430008020033",
  "libraries": {
    "AssetHelper": "0x235182FCE3436924e4274Fd9CBf87cdcB0b42D52",
    "ERC1155ERC721Helper": "0x201A2383f7DF6Fb4B8382a5727724135f337db77"
  },
  "devdoc": {
    "details": "AssetERC1155 will be minted only on L2 and can be transferred to L1 and not minted on L1.This contract supports meta transactions.This contract is final, don't inherit from it.",
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "params": {
          "id": "the token type of which to get the balance of.",
          "owner": "The address of the token holder."
        },
        "returns": {
          "_0": "the balance of `owner` for the token type `id`."
        }
      },
      "balanceOfBatch(address[],uint256[])": {
        "params": {
          "ids": "ids of each token type to query.",
          "owners": "the addresses of the token holders queried."
        },
        "returns": {
          "_0": "the balance of each `owners` for each token type `ids`."
        }
      },
      "burn(uint256,uint256)": {
        "params": {
          "amount": "amount of token to burn.",
          "id": "token type which will be burnt."
        }
      },
      "burnFrom(address,uint256,uint256)": {
        "params": {
          "amount": "amount of token to burn.",
          "from": "address whose token is to be burnt.",
          "id": "token type which will be burnt."
        }
      },
      "changeAdmin(address)": {
        "details": "Change the administrator to be `newAdmin`.",
        "params": {
          "newAdmin": "The address of the new administrator."
        }
      },
      "changeBouncerAdmin(address)": {
        "params": {
          "newBouncerAdmin": "address of the new minting administrator."
        }
      },
      "collectionIndexOf(uint256)": {
        "params": {
          "id": "the token to get the index of."
        },
        "returns": {
          "_0": "the index/order at which the token `id` was minted in a collection."
        }
      },
      "collectionOf(uint256)": {
        "params": {
          "id": "the token to get the collection of."
        },
        "returns": {
          "_0": "the collection the NFT is part of."
        }
      },
      "deposit(address,bytes)": {
        "details": "Should be callable only by ChildChainManager.Should handle deposit by minting the required tokenId(s) for user.Minting can also be done by other functions.",
        "params": {
          "depositData": "abi encoded tokenIds. Batch deposit also supported.",
          "user": "user address for whom deposit is being done."
        }
      },
      "doesHashExist(uint256)": {
        "details": "if IS_NFT > 0 then PACK_NUM_FT_TYPES may be 0",
        "params": {
          "id": "the token to check."
        },
        "returns": {
          "_0": "bool whether a given id has a valid structure."
        }
      },
      "extractERC721From(address,uint256,address)": {
        "details": "Extraction is limited to bouncers.",
        "params": {
          "id": "the token type to extract from.",
          "sender": "address which own the token to be extracted.",
          "to": "address which will receive the token."
        },
        "returns": {
          "_0": "newId the id of the newly minted NFT."
        }
      },
      "getAdmin()": {
        "details": "Get the current administrator of this contract.",
        "returns": {
          "_0": "The current administrator of this contract."
        }
      },
      "getBouncerAdmin()": {
        "returns": {
          "_0": "the current minting administrator in charge of minting rights."
        }
      },
      "getChainIndex(uint256)": {
        "details": "take care not to confuse chainIndex with chain ID.",
        "params": {
          "id": "the token id to query."
        },
        "returns": {
          "_0": "chainIndex the chainIndex that the token was minted on originally."
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "operator": "address of authorized operator.",
          "owner": "the owner of the tokens."
        },
        "returns": {
          "isOperator": "true if the operator is approved, false if not."
        }
      },
      "isBouncer(address)": {
        "params": {
          "who": "The address to query."
        },
        "returns": {
          "_0": "whether the address has minting rights."
        }
      },
      "isCollection(uint256)": {
        "params": {
          "id": "collectionId to check."
        },
        "returns": {
          "_0": "whether the id is a collection."
        }
      },
      "isSuperOperator(address)": {
        "params": {
          "who": "The address to query."
        },
        "returns": {
          "_0": "whether the address has superOperator rights."
        }
      },
      "mint(address,uint256,uint256,bytes)": {
        "details": "Should be used only by PolygonAssetERC1155Tunnel.This function can be called when the token ID exists on another layer.Encoded bytes32 metadata hash must be provided as data.",
        "params": {
          "data": "token metadata.",
          "id": "the id of the newly minted token.",
          "owner": "address that will receive the tokens.",
          "supply": "number of tokens minted for that token type."
        }
      },
      "mint(address,uint40,bytes32,uint256,address,bytes)": {
        "details": "For this function it is not required to provide data.",
        "params": {
          "creator": "address of the creator of the token.",
          "data": "extra data to accompany the minting call.",
          "hash": "hash of an IPFS cidv1 folder that contains the metadata of the token type in the file 0.json.",
          "owner": "address that will receive the tokens.",
          "packId": "unique packId for that token.",
          "supply": "number of tokens minted for that token type."
        },
        "returns": {
          "id": "the id of the newly minted token type."
        }
      },
      "mintDeficit(address,uint256,uint256)": {
        "details": "This mint calls for add instead of replace in packedTokenBalance",
        "params": {
          "account": "address of the ownerof tokens.",
          "amount": "quantity of the token to be minted.",
          "id": "id of the token to be minted."
        }
      },
      "mintMultiple(address,uint40,bytes32,uint256[],bytes,address,bytes)": {
        "details": "For this function it is not required to provide data.",
        "params": {
          "creator": "address of the creator of the tokens.",
          "data": "extra data to accompany the minting call.",
          "hash": "hash of an IPFS cidv1 folder that contains the metadata of each token type in the files: 0.json, 1.json, 2.json, etc...",
          "owner": "address that will receive the tokens.",
          "packId": "unique packId for the tokens.",
          "rarityPack": "rarity power of each token types packed into 2 bits each.",
          "supplies": "number of tokens minted for each token type."
        },
        "returns": {
          "ids": "the ids of each newly minted token types."
        }
      },
      "name()": {
        "returns": {
          "_name": "the name of the tokens."
        }
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "call data should be optimized to order ids so packedBalance can be used efficiently.",
        "params": {
          "data": "aditional data accompanying the transfer.",
          "from": "address from which tokens are transfered.",
          "ids": "ids of each token type transfered.",
          "to": "address to which the token will be transfered.",
          "values": "amount of each token type transfered."
        }
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "params": {
          "data": "aditional data accompanying the transfer.",
          "from": "address from which tokens are transfered.",
          "id": "the token type transfered.",
          "to": "address to which the token will be transfered.",
          "value": "amount of token transfered."
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "approved": "whether to approve or revoke",
          "operator": "address which will be granted rights to transfer all tokens of the caller."
        }
      },
      "setApprovalForAllFor(address,address,bool)": {
        "details": "used for Meta Transaction (from metaTransactionContract).",
        "params": {
          "approved": "whether to approve or revoke.",
          "operator": "address which will be granted rights to transfer all token owned by `sender`.",
          "sender": "address which grant approval."
        }
      },
      "setAssetERC721(address)": {
        "params": {
          "assetERC721": "the contract address to set the ERC721 contract to."
        },
        "returns": {
          "_0": "true if the operation completes successfully."
        }
      },
      "setBouncer(address,bool)": {
        "params": {
          "bouncer": "address that will be given/removed minting bouncer rights.",
          "enabled": "set whether the address is enabled or disabled as a minting bouncer."
        }
      },
      "setSuperOperator(address,bool)": {
        "params": {
          "enabled": "set whether the superOperator is enabled or disabled.",
          "superOperator": "address that will be given/removed superOperator right."
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "id": "the interface identifier, as specified in ERC-165."
        },
        "returns": {
          "_0": "`true` if the contract implements `id`."
        }
      },
      "symbol()": {
        "returns": {
          "_symbol": "the symbol of the tokens."
        }
      },
      "uri(uint256)": {
        "params": {
          "id": "ERC1155 token to get the uri of."
        },
        "returns": {
          "_0": "URI string"
        }
      },
      "withdrawBatch(uint256[],uint256[])": {
        "details": "Should burn user's tokens. This transaction will be verified when exiting on root chain.",
        "params": {
          "amounts": "amounts to withdraw.",
          "ids": "ids to withdraw."
        }
      },
      "withdrawSingle(uint256,uint256)": {
        "details": "Should burn user's tokens. This transaction will be verified when exiting on root chain.",
        "params": {
          "amount": "amount to withdraw.",
          "id": "id to withdraw."
        }
      }
    },
    "title": "This contract is for AssetERC1155 which can be minted by a minter role.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "balanceOf(address,uint256)": {
        "notice": "Get the balance of `owner` for the token type `id`."
      },
      "balanceOfBatch(address[],uint256[])": {
        "notice": "Get the balance of `owners` for each token type `ids`."
      },
      "burn(uint256,uint256)": {
        "notice": "Burns `amount` tokens of type `id`."
      },
      "burnFrom(address,uint256,uint256)": {
        "notice": "Burns `amount` tokens of type `id` from `from`."
      },
      "changeBouncerAdmin(address)": {
        "notice": "Change the minting administrator to be `newBouncerAdmin`."
      },
      "collectionIndexOf(uint256)": {
        "notice": "Gives the index at which an NFT was minted in a collection : first of a collection get the zero index."
      },
      "collectionOf(uint256)": {
        "notice": "Gives the collection a specific token belongs to."
      },
      "deposit(address,bytes)": {
        "notice": "This function is called when a token is deposited to the root chain."
      },
      "doesHashExist(uint256)": {
        "notice": "Whether or not an ERC1155 or ERC721 tokenId has a valid structure and the metadata hash exists."
      },
      "extractERC721From(address,uint256,address)": {
        "notice": "Extracts an EIP-721 Asset from an EIP-1155 Asset."
      },
      "getBouncerAdmin()": {
        "notice": "Returns the current administrator in charge of minting rights."
      },
      "getChainIndex(uint256)": {
        "notice": "Queries the chainIndex that a token was minted on originally."
      },
      "isApprovedForAll(address,address)": {
        "notice": "Queries the approval status of `operator` for owner `owner`."
      },
      "isBouncer(address)": {
        "notice": "check whether address `who` is given minting bouncer rights."
      },
      "isCollection(uint256)": {
        "notice": "Return wether the id is a collection"
      },
      "isSuperOperator(address)": {
        "notice": "check whether address `who` is given superOperator rights."
      },
      "mint(address,uint256,uint256,bytes)": {
        "notice": "Creates `amount` tokens of token type `id`, and assigns them to `account`."
      },
      "mint(address,uint40,bytes32,uint256,address,bytes)": {
        "notice": "Mint a token type for `creator` on slot `packId`."
      },
      "mintDeficit(address,uint256,uint256)": {
        "notice": "function to be called by tunnel to mint deficit of minted tokens"
      },
      "mintMultiple(address,uint40,bytes32,uint256[],bytes,address,bytes)": {
        "notice": "Mint multiple token types for `creator` on slot `packId`."
      },
      "name()": {
        "notice": "A descriptive name for the collection of tokens in this contract."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "notice": "Transfers `values` tokens of type `ids` from  `from` to `to` (with safety call)."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "notice": "Transfers `value` tokens of type `id` from  `from` to `to`  (with safety call)."
      },
      "setApprovalForAll(address,bool)": {
        "notice": "Enable or disable approval for `operator` to manage all of the caller's tokens."
      },
      "setApprovalForAllFor(address,address,bool)": {
        "notice": "Enable or disable approval for `operator` to manage all `sender`'s tokens."
      },
      "setAssetERC721(address)": {
        "notice": "Set the ERC721 contract."
      },
      "setBouncer(address,bool)": {
        "notice": "Enable or disable the ability of `bouncer` to mint tokens (minting bouncer rights)."
      },
      "setSuperOperator(address,bool)": {
        "notice": "Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights)."
      },
      "supportsInterface(bytes4)": {
        "notice": "Query if a contract implements interface `id`."
      },
      "symbol()": {
        "notice": "An abbreviated name for the collection of tokens in this contract."
      },
      "uri(uint256)": {
        "notice": "A distinct Uniform Resource Identifier (URI) for a given ERC1155 asset."
      },
      "withdrawBatch(uint256[],uint256[])": {
        "notice": "called when user wants to batch withdraw tokens back to root chain."
      },
      "withdrawSingle(uint256,uint256)": {
        "notice": "called when user wants to withdraw single token back to root chain."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 32964,
        "contract": "src/solc_0.8/polygon/child/asset/PolygonAssetERC1155.sol:PolygonAssetERC1155",
        "label": "_admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 33420,
        "contract": "src/solc_0.8/polygon/child/asset/PolygonAssetERC1155.sol:PolygonAssetERC1155",
        "label": "_superOperators",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 20366,
        "contract": "src/solc_0.8/polygon/child/asset/PolygonAssetERC1155.sol:PolygonAssetERC1155",
        "label": "_numNFTPerAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 20370,
        "contract": "src/solc_0.8/polygon/child/asset/PolygonAssetERC1155.sol:PolygonAssetERC1155",
        "label": "_owners",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 20376,
        "contract": "src/solc_0.8/polygon/child/asset/PolygonAssetERC1155.sol:PolygonAssetERC1155",
        "label": "_packedTokenBalance",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 20382,
        "contract": "src/solc_0.8/polygon/child/asset/PolygonAssetERC1155.sol:PolygonAssetERC1155",
        "label": "_operatorsForAll",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 20386,
        "contract": "src/solc_0.8/polygon/child/asset/PolygonAssetERC1155.sol:PolygonAssetERC1155",
        "label": "_erc721operators",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 20390,
        "contract": "src/solc_0.8/polygon/child/asset/PolygonAssetERC1155.sol:PolygonAssetERC1155",
        "label": "_metadataHash",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 20394,
        "contract": "src/solc_0.8/polygon/child/asset/PolygonAssetERC1155.sol:PolygonAssetERC1155",
        "label": "_rarityPacks",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_bytes_storage)"
      },
      {
        "astId": 20398,
        "contract": "src/solc_0.8/polygon/child/asset/PolygonAssetERC1155.sol:PolygonAssetERC1155",
        "label": "_nextCollectionIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint32)"
      },
      {
        "astId": 20402,
        "contract": "src/solc_0.8/polygon/child/asset/PolygonAssetERC1155.sol:PolygonAssetERC1155",
        "label": "_creatorship",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 20406,
        "contract": "src/solc_0.8/polygon/child/asset/PolygonAssetERC1155.sol:PolygonAssetERC1155",
        "label": "_bouncers",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 20410,
        "contract": "src/solc_0.8/polygon/child/asset/PolygonAssetERC1155.sol:PolygonAssetERC1155",
        "label": "_metaTransactionContracts",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 20412,
        "contract": "src/solc_0.8/polygon/child/asset/PolygonAssetERC1155.sol:PolygonAssetERC1155",
        "label": "_bouncerAdmin",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 20414,
        "contract": "src/solc_0.8/polygon/child/asset/PolygonAssetERC1155.sol:PolygonAssetERC1155",
        "label": "_init",
        "offset": 20,
        "slot": "13",
        "type": "t_bool"
      },
      {
        "astId": 20419,
        "contract": "src/solc_0.8/polygon/child/asset/PolygonAssetERC1155.sol:PolygonAssetERC1155",
        "label": "_initBits",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 20421,
        "contract": "src/solc_0.8/polygon/child/asset/PolygonAssetERC1155.sol:PolygonAssetERC1155",
        "label": "_predicate",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 20423,
        "contract": "src/solc_0.8/polygon/child/asset/PolygonAssetERC1155.sol:PolygonAssetERC1155",
        "label": "_chainIndex",
        "offset": 20,
        "slot": "15",
        "type": "t_uint8"
      },
      {
        "astId": 20425,
        "contract": "src/solc_0.8/polygon/child/asset/PolygonAssetERC1155.sol:PolygonAssetERC1155",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 20428,
        "contract": "src/solc_0.8/polygon/child/asset/PolygonAssetERC1155.sol:PolygonAssetERC1155",
        "label": "_assetERC721",
        "offset": 0,
        "slot": "17",
        "type": "t_contract(IAssetERC721)34788"
      },
      {
        "astId": 20432,
        "contract": "src/solc_0.8/polygon/child/asset/PolygonAssetERC1155.sol:PolygonAssetERC1155",
        "label": "__gap",
        "offset": 0,
        "slot": "18",
        "type": "t_array(t_uint256)20_storage"
      },
      {
        "astId": 40622,
        "contract": "src/solc_0.8/polygon/child/asset/PolygonAssetERC1155.sol:PolygonAssetERC1155",
        "label": "_childChainManager",
        "offset": 0,
        "slot": "38",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)20_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[20]",
        "numberOfBytes": "640"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IAssetERC721)34788": {
        "encoding": "inplace",
        "label": "contract IAssetERC721",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}