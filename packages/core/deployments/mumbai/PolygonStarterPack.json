{
  "address": "0xe19A7A92b2788b930e269Ca0cA5EB4DC2491945E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "defaultAdmin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "starterPackAdmin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sandContractAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "initialWalletAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "initialSigningWallet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "registry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "buyer",
              "type": "address"
            },
            {
              "internalType": "uint16[]",
              "name": "catalystIds",
              "type": "uint16[]"
            },
            {
              "internalType": "uint256[]",
              "name": "catalystQuantities",
              "type": "uint256[]"
            },
            {
              "internalType": "uint16[]",
              "name": "gemIds",
              "type": "uint16[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gemQuantities",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct StarterPackV2.Message",
          "name": "message",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountPaid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "Purchase",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newReceivingWallet",
          "type": "address"
        }
      ],
      "name": "ReceivingWallet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "SandEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16[]",
          "name": "catalystIds",
          "type": "uint16[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "catalystPrices",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint16[]",
          "name": "gemIds",
          "type": "uint16[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "gemPrices",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "priceChangeTimestamp",
          "type": "uint256"
        }
      ],
      "name": "SetPrices",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newSigningWallet",
          "type": "address"
        }
      ],
      "name": "SigningWallet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16[]",
          "name": "catalystIds",
          "type": "uint16[]"
        },
        {
          "indexed": false,
          "internalType": "uint16[]",
          "name": "gemIds",
          "type": "uint16[]"
        }
      ],
      "name": "WithdrawAll",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PURCHASE_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STARTERPACK_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_sandEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "catalystIds",
          "type": "uint16[]"
        },
        {
          "internalType": "uint256[]",
          "name": "catalystQuantities",
          "type": "uint256[]"
        },
        {
          "internalType": "uint16[]",
          "name": "gemIds",
          "type": "uint16[]"
        },
        {
          "internalType": "uint256[]",
          "name": "gemQuantities",
          "type": "uint256[]"
        }
      ],
      "name": "calculateTotalPriceInSAND",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "domainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_buyer",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "_queueId",
          "type": "uint128"
        }
      ],
      "name": "getNonceByBuyer",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "catalystIds",
          "type": "uint16[]"
        },
        {
          "internalType": "uint16[]",
          "name": "gemIds",
          "type": "uint16[]"
        }
      ],
      "name": "getPrices",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReceivingWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSigningWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isSANDEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "buyer",
              "type": "address"
            },
            {
              "internalType": "uint16[]",
              "name": "catalystIds",
              "type": "uint16[]"
            },
            {
              "internalType": "uint256[]",
              "name": "catalystQuantities",
              "type": "uint256[]"
            },
            {
              "internalType": "uint16[]",
              "name": "gemIds",
              "type": "uint16[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gemQuantities",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            }
          ],
          "internalType": "struct StarterPackV2.Message",
          "name": "message",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "purchaseWithSAND",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "name": "queuedNonces",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "catalystIds",
          "type": "uint16[]"
        },
        {
          "internalType": "uint256[]",
          "name": "catalystPrices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint16[]",
          "name": "gemIds",
          "type": "uint16[]"
        },
        {
          "internalType": "uint256[]",
          "name": "gemPrices",
          "type": "uint256[]"
        }
      ],
      "name": "setPrices",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "newReceivingWallet",
          "type": "address"
        }
      ],
      "name": "setReceivingWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setSANDEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newSigningWallet",
          "type": "address"
        }
      ],
      "name": "setSigningWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint16[]",
          "name": "catalystIds",
          "type": "uint16[]"
        },
        {
          "internalType": "uint16[]",
          "name": "gemIds",
          "type": "uint16[]"
        }
      ],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7181dae76df29ae68df40552eb7343b75123bf69d85c8dd3103d4308e22ba853",
  "receipt": {
    "to": null,
    "from": "0x5F890c9522dCE5670d741D4277BFCC2d9cA8Af02",
    "contractAddress": "0xe19A7A92b2788b930e269Ca0cA5EB4DC2491945E",
    "transactionIndex": 9,
    "gasUsed": "3490876",
    "logsBloom": "0x
    "blockHash": "0x102d0d7ec3888b042a83cb19e4e76df828c52bba3b94fd88237bac46e7508b61",
    "transactionHash": "0x7181dae76df29ae68df40552eb7343b75123bf69d85c8dd3103d4308e22ba853",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 28491309,
        "transactionHash": "0x7181dae76df29ae68df40552eb7343b75123bf69d85c8dd3103d4308e22ba853",
        "address": "0xe19A7A92b2788b930e269Ca0cA5EB4DC2491945E",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000049c4d4c94829b9c44052c5f5cb164fc612181165",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02"
        ],
        "data": "0x",
        "logIndex": 36,
        "blockHash": "0x102d0d7ec3888b042a83cb19e4e76df828c52bba3b94fd88237bac46e7508b61"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 28491309,
        "transactionHash": "0x7181dae76df29ae68df40552eb7343b75123bf69d85c8dd3103d4308e22ba853",
        "address": "0xe19A7A92b2788b930e269Ca0cA5EB4DC2491945E",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xf0b465b2fd9a8eb309079c069118a26163974b82d09d2b1dafd9aef7692568e6",
          "0x00000000000000000000000049c4d4c94829b9c44052c5f5cb164fc612181165",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02"
        ],
        "data": "0x",
        "logIndex": 37,
        "blockHash": "0x102d0d7ec3888b042a83cb19e4e76df828c52bba3b94fd88237bac46e7508b61"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 28491309,
        "transactionHash": "0x7181dae76df29ae68df40552eb7343b75123bf69d85c8dd3103d4308e22ba853",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000129a665bb1bfc400000000000000000000000000000000000000000000001d1f34dcab4bac746c00000000000000000000000000000000000000000000161ae48852996bc0690e00000000000000000000000000000000000000000000001d1f224244effab4a800000000000000000000000000000000000000000000161ae49aecffc77228d2",
        "logIndex": 38,
        "blockHash": "0x102d0d7ec3888b042a83cb19e4e76df828c52bba3b94fd88237bac46e7508b61"
      }
    ],
    "blockNumber": 28491309,
    "cumulativeGasUsed": "5891579",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x49c4D4C94829B9c44052C5f5Cb164Fc612181165",
    "0x49c4D4C94829B9c44052C5f5Cb164Fc612181165",
    "0x592daadC9eA7F56A81De1FD27A723Bd407709c46",
    "0x69015912aa33720b842dcd6ac059ed623f28d9f7",
    "0xa5Eb9C9Eb4F4c35B9Be8cFaAA7909F9ebe6Cb609",
    "0x17c5185167401eD00cF5F5b2fc97D9BBfDb7D025",
    "0xdDD37BE9b8B5C5DaF7E4f4cB0BBf354Bc956042f"
  ],
  "numDeployments": 1,
  "solcInputHash": "145df613a093fbba5360a1afb142b8e3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"defaultAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"starterPackAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sandContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"initialWalletAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialSigningWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint16[]\",\"name\":\"catalystIds\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256[]\",\"name\":\"catalystQuantities\",\"type\":\"uint256[]\"},{\"internalType\":\"uint16[]\",\"name\":\"gemIds\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gemQuantities\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct StarterPackV2.Message\",\"name\":\"message\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPaid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newReceivingWallet\",\"type\":\"address\"}],\"name\":\"ReceivingWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SandEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16[]\",\"name\":\"catalystIds\",\"type\":\"uint16[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"catalystPrices\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint16[]\",\"name\":\"gemIds\",\"type\":\"uint16[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"gemPrices\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceChangeTimestamp\",\"type\":\"uint256\"}],\"name\":\"SetPrices\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSigningWallet\",\"type\":\"address\"}],\"name\":\"SigningWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16[]\",\"name\":\"catalystIds\",\"type\":\"uint16[]\"},{\"indexed\":false,\"internalType\":\"uint16[]\",\"name\":\"gemIds\",\"type\":\"uint16[]\"}],\"name\":\"WithdrawAll\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PURCHASE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STARTERPACK_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sandEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"catalystIds\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256[]\",\"name\":\"catalystQuantities\",\"type\":\"uint256[]\"},{\"internalType\":\"uint16[]\",\"name\":\"gemIds\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gemQuantities\",\"type\":\"uint256[]\"}],\"name\":\"calculateTotalPriceInSAND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_queueId\",\"type\":\"uint128\"}],\"name\":\"getNonceByBuyer\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"catalystIds\",\"type\":\"uint16[]\"},{\"internalType\":\"uint16[]\",\"name\":\"gemIds\",\"type\":\"uint16[]\"}],\"name\":\"getPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReceivingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSigningWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSANDEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint16[]\",\"name\":\"catalystIds\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256[]\",\"name\":\"catalystQuantities\",\"type\":\"uint256[]\"},{\"internalType\":\"uint16[]\",\"name\":\"gemIds\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gemQuantities\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct StarterPackV2.Message\",\"name\":\"message\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"purchaseWithSAND\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"name\":\"queuedNonces\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"catalystIds\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256[]\",\"name\":\"catalystPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint16[]\",\"name\":\"gemIds\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gemPrices\",\"type\":\"uint256[]\"}],\"name\":\"setPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newReceivingWallet\",\"type\":\"address\"}],\"name\":\"setReceivingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setSANDEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSigningWallet\",\"type\":\"address\"}],\"name\":\"setSigningWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint16[]\",\"name\":\"catalystIds\",\"type\":\"uint16[]\"},{\"internalType\":\"uint16[]\",\"name\":\"gemIds\",\"type\":\"uint16[]\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"DEFAULT_ADMIN_ROLE is intended for contract setup / emergency, STARTERPACK_ROLE is provided for business purposes\",\"kind\":\"dev\",\"methods\":{\"calculateTotalPriceInSAND(uint16[],uint256[],uint16[],uint256[])\":{\"params\":{\"catalystIds\":\"An array of catalyst IDs to be purchased\",\"catalystQuantities\":\"An array of catalyst amounts to be purchased\",\"gemIds\":\"An array of gem IDs to be purchased\",\"gemQuantities\":\"An array of gem amounts to be purchased\"},\"returns\":{\"_0\":\"the total price to pay in SAND for the cats and gems in the bundle\"}},\"getNonceByBuyer(address,uint128)\":{\"params\":{\"_buyer\":\"The address of the starterPack purchaser\",\"_queueId\":\"The ID of the nonce queue for the given address. The default is queueID=0, and the max is queueID=2**128-1\"},\"returns\":{\"_0\":\"uint128 representing the requested nonce\"}},\"getPrices(uint16[],uint16[])\":{\"params\":{\"catalystIds\":\"The IDs of the catalysts you want to obtain price information for\",\"gemIds\":\"The IDs of the gems you want to obtain price information for\"},\"returns\":{\"_0\":\"catalystPricesBeforeSwitch Catalyst prices before price change\",\"_1\":\"catalystPricesAfterSwitch Catalyst prices after price change\",\"_2\":\"gemPricesBeforeSwitch Gem prices before price change\",\"_3\":\"gemPricesAfterSwitch Gem prices after price change\",\"_4\":\"switchTime The time the latest price change will take effect, being the time of the price change plus the price change delay\"}},\"getReceivingWallet()\":{\"returns\":{\"_0\":\"the address of the receiving wallet\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getSigningWallet()\":{\"returns\":{\"_0\":\"_signingWallet the address of the signing wallet\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isSANDEnabled()\":{\"returns\":{\"_0\":\"Whether SAND payments are enabled\"}},\"purchaseWithSAND((address,uint16[],uint256[],uint16[],uint256[],uint256),bytes)\":{\"params\":{\"message\":\"A message containing information about the Catalysts and Gems to be purchased together with the destination (buyer) and a nonce\",\"signature\":\"A signed message specifying tx details\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setPrices(uint16[],uint256[],uint16[],uint256[])\":{\"params\":{\"catalystIds\":\"Array of catalyst IDs for which new prices will take effect after a delay period\",\"catalystPrices\":\"Array of new catalyst prices that will take effect after a delay period\",\"gemIds\":\"Array of gem IDs for which new prices will take effect after a delay period\",\"gemPrices\":\"Array of new gems prices that will take effect after a delay period\"}},\"setReceivingWallet(address)\":{\"params\":{\"newReceivingWallet\":\"Address of the new receiving wallet\"}},\"setSANDEnabled(bool)\":{\"details\":\"Enable / disable the specific SAND payment for StarterPacks\",\"params\":{\"enabled\":\"Whether to enable or disable\"}},\"setSigningWallet(address)\":{\"params\":{\"newSigningWallet\":\"The new address of the signing wallet\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"withdrawAll(address,uint16[],uint16[])\":{\"details\":\"The sum length of catalystIds + gemIds must be <= MAX_WITHDRAWAL\",\"params\":{\"catalystIds\":\"The IDs of the catalysts to be transferred\",\"gemIds\":\"The IDs of the gems to be transferred\",\"to\":\"The destination address for the purchased Catalysts and Gems\"}}},\"title\":\"StarterPack contract for the purchase of StarterPacks (bundles of Catalysts and Gems) with EIP712\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calculateTotalPriceInSAND(uint16[],uint256[],uint16[],uint256[])\":{\"notice\":\"Verify the total expected price to pay in SAND\"},\"domainSeparator()\":{\"notice\":\"Function to get the domain separator\"},\"getChainId()\":{\"notice\":\"Function to get the chainId\"},\"getNonceByBuyer(address,uint128)\":{\"notice\":\"Function to get the nonce for a given address and queue ID\"},\"getPrices(uint16[],uint16[])\":{\"notice\":\"Get current StarterPack prices for catalysts and gems by id\"},\"getReceivingWallet()\":{\"notice\":\"Get the beneficiary wallet.\"},\"getSigningWallet()\":{\"notice\":\"Get the wallet authorized for signing purchase-messages.\"},\"isSANDEnabled()\":{\"notice\":\"Return whether SAND payments are enabled\"},\"purchaseWithSAND((address,uint16[],uint256[],uint16[],uint256[],uint256),bytes)\":{\"notice\":\"Purchase StarterPacks with SAND\"},\"setPrices(uint16[],uint256[],uint16[],uint256[])\":{\"notice\":\"Enables admin to change the prices (in SAND) of the catalysts and gems in the StarterPack bundle\"},\"setReceivingWallet(address)\":{\"notice\":\"Set the wallet receiving the proceeds\"},\"setSigningWallet(address)\":{\"notice\":\"Update the signing wallet address\"},\"withdrawAll(address,uint16[],uint16[])\":{\"notice\":\"Enables admin to withdraw any remaining tokens\"}},\"notice\":\"This contract enables purchases with SAND when the backend authorizes it via message signingThe following privileged roles are used in StarterPackV2: DEFAULT_ADMIN_ROLE, STARTERPACK_ROLE\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/solc_0.8/StarterPack/StarterPackV2.sol\":\"StarterPackV2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-0.8/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb9a137b317dc4806805f2259686186c0c053c32d80fe9c15ecdbf2eb1cf52849\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xe9e291de7ffe06e66503c6700b1bb84ff6e0989cbb974653628d8994e7c97f03\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x64bb2dbe7ec4fcadb2f163f41edf6f2e1cd8f16162f7a56c2581894e6ba0747c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcd98895383d51dc86669a76ae3ad4419fc5dc079d01faea23498e80c1cf9f78a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"src/solc_0.8/StarterPack/PurchaseValidator.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport {AccessControl, Context} from \\\"@openzeppelin/contracts-0.8/access/AccessControl.sol\\\";\\nimport {EIP712, ECDSA} from \\\"@openzeppelin/contracts-0.8/utils/cryptography/draft-EIP712.sol\\\";\\n\\n/// @title Purchase Validator contract that validates the purchase of catalysts and gems bundles with EIP712\\n/// @notice This contract manages the validation of purchases\\n/// @notice The following privileged roles are used in PurchaseValidator: DEFAULT_ADMIN_ROLE\\n/// @dev It is intended that this contract is inherited by StarterPack\\ncontract PurchaseValidator is AccessControl, EIP712 {\\n    address private _signingWallet;\\n\\n    // A parallel-queue mapping to nonces: user => (queueID => nonce)\\n    mapping(address => mapping(uint128 => uint128)) public queuedNonces;\\n\\n    bytes32 public constant PURCHASE_TYPEHASH =\\n        keccak256(\\n            \\\"Purchase(address buyer,uint16[] catalystIds,uint256[] catalystQuantities,uint16[] gemIds,uint256[] gemQuantities,uint256 nonce)\\\"\\n        );\\n\\n    event SigningWallet(address indexed newSigningWallet);\\n\\n    constructor(\\n        address initialSigningWallet,\\n        string memory name,\\n        string memory version\\n    ) EIP712(name, version) {\\n        require(initialSigningWallet != address(0), \\\"WALLET_ZERO_ADDRESS\\\");\\n        _signingWallet = initialSigningWallet;\\n    }\\n\\n    /// @notice Update the signing wallet address\\n    /// @param newSigningWallet The new address of the signing wallet\\n    function setSigningWallet(address newSigningWallet) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(newSigningWallet != address(0), \\\"WALLET_ZERO_ADDRESS\\\");\\n        require(newSigningWallet != _signingWallet, \\\"WALLET_ALREADY_SET\\\");\\n        _signingWallet = newSigningWallet;\\n        emit SigningWallet(newSigningWallet);\\n    }\\n\\n    /// @notice Function to get the nonce for a given address and queue ID\\n    /// @param _buyer The address of the starterPack purchaser\\n    /// @param _queueId The ID of the nonce queue for the given address.\\n    /// The default is queueID=0, and the max is queueID=2**128-1\\n    /// @return uint128 representing the requested nonce\\n    function getNonceByBuyer(address _buyer, uint128 _queueId) external view returns (uint128) {\\n        return queuedNonces[_buyer][_queueId];\\n    }\\n\\n    /// @notice Function to get the domain separator\\n    function domainSeparator() external view returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /// @notice Function to get the chainId\\n    function getChainId() external view returns (uint256) {\\n        return block.chainid;\\n    }\\n\\n    /// @notice Get the wallet authorized for signing purchase-messages.\\n    /// @return _signingWallet the address of the signing wallet\\n    function getSigningWallet() external view returns (address) {\\n        return _signingWallet;\\n    }\\n\\n    /// @notice Check if a purchase message is valid by verifying a EIP712 signature for the purchase message\\n    /// @dev It is intended that this contract is inherited so this internal function can be used\\n    /// @param buyer The address paying for the purchase & receiving tokens\\n    /// @param catalystIds The catalyst IDs to be purchased\\n    /// @param catalystQuantities The quantities of the catalysts to be purchased\\n    /// @param gemIds The gem IDs to be purchased\\n    /// @param gemQuantities The quantities of the gems to be purchased\\n    /// @param nonce The current nonce for the user. This is represented as a\\n    /// uint256 value, but is actually 2 packed uint128's (queueId + nonce)\\n    /// @param signature A signed message specifying tx details\\n    /// @return true if the purchase is valid\\n    function _isPurchaseValid(\\n        address buyer,\\n        uint16[] memory catalystIds,\\n        uint256[] memory catalystQuantities,\\n        uint16[] memory gemIds,\\n        uint256[] memory gemQuantities,\\n        uint256 nonce,\\n        bytes memory signature\\n    ) internal returns (bool) {\\n        require(_checkAndUpdateNonce(buyer, nonce), \\\"INVALID_NONCE\\\");\\n        bytes32 digest =\\n            _hashTypedDataV4(\\n                keccak256(\\n                    abi.encode(\\n                        PURCHASE_TYPEHASH,\\n                        buyer,\\n                        keccak256(abi.encodePacked(catalystIds)),\\n                        keccak256(abi.encodePacked(catalystQuantities)),\\n                        keccak256(abi.encodePacked(gemIds)),\\n                        keccak256(abi.encodePacked(gemQuantities)),\\n                        nonce\\n                    )\\n                )\\n            );\\n        address recoveredSigner = ECDSA.recover(digest, signature);\\n        return recoveredSigner == _signingWallet;\\n    }\\n\\n    /// @dev Function for validating the nonce for a user.\\n    /// @param _buyer The address for which we want to check the nonce\\n    /// @param _packedValue The queueId + nonce, packed together.\\n    /// @return bool Whether the nonce is valid.\\n    /// EG: for queueId=42 nonce=7, pass: \\\"0x0000000000000000000000000000002A00000000000000000000000000000007\\\"\\n    function _checkAndUpdateNonce(address _buyer, uint256 _packedValue) private returns (bool) {\\n        uint128 queueId = uint128(_packedValue / 2**128);\\n        uint128 nonce = uint128(_packedValue % 2**128);\\n        uint128 currentNonce = queuedNonces[_buyer][queueId];\\n        if (nonce == currentNonce) {\\n            queuedNonces[_buyer][queueId] = currentNonce + 1;\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0x5cc7f6e7c11622b831a748ff375a1656aac5a4c2f6b8bcb9225917ac0568165c\",\"license\":\"MIT\"},\"src/solc_0.8/StarterPack/StarterPackV2.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport {PurchaseValidator, Context, AccessControl} from \\\"./PurchaseValidator.sol\\\";\\nimport {GemsCatalystsRegistry, ICatalyst, IGem, IERC20} from \\\"../catalyst/GemsCatalystsRegistry.sol\\\";\\nimport {ERC2771HandlerV2} from \\\"../common/BaseWithStorage/ERC2771/ERC2771HandlerV2.sol\\\";\\n\\n/// @title StarterPack contract for the purchase of StarterPacks (bundles of Catalysts and Gems) with EIP712\\n/// @notice This contract enables purchases with SAND when the backend authorizes it via message signing\\n/// @notice The following privileged roles are used in StarterPackV2: DEFAULT_ADMIN_ROLE, STARTERPACK_ROLE\\n/// @dev DEFAULT_ADMIN_ROLE is intended for contract setup / emergency, STARTERPACK_ROLE is provided for business purposes\\ncontract StarterPackV2 is AccessControl, PurchaseValidator, ERC2771HandlerV2 {\\n    uint256 internal constant MAX_UINT16 = type(uint16).max;\\n    uint256 private constant DECIMAL_PLACES = 1 ether;\\n    uint256 private constant MAX_WITHDRAWAL = 100;\\n    // The delay between calling setPrices() and when the new prices come into effect\\n    // Minimizes the effect of price changes on pending TXs\\n    uint256 private constant PRICE_CHANGE_DELAY = 1 hours;\\n\\n    // The timestamp of the last price change\\n    uint256 private _priceChangeTimestamp;\\n\\n    // The following role is provided for business-related admin functions\\n    bytes32 public constant STARTERPACK_ROLE = keccak256(\\\"STARTERPACK_ROLE\\\");\\n\\n    address internal immutable _sand;\\n    address internal immutable _registry;\\n    address payable internal _wallet;\\n    bool public _sandEnabled;\\n\\n    // Mapping catalyst and gem ids to their prices\\n    mapping(uint16 => uint256) private _catalystPrices;\\n    mapping(uint16 => uint256) private _catalystPreviousPrices;\\n    mapping(uint16 => uint256) private _gemPrices;\\n    mapping(uint16 => uint256) private _gemPreviousPrices;\\n\\n    event ReceivingWallet(address indexed newReceivingWallet);\\n    event Purchase(address indexed buyer, Message message, uint256 amountPaid, address indexed token);\\n    event WithdrawAll(address indexed to, uint16[] catalystIds, uint16[] gemIds);\\n    event SandEnabled(bool enabled);\\n    event SetPrices(\\n        uint16[] catalystIds,\\n        uint256[] catalystPrices,\\n        uint16[] gemIds,\\n        uint256[] gemPrices,\\n        uint256 priceChangeTimestamp\\n    );\\n\\n    struct Message {\\n        address buyer;\\n        uint16[] catalystIds;\\n        uint256[] catalystQuantities;\\n        uint16[] gemIds;\\n        uint256[] gemQuantities;\\n        uint256 nonce;\\n    }\\n\\n    constructor(\\n        address defaultAdmin,\\n        address starterPackAdmin,\\n        address sandContractAddress,\\n        address trustedForwarder,\\n        address payable initialWalletAddress,\\n        address initialSigningWallet,\\n        address registry\\n    ) PurchaseValidator(initialSigningWallet, \\\"Sandbox StarterPack\\\", \\\"1.0\\\") ERC2771HandlerV2(trustedForwarder) {\\n        require(defaultAdmin != address(0), \\\"ADMIN_ZERO_ADDRESS\\\");\\n        require(starterPackAdmin != address(0), \\\"STARTERPACK_ADMIN_ZERO_ADDRESS\\\");\\n        require(sandContractAddress != address(0), \\\"SAND_ZERO_ADDRESS\\\");\\n        require(trustedForwarder != address(0), \\\"FORWARDER_ZERO_ADDRESS\\\");\\n        require(initialWalletAddress != address(0), \\\"WALLET_ZERO_ADDRESS\\\");\\n        require(registry != address(0), \\\"REGISTRY_ZERO_ADDRESS\\\");\\n        _grantRole(DEFAULT_ADMIN_ROLE, defaultAdmin);\\n        _grantRole(STARTERPACK_ROLE, starterPackAdmin);\\n        _sand = sandContractAddress;\\n        _wallet = initialWalletAddress;\\n        _registry = registry;\\n    }\\n\\n    /// @notice Set the wallet receiving the proceeds\\n    /// @param newReceivingWallet Address of the new receiving wallet\\n    function setReceivingWallet(address payable newReceivingWallet) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(newReceivingWallet != address(0), \\\"WALLET_ZERO_ADDRESS\\\");\\n        require(newReceivingWallet != _wallet, \\\"WALLET_ALREADY_SET\\\");\\n        _wallet = newReceivingWallet;\\n        emit ReceivingWallet(newReceivingWallet);\\n    }\\n\\n    /// @dev Enable / disable the specific SAND payment for StarterPacks\\n    /// @param enabled Whether to enable or disable\\n    function setSANDEnabled(bool enabled) external onlyRole(STARTERPACK_ROLE) {\\n        _sandEnabled = enabled;\\n        emit SandEnabled(enabled);\\n    }\\n\\n    /// @notice Enables admin to change the prices (in SAND) of the catalysts and gems in the StarterPack bundle\\n    /// @param catalystIds Array of catalyst IDs for which new prices will take effect after a delay period\\n    /// @param catalystPrices Array of new catalyst prices that will take effect after a delay period\\n    /// @param gemIds Array of gem IDs for which new prices will take effect after a delay period\\n    /// @param gemPrices Array of new gems prices that will take effect after a delay period\\n    function setPrices(\\n        uint16[] calldata catalystIds,\\n        uint256[] calldata catalystPrices,\\n        uint16[] calldata gemIds,\\n        uint256[] calldata gemPrices\\n    ) external onlyRole(STARTERPACK_ROLE) {\\n        require(block.timestamp > _priceChangeTimestamp + PRICE_CHANGE_DELAY, \\\"DELAY_PERIOD_IN_EFFECT\\\");\\n        require(catalystIds.length == catalystPrices.length, \\\"INVALID_CAT_INPUT\\\");\\n        require(gemIds.length == gemPrices.length, \\\"INVALID_GEM_INPUT\\\");\\n        require(catalystPrices.length <= MAX_UINT16, \\\"TOO_MANY_CATALYST_PRICES\\\");\\n        require(gemPrices.length <= MAX_UINT16, \\\"TOO_MANY_GEM_PRICES\\\");\\n        for (uint256 i = 0; i < catalystIds.length; i++) {\\n            uint16 id = catalystIds[i];\\n            require(_isValidCatalyst(id), \\\"INVALID_CAT_ID\\\");\\n            _catalystPreviousPrices[id] = _catalystPrices[id];\\n            _catalystPrices[id] = catalystPrices[i];\\n        }\\n        for (uint256 i = 0; i < gemIds.length; i++) {\\n            uint16 id = gemIds[i];\\n            require(_isValidGem(id), \\\"INVALID_GEM_ID\\\");\\n            _gemPreviousPrices[id] = _gemPrices[id];\\n            _gemPrices[id] = gemPrices[i];\\n        }\\n        _priceChangeTimestamp = block.timestamp;\\n        emit SetPrices(catalystIds, catalystPrices, gemIds, gemPrices, _priceChangeTimestamp);\\n    }\\n\\n    /// @notice Enables admin to withdraw any remaining tokens\\n    /// @param to The destination address for the purchased Catalysts and Gems\\n    /// @param catalystIds The IDs of the catalysts to be transferred\\n    /// @param gemIds The IDs of the gems to be transferred\\n    /// @dev The sum length of catalystIds + gemIds must be <= MAX_WITHDRAWAL\\n    function withdrawAll(\\n        address to,\\n        uint16[] calldata catalystIds,\\n        uint16[] calldata gemIds\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(catalystIds.length + gemIds.length <= MAX_WITHDRAWAL, \\\"TOO_MANY_IDS\\\");\\n        require(to != address(0), \\\"ZERO_ADDRESS\\\");\\n        for (uint256 i = 0; i < catalystIds.length; i++) {\\n            uint16 id = catalystIds[i];\\n            require(_isValidCatalyst(id), \\\"INVALID_CATALYST_ID\\\");\\n            ICatalyst catalyst = _getCatalyst(id);\\n            uint256 balance = catalyst.balanceOf(address(this));\\n            _executeRegistryTransferCatalyst(catalyst, address(this), to, balance);\\n        }\\n        for (uint256 i = 0; i < gemIds.length; i++) {\\n            uint16 id = gemIds[i];\\n            require(_isValidGem(id), \\\"INVALID_GEM_ID\\\");\\n            IGem gem = _getGem(id);\\n            uint256 balance = gem.balanceOf(address(this));\\n            _executeRegistryTransferGem(gem, address(this), to, balance);\\n        }\\n        emit WithdrawAll(to, catalystIds, gemIds);\\n    }\\n\\n    /// @notice Purchase StarterPacks with SAND\\n    /// @param message A message containing information about the Catalysts and Gems to be purchased together with the destination (buyer) and a nonce\\n    /// @param signature A signed message specifying tx details\\n    function purchaseWithSAND(Message calldata message, bytes calldata signature) external {\\n        require(message.buyer == _msgSender(), \\\"INVALID_SENDER\\\");\\n        require(_sandEnabled, \\\"SAND_IS_NOT_ENABLED\\\");\\n        require(\\n            _isPurchaseValid(\\n                message.buyer,\\n                message.catalystIds,\\n                message.catalystQuantities,\\n                message.gemIds,\\n                message.gemQuantities,\\n                message.nonce,\\n                signature\\n            ),\\n            \\\"INVALID_PURCHASE\\\"\\n        );\\n\\n        uint256 amountInSAND =\\n            _calculateTotalPriceInSAND(\\n                message.catalystIds,\\n                message.catalystQuantities,\\n                message.gemIds,\\n                message.gemQuantities\\n            );\\n        _transferSANDPayment(message.buyer, _wallet, amountInSAND);\\n        _transferCatalysts(message.catalystIds, message.catalystQuantities, message.buyer);\\n        _transferGems(message.gemIds, message.gemQuantities, message.buyer);\\n        emit Purchase(message.buyer, message, amountInSAND, _sand);\\n    }\\n\\n    /// @notice Get current StarterPack prices for catalysts and gems by id\\n    /// @param catalystIds The IDs of the catalysts you want to obtain price information for\\n    /// @param gemIds The IDs of the gems you want to obtain price information for\\n    /// @return catalystPricesBeforeSwitch Catalyst prices before price change\\n    /// @return catalystPricesAfterSwitch Catalyst prices after price change\\n    /// @return gemPricesBeforeSwitch Gem prices before price change\\n    /// @return gemPricesAfterSwitch Gem prices after price change\\n    /// @return switchTime The time the latest price change will take effect, being the time of the price change plus the price change delay\\n    function getPrices(uint16[] calldata catalystIds, uint16[] calldata gemIds)\\n        external\\n        view\\n        returns (\\n            uint256[] memory,\\n            uint256[] memory,\\n            uint256[] memory,\\n            uint256[] memory,\\n            uint256\\n        )\\n    {\\n        uint256 switchTime = 0;\\n        if (_priceChangeTimestamp != 0) {\\n            switchTime = _priceChangeTimestamp + PRICE_CHANGE_DELAY;\\n        }\\n        uint256[] memory catalystPricesBeforeSwitch = new uint256[](catalystIds.length);\\n        uint256[] memory catalystPricesAfterSwitch = new uint256[](catalystIds.length);\\n        uint256[] memory gemPricesBeforeSwitch = new uint256[](gemIds.length);\\n        uint256[] memory gemPricesAfterSwitch = new uint256[](gemIds.length);\\n        for (uint256 i = 0; i < catalystIds.length; i++) {\\n            uint16 id = catalystIds[i];\\n            catalystPricesBeforeSwitch[i] = _catalystPreviousPrices[id];\\n            catalystPricesAfterSwitch[i] = _catalystPrices[id];\\n        }\\n        for (uint256 i = 0; i < gemIds.length; i++) {\\n            uint16 id = gemIds[i];\\n            gemPricesBeforeSwitch[i] = _gemPreviousPrices[id];\\n            gemPricesAfterSwitch[i] = _gemPrices[id];\\n        }\\n        return (\\n            catalystPricesBeforeSwitch,\\n            catalystPricesAfterSwitch,\\n            gemPricesBeforeSwitch,\\n            gemPricesAfterSwitch,\\n            switchTime\\n        );\\n    }\\n\\n    /// @notice Return whether SAND payments are enabled\\n    /// @return Whether SAND payments are enabled\\n    function isSANDEnabled() external view returns (bool) {\\n        return _sandEnabled;\\n    }\\n\\n    /// @notice Get the beneficiary wallet.\\n    /// @return the address of the receiving wallet\\n    function getReceivingWallet() external view returns (address) {\\n        return _wallet;\\n    }\\n\\n    /// @notice Verify the total expected price to pay in SAND\\n    /// @param catalystIds An array of catalyst IDs to be purchased\\n    /// @param catalystQuantities An array of catalyst amounts to be purchased\\n    /// @param gemIds An array of gem IDs to be purchased\\n    /// @param gemQuantities An array of gem amounts to be purchased\\n    /// @return the total price to pay in SAND for the cats and gems in the bundle\\n    function calculateTotalPriceInSAND(\\n        uint16[] memory catalystIds,\\n        uint256[] memory catalystQuantities,\\n        uint16[] memory gemIds,\\n        uint256[] memory gemQuantities\\n    ) external returns (uint256) {\\n        return _calculateTotalPriceInSAND(catalystIds, catalystQuantities, gemIds, gemQuantities);\\n    }\\n\\n    function _transferCatalysts(\\n        uint16[] memory catalystIds,\\n        uint256[] memory catalystQuantities,\\n        address buyer\\n    ) internal {\\n        for (uint256 i = 0; i < catalystIds.length; i++) {\\n            uint16 id = catalystIds[i];\\n            require(_isValidCatalyst(id), \\\"INVALID_CATALYST_ID\\\");\\n            _executeRegistryTransferCatalyst(_getCatalyst(id), address(this), buyer, catalystQuantities[i]);\\n        }\\n    }\\n\\n    function _transferGems(\\n        uint16[] memory gemIds,\\n        uint256[] memory gemQuantities,\\n        address buyer\\n    ) internal {\\n        for (uint256 i = 0; i < gemIds.length; i++) {\\n            uint16 id = gemIds[i];\\n            require(_isValidGem(id), \\\"INVALID_GEM_ID\\\");\\n            _executeRegistryTransferGem(_getGem(id), address(this), buyer, gemQuantities[i]);\\n        }\\n    }\\n\\n    function _executeRegistryTransferCatalyst(\\n        ICatalyst catalyst,\\n        address from,\\n        address to,\\n        uint256 quantity\\n    ) private {\\n        require(catalyst.transferFrom(from, to, quantity), \\\"CATALYST_TRANSFER_FAILED\\\");\\n    }\\n\\n    function _executeRegistryTransferGem(\\n        IGem gem,\\n        address from,\\n        address to,\\n        uint256 quantity\\n    ) private {\\n        require(gem.transferFrom(from, to, quantity), \\\"GEM_TRANSFER_FAILED\\\");\\n    }\\n\\n    function _getCatalyst(uint16 catalystId) internal view returns (ICatalyst) {\\n        return GemsCatalystsRegistry(_registry).getCatalyst(catalystId);\\n    }\\n\\n    function _isValidCatalyst(uint16 catalystId) internal view returns (bool) {\\n        return GemsCatalystsRegistry(_registry).doesCatalystExist(catalystId) && catalystId > 0;\\n    }\\n\\n    function _getGem(uint16 gemId) internal view returns (IGem) {\\n        return GemsCatalystsRegistry(_registry).getGem(gemId);\\n    }\\n\\n    function _isValidGem(uint16 gemId) internal view returns (bool) {\\n        return GemsCatalystsRegistry(_registry).doesGemExist(gemId) && gemId > 0;\\n    }\\n\\n    /// @dev Function to calculate the total price in SAND of the StarterPacks to be purchased\\n    function _calculateTotalPriceInSAND(\\n        uint16[] memory catalystIds,\\n        uint256[] memory catalystQuantities,\\n        uint16[] memory gemIds,\\n        uint256[] memory gemQuantities\\n    ) internal returns (uint256) {\\n        require(catalystIds.length == catalystQuantities.length, \\\"INVALID_CAT_INPUT\\\");\\n        require(gemIds.length == gemQuantities.length, \\\"INVALID_GEM_INPUT\\\");\\n        bool useCurrentPrices = _priceSelector();\\n        uint256 totalPrice;\\n        for (uint256 i = 0; i < catalystIds.length; i++) {\\n            uint16 id = catalystIds[i];\\n            uint256 quantity = catalystQuantities[i];\\n            totalPrice =\\n                totalPrice +\\n                (useCurrentPrices ? _catalystPrices[id] * (quantity) : _catalystPreviousPrices[id] * (quantity));\\n        }\\n        for (uint256 i = 0; i < gemIds.length; i++) {\\n            uint16 id = gemIds[i];\\n            uint256 quantity = gemQuantities[i];\\n            totalPrice =\\n                totalPrice +\\n                (useCurrentPrices ? _gemPrices[id] * (quantity) : _gemPreviousPrices[id] * (quantity));\\n        }\\n        return totalPrice;\\n    }\\n\\n    /// @dev Function to determine whether to use previous or current prices\\n    function _priceSelector() internal returns (bool) {\\n        bool useCurrentPrices;\\n        // No price change\\n        if (_priceChangeTimestamp == 0) {\\n            useCurrentPrices = true;\\n        } else {\\n            // Price change delay has expired: use current prices\\n            if (block.timestamp > _priceChangeTimestamp + PRICE_CHANGE_DELAY) {\\n                _priceChangeTimestamp = 0;\\n                useCurrentPrices = true;\\n            } else {\\n                // Price change has recently occured: use previous prices until price change takes effect\\n                useCurrentPrices = false;\\n            }\\n        }\\n        return (useCurrentPrices);\\n    }\\n\\n    /// @dev Function to handle purchase with SAND\\n    function _transferSANDPayment(\\n        address buyer,\\n        address payable paymentRecipient,\\n        uint256 amount\\n    ) internal {\\n        uint256 amountForDestination = amount;\\n        require(IERC20(_sand).transferFrom(buyer, paymentRecipient, amountForDestination), \\\"PAYMENT_TRANSFER_FAILED\\\");\\n    }\\n\\n    /// @dev this override is required; two or more base classes define function\\n    function _msgSender() internal view override(Context, ERC2771HandlerV2) returns (address sender) {\\n        return ERC2771HandlerV2._msgSender();\\n    }\\n\\n    /// @dev this override is required; two or more base classes define function\\n    function _msgData() internal view override(Context, ERC2771HandlerV2) returns (bytes calldata) {\\n        return ERC2771HandlerV2._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0x2161813c4e7d8bdc1289a1cd0651207a259e198ae60ca6712b96c89149adaad1\",\"license\":\"MIT\"},\"src/solc_0.8/catalyst/GemsCatalystsRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport {IGem} from \\\"./interfaces/IGem.sol\\\";\\nimport {ICatalyst, IAssetAttributesRegistry} from \\\"./interfaces/ICatalyst.sol\\\";\\nimport {IERC20Extended, IERC20} from \\\"../common/interfaces/IERC20Extended.sol\\\";\\nimport {IGemsCatalystsRegistry} from \\\"./interfaces/IGemsCatalystsRegistry.sol\\\";\\nimport {ERC2771HandlerUpgradeable} from \\\"../common/BaseWithStorage/ERC2771/ERC2771HandlerUpgradeable.sol\\\";\\nimport {\\n    AccessControlUpgradeable,\\n    ContextUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\n\\n/// @notice Contract managing the Gems and Catalysts\\n/// @notice The following privileged roles are used in this contract: DEFAULT_ADMIN_ROLE, SUPER_OPERATOR_ROLE\\n/// @dev Each Gems and Catalyst must be registered here.\\n/// @dev Each new Gem get assigned a new id (starting at 1)\\n/// @dev Each new Catalyst get assigned a new id (starting at 1)\\n/// @dev DEFAULT_ADMIN_ROLE is intended for contract setup / emergency, SUPER_OPERATOR_ROLE is provided for business purposes\\ncontract GemsCatalystsRegistry is ERC2771HandlerUpgradeable, IGemsCatalystsRegistry, AccessControlUpgradeable {\\n    uint256 private constant MAX_GEMS_AND_CATALYSTS = 256;\\n    uint256 internal constant MAX_UINT256 = type(uint256).max;\\n    bytes32 public constant SUPER_OPERATOR_ROLE = keccak256(\\\"SUPER_OPERATOR_ROLE\\\");\\n\\n    IGem[] internal _gems;\\n    ICatalyst[] internal _catalysts;\\n\\n    event TrustedForwarderChanged(address indexed newTrustedForwarderAddress);\\n    event AddGemsAndCatalysts(IGem[] gems, ICatalyst[] catalysts);\\n    event SetGemsAndCatalystsAllowance(address owner, uint256 allowanceValue);\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor() initializer {}\\n\\n    function initV1(address trustedForwarder, address admin) external initializer {\\n        require(trustedForwarder != address(0), \\\"TRUSTED_FORWARDER_ZERO_ADDRESS\\\");\\n        require(admin != address(0), \\\"ADMIN_ZERO_ADDRESS\\\");\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\\n        __ERC2771Handler_initialize(trustedForwarder);\\n        __AccessControl_init();\\n    }\\n\\n    /// @notice Returns the values for each gem included in a given asset.\\n    /// @param catalystId The catalyst identifier.\\n    /// @param assetId The asset tokenId.\\n    /// @param events An array of GemEvents. Be aware that only gemEvents from the last CatalystApplied event onwards should be used to populate a query. If gemEvents from multiple CatalystApplied events are included the output values will be incorrect.\\n    /// @return values An array of values for each gem present in the asset.\\n    function getAttributes(\\n        uint16 catalystId,\\n        uint256 assetId,\\n        IAssetAttributesRegistry.GemEvent[] calldata events\\n    ) external view override returns (uint32[] memory values) {\\n        ICatalyst catalyst = getCatalyst(catalystId);\\n        require(catalyst != ICatalyst(address(0)), \\\"CATALYST_DOES_NOT_EXIST\\\");\\n        return catalyst.getAttributes(assetId, events);\\n    }\\n\\n    /// @notice Returns the maximum number of gems for a given catalyst\\n    /// @param catalystId catalyst identifier\\n    function getMaxGems(uint16 catalystId) external view override returns (uint8) {\\n        ICatalyst catalyst = getCatalyst(catalystId);\\n        require(catalyst != ICatalyst(address(0)), \\\"CATALYST_DOES_NOT_EXIST\\\");\\n        return catalyst.getMaxGems();\\n    }\\n\\n    /// @notice Returns the decimals for a given catalyst\\n    /// @param catalystId catalyst identifier\\n    function getCatalystDecimals(uint16 catalystId) external view override returns (uint8) {\\n        ICatalyst catalyst = getCatalyst(catalystId);\\n        require(catalyst != ICatalyst(address(0)), \\\"CATALYST_DOES_NOT_EXIST\\\");\\n        return catalyst.getDecimals();\\n    }\\n\\n    /// @notice Returns the decimals for a given gem\\n    /// @param gemId gem identifier\\n    function getGemDecimals(uint16 gemId) external view override returns (uint8) {\\n        IGem gem = getGem(gemId);\\n        require(gem != IGem(address(0)), \\\"GEM_DOES_NOT_EXIST\\\");\\n        return gem.getDecimals();\\n    }\\n\\n    /// @notice Burns few gem units from each gem id on behalf of a beneficiary\\n    /// @param from address of the beneficiary to burn on behalf of\\n    /// @param gemIds list of gems to burn gem units from each\\n    /// @param amounts list of amounts of units to burn\\n    function batchBurnGems(\\n        address from,\\n        uint16[] calldata gemIds,\\n        uint256[] calldata amounts\\n    ) external override {\\n        uint256 gemIdsLength = gemIds.length;\\n        require(gemIdsLength == amounts.length, \\\"GemsCatalystsRegistry: gemsIds and amounts length mismatch\\\");\\n        for (uint256 i = 0; i < gemIdsLength; i++) {\\n            if (gemIds[i] != 0 && amounts[i] != 0) {\\n                burnGem(from, gemIds[i], amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Burns few catalyst units from each catalyst id on behalf of a beneficiary\\n    /// @param from address of the beneficiary to burn on behalf of\\n    /// @param catalystIds list of catalysts to burn catalyst units from each\\n    /// @param amounts list of amounts of units to burn\\n    function batchBurnCatalysts(\\n        address from,\\n        uint16[] calldata catalystIds,\\n        uint256[] calldata amounts\\n    ) external override {\\n        uint256 catalystIdsLength = catalystIds.length;\\n        require(catalystIdsLength == amounts.length, \\\"GemsCatalystsRegistry: catalystIds and amounts length mismatch\\\");\\n        for (uint256 i = 0; i < catalystIdsLength; i++) {\\n            if (catalystIds[i] != 0 && amounts[i] != 0) {\\n                burnCatalyst(from, catalystIds[i], amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Adds both arrays of gems and catalysts to registry\\n    /// @param gems array of gems to be added\\n    /// @param catalysts array of catalysts to be added\\n    function addGemsAndCatalysts(IGem[] calldata gems, ICatalyst[] calldata catalysts)\\n        external\\n        override\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(\\n            uint256(_gems.length + _catalysts.length + gems.length + catalysts.length) < MAX_GEMS_AND_CATALYSTS,\\n            \\\"GemsCatalystsRegistry: Too many gem and catalyst contracts\\\"\\n        );\\n\\n        for (uint256 i = 0; i < gems.length; i++) {\\n            IGem gem = gems[i];\\n            require(address(gem) != address(0), \\\"GEM_ZERO_ADDRESS\\\");\\n            uint16 gemId = gem.gemId();\\n            require(gemId == _gems.length + 1, \\\"GEM_ID_NOT_IN_ORDER\\\");\\n            _gems.push(gem);\\n        }\\n\\n        for (uint256 i = 0; i < catalysts.length; i++) {\\n            ICatalyst catalyst = catalysts[i];\\n            require(address(catalyst) != address(0), \\\"CATALYST_ZERO_ADDRESS\\\");\\n            uint16 catalystId = catalyst.catalystId();\\n            require(catalystId == _catalysts.length + 1, \\\"CATALYST_ID_NOT_IN_ORDER\\\");\\n            _catalysts.push(catalyst);\\n        }\\n        emit AddGemsAndCatalysts(gems, catalysts);\\n    }\\n\\n    /// @notice Set a new trusted forwarder address, limited to DEFAULT_ADMIN_ROLE only\\n    /// @dev Change the address of the trusted forwarder for meta-TX\\n    /// @param trustedForwarder The new trustedForwarder\\n    function setTrustedForwarder(address trustedForwarder) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(trustedForwarder != address(0), \\\"ZERO_ADDRESS\\\");\\n        _trustedForwarder = trustedForwarder;\\n        emit TrustedForwarderChanged(trustedForwarder);\\n    }\\n\\n    /// @notice Query whether a given gem exists.\\n    /// @param gemId The gem being queried.\\n    /// @return Whether the gem exists.\\n    function doesGemExist(uint16 gemId) external view override returns (bool) {\\n        return getGem(gemId) != IGem(address(0));\\n    }\\n\\n    /// @notice Query whether a giving catalyst exists.\\n    /// @param catalystId The catalyst being queried.\\n    /// @return Whether the catalyst exists.\\n    function doesCatalystExist(uint16 catalystId) external view returns (bool) {\\n        return getCatalyst(catalystId) != ICatalyst(address(0));\\n    }\\n\\n    /// @notice Burn a catalyst.\\n    /// @param from The signing address for the tx.\\n    /// @param catalystId The id of the catalyst to burn.\\n    /// @param amount The number of catalyst tokens to burn.\\n    function burnCatalyst(\\n        address from,\\n        uint16 catalystId,\\n        uint256 amount\\n    ) public override checkAuthorization(from) {\\n        ICatalyst catalyst = getCatalyst(catalystId);\\n        require(catalyst != ICatalyst(address(0)), \\\"CATALYST_DOES_NOT_EXIST\\\");\\n        catalyst.burnFor(from, amount);\\n    }\\n\\n    /// @notice Burn a gem.\\n    /// @param from The signing address for the tx.\\n    /// @param gemId The id of the gem to burn.\\n    /// @param amount The number of gem tokens to burn.\\n    function burnGem(\\n        address from,\\n        uint16 gemId,\\n        uint256 amount\\n    ) public override checkAuthorization(from) {\\n        IGem gem = getGem(gemId);\\n        require(gem != IGem(address(0)), \\\"GEM_DOES_NOT_EXIST\\\");\\n        gem.burnFor(from, amount);\\n    }\\n\\n    function getNumberOfCatalystContracts() external view returns (uint256 number) {\\n        number = _catalysts.length;\\n    }\\n\\n    function getNumberOfGemContracts() external view returns (uint256 number) {\\n        number = _gems.length;\\n    }\\n\\n    /// @dev Only the owner, SUPER_OPERATOR_ROLE or APPROVER_ROLE may set the allowance\\n    function revokeGemsandCatalystsMaxAllowance() external {\\n        _setGemsAndCatalystsAllowance(0);\\n    }\\n\\n    /// @dev Only the owner, SUPER_OPERATOR_ROLE or APPROVER_ROLE may set the allowance\\n    function setGemsAndCatalystsMaxAllowance() external {\\n        _setGemsAndCatalystsAllowance(MAX_UINT256);\\n    }\\n\\n    /// @dev Get the catalyst contract corresponding to the id.\\n    /// @param catalystId The catalyst id to use to retrieve the contract.\\n    /// @return The requested Catalyst contract.\\n    function getCatalyst(uint16 catalystId) public view returns (ICatalyst) {\\n        if (catalystId > 0 && catalystId <= _catalysts.length) {\\n            return _catalysts[catalystId - 1];\\n        } else {\\n            return ICatalyst(address(0));\\n        }\\n    }\\n\\n    /// @dev Get the gem contract corresponding to the id.\\n    /// @param gemId The gem id to use to retrieve the contract.\\n    /// @return The requested Gem contract.\\n    function getGem(uint16 gemId) public view returns (IGem) {\\n        if (gemId > 0 && gemId <= _gems.length) {\\n            return _gems[gemId - 1];\\n        } else {\\n            return IGem(address(0));\\n        }\\n    }\\n\\n    /// @dev verify that the caller is authorized for this function call.\\n    /// @param from The original signer of the transaction.\\n    modifier checkAuthorization(address from) {\\n        require(_msgSender() == from || hasRole(SUPER_OPERATOR_ROLE, _msgSender()), \\\"AUTH_ACCESS_DENIED\\\");\\n        _;\\n    }\\n\\n    function _setGemsAndCatalystsAllowance(uint256 allowanceValue) internal {\\n        for (uint256 i = 0; i < _gems.length; i++) {\\n            require(_gems[i].approveFor(_msgSender(), address(this), allowanceValue), \\\"GEM_ALLOWANCE_NOT_APPROVED\\\");\\n        }\\n\\n        for (uint256 i = 0; i < _catalysts.length; i++) {\\n            require(\\n                _catalysts[i].approveFor(_msgSender(), address(this), allowanceValue),\\n                \\\"CATALYST_ALLOWANCE_NOT_APPROVED\\\"\\n            );\\n        }\\n        emit SetGemsAndCatalystsAllowance(_msgSender(), allowanceValue);\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        override(ContextUpgradeable, ERC2771HandlerUpgradeable)\\n        returns (address sender)\\n    {\\n        return ERC2771HandlerUpgradeable._msgSender();\\n    }\\n\\n    function _msgData() internal view override(ContextUpgradeable, ERC2771HandlerUpgradeable) returns (bytes calldata) {\\n        return ERC2771HandlerUpgradeable._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0x0adfb6ecb8dd8b6cfb2c33d240cd42b0b1bad3fb1e6105f492f3b81e959c3116\",\"license\":\"MIT\"},\"src/solc_0.8/catalyst/interfaces/ICatalyst.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"../../common/interfaces/IAssetAttributesRegistry.sol\\\";\\nimport \\\"../../common/interfaces/IAttributes.sol\\\";\\nimport \\\"../../common/interfaces/IERC20Extended.sol\\\";\\n\\ninterface ICatalyst is IERC20Extended, IAttributes {\\n    function catalystId() external returns (uint16);\\n\\n    function changeAttributes(IAttributes attributes) external;\\n\\n    function getMaxGems() external view returns (uint8);\\n\\n    function approveFor(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) external override returns (bool success);\\n\\n    function getAttributes(uint256 assetId, IAssetAttributesRegistry.GemEvent[] calldata events)\\n        external\\n        view\\n        override\\n        returns (uint32[] memory values);\\n\\n    function getDecimals() external pure returns (uint8);\\n}\\n\",\"keccak256\":\"0x0f9415fff82b9c189f2d02680efd61195e1ac7f5ed17a63094143b386fc6b177\",\"license\":\"MIT\"},\"src/solc_0.8/catalyst/interfaces/IGem.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"../../common/interfaces/IERC20Extended.sol\\\";\\n\\ninterface IGem is IERC20Extended {\\n    function gemId() external returns (uint16);\\n\\n    function approveFor(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) external override returns (bool success);\\n\\n    function getDecimals() external pure returns (uint8);\\n}\\n\",\"keccak256\":\"0x5555669b35669429002d70f48abba62f8b03c47b4a256c56b13644e9b87ac94a\",\"license\":\"MIT\"},\"src/solc_0.8/catalyst/interfaces/IGemsCatalystsRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"../../common/interfaces/IAssetAttributesRegistry.sol\\\";\\nimport \\\"./IGem.sol\\\";\\nimport \\\"./ICatalyst.sol\\\";\\n\\ninterface IGemsCatalystsRegistry {\\n    function getAttributes(\\n        uint16 catalystId,\\n        uint256 assetId,\\n        IAssetAttributesRegistry.GemEvent[] calldata events\\n    ) external view returns (uint32[] memory values);\\n\\n    function getMaxGems(uint16 catalystId) external view returns (uint8);\\n\\n    function batchBurnGems(\\n        address from,\\n        uint16[] calldata gemIds,\\n        uint256[] calldata amounts\\n    ) external;\\n\\n    function batchBurnCatalysts(\\n        address from,\\n        uint16[] calldata catalystIds,\\n        uint256[] calldata amounts\\n    ) external;\\n\\n    function addGemsAndCatalysts(IGem[] calldata gems, ICatalyst[] calldata catalysts) external;\\n\\n    function doesGemExist(uint16 gemId) external view returns (bool);\\n\\n    function burnCatalyst(\\n        address from,\\n        uint16 catalystId,\\n        uint256 amount\\n    ) external;\\n\\n    function burnGem(\\n        address from,\\n        uint16 gemId,\\n        uint256 amount\\n    ) external;\\n\\n    function getCatalystDecimals(uint16 catalystId) external view returns (uint8);\\n\\n    function getGemDecimals(uint16 gemId) external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x3de22bb2dbd63ffbace87e470c716fb1aad2b116c671e5cff7631af96d055e33\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/ERC2771/ERC2771HandlerUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\n/// @dev minimal ERC2771 handler to keep bytecode-size down\\n/// based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.6.0/contracts/metatx/ERC2771Context.sol\\n/// with an initializer for proxies and a mutable forwarder\\n/// @dev same as ERC2771Handler.sol but with gap\\n\\ncontract ERC2771HandlerUpgradeable {\\n    address internal _trustedForwarder;\\n    uint256[49] private __gap;\\n\\n    function __ERC2771Handler_initialize(address forwarder) internal {\\n        _trustedForwarder = forwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function getTrustedForwarder() external view returns (address trustedForwarder) {\\n        return _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd0f91cd40c381f1d486f9906fd8002dd51308d74f28016ed89b17c3c169133e2\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/ERC2771/ERC2771HandlerV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\n/// @dev minimal ERC2771 handler to keep bytecode-size down\\n/// @dev no initializer version\\n\\ncontract ERC2771HandlerV2 {\\n    address internal _trustedForwarder;\\n\\n    constructor(address forwarder) {\\n        _trustedForwarder = forwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function getTrustedForwarder() external view returns (address trustedForwarder) {\\n        return _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeff7774d1ef088e561ce90a41c5a2d76aad65f59fea939ffac4e212af66486f4\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IAssetAttributesRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\npragma experimental ABIEncoderV2;\\n\\ninterface IAssetAttributesRegistry {\\n    struct GemEvent {\\n        uint16[] gemIds;\\n        bytes32 blockHash;\\n    }\\n\\n    struct AssetGemsCatalystData {\\n        uint256 assetId;\\n        uint16 catalystContractId;\\n        uint16[] gemContractIds;\\n    }\\n\\n    function getRecord(uint256 assetId)\\n        external\\n        view\\n        returns (\\n            bool exists,\\n            uint16 catalystId,\\n            uint16[] memory gemIds\\n        );\\n\\n    function getAttributes(uint256 assetId, GemEvent[] calldata events) external view returns (uint32[] memory values);\\n\\n    function setCatalyst(\\n        uint256 assetId,\\n        uint16 catalystId,\\n        uint16[] calldata gemIds\\n    ) external;\\n\\n    function setCatalystWhenDepositOnOtherLayer(\\n        uint256 assetId,\\n        uint16 catalystId,\\n        uint16[] calldata gemIds\\n    ) external;\\n\\n    function setCatalystWithBlockNumber(\\n        uint256 assetId,\\n        uint16 catalystId,\\n        uint16[] calldata gemIds,\\n        uint64 blockNumber\\n    ) external;\\n\\n    function addGems(uint256 assetId, uint16[] calldata gemIds) external;\\n\\n    function setMigrationContract(address _migrationContract) external;\\n\\n    function getCatalystRegistry() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7f12fa565160d7598f702dcae0e511943be9c6eaa4dc338f3439a36f0a6086c9\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IAttributes.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IAssetAttributesRegistry.sol\\\";\\n\\ninterface IAttributes {\\n    function getAttributes(uint256 assetId, IAssetAttributesRegistry.GemEvent[] calldata events)\\n        external\\n        view\\n        returns (uint32[] memory values);\\n}\\n\",\"keccak256\":\"0x4cbdba9ad3fae8334fe614ae28fb3136454eada28f13f911ffce9c8c701c56a7\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.2;\\n\\n/// @dev see https://eips.ethereum.org/EIPS/eip-20\\ninterface IERC20 {\\n    /// @notice emitted when tokens are transfered from one address to another.\\n    /// @param from address from which the token are transfered from (zero means tokens are minted).\\n    /// @param to destination address which the token are transfered to (zero means tokens are burnt).\\n    /// @param value amount of tokens transferred.\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice emitted when owner grant transfer rights to another address\\n    /// @param owner address allowing its token to be transferred.\\n    /// @param spender address allowed to spend on behalf of `owner`\\n    /// @param value amount of tokens allowed.\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice return the current total amount of tokens owned by all holders.\\n    /// @return supply total number of tokens held.\\n    function totalSupply() external view returns (uint256 supply);\\n\\n    /// @notice return the number of tokens held by a particular address.\\n    /// @param who address being queried.\\n    /// @return balance number of token held by that address.\\n    function balanceOf(address who) external view returns (uint256 balance);\\n\\n    /// @notice transfer tokens to a specific address.\\n    /// @param to destination address receiving the tokens.\\n    /// @param value number of tokens to transfer.\\n    /// @return success whether the transfer succeeded.\\n    function transfer(address to, uint256 value) external returns (bool success);\\n\\n    /// @notice transfer tokens from one address to another.\\n    /// @param from address tokens will be sent from.\\n    /// @param to destination address receiving the tokens.\\n    /// @param value number of tokens to transfer.\\n    /// @return success whether the transfer succeeded.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool success);\\n\\n    /// @notice approve an address to spend on your behalf.\\n    /// @param spender address entitled to transfer on your behalf.\\n    /// @param value amount allowed to be transfered.\\n    /// @param success whether the approval succeeded.\\n    function approve(address spender, uint256 value) external returns (bool success);\\n\\n    /// @notice return the current allowance for a particular owner/spender pair.\\n    /// @param owner address allowing spender.\\n    /// @param spender address allowed to spend.\\n    /// @return amount number of tokens `spender` can spend on behalf of `owner`.\\n    function allowance(address owner, address spender) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x9fe745d44fdcd7987682221d68b7a66d0784fbd81ae1d4e43a6c766347733a96\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC20Extended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.2;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IERC20Extended is IERC20 {\\n    function burnFor(address from, uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n\\n    function approveFor(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xf02074902aff81db019aac8808c524d2ab77e1cb216f5327992ed7db95fee919\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101806040523480156200001257600080fd5b50604051620042323803806200423283398101604081905262000035916200050a565b604080518082018252601381527f53616e64626f7820537461727465725061636b0000000000000000000000000060208083019182528351808501855260038152620312e360ec1b81830152835190922060e08190527fe6bbd6277e1bf288eed5e8d1780f9a50b239e86b153736bceebccf4ea79d90b36101008190524660a081815287517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818701819052818a0195909552606081810194909452608080820193909352308183018190528951808303909301835260c09182019099528151919095012090529490941b90526101209290925285918491906001600160a01b038316620001805760405162461bcd60e51b815260206004820152601360248201527257414c4c45545f5a45524f5f4144445245535360681b60448201526064015b60405180910390fd5b5050600180546001600160a01b03199081166001600160a01b039384161790915560038054909116928216929092179091558716620001f75760405162461bcd60e51b815260206004820152601260248201527141444d494e5f5a45524f5f4144445245535360701b604482015260640162000177565b6001600160a01b0386166200024f5760405162461bcd60e51b815260206004820152601e60248201527f535441525445525041434b5f41444d494e5f5a45524f5f414444524553530000604482015260640162000177565b6001600160a01b0385166200029b5760405162461bcd60e51b815260206004820152601160248201527053414e445f5a45524f5f4144445245535360781b604482015260640162000177565b6001600160a01b038416620002f35760405162461bcd60e51b815260206004820152601660248201527f464f525741524445525f5a45524f5f4144445245535300000000000000000000604482015260640162000177565b6001600160a01b038316620003415760405162461bcd60e51b815260206004820152601360248201527257414c4c45545f5a45524f5f4144445245535360681b604482015260640162000177565b6001600160a01b038116620003995760405162461bcd60e51b815260206004820152601560248201527f52454749535452595f5a45524f5f414444524553530000000000000000000000604482015260640162000177565b620003a66000886200041b565b620003d27ff0b465b2fd9a8eb309079c069118a26163974b82d09d2b1dafd9aef7692568e6876200041b565b606094851b6001600160601b031990811661014052600580546001600160a01b0319166001600160a01b03959095169490941790935590931b166101605250620005cd92505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620004ba576000828152602081815260408083206001600160a01b03851684529091529020805460ff1916600117905562000479620004be565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000620004d5620004db60201b62001a1b1760201c565b90505b90565b6003546000906001600160a01b031633141562000502575060131936013560601c620004d8565b5033620004d8565b600080600080600080600060e0888a03121562000525578283fd5b87516200053281620005b4565b60208901519097506200054581620005b4565b60408901519096506200055881620005b4565b60608901519095506200056b81620005b4565b60808901519094506200057e81620005b4565b60a08901519093506200059181620005b4565b60c0890151909250620005a481620005b4565b8091505092959891949750929550565b6001600160a01b0381168114620005ca57600080fd5b50565b60805160a05160c05160601c60e05161010051610120516101405160601c6101605160601c613bda6200065860003960008181611b2201528181611beb0152818161244301526125d101526000818161102f01526121880152600061276a015260006127b901526000612794015260006126eb015260006127150152600061273f0152613bda6000f3fe608060405234801561001057600080fd5b50600436106101b95760003560e01c80637eb6f6e1116100f9578063c6ba4c8111610097578063d2118a3211610071578063d2118a3214610443578063d3bd2cf514610457578063d547741f1461047e578063f698da2514610491576101b9565b8063c6ba4c811461040e578063caed350014610421578063ce1b815f14610432576101b9565b8063a217fddf116100d3578063a217fddf146103a3578063a7e30684146103ab578063b522ecff146103be578063bf5c3e9f146103d1576101b9565b80637eb6f6e114610321578063883295291461034857806391d148541461036c576101b9565b806336568abe11610166578063572b6c0511610140578063572b6c05146102b45780635b2c9bc4146102d65780636131bc4a146102e95780637c53ec4c1461030e576101b9565b806336568abe1461025a5780634513e1fe1461026d5780634d08cbc114610280576101b9565b80632cbb68c7116101975780632cbb68c71461022c5780632f2ff15d1461023f5780633408e47014610252576101b9565b806301ede9a7146101be57806301ffc9a7146101d3578063248a9ca3146101fb575b600080fd5b6101d16101cc366004613159565b610499565b005b6101e66101e1366004613485565b6105c8565b60405190151581526020015b60405180910390f35b61021e610209366004613449565b60009081526020819052604090206001015490565b6040519081526020016101f2565b6101d161023a3660046132aa565b610663565b6101d161024d366004613461565b610aa3565b61021e610ad0565b6101d1610268366004613461565b610ad5565b6101d161027b3660046134e1565b610b71565b61029361028e3660046131f5565b6110a4565b6040516fffffffffffffffffffffffffffffffff90911681526020016101f2565b6101e66102c2366004613159565b6003546001600160a01b0390811691161490565b61021e6102e4366004613369565b6110e3565b6005546001600160a01b03165b6040516001600160a01b0390911681526020016101f2565b6101d161031c366004613411565b6110fa565b61021e7f4acf49a75d600a594757b3a4cf06923667df023a4888b3ff7accc07a1fe8581f81565b61035b610356366004613241565b61119b565b6040516101f29594939291906137e7565b6101e661037a366004613461565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b61021e600081565b6101e6600554600160a01b900460ff1690565b6101d16103cc366004613159565b6114f4565b6102936103df3660046131f5565b60026020908152600092835260408084209091529082529020546fffffffffffffffffffffffffffffffff1681565b6101d161041c366004613175565b611619565b6001546001600160a01b03166102f6565b6003546001600160a01b03166102f6565b6005546101e690600160a01b900460ff1681565b61021e7ff0b465b2fd9a8eb309079c069118a26163974b82d09d2b1dafd9aef7692568e681565b6101d161048c366004613461565b6119e4565b61021e611a0c565b60006104ac816104a7611a65565b611a6f565b6001600160a01b0382166105075760405162461bcd60e51b815260206004820152601360248201527f57414c4c45545f5a45524f5f414444524553530000000000000000000000000060448201526064015b60405180910390fd5b6001546001600160a01b03838116911614156105655760405162461bcd60e51b815260206004820152601260248201527f57414c4c45545f414c52454144595f534554000000000000000000000000000060448201526064016104fe565b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0384169081179091556040517f48772ae5df5446cb5feef762e8204b7987ae4d5dd4a7082bc868da62cdafbdd890600090a25050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061065b57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b90505b919050565b7ff0b465b2fd9a8eb309079c069118a26163974b82d09d2b1dafd9aef7692568e6610690816104a7611a65565b610e106004546106a09190613a82565b42116106ee5760405162461bcd60e51b815260206004820152601660248201527f44454c41595f504552494f445f494e5f4546464543540000000000000000000060448201526064016104fe565b87861461073d5760405162461bcd60e51b815260206004820152601160248201527f494e56414c49445f4341545f494e50555400000000000000000000000000000060448201526064016104fe565b83821461078c5760405162461bcd60e51b815260206004820152601160248201527f494e56414c49445f47454d5f494e50555400000000000000000000000000000060448201526064016104fe565b61ffff8611156107de5760405162461bcd60e51b815260206004820152601860248201527f544f4f5f4d414e595f434154414c5953545f505249434553000000000000000060448201526064016104fe565b61ffff8211156108305760405162461bcd60e51b815260206004820152601360248201527f544f4f5f4d414e595f47454d5f5052494345530000000000000000000000000060448201526064016104fe565b60005b8881101561093d5760008a8a8381811061085d57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906108729190613579565b905061087d81611aed565b6108c95760405162461bcd60e51b815260206004820152600e60248201527f494e56414c49445f4341545f494400000000000000000000000000000000000060448201526064016104fe565b61ffff811660009081526006602090815260408083205460079092529091205588888381811061090957634e487b7160e01b600052603260045260246000fd5b61ffff909316600090815260066020908152604090912093029190910135909155508061093581613b10565b915050610833565b5060005b84811015610a4b57600086868381811061096b57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906109809190613579565b905061098b81611bb6565b6109d75760405162461bcd60e51b815260206004820152600e60248201527f494e56414c49445f47454d5f494400000000000000000000000000000000000060448201526064016104fe565b61ffff8116600090815260086020908152604080832054600990925290912055848483818110610a1757634e487b7160e01b600052603260045260246000fd5b61ffff9093166000908152600860209081526040909120930291909101359091555080610a4381613b10565b915050610941565b504260048190556040517fc9d599c84a31e2682b8d247a3a928d4d8fdbe782a60fb12496b0635e743b9bad91610a90918c918c918c918c918c918c918c918c9161377f565b60405180910390a1505050505050505050565b600082815260208190526040902060010154610ac1816104a7611a65565b610acb8383611c22565b505050565b465b90565b610add611a65565b6001600160a01b0316816001600160a01b031614610b635760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016104fe565b610b6d8282611cc1565b5050565b610b79611a65565b6001600160a01b0316610b8f6020850185613159565b6001600160a01b031614610be55760405162461bcd60e51b815260206004820152600e60248201527f494e56414c49445f53454e44455200000000000000000000000000000000000060448201526064016104fe565b600554600160a01b900460ff16610c3e5760405162461bcd60e51b815260206004820152601360248201527f53414e445f49535f4e4f545f454e41424c45440000000000000000000000000060448201526064016104fe565b610d89610c4e6020850185613159565b610c5b602086018661396a565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610c9a92505050604087018761396a565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610cd992505050606088018861396a565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610d1892505050608089018961396a565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020601f8c018190048102820181019092528a815260a08d0135935091508a908a9081908401838280828437600092019190915250611d5e92505050565b610dd55760405162461bcd60e51b815260206004820152601060248201527f494e56414c49445f50555243484153450000000000000000000000000000000060448201526064016104fe565b6000610edb610de7602086018661396a565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610e2692505050604087018761396a565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610e6592505050606088018861396a565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610ea492505050608089018961396a565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611f0192505050565b9050610eff610eed6020860186613159565b6005546001600160a01b031683612158565b610f92610f0f602086018661396a565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610f4e92505050604087018761396a565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610f8d925050506020880188613159565b612258565b611025610fa2606086018661396a565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610fe192505050608087018761396a565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611020925050506020880188613159565b612333565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001661105c6020860186613159565b6001600160a01b03167f88cf9250270a174fd21b12814284914b5a06288dea4adef8c253fa9ea0b00960868460405161109692919061387a565b60405180910390a350505050565b6001600160a01b03821660009081526002602090815260408083206fffffffffffffffffffffffffffffffff8086168552925290912054165b92915050565b60006110f185858585611f01565b95945050505050565b7ff0b465b2fd9a8eb309079c069118a26163974b82d09d2b1dafd9aef7692568e6611127816104a7611a65565b60058054831515600160a01b027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff9091161790556040517ff335ca6ebe8497478be43c9f42277776ba3e3a19eea1a0774d15ba9db1bd41c69061118f90841515815260200190565b60405180910390a15050565b606080606080600080600090506004546000146111c557610e106004546111c29190613a82565b90505b60008967ffffffffffffffff8111156111ee57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611217578160200160208202803683370190505b50905060008a67ffffffffffffffff81111561124357634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561126c578160200160208202803683370190505b50905060008967ffffffffffffffff81111561129857634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156112c1578160200160208202803683370190505b50905060008a67ffffffffffffffff8111156112ed57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611316578160200160208202803683370190505b50905060005b8d8110156113fb5760008f8f8381811061134657634e487b7160e01b600052603260045260246000fd5b905060200201602081019061135b9190613579565b61ffff811660009081526007602052604090205487519192509087908490811061139557634e487b7160e01b600052603260045260246000fd5b602002602001018181525050600660008261ffff1661ffff168152602001908152602001600020548583815181106113dd57634e487b7160e01b600052603260045260246000fd5b602090810291909101015250806113f381613b10565b91505061131c565b5060005b8b8110156114de5760008d8d8381811061142957634e487b7160e01b600052603260045260246000fd5b905060200201602081019061143e9190613579565b61ffff811660009081526009602052604090205485519192509085908490811061147857634e487b7160e01b600052603260045260246000fd5b602002602001018181525050600860008261ffff1661ffff168152602001908152602001600020548383815181106114c057634e487b7160e01b600052603260045260246000fd5b602090810291909101015250806114d681613b10565b9150506113ff565b50929d919c509a50909850909650945050505050565b6000611502816104a7611a65565b6001600160a01b0382166115585760405162461bcd60e51b815260206004820152601360248201527f57414c4c45545f5a45524f5f414444524553530000000000000000000000000060448201526064016104fe565b6005546001600160a01b03838116911614156115b65760405162461bcd60e51b815260206004820152601260248201527f57414c4c45545f414c52454144595f534554000000000000000000000000000060448201526064016104fe565b600580547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0384169081179091556040517f36bd24528fb590ed70f3d60ee66c142cdf4cfddb960c8ca95491e15756464afd90600090a25050565b6000611627816104a7611a65565b60646116338386613a82565b11156116815760405162461bcd60e51b815260206004820152600c60248201527f544f4f5f4d414e595f494453000000000000000000000000000000000000000060448201526064016104fe565b6001600160a01b0386166116d75760405162461bcd60e51b815260206004820152600c60248201527f5a45524f5f41444452455353000000000000000000000000000000000000000060448201526064016104fe565b60005b8481101561183557600086868381811061170457634e487b7160e01b600052603260045260246000fd5b90506020020160208101906117199190613579565b905061172481611aed565b6117705760405162461bcd60e51b815260206004820152601360248201527f494e56414c49445f434154414c5953545f49440000000000000000000000000060448201526064016104fe565b600061177b8261240e565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529091506000906001600160a01b038316906370a082319060240160206040518083038186803b1580156117d957600080fd5b505afa1580156117ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118119190613593565b905061181f82308c846124c6565b505050808061182d90613b10565b9150506116da565b5060005b8281101561199457600084848381811061186357634e487b7160e01b600052603260045260246000fd5b90506020020160208101906118789190613579565b905061188381611bb6565b6118cf5760405162461bcd60e51b815260206004820152600e60248201527f494e56414c49445f47454d5f494400000000000000000000000000000000000060448201526064016104fe565b60006118da8261259c565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529091506000906001600160a01b038316906370a082319060240160206040518083038186803b15801561193857600080fd5b505afa15801561194c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119709190613593565b905061197e82308c84612608565b505050808061198c90613b10565b915050611839565b50856001600160a01b03167f82c2527369e946c0503dcd68b2410afcba8d1d211bd6673531481d2bc38a47df868686866040516119d4949392919061374d565b60405180910390a2505050505050565b600082815260208190526040902060010154611a02816104a7611a65565b610acb8383611cc1565b6000611a166126de565b905090565b6003546000906001600160a01b0316331415611a5e57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c610ad2565b5033610ad2565b6000611a16611a1b565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610b6d57611aab816001600160a01b03166014612809565b611ab6836020612809565b604051602001611ac79291906136cc565b60408051601f198184030181529082905262461bcd60e51b82526104fe91600401613847565b6040517fc056975800000000000000000000000000000000000000000000000000000000815261ffff821660048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c0569758906024015b60206040518083038186803b158015611b6d57600080fd5b505afa158015611b81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba5919061342d565b801561065b57505061ffff16151590565b6040517f141376f900000000000000000000000000000000000000000000000000000000815261ffff821660048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063141376f990602401611b55565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610b6d576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055611c7d611a65565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1615610b6d576000828152602081815260408083206001600160a01b03851684529091529020805460ff19169055611d1a611a65565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6000611d6a8884612a7f565b611db65760405162461bcd60e51b815260206004820152600d60248201527f494e56414c49445f4e4f4e43450000000000000000000000000000000000000060448201526064016104fe565b6000611ed47f4acf49a75d600a594757b3a4cf06923667df023a4888b3ff7accc07a1fe8581f8a8a604051602001611dee9190613668565b604051602081830303815290604052805190602001208a604051602001611e1591906136a2565b604051602081830303815290604052805190602001208a604051602001611e3c9190613668565b604051602081830303815290604052805190602001208a604051602001611e6391906136a2565b60408051601f198184030181528282528051602091820120908301979097526001600160a01b03909516948101949094526060840192909252608083015260a082015260c081019190915260e081018690526101000160405160208183030381529060405280519060200120612b88565b90506000611ee28285612bf1565b6001546001600160a01b039081169116149a9950505050505050505050565b60008351855114611f545760405162461bcd60e51b815260206004820152601160248201527f494e56414c49445f4341545f494e50555400000000000000000000000000000060448201526064016104fe565b8151835114611fa55760405162461bcd60e51b815260206004820152601160248201527f494e56414c49445f47454d5f494e50555400000000000000000000000000000060448201526064016104fe565b6000611faf612c15565b90506000805b875181101561207f576000888281518110611fe057634e487b7160e01b600052603260045260246000fd5b60200260200101519050600088838151811061200c57634e487b7160e01b600052603260045260246000fd5b602002602001015190508461203f5761ffff821660009081526007602052604090205461203a908290613aae565b61205e565b61ffff821660009081526006602052604090205461205e908290613aae565b6120689085613a82565b93505050808061207790613b10565b915050611fb5565b5060005b855181101561214d5760008682815181106120ae57634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008683815181106120da57634e487b7160e01b600052603260045260246000fd5b602002602001015190508461210d5761ffff8216600090815260096020526040902054612108908290613aae565b61212c565b61ffff821660009081526008602052604090205461212c908290613aae565b6121369085613a82565b93505050808061214590613b10565b915050612083565b509695505050505050565b6040516323b872dd60e01b81526001600160a01b03848116600483015283811660248301526044820183905282917f0000000000000000000000000000000000000000000000000000000000000000909116906323b872dd90606401602060405180830381600087803b1580156121ce57600080fd5b505af11580156121e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612206919061342d565b6122525760405162461bcd60e51b815260206004820152601760248201527f5041594d454e545f5452414e534645525f4641494c454400000000000000000060448201526064016104fe565b50505050565b60005b835181101561225257600084828151811061228657634e487b7160e01b600052603260045260246000fd5b6020026020010151905061229981611aed565b6122e55760405162461bcd60e51b815260206004820152601360248201527f494e56414c49445f434154414c5953545f49440000000000000000000000000060448201526064016104fe565b6123206122f18261240e565b308587868151811061231357634e487b7160e01b600052603260045260246000fd5b60200260200101516124c6565b508061232b81613b10565b91505061225b565b60005b835181101561225257600084828151811061236157634e487b7160e01b600052603260045260246000fd5b6020026020010151905061237481611bb6565b6123c05760405162461bcd60e51b815260206004820152600e60248201527f494e56414c49445f47454d5f494400000000000000000000000000000000000060448201526064016104fe565b6123fb6123cc8261259c565b30858786815181106123ee57634e487b7160e01b600052603260045260246000fd5b6020026020010151612608565b508061240681613b10565b915050612336565b6040517fe8a0806600000000000000000000000000000000000000000000000000000000815261ffff821660048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e8a08066906024015b60206040518083038186803b15801561248e57600080fd5b505afa1580156124a2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065b91906134c5565b6040516323b872dd60e01b81526001600160a01b0384811660048301528381166024830152604482018390528516906323b872dd90606401602060405180830381600087803b15801561251857600080fd5b505af115801561252c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612550919061342d565b6122525760405162461bcd60e51b815260206004820152601860248201527f434154414c5953545f5452414e534645525f4641494c4544000000000000000060448201526064016104fe565b6040517f786325dd00000000000000000000000000000000000000000000000000000000815261ffff821660048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063786325dd90602401612476565b6040516323b872dd60e01b81526001600160a01b0384811660048301528381166024830152604482018390528516906323b872dd90606401602060405180830381600087803b15801561265a57600080fd5b505af115801561266e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612692919061342d565b6122525760405162461bcd60e51b815260206004820152601360248201527f47454d5f5452414e534645525f4641494c45440000000000000000000000000060448201526064016104fe565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561273757507f000000000000000000000000000000000000000000000000000000000000000046145b1561276357507f0000000000000000000000000000000000000000000000000000000000000000610ad2565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c09092019092528051910120610ad2565b60606000612818836002613aae565b612823906002613a82565b67ffffffffffffffff81111561284957634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612873576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106128b857634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061292957634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000612965846002613aae565b612970906001613a82565b90505b6001811115612a29577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106129bf57634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106129e357634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93612a2281613af9565b9050612973565b508315612a785760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104fe565b9392505050565b600080612a9d70010000000000000000000000000000000084613a9a565b90506000612abc70010000000000000000000000000000000085613b2b565b6001600160a01b03861660009081526002602090815260408083206fffffffffffffffffffffffffffffffff8088168552925290912054919250908116908216811415612b7c57612b0e816001613a4e565b6001600160a01b03871660009081526002602090815260408083206fffffffffffffffffffffffffffffffff9788168452909152902080547fffffffffffffffffffffffffffffffff0000000000000000000000000000000016919094161790925550600191506110dd9050565b50600095945050505050565b600061065b612b956126de565b836040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000612c008585612c57565b91509150612c0d81612cc7565b509392505050565b60008060045460001415612c2b57506001611a16565b610e10600454612c3b9190613a82565b421115612c4f575060006004556001611a16565b506000905090565b600080825160411415612c8e5760208301516040840151606085015160001a612c8287828585612f03565b94509450505050612cc0565b825160401415612cb85760208301516040840151612cad868383612ff0565b935093505050612cc0565b506000905060025b9250929050565b6000816004811115612ce957634e487b7160e01b600052602160045260246000fd5b1415612cf457612f00565b6001816004811115612d1657634e487b7160e01b600052602160045260246000fd5b1415612d645760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016104fe565b6002816004811115612d8657634e487b7160e01b600052602160045260246000fd5b1415612dd45760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016104fe565b6003816004811115612df657634e487b7160e01b600052602160045260246000fd5b1415612e6a5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016104fe565b6004816004811115612e8c57634e487b7160e01b600052602160045260246000fd5b1415612f005760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016104fe565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612f3a5750600090506003612fe7565b8460ff16601b14158015612f5257508460ff16601c14155b15612f635750600090506004612fe7565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612fb7573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612fe057600060019250925050612fe7565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831660ff84901c601b0161302a87828885612f03565b935093505050935093915050565b60008083601f840112613049578182fd5b50813567ffffffffffffffff811115613060578182fd5b6020830191508360208083028501011115612cc057600080fd5b600082601f83011261308a578081fd5b8135602061309f61309a836139e2565b6139b1565b82815281810190858301838502870184018810156130bb578586fd5b855b858110156130e0576130ce82613147565b845292840192908401906001016130bd565b5090979650505050505050565b600082601f8301126130fd578081fd5b8135602061310d61309a836139e2565b8281528181019085830183850287018401881015613129578586fd5b855b858110156130e05781358452928401929084019060010161312b565b803561ffff8116811461065e57600080fd5b60006020828403121561316a578081fd5b8135612a7881613b81565b60008060008060006060868803121561318c578081fd5b853561319781613b81565b9450602086013567ffffffffffffffff808211156131b3578283fd5b6131bf89838a01613038565b909650945060408801359150808211156131d7578283fd5b506131e488828901613038565b969995985093965092949392505050565b60008060408385031215613207578182fd5b823561321281613b81565b915060208301356fffffffffffffffffffffffffffffffff81168114613236578182fd5b809150509250929050565b60008060008060408587031215613256578384fd5b843567ffffffffffffffff8082111561326d578586fd5b61327988838901613038565b90965094506020870135915080821115613291578384fd5b5061329e87828801613038565b95989497509550505050565b6000806000806000806000806080898b0312156132c5578283fd5b883567ffffffffffffffff808211156132dc578485fd5b6132e88c838d01613038565b909a50985060208b0135915080821115613300578485fd5b61330c8c838d01613038565b909850965060408b0135915080821115613324578485fd5b6133308c838d01613038565b909650945060608b0135915080821115613348578384fd5b506133558b828c01613038565b999c989b5096995094979396929594505050565b6000806000806080858703121561337e578182fd5b843567ffffffffffffffff80821115613395578384fd5b6133a18883890161307a565b955060208701359150808211156133b6578384fd5b6133c2888389016130ed565b945060408701359150808211156133d7578384fd5b6133e38883890161307a565b935060608701359150808211156133f8578283fd5b50613405878288016130ed565b91505092959194509250565b600060208284031215613422578081fd5b8135612a7881613b96565b60006020828403121561343e578081fd5b8151612a7881613b96565b60006020828403121561345a578081fd5b5035919050565b60008060408385031215613473578182fd5b82359150602083013561323681613b81565b600060208284031215613496578081fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114612a78578182fd5b6000602082840312156134d6578081fd5b8151612a7881613b81565b6000806000604084860312156134f5578081fd5b833567ffffffffffffffff8082111561350c578283fd5b9085019060c0828803121561351f578283fd5b90935060208501359080821115613534578283fd5b818601915086601f830112613547578283fd5b813581811115613555578384fd5b876020828501011115613566578384fd5b6020830194508093505050509250925092565b60006020828403121561358a578081fd5b612a7882613147565b6000602082840312156135a4578081fd5b5051919050565b60008284526020808501945082825b858110156135e15761ffff6135ce83613147565b16875295820195908201906001016135ba565b509495945050505050565b60008284527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561361d578081fd5b6020830280836020870137939093016020019283525090919050565b6000815180845260208085019450808401835b838110156135e15781518752958201959082019060010161364c565b815160009082906020808601845b8381101561369657815161ffff1685529382019390820190600101613676565b50929695505050505050565b815160009082906020808601845b83811015613696578151855293820193908201906001016136b0565b60007f416363657373436f6e74726f6c3a206163636f756e742000000000000000000082528351613704816017850160208801613acd565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351613741816028840160208801613acd565b01602801949350505050565b6000604082526137616040830186886135ab565b82810360208401526137748185876135ab565b979650505050505050565b600060a0825261379360a083018b8d6135ab565b82810360208401526137a6818a8c6135ec565b905082810360408401526137bb81888a6135ab565b905082810360608401526137d08186886135ec565b9150508260808301529a9950505050505050505050565b600060a082526137fa60a0830188613639565b828103602084015261380c8188613639565b905082810360408401526138208187613639565b905082810360608401526138348186613639565b9150508260808301529695505050505050565b6000602082528251806020840152613866816040850160208701613acd565b601f01601f19169190910160400192915050565b600060408252833561388b81613b81565b6001600160a01b031660408301526138a66020850185613a06565b60c060608501526138bc610100850182846135ab565b9150506138cc6040860186613a06565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0808685030160808701526139028483856135ec565b93506139116060890189613a06565b93509150808685030160a087015261392a8484846135ab565b93506139396080890189613a06565b93509150808685030160c0870152506139538383836135ec565b60a0979097013560e0860152505050506020015290565b6000808335601e19843603018112613980578283fd5b83018035915067ffffffffffffffff82111561399a578283fd5b6020908101925081023603821315612cc057600080fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156139da576139da613b6b565b604052919050565b600067ffffffffffffffff8211156139fc576139fc613b6b565b5060209081020190565b6000808335601e19843603018112613a1c578283fd5b830160208101925035905067ffffffffffffffff811115613a3c57600080fd5b602081023603831315612cc057600080fd5b60006fffffffffffffffffffffffffffffffff808316818516808303821115613a7957613a79613b3f565b01949350505050565b60008219821115613a9557613a95613b3f565b500190565b600082613aa957613aa9613b55565b500490565b6000816000190483118215151615613ac857613ac8613b3f565b500290565b60005b83811015613ae8578181015183820152602001613ad0565b838111156122525750506000910152565b600081613b0857613b08613b3f565b506000190190565b6000600019821415613b2457613b24613b3f565b5060010190565b600082613b3a57613b3a613b55565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114612f0057600080fd5b8015158114612f0057600080fdfea26469706673582212207fe55d8ee0bbbc081cb32a26da1360a4a2d0ff6b1554f96a7593ceffe1acc44c64736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101b95760003560e01c80637eb6f6e1116100f9578063c6ba4c8111610097578063d2118a3211610071578063d2118a3214610443578063d3bd2cf514610457578063d547741f1461047e578063f698da2514610491576101b9565b8063c6ba4c811461040e578063caed350014610421578063ce1b815f14610432576101b9565b8063a217fddf116100d3578063a217fddf146103a3578063a7e30684146103ab578063b522ecff146103be578063bf5c3e9f146103d1576101b9565b80637eb6f6e114610321578063883295291461034857806391d148541461036c576101b9565b806336568abe11610166578063572b6c0511610140578063572b6c05146102b45780635b2c9bc4146102d65780636131bc4a146102e95780637c53ec4c1461030e576101b9565b806336568abe1461025a5780634513e1fe1461026d5780634d08cbc114610280576101b9565b80632cbb68c7116101975780632cbb68c71461022c5780632f2ff15d1461023f5780633408e47014610252576101b9565b806301ede9a7146101be57806301ffc9a7146101d3578063248a9ca3146101fb575b600080fd5b6101d16101cc366004613159565b610499565b005b6101e66101e1366004613485565b6105c8565b60405190151581526020015b60405180910390f35b61021e610209366004613449565b60009081526020819052604090206001015490565b6040519081526020016101f2565b6101d161023a3660046132aa565b610663565b6101d161024d366004613461565b610aa3565b61021e610ad0565b6101d1610268366004613461565b610ad5565b6101d161027b3660046134e1565b610b71565b61029361028e3660046131f5565b6110a4565b6040516fffffffffffffffffffffffffffffffff90911681526020016101f2565b6101e66102c2366004613159565b6003546001600160a01b0390811691161490565b61021e6102e4366004613369565b6110e3565b6005546001600160a01b03165b6040516001600160a01b0390911681526020016101f2565b6101d161031c366004613411565b6110fa565b61021e7f4acf49a75d600a594757b3a4cf06923667df023a4888b3ff7accc07a1fe8581f81565b61035b610356366004613241565b61119b565b6040516101f29594939291906137e7565b6101e661037a366004613461565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b61021e600081565b6101e6600554600160a01b900460ff1690565b6101d16103cc366004613159565b6114f4565b6102936103df3660046131f5565b60026020908152600092835260408084209091529082529020546fffffffffffffffffffffffffffffffff1681565b6101d161041c366004613175565b611619565b6001546001600160a01b03166102f6565b6003546001600160a01b03166102f6565b6005546101e690600160a01b900460ff1681565b61021e7ff0b465b2fd9a8eb309079c069118a26163974b82d09d2b1dafd9aef7692568e681565b6101d161048c366004613461565b6119e4565b61021e611a0c565b60006104ac816104a7611a65565b611a6f565b6001600160a01b0382166105075760405162461bcd60e51b815260206004820152601360248201527f57414c4c45545f5a45524f5f414444524553530000000000000000000000000060448201526064015b60405180910390fd5b6001546001600160a01b03838116911614156105655760405162461bcd60e51b815260206004820152601260248201527f57414c4c45545f414c52454144595f534554000000000000000000000000000060448201526064016104fe565b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0384169081179091556040517f48772ae5df5446cb5feef762e8204b7987ae4d5dd4a7082bc868da62cdafbdd890600090a25050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061065b57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b90505b919050565b7ff0b465b2fd9a8eb309079c069118a26163974b82d09d2b1dafd9aef7692568e6610690816104a7611a65565b610e106004546106a09190613a82565b42116106ee5760405162461bcd60e51b815260206004820152601660248201527f44454c41595f504552494f445f494e5f4546464543540000000000000000000060448201526064016104fe565b87861461073d5760405162461bcd60e51b815260206004820152601160248201527f494e56414c49445f4341545f494e50555400000000000000000000000000000060448201526064016104fe565b83821461078c5760405162461bcd60e51b815260206004820152601160248201527f494e56414c49445f47454d5f494e50555400000000000000000000000000000060448201526064016104fe565b61ffff8611156107de5760405162461bcd60e51b815260206004820152601860248201527f544f4f5f4d414e595f434154414c5953545f505249434553000000000000000060448201526064016104fe565b61ffff8211156108305760405162461bcd60e51b815260206004820152601360248201527f544f4f5f4d414e595f47454d5f5052494345530000000000000000000000000060448201526064016104fe565b60005b8881101561093d5760008a8a8381811061085d57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906108729190613579565b905061087d81611aed565b6108c95760405162461bcd60e51b815260206004820152600e60248201527f494e56414c49445f4341545f494400000000000000000000000000000000000060448201526064016104fe565b61ffff811660009081526006602090815260408083205460079092529091205588888381811061090957634e487b7160e01b600052603260045260246000fd5b61ffff909316600090815260066020908152604090912093029190910135909155508061093581613b10565b915050610833565b5060005b84811015610a4b57600086868381811061096b57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906109809190613579565b905061098b81611bb6565b6109d75760405162461bcd60e51b815260206004820152600e60248201527f494e56414c49445f47454d5f494400000000000000000000000000000000000060448201526064016104fe565b61ffff8116600090815260086020908152604080832054600990925290912055848483818110610a1757634e487b7160e01b600052603260045260246000fd5b61ffff9093166000908152600860209081526040909120930291909101359091555080610a4381613b10565b915050610941565b504260048190556040517fc9d599c84a31e2682b8d247a3a928d4d8fdbe782a60fb12496b0635e743b9bad91610a90918c918c918c918c918c918c918c918c9161377f565b60405180910390a1505050505050505050565b600082815260208190526040902060010154610ac1816104a7611a65565b610acb8383611c22565b505050565b465b90565b610add611a65565b6001600160a01b0316816001600160a01b031614610b635760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016104fe565b610b6d8282611cc1565b5050565b610b79611a65565b6001600160a01b0316610b8f6020850185613159565b6001600160a01b031614610be55760405162461bcd60e51b815260206004820152600e60248201527f494e56414c49445f53454e44455200000000000000000000000000000000000060448201526064016104fe565b600554600160a01b900460ff16610c3e5760405162461bcd60e51b815260206004820152601360248201527f53414e445f49535f4e4f545f454e41424c45440000000000000000000000000060448201526064016104fe565b610d89610c4e6020850185613159565b610c5b602086018661396a565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610c9a92505050604087018761396a565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610cd992505050606088018861396a565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610d1892505050608089018961396a565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020601f8c018190048102820181019092528a815260a08d0135935091508a908a9081908401838280828437600092019190915250611d5e92505050565b610dd55760405162461bcd60e51b815260206004820152601060248201527f494e56414c49445f50555243484153450000000000000000000000000000000060448201526064016104fe565b6000610edb610de7602086018661396a565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610e2692505050604087018761396a565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610e6592505050606088018861396a565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610ea492505050608089018961396a565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611f0192505050565b9050610eff610eed6020860186613159565b6005546001600160a01b031683612158565b610f92610f0f602086018661396a565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610f4e92505050604087018761396a565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610f8d925050506020880188613159565b612258565b611025610fa2606086018661396a565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610fe192505050608087018761396a565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611020925050506020880188613159565b612333565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001661105c6020860186613159565b6001600160a01b03167f88cf9250270a174fd21b12814284914b5a06288dea4adef8c253fa9ea0b00960868460405161109692919061387a565b60405180910390a350505050565b6001600160a01b03821660009081526002602090815260408083206fffffffffffffffffffffffffffffffff8086168552925290912054165b92915050565b60006110f185858585611f01565b95945050505050565b7ff0b465b2fd9a8eb309079c069118a26163974b82d09d2b1dafd9aef7692568e6611127816104a7611a65565b60058054831515600160a01b027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff9091161790556040517ff335ca6ebe8497478be43c9f42277776ba3e3a19eea1a0774d15ba9db1bd41c69061118f90841515815260200190565b60405180910390a15050565b606080606080600080600090506004546000146111c557610e106004546111c29190613a82565b90505b60008967ffffffffffffffff8111156111ee57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611217578160200160208202803683370190505b50905060008a67ffffffffffffffff81111561124357634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561126c578160200160208202803683370190505b50905060008967ffffffffffffffff81111561129857634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156112c1578160200160208202803683370190505b50905060008a67ffffffffffffffff8111156112ed57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611316578160200160208202803683370190505b50905060005b8d8110156113fb5760008f8f8381811061134657634e487b7160e01b600052603260045260246000fd5b905060200201602081019061135b9190613579565b61ffff811660009081526007602052604090205487519192509087908490811061139557634e487b7160e01b600052603260045260246000fd5b602002602001018181525050600660008261ffff1661ffff168152602001908152602001600020548583815181106113dd57634e487b7160e01b600052603260045260246000fd5b602090810291909101015250806113f381613b10565b91505061131c565b5060005b8b8110156114de5760008d8d8381811061142957634e487b7160e01b600052603260045260246000fd5b905060200201602081019061143e9190613579565b61ffff811660009081526009602052604090205485519192509085908490811061147857634e487b7160e01b600052603260045260246000fd5b602002602001018181525050600860008261ffff1661ffff168152602001908152602001600020548383815181106114c057634e487b7160e01b600052603260045260246000fd5b602090810291909101015250806114d681613b10565b9150506113ff565b50929d919c509a50909850909650945050505050565b6000611502816104a7611a65565b6001600160a01b0382166115585760405162461bcd60e51b815260206004820152601360248201527f57414c4c45545f5a45524f5f414444524553530000000000000000000000000060448201526064016104fe565b6005546001600160a01b03838116911614156115b65760405162461bcd60e51b815260206004820152601260248201527f57414c4c45545f414c52454144595f534554000000000000000000000000000060448201526064016104fe565b600580547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0384169081179091556040517f36bd24528fb590ed70f3d60ee66c142cdf4cfddb960c8ca95491e15756464afd90600090a25050565b6000611627816104a7611a65565b60646116338386613a82565b11156116815760405162461bcd60e51b815260206004820152600c60248201527f544f4f5f4d414e595f494453000000000000000000000000000000000000000060448201526064016104fe565b6001600160a01b0386166116d75760405162461bcd60e51b815260206004820152600c60248201527f5a45524f5f41444452455353000000000000000000000000000000000000000060448201526064016104fe565b60005b8481101561183557600086868381811061170457634e487b7160e01b600052603260045260246000fd5b90506020020160208101906117199190613579565b905061172481611aed565b6117705760405162461bcd60e51b815260206004820152601360248201527f494e56414c49445f434154414c5953545f49440000000000000000000000000060448201526064016104fe565b600061177b8261240e565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529091506000906001600160a01b038316906370a082319060240160206040518083038186803b1580156117d957600080fd5b505afa1580156117ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118119190613593565b905061181f82308c846124c6565b505050808061182d90613b10565b9150506116da565b5060005b8281101561199457600084848381811061186357634e487b7160e01b600052603260045260246000fd5b90506020020160208101906118789190613579565b905061188381611bb6565b6118cf5760405162461bcd60e51b815260206004820152600e60248201527f494e56414c49445f47454d5f494400000000000000000000000000000000000060448201526064016104fe565b60006118da8261259c565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529091506000906001600160a01b038316906370a082319060240160206040518083038186803b15801561193857600080fd5b505afa15801561194c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119709190613593565b905061197e82308c84612608565b505050808061198c90613b10565b915050611839565b50856001600160a01b03167f82c2527369e946c0503dcd68b2410afcba8d1d211bd6673531481d2bc38a47df868686866040516119d4949392919061374d565b60405180910390a2505050505050565b600082815260208190526040902060010154611a02816104a7611a65565b610acb8383611cc1565b6000611a166126de565b905090565b6003546000906001600160a01b0316331415611a5e57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c610ad2565b5033610ad2565b6000611a16611a1b565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610b6d57611aab816001600160a01b03166014612809565b611ab6836020612809565b604051602001611ac79291906136cc565b60408051601f198184030181529082905262461bcd60e51b82526104fe91600401613847565b6040517fc056975800000000000000000000000000000000000000000000000000000000815261ffff821660048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c0569758906024015b60206040518083038186803b158015611b6d57600080fd5b505afa158015611b81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba5919061342d565b801561065b57505061ffff16151590565b6040517f141376f900000000000000000000000000000000000000000000000000000000815261ffff821660048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063141376f990602401611b55565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610b6d576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055611c7d611a65565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1615610b6d576000828152602081815260408083206001600160a01b03851684529091529020805460ff19169055611d1a611a65565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6000611d6a8884612a7f565b611db65760405162461bcd60e51b815260206004820152600d60248201527f494e56414c49445f4e4f4e43450000000000000000000000000000000000000060448201526064016104fe565b6000611ed47f4acf49a75d600a594757b3a4cf06923667df023a4888b3ff7accc07a1fe8581f8a8a604051602001611dee9190613668565b604051602081830303815290604052805190602001208a604051602001611e1591906136a2565b604051602081830303815290604052805190602001208a604051602001611e3c9190613668565b604051602081830303815290604052805190602001208a604051602001611e6391906136a2565b60408051601f198184030181528282528051602091820120908301979097526001600160a01b03909516948101949094526060840192909252608083015260a082015260c081019190915260e081018690526101000160405160208183030381529060405280519060200120612b88565b90506000611ee28285612bf1565b6001546001600160a01b039081169116149a9950505050505050505050565b60008351855114611f545760405162461bcd60e51b815260206004820152601160248201527f494e56414c49445f4341545f494e50555400000000000000000000000000000060448201526064016104fe565b8151835114611fa55760405162461bcd60e51b815260206004820152601160248201527f494e56414c49445f47454d5f494e50555400000000000000000000000000000060448201526064016104fe565b6000611faf612c15565b90506000805b875181101561207f576000888281518110611fe057634e487b7160e01b600052603260045260246000fd5b60200260200101519050600088838151811061200c57634e487b7160e01b600052603260045260246000fd5b602002602001015190508461203f5761ffff821660009081526007602052604090205461203a908290613aae565b61205e565b61ffff821660009081526006602052604090205461205e908290613aae565b6120689085613a82565b93505050808061207790613b10565b915050611fb5565b5060005b855181101561214d5760008682815181106120ae57634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008683815181106120da57634e487b7160e01b600052603260045260246000fd5b602002602001015190508461210d5761ffff8216600090815260096020526040902054612108908290613aae565b61212c565b61ffff821660009081526008602052604090205461212c908290613aae565b6121369085613a82565b93505050808061214590613b10565b915050612083565b509695505050505050565b6040516323b872dd60e01b81526001600160a01b03848116600483015283811660248301526044820183905282917f0000000000000000000000000000000000000000000000000000000000000000909116906323b872dd90606401602060405180830381600087803b1580156121ce57600080fd5b505af11580156121e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612206919061342d565b6122525760405162461bcd60e51b815260206004820152601760248201527f5041594d454e545f5452414e534645525f4641494c454400000000000000000060448201526064016104fe565b50505050565b60005b835181101561225257600084828151811061228657634e487b7160e01b600052603260045260246000fd5b6020026020010151905061229981611aed565b6122e55760405162461bcd60e51b815260206004820152601360248201527f494e56414c49445f434154414c5953545f49440000000000000000000000000060448201526064016104fe565b6123206122f18261240e565b308587868151811061231357634e487b7160e01b600052603260045260246000fd5b60200260200101516124c6565b508061232b81613b10565b91505061225b565b60005b835181101561225257600084828151811061236157634e487b7160e01b600052603260045260246000fd5b6020026020010151905061237481611bb6565b6123c05760405162461bcd60e51b815260206004820152600e60248201527f494e56414c49445f47454d5f494400000000000000000000000000000000000060448201526064016104fe565b6123fb6123cc8261259c565b30858786815181106123ee57634e487b7160e01b600052603260045260246000fd5b6020026020010151612608565b508061240681613b10565b915050612336565b6040517fe8a0806600000000000000000000000000000000000000000000000000000000815261ffff821660048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e8a08066906024015b60206040518083038186803b15801561248e57600080fd5b505afa1580156124a2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065b91906134c5565b6040516323b872dd60e01b81526001600160a01b0384811660048301528381166024830152604482018390528516906323b872dd90606401602060405180830381600087803b15801561251857600080fd5b505af115801561252c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612550919061342d565b6122525760405162461bcd60e51b815260206004820152601860248201527f434154414c5953545f5452414e534645525f4641494c4544000000000000000060448201526064016104fe565b6040517f786325dd00000000000000000000000000000000000000000000000000000000815261ffff821660048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063786325dd90602401612476565b6040516323b872dd60e01b81526001600160a01b0384811660048301528381166024830152604482018390528516906323b872dd90606401602060405180830381600087803b15801561265a57600080fd5b505af115801561266e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612692919061342d565b6122525760405162461bcd60e51b815260206004820152601360248201527f47454d5f5452414e534645525f4641494c45440000000000000000000000000060448201526064016104fe565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561273757507f000000000000000000000000000000000000000000000000000000000000000046145b1561276357507f0000000000000000000000000000000000000000000000000000000000000000610ad2565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c09092019092528051910120610ad2565b60606000612818836002613aae565b612823906002613a82565b67ffffffffffffffff81111561284957634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612873576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106128b857634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061292957634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000612965846002613aae565b612970906001613a82565b90505b6001811115612a29577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106129bf57634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106129e357634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93612a2281613af9565b9050612973565b508315612a785760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104fe565b9392505050565b600080612a9d70010000000000000000000000000000000084613a9a565b90506000612abc70010000000000000000000000000000000085613b2b565b6001600160a01b03861660009081526002602090815260408083206fffffffffffffffffffffffffffffffff8088168552925290912054919250908116908216811415612b7c57612b0e816001613a4e565b6001600160a01b03871660009081526002602090815260408083206fffffffffffffffffffffffffffffffff9788168452909152902080547fffffffffffffffffffffffffffffffff0000000000000000000000000000000016919094161790925550600191506110dd9050565b50600095945050505050565b600061065b612b956126de565b836040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000612c008585612c57565b91509150612c0d81612cc7565b509392505050565b60008060045460001415612c2b57506001611a16565b610e10600454612c3b9190613a82565b421115612c4f575060006004556001611a16565b506000905090565b600080825160411415612c8e5760208301516040840151606085015160001a612c8287828585612f03565b94509450505050612cc0565b825160401415612cb85760208301516040840151612cad868383612ff0565b935093505050612cc0565b506000905060025b9250929050565b6000816004811115612ce957634e487b7160e01b600052602160045260246000fd5b1415612cf457612f00565b6001816004811115612d1657634e487b7160e01b600052602160045260246000fd5b1415612d645760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016104fe565b6002816004811115612d8657634e487b7160e01b600052602160045260246000fd5b1415612dd45760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016104fe565b6003816004811115612df657634e487b7160e01b600052602160045260246000fd5b1415612e6a5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016104fe565b6004816004811115612e8c57634e487b7160e01b600052602160045260246000fd5b1415612f005760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016104fe565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612f3a5750600090506003612fe7565b8460ff16601b14158015612f5257508460ff16601c14155b15612f635750600090506004612fe7565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612fb7573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612fe057600060019250925050612fe7565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831660ff84901c601b0161302a87828885612f03565b935093505050935093915050565b60008083601f840112613049578182fd5b50813567ffffffffffffffff811115613060578182fd5b6020830191508360208083028501011115612cc057600080fd5b600082601f83011261308a578081fd5b8135602061309f61309a836139e2565b6139b1565b82815281810190858301838502870184018810156130bb578586fd5b855b858110156130e0576130ce82613147565b845292840192908401906001016130bd565b5090979650505050505050565b600082601f8301126130fd578081fd5b8135602061310d61309a836139e2565b8281528181019085830183850287018401881015613129578586fd5b855b858110156130e05781358452928401929084019060010161312b565b803561ffff8116811461065e57600080fd5b60006020828403121561316a578081fd5b8135612a7881613b81565b60008060008060006060868803121561318c578081fd5b853561319781613b81565b9450602086013567ffffffffffffffff808211156131b3578283fd5b6131bf89838a01613038565b909650945060408801359150808211156131d7578283fd5b506131e488828901613038565b969995985093965092949392505050565b60008060408385031215613207578182fd5b823561321281613b81565b915060208301356fffffffffffffffffffffffffffffffff81168114613236578182fd5b809150509250929050565b60008060008060408587031215613256578384fd5b843567ffffffffffffffff8082111561326d578586fd5b61327988838901613038565b90965094506020870135915080821115613291578384fd5b5061329e87828801613038565b95989497509550505050565b6000806000806000806000806080898b0312156132c5578283fd5b883567ffffffffffffffff808211156132dc578485fd5b6132e88c838d01613038565b909a50985060208b0135915080821115613300578485fd5b61330c8c838d01613038565b909850965060408b0135915080821115613324578485fd5b6133308c838d01613038565b909650945060608b0135915080821115613348578384fd5b506133558b828c01613038565b999c989b5096995094979396929594505050565b6000806000806080858703121561337e578182fd5b843567ffffffffffffffff80821115613395578384fd5b6133a18883890161307a565b955060208701359150808211156133b6578384fd5b6133c2888389016130ed565b945060408701359150808211156133d7578384fd5b6133e38883890161307a565b935060608701359150808211156133f8578283fd5b50613405878288016130ed565b91505092959194509250565b600060208284031215613422578081fd5b8135612a7881613b96565b60006020828403121561343e578081fd5b8151612a7881613b96565b60006020828403121561345a578081fd5b5035919050565b60008060408385031215613473578182fd5b82359150602083013561323681613b81565b600060208284031215613496578081fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114612a78578182fd5b6000602082840312156134d6578081fd5b8151612a7881613b81565b6000806000604084860312156134f5578081fd5b833567ffffffffffffffff8082111561350c578283fd5b9085019060c0828803121561351f578283fd5b90935060208501359080821115613534578283fd5b818601915086601f830112613547578283fd5b813581811115613555578384fd5b876020828501011115613566578384fd5b6020830194508093505050509250925092565b60006020828403121561358a578081fd5b612a7882613147565b6000602082840312156135a4578081fd5b5051919050565b60008284526020808501945082825b858110156135e15761ffff6135ce83613147565b16875295820195908201906001016135ba565b509495945050505050565b60008284527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561361d578081fd5b6020830280836020870137939093016020019283525090919050565b6000815180845260208085019450808401835b838110156135e15781518752958201959082019060010161364c565b815160009082906020808601845b8381101561369657815161ffff1685529382019390820190600101613676565b50929695505050505050565b815160009082906020808601845b83811015613696578151855293820193908201906001016136b0565b60007f416363657373436f6e74726f6c3a206163636f756e742000000000000000000082528351613704816017850160208801613acd565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351613741816028840160208801613acd565b01602801949350505050565b6000604082526137616040830186886135ab565b82810360208401526137748185876135ab565b979650505050505050565b600060a0825261379360a083018b8d6135ab565b82810360208401526137a6818a8c6135ec565b905082810360408401526137bb81888a6135ab565b905082810360608401526137d08186886135ec565b9150508260808301529a9950505050505050505050565b600060a082526137fa60a0830188613639565b828103602084015261380c8188613639565b905082810360408401526138208187613639565b905082810360608401526138348186613639565b9150508260808301529695505050505050565b6000602082528251806020840152613866816040850160208701613acd565b601f01601f19169190910160400192915050565b600060408252833561388b81613b81565b6001600160a01b031660408301526138a66020850185613a06565b60c060608501526138bc610100850182846135ab565b9150506138cc6040860186613a06565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0808685030160808701526139028483856135ec565b93506139116060890189613a06565b93509150808685030160a087015261392a8484846135ab565b93506139396080890189613a06565b93509150808685030160c0870152506139538383836135ec565b60a0979097013560e0860152505050506020015290565b6000808335601e19843603018112613980578283fd5b83018035915067ffffffffffffffff82111561399a578283fd5b6020908101925081023603821315612cc057600080fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156139da576139da613b6b565b604052919050565b600067ffffffffffffffff8211156139fc576139fc613b6b565b5060209081020190565b6000808335601e19843603018112613a1c578283fd5b830160208101925035905067ffffffffffffffff811115613a3c57600080fd5b602081023603831315612cc057600080fd5b60006fffffffffffffffffffffffffffffffff808316818516808303821115613a7957613a79613b3f565b01949350505050565b60008219821115613a9557613a95613b3f565b500190565b600082613aa957613aa9613b55565b500490565b6000816000190483118215151615613ac857613ac8613b3f565b500290565b60005b83811015613ae8578181015183820152602001613ad0565b838111156122525750506000910152565b600081613b0857613b08613b3f565b506000190190565b6000600019821415613b2457613b24613b3f565b5060010190565b600082613b3a57613b3a613b55565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114612f0057600080fd5b8015158114612f0057600080fdfea26469706673582212207fe55d8ee0bbbc081cb32a26da1360a4a2d0ff6b1554f96a7593ceffe1acc44c64736f6c63430008020033",
  "devdoc": {
    "details": "DEFAULT_ADMIN_ROLE is intended for contract setup / emergency, STARTERPACK_ROLE is provided for business purposes",
    "kind": "dev",
    "methods": {
      "calculateTotalPriceInSAND(uint16[],uint256[],uint16[],uint256[])": {
        "params": {
          "catalystIds": "An array of catalyst IDs to be purchased",
          "catalystQuantities": "An array of catalyst amounts to be purchased",
          "gemIds": "An array of gem IDs to be purchased",
          "gemQuantities": "An array of gem amounts to be purchased"
        },
        "returns": {
          "_0": "the total price to pay in SAND for the cats and gems in the bundle"
        }
      },
      "getNonceByBuyer(address,uint128)": {
        "params": {
          "_buyer": "The address of the starterPack purchaser",
          "_queueId": "The ID of the nonce queue for the given address. The default is queueID=0, and the max is queueID=2**128-1"
        },
        "returns": {
          "_0": "uint128 representing the requested nonce"
        }
      },
      "getPrices(uint16[],uint16[])": {
        "params": {
          "catalystIds": "The IDs of the catalysts you want to obtain price information for",
          "gemIds": "The IDs of the gems you want to obtain price information for"
        },
        "returns": {
          "_0": "catalystPricesBeforeSwitch Catalyst prices before price change",
          "_1": "catalystPricesAfterSwitch Catalyst prices after price change",
          "_2": "gemPricesBeforeSwitch Gem prices before price change",
          "_3": "gemPricesAfterSwitch Gem prices after price change",
          "_4": "switchTime The time the latest price change will take effect, being the time of the price change plus the price change delay"
        }
      },
      "getReceivingWallet()": {
        "returns": {
          "_0": "the address of the receiving wallet"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getSigningWallet()": {
        "returns": {
          "_0": "_signingWallet the address of the signing wallet"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isSANDEnabled()": {
        "returns": {
          "_0": "Whether SAND payments are enabled"
        }
      },
      "purchaseWithSAND((address,uint16[],uint256[],uint16[],uint256[],uint256),bytes)": {
        "params": {
          "message": "A message containing information about the Catalysts and Gems to be purchased together with the destination (buyer) and a nonce",
          "signature": "A signed message specifying tx details"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setPrices(uint16[],uint256[],uint16[],uint256[])": {
        "params": {
          "catalystIds": "Array of catalyst IDs for which new prices will take effect after a delay period",
          "catalystPrices": "Array of new catalyst prices that will take effect after a delay period",
          "gemIds": "Array of gem IDs for which new prices will take effect after a delay period",
          "gemPrices": "Array of new gems prices that will take effect after a delay period"
        }
      },
      "setReceivingWallet(address)": {
        "params": {
          "newReceivingWallet": "Address of the new receiving wallet"
        }
      },
      "setSANDEnabled(bool)": {
        "details": "Enable / disable the specific SAND payment for StarterPacks",
        "params": {
          "enabled": "Whether to enable or disable"
        }
      },
      "setSigningWallet(address)": {
        "params": {
          "newSigningWallet": "The new address of the signing wallet"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "withdrawAll(address,uint16[],uint16[])": {
        "details": "The sum length of catalystIds + gemIds must be <= MAX_WITHDRAWAL",
        "params": {
          "catalystIds": "The IDs of the catalysts to be transferred",
          "gemIds": "The IDs of the gems to be transferred",
          "to": "The destination address for the purchased Catalysts and Gems"
        }
      }
    },
    "title": "StarterPack contract for the purchase of StarterPacks (bundles of Catalysts and Gems) with EIP712",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "calculateTotalPriceInSAND(uint16[],uint256[],uint16[],uint256[])": {
        "notice": "Verify the total expected price to pay in SAND"
      },
      "domainSeparator()": {
        "notice": "Function to get the domain separator"
      },
      "getChainId()": {
        "notice": "Function to get the chainId"
      },
      "getNonceByBuyer(address,uint128)": {
        "notice": "Function to get the nonce for a given address and queue ID"
      },
      "getPrices(uint16[],uint16[])": {
        "notice": "Get current StarterPack prices for catalysts and gems by id"
      },
      "getReceivingWallet()": {
        "notice": "Get the beneficiary wallet."
      },
      "getSigningWallet()": {
        "notice": "Get the wallet authorized for signing purchase-messages."
      },
      "isSANDEnabled()": {
        "notice": "Return whether SAND payments are enabled"
      },
      "purchaseWithSAND((address,uint16[],uint256[],uint16[],uint256[],uint256),bytes)": {
        "notice": "Purchase StarterPacks with SAND"
      },
      "setPrices(uint16[],uint256[],uint16[],uint256[])": {
        "notice": "Enables admin to change the prices (in SAND) of the catalysts and gems in the StarterPack bundle"
      },
      "setReceivingWallet(address)": {
        "notice": "Set the wallet receiving the proceeds"
      },
      "setSigningWallet(address)": {
        "notice": "Update the signing wallet address"
      },
      "withdrawAll(address,uint16[],uint16[])": {
        "notice": "Enables admin to withdraw any remaining tokens"
      }
    },
    "notice": "This contract enables purchases with SAND when the backend authorizes it via message signingThe following privileged roles are used in StarterPackV2: DEFAULT_ADMIN_ROLE, STARTERPACK_ROLE",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2418,
        "contract": "src/solc_0.8/StarterPack/StarterPackV2.sol:StarterPackV2",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)2413_storage)"
      },
      {
        "astId": 17772,
        "contract": "src/solc_0.8/StarterPack/StarterPackV2.sol:StarterPackV2",
        "label": "_signingWallet",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 17778,
        "contract": "src/solc_0.8/StarterPack/StarterPackV2.sol:StarterPackV2",
        "label": "queuedNonces",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_uint128,t_uint128))"
      },
      {
        "astId": 33852,
        "contract": "src/solc_0.8/StarterPack/StarterPackV2.sol:StarterPackV2",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 18077,
        "contract": "src/solc_0.8/StarterPack/StarterPackV2.sol:StarterPackV2",
        "label": "_priceChangeTimestamp",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 18088,
        "contract": "src/solc_0.8/StarterPack/StarterPackV2.sol:StarterPackV2",
        "label": "_wallet",
        "offset": 0,
        "slot": "5",
        "type": "t_address_payable"
      },
      {
        "astId": 18090,
        "contract": "src/solc_0.8/StarterPack/StarterPackV2.sol:StarterPackV2",
        "label": "_sandEnabled",
        "offset": 20,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 18094,
        "contract": "src/solc_0.8/StarterPack/StarterPackV2.sol:StarterPackV2",
        "label": "_catalystPrices",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint16,t_uint256)"
      },
      {
        "astId": 18098,
        "contract": "src/solc_0.8/StarterPack/StarterPackV2.sol:StarterPackV2",
        "label": "_catalystPreviousPrices",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint16,t_uint256)"
      },
      {
        "astId": 18102,
        "contract": "src/solc_0.8/StarterPack/StarterPackV2.sol:StarterPackV2",
        "label": "_gemPrices",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint16,t_uint256)"
      },
      {
        "astId": 18106,
        "contract": "src/solc_0.8/StarterPack/StarterPackV2.sol:StarterPackV2",
        "label": "_gemPreviousPrices",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint16,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint128,t_uint128))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint128 => uint128))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint128,t_uint128)"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)2413_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)2413_storage"
      },
      "t_mapping(t_uint128,t_uint128)": {
        "encoding": "mapping",
        "key": "t_uint128",
        "label": "mapping(uint128 => uint128)",
        "numberOfBytes": "32",
        "value": "t_uint128"
      },
      "t_mapping(t_uint16,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(RoleData)2413_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 2410,
            "contract": "src/solc_0.8/StarterPack/StarterPackV2.sol:StarterPackV2",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 2412,
            "contract": "src/solc_0.8/StarterPack/StarterPackV2.sol:StarterPackV2",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}