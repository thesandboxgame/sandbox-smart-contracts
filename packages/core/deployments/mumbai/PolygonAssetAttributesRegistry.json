{
  "address": "0x393656aDc04B3D14B32Ca4BF9d5B60F87e5caaF1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract GemsCatalystsRegistry",
          "name": "gemsCatalystsRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "upgrader",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "catalystId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16[]",
          "name": "gemIds",
          "type": "uint16[]"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "blockNumber",
          "type": "uint64"
        }
      ],
      "name": "CatalystApplied",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16[]",
          "name": "gemIds",
          "type": "uint16[]"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "blockNumber",
          "type": "uint64"
        }
      ],
      "name": "GemsAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldMinter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newMinter",
          "type": "address"
        }
      ],
      "name": "MinterChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldUpgrader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newUpgrader",
          "type": "address"
        }
      ],
      "name": "UpgraderChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        },
        {
          "internalType": "uint16[]",
          "name": "gemIds",
          "type": "uint16[]"
        }
      ],
      "name": "addGems",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "changeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newMinter",
          "type": "address"
        }
      ],
      "name": "changeMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newUpgrader",
          "type": "address"
        }
      ],
      "name": "changeUpgrader",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint16[]",
              "name": "gemIds",
              "type": "uint16[]"
            },
            {
              "internalType": "bytes32",
              "name": "blockHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IAssetAttributesRegistry.GemEvent[]",
          "name": "events",
          "type": "tuple[]"
        }
      ],
      "name": "getAttributes",
      "outputs": [
        {
          "internalType": "uint32[]",
          "name": "values",
          "type": "uint32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCatalystRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        }
      ],
      "name": "getRecord",
      "outputs": [
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        },
        {
          "internalType": "uint16",
          "name": "catalystId",
          "type": "uint16"
        },
        {
          "internalType": "uint16[]",
          "name": "gemIds",
          "type": "uint16[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUpgrader",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "migrationContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "overLayerDepositor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "catalystId",
          "type": "uint16"
        },
        {
          "internalType": "uint16[]",
          "name": "gemIds",
          "type": "uint16[]"
        }
      ],
      "name": "setCatalyst",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "catalystId",
          "type": "uint16"
        },
        {
          "internalType": "uint16[]",
          "name": "gemIds",
          "type": "uint16[]"
        }
      ],
      "name": "setCatalystWhenDepositOnOtherLayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "catalystId",
          "type": "uint16"
        },
        {
          "internalType": "uint16[]",
          "name": "gemIds",
          "type": "uint16[]"
        },
        {
          "internalType": "uint64",
          "name": "blockNumber",
          "type": "uint64"
        }
      ],
      "name": "setCatalystWithBlockNumber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_migrationContract",
          "type": "address"
        }
      ],
      "name": "setMigrationContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbd1d7ddfd4ac4c5ccfc0df7a72c80f2ba9c2ecd6d71fd4167b3ce293e4dad986",
  "receipt": {
    "to": null,
    "from": "0x5F890c9522dCE5670d741D4277BFCC2d9cA8Af02",
    "contractAddress": "0x393656aDc04B3D14B32Ca4BF9d5B60F87e5caaF1",
    "transactionIndex": 2,
    "gasUsed": "1672649",
    "logsBloom": "0x
    "blockHash": "0x873f2431191259a53a253712075ea40322622ad77480ffb2f1662280e1ce4e81",
    "transactionHash": "0xbd1d7ddfd4ac4c5ccfc0df7a72c80f2ba9c2ecd6d71fd4167b3ce293e4dad986",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 27565180,
        "transactionHash": "0xbd1d7ddfd4ac4c5ccfc0df7a72c80f2ba9c2ecd6d71fd4167b3ce293e4dad986",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000005d56840391547800000000000000000000000000000000000000000000000002c3da05e2bcded100000000000000000000000000000000000000000000138135c571a1aa75c55600000000000000000000000000000000000000000000000002668381df2b8a590000000000000000000000000000000000000000000013813622c825ae0719ce",
        "logIndex": 9,
        "blockHash": "0x873f2431191259a53a253712075ea40322622ad77480ffb2f1662280e1ce4e81"
      }
    ],
    "blockNumber": 27565180,
    "cumulativeGasUsed": "1988374",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xdDD37BE9b8B5C5DaF7E4f4cB0BBf354Bc956042f",
    "0x49c4D4C94829B9c44052C5f5Cb164Fc612181165",
    "0x49c4D4C94829B9c44052C5f5Cb164Fc612181165",
    "0x49c4D4C94829B9c44052C5f5Cb164Fc612181165"
  ],
  "numDeployments": 1,
  "solcInputHash": "65e08b938528b163bea66d16d1e23da8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract GemsCatalystsRegistry\",\"name\":\"gemsCatalystsRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"upgrader\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"catalystId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16[]\",\"name\":\"gemIds\",\"type\":\"uint16[]\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"blockNumber\",\"type\":\"uint64\"}],\"name\":\"CatalystApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16[]\",\"name\":\"gemIds\",\"type\":\"uint16[]\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"blockNumber\",\"type\":\"uint64\"}],\"name\":\"GemsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldMinter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"MinterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldUpgrader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newUpgrader\",\"type\":\"address\"}],\"name\":\"UpgraderChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint16[]\",\"name\":\"gemIds\",\"type\":\"uint16[]\"}],\"name\":\"addGems\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"changeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newUpgrader\",\"type\":\"address\"}],\"name\":\"changeUpgrader\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16[]\",\"name\":\"gemIds\",\"type\":\"uint16[]\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IAssetAttributesRegistry.GemEvent[]\",\"name\":\"events\",\"type\":\"tuple[]\"}],\"name\":\"getAttributes\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"values\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCatalystRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"getRecord\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"catalystId\",\"type\":\"uint16\"},{\"internalType\":\"uint16[]\",\"name\":\"gemIds\",\"type\":\"uint16[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUpgrader\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"overLayerDepositor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"catalystId\",\"type\":\"uint16\"},{\"internalType\":\"uint16[]\",\"name\":\"gemIds\",\"type\":\"uint16[]\"}],\"name\":\"setCatalyst\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"catalystId\",\"type\":\"uint16\"},{\"internalType\":\"uint16[]\",\"name\":\"gemIds\",\"type\":\"uint16[]\"}],\"name\":\"setCatalystWhenDepositOnOtherLayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"catalystId\",\"type\":\"uint16\"},{\"internalType\":\"uint16[]\",\"name\":\"gemIds\",\"type\":\"uint16[]\"},{\"internalType\":\"uint64\",\"name\":\"blockNumber\",\"type\":\"uint64\"}],\"name\":\"setCatalystWithBlockNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_migrationContract\",\"type\":\"address\"}],\"name\":\"setMigrationContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addGems(uint256,uint16[])\":{\"params\":{\"assetId\":\"id of the asset\",\"gemIds\":\"list of gems ids to set\"}},\"changeAdmin(address)\":{\"details\":\"Change the administrator to be `newAdmin`.\",\"params\":{\"newAdmin\":\"The address of the new administrator.\"}},\"changeMinter(address)\":{\"details\":\"Change the minter to be `newMinter`.\",\"params\":{\"newMinter\":\"The address of the new minter.\"}},\"changeUpgrader(address)\":{\"details\":\"Change the upgrader to be `newUpgrader`.\",\"params\":{\"newUpgrader\":\"The address of the new upgrader.\"}},\"constructor\":{\"params\":{\"admin\":\": for setting the migration contract address\",\"gemsCatalystsRegistry\":\": GemsCatalystsRegistry for fetching attributes\",\"minter\":\": allowed to set gems and catalysts for a given asset\"}},\"getAdmin()\":{\"details\":\"Get the current administrator of this contract.\",\"returns\":{\"_0\":\"The current administrator of this contract.\"}},\"getAttributes(uint256,(uint16[],bytes32)[])\":{\"params\":{\"assetId\":\"id of the asset\"},\"returns\":{\"values\":\"The array of values(256) requested.\"}},\"getMinter()\":{\"details\":\"Get the current minter of this contract.\",\"returns\":{\"_0\":\"The current minter of this contract.\"}},\"getRecord(uint256)\":{\"params\":{\"assetId\":\"id of the asset\"}},\"getUpgrader()\":{\"details\":\"Get the current upgrader of this contract.\",\"returns\":{\"_0\":\"The current upgrader of this contract.\"}},\"setCatalyst(uint256,uint16,uint16[])\":{\"params\":{\"assetId\":\"id of the asset\",\"catalystId\":\"id of the catalyst to set\",\"gemIds\":\"list of gems ids to set\"}},\"setCatalystWhenDepositOnOtherLayer(uint256,uint16,uint16[])\":{\"params\":{\"assetId\":\"id of the asset\",\"catalystId\":\"id of the catalyst to set\",\"gemIds\":\"list of gems ids to set\"}},\"setCatalystWithBlockNumber(uint256,uint16,uint16[],uint64)\":{\"params\":{\"assetId\":\"id of the asset\",\"blockNumber\":\"block number\",\"catalystId\":\"id of the catalyst to set\",\"gemIds\":\"list of gems ids to set\"}},\"setMigrationContract(address)\":{\"params\":{\"_migrationContract\":\"address of the migration contract\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addGems(uint256,uint16[])\":{\"notice\":\"adds gems to an existing list of gems of an asset, upgrader only\"},\"constructor\":{\"notice\":\"AssetAttributesRegistry depends on\"},\"getAttributes(uint256,(uint16[],bytes32)[])\":{\"notice\":\"getAttributes\"},\"getRecord(uint256)\":{\"notice\":\"get the record data (catalyst id, gems ids list) for an asset id\"},\"setCatalyst(uint256,uint16,uint16[])\":{\"notice\":\"sets the catalyst and gems for an asset, minter only\"},\"setCatalystWhenDepositOnOtherLayer(uint256,uint16,uint16[])\":{\"notice\":\"sets the catalyst and gems when an asset goes over layers\"},\"setCatalystWithBlockNumber(uint256,uint16,uint16[],uint64)\":{\"notice\":\"sets the catalyst and gems for an asset for a given block number, migration contract only\"},\"setMigrationContract(address)\":{\"notice\":\"set the migration contract address, admin or migration contract only\"}},\"notice\":\"Allows setting the gems and catalysts of an asset\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/solc_0.8/asset/AssetAttributesRegistry.sol\":\"AssetAttributesRegistry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-0.8/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x64bb2dbe7ec4fcadb2f163f41edf6f2e1cd8f16162f7a56c2581894e6ba0747c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcd98895383d51dc86669a76ae3ad4419fc5dc079d01faea23498e80c1cf9f78a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"src/solc_0.8/asset/AssetAttributesRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-0.8/utils/Context.sol\\\";\\nimport \\\"../catalyst/GemsCatalystsRegistry.sol\\\";\\nimport \\\"../common/BaseWithStorage/WithAdmin.sol\\\";\\nimport \\\"../common/BaseWithStorage/WithMinter.sol\\\";\\nimport \\\"../common/BaseWithStorage/WithUpgrader.sol\\\";\\n\\n/// @notice Allows setting the gems and catalysts of an asset\\ncontract AssetAttributesRegistry is WithMinter, WithUpgrader, IAssetAttributesRegistry, Context {\\n    uint256 internal constant MAX_NUM_GEMS = 15;\\n    uint256 private constant IS_NFT = 0x0000000000000000000000000000000000000000800000000000000000000000;\\n    uint256 private constant NOT_IS_NFT = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFFFFFFFFFFF;\\n    uint256 private constant NOT_NFT_INDEX = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800000007FFFFFFFFFFFFFFF;\\n\\n    GemsCatalystsRegistry internal immutable _gemsCatalystsRegistry;\\n    mapping(uint256 => Record) internal _records;\\n\\n    // used to allow migration to specify blockNumber when setting catalyst/gems\\n    address public migrationContract;\\n    // used to to set catalyst without burning actual ERC20 (cross layer deposit)\\n    address public overLayerDepositor;\\n\\n    struct Record {\\n        uint16 catalystId; // start at 1\\n        uint16[MAX_NUM_GEMS] gemIds;\\n    }\\n\\n    event CatalystApplied(uint256 indexed assetId, uint16 indexed catalystId, uint16[] gemIds, uint64 blockNumber);\\n    event GemsAdded(uint256 indexed assetId, uint16[] gemIds, uint64 blockNumber);\\n\\n    /// @notice AssetAttributesRegistry depends on\\n    /// @param gemsCatalystsRegistry: GemsCatalystsRegistry for fetching attributes\\n    /// @param admin: for setting the migration contract address\\n    /// @param minter: allowed to set gems and catalysts for a given asset\\n    constructor(\\n        GemsCatalystsRegistry gemsCatalystsRegistry,\\n        address admin,\\n        address minter,\\n        address upgrader\\n    ) {\\n        _gemsCatalystsRegistry = gemsCatalystsRegistry;\\n        _admin = admin;\\n        _minter = minter;\\n        _upgrader = upgrader;\\n    }\\n\\n    function getCatalystRegistry() external view override returns (address) {\\n        return address(_gemsCatalystsRegistry);\\n    }\\n\\n    /// @notice get the record data (catalyst id, gems ids list) for an asset id\\n    /// @param assetId id of the asset\\n    function getRecord(uint256 assetId)\\n        external\\n        view\\n        override\\n        returns (\\n            bool exists,\\n            uint16 catalystId,\\n            uint16[] memory gemIds\\n        )\\n    {\\n        catalystId = _records[assetId].catalystId;\\n        if (catalystId == 0 && assetId & IS_NFT != 0) {\\n            // fallback on collection catalyst\\n            assetId = _getCollectionId(assetId);\\n            catalystId = _records[assetId].catalystId;\\n        }\\n        uint16[MAX_NUM_GEMS] memory fixedGemIds = _records[assetId].gemIds;\\n        exists = catalystId != 0;\\n        gemIds = new uint16[](MAX_NUM_GEMS);\\n        uint8 i = 0;\\n        while (fixedGemIds[i] != 0) {\\n            gemIds[i] = (fixedGemIds[i]);\\n            i++;\\n        }\\n    }\\n\\n    /// @notice getAttributes\\n    /// @param assetId id of the asset\\n    /// @return values The array of values(256) requested.\\n    function getAttributes(uint256 assetId, GemEvent[] calldata events)\\n        external\\n        view\\n        override\\n        returns (uint32[] memory values)\\n    {\\n        return _gemsCatalystsRegistry.getAttributes(_records[assetId].catalystId, assetId, events);\\n    }\\n\\n    /// @notice sets the catalyst and gems when an asset goes over layers\\n    /// @param assetId id of the asset\\n    /// @param catalystId id of the catalyst to set\\n    /// @param gemIds list of gems ids to set\\n    function setCatalystWhenDepositOnOtherLayer(\\n        uint256 assetId,\\n        uint16 catalystId,\\n        uint16[] calldata gemIds\\n    ) external override {\\n        require(\\n            _msgSender() == overLayerDepositor || _msgSender() == _admin,\\n            \\\"AssetAttributesRegistry: not overLayerDepositor\\\"\\n        );\\n        // We have to ignore all 0 gemid in case of L2 to L1 deposit\\n        // In this case we get gems data in a form of an array of MAX_NUM_GEMS padded with 0\\n        if (gemIds.length == MAX_NUM_GEMS) {\\n            uint256 firstZeroIndex;\\n            for (firstZeroIndex = 0; firstZeroIndex < gemIds.length; firstZeroIndex++) {\\n                if (gemIds[firstZeroIndex] == 0) {\\n                    break;\\n                }\\n            }\\n            uint16[] memory gemIdsWithoutZero = new uint16[](firstZeroIndex);\\n            // find first 0\\n            for (uint256 i = 0; i < firstZeroIndex; i++) {\\n                gemIdsWithoutZero[i] = gemIds[i];\\n            }\\n            _setCatalyst(assetId, catalystId, gemIdsWithoutZero, _getBlockNumber(), false);\\n        } else {\\n            _setCatalyst(assetId, catalystId, gemIds, _getBlockNumber(), false);\\n        }\\n    }\\n\\n    /// @notice sets the catalyst and gems for an asset, minter only\\n    /// @param assetId id of the asset\\n    /// @param catalystId id of the catalyst to set\\n    /// @param gemIds list of gems ids to set\\n    function setCatalyst(\\n        uint256 assetId,\\n        uint16 catalystId,\\n        uint16[] calldata gemIds\\n    ) external virtual override {\\n        require(_msgSender() == _minter || _msgSender() == _upgrader, \\\"NOT_AUTHORIZED_MINTER\\\");\\n        _setCatalyst(assetId, catalystId, gemIds, _getBlockNumber(), true);\\n    }\\n\\n    /// @notice sets the catalyst and gems for an asset for a given block number, migration contract only\\n    /// @param assetId id of the asset\\n    /// @param catalystId id of the catalyst to set\\n    /// @param gemIds list of gems ids to set\\n    /// @param blockNumber block number\\n    function setCatalystWithBlockNumber(\\n        uint256 assetId,\\n        uint16 catalystId,\\n        uint16[] calldata gemIds,\\n        uint64 blockNumber\\n    ) external override {\\n        require(_msgSender() == migrationContract, \\\"NOT_AUTHORIZED_MIGRATION\\\");\\n        _setCatalyst(assetId, catalystId, gemIds, blockNumber, true);\\n    }\\n\\n    /// @notice adds gems to an existing list of gems of an asset, upgrader only\\n    /// @param assetId id of the asset\\n    /// @param gemIds list of gems ids to set\\n    function addGems(uint256 assetId, uint16[] calldata gemIds) external virtual override {\\n        require(_msgSender() == _upgrader, \\\"NOT_AUTHORIZED_UPGRADER\\\");\\n        require(assetId & IS_NFT != 0, \\\"INVALID_NOT_NFT\\\");\\n        require(gemIds.length != 0, \\\"INVALID_GEMS_0\\\");\\n\\n        uint16 catalystId = _records[assetId].catalystId;\\n        uint16[MAX_NUM_GEMS] memory gemIdsToStore;\\n        if (catalystId == 0) {\\n            // fallback on collection catalyst\\n            uint256 collectionId = _getCollectionId(assetId);\\n            catalystId = _records[collectionId].catalystId;\\n            if (catalystId != 0) {\\n                _records[assetId].catalystId = catalystId;\\n                gemIdsToStore = _records[collectionId].gemIds;\\n            }\\n        } else {\\n            gemIdsToStore = _records[assetId].gemIds;\\n        }\\n\\n        require(catalystId != 0, \\\"NO_CATALYST_SET\\\");\\n        uint8 j = 0;\\n        uint8 i = 0;\\n        for (i = 0; i < MAX_NUM_GEMS; i++) {\\n            if (j == gemIds.length) {\\n                break;\\n            }\\n            if (gemIdsToStore[i] == 0) {\\n                require(gemIds[j] != 0, \\\"INVALID_GEM_ID\\\");\\n                gemIdsToStore[i] = gemIds[j];\\n                j++;\\n            }\\n        }\\n        uint8 maxGems = _gemsCatalystsRegistry.getMaxGems(catalystId);\\n        require(i <= maxGems, \\\"GEMS_TOO_MANY\\\");\\n        _records[assetId].gemIds = gemIdsToStore;\\n        uint64 blockNumber = _getBlockNumber();\\n        emit GemsAdded(assetId, gemIds, blockNumber);\\n    }\\n\\n    /// @notice set the migration contract address, admin or migration contract only\\n    /// @param _migrationContract address of the migration contract\\n    function setMigrationContract(address _migrationContract) external override {\\n        address currentMigrationContract = migrationContract;\\n        if (currentMigrationContract == address(0)) {\\n            require(_msgSender() == _admin, \\\"NOT_AUTHORIZED\\\");\\n            migrationContract = _migrationContract;\\n        } else {\\n            require(_msgSender() == currentMigrationContract, \\\"NOT_AUTHORIZED_MIGRATION\\\");\\n            migrationContract = _migrationContract;\\n        }\\n    }\\n\\n    /// @dev Set a catalyst for the given asset.\\n    /// @param assetId The asset to set a catalyst on.\\n    /// @param catalystId The catalyst to set.\\n    /// @param gemIds The gems to embed in the catalyst.\\n    /// @param blockNumber The blocknumber to emit in the event.\\n    /// @param hasToEmitEvent boolean to indicate if we want to emit an event\\n    function _setCatalyst(\\n        uint256 assetId,\\n        uint16 catalystId,\\n        uint16[] memory gemIds,\\n        uint64 blockNumber,\\n        bool hasToEmitEvent\\n    ) internal virtual {\\n        require(gemIds.length <= MAX_NUM_GEMS, \\\"GEMS_MAX_REACHED\\\");\\n        uint8 maxGems = _gemsCatalystsRegistry.getMaxGems(catalystId);\\n        require(gemIds.length <= maxGems, \\\"GEMS_TOO_MANY\\\");\\n        uint16[MAX_NUM_GEMS] memory gemIdsToStore;\\n        for (uint8 i = 0; i < gemIds.length; i++) {\\n            require(gemIds[i] != 0, \\\"INVALID_GEM_ID\\\");\\n            gemIdsToStore[i] = gemIds[i];\\n        }\\n        _records[assetId] = Record(catalystId, gemIdsToStore);\\n        if (hasToEmitEvent) {\\n            emit CatalystApplied(assetId, catalystId, gemIds, blockNumber);\\n        }\\n    }\\n\\n    /// @dev Get the collection Id for an asset.\\n    /// @param assetId The asset to get the collection id for.\\n    /// @return The id of the collection the asset belongs to.\\n    function _getCollectionId(uint256 assetId) internal pure returns (uint256) {\\n        return assetId & NOT_NFT_INDEX & NOT_IS_NFT; // compute the same as Asset to get collectionId\\n    }\\n\\n    /// @dev Get a blocknumber for use when querying attributes.\\n    /// @return blockNumber The current blocknumber + 1.\\n    function _getBlockNumber() internal view returns (uint64 blockNumber) {\\n        blockNumber = uint64(block.number + 1);\\n    }\\n}\\n\",\"keccak256\":\"0x9f6a14121c007c7dccbb7650be30b26091e171bbcffdfb078f9e32765d438cf4\",\"license\":\"MIT\"},\"src/solc_0.8/catalyst/GemsCatalystsRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./interfaces/IGem.sol\\\";\\nimport \\\"./interfaces/ICatalyst.sol\\\";\\nimport \\\"../common/interfaces/IERC20Extended.sol\\\";\\nimport \\\"./interfaces/IGemsCatalystsRegistry.sol\\\";\\nimport \\\"../common/BaseWithStorage/ERC2771Handler.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\n\\n/// @notice Contract managing the Gems and Catalysts\\n/// Each Gems and Catalyst must be registered here.\\n/// Each new Gem get assigned a new id (starting at 1)\\n/// Each new Catalyst get assigned a new id (starting at 1)\\ncontract GemsCatalystsRegistry is ERC2771Handler, IGemsCatalystsRegistry, OwnableUpgradeable, AccessControlUpgradeable {\\n    uint256 private constant MAX_GEMS_AND_CATALYSTS = 256;\\n    uint256 internal constant MAX_UINT256 = ~uint256(0);\\n    bytes32 public constant SUPER_OPERATOR_ROLE = keccak256(\\\"SUPER_OPERATOR_ROLE\\\");\\n\\n    IGem[] internal _gems;\\n    ICatalyst[] internal _catalysts;\\n\\n    event TrustedForwarderChanged(address indexed newTrustedForwarderAddress);\\n\\n    function initV1(address trustedForwarder, address admin) public initializer {\\n        _setupRole(DEFAULT_ADMIN_ROLE, admin);\\n        __ERC2771Handler_initialize(trustedForwarder);\\n        __Ownable_init();\\n    }\\n\\n    /// @notice Returns the values for each gem included in a given asset.\\n    /// @param catalystId The catalyst identifier.\\n    /// @param assetId The asset tokenId.\\n    /// @param events An array of GemEvents. Be aware that only gemEvents from the last CatalystApplied event onwards should be used to populate a query. If gemEvents from multiple CatalystApplied events are included the output values will be incorrect.\\n    /// @return values An array of values for each gem present in the asset.\\n    function getAttributes(\\n        uint16 catalystId,\\n        uint256 assetId,\\n        IAssetAttributesRegistry.GemEvent[] calldata events\\n    ) external view override returns (uint32[] memory values) {\\n        ICatalyst catalyst = getCatalyst(catalystId);\\n        require(catalyst != ICatalyst(address(0)), \\\"CATALYST_DOES_NOT_EXIST\\\");\\n        return catalyst.getAttributes(assetId, events);\\n    }\\n\\n    /// @notice Returns the maximum number of gems for a given catalyst\\n    /// @param catalystId catalyst identifier\\n    function getMaxGems(uint16 catalystId) external view override returns (uint8) {\\n        ICatalyst catalyst = getCatalyst(catalystId);\\n        require(catalyst != ICatalyst(address(0)), \\\"CATALYST_DOES_NOT_EXIST\\\");\\n        return catalyst.getMaxGems();\\n    }\\n\\n    /// @notice Returns the decimals for a given catalyst\\n    /// @param catalystId catalyst identifier\\n    function getCatalystDecimals(uint16 catalystId) external view override returns (uint8) {\\n        ICatalyst catalyst = getCatalyst(catalystId);\\n        require(catalyst != ICatalyst(address(0)), \\\"CATALYST_DOES_NOT_EXIST\\\");\\n        return catalyst.getDecimals();\\n    }\\n\\n    /// @notice Returns the decimals for a given gem\\n    /// @param gemId gem identifier\\n    function getGemDecimals(uint16 gemId) external view override returns (uint8) {\\n        IGem gem = getGem(gemId);\\n        require(gem != IGem(address(0)), \\\"GEM_DOES_NOT_EXIST\\\");\\n        return gem.getDecimals();\\n    }\\n\\n    /// @notice Burns one gem unit from each gem id on behalf of a beneficiary\\n    /// @param from address of the beneficiary to burn on behalf of\\n    /// @param gemIds list of gems to burn one gem from each\\n    /// @param amounts amount units to burn\\n    function burnDifferentGems(\\n        address from,\\n        uint16[] calldata gemIds,\\n        uint256[] calldata amounts\\n    ) external {\\n        uint256 gemIdsLength = gemIds.length;\\n        require(gemIdsLength == amounts.length, \\\"GemsCatalystsRegistry: gemsIds and amounts length mismatch\\\");\\n        for (uint256 i = 0; i < gemIdsLength; i++) {\\n            burnGem(from, gemIds[i], amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Burns one catalyst unit from each catalyst id on behalf of a beneficiary\\n    /// @param from address of the beneficiary to burn on behalf of\\n    /// @param catalystIds list of catalysts to burn\\n    /// @param amounts amount to burn\\n    function burnDifferentCatalysts(\\n        address from,\\n        uint16[] calldata catalystIds,\\n        uint256[] calldata amounts\\n    ) external {\\n        uint256 catalystIdsLength = catalystIds.length;\\n        require(catalystIdsLength == amounts.length, \\\"GemsCatalystsRegistry: catalystIds and amounts length mismatch\\\");\\n        for (uint256 i = 0; i < catalystIdsLength; i++) {\\n            burnCatalyst(from, catalystIds[i], amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Burns few gem units from each gem id on behalf of a beneficiary\\n    /// @param from address of the beneficiary to burn on behalf of\\n    /// @param gemIds list of gems to burn gem units from each\\n    /// @param amounts list of amounts of units to burn\\n    function batchBurnGems(\\n        address from,\\n        uint16[] calldata gemIds,\\n        uint256[] calldata amounts\\n    ) external override {\\n        uint256 gemIdsLength = gemIds.length;\\n        require(gemIdsLength == amounts.length, \\\"GemsCatalystsRegistry: gemsIds and amounts length mismatch\\\");\\n        for (uint256 i = 0; i < gemIdsLength; i++) {\\n            if (gemIds[i] != 0 && amounts[i] != 0) {\\n                burnGem(from, gemIds[i], amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Burns few catalyst units from each catalyst id on behalf of a beneficiary\\n    /// @param from address of the beneficiary to burn on behalf of\\n    /// @param catalystIds list of catalysts to burn catalyst units from each\\n    /// @param amounts list of amounts of units to burn\\n    function batchBurnCatalysts(\\n        address from,\\n        uint16[] calldata catalystIds,\\n        uint256[] calldata amounts\\n    ) external override {\\n        uint256 catalystIdsLength = catalystIds.length;\\n        require(catalystIdsLength == amounts.length, \\\"GemsCatalystsRegistry: catalystIds and amounts length mismatch\\\");\\n        for (uint256 i = 0; i < catalystIdsLength; i++) {\\n            if (catalystIds[i] != 0 && amounts[i] != 0) {\\n                burnCatalyst(from, catalystIds[i], amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Adds both arrays of gems and catalysts to registry\\n    /// @param gems array of gems to be added\\n    /// @param catalysts array of catalysts to be added\\n    function addGemsAndCatalysts(IGem[] calldata gems, ICatalyst[] calldata catalysts)\\n        external\\n        override\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(\\n            uint256(_gems.length + _catalysts.length + gems.length + catalysts.length) < MAX_GEMS_AND_CATALYSTS,\\n            \\\"GemsCatalystsRegistry: Too many gem and catalyst contracts\\\"\\n        );\\n\\n        for (uint256 i = 0; i < gems.length; i++) {\\n            IGem gem = gems[i];\\n            uint16 gemId = gem.gemId();\\n            require(gemId == _gems.length + 1, \\\"GEM_ID_NOT_IN_ORDER\\\");\\n            _gems.push(gem);\\n        }\\n\\n        for (uint256 i = 0; i < catalysts.length; i++) {\\n            ICatalyst catalyst = catalysts[i];\\n            uint16 catalystId = catalyst.catalystId();\\n            require(catalystId == _catalysts.length + 1, \\\"CATALYST_ID_NOT_IN_ORDER\\\");\\n            _catalysts.push(catalyst);\\n        }\\n    }\\n\\n    /// @notice Query whether a given gem exists.\\n    /// @param gemId The gem being queried.\\n    /// @return Whether the gem exists.\\n    function doesGemExist(uint16 gemId) external view override returns (bool) {\\n        return getGem(gemId) != IGem(address(0));\\n    }\\n\\n    /// @notice Query whether a giving catalyst exists.\\n    /// @param catalystId The catalyst being queried.\\n    /// @return Whether the catalyst exists.\\n    function doesCatalystExist(uint16 catalystId) external view returns (bool) {\\n        return getCatalyst(catalystId) != ICatalyst(address(0));\\n    }\\n\\n    /// @notice Burn a catalyst.\\n    /// @param from The signing address for the tx.\\n    /// @param catalystId The id of the catalyst to burn.\\n    /// @param amount The number of catalyst tokens to burn.\\n    function burnCatalyst(\\n        address from,\\n        uint16 catalystId,\\n        uint256 amount\\n    ) public override checkAuthorization(from) {\\n        ICatalyst catalyst = getCatalyst(catalystId);\\n        require(catalyst != ICatalyst(address(0)), \\\"CATALYST_DOES_NOT_EXIST\\\");\\n        catalyst.burnFor(from, amount);\\n    }\\n\\n    /// @notice Burn a gem.\\n    /// @param from The signing address for the tx.\\n    /// @param gemId The id of the gem to burn.\\n    /// @param amount The number of gem tokens to burn.\\n    function burnGem(\\n        address from,\\n        uint16 gemId,\\n        uint256 amount\\n    ) public override checkAuthorization(from) {\\n        IGem gem = getGem(gemId);\\n        require(gem != IGem(address(0)), \\\"GEM_DOES_NOT_EXIST\\\");\\n        gem.burnFor(from, amount);\\n    }\\n\\n    function getNumberOfCatalystContracts() external view returns (uint256 number) {\\n        number = _catalysts.length;\\n    }\\n\\n    function getNumberOfGemContracts() external view returns (uint256 number) {\\n        number = _gems.length;\\n    }\\n\\n    function revokeGemsandCatalystsMaxAllowance() external {\\n        _setGemsAndCatalystsAllowance(0);\\n    }\\n\\n    function setGemsAndCatalystsMaxAllowance() external {\\n        _setGemsAndCatalystsAllowance(MAX_UINT256);\\n    }\\n\\n    // //////////////////// INTERNALS ////////////////////\\n\\n    function _setGemsAndCatalystsAllowance(uint256 allowanceValue) internal {\\n        for (uint256 i = 0; i < _gems.length; i++) {\\n            _gems[i].approveFor(_msgSender(), address(this), allowanceValue);\\n        }\\n\\n        for (uint256 i = 0; i < _catalysts.length; i++) {\\n            _catalysts[i].approveFor(_msgSender(), address(this), allowanceValue);\\n        }\\n    }\\n\\n    /// @dev Get the catalyst contract corresponding to the id.\\n    /// @param catalystId The catalyst id to use to retrieve the contract.\\n    /// @return The requested Catalyst contract.\\n    function getCatalyst(uint16 catalystId) public view returns (ICatalyst) {\\n        if (catalystId > 0 && catalystId <= _catalysts.length) {\\n            return _catalysts[catalystId - 1];\\n        } else {\\n            return ICatalyst(address(0));\\n        }\\n    }\\n\\n    /// @dev Get the gem contract corresponding to the id.\\n    /// @param gemId The gem id to use to retrieve the contract.\\n    /// @return The requested Gem contract.\\n    function getGem(uint16 gemId) public view returns (IGem) {\\n        if (gemId > 0 && gemId <= _gems.length) {\\n            return _gems[gemId - 1];\\n        } else {\\n            return IGem(address(0));\\n        }\\n    }\\n\\n    /// @dev verify that the caller is authorized for this function call.\\n    /// @param from The original signer of the transaction.\\n    modifier checkAuthorization(address from) {\\n        require(_msgSender() == from || hasRole(SUPER_OPERATOR_ROLE, _msgSender()), \\\"AUTH_ACCESS_DENIED\\\");\\n        _;\\n    }\\n\\n    /// @dev Change the address of the trusted forwarder for meta-TX\\n    /// @param trustedForwarder The new trustedForwarder\\n    function setTrustedForwarder(address trustedForwarder) external onlyOwner {\\n        _trustedForwarder = trustedForwarder;\\n\\n        emit TrustedForwarderChanged(trustedForwarder);\\n    }\\n\\n    function _msgSender() internal view override(ContextUpgradeable, ERC2771Handler) returns (address sender) {\\n        return ERC2771Handler._msgSender();\\n    }\\n\\n    function _msgData() internal view override(ContextUpgradeable, ERC2771Handler) returns (bytes calldata) {\\n        return ERC2771Handler._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0x503d79aca7cd7a6f84ad805b32f081a01714078c1399e54215c734af0d3cb8b2\",\"license\":\"MIT\"},\"src/solc_0.8/catalyst/interfaces/ICatalyst.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"../../common/interfaces/IAssetAttributesRegistry.sol\\\";\\nimport \\\"../../common/interfaces/IAttributes.sol\\\";\\nimport \\\"../../common/interfaces/IERC20Extended.sol\\\";\\n\\ninterface ICatalyst is IERC20Extended, IAttributes {\\n    function catalystId() external returns (uint16);\\n\\n    function changeAttributes(IAttributes attributes) external;\\n\\n    function getMaxGems() external view returns (uint8);\\n\\n    function approveFor(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) external override returns (bool success);\\n\\n    function getAttributes(uint256 assetId, IAssetAttributesRegistry.GemEvent[] calldata events)\\n        external\\n        view\\n        override\\n        returns (uint32[] memory values);\\n\\n    function getDecimals() external pure returns (uint8);\\n}\\n\",\"keccak256\":\"0x0f9415fff82b9c189f2d02680efd61195e1ac7f5ed17a63094143b386fc6b177\",\"license\":\"MIT\"},\"src/solc_0.8/catalyst/interfaces/IGem.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"../../common/interfaces/IERC20Extended.sol\\\";\\n\\ninterface IGem is IERC20Extended {\\n    function gemId() external returns (uint16);\\n\\n    function approveFor(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) external override returns (bool success);\\n\\n    function getDecimals() external pure returns (uint8);\\n}\\n\",\"keccak256\":\"0x5555669b35669429002d70f48abba62f8b03c47b4a256c56b13644e9b87ac94a\",\"license\":\"MIT\"},\"src/solc_0.8/catalyst/interfaces/IGemsCatalystsRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"../../common/interfaces/IAssetAttributesRegistry.sol\\\";\\nimport \\\"./IGem.sol\\\";\\nimport \\\"./ICatalyst.sol\\\";\\n\\ninterface IGemsCatalystsRegistry {\\n    function getAttributes(\\n        uint16 catalystId,\\n        uint256 assetId,\\n        IAssetAttributesRegistry.GemEvent[] calldata events\\n    ) external view returns (uint32[] memory values);\\n\\n    function getMaxGems(uint16 catalystId) external view returns (uint8);\\n\\n    function batchBurnGems(\\n        address from,\\n        uint16[] calldata gemIds,\\n        uint256[] calldata amounts\\n    ) external;\\n\\n    function batchBurnCatalysts(\\n        address from,\\n        uint16[] calldata catalystIds,\\n        uint256[] calldata amounts\\n    ) external;\\n\\n    function addGemsAndCatalysts(IGem[] calldata gems, ICatalyst[] calldata catalysts) external;\\n\\n    function doesGemExist(uint16 gemId) external view returns (bool);\\n\\n    function burnCatalyst(\\n        address from,\\n        uint16 catalystId,\\n        uint256 amount\\n    ) external;\\n\\n    function burnGem(\\n        address from,\\n        uint16 gemId,\\n        uint256 amount\\n    ) external;\\n\\n    function getCatalystDecimals(uint16 catalystId) external view returns (uint8);\\n\\n    function getGemDecimals(uint16 gemId) external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x3de22bb2dbd63ffbace87e470c716fb1aad2b116c671e5cff7631af96d055e33\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/ERC2771Handler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\n/// @dev minimal ERC2771 handler to keep bytecode-size down\\n/// based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.6.0/contracts/metatx/ERC2771Context.sol\\n/// with an initializer for proxies and a mutable forwarder\\n\\ncontract ERC2771Handler {\\n    address internal _trustedForwarder;\\n\\n    function __ERC2771Handler_initialize(address forwarder) internal {\\n        _trustedForwarder = forwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function getTrustedForwarder() external view returns (address trustedForwarder) {\\n        return _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc02a58a6fed654dc6ecd5c0ecb81192eb47daf61d093c5342b5f8d74481c0692\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/WithAdmin.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\ncontract WithAdmin {\\n    address internal _admin;\\n\\n    /// @dev Emits when the contract administrator is changed.\\n    /// @param oldAdmin The address of the previous administrator.\\n    /// @param newAdmin The address of the new administrator.\\n    event AdminChanged(address indexed oldAdmin, address indexed newAdmin);\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == _admin, \\\"ADMIN_ONLY\\\");\\n        _;\\n    }\\n\\n    /// @dev Get the current administrator of this contract.\\n    /// @return The current administrator of this contract.\\n    function getAdmin() external view returns (address) {\\n        return _admin;\\n    }\\n\\n    /// @dev Change the administrator to be `newAdmin`.\\n    /// @param newAdmin The address of the new administrator.\\n    function changeAdmin(address newAdmin) external {\\n        require(msg.sender == _admin, \\\"ADMIN_ACCESS_DENIED\\\");\\n        emit AdminChanged(_admin, newAdmin);\\n        _admin = newAdmin;\\n    }\\n}\\n\",\"keccak256\":\"0x0239f3f826576fc7c050503f29a708b20b8b682df569e3d67bd83a836b0c925a\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/WithMinter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\nimport \\\"./WithAdmin.sol\\\";\\n\\ncontract WithMinter is WithAdmin {\\n    address internal _minter;\\n\\n    /// @dev Emits when the Minter address is changed\\n    /// @param oldMinter The previous Minter address\\n    /// @param newMinter The new Minter address\\n    event MinterChanged(address oldMinter, address newMinter);\\n\\n    modifier onlyMinter() {\\n        require(msg.sender == _minter, \\\"MINTER_ACCESS_DENIED\\\");\\n        _;\\n    }\\n\\n    /// @dev Get the current minter of this contract.\\n    /// @return The current minter of this contract.\\n    function getMinter() external view returns (address) {\\n        return _minter;\\n    }\\n\\n    /// @dev Change the minter to be `newMinter`.\\n    /// @param newMinter The address of the new minter.\\n    function changeMinter(address newMinter) external onlyAdmin() {\\n        emit MinterChanged(_minter, newMinter);\\n        _minter = newMinter;\\n    }\\n}\\n\",\"keccak256\":\"0xf9b764b1596ab97154b71ca8b57980695a9787f5f9f7f970976193065bde2206\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/WithUpgrader.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"./WithAdmin.sol\\\";\\n\\ncontract WithUpgrader is WithAdmin {\\n    address internal _upgrader;\\n\\n    /// @dev Emits when the Upgrader address is changed\\n    /// @param oldUpgrader The previous Upgrader address\\n    /// @param newUpgrader The new Upgrader address\\n    event UpgraderChanged(address oldUpgrader, address newUpgrader);\\n\\n    modifier onlyUpgrader() {\\n        require(msg.sender == _upgrader, \\\"UPGRADER_ACCESS_DENIED\\\");\\n        _;\\n    }\\n\\n    /// @dev Get the current upgrader of this contract.\\n    /// @return The current upgrader of this contract.\\n    function getUpgrader() external view returns (address) {\\n        return _upgrader;\\n    }\\n\\n    /// @dev Change the upgrader to be `newUpgrader`.\\n    /// @param newUpgrader The address of the new upgrader.\\n    function changeUpgrader(address newUpgrader) external onlyAdmin() {\\n        emit UpgraderChanged(_upgrader, newUpgrader);\\n        _upgrader = newUpgrader;\\n    }\\n}\\n\",\"keccak256\":\"0xf019297e512609fbb2ad283e35c7bf5ac42267076de6c2a60b38ef2011ac5af9\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IAssetAttributesRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\npragma experimental ABIEncoderV2;\\n\\ninterface IAssetAttributesRegistry {\\n    struct GemEvent {\\n        uint16[] gemIds;\\n        bytes32 blockHash;\\n    }\\n\\n    struct AssetGemsCatalystData {\\n        uint256 assetId;\\n        uint16 catalystContractId;\\n        uint16[] gemContractIds;\\n    }\\n\\n    function getRecord(uint256 assetId)\\n        external\\n        view\\n        returns (\\n            bool exists,\\n            uint16 catalystId,\\n            uint16[] memory gemIds\\n        );\\n\\n    function getAttributes(uint256 assetId, GemEvent[] calldata events) external view returns (uint32[] memory values);\\n\\n    function setCatalyst(\\n        uint256 assetId,\\n        uint16 catalystId,\\n        uint16[] calldata gemIds\\n    ) external;\\n\\n    function setCatalystWhenDepositOnOtherLayer(\\n        uint256 assetId,\\n        uint16 catalystId,\\n        uint16[] calldata gemIds\\n    ) external;\\n\\n    function setCatalystWithBlockNumber(\\n        uint256 assetId,\\n        uint16 catalystId,\\n        uint16[] calldata gemIds,\\n        uint64 blockNumber\\n    ) external;\\n\\n    function addGems(uint256 assetId, uint16[] calldata gemIds) external;\\n\\n    function setMigrationContract(address _migrationContract) external;\\n\\n    function getCatalystRegistry() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7f12fa565160d7598f702dcae0e511943be9c6eaa4dc338f3439a36f0a6086c9\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IAttributes.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IAssetAttributesRegistry.sol\\\";\\n\\ninterface IAttributes {\\n    function getAttributes(uint256 assetId, IAssetAttributesRegistry.GemEvent[] calldata events)\\n        external\\n        view\\n        returns (uint32[] memory values);\\n}\\n\",\"keccak256\":\"0x4cbdba9ad3fae8334fe614ae28fb3136454eada28f13f911ffce9c8c701c56a7\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.2;\\n\\n/// @dev see https://eips.ethereum.org/EIPS/eip-20\\ninterface IERC20 {\\n    /// @notice emitted when tokens are transfered from one address to another.\\n    /// @param from address from which the token are transfered from (zero means tokens are minted).\\n    /// @param to destination address which the token are transfered to (zero means tokens are burnt).\\n    /// @param value amount of tokens transferred.\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice emitted when owner grant transfer rights to another address\\n    /// @param owner address allowing its token to be transferred.\\n    /// @param spender address allowed to spend on behalf of `owner`\\n    /// @param value amount of tokens allowed.\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice return the current total amount of tokens owned by all holders.\\n    /// @return supply total number of tokens held.\\n    function totalSupply() external view returns (uint256 supply);\\n\\n    /// @notice return the number of tokens held by a particular address.\\n    /// @param who address being queried.\\n    /// @return balance number of token held by that address.\\n    function balanceOf(address who) external view returns (uint256 balance);\\n\\n    /// @notice transfer tokens to a specific address.\\n    /// @param to destination address receiving the tokens.\\n    /// @param value number of tokens to transfer.\\n    /// @return success whether the transfer succeeded.\\n    function transfer(address to, uint256 value) external returns (bool success);\\n\\n    /// @notice transfer tokens from one address to another.\\n    /// @param from address tokens will be sent from.\\n    /// @param to destination address receiving the tokens.\\n    /// @param value number of tokens to transfer.\\n    /// @return success whether the transfer succeeded.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool success);\\n\\n    /// @notice approve an address to spend on your behalf.\\n    /// @param spender address entitled to transfer on your behalf.\\n    /// @param value amount allowed to be transfered.\\n    /// @param success whether the approval succeeded.\\n    function approve(address spender, uint256 value) external returns (bool success);\\n\\n    /// @notice return the current allowance for a particular owner/spender pair.\\n    /// @param owner address allowing spender.\\n    /// @param spender address allowed to spend.\\n    /// @return amount number of tokens `spender` can spend on behalf of `owner`.\\n    function allowance(address owner, address spender) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x9fe745d44fdcd7987682221d68b7a66d0784fbd81ae1d4e43a6c766347733a96\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC20Extended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.2;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IERC20Extended is IERC20 {\\n    function burnFor(address from, uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n\\n    function approveFor(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xf02074902aff81db019aac8808c524d2ab77e1cb216f5327992ed7db95fee919\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001d5238038062001d5283398101604081905262000034916200008a565b60609390931b6001600160601b031916608052600080546001600160a01b03199081166001600160a01b03948516179091556001805482169284169290921790915560028054909116919092161790556200010a565b60008060008060808587031215620000a0578384fd5b8451620000ad81620000f1565b6020860151909450620000c081620000f1565b6040860151909350620000d381620000f1565b6060860151909250620000e681620000f1565b939692955090935050565b6001600160a01b03811681146200010757600080fd5b50565b60805160601c611c146200013e600039600081816101970152818161091801528181610fc601526112570152611c146000f3fe608060405234801561001057600080fd5b50600436106100ff5760003560e01c806374903c8611610097578063de7184db11610066578063de7184db14610238578063e4d7437b1461024b578063e7545d2e1461025c578063f36675171461026f576100ff565b806374903c86146101df57806388b79cec146101ff5780638f28397014610212578063d8ae21bd14610225576100ff565b80635eb25a94116100d35780635eb25a94146101825780636140cc0f14610195578063676181bf146101bb5780636e9960c3146101ce576100ff565b806212ceb11461010457806303e9e609146101195780630fee1a20146101445780632c4d4d181461016f575b600080fd5b6101176101123660046117b9565b610280565b005b61012c610127366004611743565b6104d3565b60405161013b939291906119b7565b60405180910390f35b600454610157906001600160a01b031681565b6040516001600160a01b03909116815260200161013b565b61011761017d366004611635565b61066b565b610117610190366004611635565b61073b565b7f0000000000000000000000000000000000000000000000000000000000000000610157565b6101176101c93660046117b9565b61080b565b6000546001600160a01b0316610157565b6101f26101ed36600461175b565b6108d5565b60405161013b919061196d565b61011761020d366004611635565b6109b4565b610117610220366004611635565b610ada565b600554610157906001600160a01b031681565b6101176102463660046117a5565b610b9c565b6002546001600160a01b0316610157565b61011761026a366004611811565b611111565b6001546001600160a01b0316610157565b6005546001600160a01b0316336001600160a01b031614806102b557506000546001600160a01b0316336001600160a01b0316145b61032c5760405162461bcd60e51b815260206004820152602f60248201527f41737365744174747269627574657352656769737472793a206e6f74206f766560448201527f724c617965724465706f7369746f72000000000000000000000000000000000060648201526084015b60405180910390fd5b600f81141561048b5760005b818110156103945782828281811061036057634e487b7160e01b600052603260045260246000fd5b90506020020160208101906103759190611729565b61ffff1661038257610394565b8061038c81611b59565b915050610338565b60008167ffffffffffffffff8111156103bd57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156103e6578160200160208202803683370190505b50905060005b8281101561046e5784848281811061041457634e487b7160e01b600052603260045260246000fd5b90506020020160208101906104299190611729565b82828151811061044957634e487b7160e01b600052603260045260246000fd5b61ffff909216602092830291909101909101528061046681611b59565b9150506103ec565b5061048486868361047d6111be565b60006111d0565b50506104cd565b6104cd848484848080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061047d92506111be915050565b50505050565b60008181526003602052604081205461ffff1660608115801561050357506b800000000000000000000000841615155b1561052a57610511846114d3565b60008181526003602052604090205490945061ffff1691505b60008481526003602052604080822081516101e081019283905291600190910190600f908285855b82829054906101000a900461ffff1661ffff168152602001906002019060208260010104928301926001038202915080841161055257505060408051600f808252610200820190925261ffff8a1615159a50959650935050505081602001602082028036833701905050915060005b818160ff16600f81106105e457634e487b7160e01b600052603260045260246000fd5b602002015161ffff161561066257818160ff16600f811061061557634e487b7160e01b600052603260045260246000fd5b6020020151838260ff168151811061063d57634e487b7160e01b600052603260045260246000fd5b61ffff909216602092830291909101909101528061065a81611b92565b9150506105c1565b50509193909250565b6000546001600160a01b031633146106c55760405162461bcd60e51b815260206004820152600a60248201527f41444d494e5f4f4e4c59000000000000000000000000000000000000000000006044820152606401610323565b600154604080516001600160a01b03928316815291831660208301527f3b0007eb941cf645526cbb3a4fdaecda9d28ce4843167d9263b536a1f1edc0f6910160405180910390a16001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000546001600160a01b031633146107955760405162461bcd60e51b815260206004820152600a60248201527f41444d494e5f4f4e4c59000000000000000000000000000000000000000000006044820152606401610323565b600254604080516001600160a01b03928316815291831660208301527f08f975c558f03273377770550a7ba8d4e34fdf1fe05aa8723a4c2203aa9574a9910160405180910390a16002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001546001600160a01b0316336001600160a01b0316148061084057506002546001600160a01b0316336001600160a01b0316145b61088c5760405162461bcd60e51b815260206004820152601560248201527f4e4f545f415554484f52495a45445f4d494e54455200000000000000000000006044820152606401610323565b6104cd84848484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506108ce92506111be915050565b60016111d0565b600083815260036020526040908190205490517f7e8ee42f0000000000000000000000000000000000000000000000000000000081526060916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691637e8ee42f916109589161ffff909116908890889088906004016119e5565b60006040518083038186803b15801561097057600080fd5b505afa158015610984573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109ac9190810190611663565b949350505050565b6004546001600160a01b031680610a55576000546001600160a01b0316336001600160a01b031614610a285760405162461bcd60e51b815260206004820152600e60248201527f4e4f545f415554484f52495a45440000000000000000000000000000000000006044820152606401610323565b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038416179055610ad6565b336001600160a01b03821614610aad5760405162461bcd60e51b815260206004820152601860248201527f4e4f545f415554484f52495a45445f4d4947524154494f4e00000000000000006044820152606401610323565b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384161790555b5050565b6000546001600160a01b03163314610b345760405162461bcd60e51b815260206004820152601360248201527f41444d494e5f4143434553535f44454e494544000000000000000000000000006044820152606401610323565b600080546040516001600160a01b03808516939216917f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f91a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6002546001600160a01b0316336001600160a01b031614610bff5760405162461bcd60e51b815260206004820152601760248201527f4e4f545f415554484f52495a45445f55504752414445520000000000000000006044820152606401610323565b6b8000000000000000000000008316610c5a5760405162461bcd60e51b815260206004820152600f60248201527f494e56414c49445f4e4f545f4e465400000000000000000000000000000000006044820152606401610323565b80610ca75760405162461bcd60e51b815260206004820152600e60248201527f494e56414c49445f47454d535f300000000000000000000000000000000000006044820152606401610323565b60008381526003602052604090205461ffff16610cc26114fc565b61ffff8216610d77576000610cd6866114d3565b60008181526003602052604090205461ffff16935090508215610d7157600086815260036020526040808220805461ffff191661ffff871617905582825280822081516101e08101928390529260019190910191600f918390855b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411610d31579050505050505091505b50610ddf565b60008581526003602052604080822081516101e081019283905292600190910191600f918390855b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411610d9f579050505050505090505b61ffff8216610e305760405162461bcd60e51b815260206004820152600f60248201527f4e4f5f434154414c5953545f53455400000000000000000000000000000000006044820152606401610323565b6000805b600f8160ff161015610f915760ff8216851415610e5057610f91565b828160ff16600f8110610e7357634e487b7160e01b600052603260045260246000fd5b602002015161ffff16610f7f5785858360ff16818110610ea357634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610eb89190611729565b61ffff16610f085760405162461bcd60e51b815260206004820152600e60248201527f494e56414c49445f47454d5f49440000000000000000000000000000000000006044820152606401610323565b85858360ff16818110610f2b57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610f409190611729565b838260ff16600f8110610f6357634e487b7160e01b600052603260045260246000fd5b61ffff909216602092909202015281610f7b81611b92565b9250505b80610f8981611b92565b915050610e34565b6040517f78bc8a1900000000000000000000000000000000000000000000000000000000815261ffff851660048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906378bc8a199060240160206040518083038186803b15801561101057600080fd5b505afa158015611024573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110489190611888565b90508060ff168260ff1611156110a05760405162461bcd60e51b815260206004820152600d60248201527f47454d535f544f4f5f4d414e59000000000000000000000000000000000000006044820152606401610323565b60008881526003602052604090206110bd9060010185600f61151b565b5060006110c86111be565b9050887fc1fa9859caad2b5d312ac342a92b0073b2199b636bae1e96db5346cce5c5b95a8989846040516110fe939291906118e7565b60405180910390a2505050505050505050565b6004546001600160a01b0316336001600160a01b0316146111745760405162461bcd60e51b815260206004820152601860248201527f4e4f545f415554484f52495a45445f4d4947524154494f4e00000000000000006044820152606401610323565b6111b78585858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250879250600191506111d09050565b5050505050565b60006111cb436001611b41565b905090565b600f835111156112225760405162461bcd60e51b815260206004820152601060248201527f47454d535f4d41585f52454143484544000000000000000000000000000000006044820152606401610323565b6040517f78bc8a1900000000000000000000000000000000000000000000000000000000815261ffff851660048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906378bc8a199060240160206040518083038186803b1580156112a157600080fd5b505afa1580156112b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d99190611888565b90508060ff168451111561132f5760405162461bcd60e51b815260206004820152600d60248201527f47454d535f544f4f5f4d414e59000000000000000000000000000000000000006044820152606401610323565b6113376114fc565b60005b85518160ff16101561143357858160ff168151811061136957634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff16600014156113c55760405162461bcd60e51b815260206004820152600e60248201527f494e56414c49445f47454d5f49440000000000000000000000000000000000006044820152606401610323565b858160ff16815181106113e857634e487b7160e01b600052603260045260246000fd5b6020026020010151828260ff16600f811061141357634e487b7160e01b600052603260045260246000fd5b61ffff90921660209290920201528061142b81611b92565b91505061133a565b5060408051808201825261ffff8881168252602080830185815260008c815260039092529390208251815461ffff191692169190911781559151909190611480906001830190600f61151b565b5090505082156114ca578561ffff16877f04171f09eda17eeaa4cdcd6bce0edd716626170c188afc0f5c5b3e97a99e225e87876040516114c1929190611941565b60405180910390a35b50505050505050565b7fffffffffffffffffffffffffffffffffffffffff000000007fffffffffffffff81165b919050565b604051806101e00160405280600f906020820280368337509192915050565b6001830191839082156115a15791602002820160005b8382111561157157835183826101000a81548161ffff021916908361ffff1602179055509260200192600201602081600101049283019260010302611531565b801561159f5782816101000a81549061ffff0219169055600201602081600101049283019260010302611571565b505b506115ad9291506115b1565b5090565b5b808211156115ad57600081556001016115b2565b60008083601f8401126115d7578081fd5b50813567ffffffffffffffff8111156115ee578182fd5b602083019150836020808302850101111561160857600080fd5b9250929050565b803561ffff811681146114f757600080fd5b805163ffffffff811681146114f757600080fd5b600060208284031215611646578081fd5b81356001600160a01b038116811461165c578182fd5b9392505050565b60006020808385031215611675578182fd5b825167ffffffffffffffff8082111561168c578384fd5b818501915085601f83011261169f578384fd5b8151818111156116b1576116b1611bc8565b838102604051601f19603f830116810181811085821117156116d5576116d5611bc8565b604052828152858101935084860182860187018a10156116f3578788fd5b8795505b8386101561171c5761170881611621565b8552600195909501949386019386016116f7565b5098975050505050505050565b60006020828403121561173a578081fd5b61165c8261160f565b600060208284031215611754578081fd5b5035919050565b60008060006040848603121561176f578182fd5b83359250602084013567ffffffffffffffff81111561178c578283fd5b611798868287016115c6565b9497909650939450505050565b60008060006040848603121561176f578283fd5b600080600080606085870312156117ce578081fd5b843593506117de6020860161160f565b9250604085013567ffffffffffffffff8111156117f9578182fd5b611805878288016115c6565b95989497509550505050565b600080600080600060808688031215611828578081fd5b853594506118386020870161160f565b9350604086013567ffffffffffffffff80821115611854578283fd5b61186089838a016115c6565b9095509350606088013591508082168214611879578283fd5b50809150509295509295909350565b600060208284031215611899578081fd5b815160ff8116811461165c578182fd5b6000815180845260208085019450808401835b838110156118dc57815161ffff16875295820195908201906001016118bc565b509495945050505050565b6040808252810183905260008460608301825b868110156119235761ffff61190e8461160f565b168252602092830192909101906001016118fa565b50809250505067ffffffffffffffff83166020830152949350505050565b60006040825261195460408301856118a9565b905067ffffffffffffffff831660208301529392505050565b6020808252825182820181905260009190848201906040850190845b818110156119ab57835163ffffffff1683529284019291840191600101611989565b50909695505050505050565b6000841515825261ffff84166020830152606060408301526119dc60608301846118a9565b95945050505050565b6000606080830161ffff80891685526020888187015260408481880152838885526080880190506080838a02890101945089875b8a811015611b2f577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808a880301835281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc18d3603018112611a7957898afd5b8c018785018135368390037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1018112611ab0578b8cfd5b8201803567ffffffffffffffff811115611ac8578c8dfd5b8881023603841315611ad8578c8dfd5b878b52918290528701908b908b8b015b81831015611b0f578a611afa8561160f565b16815292890192600192909201918901611ae8565b938901359a89019a909a5250909750509184019190840190600101611a19565b50949c9b505050505050505050505050565b60008219821115611b5457611b54611bb2565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611b8b57611b8b611bb2565b5060010190565b600060ff821660ff811415611ba957611ba9611bb2565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220dec5ea58a1c36e46638e60ed9ea5e17e7446c4d05a38f8b9d60256ca9f109a3264736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ff5760003560e01c806374903c8611610097578063de7184db11610066578063de7184db14610238578063e4d7437b1461024b578063e7545d2e1461025c578063f36675171461026f576100ff565b806374903c86146101df57806388b79cec146101ff5780638f28397014610212578063d8ae21bd14610225576100ff565b80635eb25a94116100d35780635eb25a94146101825780636140cc0f14610195578063676181bf146101bb5780636e9960c3146101ce576100ff565b806212ceb11461010457806303e9e609146101195780630fee1a20146101445780632c4d4d181461016f575b600080fd5b6101176101123660046117b9565b610280565b005b61012c610127366004611743565b6104d3565b60405161013b939291906119b7565b60405180910390f35b600454610157906001600160a01b031681565b6040516001600160a01b03909116815260200161013b565b61011761017d366004611635565b61066b565b610117610190366004611635565b61073b565b7f0000000000000000000000000000000000000000000000000000000000000000610157565b6101176101c93660046117b9565b61080b565b6000546001600160a01b0316610157565b6101f26101ed36600461175b565b6108d5565b60405161013b919061196d565b61011761020d366004611635565b6109b4565b610117610220366004611635565b610ada565b600554610157906001600160a01b031681565b6101176102463660046117a5565b610b9c565b6002546001600160a01b0316610157565b61011761026a366004611811565b611111565b6001546001600160a01b0316610157565b6005546001600160a01b0316336001600160a01b031614806102b557506000546001600160a01b0316336001600160a01b0316145b61032c5760405162461bcd60e51b815260206004820152602f60248201527f41737365744174747269627574657352656769737472793a206e6f74206f766560448201527f724c617965724465706f7369746f72000000000000000000000000000000000060648201526084015b60405180910390fd5b600f81141561048b5760005b818110156103945782828281811061036057634e487b7160e01b600052603260045260246000fd5b90506020020160208101906103759190611729565b61ffff1661038257610394565b8061038c81611b59565b915050610338565b60008167ffffffffffffffff8111156103bd57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156103e6578160200160208202803683370190505b50905060005b8281101561046e5784848281811061041457634e487b7160e01b600052603260045260246000fd5b90506020020160208101906104299190611729565b82828151811061044957634e487b7160e01b600052603260045260246000fd5b61ffff909216602092830291909101909101528061046681611b59565b9150506103ec565b5061048486868361047d6111be565b60006111d0565b50506104cd565b6104cd848484848080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061047d92506111be915050565b50505050565b60008181526003602052604081205461ffff1660608115801561050357506b800000000000000000000000841615155b1561052a57610511846114d3565b60008181526003602052604090205490945061ffff1691505b60008481526003602052604080822081516101e081019283905291600190910190600f908285855b82829054906101000a900461ffff1661ffff168152602001906002019060208260010104928301926001038202915080841161055257505060408051600f808252610200820190925261ffff8a1615159a50959650935050505081602001602082028036833701905050915060005b818160ff16600f81106105e457634e487b7160e01b600052603260045260246000fd5b602002015161ffff161561066257818160ff16600f811061061557634e487b7160e01b600052603260045260246000fd5b6020020151838260ff168151811061063d57634e487b7160e01b600052603260045260246000fd5b61ffff909216602092830291909101909101528061065a81611b92565b9150506105c1565b50509193909250565b6000546001600160a01b031633146106c55760405162461bcd60e51b815260206004820152600a60248201527f41444d494e5f4f4e4c59000000000000000000000000000000000000000000006044820152606401610323565b600154604080516001600160a01b03928316815291831660208301527f3b0007eb941cf645526cbb3a4fdaecda9d28ce4843167d9263b536a1f1edc0f6910160405180910390a16001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000546001600160a01b031633146107955760405162461bcd60e51b815260206004820152600a60248201527f41444d494e5f4f4e4c59000000000000000000000000000000000000000000006044820152606401610323565b600254604080516001600160a01b03928316815291831660208301527f08f975c558f03273377770550a7ba8d4e34fdf1fe05aa8723a4c2203aa9574a9910160405180910390a16002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001546001600160a01b0316336001600160a01b0316148061084057506002546001600160a01b0316336001600160a01b0316145b61088c5760405162461bcd60e51b815260206004820152601560248201527f4e4f545f415554484f52495a45445f4d494e54455200000000000000000000006044820152606401610323565b6104cd84848484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506108ce92506111be915050565b60016111d0565b600083815260036020526040908190205490517f7e8ee42f0000000000000000000000000000000000000000000000000000000081526060916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691637e8ee42f916109589161ffff909116908890889088906004016119e5565b60006040518083038186803b15801561097057600080fd5b505afa158015610984573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109ac9190810190611663565b949350505050565b6004546001600160a01b031680610a55576000546001600160a01b0316336001600160a01b031614610a285760405162461bcd60e51b815260206004820152600e60248201527f4e4f545f415554484f52495a45440000000000000000000000000000000000006044820152606401610323565b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038416179055610ad6565b336001600160a01b03821614610aad5760405162461bcd60e51b815260206004820152601860248201527f4e4f545f415554484f52495a45445f4d4947524154494f4e00000000000000006044820152606401610323565b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384161790555b5050565b6000546001600160a01b03163314610b345760405162461bcd60e51b815260206004820152601360248201527f41444d494e5f4143434553535f44454e494544000000000000000000000000006044820152606401610323565b600080546040516001600160a01b03808516939216917f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f91a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6002546001600160a01b0316336001600160a01b031614610bff5760405162461bcd60e51b815260206004820152601760248201527f4e4f545f415554484f52495a45445f55504752414445520000000000000000006044820152606401610323565b6b8000000000000000000000008316610c5a5760405162461bcd60e51b815260206004820152600f60248201527f494e56414c49445f4e4f545f4e465400000000000000000000000000000000006044820152606401610323565b80610ca75760405162461bcd60e51b815260206004820152600e60248201527f494e56414c49445f47454d535f300000000000000000000000000000000000006044820152606401610323565b60008381526003602052604090205461ffff16610cc26114fc565b61ffff8216610d77576000610cd6866114d3565b60008181526003602052604090205461ffff16935090508215610d7157600086815260036020526040808220805461ffff191661ffff871617905582825280822081516101e08101928390529260019190910191600f918390855b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411610d31579050505050505091505b50610ddf565b60008581526003602052604080822081516101e081019283905292600190910191600f918390855b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411610d9f579050505050505090505b61ffff8216610e305760405162461bcd60e51b815260206004820152600f60248201527f4e4f5f434154414c5953545f53455400000000000000000000000000000000006044820152606401610323565b6000805b600f8160ff161015610f915760ff8216851415610e5057610f91565b828160ff16600f8110610e7357634e487b7160e01b600052603260045260246000fd5b602002015161ffff16610f7f5785858360ff16818110610ea357634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610eb89190611729565b61ffff16610f085760405162461bcd60e51b815260206004820152600e60248201527f494e56414c49445f47454d5f49440000000000000000000000000000000000006044820152606401610323565b85858360ff16818110610f2b57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610f409190611729565b838260ff16600f8110610f6357634e487b7160e01b600052603260045260246000fd5b61ffff909216602092909202015281610f7b81611b92565b9250505b80610f8981611b92565b915050610e34565b6040517f78bc8a1900000000000000000000000000000000000000000000000000000000815261ffff851660048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906378bc8a199060240160206040518083038186803b15801561101057600080fd5b505afa158015611024573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110489190611888565b90508060ff168260ff1611156110a05760405162461bcd60e51b815260206004820152600d60248201527f47454d535f544f4f5f4d414e59000000000000000000000000000000000000006044820152606401610323565b60008881526003602052604090206110bd9060010185600f61151b565b5060006110c86111be565b9050887fc1fa9859caad2b5d312ac342a92b0073b2199b636bae1e96db5346cce5c5b95a8989846040516110fe939291906118e7565b60405180910390a2505050505050505050565b6004546001600160a01b0316336001600160a01b0316146111745760405162461bcd60e51b815260206004820152601860248201527f4e4f545f415554484f52495a45445f4d4947524154494f4e00000000000000006044820152606401610323565b6111b78585858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250879250600191506111d09050565b5050505050565b60006111cb436001611b41565b905090565b600f835111156112225760405162461bcd60e51b815260206004820152601060248201527f47454d535f4d41585f52454143484544000000000000000000000000000000006044820152606401610323565b6040517f78bc8a1900000000000000000000000000000000000000000000000000000000815261ffff851660048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906378bc8a199060240160206040518083038186803b1580156112a157600080fd5b505afa1580156112b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d99190611888565b90508060ff168451111561132f5760405162461bcd60e51b815260206004820152600d60248201527f47454d535f544f4f5f4d414e59000000000000000000000000000000000000006044820152606401610323565b6113376114fc565b60005b85518160ff16101561143357858160ff168151811061136957634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff16600014156113c55760405162461bcd60e51b815260206004820152600e60248201527f494e56414c49445f47454d5f49440000000000000000000000000000000000006044820152606401610323565b858160ff16815181106113e857634e487b7160e01b600052603260045260246000fd5b6020026020010151828260ff16600f811061141357634e487b7160e01b600052603260045260246000fd5b61ffff90921660209290920201528061142b81611b92565b91505061133a565b5060408051808201825261ffff8881168252602080830185815260008c815260039092529390208251815461ffff191692169190911781559151909190611480906001830190600f61151b565b5090505082156114ca578561ffff16877f04171f09eda17eeaa4cdcd6bce0edd716626170c188afc0f5c5b3e97a99e225e87876040516114c1929190611941565b60405180910390a35b50505050505050565b7fffffffffffffffffffffffffffffffffffffffff000000007fffffffffffffff81165b919050565b604051806101e00160405280600f906020820280368337509192915050565b6001830191839082156115a15791602002820160005b8382111561157157835183826101000a81548161ffff021916908361ffff1602179055509260200192600201602081600101049283019260010302611531565b801561159f5782816101000a81549061ffff0219169055600201602081600101049283019260010302611571565b505b506115ad9291506115b1565b5090565b5b808211156115ad57600081556001016115b2565b60008083601f8401126115d7578081fd5b50813567ffffffffffffffff8111156115ee578182fd5b602083019150836020808302850101111561160857600080fd5b9250929050565b803561ffff811681146114f757600080fd5b805163ffffffff811681146114f757600080fd5b600060208284031215611646578081fd5b81356001600160a01b038116811461165c578182fd5b9392505050565b60006020808385031215611675578182fd5b825167ffffffffffffffff8082111561168c578384fd5b818501915085601f83011261169f578384fd5b8151818111156116b1576116b1611bc8565b838102604051601f19603f830116810181811085821117156116d5576116d5611bc8565b604052828152858101935084860182860187018a10156116f3578788fd5b8795505b8386101561171c5761170881611621565b8552600195909501949386019386016116f7565b5098975050505050505050565b60006020828403121561173a578081fd5b61165c8261160f565b600060208284031215611754578081fd5b5035919050565b60008060006040848603121561176f578182fd5b83359250602084013567ffffffffffffffff81111561178c578283fd5b611798868287016115c6565b9497909650939450505050565b60008060006040848603121561176f578283fd5b600080600080606085870312156117ce578081fd5b843593506117de6020860161160f565b9250604085013567ffffffffffffffff8111156117f9578182fd5b611805878288016115c6565b95989497509550505050565b600080600080600060808688031215611828578081fd5b853594506118386020870161160f565b9350604086013567ffffffffffffffff80821115611854578283fd5b61186089838a016115c6565b9095509350606088013591508082168214611879578283fd5b50809150509295509295909350565b600060208284031215611899578081fd5b815160ff8116811461165c578182fd5b6000815180845260208085019450808401835b838110156118dc57815161ffff16875295820195908201906001016118bc565b509495945050505050565b6040808252810183905260008460608301825b868110156119235761ffff61190e8461160f565b168252602092830192909101906001016118fa565b50809250505067ffffffffffffffff83166020830152949350505050565b60006040825261195460408301856118a9565b905067ffffffffffffffff831660208301529392505050565b6020808252825182820181905260009190848201906040850190845b818110156119ab57835163ffffffff1683529284019291840191600101611989565b50909695505050505050565b6000841515825261ffff84166020830152606060408301526119dc60608301846118a9565b95945050505050565b6000606080830161ffff80891685526020888187015260408481880152838885526080880190506080838a02890101945089875b8a811015611b2f577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808a880301835281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc18d3603018112611a7957898afd5b8c018785018135368390037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1018112611ab0578b8cfd5b8201803567ffffffffffffffff811115611ac8578c8dfd5b8881023603841315611ad8578c8dfd5b878b52918290528701908b908b8b015b81831015611b0f578a611afa8561160f565b16815292890192600192909201918901611ae8565b938901359a89019a909a5250909750509184019190840190600101611a19565b50949c9b505050505050505050505050565b60008219821115611b5457611b54611bb2565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611b8b57611b8b611bb2565b5060010190565b600060ff821660ff811415611ba957611ba9611bb2565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220dec5ea58a1c36e46638e60ed9ea5e17e7446c4d05a38f8b9d60256ca9f109a3264736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addGems(uint256,uint16[])": {
        "params": {
          "assetId": "id of the asset",
          "gemIds": "list of gems ids to set"
        }
      },
      "changeAdmin(address)": {
        "details": "Change the administrator to be `newAdmin`.",
        "params": {
          "newAdmin": "The address of the new administrator."
        }
      },
      "changeMinter(address)": {
        "details": "Change the minter to be `newMinter`.",
        "params": {
          "newMinter": "The address of the new minter."
        }
      },
      "changeUpgrader(address)": {
        "details": "Change the upgrader to be `newUpgrader`.",
        "params": {
          "newUpgrader": "The address of the new upgrader."
        }
      },
      "constructor": {
        "params": {
          "admin": ": for setting the migration contract address",
          "gemsCatalystsRegistry": ": GemsCatalystsRegistry for fetching attributes",
          "minter": ": allowed to set gems and catalysts for a given asset"
        }
      },
      "getAdmin()": {
        "details": "Get the current administrator of this contract.",
        "returns": {
          "_0": "The current administrator of this contract."
        }
      },
      "getAttributes(uint256,(uint16[],bytes32)[])": {
        "params": {
          "assetId": "id of the asset"
        },
        "returns": {
          "values": "The array of values(256) requested."
        }
      },
      "getMinter()": {
        "details": "Get the current minter of this contract.",
        "returns": {
          "_0": "The current minter of this contract."
        }
      },
      "getRecord(uint256)": {
        "params": {
          "assetId": "id of the asset"
        }
      },
      "getUpgrader()": {
        "details": "Get the current upgrader of this contract.",
        "returns": {
          "_0": "The current upgrader of this contract."
        }
      },
      "setCatalyst(uint256,uint16,uint16[])": {
        "params": {
          "assetId": "id of the asset",
          "catalystId": "id of the catalyst to set",
          "gemIds": "list of gems ids to set"
        }
      },
      "setCatalystWhenDepositOnOtherLayer(uint256,uint16,uint16[])": {
        "params": {
          "assetId": "id of the asset",
          "catalystId": "id of the catalyst to set",
          "gemIds": "list of gems ids to set"
        }
      },
      "setCatalystWithBlockNumber(uint256,uint16,uint16[],uint64)": {
        "params": {
          "assetId": "id of the asset",
          "blockNumber": "block number",
          "catalystId": "id of the catalyst to set",
          "gemIds": "list of gems ids to set"
        }
      },
      "setMigrationContract(address)": {
        "params": {
          "_migrationContract": "address of the migration contract"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addGems(uint256,uint16[])": {
        "notice": "adds gems to an existing list of gems of an asset, upgrader only"
      },
      "constructor": {
        "notice": "AssetAttributesRegistry depends on"
      },
      "getAttributes(uint256,(uint16[],bytes32)[])": {
        "notice": "getAttributes"
      },
      "getRecord(uint256)": {
        "notice": "get the record data (catalyst id, gems ids list) for an asset id"
      },
      "setCatalyst(uint256,uint16,uint16[])": {
        "notice": "sets the catalyst and gems for an asset, minter only"
      },
      "setCatalystWhenDepositOnOtherLayer(uint256,uint16,uint16[])": {
        "notice": "sets the catalyst and gems when an asset goes over layers"
      },
      "setCatalystWithBlockNumber(uint256,uint16,uint16[],uint64)": {
        "notice": "sets the catalyst and gems for an asset for a given block number, migration contract only"
      },
      "setMigrationContract(address)": {
        "notice": "set the migration contract address, admin or migration contract only"
      }
    },
    "notice": "Allows setting the gems and catalysts of an asset",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 32964,
        "contract": "src/solc_0.8/asset/AssetAttributesRegistry.sol:AssetAttributesRegistry",
        "label": "_admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 33088,
        "contract": "src/solc_0.8/asset/AssetAttributesRegistry.sol:AssetAttributesRegistry",
        "label": "_minter",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 33535,
        "contract": "src/solc_0.8/asset/AssetAttributesRegistry.sol:AssetAttributesRegistry",
        "label": "_upgrader",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 15633,
        "contract": "src/solc_0.8/asset/AssetAttributesRegistry.sol:AssetAttributesRegistry",
        "label": "_records",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Record)15644_storage)"
      },
      {
        "astId": 15635,
        "contract": "src/solc_0.8/asset/AssetAttributesRegistry.sol:AssetAttributesRegistry",
        "label": "migrationContract",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 15637,
        "contract": "src/solc_0.8/asset/AssetAttributesRegistry.sol:AssetAttributesRegistry",
        "label": "overLayerDepositor",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint16)15_storage": {
        "base": "t_uint16",
        "encoding": "inplace",
        "label": "uint16[15]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_struct(Record)15644_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct AssetAttributesRegistry.Record)",
        "numberOfBytes": "32",
        "value": "t_struct(Record)15644_storage"
      },
      "t_struct(Record)15644_storage": {
        "encoding": "inplace",
        "label": "struct AssetAttributesRegistry.Record",
        "members": [
          {
            "astId": 15639,
            "contract": "src/solc_0.8/asset/AssetAttributesRegistry.sol:AssetAttributesRegistry",
            "label": "catalystId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 15643,
            "contract": "src/solc_0.8/asset/AssetAttributesRegistry.sol:AssetAttributesRegistry",
            "label": "gemIds",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint16)15_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}