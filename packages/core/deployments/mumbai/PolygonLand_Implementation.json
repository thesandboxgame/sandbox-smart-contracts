{
  "address": "0x1680Dd4B1a8A167337cf0e22e02e5a75440f415C",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "subscriptionOrRegistrant",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "subscribe",
          "type": "bool"
        }
      ],
      "name": "ContractRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "Minter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "registry",
          "type": "address"
        }
      ],
      "name": "OperatorRegistrySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "superOperator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "SuperOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newForwarder",
          "type": "address"
        }
      ],
      "name": "TrustedForwarderSet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "approveFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "batchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "sizes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "xs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ys",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "batchTransferQuad",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "changeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "height",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "isMinter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "isSuperOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mintAndTransferQuad",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mintQuad",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operatorFilterRegistry",
      "outputs": [
        {
          "internalType": "contract IOperatorFilterRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "subscriptionOrRegistrantToCopy",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "subscribe",
          "type": "bool"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAllFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "registry",
          "type": "address"
        }
      ],
      "name": "setOperatorRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "superOperator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setSuperOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "id",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "transferQuad",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "width",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xe1039f720490f12c0e866985b08089b7918db7ebf6c6b3952f405994aab14ced",
  "receipt": {
    "to": null,
    "from": "0x5F890c9522dCE5670d741D4277BFCC2d9cA8Af02",
    "contractAddress": "0x1680Dd4B1a8A167337cf0e22e02e5a75440f415C",
    "transactionIndex": 0,
    "gasUsed": "5273153",
    "logsBloom": "0x00000000000000020000000000000000000000000000000000000000000000000002000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000800000000000000000000100000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000200000200000000000000020000000000000000001000000000000000000000000004000000000000000000001000000000000000000000000000000108000000000000000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0xa0b744e5af3fa7c5725d26388c36349a4b6c2d3369663ad81d1c4a40816608bc",
    "transactionHash": "0xe1039f720490f12c0e866985b08089b7918db7ebf6c6b3952f405994aab14ced",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 37073725,
        "transactionHash": "0xe1039f720490f12c0e866985b08089b7918db7ebf6c6b3952f405994aab14ced",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000051f615479c2d7f000000000000000000000000000000000000000000000001170224f116d451479000000000000000000000000000000000000000000002051594720fa331b1dd50000000000000000000000000000000000000000000000116b02edbcf3823c890000000000000000000000000000000000000000000020515e66824eacddf5c5",
        "logIndex": 0,
        "blockHash": "0xa0b744e5af3fa7c5725d26388c36349a4b6c2d3369663ad81d1c4a40816608bc"
      }
    ],
    "blockNumber": 37073725,
    "cumulativeGasUsed": "5273153",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "68632486976fd8dea4bb2dfd6afc2814",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriptionOrRegistrant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"subscribe\",\"type\":\"bool\"}],\"name\":\"ContractRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"Minter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"OperatorRegistrySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"superOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SuperOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newForwarder\",\"type\":\"address\"}],\"name\":\"TrustedForwarderSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approveFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"batchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"sizes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"xs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ys\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"batchTransferQuad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"height\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isSuperOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintAndTransferQuad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintQuad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorFilterRegistry\",\"outputs\":[{\"internalType\":\"contract IOperatorFilterRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"subscriptionOrRegistrantToCopy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"subscribe\",\"type\":\"bool\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAllFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"setOperatorRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"superOperator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setSuperOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"id\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferQuad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"width\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"params\":{\"id\":\"The id of the token\",\"operator\":\"The address receiving the approval\"}},\"approveFor(address,address,uint256)\":{\"params\":{\"id\":\"The id of the token\",\"operator\":\"The address receiving the approval\",\"sender\":\"The address giving the approval\"}},\"balanceOf(address)\":{\"params\":{\"owner\":\"The address to look for.\"},\"returns\":{\"_0\":\"The number of tokens owned by the address.\"}},\"batchTransferFrom(address,address,uint256[],bytes)\":{\"params\":{\"data\":\"Additional data.\",\"from\":\"The sender of the token.\",\"ids\":\"The ids of the tokens.\",\"to\":\"The recipient of the token.\"}},\"batchTransferQuad(address,address,uint256[],uint256[],uint256[],bytes)\":{\"params\":{\"data\":\"additional data\",\"from\":\"current owner of the quad\",\"sizes\":\"list of sizes for each quad\",\"to\":\"destination\",\"xs\":\"list of bottom left x coordinates for each quad\",\"ys\":\"list of bottom left y coordinates for each quad\"}},\"burn(uint256)\":{\"params\":{\"id\":\"The token which will be burnt.\"}},\"burnFrom(address,uint256)\":{\"params\":{\"from\":\"address whose token is to be burnt.\",\"id\":\"The token which will be burnt.\"}},\"changeAdmin(address)\":{\"details\":\"Change the administrator to be `newAdmin`.\",\"params\":{\"newAdmin\":\"The address of the new administrator.\"}},\"exists(uint256,uint256,uint256)\":{\"params\":{\"size\":\"size of the\",\"x\":\"x coordinate of the quad\",\"y\":\"y coordinate of the quad\"},\"returns\":{\"_0\":\"bool for if Land has been minted or not\"}},\"getAdmin()\":{\"details\":\"Get the current administrator of this contract.\",\"returns\":{\"_0\":\"The current administrator of this contract.\"}},\"getApproved(uint256)\":{\"params\":{\"id\":\"The id of the token.\"},\"returns\":{\"_0\":\"The address of the operator.\"}},\"getTrustedForwarder()\":{\"returns\":{\"_0\":\"trustedForwarder address of the trusted forwarder\"}},\"getX(uint256)\":{\"params\":{\"id\":\"tokenId\"},\"returns\":{\"_0\":\"the x coordinates\"}},\"getY(uint256)\":{\"params\":{\"id\":\"tokenId\"},\"returns\":{\"_0\":\"the y coordinates\"}},\"height()\":{\"returns\":{\"_0\":\"height\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"operator\":\"The address of the operator.\",\"owner\":\"The address of the owner.\"},\"returns\":{\"_0\":\"isOperator The status of the approval.\"}},\"isMinter(address)\":{\"params\":{\"who\":\"The address to query.\"},\"returns\":{\"_0\":\"whether the address has minter rights.\"}},\"isSuperOperator(address)\":{\"params\":{\"who\":\"The address to query.\"},\"returns\":{\"_0\":\"whether the address has superOperator rights.\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"address to check\"},\"returns\":{\"_0\":\"is trusted\"}},\"mintAndTransferQuad(address,uint256,uint256,uint256,bytes)\":{\"params\":{\"data\":\"extra data to pass to the transfer\",\"size\":\"The size of the new quad\",\"to\":\"The recipient of the new quad\",\"x\":\"The top left x coordinate of the new quad\",\"y\":\"The top left y coordinate of the new quad\"}},\"mintQuad(address,uint256,uint256,uint256,bytes)\":{\"params\":{\"data\":\"extra data to pass to the transfer\",\"size\":\"The size of the new quad\",\"user\":\"The recipient of the new quad\",\"x\":\"The top left x coordinate of the new quad\",\"y\":\"The top left y coordinate of the new quad\"}},\"name()\":{\"returns\":{\"_0\":\"The name of the token contract\"}},\"ownerOf(uint256)\":{\"params\":{\"id\":\"The id of the token.\"},\"returns\":{\"owner\":\"The address of the token owner.\"}},\"register(address,bool)\":{\"details\":\"can only be called by admin.\",\"params\":{\"subscribe\":\"bool to signify subscription 'true' or to copy the list 'false'.\",\"subscriptionOrRegistrantToCopy\":\"registration address of the list to subscribe.\"}},\"safeBatchTransferFrom(address,address,uint256[],bytes)\":{\"params\":{\"data\":\"Additional data.\",\"from\":\"The sender of the token.\",\"ids\":\"The ids of the tokens.\",\"to\":\"The recipient of the token.\"}},\"safeTransferFrom(address,address,uint256)\":{\"params\":{\"from\":\"The send of the token\",\"id\":\"The id of the token\",\"to\":\"The recipient of the token\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"params\":{\"data\":\"Additional data\",\"from\":\"The sender of the token\",\"id\":\"The id of the token\",\"to\":\"The recipient of the token\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"approved\":\"The determination of the approval\",\"operator\":\"The address receiving the approval\"}},\"setApprovalForAllFor(address,address,bool)\":{\"params\":{\"approved\":\"The determination of the approval\",\"operator\":\"The address receiving the approval\",\"sender\":\"The address giving the approval\"}},\"setMinter(address,bool)\":{\"params\":{\"enabled\":\"set whether the minter is enabled or disabled.\",\"minter\":\"address that will be given/removed minter right.\"}},\"setOperatorRegistry(address)\":{\"params\":{\"registry\":\"the address of the registry\"}},\"setSuperOperator(address,bool)\":{\"params\":{\"enabled\":\"set whether the superOperator is enabled or disabled.\",\"superOperator\":\"address that will be given/removed superOperator right.\"}},\"setTrustedForwarder(address)\":{\"details\":\"Change the address of the trusted forwarder for meta-TX\",\"params\":{\"trustedForwarder\":\"The new trustedForwarder\"}},\"supportsInterface(bytes4)\":{\"params\":{\"id\":\"The id of the interface\"},\"returns\":{\"_0\":\"True if the interface is supported\"}},\"symbol()\":{\"returns\":{\"_0\":\"The symbol of the token contract\"}},\"tokenURI(uint256)\":{\"params\":{\"id\":\"The id of the token\"},\"returns\":{\"_0\":\"The URI of the token\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"from\":\"The sender of the token\",\"id\":\"The id of the token\",\"to\":\"The recipient of the token\"}},\"transferQuad(address,address,uint256,uint256,uint256,bytes)\":{\"params\":{\"data\":\"additional data for transfer\",\"from\":\"current owner of the quad\",\"size\":\"size of the quad\",\"to\":\"destination\",\"x\":\"The top left x coordinate of the quad\",\"y\":\"The top left y coordinate of the quad\"}},\"width()\":{\"returns\":{\"_0\":\"width\"}}},\"title\":\"LAND token on L2\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Approve an operator to spend tokens on the sender behalf\"},\"approveFor(address,address,uint256)\":{\"notice\":\"Approve an operator to spend tokens on the sender behalf\"},\"balanceOf(address)\":{\"notice\":\"Get the number of tokens owned by an address.\"},\"batchTransferFrom(address,address,uint256[],bytes)\":{\"notice\":\"Transfer many tokens between 2 addresses.\"},\"batchTransferQuad(address,address,uint256[],uint256[],uint256[],bytes)\":{\"notice\":\"transfer multiple quad (aligned to a quad tree with size 3, 6, 12 or 24 only)\"},\"burn(uint256)\":{\"notice\":\"Burns token `id`.\"},\"burnFrom(address,uint256)\":{\"notice\":\"Burn token `id` from `from`.\"},\"changeAdmin(address)\":{\"notice\":\"Change the admin of the contract\"},\"exists(uint256,uint256,uint256)\":{\"notice\":\"checks if Land has been minted or not\"},\"getAdmin()\":{\"notice\":\"Get the current admin\"},\"getApproved(uint256)\":{\"notice\":\"Get the approved operator for a specific token.\"},\"getTrustedForwarder()\":{\"notice\":\"Get the current trusted forwarder\"},\"getX(uint256)\":{\"notice\":\"x coordinate of Land token\"},\"getY(uint256)\":{\"notice\":\"y coordinate of Land token\"},\"height()\":{\"notice\":\"total height of the map\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Check if the sender approved the operator.\"},\"isMinter(address)\":{\"notice\":\"check whether address `who` is given minter rights.\"},\"isSuperOperator(address)\":{\"notice\":\"check whether address `who` is given superOperator rights.\"},\"isTrustedForwarder(address)\":{\"notice\":\"Checks if an address is a trusted forwarder\"},\"mintAndTransferQuad(address,uint256,uint256,uint256,bytes)\":{\"notice\":\"Checks if a parent quad has child quads already minted.  Then mints the rest child quads and transfers the parent quad.  Should only be called by the tunnel.\"},\"mintQuad(address,uint256,uint256,uint256,bytes)\":{\"notice\":\"Mint a new quad (aligned to a quad tree with size 1, 3, 6, 12 or 24 only)\"},\"name()\":{\"notice\":\"Return the name of the token contract\"},\"ownerOf(uint256)\":{\"notice\":\"Get the owner of a token.\"},\"register(address,bool)\":{\"notice\":\"This function is used to register Land contract on the Operator Filterer Registry of Opensea.\"},\"safeBatchTransferFrom(address,address,uint256[],bytes)\":{\"notice\":\"Transfer many tokens between 2 addresses, while ensuring the receiving contract has a receiver method.\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"Transfer a token between 2 addresses letting the receiver knows of the transfer\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Transfer a token between 2 addresses letting the receiver knows of the transfer\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Set the approval for an operator to manage all the tokens of the sender\"},\"setApprovalForAllFor(address,address,bool)\":{\"notice\":\"Set the approval for an operator to manage all the tokens of the sender\"},\"setMinter(address,bool)\":{\"notice\":\"Enable or disable the ability of `minter` to transfer tokens of all (minter rights).\"},\"setOperatorRegistry(address)\":{\"notice\":\"sets filter registry address deployed in test\"},\"setSuperOperator(address,bool)\":{\"notice\":\"Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights).\"},\"supportsInterface(bytes4)\":{\"notice\":\"Check if the contract supports an interface 0x01ffc9a7 is ERC-165 0x80ac58cd is ERC-721 0x5b5e139f is ERC-721 metadata\"},\"symbol()\":{\"notice\":\"Return the symbol of the token contract\"},\"tokenURI(uint256)\":{\"notice\":\"Return the URI of a specific token\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer a token between 2 addresses\"},\"transferQuad(address,address,uint256,uint256,uint256,bytes)\":{\"notice\":\"transfer one quad (aligned to a quad tree with size 3, 6, 12 or 24 only)\"},\"width()\":{\"notice\":\"total width of the map\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/solc_0.8/polygon/child/land/PolygonLandV2.sol\":\"PolygonLandV2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x2f359f9d5c56394e60d74401487ab55d8ef0012907b07c9abbb8f998bf5ddfec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"src/solc_0.8/OperatorFilterer/contracts/upgradeable/OperatorFiltererUpgradeable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport {IOperatorFilterRegistry} from \\\"../../interfaces/IOperatorFilterRegistry.sol\\\";\\nimport {ContextUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\n///@title OperatorFiltererUpgradeable\\n///@author The Sandbox\\n///@notice This contract would subscibe or copy or just to the subscription provided or just register to default subscription list\\n///@dev This contract is the upgradeable version of the OpenSea implementation https://github.com/ProjectOpenSea/operator-filter-registry/blob/main/src/OperatorFilterer.sol and adapted to the 0.5.9 solidity version\\nabstract contract OperatorFiltererUpgradeable is ContextUpgradeable {\\n    IOperatorFilterRegistry public operatorFilterRegistry;\\n\\n    event ContractRegistered(address indexed subscriptionOrRegistrant, bool subscribe);\\n\\n    function __OperatorFilterer_init(address subscriptionOrRegistrantToCopy, bool subscribe) internal onlyInitializing {\\n        _register(subscriptionOrRegistrantToCopy, subscribe);\\n    }\\n\\n    /**\\n     * @notice Register this contract into the registry\\n     * @param subscriptionOrRegistrantToCopy address to subscribe or copy entries from\\n     * @param subscribe should it subscribe\\n     */\\n    function _register(address subscriptionOrRegistrantToCopy, bool subscribe) internal {\\n        if (address(operatorFilterRegistry).code.length > 0) {\\n            if (!operatorFilterRegistry.isRegistered(address(this))) {\\n                if (subscribe) {\\n                    operatorFilterRegistry.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\\n                } else {\\n                    if (subscriptionOrRegistrantToCopy != address(0)) {\\n                        operatorFilterRegistry.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\\n                    } else {\\n                        operatorFilterRegistry.register(address(this));\\n                    }\\n                }\\n            }\\n        }\\n        emit ContractRegistered(subscriptionOrRegistrantToCopy, subscribe);\\n    }\\n\\n    modifier onlyAllowedOperator(address from) virtual {\\n        // Check registry code length to facilitate testing in environments without a deployed registry.\\n        if (address(operatorFilterRegistry).code.length > 0) {\\n            // Allow spending tokens from addresses with balance\\n            // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\\n            // from an EOA.\\n            if (from == _msgSender()) {\\n                _;\\n                return;\\n            }\\n            if (!operatorFilterRegistry.isOperatorAllowed(address(this), _msgSender())) {\\n                revert(\\\"Operator Not Allowed\\\");\\n            }\\n        }\\n        _;\\n    }\\n\\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\\n        // Check registry code length to facilitate testing in environments without a deployed registry.\\n        if (address(operatorFilterRegistry).code.length > 0) {\\n            if (!operatorFilterRegistry.isOperatorAllowed(address(this), operator)) {\\n                revert(\\\"Operator Not Allowed\\\");\\n            }\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x0ceabc23b590c3baccf744a3677118c2ed707055208d35da2bf6ca2308d6ec99\",\"license\":\"MIT\"},\"src/solc_0.8/OperatorFilterer/interfaces/IOperatorFilterRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\n/**\\n * @title IOperatorFilterRegistry\\n * @author OpenSea\\n * @notice Interface of the operator filter registry\\n * @dev This interface comes from OpenSea https://github.com/ProjectOpenSea/operator-filter-registry/blob/main/src/IOperatorFilterRegistry.sol and adapted to the 0.5.9 solidity version\\n */\\ninterface IOperatorFilterRegistry {\\n    /**\\n     * @notice Check if the operator is allowed for the given registrant\\n     * @param registrant address of the registrant\\n     * @param operator operator address to check\\n     * @return is the operator allowed\\n     */\\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\\n\\n    /**\\n     * @notice Register a new address\\n     * @param registrant address to register\\n     */\\n    function register(address registrant) external;\\n\\n    /**\\n     * @notice Register a new address & subscribe to an address\\n     * @param registrant address of the registrant\\n     * @param subscription address where the registrant is subscribed to\\n     */\\n    function registerAndSubscribe(address registrant, address subscription) external;\\n\\n    /**\\n     * @notice Register and copy entries of another registrant\\n     * @param registrant address of the registrant\\n     * @param registrantToCopy address to copy from\\n     */\\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\\n\\n    /**\\n     * @notice update the operator for a registrant\\n     * @param registrant address of the registrant\\n     * @param operator operator to be updated\\n     * @param filtered is it filtered\\n     */\\n    function updateOperator(\\n        address registrant,\\n        address operator,\\n        bool filtered\\n    ) external;\\n\\n    /**\\n     * @notice Update operators for a registrant\\n     * @param registrant address of the registrant\\n     * @param operators addresses of the operators\\n     * @param filtered is it filtered\\n     */\\n    function updateOperators(\\n        address registrant,\\n        address[] calldata operators,\\n        bool filtered\\n    ) external;\\n\\n    /**\\n     * @notice Update code hash\\n     * @param registrant address of the registrant\\n     * @param codehash code hash\\n     * @param filtered is it filtered\\n     */\\n    function updateCodeHash(\\n        address registrant,\\n        bytes32 codehash,\\n        bool filtered\\n    ) external;\\n\\n    /**\\n     * @notice Update code hashes\\n     * @param registrant address of the registrant\\n     * @param codeHashes code hashes\\n     * @param filtered is it filtered\\n     */\\n    function updateCodeHashes(\\n        address registrant,\\n        bytes32[] calldata codeHashes,\\n        bool filtered\\n    ) external;\\n\\n    /**\\n     * @notice Subscribe a registrant\\n     * @param registrant address of the registrant\\n     * @param registrantToSubscribe address to subscribe with\\n     */\\n    function subscribe(address registrant, address registrantToSubscribe) external;\\n\\n    /**\\n     * @notice Unsubscribe a registrant\\n     * @param registrant address of the registrant\\n     * @param copyExistingEntries copy existing entries\\n     */\\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\\n\\n    /**\\n     * @notice Get the subscription of an address\\n     * @param addr address to check\\n     * @return registrant the registrant address\\n     */\\n    function subscriptionOf(address addr) external returns (address registrant);\\n\\n    /**\\n     * @notice Get the subscribers of the registrant\\n     * @param registrant address of the registrant\\n     * @return the subscribers addresses\\n     */\\n    function subscribers(address registrant) external returns (address[] memory);\\n\\n    /**\\n     * @notice Get a specific subscriber\\n     * @param registrant address of the registrant\\n     * @param index index to check\\n     * @return the ith subscriber of the registrant\\n     */\\n    function subscriberAt(address registrant, uint256 index) external returns (address);\\n\\n    /**\\n     * @notice Copy the entries of a registrant\\n     * @param registrant address of the registrant\\n     * @param registrantToCopy address to copy\\n     */\\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\\n\\n    /**\\n     * @notice Is a registrant filtered\\n     * @param registrant address of the registrant\\n     * @param operator operator address to check\\n     * @return is it filtered\\n     */\\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\\n\\n    /**\\n     * @notice Is the code hash of an operator filtered\\n     * @param registrant address of the registrant\\n     * @param operatorWithCode operator address to check\\n     * @return is it filtered\\n     */\\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\\n\\n    /**\\n     * @notice Is the code hash filtered\\n     * @param registrant address of the registrant\\n     * @param codeHash code hash\\n     * @return is it filtered\\n     */\\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\\n\\n    /**\\n     * @notice Get the filtered operators\\n     * @param addr address to check\\n     * @return filtered operators\\n     */\\n    function filteredOperators(address addr) external returns (address[] memory);\\n\\n    /**\\n     * @notice Get the filtered code hashes\\n     * @param addr address to check\\n     * @return filtered code hashes\\n     */\\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\\n\\n    /**\\n     * @notice Get a specific operator\\n     * @param registrant address of the registrant\\n     * @param index index to check\\n     * @return address of the operator\\n     */\\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\\n\\n    /**\\n     * @notice Get the ith filtered code hash\\n     * @param registrant address of the registrant\\n     * @param index index to check\\n     * @return the code hash\\n     */\\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\\n\\n    /**\\n     * @notice Is the address registered\\n     * @param addr address to check\\n     * @return is it registered\\n     */\\n    function isRegistered(address addr) external returns (bool);\\n\\n    /**\\n     * @notice Get the code hash for this address\\n     * @param addr address to check\\n     * @return the code hash\\n     */\\n    function codeHashOf(address addr) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0xe399bf85460967b797bd4d2250b0b6ccbfd1188d3c843e2f29147f8061fc1c8e\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/ERC2771Handler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\n/**\\n * @title ERC2771Handler\\n * @author The Sandbox\\n * @notice Handle meta-transactions\\n * @dev minimal ERC2771 handler to keep bytecode-size down\\n * based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.6.0/contracts/metatx/ERC2771Context.sol\\n * with an initializer for proxies and a mutable forwarder\\n */\\nabstract contract ERC2771Handler {\\n    address internal _trustedForwarder;\\n\\n    event TrustedForwarderSet(address indexed newForwarder);\\n\\n    /**\\n     * @dev Initializes the contract\\n     * @param forwarder trusted forwarder address\\n     */\\n    function __ERC2771Handler_initialize(address forwarder) internal {\\n        _trustedForwarder = forwarder;\\n        emit TrustedForwarderSet(_trustedForwarder);\\n    }\\n\\n    /**\\n     * @notice Checks if an address is a trusted forwarder\\n     * @param forwarder address to check\\n     * @return is trusted\\n     */\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    /**\\n     * @notice Get the current trusted forwarder\\n     * @return trustedForwarder address of the trusted forwarder\\n     */\\n    function getTrustedForwarder() external view returns (address) {\\n        return _trustedForwarder;\\n    }\\n\\n    /**\\n     * @dev if the call comes from the trusted forwarder, it gets the real sender by checking the encoded address in the data\\n     * @return sender address of the real sender\\n     */\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    /**\\n     * @dev if the call comes from the trusted forwarder, it substracts the sender address from `msg.data` to get the real `msg.data`\\n     * @return the real `msg.data`\\n     */\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x33482ab5e863b2f5cc22fb9e77f8eff3484e08601326989da02ae1b147245669\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/ERC721BaseTokenV2.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n/* solhint-disable func-order, code-complexity */\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\nimport {AddressUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport {\\n    IERC721ReceiverUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\nimport {IERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport {WithSuperOperatorsV2} from \\\"./WithSuperOperatorsV2.sol\\\";\\nimport {IERC721MandatoryTokenReceiver} from \\\"../interfaces/IERC721MandatoryTokenReceiver.sol\\\";\\nimport {ContextUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\n/// @title ERC721BaseTokenV2\\n/// @author The Sandbox\\n/// @notice Basic functionalities of a NFT\\n/// @dev ERC721 implementation that supports meta-transactions and super operators\\ncontract ERC721BaseTokenV2 is ContextUpgradeable, IERC721Upgradeable, WithSuperOperatorsV2 {\\n    using AddressUpgradeable for address;\\n\\n    bytes4 internal constant _ERC721_RECEIVED = 0x150b7a02;\\n    bytes4 internal constant _ERC721_BATCH_RECEIVED = 0x4b808c46;\\n\\n    bytes4 internal constant ERC165ID = 0x01ffc9a7;\\n    bytes4 internal constant ERC721_MANDATORY_RECEIVER = 0x5e8bf644;\\n\\n    uint256 internal constant NOT_ADDRESS = 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000;\\n    uint256 internal constant OPERATOR_FLAG = (2**255);\\n    uint256 internal constant NOT_OPERATOR_FLAG = OPERATOR_FLAG - 1;\\n    uint256 internal constant BURNED_FLAG = (2**160);\\n\\n    mapping(address => uint256) internal _numNFTPerAddress;\\n    /**\\n     * @dev mapping to store owner of lands and quads.\\n     * For 1x1 lands it also the 255 bit is 1 if that land has operator approved and is 0 if no operator is approved.\\n     * For burned 1x1 Land 160 bit is set to 1.\\n     */\\n    mapping(uint256 => uint256) internal _owners;\\n    mapping(address => mapping(address => bool)) internal _operatorsForAll;\\n    mapping(uint256 => address) internal _operators;\\n\\n    /// @notice Approve an operator to spend tokens on the senders behalf.\\n    /// @param operator The address receiving the approval.\\n    /// @param id The id of the token.\\n    function approve(address operator, uint256 id) public virtual override {\\n        uint256 ownerData = _owners[_storageId(id)];\\n        address owner = _ownerOf(id);\\n        address msgSender = _msgSender();\\n        require(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n        require(\\n            owner == msgSender || _operatorsForAll[owner][msgSender] || _superOperators[msgSender],\\n            \\\"UNAUTHORIZED_APPROVAL\\\"\\n        );\\n        _approveFor(ownerData, operator, id);\\n    }\\n\\n    /// @notice Approve an operator to spend tokens on the sender behalf.\\n    /// @param sender The address giving the approval.\\n    /// @param operator The address receiving the approval.\\n    /// @param id The id of the token.\\n    function approveFor(\\n        address sender,\\n        address operator,\\n        uint256 id\\n    ) public virtual {\\n        uint256 ownerData = _owners[_storageId(id)];\\n        address owner = _ownerOf(id);\\n        address msgSender = _msgSender();\\n        require(sender != address(0), \\\"ZERO_ADDRESS_SENDER\\\");\\n        require(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n        require(\\n            msgSender == sender || _operatorsForAll[sender][msgSender] || _superOperators[msgSender],\\n            \\\"UNAUTHORIZED_APPROVAL\\\"\\n        );\\n        require(address(uint160(ownerData)) == sender, \\\"OWNER_NOT_SENDER\\\");\\n        _approveFor(ownerData, operator, id);\\n    }\\n\\n    /// @notice Transfer a token between 2 addresses.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param id The id of the token.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual override {\\n        _checkTransfer(from, to, id);\\n        _transferFrom(from, to, id);\\n        if (to.isContract() && _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER)) {\\n            require(_checkOnERC721Received(_msgSender(), from, to, id, \\\"\\\"), \\\"ERC721_TRANSFER_REJECTED\\\");\\n        }\\n    }\\n\\n    /// @notice Transfer a token between 2 addresses letting the receiver know of the transfer.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param id The id of the token.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual override {\\n        safeTransferFrom(from, to, id, \\\"\\\");\\n    }\\n\\n    /// @notice Transfer many tokens between 2 addresses.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param ids The ids of the tokens.\\n    /// @param data Additional data.\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) public virtual {\\n        _batchTransferFrom(from, to, ids, data, false);\\n    }\\n\\n    /// @notice Transfer many tokens between 2 addresses, while\\n    /// ensuring the receiving contract has a receiver method.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param ids The ids of the tokens.\\n    /// @param data Additional data.\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external virtual {\\n        _batchTransferFrom(from, to, ids, data, true);\\n    }\\n\\n    /// @notice Set the approval for an operator to manage all the tokens of the sender.\\n    /// @param sender The address giving the approval.\\n    /// @param operator The address receiving the approval.\\n    /// @param approved The determination of the approval.\\n    function setApprovalForAllFor(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) public virtual {\\n        require(sender != address(0), \\\"Invalid sender address\\\");\\n        address msgSender = _msgSender();\\n        require(msgSender == sender || _superOperators[msgSender], \\\"UNAUTHORIZED_APPROVE_FOR_ALL\\\");\\n\\n        _setApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @notice Set the approval for an operator to manage all the tokens of the sender.\\n    /// @param operator The address receiving the approval.\\n    /// @param approved The determination of the approval.\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /// @notice Burns token `id`.\\n    /// @param id The token which will be burnt.\\n    function burn(uint256 id) external virtual {\\n        _burn(_msgSender(), _ownerOf(id), id);\\n    }\\n\\n    /// @notice Burn token `id` from `from`.\\n    /// @param from address whose token is to be burnt.\\n    /// @param id The token which will be burnt.\\n    function burnFrom(address from, uint256 id) external virtual {\\n        require(from != address(0), \\\"NOT_FROM_ZEROADDRESS\\\");\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n        address msgSender = _msgSender();\\n        require(\\n            msgSender == from ||\\n                (operatorEnabled && _operators[id] == msgSender) ||\\n                _superOperators[msgSender] ||\\n                _operatorsForAll[from][msgSender],\\n            \\\"UNAUTHORIZED_BURN\\\"\\n        );\\n        _burn(from, owner, id);\\n    }\\n\\n    /// @notice Get the number of tokens owned by an address.\\n    /// @param owner The address to look for.\\n    /// @return The number of tokens owned by the address.\\n    function balanceOf(address owner) external view override returns (uint256) {\\n        require(owner != address(0), \\\"ZERO_ADDRESS_OWNER\\\");\\n        return _numNFTPerAddress[owner];\\n    }\\n\\n    /// @notice Get the owner of a token.\\n    /// @param id The id of the token.\\n    /// @return owner The address of the token owner.\\n    function ownerOf(uint256 id) external view override returns (address owner) {\\n        owner = _ownerOf(id);\\n        require(owner != address(0), \\\"NONEXISTANT_TOKEN\\\");\\n    }\\n\\n    /// @notice Get the approved operator for a specific token.\\n    /// @param id The id of the token.\\n    /// @return The address of the operator.\\n    function getApproved(uint256 id) external view override returns (address) {\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n        require(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n        if (operatorEnabled) {\\n            return _operators[id];\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    /// @notice Check if the sender approved the operator.\\n    /// @param owner The address of the owner.\\n    /// @param operator The address of the operator.\\n    /// @return isOperator The status of the approval.\\n    function isApprovedForAll(address owner, address operator) external view override returns (bool) {\\n        return _operatorsForAll[owner][operator] || _superOperators[operator];\\n    }\\n\\n    /// @notice Transfer a token between 2 addresses letting the receiver knows of the transfer.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param id The id of the token.\\n    /// @param data Additional data.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) public virtual override {\\n        _checkTransfer(from, to, id);\\n        _transferFrom(from, to, id);\\n        if (to.isContract()) {\\n            require(_checkOnERC721Received(_msgSender(), from, to, id, data), \\\"ERC721_TRANSFER_REJECTED\\\");\\n        }\\n    }\\n\\n    /// @notice Check if the contract supports an interface.\\n    /// 0x01ffc9a7 is ERC-165.\\n    /// 0x80ac58cd is ERC-721\\n    /// @param id The id of the interface.\\n    /// @return Whether the interface is supported.\\n    function supportsInterface(bytes4 id) public pure virtual override returns (bool) {\\n        return id == 0x01ffc9a7 || id == 0x80ac58cd;\\n    }\\n\\n    /// @dev By overriding this function in an implementation which inherits this contract,\\n    /// you can enable versioned tokenIds without the extra overhead of writing to a new storage slot in _owners each time a version is incremented.\\n    /// See GameToken._storageId() for an example, where the storageId is the tokenId minus the version number.\\n    /// !!! Caution !!! Overriding this function without taking appropriate care could lead to\\n    /// ownerOf() returning an owner for non-existent tokens. Tests should be written to\\n    /// guard against introducing this bug.\\n    /// @param id The id of a token.\\n    /// @return The id used for storage mappings.\\n    function _storageId(uint256 id) internal view virtual returns (uint256) {\\n        return id;\\n    }\\n\\n    function _updateOwnerData(\\n        uint256 id,\\n        uint256 oldData,\\n        address newOwner,\\n        bool hasOperator\\n    ) internal virtual {\\n        if (hasOperator) {\\n            _owners[_storageId(id)] = (oldData & NOT_ADDRESS) | OPERATOR_FLAG | uint256(uint160(newOwner));\\n        } else {\\n            _owners[_storageId(id)] = ((oldData & NOT_ADDRESS) & NOT_OPERATOR_FLAG) | uint256(uint160(newOwner));\\n        }\\n    }\\n\\n    function _transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) internal {\\n        _numNFTPerAddress[from]--;\\n        _numNFTPerAddress[to]++;\\n        _updateOwnerData(id, _owners[_storageId(id)], to, false);\\n        emit Transfer(from, to, id);\\n    }\\n\\n    /// @dev See approveFor.\\n    function _approveFor(\\n        uint256 ownerData,\\n        address operator,\\n        uint256 id\\n    ) internal {\\n        address owner = _ownerOf(id);\\n        if (operator == address(0)) {\\n            _updateOwnerData(id, ownerData, owner, false);\\n        } else {\\n            _updateOwnerData(id, ownerData, owner, true);\\n            _operators[id] = operator;\\n        }\\n        emit Approval(owner, operator, id);\\n    }\\n\\n    /// @dev See batchTransferFrom.\\n    function _batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        bytes memory data,\\n        bool safe\\n    ) internal {\\n        address msgSender = _msgSender();\\n        bool authorized = msgSender == from || _operatorsForAll[from][msgSender] || _superOperators[msgSender];\\n\\n        require(from != address(0), \\\"NOT_FROM_ZEROADDRESS\\\");\\n        require(to != address(0), \\\"NOT_TO_ZEROADDRESS\\\");\\n\\n        uint256 numTokens = ids.length;\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            uint256 id = ids[i];\\n            (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n            require(owner == from, \\\"BATCHTRANSFERFROM_NOT_OWNER\\\");\\n            require(authorized || (operatorEnabled && _operators[id] == msgSender), \\\"NOT_AUTHORIZED\\\");\\n            _updateOwnerData(id, _owners[_storageId(id)], to, false);\\n            emit Transfer(from, to, id);\\n        }\\n        if (from != to) {\\n            _numNFTPerAddress[from] -= numTokens;\\n            _numNFTPerAddress[to] += numTokens;\\n        }\\n\\n        if (to.isContract()) {\\n            if (_checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER)) {\\n                require(_checkOnERC721BatchReceived(msgSender, from, to, ids, data), \\\"ERC721_BATCH_RECEIVED_REJECTED\\\");\\n            } else if (safe) {\\n                for (uint256 i = 0; i < numTokens; i++) {\\n                    require(_checkOnERC721Received(msgSender, from, to, ids[i], data), \\\"ERC721_RECEIVED_REJECTED\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev See setApprovalForAll.\\n    function _setApprovalForAll(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) internal {\\n        require(!_superOperators[operator], \\\"INVALID_APPROVAL_CHANGE\\\");\\n        _operatorsForAll[sender][operator] = approved;\\n\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @dev See burn.\\n    function _burn(\\n        address from,\\n        address owner,\\n        uint256 id\\n    ) internal {\\n        require(from == owner, \\\"NOT_OWNER\\\");\\n        uint256 storageId = _storageId(id);\\n        _owners[storageId] = (_owners[storageId] & NOT_OPERATOR_FLAG) | BURNED_FLAG; // record as non owner but keep track of last owner\\n        _numNFTPerAddress[from]--;\\n        emit Transfer(from, address(0), id);\\n    }\\n\\n    /// @dev Check if receiving contract accepts erc721 transfers.\\n    /// @param operator The address of the operator.\\n    /// @param from The from address, may be different from msg.sender.\\n    /// @param to The address we want to transfer to.\\n    /// @param tokenId The id of the token we would like to transfer.\\n    /// @param _data Any additional data to send with the transfer.\\n    /// @return Whether the expected value of 0x150b7a02 is returned.\\n    function _checkOnERC721Received(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal returns (bool) {\\n        bytes4 retval = IERC721ReceiverUpgradeable(to).onERC721Received(operator, from, tokenId, _data);\\n        return (retval == _ERC721_RECEIVED);\\n    }\\n\\n    /// @dev Check if receiving contract accepts erc721 batch transfers.\\n    /// @param operator The address of the operator.\\n    /// @param from The from address, may be different from msg.sender.\\n    /// @param to The address we want to transfer to.\\n    /// @param ids The ids of the tokens we would like to transfer.\\n    /// @param _data Any additional data to send with the transfer.\\n    /// @return Whether the expected value of 0x4b808c46 is returned.\\n    function _checkOnERC721BatchReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        bytes memory _data\\n    ) internal returns (bool) {\\n        bytes4 retval = IERC721MandatoryTokenReceiver(to).onERC721BatchReceived(operator, from, ids, _data);\\n        return (retval == _ERC721_BATCH_RECEIVED);\\n    }\\n\\n    /// @dev See ownerOf\\n    function _ownerOf(uint256 id) internal view virtual returns (address) {\\n        uint256 data = _owners[_storageId(id)];\\n        if ((data & BURNED_FLAG) == BURNED_FLAG) {\\n            return address(0);\\n        }\\n        return address(uint160(data));\\n    }\\n\\n    /// @dev Get the owner and operatorEnabled status of a token.\\n    /// @param id The token to query.\\n    /// @return owner The owner of the token.\\n    /// @return operatorEnabled Whether or not operators are enabled for this token.\\n    function _ownerAndOperatorEnabledOf(uint256 id)\\n        internal\\n        view\\n        virtual\\n        returns (address owner, bool operatorEnabled)\\n    {\\n        uint256 data = _owners[_storageId(id)];\\n        if ((data & BURNED_FLAG) == BURNED_FLAG) {\\n            owner = address(0);\\n        } else {\\n            owner = address(uint160(data));\\n        }\\n        operatorEnabled = (data & OPERATOR_FLAG) == OPERATOR_FLAG;\\n    }\\n\\n    /// @dev Check whether a transfer is a meta Transaction or not.\\n    /// @param from The address who initiated the transfer (may differ from msg.sender).\\n    /// @param to The address receiving the token.\\n    /// @param id The token being transferred.\\n    function _checkTransfer(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) internal view {\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n        address msgSender = _msgSender();\\n        require(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n        require(owner == from, \\\"CHECKTRANSFER_NOT_OWNER\\\");\\n        require(to != address(0), \\\"NOT_TO_ZEROADDRESS\\\");\\n        require(\\n            msgSender == owner ||\\n                _superOperators[msgSender] ||\\n                _operatorsForAll[from][msgSender] ||\\n                (operatorEnabled && _operators[id] == msgSender),\\n            \\\"UNAUTHORIZED_TRANSFER\\\"\\n        );\\n    }\\n\\n    /// @dev Check if there was enough gas.\\n    /// @param _contract The address of the contract to check.\\n    /// @param interfaceId The id of the interface we want to test.\\n    /// @return Whether or not this check succeeded.\\n    function _checkInterfaceWith10000Gas(address _contract, bytes4 interfaceId) internal view returns (bool) {\\n        bool success;\\n        bool result;\\n        bytes memory callData = abi.encodeWithSelector(ERC165ID, interfaceId);\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let call_ptr := add(0x20, callData)\\n            let call_size := mload(callData)\\n            let output := mload(0x40) // Find empty storage location using \\\"free memory pointer\\\"\\n            mstore(output, 0x0)\\n            success := staticcall(10000, _contract, call_ptr, call_size, output, 0x20) // 32 bytes\\n            result := mload(output)\\n        }\\n        // (10000 / 63) \\\"not enough for supportsInterface(...)\\\" // consume all gas, so caller can potentially know that there was not enough gas\\n        assert(gasleft() > 158);\\n        return success && result;\\n    }\\n}\\n\",\"keccak256\":\"0x4bdcda30d7b3e0bc4575b441afe106fa855244f01e755ebd2c55894abb461232\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/WithAdminV2.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\nimport {ContextUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\n/// @title WithAdminV2\\n/// @author The Sandbox\\n/// @notice Add an admin to the contract\\ncontract WithAdminV2 is ContextUpgradeable {\\n    address internal _admin;\\n\\n    /// @dev Emits when the contract administrator is changed.\\n    /// @param oldAdmin The address of the previous administrator.\\n    /// @param newAdmin The address of the new administrator.\\n    event AdminChanged(address indexed oldAdmin, address indexed newAdmin);\\n\\n    modifier onlyAdmin() {\\n        require(_msgSender() == _admin, \\\"ADMIN_ONLY\\\");\\n        _;\\n    }\\n\\n    /// @notice Get the current admin\\n    /// @dev Get the current administrator of this contract.\\n    /// @return The current administrator of this contract.\\n    function getAdmin() external view returns (address) {\\n        return _admin;\\n    }\\n\\n    /// @notice Change the admin of the contract\\n    /// @dev Change the administrator to be `newAdmin`.\\n    /// @param newAdmin The address of the new administrator.\\n    function changeAdmin(address newAdmin) external {\\n        address admin = _admin;\\n        require(_msgSender() == admin, \\\"ADMIN_ACCESS_DENIED\\\");\\n        emit AdminChanged(admin, newAdmin);\\n        _admin = newAdmin;\\n    }\\n}\\n\",\"keccak256\":\"0x27262f45048499bbf49b6fc7cc393517a1326c0da1bf50016b19938cea4f5b44\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/WithSuperOperatorsV2.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\nimport {WithAdminV2} from \\\"./WithAdminV2.sol\\\";\\nimport {ContextUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\n/// @title WithSuperOperatorsV2\\n/// @author The Sandbox\\n/// @notice Add super operators handled by an admin\\ncontract WithSuperOperatorsV2 is ContextUpgradeable, WithAdminV2 {\\n    mapping(address => bool) internal _superOperators;\\n\\n    event SuperOperator(address indexed superOperator, bool indexed enabled);\\n\\n    /// @notice Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights).\\n    /// @param superOperator address that will be given/removed superOperator right.\\n    /// @param enabled set whether the superOperator is enabled or disabled.\\n    function setSuperOperator(address superOperator, bool enabled) external onlyAdmin {\\n        require(_msgSender() == _admin, \\\"only admin is allowed to add super operators\\\");\\n        _superOperators[superOperator] = enabled;\\n        emit SuperOperator(superOperator, enabled);\\n    }\\n\\n    /// @notice check whether address `who` is given superOperator rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has superOperator rights.\\n    function isSuperOperator(address who) public view returns (bool) {\\n        return _superOperators[who];\\n    }\\n}\\n\",\"keccak256\":\"0xd15e48c2f1e3a8b70e3f9a1d96e38156207e3f3eaf593cc7f46b6def906f9819\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC721MandatoryTokenReceiver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\n/**\\n * @title IERC721MandatoryTokenReceiver\\n * @author The Sandbox\\n * @notice Interface for any contract that wants to support safeBatchTransfers\\n * from ERC721 asset contracts.\\n * @dev The ERC-165 identifier for this interface is 0x5e8bf644.\\n */\\ninterface IERC721MandatoryTokenReceiver {\\n    /**\\n     * @notice Whenever tokens are transferred to this contract via {IERC721-safeBatchTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     * @param operator sender\\n     * @param from owner of the tokens\\n     * @param ids token ids\\n     * @param data extra data\\n     * @return 0x4b808c46 if the transfer is a success\\n     */\\n    function onERC721BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external returns (bytes4); // needs to return 0x4b808c46\\n\\n    /**\\n     * @notice Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     * @param operator sender\\n     * @param from owner of the token\\n     * @param tokenId token id\\n     * @param data extra data\\n     * @return 0x4b808c46 if the transfer is a success\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4); // needs to return 0x150b7a02\\n}\\n\",\"keccak256\":\"0x6e1235c041b7d8747fa458037006e8df72bea62474dd04977e210d19914b7f5d\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/ILandToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\n/// @title ILandToken\\n/// @author The Sandbox\\n/// @notice Interface of the LAND token including quad methods\\ninterface ILandToken {\\n    /// @notice transfer multiple quad (aligned to a quad tree with size 3, 6, 12 or 24 only)\\n    /// @param from current owner of the quad\\n    /// @param to destination\\n    /// @param sizes list of sizes for each quad\\n    /// @param xs list of bottom left x coordinates for each quad\\n    /// @param ys list of bottom left y coordinates for each quad\\n    /// @param data additional data\\n    function batchTransferQuad(\\n        address from,\\n        address to,\\n        uint256[] calldata sizes,\\n        uint256[] calldata xs,\\n        uint256[] calldata ys,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice transfer one quad (aligned to a quad tree with size 3, 6, 12 or 24 only)\\n    /// @param from current owner of the quad\\n    /// @param to destination\\n    /// @param size size of the quad\\n    /// @param x The top left x coordinate of the quad\\n    /// @param y The top left y coordinate of the quad\\n    /// @param data additional data\\n    function transferQuad(\\n        address from,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Transfer many tokens between 2 addresses.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param ids The ids of the tokens.\\n    /// @param data Additional data.\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5df895e3442904d5f6a6ad3b4b34a2ec61d4a97a4b3feea57d5bb611d14a7e3e\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IPolygonLand.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport {ILandToken} from \\\"./ILandToken.sol\\\";\\n\\n/**\\n * @title IPolygonLand\\n * @author The Sandbox\\n * @notice Interface of the LAND token on the child chain\\n */\\ninterface IPolygonLand is ILandToken {\\n    /**\\n     * @notice Mint a new quad (aligned to a quad tree with size 1, 3, 6, 12 or 24 only)\\n     * @param to The recipient of the new quad\\n     * @param size The size of the new quad\\n     * @param x The top left x coordinate of the new quad\\n     * @param y The top left y coordinate of the new quad\\n     * @param data extra data to pass to the transfer\\n     */\\n    function mintQuad(\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes memory data\\n    ) external;\\n\\n    /**\\n     * @notice Checks if a LAND exists by its coordinates\\n     * @param size size of the quad\\n     * @param x x coordinate\\n     * @param y y coordinate\\n     * @return does the LAND exist\\n     */\\n    function exists(\\n        uint256 size,\\n        uint256 x,\\n        uint256 y\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x725deed21224d8adb2b2cc1dd0615447abee654e519cd9e22ffa505954dfc15d\",\"license\":\"MIT\"},\"src/solc_0.8/polygon/child/land/PolygonLandBaseTokenV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable code-complexity\\n\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../../common/BaseWithStorage/ERC721BaseTokenV2.sol\\\";\\nimport \\\"../../../common/interfaces/IPolygonLand.sol\\\";\\n\\n/**\\n * @title PolygonLandBaseTokenV2\\n * @author The Sandbox\\n * @notice Implement LAND and quad functionalities on top of an ERC721 token\\n * @dev This contract implements a quad tree structure to handle groups of ERC721 tokens at once\\n */\\nabstract contract PolygonLandBaseTokenV2 is IPolygonLand, Initializable, ERC721BaseTokenV2 {\\n    using AddressUpgradeable for address;\\n\\n    uint256 internal constant GRID_SIZE = 408;\\n\\n    uint256 internal constant LAYER = 0xFF00000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_1x1 = 0x0000000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_3x3 = 0x0100000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_6x6 = 0x0200000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_12x12 = 0x0300000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_24x24 = 0x0400000000000000000000000000000000000000000000000000000000000000;\\n\\n    mapping(address => bool) internal _minters;\\n\\n    event Minter(address minter, bool enabled);\\n\\n    struct Land {\\n        uint256 x;\\n        uint256 y;\\n        uint256 size;\\n    }\\n\\n    /// @notice transfer multiple quad (aligned to a quad tree with size 3, 6, 12 or 24 only)\\n    /// @param from current owner of the quad\\n    /// @param to destination\\n    /// @param sizes list of sizes for each quad\\n    /// @param xs list of bottom left x coordinates for each quad\\n    /// @param ys list of bottom left y coordinates for each quad\\n    /// @param data additional data\\n    function batchTransferQuad(\\n        address from,\\n        address to,\\n        uint256[] calldata sizes,\\n        uint256[] calldata xs,\\n        uint256[] calldata ys,\\n        bytes calldata data\\n    ) external override {\\n        require(from != address(0), \\\"from is zero address\\\");\\n        require(to != address(0), \\\"can't send to zero address\\\");\\n        require(sizes.length == xs.length, \\\"PolygonLandBaseTokenV2: sizes's and x's length are different\\\");\\n        require(xs.length == ys.length, \\\"PolygonLandBaseTokenV2: x's and y's length are different\\\");\\n        if (_msgSender() != from) {\\n            require(\\n                _operatorsForAll[from][_msgSender()] || _superOperators[_msgSender()],\\n                \\\"not authorized to transferMultiQuads\\\"\\n            );\\n        }\\n        uint256 numTokensTransfered = 0;\\n        for (uint256 i = 0; i < sizes.length; i++) {\\n            uint256 size = sizes[i];\\n            _transferQuad(from, to, size, xs[i], ys[i]);\\n            numTokensTransfered += size * size;\\n        }\\n        _numNFTPerAddress[from] -= numTokensTransfered;\\n        _numNFTPerAddress[to] += numTokensTransfered;\\n\\n        if (to.isContract() && _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER)) {\\n            uint256[] memory ids = new uint256[](numTokensTransfered);\\n            uint256 counter = 0;\\n            for (uint256 j = 0; j < sizes.length; j++) {\\n                uint256 size = sizes[j];\\n                for (uint256 i = 0; i < size * size; i++) {\\n                    ids[counter] = _idInPath(i, size, xs[j], ys[j]);\\n                    counter++;\\n                }\\n            }\\n            require(\\n                _checkOnERC721BatchReceived(_msgSender(), from, to, ids, data),\\n                \\\"erc721 batch transfer rejected by to\\\"\\n            );\\n        }\\n    }\\n\\n    /// @notice Enable or disable the ability of `minter` to transfer tokens of all (minter rights).\\n    /// @param minter address that will be given/removed minter right.\\n    /// @param enabled set whether the minter is enabled or disabled.\\n    function setMinter(address minter, bool enabled) external onlyAdmin {\\n        require(minter != address(0), \\\"PolygonLand: Invalid address\\\");\\n        _minters[minter] = enabled;\\n        emit Minter(minter, enabled);\\n    }\\n\\n    /// @notice transfer one quad (aligned to a quad tree with size 3, 6, 12 or 24 only)\\n    /// @param from current owner of the quad\\n    /// @param to destination\\n    /// @param size size of the quad\\n    /// @param x The top left x coordinate of the quad\\n    /// @param y The top left y coordinate of the quad\\n    /// @param data additional data for transfer\\n    function transferQuad(\\n        address from,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes calldata data\\n    ) external override {\\n        require(from != address(0), \\\"from is zero address\\\");\\n        require(to != address(0), \\\"can't send to zero address\\\");\\n        if (_msgSender() != from) {\\n            require(\\n                _operatorsForAll[from][_msgSender()] || _superOperators[_msgSender()],\\n                \\\"not authorized to transferQuad\\\"\\n            );\\n        }\\n        _transferQuad(from, to, size, x, y);\\n        _numNFTPerAddress[from] -= size * size;\\n        _numNFTPerAddress[to] += size * size;\\n\\n        _checkBatchReceiverAcceptQuad(_msgSender(), from, to, size, x, y, data);\\n    }\\n\\n    /**\\n     * @notice Mint a new quad (aligned to a quad tree with size 1, 3, 6, 12 or 24 only)\\n     * @param user The recipient of the new quad\\n     * @param size The size of the new quad\\n     * @param x The top left x coordinate of the new quad\\n     * @param y The top left y coordinate of the new quad\\n     * @param data extra data to pass to the transfer\\n     */\\n    function mintQuad(\\n        address user,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes memory data\\n    ) external virtual override {\\n        _isValidQuad(size, x, y);\\n        require(isMinter(_msgSender()), \\\"!AUTHORIZED\\\");\\n        _mintQuad(user, size, x, y, data);\\n    }\\n\\n    /**\\n     * @notice Checks if a parent quad has child quads already minted.\\n     *  Then mints the rest child quads and transfers the parent quad.\\n     *  Should only be called by the tunnel.\\n     * @param to The recipient of the new quad\\n     * @param size The size of the new quad\\n     * @param x The top left x coordinate of the new quad\\n     * @param y The top left y coordinate of the new quad\\n     * @param data extra data to pass to the transfer\\n     */\\n    function mintAndTransferQuad(\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes calldata data\\n    ) external virtual {\\n        require(isMinter(msg.sender), \\\"!AUTHORIZED\\\");\\n        require(to != address(0), \\\"to is zero address\\\");\\n\\n        if (exists(size, x, y)) {\\n            _transferQuad(msg.sender, to, size, x, y);\\n            _numNFTPerAddress[msg.sender] -= size * size;\\n            _numNFTPerAddress[to] += size * size;\\n            _checkBatchReceiverAcceptQuad(msg.sender, msg.sender, to, size, x, y, data);\\n        } else {\\n            _mintAndTransferQuad(to, size, x, y, data);\\n        }\\n    }\\n\\n    /// @notice x coordinate of Land token\\n    /// @param id tokenId\\n    /// @return the x coordinates\\n    function getX(uint256 id) external pure returns (uint256) {\\n        return _getX(id);\\n    }\\n\\n    /// @inheritdoc ERC721BaseTokenV2\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) public virtual override(ILandToken, ERC721BaseTokenV2) {\\n        super.batchTransferFrom(from, to, ids, data);\\n    }\\n\\n    /// @notice y coordinate of Land token\\n    /// @param id tokenId\\n    /// @return the y coordinates\\n    function getY(uint256 id) external pure returns (uint256) {\\n        return _getY(id);\\n    }\\n\\n    /**\\n     * @notice Check if the contract supports an interface\\n     * 0x01ffc9a7 is ERC-165\\n     * 0x80ac58cd is ERC-721\\n     * 0x5b5e139f is ERC-721 metadata\\n     * @param id The id of the interface\\n     * @return True if the interface is supported\\n     */\\n    function supportsInterface(bytes4 id) public pure override returns (bool) {\\n        return id == 0x01ffc9a7 || id == 0x80ac58cd || id == 0x5b5e139f;\\n    }\\n\\n    /**\\n     * @notice Return the name of the token contract\\n     * @return The name of the token contract\\n     */\\n    function name() public pure returns (string memory) {\\n        return \\\"Sandbox's LANDs\\\";\\n    }\\n\\n    /// @notice check whether address `who` is given minter rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has minter rights.\\n    function isMinter(address who) public view returns (bool) {\\n        return _minters[who];\\n    }\\n\\n    /// @notice checks if Land has been minted or not\\n    /// @param size size of the\\n    /// @param x x coordinate of the quad\\n    /// @param y y coordinate of the quad\\n    /// @return bool for if Land has been minted or not\\n    function exists(\\n        uint256 size,\\n        uint256 x,\\n        uint256 y\\n    ) public view override returns (bool) {\\n        _isValidQuad(size, x, y);\\n        return _ownerOfQuad(size, x, y) != address(0);\\n    }\\n\\n    /**\\n     * @notice Return the symbol of the token contract\\n     * @return The symbol of the token contract\\n     */\\n    function symbol() public pure returns (string memory) {\\n        return \\\"LAND\\\";\\n    }\\n\\n    /// @notice total width of the map\\n    /// @return width\\n    function width() public pure returns (uint256) {\\n        return GRID_SIZE;\\n    }\\n\\n    /// @notice total height of the map\\n    /// @return height\\n    function height() public pure returns (uint256) {\\n        return GRID_SIZE;\\n    }\\n\\n    /**\\n     * @notice Return the URI of a specific token\\n     * @param id The id of the token\\n     * @return The URI of the token\\n     */\\n    function tokenURI(uint256 id) public view returns (string memory) {\\n        require(_ownerOf(id) != address(0), \\\"Id does not exist\\\");\\n        return\\n            string(\\n                abi.encodePacked(\\\"https://api.sandbox.game/lands/\\\", StringsUpgradeable.toString(id), \\\"/metadata.json\\\")\\n            );\\n    }\\n\\n    function _isValidQuad(\\n        uint256 size,\\n        uint256 x,\\n        uint256 y\\n    ) internal pure {\\n        require(size == 1 || size == 3 || size == 6 || size == 12 || size == 24, \\\"Invalid size\\\");\\n        require(x % size == 0, \\\"Invalid x coordinate\\\");\\n        require(y % size == 0, \\\"Invalid y coordinate\\\");\\n        require(x <= GRID_SIZE - size, \\\"x out of bounds\\\");\\n        require(y <= GRID_SIZE - size, \\\"y out of bounds\\\");\\n    }\\n\\n    function _transferQuad(\\n        address from,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y\\n    ) internal {\\n        _isValidQuad(size, x, y);\\n        if (size == 1) {\\n            uint256 id1x1 = _getQuadId(LAYER_1x1, x, y);\\n            address owner = _ownerOf(id1x1);\\n            require(owner != address(0), \\\"token does not exist\\\");\\n            require(owner == from, \\\"not owner in _transferQuad\\\");\\n            _owners[id1x1] = uint256(uint160(address(to)));\\n        } else {\\n            _regroupQuad(from, to, Land({x: x, y: y, size: size}), true, size / 2);\\n        }\\n        for (uint256 i = 0; i < size * size; i++) {\\n            emit Transfer(from, to, _idInPath(i, size, x, y));\\n        }\\n    }\\n\\n    function _mintQuad(\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes memory data\\n    ) internal {\\n        require(to != address(0), \\\"to is zero address\\\");\\n\\n        (uint256 layer, , ) = _getQuadLayer(size);\\n        uint256 quadId = _getQuadId(layer, x, y);\\n\\n        _checkOwner(size, x, y, 24);\\n        for (uint256 i = 0; i < size * size; i++) {\\n            uint256 _id = _idInPath(i, size, x, y);\\n            require(_owners[_id] == 0, \\\"Already minted\\\");\\n            emit Transfer(address(0), to, _id);\\n        }\\n\\n        _owners[quadId] = uint256(uint160(to));\\n        _numNFTPerAddress[to] += size * size;\\n\\n        _checkBatchReceiverAcceptQuad(msg.sender, address(0), to, size, x, y, data);\\n    }\\n\\n    /**\\n     * @dev checks if the child quads in the parent quad (size, x, y) are owned by msg.sender.\\n     * It recursively checks child quad of every size(exculding Lands of 1x1 size) are minted or not.\\n     * Quad which are minted are pushed into quadMinted to also check if every Land of size 1x1 in\\n     * the parent quad is minted or not. While checking if the every child Quad and Land is minted it\\n     * also checks and clear the owner for quads which are minted. Finally it checks if the new owner\\n     * if is a contract can handle ERC721 tokens or not and transfers the parent quad to new owner.\\n     * @param to The address to which the ownership of the quad will be transferred\\n     * @param size The size of the quad being minted and transfered\\n     * @param x The x-coordinate of the top-left corner of the quad being minted.\\n     * @param y The y-coordinate of the top-left corner of the quad being minted.\\n     * @param y The y-coordinate of the top-left corner of the quad being minted.\\n     */\\n    function _mintAndTransferQuad(\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes memory data\\n    ) internal {\\n        (uint256 layer, , ) = _getQuadLayer(size);\\n        uint256 quadId = _getQuadId(layer, x, y);\\n\\n        // Length of array is equal to number of 3x3 child quad a 24x24 quad can have. Would be used to push the minted Quads.\\n        Land[] memory quadMinted = new Land[](64);\\n        // index of last minted quad pushed on quadMinted Array\\n        uint256 index;\\n        uint256 landMinted;\\n\\n        // if size of the Quad in land struct to be transfered is greater than 3 we check recursivly if the child quads are minted or not.\\n        if (size > 3) {\\n            (index, landMinted) = _checkAndClearOwner(\\n                Land({x: x, y: y, size: size}),\\n                quadMinted,\\n                landMinted,\\n                index,\\n                size / 2\\n            );\\n        }\\n\\n        // Lopping around the Quad in land struct to generate ids of 1x1 land token and checking if they are owned by msg.sender\\n        {\\n            for (uint256 i = 0; i < size * size; i++) {\\n                uint256 _id = _idInPath(i, size, x, y);\\n                // checking land with token id \\\"_id\\\" is in the quadMinted array.\\n                bool isAlreadyMinted = _isQuadMinted(quadMinted, Land({x: _getX(_id), y: _getY(_id), size: 1}), index);\\n                if (isAlreadyMinted) {\\n                    // if land is in the quadMinted array there just emitting transfer event\\n                    emit Transfer(msg.sender, to, _id);\\n                } else {\\n                    if (address(uint160(_owners[_id])) == msg.sender) {\\n                        if (_operators[_id] != address(0)) _operators[_id] = address(0);\\n                        landMinted += 1;\\n                        emit Transfer(msg.sender, to, _id);\\n                    } else {\\n                        // else is checked if owned by the msg.sender or not. If it is not owned by msg.sender it should not have an owner.\\n                        require(_owners[_id] == 0, \\\"Already minted\\\");\\n\\n                        emit Transfer(address(0), to, _id);\\n                    }\\n                }\\n            }\\n        }\\n\\n        // checking if the new owner \\\"to\\\" is a contract. If yes, checking if it could handle ERC721 tokens.\\n        _checkBatchReceiverAcceptQuadAndClearOwner(quadMinted, index, landMinted, to, size, x, y, data);\\n\\n        _owners[quadId] = uint256(uint160(to));\\n        _numNFTPerAddress[to] += size * size;\\n        _numNFTPerAddress[msg.sender] -= landMinted;\\n    }\\n\\n    /**\\n     * @dev recursivly checks if the child quads are minted in land and push them to the quadMinted array.\\n     * if a child quad is minted in land such quads child quads will be skipped such that there is no overlapping\\n     * in quads which are minted. it clears the minted child quads owners.\\n     * @param land the stuct which has the size x and y co-ordinate of Quad to be checked\\n     * @param quadMinted array in which the minted child quad would be pushed\\n     * @param landMinted total 1x1 land already minted\\n     * @param index index of last element of quadMinted array\\n     * @param quadCompareSize the size of the child quads to be checked.\\n     * @return the index of last quad pushed in quadMinted array and the total land already minted\\n     */\\n    function _checkAndClearOwner(\\n        Land memory land,\\n        Land[] memory quadMinted,\\n        uint256 landMinted,\\n        uint256 index,\\n        uint256 quadCompareSize\\n    ) internal returns (uint256, uint256) {\\n        (uint256 layer, , ) = _getQuadLayer(quadCompareSize);\\n        uint256 toX = land.x + land.size;\\n        uint256 toY = land.y + land.size;\\n\\n        //Lopping around the Quad in land struct to check if the child quad are minted or not\\n        for (uint256 xi = land.x; xi < toX; xi += quadCompareSize) {\\n            for (uint256 yi = land.y; yi < toY; yi += quadCompareSize) {\\n                //checking if the child Quad is minted or not. i.e Checks if the quad is in the quadMinted array.\\n                bool isQuadChecked = _isQuadMinted(quadMinted, Land({x: xi, y: yi, size: quadCompareSize}), index);\\n                // if child quad is not already in the quadMinted array.\\n                if (!isQuadChecked) {\\n                    uint256 id = _getQuadId(layer, xi, yi);\\n                    address owner = address(uint160(_owners[id]));\\n                    // owner of the child quad is checked to be owned by msg.sender else should not be owned by anyone.\\n                    if (owner == msg.sender) {\\n                        // if child quad is minted it would be pushed in quadMinted array.\\n                        quadMinted[index] = Land({x: xi, y: yi, size: quadCompareSize});\\n                        // index of quadMinted is increased\\n                        index++;\\n                        // total land minted is increase by the number if land of 1x1 in child quad\\n                        landMinted += quadCompareSize * quadCompareSize;\\n                        //owner is cleared\\n                        _owners[id] = 0;\\n                    } else {\\n                        require(owner == address(0), \\\"Already minted\\\");\\n                    }\\n                }\\n            }\\n        }\\n\\n        // size of the child quad is set to be the next smaller child quad size (12 => 6 => 3)\\n        quadCompareSize = quadCompareSize / 2;\\n        // if child quad size is greater than 3 _checkAndClearOwner is checked for new child quads in the  quad in land struct.\\n        if (quadCompareSize >= 3)\\n            (index, landMinted) = _checkAndClearOwner(land, quadMinted, landMinted, index, quadCompareSize);\\n        return (index, landMinted);\\n    }\\n\\n    /// @dev checks the owner of land with 'tokenId' to be 'from' and clears it\\n    /// @param from the address to be checked agains the owner of the land\\n    /// @param tokenId th id of land\\n    /// @return bool for if land is owned by 'from' or not.\\n    function _checkAndClearLandOwner(address from, uint256 tokenId) internal returns (bool) {\\n        uint256 currentOwner = _owners[tokenId];\\n        if (currentOwner != 0) {\\n            require((currentOwner & BURNED_FLAG) != BURNED_FLAG, \\\"not owner\\\");\\n            require(address(uint160(currentOwner)) == from, \\\"not owner\\\");\\n            _owners[tokenId] = 0;\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function _checkBatchReceiverAcceptQuad(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes memory data\\n    ) internal {\\n        if (to.isContract() && _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER)) {\\n            uint256[] memory ids = new uint256[](size * size);\\n            for (uint256 i = 0; i < size * size; i++) {\\n                ids[i] = _idInPath(i, size, x, y);\\n            }\\n            require(_checkOnERC721BatchReceived(operator, from, to, ids, data), \\\"erc721 batch transfer rejected by to\\\");\\n        }\\n    }\\n\\n    /// @dev checks if the receiver of the quad(size, x, y) is a contact. If yes can it handle ERC721 tokens. It also clears owner of 1x1 land's owned by msg.sender.\\n    /// @param quadMinted - an array of Land structs in which the minted child quad or Quad to be transfered are.\\n    /// @param landMinted - the total amount of land that has been minted\\n    /// @param index - the index of the last element in the quadMinted array\\n    /// @param to the address of the new owner of Quad to be transfered\\n    /// @param size The size of the quad being minted and transfered\\n    /// @param x The x-coordinate of the top-left corner of the quad being minted.\\n    /// @param y The y-coordinate of the top-left corner of the quad being minted.\\n    /// @param y The y-coordinate of the top-left corner of the quad being minted.\\n    function _checkBatchReceiverAcceptQuadAndClearOwner(\\n        Land[] memory quadMinted,\\n        uint256 index,\\n        uint256 landMinted,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes memory data\\n    ) internal {\\n        // checks if to is a contract and supports ERC721_MANDATORY_RECEIVER interfaces. if it doesn't it just clears the owner of 1x1 lands in quad(size, x, y)\\n        if (to.isContract() && _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER)) {\\n            // array to push minted 1x1 land\\n            uint256[] memory idsToTransfer = new uint256[](landMinted);\\n            // index of last land pushed in idsToTransfer array\\n            uint256 transferIndex;\\n            // array to push ids to be minted\\n            uint256[] memory idsToMint = new uint256[]((size * size) - landMinted);\\n            // index of last land pushed in idsToMint array\\n            uint256 mintIndex;\\n\\n            // iterating over every 1x1 land in the quad to be pushed in the above arrays\\n            for (uint256 i = 0; i < size * size; i++) {\\n                uint256 id = _idInPath(i, size, x, y);\\n\\n                if (_isQuadMinted(quadMinted, Land({x: _getX(id), y: _getY(id), size: 1}), index)) {\\n                    // if land is in the quads already minted it just pushed in to the idsToTransfer array\\n                    idsToTransfer[transferIndex] = id;\\n                    transferIndex++;\\n                } else if (address(uint160(_owners[id])) == msg.sender) {\\n                    // if it is owned by the msg.sender owner data is removed and it is pused in to idsToTransfer array\\n                    _owners[id] = 0;\\n                    idsToTransfer[transferIndex] = id;\\n                    transferIndex++;\\n                } else {\\n                    // else it is not owned by any one and and pushed in teh idsToMint array\\n                    idsToMint[mintIndex] = id;\\n                    mintIndex++;\\n                }\\n            }\\n\\n            // checking if \\\"to\\\" contact can handle ERC721 tokens\\n            require(\\n                _checkOnERC721BatchReceived(msg.sender, address(0), to, idsToMint, data),\\n                \\\"erc721 batch transfer rejected by to\\\"\\n            );\\n            require(\\n                _checkOnERC721BatchReceived(msg.sender, msg.sender, to, idsToTransfer, data),\\n                \\\"erc721 batch transfer rejected by to\\\"\\n            );\\n        } else {\\n            for (uint256 i = 0; i < size * size; i++) {\\n                uint256 id = _idInPath(i, size, x, y);\\n                if (address(uint160(_owners[id])) == msg.sender) _owners[id] = 0;\\n            }\\n        }\\n    }\\n\\n    function _getX(uint256 id) internal pure returns (uint256) {\\n        return (id & ~LAYER) % GRID_SIZE;\\n    }\\n\\n    function _getY(uint256 id) internal pure returns (uint256) {\\n        return (id & ~LAYER) / GRID_SIZE;\\n    }\\n\\n    function _isQuadMinted(\\n        Land[] memory mintedLand,\\n        Land memory quad,\\n        uint256 index\\n    ) internal pure returns (bool) {\\n        for (uint256 i = 0; i < index; i++) {\\n            Land memory land = mintedLand[i];\\n            if (\\n                land.size > quad.size &&\\n                quad.x >= land.x &&\\n                quad.x < land.x + land.size &&\\n                quad.y >= land.y &&\\n                quad.y < land.y + land.size\\n            ) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function _getQuadLayer(uint256 size)\\n        internal\\n        pure\\n        returns (\\n            uint256 layer,\\n            uint256 parentSize,\\n            uint256 childLayer\\n        )\\n    {\\n        if (size == 1) {\\n            layer = LAYER_1x1;\\n            parentSize = 3;\\n        } else if (size == 3) {\\n            layer = LAYER_3x3;\\n            parentSize = 6;\\n        } else if (size == 6) {\\n            layer = LAYER_6x6;\\n            parentSize = 12;\\n            childLayer = LAYER_3x3;\\n        } else if (size == 12) {\\n            layer = LAYER_12x12;\\n            parentSize = 24;\\n            childLayer = LAYER_6x6;\\n        } else if (size == 24) {\\n            layer = LAYER_24x24;\\n            childLayer = LAYER_12x12;\\n        } else {\\n            require(false, \\\"Invalid size\\\");\\n        }\\n    }\\n\\n    function _getQuadId(\\n        uint256 layer,\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (uint256) {\\n        return layer + x + y * GRID_SIZE;\\n    }\\n\\n    function _checkOwner(\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        uint256 quadCompareSize\\n    ) internal view {\\n        (uint256 layer, , ) = _getQuadLayer(quadCompareSize);\\n\\n        if (size <= quadCompareSize) {\\n            // when the size of the quad is smaller than the quadCompareSize(size to be compared with),\\n            // then it is checked if the bigger quad which encapsulates the quad to be minted\\n            // of with size equals the quadCompareSize has been minted or not\\n            require(\\n                _owners[\\n                    _getQuadId(layer, (x / quadCompareSize) * quadCompareSize, (y / quadCompareSize) * quadCompareSize)\\n                ] == 0,\\n                \\\"Already minted\\\"\\n            );\\n        } else {\\n            // when the size is smaller than the quadCompare size the owner of all the smaller quads with size\\n            // quadCompare size in the quad to be minted are checked if they are minted or not\\n            uint256 toX = x + size;\\n            uint256 toY = y + size;\\n            for (uint256 xi = x; xi < toX; xi += quadCompareSize) {\\n                for (uint256 yi = y; yi < toY; yi += quadCompareSize) {\\n                    require(_owners[_getQuadId(layer, xi, yi)] == 0, \\\"Already minted\\\");\\n                }\\n            }\\n        }\\n\\n        quadCompareSize = quadCompareSize / 2;\\n        if (quadCompareSize >= 3) _checkOwner(size, x, y, quadCompareSize);\\n    }\\n\\n    function _idInPath(\\n        uint256 i,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (uint256) {\\n        uint256 row = i / size;\\n        if (row % 2 == 0) {\\n            // allow ids to follow a path in a quad\\n            return _getQuadId(LAYER_1x1, (x + (i % size)), (y + row));\\n        } else {\\n            return _getQuadId(LAYER_1x1, (x + size) - (1 + (i % size)), (y + row));\\n        }\\n    }\\n\\n    /// @dev checks if the Land's child quads are owned by the from address and clears all the previous owners\\n    /// if all the child quads are not owned by the \\\"from\\\" address then the owner of parent quad to the land\\n    /// is checked if owned by the \\\"from\\\" address. If from is the owner then land owner is set to \\\"to\\\" address\\n    /// @param from address of the previous owner\\n    /// @param to address of the new owner\\n    /// @param land the quad to be regrouped and transferred\\n    /// @param set for setting the new owner\\n    /// @param childQuadSize  size of the child quad to be checked for owner in the regrouping\\n    function _regroupQuad(\\n        address from,\\n        address to,\\n        Land memory land,\\n        bool set,\\n        uint256 childQuadSize\\n    ) internal returns (bool) {\\n        (uint256 layer, , uint256 childLayer) = _getQuadLayer(land.size);\\n        uint256 quadId = _getQuadId(layer, land.x, land.y);\\n        bool ownerOfAll = true;\\n\\n        {\\n            // double for loop iterates and checks owner of all the smaller quads in land\\n            for (uint256 xi = land.x; xi < land.x + land.size; xi += childQuadSize) {\\n                for (uint256 yi = land.y; yi < land.y + land.size; yi += childQuadSize) {\\n                    uint256 ownerChild;\\n                    bool ownAllIndividual;\\n                    if (childQuadSize < 3) {\\n                        // case when the smaller quad is 1x1,\\n                        ownAllIndividual = _checkAndClearLandOwner(from, _getQuadId(LAYER_1x1, xi, yi)) && ownerOfAll;\\n                    } else {\\n                        // recursively calling the _regroupQuad function to check the owner of child quads.\\n                        ownAllIndividual = _regroupQuad(\\n                            from,\\n                            to,\\n                            Land({x: xi, y: yi, size: childQuadSize}),\\n                            false,\\n                            childQuadSize / 2\\n                        );\\n                        uint256 idChild = _getQuadId(childLayer, xi, yi);\\n                        ownerChild = _owners[idChild];\\n                        if (ownerChild != 0) {\\n                            // checking the owner of child quad\\n                            if (!ownAllIndividual) {\\n                                require(ownerChild == uint256(uint160(from)), \\\"not owner of child Quad\\\");\\n                            }\\n                            // clearing owner of child quad\\n                            _owners[idChild] = 0;\\n                        }\\n                    }\\n                    // ownerOfAll should be true if \\\"from\\\" is owner of all the child quads itereated over\\n                    ownerOfAll = (ownAllIndividual || ownerChild != 0) && ownerOfAll;\\n                }\\n            }\\n        }\\n\\n        // if set is true it check if the \\\"from\\\" is owner of all else checks for the owner of parent quad is\\n        // owned by \\\"from\\\" and sets the owner for the id of land to \\\"to\\\" address.\\n        if (set) {\\n            if (!ownerOfAll) {\\n                require(_ownerOfQuad(land.size, land.x, land.y) == from, \\\"not owner of all sub quads nor parent quads\\\");\\n            }\\n            _owners[quadId] = uint256(uint160(to));\\n            return true;\\n        }\\n\\n        return ownerOfAll;\\n    }\\n\\n    function _ownerOfQuad(\\n        uint256 size,\\n        uint256 x,\\n        uint256 y\\n    ) internal view returns (address) {\\n        (uint256 layer, uint256 parentSize, ) = _getQuadLayer(size);\\n        address owner = address(uint160(_owners[_getQuadId(layer, (x / size) * size, (y / size) * size)]));\\n        if (owner != address(0)) {\\n            return owner;\\n        } else if (size < 24) {\\n            return _ownerOfQuad(parentSize, x, y);\\n        }\\n        return address(0);\\n    }\\n\\n    function _getQuadById(uint256 id)\\n        internal\\n        pure\\n        returns (\\n            uint256 size,\\n            uint256 x,\\n            uint256 y\\n        )\\n    {\\n        x = _getX(id);\\n        y = _getY(id);\\n        uint256 layer = id & LAYER;\\n        if (layer == LAYER_1x1) {\\n            size = 1;\\n        } else if (layer == LAYER_3x3) {\\n            size = 3;\\n        } else if (layer == LAYER_6x6) {\\n            size = 6;\\n        } else if (layer == LAYER_12x12) {\\n            size = 12;\\n        } else if (layer == LAYER_24x24) {\\n            size = 24;\\n        } else {\\n            require(false, \\\"Invalid token id\\\");\\n        }\\n    }\\n\\n    function _ownerOf(uint256 id) internal view override returns (address) {\\n        require(id & LAYER == 0, \\\"Invalid token id\\\");\\n        (uint256 size, uint256 x, uint256 y) = _getQuadById(id);\\n        require(x % size == 0, \\\"x coordinate: Invalid token id\\\");\\n        require(y % size == 0, \\\"y coordinate: Invalid token id\\\");\\n        if (size == 1) {\\n            uint256 owner1x1 = _owners[id];\\n            return (owner1x1 & BURNED_FLAG) == BURNED_FLAG ? address(0) : _ownerOfQuad(size, x, y);\\n        }\\n        return _ownerOfQuad(size, x, y);\\n    }\\n\\n    function _ownerAndOperatorEnabledOf(uint256 id)\\n        internal\\n        view\\n        override\\n        returns (address owner, bool operatorEnabled)\\n    {\\n        require(id & LAYER == 0, \\\"Invalid token id\\\");\\n        uint256 x = id % GRID_SIZE;\\n        uint256 y = id / GRID_SIZE;\\n        uint256 owner1x1 = _owners[id];\\n\\n        if ((owner1x1 & BURNED_FLAG) == BURNED_FLAG) {\\n            owner = address(0);\\n            operatorEnabled = (owner1x1 & OPERATOR_FLAG) == OPERATOR_FLAG;\\n            return (owner, operatorEnabled);\\n        }\\n\\n        if (owner1x1 != 0) {\\n            owner = address(uint160(owner1x1));\\n            operatorEnabled = (owner1x1 & OPERATOR_FLAG) == OPERATOR_FLAG;\\n        } else {\\n            owner = _ownerOfQuad(3, (x * 3) / 3, (y * 3) / 3);\\n            operatorEnabled = false;\\n        }\\n    }\\n\\n    // Empty storage space in contracts for future enhancements\\n    // ref: https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/issues/13)\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8c772d86f01dacd7deafe885d58d5805b8799fef8a6291418a57ae0da9a08414\",\"license\":\"MIT\"},\"src/solc_0.8/polygon/child/land/PolygonLandV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.2;\\n\\nimport \\\"./PolygonLandBaseTokenV2.sol\\\";\\nimport \\\"../../../common/BaseWithStorage/ERC2771Handler.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../OperatorFilterer/contracts/upgradeable/OperatorFiltererUpgradeable.sol\\\";\\n\\n/// @title LAND token on L2\\ncontract PolygonLandV2 is PolygonLandBaseTokenV2, ERC2771Handler, OperatorFiltererUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    event OperatorRegistrySet(address indexed registry);\\n\\n    function initialize(address trustedForwarder) external initializer {\\n        _admin = _msgSender();\\n        __ERC2771Handler_initialize(trustedForwarder);\\n        emit AdminChanged(address(0), _admin);\\n    }\\n\\n    /// @dev Change the address of the trusted forwarder for meta-TX\\n    /// @param trustedForwarder The new trustedForwarder\\n    function setTrustedForwarder(address trustedForwarder) external onlyAdmin {\\n        _trustedForwarder = trustedForwarder;\\n        emit TrustedForwarderSet(trustedForwarder);\\n    }\\n\\n    function _msgSender() internal view override(ContextUpgradeable, ERC2771Handler) returns (address) {\\n        return ERC2771Handler._msgSender();\\n    }\\n\\n    function _msgData() internal view override(ContextUpgradeable, ERC2771Handler) returns (bytes calldata) {\\n        return ERC2771Handler._msgData();\\n    }\\n\\n    /**\\n     * @notice Approve an operator to spend tokens on the sender behalf\\n     * @param sender The address giving the approval\\n     * @param operator The address receiving the approval\\n     * @param id The id of the token\\n     */\\n    function approveFor(\\n        address sender,\\n        address operator,\\n        uint256 id\\n    ) public override onlyAllowedOperatorApproval(operator) {\\n        super.approveFor(sender, operator, id);\\n    }\\n\\n    /**\\n     * @notice Approve an operator to spend tokens on the sender behalf\\n     * @param operator The address receiving the approval\\n     * @param id The id of the token\\n     */\\n    function approve(address operator, uint256 id) public override onlyAllowedOperatorApproval(operator) {\\n        super.approve(operator, id);\\n    }\\n\\n    /**\\n     * @notice Transfer a token between 2 addresses\\n     * @param from The sender of the token\\n     * @param to The recipient of the token\\n     * @param id The id of the token\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public override onlyAllowedOperator(from) {\\n        super.transferFrom(from, to, id);\\n    }\\n\\n    /**\\n     * @notice Transfer a token between 2 addresses letting the receiver knows of the transfer\\n     * @param from The sender of the token\\n     * @param to The recipient of the token\\n     * @param id The id of the token\\n     * @param data Additional data\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) public override onlyAllowedOperator(from) {\\n        super.safeTransferFrom(from, to, id, data);\\n    }\\n\\n    /**\\n     * @notice Transfer a token between 2 addresses letting the receiver knows of the transfer\\n     * @param from The send of the token\\n     * @param to The recipient of the token\\n     * @param id The id of the token\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public override onlyAllowedOperator(from) {\\n        super.safeTransferFrom(from, to, id);\\n    }\\n\\n    /**\\n     * @notice Set the approval for an operator to manage all the tokens of the sender\\n     * @param operator The address receiving the approval\\n     * @param approved The determination of the approval\\n     */\\n    function setApprovalForAll(address operator, bool approved) public override onlyAllowedOperatorApproval(operator) {\\n        super.setApprovalForAll(operator, approved);\\n    }\\n\\n    /**\\n     * @notice Set the approval for an operator to manage all the tokens of the sender\\n     * @param sender The address giving the approval\\n     * @param operator The address receiving the approval\\n     * @param approved The determination of the approval\\n     */\\n    function setApprovalForAllFor(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) public override onlyAllowedOperatorApproval(operator) {\\n        super.setApprovalForAllFor(sender, operator, approved);\\n    }\\n\\n    /// @notice This function is used to register Land contract on the Operator Filterer Registry of Opensea.\\n    /// @dev can only be called by admin.\\n    /// @param subscriptionOrRegistrantToCopy registration address of the list to subscribe.\\n    /// @param subscribe bool to signify subscription 'true' or to copy the list 'false'.\\n    function register(address subscriptionOrRegistrantToCopy, bool subscribe) external onlyAdmin {\\n        require(subscriptionOrRegistrantToCopy != address(0), \\\"PolygonLandV2: subscription can't be zero address\\\");\\n        _register(subscriptionOrRegistrantToCopy, subscribe);\\n    }\\n\\n    /// @notice sets filter registry address deployed in test\\n    /// @param registry the address of the registry\\n    function setOperatorRegistry(address registry) external virtual onlyAdmin {\\n        operatorFilterRegistry = IOperatorFilterRegistry(registry);\\n        emit OperatorRegistrySet(registry);\\n    }\\n}\\n\",\"keccak256\":\"0xce01a42936227ae0ec64f3663580ef0985fc666d4205246334393b9f885a9ae1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615eab80620000216000396000f3fe608060405234801561001057600080fd5b50600436106102d35760003560e01c806379cc679011610186578063ac9fe421116100e3578063ce1b815f11610097578063e985e9c511610071578063e985e9c51461062a578063eaa5e0671461063d578063eeb5a5d114610650576102d3565b8063ce1b815f146105f3578063cf456ae714610604578063da74222814610617576102d3565b8063b88d4fde116100c8578063b88d4fde146105ba578063c4d66de8146105cd578063c87b56dd146105e0576102d3565b8063ac9fe42114610594578063b0ccc31e146105a7576102d3565b80639d28fb861161013a578063a22cb4651161011f578063a22cb46514610542578063aa271e1a14610555578063ab01b46914610581576102d3565b80639d28fb861461052f5780639ededf7714610355576102d3565b80638e5cb5f61161016b5780638e5cb5f6146104d05780638f283970146104e357806395d89b41146104f6576102d3565b806379cc6790146104aa578063845a4697146104bd576102d3565b806342842e0e116102345780636352211e116101e85780636e1e3bbf116101cd5780636e1e3bbf146104735780636e9960c31461048657806370a0823114610497576102d3565b80636352211e14610434578063654b748a14610447576102d3565b80634e6a0f44116102195780634e6a0f44146103ec57806355064d85146103ff578063572b6c0514610412576102d3565b806342842e0e146103c657806342966c68146103d9576102d3565b806315ddc5351161028b57806328cfbd461161027057806328cfbd461461038d5780632b991746146103a057806338bb305a146103b3576102d3565b806315ddc5351461036757806323b872dd1461037a576102d3565b8063081812fc116102bc578063081812fc14610315578063095ea7b3146103405780630ef2674314610355576102d3565b806301ffc9a7146102d857806306fdde0314610300575b600080fd5b6102eb6102e6366004615b6e565b610663565b60405190151581526020015b60405180910390f35b610308610702565b6040516102f79190615d28565b610328610323366004615ba6565b61073a565b6040516001600160a01b0390911681526020016102f7565b61035361034e366004615a63565b6107d9565b005b6101985b6040519081526020016102f7565b610353610375366004615838565b6108c2565b61035361038836600461590c565b6108d8565b61035361039b366004615838565b610a09565b6103536103ae36600461590c565b610a7e565b6103536103c13660046159ad565b610b63565b6103536103d436600461590c565b610dbb565b6103536103e7366004615ba6565b610ee1565b6103536103fa366004615a8c565b610efe565b6102eb61040d366004615bbe565b6110c5565b6102eb610420366004615709565b606b546001600160a01b0390811691161490565b610328610442366004615ba6565b6110f4565b6102eb610455366004615709565b6001600160a01b031660009081526034602052604090205460ff1690565b610353610481366004615ae9565b611157565b6033546001600160a01b0316610328565b6103596104a5366004615709565b6111cd565b6103536104b8366004615a63565b611241565b6103596104cb366004615ba6565b61139e565b6103596104de366004615ba6565b6113a9565b6103536104f1366004615709565b6113b4565b60408051808201909152600481527f4c414e44000000000000000000000000000000000000000000000000000000006020820152610308565b61035361053d366004615709565b61148f565b610353610550366004615a2d565b61153d565b6102eb610563366004615709565b6001600160a01b031660009081526039602052604090205460ff1690565b61035361058f366004615a2d565b611621565b6103536105a2366004615a2d565b611702565b606c54610328906001600160a01b031681565b6103536105c8366004615947565b61183d565b6103536105db366004615709565b61196a565b6103086105ee366004615ba6565b611ab3565b606b546001600160a01b0316610328565b610353610612366004615a2d565b611b46565b610353610625366004615709565b611c56565b6102eb610638366004615723565b611d04565b61035361064b366004615755565b611d5b565b61035361065e3660046158c6565b61233a565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614806106c657507f80ac58cd000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b806106fa57507f5b5e139f000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b90505b919050565b60408051808201909152600f81527f53616e64626f782773204c414e4473000000000000000000000000000000000060208201525b90565b60008060006107488461241f565b90925090506001600160a01b0382166107a85760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e00000000000000000000000000000060448201526064015b60405180910390fd5b80156107ce575050506000818152603860205260409020546001600160a01b03166106fd565b6000925050506106fd565b606c5482906001600160a01b03163b156108b357606c54604051633185c44d60e21b81523060048201526001600160a01b0383811660248301529091169063c61711349060440160206040518083038186803b15801561083857600080fd5b505afa15801561084c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108709190615b52565b6108b35760405162461bcd60e51b815260206004820152601460248201527313dc195c985d1bdc88139bdd08105b1b1bddd95960621b604482015260640161079f565b6108bd8383612545565b505050565b6108d0868686868686612681565b505050505050565b606c5483906001600160a01b03163b156109f8576108f46126f3565b6001600160a01b0316816001600160a01b0316141561091d57610918848484612702565b610a03565b606c546001600160a01b031663c6171134306109376126f3565b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260440160206040518083038186803b15801561097d57600080fd5b505afa158015610991573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b59190615b52565b6109f85760405162461bcd60e51b815260206004820152601460248201527313dc195c985d1bdc88139bdd08105b1b1bddd95960621b604482015260640161079f565b610a03848484612702565b50505050565b6108d0868686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020601f8a018190048102820181019092528881529250889150879081908401838280828437600092019190915250600192506127b1915050565b606c5482906001600160a01b03163b15610b5857606c54604051633185c44d60e21b81523060048201526001600160a01b0383811660248301529091169063c61711349060440160206040518083038186803b158015610add57600080fd5b505afa158015610af1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b159190615b52565b610b585760405162461bcd60e51b815260206004820152601460248201527313dc195c985d1bdc88139bdd08105b1b1bddd95960621b604482015260640161079f565b610a03848484612c14565b6001600160a01b038716610bb95760405162461bcd60e51b815260206004820152601460248201527f66726f6d206973207a65726f2061646472657373000000000000000000000000604482015260640161079f565b6001600160a01b038616610c0f5760405162461bcd60e51b815260206004820152601a60248201527f63616e27742073656e6420746f207a65726f2061646472657373000000000000604482015260640161079f565b866001600160a01b0316610c216126f3565b6001600160a01b031614610ce9576001600160a01b038716600090815260376020526040812090610c506126f3565b6001600160a01b0316815260208101919091526040016000205460ff1680610c9d575060346000610c7f6126f3565b6001600160a01b0316815260208101919091526040016000205460ff165b610ce95760405162461bcd60e51b815260206004820152601e60248201527f6e6f7420617574686f72697a656420746f207472616e73666572517561640000604482015260640161079f565b610cf68787878787612e07565b610d008580615d67565b6001600160a01b03881660009081526035602052604081208054909190610d28908490615d86565b90915550610d3890508580615d67565b6001600160a01b03871660009081526035602052604081208054909190610d60908490615d3b565b90915550610db29050610d716126f3565b888888888888888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612fb792505050565b50505050505050565b606c5483906001600160a01b03163b15610ed657610dd76126f3565b6001600160a01b0316816001600160a01b03161415610dfb57610918848484613102565b606c546001600160a01b031663c617113430610e156126f3565b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260440160206040518083038186803b158015610e5b57600080fd5b505afa158015610e6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e939190615b52565b610ed65760405162461bcd60e51b815260206004820152601460248201527313dc195c985d1bdc88139bdd08105b1b1bddd95960621b604482015260640161079f565b610a03848484613102565b610efb610eec6126f3565b610ef58361311d565b836132a9565b50565b3360009081526039602052604090205460ff16610f5d5760405162461bcd60e51b815260206004820152600b60248201527f21415554484f52495a4544000000000000000000000000000000000000000000604482015260640161079f565b6001600160a01b038616610fb35760405162461bcd60e51b815260206004820152601260248201527f746f206973207a65726f20616464726573730000000000000000000000000000604482015260640161079f565b610fbe8585856110c5565b1561108257610fd03387878787612e07565b610fda8580615d67565b3360009081526035602052604081208054909190610ff9908490615d86565b9091555061100990508580615d67565b6001600160a01b03871660009081526035602052604081208054909190611031908490615d3b565b9250508190555061107d33338888888888888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612fb792505050565b6108d0565b6108d08686868686868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506133a092505050565b60006110d28484846136d3565b60006110df8585856138b3565b6001600160a01b0316141590505b9392505050565b60006110ff8261311d565b90506001600160a01b0381166106fd5760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354414e545f544f4b454e000000000000000000000000000000604482015260640161079f565b6111628484846136d3565b61116d6105636126f3565b6111b95760405162461bcd60e51b815260206004820152600b60248201527f21415554484f52495a4544000000000000000000000000000000000000000000604482015260640161079f565b6111c68585858585613956565b5050505050565b60006001600160a01b0382166112255760405162461bcd60e51b815260206004820152601260248201527f5a45524f5f414444524553535f4f574e45520000000000000000000000000000604482015260640161079f565b506001600160a01b031660009081526035602052604090205490565b6001600160a01b0382166112975760405162461bcd60e51b815260206004820152601460248201527f4e4f545f46524f4d5f5a45524f41444452455353000000000000000000000000604482015260640161079f565b6000806112a38361241f565b9150915060006112b16126f3565b9050846001600160a01b0316816001600160a01b031614806112f457508180156112f457506000848152603860205260409020546001600160a01b038281169116145b8061131757506001600160a01b03811660009081526034602052604090205460ff165b8061134757506001600160a01b0380861660009081526037602090815260408083209385168352929052205460ff165b6113935760405162461bcd60e51b815260206004820152601160248201527f554e415554484f52495a45445f4255524e000000000000000000000000000000604482015260640161079f565b6111c68584866132a9565b60006106fa82613af7565b60006106fa82613b26565b6033546001600160a01b0316806113c96126f3565b6001600160a01b03161461141f5760405162461bcd60e51b815260206004820152601360248201527f41444d494e5f4143434553535f44454e49454400000000000000000000000000604482015260640161079f565b816001600160a01b0316816001600160a01b03167f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f60405160405180910390a3506033805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6033546001600160a01b03166114a36126f3565b6001600160a01b0316146114e65760405162461bcd60e51b815260206004820152600a60248201526941444d494e5f4f4e4c5960b01b604482015260640161079f565b606c805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517fc6df119c56c99171b170652a3c4750ba46dcaacbdb3b7ab4847a9fa339659bd490600090a250565b606c5482906001600160a01b03163b1561161757606c54604051633185c44d60e21b81523060048201526001600160a01b0383811660248301529091169063c61711349060440160206040518083038186803b15801561159c57600080fd5b505afa1580156115b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d49190615b52565b6116175760405162461bcd60e51b815260206004820152601460248201527313dc195c985d1bdc88139bdd08105b1b1bddd95960621b604482015260640161079f565b6108bd8383613b55565b6033546001600160a01b03166116356126f3565b6001600160a01b0316146116785760405162461bcd60e51b815260206004820152600a60248201526941444d494e5f4f4e4c5960b01b604482015260640161079f565b6001600160a01b0382166116f45760405162461bcd60e51b815260206004820152603160248201527f506f6c79676f6e4c616e6456323a20737562736372697074696f6e2063616e2760448201527f74206265207a65726f2061646472657373000000000000000000000000000000606482015260840161079f565b6116fe8282613b67565b5050565b6033546001600160a01b03166117166126f3565b6001600160a01b0316146117595760405162461bcd60e51b815260206004820152600a60248201526941444d494e5f4f4e4c5960b01b604482015260640161079f565b6033546001600160a01b031661176d6126f3565b6001600160a01b0316146117e95760405162461bcd60e51b815260206004820152602c60248201527f6f6e6c792061646d696e20697320616c6c6f77656420746f206164642073757060448201527f6572206f70657261746f72730000000000000000000000000000000000000000606482015260840161079f565b6001600160a01b038216600081815260346020526040808220805460ff191685151590811790915590519092917f44f92d27abdf4cfb6a7d712c3af68f3be086d4ca747ab802c36f67d6790060d891a35050565b606c5484906001600160a01b03163b1561195e576118596126f3565b6001600160a01b0316816001600160a01b031614156118835761187e85858585613dbd565b6111c6565b606c546001600160a01b031663c61711343061189d6126f3565b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260440160206040518083038186803b1580156118e357600080fd5b505afa1580156118f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061191b9190615b52565b61195e5760405162461bcd60e51b815260206004820152601460248201527313dc195c985d1bdc88139bdd08105b1b1bddd95960621b604482015260640161079f565b6111c685858585613dbd565b600054610100900460ff166119855760005460ff1615611989565b303b155b6119fb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161079f565b600054610100900460ff16158015611a26576000805460ff1961ff0019909116610100171660011790555b611a2e6126f3565b6033805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055611a6482613e43565b6033546040516001600160a01b03909116906000907f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f908290a380156116fe576000805461ff00191690555050565b60606000611ac08361311d565b6001600160a01b03161415611b175760405162461bcd60e51b815260206004820152601160248201527f496420646f6573206e6f74206578697374000000000000000000000000000000604482015260640161079f565b611b2082613ea0565b604051602001611b309190615c15565b6040516020818303038152906040529050919050565b6033546001600160a01b0316611b5a6126f3565b6001600160a01b031614611b9d5760405162461bcd60e51b815260206004820152600a60248201526941444d494e5f4f4e4c5960b01b604482015260640161079f565b6001600160a01b038216611bf35760405162461bcd60e51b815260206004820152601c60248201527f506f6c79676f6e4c616e643a20496e76616c6964206164647265737300000000604482015260640161079f565b6001600160a01b038216600081815260396020908152604091829020805460ff19168515159081179091558251938452908301527fff452b3b9159b024a9098f0058c63eccd90d36b3584608202800d662f962bb60910160405180910390a15050565b6033546001600160a01b0316611c6a6126f3565b6001600160a01b031614611cad5760405162461bcd60e51b815260206004820152600a60248201526941444d494e5f4f4e4c5960b01b604482015260640161079f565b606b805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517fd91237492a9e30cd2faf361fc103998a382ff0ec2b1b07dc1cbebb76ae2f1ea290600090a250565b6001600160a01b03808316600090815260376020908152604080832093851683529290529081205460ff1680611d5257506001600160a01b03821660009081526034602052604090205460ff165b90505b92915050565b6001600160a01b038a16611db15760405162461bcd60e51b815260206004820152601460248201527f66726f6d206973207a65726f2061646472657373000000000000000000000000604482015260640161079f565b6001600160a01b038916611e075760405162461bcd60e51b815260206004820152601a60248201527f63616e27742073656e6420746f207a65726f2061646472657373000000000000604482015260640161079f565b868514611e7c5760405162461bcd60e51b815260206004820152603c60248201527f506f6c79676f6e4c616e6442617365546f6b656e56323a2073697a657327732060448201527f616e6420782773206c656e6774682061726520646966666572656e7400000000606482015260840161079f565b848314611ef15760405162461bcd60e51b815260206004820152603860248201527f506f6c79676f6e4c616e6442617365546f6b656e56323a2078277320616e642060448201527f792773206c656e6774682061726520646966666572656e740000000000000000606482015260840161079f565b896001600160a01b0316611f036126f3565b6001600160a01b031614611ff0576001600160a01b038a16600090815260376020526040812090611f326126f3565b6001600160a01b0316815260208101919091526040016000205460ff1680611f7f575060346000611f616126f3565b6001600160a01b0316815260208101919091526040016000205460ff165b611ff05760405162461bcd60e51b8152602060048201526024808201527f6e6f7420617574686f72697a656420746f207472616e736665724d756c74695160448201527f7561647300000000000000000000000000000000000000000000000000000000606482015260840161079f565b6000805b888110156120aa5760008a8a8381811061201e57634e487b7160e01b600052603260045260246000fd5b9050602002013590506120808d8d838c8c8781811061204d57634e487b7160e01b600052603260045260246000fd5b905060200201358b8b8881811061207457634e487b7160e01b600052603260045260246000fd5b90506020020135612e07565b61208a8180615d67565b6120949084615d3b565b92505080806120a290615de0565b915050611ff4565b506001600160a01b038b16600090815260356020526040812080548392906120d3908490615d86565b90915550506001600160a01b038a1660009081526035602052604081208054839290612100908490615d3b565b90915550506001600160a01b038a163b1515801561212a575061212a8a6317a2fd9160e21b613ff7565b1561232d5760008167ffffffffffffffff81111561215857634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612181578160200160208202803683370190505b5090506000805b8a8110156122875760008c8c838181106121b257634e487b7160e01b600052603260045260246000fd5b90506020020135905060005b6121c88280615d67565b8110156122725761222781838e8e878181106121f457634e487b7160e01b600052603260045260246000fd5b905060200201358d8d8881811061221b57634e487b7160e01b600052603260045260246000fd5b905060200201356140be565b85858151811061224757634e487b7160e01b600052603260045260246000fd5b60209081029190910101528361225c81615de0565b945050808061226a90615de0565b9150506121be565b5050808061227f90615de0565b915050612188565b506122d26122936126f3565b8e8e8589898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061413592505050565b61232a5760405162461bcd60e51b8152602060048201526024808201527f657263373231206261746368207472616e736665722072656a656374656420626044820152637920746f60e01b606482015260840161079f565b50505b5050505050505050505050565b606c5482906001600160a01b03163b1561241457606c54604051633185c44d60e21b81523060048201526001600160a01b0383811660248301529091169063c61711349060440160206040518083038186803b15801561239957600080fd5b505afa1580156123ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d19190615b52565b6124145760405162461bcd60e51b815260206004820152601460248201527313dc195c985d1bdc88139bdd08105b1b1bddd95960621b604482015260640161079f565b610a038484846141f4565b6000807fff000000000000000000000000000000000000000000000000000000000000008316156124925760405162461bcd60e51b815260206004820152601060248201527f496e76616c696420746f6b656e20696400000000000000000000000000000000604482015260640161079f565b60006124a061019885615dfb565b905060006124b061019886615d53565b600086815260366020526040902054909150600160a01b80821614156124e75760009450600160ff1b808216149350505050612540565b801561250057809450600160ff1b80821614935061253c565b6125356003806125108682615d67565b61251a9190615d53565b60036125268682615d67565b6125309190615d53565b6138b3565b9450600093505b5050505b915091565b6000818152603660205260408120549061255e8361311d565b9050600061256a6126f3565b90506001600160a01b0382166125c25760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e000000000000000000000000000000604482015260640161079f565b806001600160a01b0316826001600160a01b0316148061260757506001600160a01b0380831660009081526037602090815260408083209385168352929052205460ff165b8061262a57506001600160a01b03811660009081526034602052604090205460ff165b6126765760405162461bcd60e51b815260206004820152601560248201527f554e415554484f52495a45445f415050524f56414c0000000000000000000000604482015260640161079f565b6111c68386866142e5565b6108d0868686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020601f8a018190048102820181019092528881529250889150879081908401838280828437600092018290525092506127b1915050565b60006126fd61439b565b905090565b61270d8383836143e5565b6127188383836145ee565b6001600160a01b0382163b1515801561273d575061273d826317a2fd9160e21b613ff7565b156108bd5761276561274d6126f3565b848484604051806020016040528060008152506146ac565b6108bd5760405162461bcd60e51b815260206004820152601860248201527f4552433732315f5452414e534645525f52454a45435445440000000000000000604482015260640161079f565b60006127bb6126f3565b90506000866001600160a01b0316826001600160a01b0316148061280457506001600160a01b0380881660009081526037602090815260408083209386168352929052205460ff165b8061282757506001600160a01b03821660009081526034602052604090205460ff165b90506001600160a01b03871661287f5760405162461bcd60e51b815260206004820152601460248201527f4e4f545f46524f4d5f5a45524f41444452455353000000000000000000000000604482015260640161079f565b6001600160a01b0386166128d55760405162461bcd60e51b815260206004820152601260248201527f4e4f545f544f5f5a45524f414444524553530000000000000000000000000000604482015260640161079f565b845160005b81811015612a6c57600087828151811061290457634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008061291a8361241f565b915091508b6001600160a01b0316826001600160a01b03161461297f5760405162461bcd60e51b815260206004820152601b60248201527f42415443485452414e5346455246524f4d5f4e4f545f4f574e45520000000000604482015260640161079f565b85806129ac57508080156129ac57506000838152603860205260409020546001600160a01b038881169116145b6129f85760405162461bcd60e51b815260206004820152600e60248201527f4e4f545f415554484f52495a4544000000000000000000000000000000000000604482015260640161079f565b600083815260366020526040812054612a15918591908e9061476b565b828b6001600160a01b03168d6001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050508080612a6490615de0565b9150506128da565b50866001600160a01b0316886001600160a01b031614612ae1576001600160a01b03881660009081526035602052604081208054839290612aae908490615d86565b90915550506001600160a01b03871660009081526035602052604081208054839290612adb908490615d3b565b90915550505b6001600160a01b0387163b15612c0a57612b02876317a2fd9160e21b613ff7565b15612b6557612b148389898989614135565b612b605760405162461bcd60e51b815260206004820152601e60248201527f4552433732315f42415443485f52454345495645445f52454a45435445440000604482015260640161079f565b612c0a565b8315612c0a5760005b81811015612c0857612baa848a8a8a8581518110612b9c57634e487b7160e01b600052603260045260246000fd5b60200260200101518a6146ac565b612bf65760405162461bcd60e51b815260206004820152601860248201527f4552433732315f52454345495645445f52454a45435445440000000000000000604482015260640161079f565b80612c0081615de0565b915050612b6e565b505b5050505050505050565b60008181526036602052604081205490612c2d8361311d565b90506000612c396126f3565b90506001600160a01b038616612c915760405162461bcd60e51b815260206004820152601360248201527f5a45524f5f414444524553535f53454e44455200000000000000000000000000604482015260640161079f565b6001600160a01b038216612ce75760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e000000000000000000000000000000604482015260640161079f565b856001600160a01b0316816001600160a01b03161480612d2c57506001600160a01b0380871660009081526037602090815260408083209385168352929052205460ff165b80612d4f57506001600160a01b03811660009081526034602052604090205460ff165b612d9b5760405162461bcd60e51b815260206004820152601560248201527f554e415554484f52495a45445f415050524f56414c0000000000000000000000604482015260640161079f565b856001600160a01b0316836001600160a01b031614612dfc5760405162461bcd60e51b815260206004820152601060248201527f4f574e45525f4e4f545f53454e44455200000000000000000000000000000000604482015260640161079f565b6108d08386866142e5565b612e128383836136d3565b8260011415612f0f576000612e29600084846147fe565b90506000612e368261311d565b90506001600160a01b038116612e8e5760405162461bcd60e51b815260206004820152601460248201527f746f6b656e20646f6573206e6f74206578697374000000000000000000000000604482015260640161079f565b866001600160a01b0316816001600160a01b031614612eef5760405162461bcd60e51b815260206004820152601a60248201527f6e6f74206f776e657220696e205f7472616e7366657251756164000000000000604482015260640161079f565b5060009081526036602052604090206001600160a01b0385169055612f45565b612f4385856040518060600160405280868152602001858152602001878152506001600288612f3e9190615d53565b614820565b505b60005b612f528480615d67565b8110156108d057612f65818585856140be565b856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a480612faf81615de0565b915050612f48565b6001600160a01b0385163b15158015612fdc5750612fdc856317a2fd9160e21b613ff7565b15610db2576000612fed8580615d67565b67ffffffffffffffff81111561301357634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561303c578160200160208202803683370190505b50905060005b61304c8680615d67565b81101561309c5761305f818787876140be565b82828151811061307f57634e487b7160e01b600052603260045260246000fd5b60209081029190910101528061309481615de0565b915050613042565b506130aa8888888486614135565b612c0a5760405162461bcd60e51b8152602060048201526024808201527f657263373231206261746368207472616e736665722072656a656374656420626044820152637920746f60e01b606482015260840161079f565b6108bd8383836040518060200160405280600081525061183d565b60007fff0000000000000000000000000000000000000000000000000000000000000082161561318f5760405162461bcd60e51b815260206004820152601060248201527f496e76616c696420746f6b656e20696400000000000000000000000000000000604482015260640161079f565b600080600061319d85614a9f565b919450925090506131ae8383615dfb565b156131fb5760405162461bcd60e51b815260206004820152601e60248201527f7820636f6f7264696e6174653a20496e76616c696420746f6b656e2069640000604482015260640161079f565b6132058382615dfb565b156132525760405162461bcd60e51b815260206004820152601e60248201527f7920636f6f7264696e6174653a20496e76616c696420746f6b656e2069640000604482015260640161079f565b826001141561329557600085815260366020526040902054600160a01b80821614613287576132828484846138b3565b61328a565b60005b9450505050506106fd565b6132a08383836138b3565b95945050505050565b816001600160a01b0316836001600160a01b03161461330a5760405162461bcd60e51b815260206004820152600960248201527f4e4f545f4f574e45520000000000000000000000000000000000000000000000604482015260640161079f565b80600160a01b61331f6001600160ff1b615d86565b6000838152603660209081526040808320805494909416949094179092556001600160a01b0387168152603590915290812080549161335d83615dc9565b909155505060405182906000906001600160a01b038716907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a450505050565b60006133ab85614bab565b5050905060006133bc8286866147fe565b604080518181526108208101825291925060009190816020015b6133fa60405180606001604052806000815260200160008152602001600081525090565b8152602001906001900390816133d657905050905060008060038911156134545761344e60405180606001604052808a81526020018981526020018b81525084838560028e6134499190615d53565b614ca3565b90925090505b60005b6134618a80615d67565b811015613641576000613476828c8c8c6140be565b905060006134b086604051806060016040528061349286613b26565b81526020016134a086613af7565b8152602001600181525087614e83565b905080156134f55760405182906001600160a01b038f169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90600090a461362c565b6000828152603660205260409020546001600160a01b03163314156135a6576000828152603860205260409020546001600160a01b03161561355b576000828152603860205260409020805473ffffffffffffffffffffffffffffffffffffffff191690555b613566600185615d3b565b60405190945082906001600160a01b038f169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90600090a461362c565b600082815260366020526040902054156135f35760405162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e481b5a5b9d195960921b604482015260640161079f565b60405182906001600160a01b038f16906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45b5050808061363990615de0565b915050613457565b506136528383838d8d8d8d8d614f54565b60008481526036602052604090206001600160a01b038b1690556136768980615d67565b6001600160a01b038b166000908152603560205260408120805490919061369e908490615d3b565b909155505033600090815260356020526040812080548392906136c2908490615d86565b909155505050505050505050505050565b82600114806136e25750826003145b806136ed5750826006145b806136f8575082600c145b806137035750826018145b61374f5760405162461bcd60e51b815260206004820152600c60248201527f496e76616c69642073697a650000000000000000000000000000000000000000604482015260640161079f565b6137598383615dfb565b156137a65760405162461bcd60e51b815260206004820152601460248201527f496e76616c6964207820636f6f7264696e617465000000000000000000000000604482015260640161079f565b6137b08382615dfb565b156137fd5760405162461bcd60e51b815260206004820152601460248201527f496e76616c6964207920636f6f7264696e617465000000000000000000000000604482015260640161079f565b61380983610198615d86565b8211156138585760405162461bcd60e51b815260206004820152600f60248201527f78206f7574206f6620626f756e64730000000000000000000000000000000000604482015260640161079f565b61386483610198615d86565b8111156108bd5760405162461bcd60e51b815260206004820152600f60248201527f79206f7574206f6620626f756e64730000000000000000000000000000000000604482015260640161079f565b60008060006138c186614bab565b50909250905060006036816138ff858a6138db818c615d53565b6138e59190615d67565b8b6138f0818c615d53565b6138fa9190615d67565b6147fe565b815260208101919091526040016000205490506001600160a01b0381161561392b5792506110ed915050565b60188710156139495761393f8287876138b3565b93505050506110ed565b5060009695505050505050565b6001600160a01b0385166139ac5760405162461bcd60e51b815260206004820152601260248201527f746f206973207a65726f20616464726573730000000000000000000000000000604482015260640161079f565b60006139b785614bab565b5050905060006139c88286866147fe565b90506139d786868660186152b6565b60005b6139e48780615d67565b811015613a945760006139f9828989896140be565b60008181526036602052604090205490915015613a495760405162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e481b5a5b9d195960921b604482015260640161079f565b60405181906001600160a01b038b16906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45080613a8c81615de0565b9150506139da565b5060008181526036602052604090206001600160a01b0388169055613ab98680615d67565b6001600160a01b03881660009081526035602052604081208054909190613ae1908490615d3b565b90915550610db290503360008989898989612fb7565b60006106fa6101987effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8416615d53565b60006106fa6101987effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8416615dfb565b6116fe613b606126f3565b838361541e565b606c546001600160a01b03163b15613d7457606c546040517fc3c5a5470000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b039091169063c3c5a54790602401602060405180830381600087803b158015613bd757600080fd5b505af1158015613beb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c0f9190615b52565b613d74578015613c9d57606c546040517f7d3e3dbe0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03848116602483015290911690637d3e3dbe906044015b600060405180830381600087803b158015613c8057600080fd5b505af1158015613c94573d6000803e3d6000fd5b50505050613d74565b6001600160a01b03821615613cfd57606c546040517fa0af29030000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0384811660248301529091169063a0af290390604401613c66565b606c546040517f4420e4860000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0390911690634420e48690602401600060405180830381600087803b158015613d5b57600080fd5b505af1158015613d6f573d6000803e3d6000fd5b505050505b816001600160a01b03167f3c7a9c847c035e45b84027e44ad55724873d5921b3a6abb8c0926b415d9241b182604051613db1911515815260200190565b60405180910390a25050565b613dc88484846143e5565b613dd38484846145ee565b6001600160a01b0383163b15610a0357613df7613dee6126f3565b858585856146ac565b610a035760405162461bcd60e51b815260206004820152601860248201527f4552433732315f5452414e534645525f52454a45435445440000000000000000604482015260640161079f565b606b805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383811691909117918290556040519116907fd91237492a9e30cd2faf361fc103998a382ff0ec2b1b07dc1cbebb76ae2f1ea290600090a250565b606081613ee1575060408051808201909152600181527f300000000000000000000000000000000000000000000000000000000000000060208201526106fd565b8160005b8115613f0b5780613ef581615de0565b9150613f049050600a83615d53565b9150613ee5565b60008167ffffffffffffffff811115613f3457634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015613f5e576020820181803683370190505b5090505b8415613fef57613f73600183615d86565b9150613f80600a86615dfb565b613f8b906030615d3b565b60f81b818381518110613fae57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350613fe8600a86615d53565b9450613f62565b949350505050565b604080516001600160e01b031983166024808301919091528251808303909101815260449091018252602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01ffc9a7000000000000000000000000000000000000000000000000000000001781528251935160008082529485948594909392908183858c612710fa955080519450505050609e5a116140aa57634e487b7160e01b600052600160045260246000fd5b8280156140b45750815b9695505050505050565b6000806140cb8587615d53565b90506140d8600282615dfb565b614107576140ff60006140eb8789615dfb565b6140f59087615d3b565b6138fa8487615d3b565b915050613fef565b6140ff60006141168789615dfb565b614121906001615d3b565b61412b8888615d3b565b6140f59190615d86565b600080846001600160a01b0316634b808c46888887876040518563ffffffff1660e01b815260040161416a9493929190615c81565b602060405180830381600087803b15801561418457600080fd5b505af1158015614198573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141bc9190615b8a565b6001600160e01b0319167f4b808c46000000000000000000000000000000000000000000000000000000001491505095945050505050565b6001600160a01b03831661424a5760405162461bcd60e51b815260206004820152601660248201527f496e76616c69642073656e646572206164647265737300000000000000000000604482015260640161079f565b60006142546126f3565b9050836001600160a01b0316816001600160a01b0316148061428e57506001600160a01b03811660009081526034602052604090205460ff165b6142da5760405162461bcd60e51b815260206004820152601c60248201527f554e415554484f52495a45445f415050524f56455f464f525f414c4c00000000604482015260640161079f565b610a0384848461541e565b60006142f08261311d565b90506001600160a01b0383166143125761430d828583600061476b565b614354565b61431f828583600161476b565b6000828152603860205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385161790555b81836001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a450505050565b606b546000906001600160a01b03163314156143de57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c610737565b5033610737565b6000806143f18361241f565b9150915060006143ff6126f3565b90506001600160a01b0383166144575760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e000000000000000000000000000000604482015260640161079f565b856001600160a01b0316836001600160a01b0316146144b85760405162461bcd60e51b815260206004820152601760248201527f434845434b5452414e534645525f4e4f545f4f574e4552000000000000000000604482015260640161079f565b6001600160a01b03851661450e5760405162461bcd60e51b815260206004820152601260248201527f4e4f545f544f5f5a45524f414444524553530000000000000000000000000000604482015260640161079f565b826001600160a01b0316816001600160a01b0316148061454657506001600160a01b03811660009081526034602052604090205460ff165b8061457657506001600160a01b0380871660009081526037602090815260408083209385168352929052205460ff165b806145a257508180156145a257506000848152603860205260409020546001600160a01b038281169116145b6108d05760405162461bcd60e51b815260206004820152601560248201527f554e415554484f52495a45445f5452414e534645520000000000000000000000604482015260640161079f565b6001600160a01b038316600090815260356020526040812080549161461283615dc9565b90915550506001600160a01b038216600090815260356020526040812080549161463b83615de0565b9190505550614666816036600061464f8590565b81526020019081526020016000205484600061476b565b80826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600080846001600160a01b031663150b7a02888887876040518563ffffffff1660e01b81526004016146e19493929190615cf6565b602060405180830381600087803b1580156146fb57600080fd5b505af115801561470f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147339190615b8a565b6001600160e01b0319167f150b7a02000000000000000000000000000000000000000000000000000000001491505095945050505050565b80156147af576000848152603660205260409020600160ff1b6001600160a01b03841673ffffffffffffffffffffffffffffffffffffffff19861617179055610a03565b6001600160a01b0382166147c86001600160ff1b615d86565b841673ffffffffffffffffffffffffffffffffffffffff1916176036600086815260208101919091526040016000205550505050565b600061480c61019883615d67565b6148168486615d3b565b613fef9190615d3b565b60008060006148328660400151614bab565b9250509150600061484c83886000015189602001516147fe565b87519091506001905b604089015189516148669190615d3b565b8110156149c25760208901515b89604001518a602001516148879190615d3b565b8110156149b05760008060038a10156148bf576148af8e6148aa600087876147fe565b6154f4565b80156148b85750845b9050614985565b6148ee8e8e60405180606001604052808881526020018781526020018e815250600060028f612f3e9190615d53565b905060006148fd8886866147fe565b6000818152603660205260409020549350905082156149835781614973578e6001600160a01b031683146149735760405162461bcd60e51b815260206004820152601760248201527f6e6f74206f776e6572206f66206368696c642051756164000000000000000000604482015260640161079f565b6000818152603660205260408120555b505b808061499057508115155b80156149995750845b9450505087816149a99190615d3b565b9050614873565b506149bb8782615d3b565b9050614855565b508615614a925780614a6b57896001600160a01b03166149ef89604001518a600001518b602001516138b3565b6001600160a01b031614614a6b5760405162461bcd60e51b815260206004820152602b60248201527f6e6f74206f776e6572206f6620616c6c20737562207175616473206e6f72207060448201527f6172656e74207175616473000000000000000000000000000000000000000000606482015260840161079f565b5060009081526036602052604090206001600160a01b038816905550600191506132a09050565b9998505050505050505050565b6000806000614aad84613b26565b9150614ab884613af7565b90507fff00000000000000000000000000000000000000000000000000000000000000841680614aeb5760019350614ba3565b600160f81b811415614b005760039350614ba3565b600160f91b811415614b155760069350614ba3565b600360f81b811415614b2a57600c9350614ba3565b7f0400000000000000000000000000000000000000000000000000000000000000811415614b5b5760189350614ba3565b60405162461bcd60e51b815260206004820152601060248201527f496e76616c696420746f6b656e20696400000000000000000000000000000000604482015260640161079f565b509193909250565b60008060008360011415614bc6576000925060039150614c9c565b8360031415614bdf57600160f81b925060069150614c9c565b8360061415614bfe5750600160f91b9150600c9050600160f81b614c9c565b83600c1415614c1d5750600360f81b915060189050600160f91b614c9c565b8360181415614c5457507f04000000000000000000000000000000000000000000000000000000000000009150600360f81b614c9c565b60405162461bcd60e51b815260206004820152600c60248201527f496e76616c69642073697a650000000000000000000000000000000000000000604482015260640161079f565b9193909250565b6000806000614cb184614bab565b50509050600088604001518960000151614ccb9190615d3b565b9050600089604001518a60200151614ce39190615d3b565b8a519091505b82811015614e4b5760208b01515b82811015614e39576000614d268c60405180606001604052808681526020018581526020018c8152508c614e83565b905080614e27576000614d3a8785856147fe565b6000818152603660205260409020549091506001600160a01b038116331415614ddc5760405180606001604052808681526020018581526020018c8152508e8d81518110614d9857634e487b7160e01b600052603260045260246000fd5b60200260200101819052508b80614dae90615de0565b9c50614dbc90508b80615d67565b614dc6908e615d3b565b6000838152603660205260408120559c50614e24565b6001600160a01b03811615614e245760405162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e481b5a5b9d195960921b604482015260640161079f565b50505b50614e328882615d3b565b9050614cf7565b50614e448782615d3b565b9050614ce9565b50614e57600287615d53565b955060038610614e7357614e6e8a8a8a8a8a614ca3565b985096505b5094989597509495505050505050565b6000805b82811015614f49576000858281518110614eb157634e487b7160e01b600052603260045260246000fd5b6020026020010151905084604001518160400151118015614ed457508051855110155b8015614ef0575060408101518151614eec9190615d3b565b8551105b8015614f0457508060200151856020015110155b8015614f26575080604001518160200151614f1f9190615d3b565b8560200151105b15614f36576001925050506110ed565b5080614f4181615de0565b915050614e87565b506000949350505050565b6001600160a01b0385163b15158015614f795750614f79856317a2fd9160e21b613ff7565b1561524f5760008667ffffffffffffffff811115614fa757634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015614fd0578160200160208202803683370190505b50905060008088614fe18880615d67565b614feb9190615d86565b67ffffffffffffffff81111561501157634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561503a578160200160208202803683370190505b5090506000805b61504b8980615d67565b81101561517a576000615060828b8b8b6140be565b90506150988e604051806060016040528061507a85613b26565b815260200161508885613af7565b815260200160018152508f614e83565b156150db57808686815181106150be57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152846150d381615de0565b955050615167565b6000818152603660205260409020546001600160a01b031633141561512d57600081815260366020526040812055855181908790879081106150be57634e487b7160e01b600052603260045260246000fd5b8084848151811061514e57634e487b7160e01b600052603260045260246000fd5b60209081029190910101528261516381615de0565b9350505b508061517281615de0565b915050615041565b506151893360008b8589614135565b6151e15760405162461bcd60e51b8152602060048201526024808201527f657263373231206261746368207472616e736665722072656a656374656420626044820152637920746f60e01b606482015260840161079f565b6151ee33338b8789614135565b6152465760405162461bcd60e51b8152602060048201526024808201527f657263373231206261746368207472616e736665722072656a656374656420626044820152637920746f60e01b606482015260840161079f565b50505050612c0a565b60005b61525c8580615d67565b811015612c08576000615271828787876140be565b6000818152603660205260409020549091506001600160a01b03163314156152a3576000818152603660205260408120555b50806152ae81615de0565b915050615252565b60006152c182614bab565b5050905081851161534857603660006152f483856152df818a615d53565b6152e99190615d67565b866138f0818a615d53565b8152602001908152602001600020546000146153435760405162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e481b5a5b9d195960921b604482015260640161079f565b6153fd565b60006153548686615d3b565b905060006153628786615d3b565b9050855b828110156153f957855b828110156153e757603660006153878785856147fe565b8152602001908152602001600020546000146153d65760405162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e481b5a5b9d195960921b604482015260640161079f565b6153e08682615d3b565b9050615370565b506153f28582615d3b565b9050615366565b5050505b615408600283615d53565b9150600382106111c6576111c6858585856152b6565b6001600160a01b03821660009081526034602052604090205460ff16156154875760405162461bcd60e51b815260206004820152601760248201527f494e56414c49445f415050524f56414c5f4348414e4745000000000000000000604482015260640161079f565b6001600160a01b03838116600081815260376020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60008181526036602052604081205480156155d857600160a01b808216141561555f5760405162461bcd60e51b815260206004820152600960248201527f6e6f74206f776e65720000000000000000000000000000000000000000000000604482015260640161079f565b836001600160a01b0316816001600160a01b0316146155c05760405162461bcd60e51b815260206004820152600960248201527f6e6f74206f776e65720000000000000000000000000000000000000000000000604482015260640161079f565b50506000818152603660205260408120556001611d55565b5060009392505050565b80356001600160a01b03811681146106fd57600080fd5b60008083601f84011261560a578081fd5b50813567ffffffffffffffff811115615621578182fd5b602083019150836020808302850101111561563b57600080fd5b9250929050565b60008083601f840112615653578182fd5b50813567ffffffffffffffff81111561566a578182fd5b60208301915083602082850101111561563b57600080fd5b600082601f830112615692578081fd5b813567ffffffffffffffff808211156156ad576156ad615e3b565b604051601f8301601f19908116603f011681019082821181831017156156d5576156d5615e3b565b816040528381528660208588010111156156ed578485fd5b8360208701602083013792830160200193909352509392505050565b60006020828403121561571a578081fd5b611d52826155e2565b60008060408385031215615735578081fd5b61573e836155e2565b915061574c602084016155e2565b90509250929050565b60008060008060008060008060008060c08b8d031215615773578586fd5b61577c8b6155e2565b995061578a60208c016155e2565b985060408b013567ffffffffffffffff808211156157a6578788fd5b6157b28e838f016155f9565b909a50985060608d01359150808211156157ca578788fd5b6157d68e838f016155f9565b909850965060808d01359150808211156157ee578586fd5b6157fa8e838f016155f9565b909650945060a08d0135915080821115615812578384fd5b5061581f8d828e01615642565b915080935050809150509295989b9194979a5092959850565b60008060008060008060808789031215615850578182fd5b615859876155e2565b9550615867602088016155e2565b9450604087013567ffffffffffffffff80821115615883578384fd5b61588f8a838b016155f9565b909650945060608901359150808211156158a7578384fd5b506158b489828a01615642565b979a9699509497509295939492505050565b6000806000606084860312156158da578283fd5b6158e3846155e2565b92506158f1602085016155e2565b9150604084013561590181615e51565b809150509250925092565b600080600060608486031215615920578283fd5b615929846155e2565b9250615937602085016155e2565b9150604084013590509250925092565b6000806000806080858703121561595c578384fd5b615965856155e2565b9350615973602086016155e2565b925060408501359150606085013567ffffffffffffffff811115615995578182fd5b6159a187828801615682565b91505092959194509250565b600080600080600080600060c0888a0312156159c7578283fd5b6159d0886155e2565b96506159de602089016155e2565b955060408801359450606088013593506080880135925060a088013567ffffffffffffffff811115615a0e578283fd5b615a1a8a828b01615642565b989b979a50959850939692959293505050565b60008060408385031215615a3f578081fd5b615a48836155e2565b91506020830135615a5881615e51565b809150509250929050565b60008060408385031215615a75578182fd5b615a7e836155e2565b946020939093013593505050565b60008060008060008060a08789031215615aa4578384fd5b615aad876155e2565b9550602087013594506040870135935060608701359250608087013567ffffffffffffffff811115615add578283fd5b6158b489828a01615642565b600080600080600060a08688031215615b00578283fd5b615b09866155e2565b9450602086013593506040860135925060608601359150608086013567ffffffffffffffff811115615b39578182fd5b615b4588828901615682565b9150509295509295909350565b600060208284031215615b63578081fd5b81516110ed81615e51565b600060208284031215615b7f578081fd5b81356110ed81615e5f565b600060208284031215615b9b578081fd5b81516110ed81615e5f565b600060208284031215615bb7578081fd5b5035919050565b600080600060608486031215615bd2578081fd5b505081359360208301359350604090920135919050565b60008151808452615c01816020860160208601615d9d565b601f01601f19169290920160200192915050565b60007f68747470733a2f2f6170692e73616e64626f782e67616d652f6c616e64732f0082528251615c4d81601f850160208701615d9d565b7f2f6d657461646174612e6a736f6e000000000000000000000000000000000000601f939091019283015250602d01919050565b6000608082016001600160a01b03808816845260208188168186015260806040860152829150865180845260a0860192508188019350845b81811015615cd557845184529382019392820192600101615cb9565b5050508381036060850152615cea8186615be9565b98975050505050505050565b60006001600160a01b038087168352808616602084015250836040830152608060608301526140b46080830184615be9565b600060208252611d526020830184615be9565b60008219821115615d4e57615d4e615e0f565b500190565b600082615d6257615d62615e25565b500490565b6000816000190483118215151615615d8157615d81615e0f565b500290565b600082821015615d9857615d98615e0f565b500390565b60005b83811015615db8578181015183820152602001615da0565b83811115610a035750506000910152565b600081615dd857615dd8615e0f565b506000190190565b6000600019821415615df457615df4615e0f565b5060010190565b600082615e0a57615e0a615e25565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114610efb57600080fd5b6001600160e01b031981168114610efb57600080fdfea26469706673582212205f535e62eb34e942a96652fbb1af129bf3a90bb0c71354170267fd01be0e19cd64736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102d35760003560e01c806379cc679011610186578063ac9fe421116100e3578063ce1b815f11610097578063e985e9c511610071578063e985e9c51461062a578063eaa5e0671461063d578063eeb5a5d114610650576102d3565b8063ce1b815f146105f3578063cf456ae714610604578063da74222814610617576102d3565b8063b88d4fde116100c8578063b88d4fde146105ba578063c4d66de8146105cd578063c87b56dd146105e0576102d3565b8063ac9fe42114610594578063b0ccc31e146105a7576102d3565b80639d28fb861161013a578063a22cb4651161011f578063a22cb46514610542578063aa271e1a14610555578063ab01b46914610581576102d3565b80639d28fb861461052f5780639ededf7714610355576102d3565b80638e5cb5f61161016b5780638e5cb5f6146104d05780638f283970146104e357806395d89b41146104f6576102d3565b806379cc6790146104aa578063845a4697146104bd576102d3565b806342842e0e116102345780636352211e116101e85780636e1e3bbf116101cd5780636e1e3bbf146104735780636e9960c31461048657806370a0823114610497576102d3565b80636352211e14610434578063654b748a14610447576102d3565b80634e6a0f44116102195780634e6a0f44146103ec57806355064d85146103ff578063572b6c0514610412576102d3565b806342842e0e146103c657806342966c68146103d9576102d3565b806315ddc5351161028b57806328cfbd461161027057806328cfbd461461038d5780632b991746146103a057806338bb305a146103b3576102d3565b806315ddc5351461036757806323b872dd1461037a576102d3565b8063081812fc116102bc578063081812fc14610315578063095ea7b3146103405780630ef2674314610355576102d3565b806301ffc9a7146102d857806306fdde0314610300575b600080fd5b6102eb6102e6366004615b6e565b610663565b60405190151581526020015b60405180910390f35b610308610702565b6040516102f79190615d28565b610328610323366004615ba6565b61073a565b6040516001600160a01b0390911681526020016102f7565b61035361034e366004615a63565b6107d9565b005b6101985b6040519081526020016102f7565b610353610375366004615838565b6108c2565b61035361038836600461590c565b6108d8565b61035361039b366004615838565b610a09565b6103536103ae36600461590c565b610a7e565b6103536103c13660046159ad565b610b63565b6103536103d436600461590c565b610dbb565b6103536103e7366004615ba6565b610ee1565b6103536103fa366004615a8c565b610efe565b6102eb61040d366004615bbe565b6110c5565b6102eb610420366004615709565b606b546001600160a01b0390811691161490565b610328610442366004615ba6565b6110f4565b6102eb610455366004615709565b6001600160a01b031660009081526034602052604090205460ff1690565b610353610481366004615ae9565b611157565b6033546001600160a01b0316610328565b6103596104a5366004615709565b6111cd565b6103536104b8366004615a63565b611241565b6103596104cb366004615ba6565b61139e565b6103596104de366004615ba6565b6113a9565b6103536104f1366004615709565b6113b4565b60408051808201909152600481527f4c414e44000000000000000000000000000000000000000000000000000000006020820152610308565b61035361053d366004615709565b61148f565b610353610550366004615a2d565b61153d565b6102eb610563366004615709565b6001600160a01b031660009081526039602052604090205460ff1690565b61035361058f366004615a2d565b611621565b6103536105a2366004615a2d565b611702565b606c54610328906001600160a01b031681565b6103536105c8366004615947565b61183d565b6103536105db366004615709565b61196a565b6103086105ee366004615ba6565b611ab3565b606b546001600160a01b0316610328565b610353610612366004615a2d565b611b46565b610353610625366004615709565b611c56565b6102eb610638366004615723565b611d04565b61035361064b366004615755565b611d5b565b61035361065e3660046158c6565b61233a565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614806106c657507f80ac58cd000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b806106fa57507f5b5e139f000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b90505b919050565b60408051808201909152600f81527f53616e64626f782773204c414e4473000000000000000000000000000000000060208201525b90565b60008060006107488461241f565b90925090506001600160a01b0382166107a85760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e00000000000000000000000000000060448201526064015b60405180910390fd5b80156107ce575050506000818152603860205260409020546001600160a01b03166106fd565b6000925050506106fd565b606c5482906001600160a01b03163b156108b357606c54604051633185c44d60e21b81523060048201526001600160a01b0383811660248301529091169063c61711349060440160206040518083038186803b15801561083857600080fd5b505afa15801561084c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108709190615b52565b6108b35760405162461bcd60e51b815260206004820152601460248201527313dc195c985d1bdc88139bdd08105b1b1bddd95960621b604482015260640161079f565b6108bd8383612545565b505050565b6108d0868686868686612681565b505050505050565b606c5483906001600160a01b03163b156109f8576108f46126f3565b6001600160a01b0316816001600160a01b0316141561091d57610918848484612702565b610a03565b606c546001600160a01b031663c6171134306109376126f3565b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260440160206040518083038186803b15801561097d57600080fd5b505afa158015610991573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b59190615b52565b6109f85760405162461bcd60e51b815260206004820152601460248201527313dc195c985d1bdc88139bdd08105b1b1bddd95960621b604482015260640161079f565b610a03848484612702565b50505050565b6108d0868686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020601f8a018190048102820181019092528881529250889150879081908401838280828437600092019190915250600192506127b1915050565b606c5482906001600160a01b03163b15610b5857606c54604051633185c44d60e21b81523060048201526001600160a01b0383811660248301529091169063c61711349060440160206040518083038186803b158015610add57600080fd5b505afa158015610af1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b159190615b52565b610b585760405162461bcd60e51b815260206004820152601460248201527313dc195c985d1bdc88139bdd08105b1b1bddd95960621b604482015260640161079f565b610a03848484612c14565b6001600160a01b038716610bb95760405162461bcd60e51b815260206004820152601460248201527f66726f6d206973207a65726f2061646472657373000000000000000000000000604482015260640161079f565b6001600160a01b038616610c0f5760405162461bcd60e51b815260206004820152601a60248201527f63616e27742073656e6420746f207a65726f2061646472657373000000000000604482015260640161079f565b866001600160a01b0316610c216126f3565b6001600160a01b031614610ce9576001600160a01b038716600090815260376020526040812090610c506126f3565b6001600160a01b0316815260208101919091526040016000205460ff1680610c9d575060346000610c7f6126f3565b6001600160a01b0316815260208101919091526040016000205460ff165b610ce95760405162461bcd60e51b815260206004820152601e60248201527f6e6f7420617574686f72697a656420746f207472616e73666572517561640000604482015260640161079f565b610cf68787878787612e07565b610d008580615d67565b6001600160a01b03881660009081526035602052604081208054909190610d28908490615d86565b90915550610d3890508580615d67565b6001600160a01b03871660009081526035602052604081208054909190610d60908490615d3b565b90915550610db29050610d716126f3565b888888888888888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612fb792505050565b50505050505050565b606c5483906001600160a01b03163b15610ed657610dd76126f3565b6001600160a01b0316816001600160a01b03161415610dfb57610918848484613102565b606c546001600160a01b031663c617113430610e156126f3565b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260440160206040518083038186803b158015610e5b57600080fd5b505afa158015610e6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e939190615b52565b610ed65760405162461bcd60e51b815260206004820152601460248201527313dc195c985d1bdc88139bdd08105b1b1bddd95960621b604482015260640161079f565b610a03848484613102565b610efb610eec6126f3565b610ef58361311d565b836132a9565b50565b3360009081526039602052604090205460ff16610f5d5760405162461bcd60e51b815260206004820152600b60248201527f21415554484f52495a4544000000000000000000000000000000000000000000604482015260640161079f565b6001600160a01b038616610fb35760405162461bcd60e51b815260206004820152601260248201527f746f206973207a65726f20616464726573730000000000000000000000000000604482015260640161079f565b610fbe8585856110c5565b1561108257610fd03387878787612e07565b610fda8580615d67565b3360009081526035602052604081208054909190610ff9908490615d86565b9091555061100990508580615d67565b6001600160a01b03871660009081526035602052604081208054909190611031908490615d3b565b9250508190555061107d33338888888888888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612fb792505050565b6108d0565b6108d08686868686868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506133a092505050565b60006110d28484846136d3565b60006110df8585856138b3565b6001600160a01b0316141590505b9392505050565b60006110ff8261311d565b90506001600160a01b0381166106fd5760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354414e545f544f4b454e000000000000000000000000000000604482015260640161079f565b6111628484846136d3565b61116d6105636126f3565b6111b95760405162461bcd60e51b815260206004820152600b60248201527f21415554484f52495a4544000000000000000000000000000000000000000000604482015260640161079f565b6111c68585858585613956565b5050505050565b60006001600160a01b0382166112255760405162461bcd60e51b815260206004820152601260248201527f5a45524f5f414444524553535f4f574e45520000000000000000000000000000604482015260640161079f565b506001600160a01b031660009081526035602052604090205490565b6001600160a01b0382166112975760405162461bcd60e51b815260206004820152601460248201527f4e4f545f46524f4d5f5a45524f41444452455353000000000000000000000000604482015260640161079f565b6000806112a38361241f565b9150915060006112b16126f3565b9050846001600160a01b0316816001600160a01b031614806112f457508180156112f457506000848152603860205260409020546001600160a01b038281169116145b8061131757506001600160a01b03811660009081526034602052604090205460ff165b8061134757506001600160a01b0380861660009081526037602090815260408083209385168352929052205460ff165b6113935760405162461bcd60e51b815260206004820152601160248201527f554e415554484f52495a45445f4255524e000000000000000000000000000000604482015260640161079f565b6111c68584866132a9565b60006106fa82613af7565b60006106fa82613b26565b6033546001600160a01b0316806113c96126f3565b6001600160a01b03161461141f5760405162461bcd60e51b815260206004820152601360248201527f41444d494e5f4143434553535f44454e49454400000000000000000000000000604482015260640161079f565b816001600160a01b0316816001600160a01b03167f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f60405160405180910390a3506033805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6033546001600160a01b03166114a36126f3565b6001600160a01b0316146114e65760405162461bcd60e51b815260206004820152600a60248201526941444d494e5f4f4e4c5960b01b604482015260640161079f565b606c805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517fc6df119c56c99171b170652a3c4750ba46dcaacbdb3b7ab4847a9fa339659bd490600090a250565b606c5482906001600160a01b03163b1561161757606c54604051633185c44d60e21b81523060048201526001600160a01b0383811660248301529091169063c61711349060440160206040518083038186803b15801561159c57600080fd5b505afa1580156115b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d49190615b52565b6116175760405162461bcd60e51b815260206004820152601460248201527313dc195c985d1bdc88139bdd08105b1b1bddd95960621b604482015260640161079f565b6108bd8383613b55565b6033546001600160a01b03166116356126f3565b6001600160a01b0316146116785760405162461bcd60e51b815260206004820152600a60248201526941444d494e5f4f4e4c5960b01b604482015260640161079f565b6001600160a01b0382166116f45760405162461bcd60e51b815260206004820152603160248201527f506f6c79676f6e4c616e6456323a20737562736372697074696f6e2063616e2760448201527f74206265207a65726f2061646472657373000000000000000000000000000000606482015260840161079f565b6116fe8282613b67565b5050565b6033546001600160a01b03166117166126f3565b6001600160a01b0316146117595760405162461bcd60e51b815260206004820152600a60248201526941444d494e5f4f4e4c5960b01b604482015260640161079f565b6033546001600160a01b031661176d6126f3565b6001600160a01b0316146117e95760405162461bcd60e51b815260206004820152602c60248201527f6f6e6c792061646d696e20697320616c6c6f77656420746f206164642073757060448201527f6572206f70657261746f72730000000000000000000000000000000000000000606482015260840161079f565b6001600160a01b038216600081815260346020526040808220805460ff191685151590811790915590519092917f44f92d27abdf4cfb6a7d712c3af68f3be086d4ca747ab802c36f67d6790060d891a35050565b606c5484906001600160a01b03163b1561195e576118596126f3565b6001600160a01b0316816001600160a01b031614156118835761187e85858585613dbd565b6111c6565b606c546001600160a01b031663c61711343061189d6126f3565b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260440160206040518083038186803b1580156118e357600080fd5b505afa1580156118f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061191b9190615b52565b61195e5760405162461bcd60e51b815260206004820152601460248201527313dc195c985d1bdc88139bdd08105b1b1bddd95960621b604482015260640161079f565b6111c685858585613dbd565b600054610100900460ff166119855760005460ff1615611989565b303b155b6119fb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161079f565b600054610100900460ff16158015611a26576000805460ff1961ff0019909116610100171660011790555b611a2e6126f3565b6033805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055611a6482613e43565b6033546040516001600160a01b03909116906000907f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f908290a380156116fe576000805461ff00191690555050565b60606000611ac08361311d565b6001600160a01b03161415611b175760405162461bcd60e51b815260206004820152601160248201527f496420646f6573206e6f74206578697374000000000000000000000000000000604482015260640161079f565b611b2082613ea0565b604051602001611b309190615c15565b6040516020818303038152906040529050919050565b6033546001600160a01b0316611b5a6126f3565b6001600160a01b031614611b9d5760405162461bcd60e51b815260206004820152600a60248201526941444d494e5f4f4e4c5960b01b604482015260640161079f565b6001600160a01b038216611bf35760405162461bcd60e51b815260206004820152601c60248201527f506f6c79676f6e4c616e643a20496e76616c6964206164647265737300000000604482015260640161079f565b6001600160a01b038216600081815260396020908152604091829020805460ff19168515159081179091558251938452908301527fff452b3b9159b024a9098f0058c63eccd90d36b3584608202800d662f962bb60910160405180910390a15050565b6033546001600160a01b0316611c6a6126f3565b6001600160a01b031614611cad5760405162461bcd60e51b815260206004820152600a60248201526941444d494e5f4f4e4c5960b01b604482015260640161079f565b606b805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517fd91237492a9e30cd2faf361fc103998a382ff0ec2b1b07dc1cbebb76ae2f1ea290600090a250565b6001600160a01b03808316600090815260376020908152604080832093851683529290529081205460ff1680611d5257506001600160a01b03821660009081526034602052604090205460ff165b90505b92915050565b6001600160a01b038a16611db15760405162461bcd60e51b815260206004820152601460248201527f66726f6d206973207a65726f2061646472657373000000000000000000000000604482015260640161079f565b6001600160a01b038916611e075760405162461bcd60e51b815260206004820152601a60248201527f63616e27742073656e6420746f207a65726f2061646472657373000000000000604482015260640161079f565b868514611e7c5760405162461bcd60e51b815260206004820152603c60248201527f506f6c79676f6e4c616e6442617365546f6b656e56323a2073697a657327732060448201527f616e6420782773206c656e6774682061726520646966666572656e7400000000606482015260840161079f565b848314611ef15760405162461bcd60e51b815260206004820152603860248201527f506f6c79676f6e4c616e6442617365546f6b656e56323a2078277320616e642060448201527f792773206c656e6774682061726520646966666572656e740000000000000000606482015260840161079f565b896001600160a01b0316611f036126f3565b6001600160a01b031614611ff0576001600160a01b038a16600090815260376020526040812090611f326126f3565b6001600160a01b0316815260208101919091526040016000205460ff1680611f7f575060346000611f616126f3565b6001600160a01b0316815260208101919091526040016000205460ff165b611ff05760405162461bcd60e51b8152602060048201526024808201527f6e6f7420617574686f72697a656420746f207472616e736665724d756c74695160448201527f7561647300000000000000000000000000000000000000000000000000000000606482015260840161079f565b6000805b888110156120aa5760008a8a8381811061201e57634e487b7160e01b600052603260045260246000fd5b9050602002013590506120808d8d838c8c8781811061204d57634e487b7160e01b600052603260045260246000fd5b905060200201358b8b8881811061207457634e487b7160e01b600052603260045260246000fd5b90506020020135612e07565b61208a8180615d67565b6120949084615d3b565b92505080806120a290615de0565b915050611ff4565b506001600160a01b038b16600090815260356020526040812080548392906120d3908490615d86565b90915550506001600160a01b038a1660009081526035602052604081208054839290612100908490615d3b565b90915550506001600160a01b038a163b1515801561212a575061212a8a6317a2fd9160e21b613ff7565b1561232d5760008167ffffffffffffffff81111561215857634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612181578160200160208202803683370190505b5090506000805b8a8110156122875760008c8c838181106121b257634e487b7160e01b600052603260045260246000fd5b90506020020135905060005b6121c88280615d67565b8110156122725761222781838e8e878181106121f457634e487b7160e01b600052603260045260246000fd5b905060200201358d8d8881811061221b57634e487b7160e01b600052603260045260246000fd5b905060200201356140be565b85858151811061224757634e487b7160e01b600052603260045260246000fd5b60209081029190910101528361225c81615de0565b945050808061226a90615de0565b9150506121be565b5050808061227f90615de0565b915050612188565b506122d26122936126f3565b8e8e8589898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061413592505050565b61232a5760405162461bcd60e51b8152602060048201526024808201527f657263373231206261746368207472616e736665722072656a656374656420626044820152637920746f60e01b606482015260840161079f565b50505b5050505050505050505050565b606c5482906001600160a01b03163b1561241457606c54604051633185c44d60e21b81523060048201526001600160a01b0383811660248301529091169063c61711349060440160206040518083038186803b15801561239957600080fd5b505afa1580156123ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d19190615b52565b6124145760405162461bcd60e51b815260206004820152601460248201527313dc195c985d1bdc88139bdd08105b1b1bddd95960621b604482015260640161079f565b610a038484846141f4565b6000807fff000000000000000000000000000000000000000000000000000000000000008316156124925760405162461bcd60e51b815260206004820152601060248201527f496e76616c696420746f6b656e20696400000000000000000000000000000000604482015260640161079f565b60006124a061019885615dfb565b905060006124b061019886615d53565b600086815260366020526040902054909150600160a01b80821614156124e75760009450600160ff1b808216149350505050612540565b801561250057809450600160ff1b80821614935061253c565b6125356003806125108682615d67565b61251a9190615d53565b60036125268682615d67565b6125309190615d53565b6138b3565b9450600093505b5050505b915091565b6000818152603660205260408120549061255e8361311d565b9050600061256a6126f3565b90506001600160a01b0382166125c25760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e000000000000000000000000000000604482015260640161079f565b806001600160a01b0316826001600160a01b0316148061260757506001600160a01b0380831660009081526037602090815260408083209385168352929052205460ff165b8061262a57506001600160a01b03811660009081526034602052604090205460ff165b6126765760405162461bcd60e51b815260206004820152601560248201527f554e415554484f52495a45445f415050524f56414c0000000000000000000000604482015260640161079f565b6111c68386866142e5565b6108d0868686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020601f8a018190048102820181019092528881529250889150879081908401838280828437600092018290525092506127b1915050565b60006126fd61439b565b905090565b61270d8383836143e5565b6127188383836145ee565b6001600160a01b0382163b1515801561273d575061273d826317a2fd9160e21b613ff7565b156108bd5761276561274d6126f3565b848484604051806020016040528060008152506146ac565b6108bd5760405162461bcd60e51b815260206004820152601860248201527f4552433732315f5452414e534645525f52454a45435445440000000000000000604482015260640161079f565b60006127bb6126f3565b90506000866001600160a01b0316826001600160a01b0316148061280457506001600160a01b0380881660009081526037602090815260408083209386168352929052205460ff165b8061282757506001600160a01b03821660009081526034602052604090205460ff165b90506001600160a01b03871661287f5760405162461bcd60e51b815260206004820152601460248201527f4e4f545f46524f4d5f5a45524f41444452455353000000000000000000000000604482015260640161079f565b6001600160a01b0386166128d55760405162461bcd60e51b815260206004820152601260248201527f4e4f545f544f5f5a45524f414444524553530000000000000000000000000000604482015260640161079f565b845160005b81811015612a6c57600087828151811061290457634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008061291a8361241f565b915091508b6001600160a01b0316826001600160a01b03161461297f5760405162461bcd60e51b815260206004820152601b60248201527f42415443485452414e5346455246524f4d5f4e4f545f4f574e45520000000000604482015260640161079f565b85806129ac57508080156129ac57506000838152603860205260409020546001600160a01b038881169116145b6129f85760405162461bcd60e51b815260206004820152600e60248201527f4e4f545f415554484f52495a4544000000000000000000000000000000000000604482015260640161079f565b600083815260366020526040812054612a15918591908e9061476b565b828b6001600160a01b03168d6001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050508080612a6490615de0565b9150506128da565b50866001600160a01b0316886001600160a01b031614612ae1576001600160a01b03881660009081526035602052604081208054839290612aae908490615d86565b90915550506001600160a01b03871660009081526035602052604081208054839290612adb908490615d3b565b90915550505b6001600160a01b0387163b15612c0a57612b02876317a2fd9160e21b613ff7565b15612b6557612b148389898989614135565b612b605760405162461bcd60e51b815260206004820152601e60248201527f4552433732315f42415443485f52454345495645445f52454a45435445440000604482015260640161079f565b612c0a565b8315612c0a5760005b81811015612c0857612baa848a8a8a8581518110612b9c57634e487b7160e01b600052603260045260246000fd5b60200260200101518a6146ac565b612bf65760405162461bcd60e51b815260206004820152601860248201527f4552433732315f52454345495645445f52454a45435445440000000000000000604482015260640161079f565b80612c0081615de0565b915050612b6e565b505b5050505050505050565b60008181526036602052604081205490612c2d8361311d565b90506000612c396126f3565b90506001600160a01b038616612c915760405162461bcd60e51b815260206004820152601360248201527f5a45524f5f414444524553535f53454e44455200000000000000000000000000604482015260640161079f565b6001600160a01b038216612ce75760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e000000000000000000000000000000604482015260640161079f565b856001600160a01b0316816001600160a01b03161480612d2c57506001600160a01b0380871660009081526037602090815260408083209385168352929052205460ff165b80612d4f57506001600160a01b03811660009081526034602052604090205460ff165b612d9b5760405162461bcd60e51b815260206004820152601560248201527f554e415554484f52495a45445f415050524f56414c0000000000000000000000604482015260640161079f565b856001600160a01b0316836001600160a01b031614612dfc5760405162461bcd60e51b815260206004820152601060248201527f4f574e45525f4e4f545f53454e44455200000000000000000000000000000000604482015260640161079f565b6108d08386866142e5565b612e128383836136d3565b8260011415612f0f576000612e29600084846147fe565b90506000612e368261311d565b90506001600160a01b038116612e8e5760405162461bcd60e51b815260206004820152601460248201527f746f6b656e20646f6573206e6f74206578697374000000000000000000000000604482015260640161079f565b866001600160a01b0316816001600160a01b031614612eef5760405162461bcd60e51b815260206004820152601a60248201527f6e6f74206f776e657220696e205f7472616e7366657251756164000000000000604482015260640161079f565b5060009081526036602052604090206001600160a01b0385169055612f45565b612f4385856040518060600160405280868152602001858152602001878152506001600288612f3e9190615d53565b614820565b505b60005b612f528480615d67565b8110156108d057612f65818585856140be565b856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a480612faf81615de0565b915050612f48565b6001600160a01b0385163b15158015612fdc5750612fdc856317a2fd9160e21b613ff7565b15610db2576000612fed8580615d67565b67ffffffffffffffff81111561301357634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561303c578160200160208202803683370190505b50905060005b61304c8680615d67565b81101561309c5761305f818787876140be565b82828151811061307f57634e487b7160e01b600052603260045260246000fd5b60209081029190910101528061309481615de0565b915050613042565b506130aa8888888486614135565b612c0a5760405162461bcd60e51b8152602060048201526024808201527f657263373231206261746368207472616e736665722072656a656374656420626044820152637920746f60e01b606482015260840161079f565b6108bd8383836040518060200160405280600081525061183d565b60007fff0000000000000000000000000000000000000000000000000000000000000082161561318f5760405162461bcd60e51b815260206004820152601060248201527f496e76616c696420746f6b656e20696400000000000000000000000000000000604482015260640161079f565b600080600061319d85614a9f565b919450925090506131ae8383615dfb565b156131fb5760405162461bcd60e51b815260206004820152601e60248201527f7820636f6f7264696e6174653a20496e76616c696420746f6b656e2069640000604482015260640161079f565b6132058382615dfb565b156132525760405162461bcd60e51b815260206004820152601e60248201527f7920636f6f7264696e6174653a20496e76616c696420746f6b656e2069640000604482015260640161079f565b826001141561329557600085815260366020526040902054600160a01b80821614613287576132828484846138b3565b61328a565b60005b9450505050506106fd565b6132a08383836138b3565b95945050505050565b816001600160a01b0316836001600160a01b03161461330a5760405162461bcd60e51b815260206004820152600960248201527f4e4f545f4f574e45520000000000000000000000000000000000000000000000604482015260640161079f565b80600160a01b61331f6001600160ff1b615d86565b6000838152603660209081526040808320805494909416949094179092556001600160a01b0387168152603590915290812080549161335d83615dc9565b909155505060405182906000906001600160a01b038716907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a450505050565b60006133ab85614bab565b5050905060006133bc8286866147fe565b604080518181526108208101825291925060009190816020015b6133fa60405180606001604052806000815260200160008152602001600081525090565b8152602001906001900390816133d657905050905060008060038911156134545761344e60405180606001604052808a81526020018981526020018b81525084838560028e6134499190615d53565b614ca3565b90925090505b60005b6134618a80615d67565b811015613641576000613476828c8c8c6140be565b905060006134b086604051806060016040528061349286613b26565b81526020016134a086613af7565b8152602001600181525087614e83565b905080156134f55760405182906001600160a01b038f169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90600090a461362c565b6000828152603660205260409020546001600160a01b03163314156135a6576000828152603860205260409020546001600160a01b03161561355b576000828152603860205260409020805473ffffffffffffffffffffffffffffffffffffffff191690555b613566600185615d3b565b60405190945082906001600160a01b038f169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90600090a461362c565b600082815260366020526040902054156135f35760405162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e481b5a5b9d195960921b604482015260640161079f565b60405182906001600160a01b038f16906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45b5050808061363990615de0565b915050613457565b506136528383838d8d8d8d8d614f54565b60008481526036602052604090206001600160a01b038b1690556136768980615d67565b6001600160a01b038b166000908152603560205260408120805490919061369e908490615d3b565b909155505033600090815260356020526040812080548392906136c2908490615d86565b909155505050505050505050505050565b82600114806136e25750826003145b806136ed5750826006145b806136f8575082600c145b806137035750826018145b61374f5760405162461bcd60e51b815260206004820152600c60248201527f496e76616c69642073697a650000000000000000000000000000000000000000604482015260640161079f565b6137598383615dfb565b156137a65760405162461bcd60e51b815260206004820152601460248201527f496e76616c6964207820636f6f7264696e617465000000000000000000000000604482015260640161079f565b6137b08382615dfb565b156137fd5760405162461bcd60e51b815260206004820152601460248201527f496e76616c6964207920636f6f7264696e617465000000000000000000000000604482015260640161079f565b61380983610198615d86565b8211156138585760405162461bcd60e51b815260206004820152600f60248201527f78206f7574206f6620626f756e64730000000000000000000000000000000000604482015260640161079f565b61386483610198615d86565b8111156108bd5760405162461bcd60e51b815260206004820152600f60248201527f79206f7574206f6620626f756e64730000000000000000000000000000000000604482015260640161079f565b60008060006138c186614bab565b50909250905060006036816138ff858a6138db818c615d53565b6138e59190615d67565b8b6138f0818c615d53565b6138fa9190615d67565b6147fe565b815260208101919091526040016000205490506001600160a01b0381161561392b5792506110ed915050565b60188710156139495761393f8287876138b3565b93505050506110ed565b5060009695505050505050565b6001600160a01b0385166139ac5760405162461bcd60e51b815260206004820152601260248201527f746f206973207a65726f20616464726573730000000000000000000000000000604482015260640161079f565b60006139b785614bab565b5050905060006139c88286866147fe565b90506139d786868660186152b6565b60005b6139e48780615d67565b811015613a945760006139f9828989896140be565b60008181526036602052604090205490915015613a495760405162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e481b5a5b9d195960921b604482015260640161079f565b60405181906001600160a01b038b16906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45080613a8c81615de0565b9150506139da565b5060008181526036602052604090206001600160a01b0388169055613ab98680615d67565b6001600160a01b03881660009081526035602052604081208054909190613ae1908490615d3b565b90915550610db290503360008989898989612fb7565b60006106fa6101987effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8416615d53565b60006106fa6101987effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8416615dfb565b6116fe613b606126f3565b838361541e565b606c546001600160a01b03163b15613d7457606c546040517fc3c5a5470000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b039091169063c3c5a54790602401602060405180830381600087803b158015613bd757600080fd5b505af1158015613beb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c0f9190615b52565b613d74578015613c9d57606c546040517f7d3e3dbe0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03848116602483015290911690637d3e3dbe906044015b600060405180830381600087803b158015613c8057600080fd5b505af1158015613c94573d6000803e3d6000fd5b50505050613d74565b6001600160a01b03821615613cfd57606c546040517fa0af29030000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0384811660248301529091169063a0af290390604401613c66565b606c546040517f4420e4860000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0390911690634420e48690602401600060405180830381600087803b158015613d5b57600080fd5b505af1158015613d6f573d6000803e3d6000fd5b505050505b816001600160a01b03167f3c7a9c847c035e45b84027e44ad55724873d5921b3a6abb8c0926b415d9241b182604051613db1911515815260200190565b60405180910390a25050565b613dc88484846143e5565b613dd38484846145ee565b6001600160a01b0383163b15610a0357613df7613dee6126f3565b858585856146ac565b610a035760405162461bcd60e51b815260206004820152601860248201527f4552433732315f5452414e534645525f52454a45435445440000000000000000604482015260640161079f565b606b805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383811691909117918290556040519116907fd91237492a9e30cd2faf361fc103998a382ff0ec2b1b07dc1cbebb76ae2f1ea290600090a250565b606081613ee1575060408051808201909152600181527f300000000000000000000000000000000000000000000000000000000000000060208201526106fd565b8160005b8115613f0b5780613ef581615de0565b9150613f049050600a83615d53565b9150613ee5565b60008167ffffffffffffffff811115613f3457634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015613f5e576020820181803683370190505b5090505b8415613fef57613f73600183615d86565b9150613f80600a86615dfb565b613f8b906030615d3b565b60f81b818381518110613fae57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350613fe8600a86615d53565b9450613f62565b949350505050565b604080516001600160e01b031983166024808301919091528251808303909101815260449091018252602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01ffc9a7000000000000000000000000000000000000000000000000000000001781528251935160008082529485948594909392908183858c612710fa955080519450505050609e5a116140aa57634e487b7160e01b600052600160045260246000fd5b8280156140b45750815b9695505050505050565b6000806140cb8587615d53565b90506140d8600282615dfb565b614107576140ff60006140eb8789615dfb565b6140f59087615d3b565b6138fa8487615d3b565b915050613fef565b6140ff60006141168789615dfb565b614121906001615d3b565b61412b8888615d3b565b6140f59190615d86565b600080846001600160a01b0316634b808c46888887876040518563ffffffff1660e01b815260040161416a9493929190615c81565b602060405180830381600087803b15801561418457600080fd5b505af1158015614198573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141bc9190615b8a565b6001600160e01b0319167f4b808c46000000000000000000000000000000000000000000000000000000001491505095945050505050565b6001600160a01b03831661424a5760405162461bcd60e51b815260206004820152601660248201527f496e76616c69642073656e646572206164647265737300000000000000000000604482015260640161079f565b60006142546126f3565b9050836001600160a01b0316816001600160a01b0316148061428e57506001600160a01b03811660009081526034602052604090205460ff165b6142da5760405162461bcd60e51b815260206004820152601c60248201527f554e415554484f52495a45445f415050524f56455f464f525f414c4c00000000604482015260640161079f565b610a0384848461541e565b60006142f08261311d565b90506001600160a01b0383166143125761430d828583600061476b565b614354565b61431f828583600161476b565b6000828152603860205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385161790555b81836001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a450505050565b606b546000906001600160a01b03163314156143de57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c610737565b5033610737565b6000806143f18361241f565b9150915060006143ff6126f3565b90506001600160a01b0383166144575760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e000000000000000000000000000000604482015260640161079f565b856001600160a01b0316836001600160a01b0316146144b85760405162461bcd60e51b815260206004820152601760248201527f434845434b5452414e534645525f4e4f545f4f574e4552000000000000000000604482015260640161079f565b6001600160a01b03851661450e5760405162461bcd60e51b815260206004820152601260248201527f4e4f545f544f5f5a45524f414444524553530000000000000000000000000000604482015260640161079f565b826001600160a01b0316816001600160a01b0316148061454657506001600160a01b03811660009081526034602052604090205460ff165b8061457657506001600160a01b0380871660009081526037602090815260408083209385168352929052205460ff165b806145a257508180156145a257506000848152603860205260409020546001600160a01b038281169116145b6108d05760405162461bcd60e51b815260206004820152601560248201527f554e415554484f52495a45445f5452414e534645520000000000000000000000604482015260640161079f565b6001600160a01b038316600090815260356020526040812080549161461283615dc9565b90915550506001600160a01b038216600090815260356020526040812080549161463b83615de0565b9190505550614666816036600061464f8590565b81526020019081526020016000205484600061476b565b80826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600080846001600160a01b031663150b7a02888887876040518563ffffffff1660e01b81526004016146e19493929190615cf6565b602060405180830381600087803b1580156146fb57600080fd5b505af115801561470f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147339190615b8a565b6001600160e01b0319167f150b7a02000000000000000000000000000000000000000000000000000000001491505095945050505050565b80156147af576000848152603660205260409020600160ff1b6001600160a01b03841673ffffffffffffffffffffffffffffffffffffffff19861617179055610a03565b6001600160a01b0382166147c86001600160ff1b615d86565b841673ffffffffffffffffffffffffffffffffffffffff1916176036600086815260208101919091526040016000205550505050565b600061480c61019883615d67565b6148168486615d3b565b613fef9190615d3b565b60008060006148328660400151614bab565b9250509150600061484c83886000015189602001516147fe565b87519091506001905b604089015189516148669190615d3b565b8110156149c25760208901515b89604001518a602001516148879190615d3b565b8110156149b05760008060038a10156148bf576148af8e6148aa600087876147fe565b6154f4565b80156148b85750845b9050614985565b6148ee8e8e60405180606001604052808881526020018781526020018e815250600060028f612f3e9190615d53565b905060006148fd8886866147fe565b6000818152603660205260409020549350905082156149835781614973578e6001600160a01b031683146149735760405162461bcd60e51b815260206004820152601760248201527f6e6f74206f776e6572206f66206368696c642051756164000000000000000000604482015260640161079f565b6000818152603660205260408120555b505b808061499057508115155b80156149995750845b9450505087816149a99190615d3b565b9050614873565b506149bb8782615d3b565b9050614855565b508615614a925780614a6b57896001600160a01b03166149ef89604001518a600001518b602001516138b3565b6001600160a01b031614614a6b5760405162461bcd60e51b815260206004820152602b60248201527f6e6f74206f776e6572206f6620616c6c20737562207175616473206e6f72207060448201527f6172656e74207175616473000000000000000000000000000000000000000000606482015260840161079f565b5060009081526036602052604090206001600160a01b038816905550600191506132a09050565b9998505050505050505050565b6000806000614aad84613b26565b9150614ab884613af7565b90507fff00000000000000000000000000000000000000000000000000000000000000841680614aeb5760019350614ba3565b600160f81b811415614b005760039350614ba3565b600160f91b811415614b155760069350614ba3565b600360f81b811415614b2a57600c9350614ba3565b7f0400000000000000000000000000000000000000000000000000000000000000811415614b5b5760189350614ba3565b60405162461bcd60e51b815260206004820152601060248201527f496e76616c696420746f6b656e20696400000000000000000000000000000000604482015260640161079f565b509193909250565b60008060008360011415614bc6576000925060039150614c9c565b8360031415614bdf57600160f81b925060069150614c9c565b8360061415614bfe5750600160f91b9150600c9050600160f81b614c9c565b83600c1415614c1d5750600360f81b915060189050600160f91b614c9c565b8360181415614c5457507f04000000000000000000000000000000000000000000000000000000000000009150600360f81b614c9c565b60405162461bcd60e51b815260206004820152600c60248201527f496e76616c69642073697a650000000000000000000000000000000000000000604482015260640161079f565b9193909250565b6000806000614cb184614bab565b50509050600088604001518960000151614ccb9190615d3b565b9050600089604001518a60200151614ce39190615d3b565b8a519091505b82811015614e4b5760208b01515b82811015614e39576000614d268c60405180606001604052808681526020018581526020018c8152508c614e83565b905080614e27576000614d3a8785856147fe565b6000818152603660205260409020549091506001600160a01b038116331415614ddc5760405180606001604052808681526020018581526020018c8152508e8d81518110614d9857634e487b7160e01b600052603260045260246000fd5b60200260200101819052508b80614dae90615de0565b9c50614dbc90508b80615d67565b614dc6908e615d3b565b6000838152603660205260408120559c50614e24565b6001600160a01b03811615614e245760405162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e481b5a5b9d195960921b604482015260640161079f565b50505b50614e328882615d3b565b9050614cf7565b50614e448782615d3b565b9050614ce9565b50614e57600287615d53565b955060038610614e7357614e6e8a8a8a8a8a614ca3565b985096505b5094989597509495505050505050565b6000805b82811015614f49576000858281518110614eb157634e487b7160e01b600052603260045260246000fd5b6020026020010151905084604001518160400151118015614ed457508051855110155b8015614ef0575060408101518151614eec9190615d3b565b8551105b8015614f0457508060200151856020015110155b8015614f26575080604001518160200151614f1f9190615d3b565b8560200151105b15614f36576001925050506110ed565b5080614f4181615de0565b915050614e87565b506000949350505050565b6001600160a01b0385163b15158015614f795750614f79856317a2fd9160e21b613ff7565b1561524f5760008667ffffffffffffffff811115614fa757634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015614fd0578160200160208202803683370190505b50905060008088614fe18880615d67565b614feb9190615d86565b67ffffffffffffffff81111561501157634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561503a578160200160208202803683370190505b5090506000805b61504b8980615d67565b81101561517a576000615060828b8b8b6140be565b90506150988e604051806060016040528061507a85613b26565b815260200161508885613af7565b815260200160018152508f614e83565b156150db57808686815181106150be57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152846150d381615de0565b955050615167565b6000818152603660205260409020546001600160a01b031633141561512d57600081815260366020526040812055855181908790879081106150be57634e487b7160e01b600052603260045260246000fd5b8084848151811061514e57634e487b7160e01b600052603260045260246000fd5b60209081029190910101528261516381615de0565b9350505b508061517281615de0565b915050615041565b506151893360008b8589614135565b6151e15760405162461bcd60e51b8152602060048201526024808201527f657263373231206261746368207472616e736665722072656a656374656420626044820152637920746f60e01b606482015260840161079f565b6151ee33338b8789614135565b6152465760405162461bcd60e51b8152602060048201526024808201527f657263373231206261746368207472616e736665722072656a656374656420626044820152637920746f60e01b606482015260840161079f565b50505050612c0a565b60005b61525c8580615d67565b811015612c08576000615271828787876140be565b6000818152603660205260409020549091506001600160a01b03163314156152a3576000818152603660205260408120555b50806152ae81615de0565b915050615252565b60006152c182614bab565b5050905081851161534857603660006152f483856152df818a615d53565b6152e99190615d67565b866138f0818a615d53565b8152602001908152602001600020546000146153435760405162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e481b5a5b9d195960921b604482015260640161079f565b6153fd565b60006153548686615d3b565b905060006153628786615d3b565b9050855b828110156153f957855b828110156153e757603660006153878785856147fe565b8152602001908152602001600020546000146153d65760405162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e481b5a5b9d195960921b604482015260640161079f565b6153e08682615d3b565b9050615370565b506153f28582615d3b565b9050615366565b5050505b615408600283615d53565b9150600382106111c6576111c6858585856152b6565b6001600160a01b03821660009081526034602052604090205460ff16156154875760405162461bcd60e51b815260206004820152601760248201527f494e56414c49445f415050524f56414c5f4348414e4745000000000000000000604482015260640161079f565b6001600160a01b03838116600081815260376020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60008181526036602052604081205480156155d857600160a01b808216141561555f5760405162461bcd60e51b815260206004820152600960248201527f6e6f74206f776e65720000000000000000000000000000000000000000000000604482015260640161079f565b836001600160a01b0316816001600160a01b0316146155c05760405162461bcd60e51b815260206004820152600960248201527f6e6f74206f776e65720000000000000000000000000000000000000000000000604482015260640161079f565b50506000818152603660205260408120556001611d55565b5060009392505050565b80356001600160a01b03811681146106fd57600080fd5b60008083601f84011261560a578081fd5b50813567ffffffffffffffff811115615621578182fd5b602083019150836020808302850101111561563b57600080fd5b9250929050565b60008083601f840112615653578182fd5b50813567ffffffffffffffff81111561566a578182fd5b60208301915083602082850101111561563b57600080fd5b600082601f830112615692578081fd5b813567ffffffffffffffff808211156156ad576156ad615e3b565b604051601f8301601f19908116603f011681019082821181831017156156d5576156d5615e3b565b816040528381528660208588010111156156ed578485fd5b8360208701602083013792830160200193909352509392505050565b60006020828403121561571a578081fd5b611d52826155e2565b60008060408385031215615735578081fd5b61573e836155e2565b915061574c602084016155e2565b90509250929050565b60008060008060008060008060008060c08b8d031215615773578586fd5b61577c8b6155e2565b995061578a60208c016155e2565b985060408b013567ffffffffffffffff808211156157a6578788fd5b6157b28e838f016155f9565b909a50985060608d01359150808211156157ca578788fd5b6157d68e838f016155f9565b909850965060808d01359150808211156157ee578586fd5b6157fa8e838f016155f9565b909650945060a08d0135915080821115615812578384fd5b5061581f8d828e01615642565b915080935050809150509295989b9194979a5092959850565b60008060008060008060808789031215615850578182fd5b615859876155e2565b9550615867602088016155e2565b9450604087013567ffffffffffffffff80821115615883578384fd5b61588f8a838b016155f9565b909650945060608901359150808211156158a7578384fd5b506158b489828a01615642565b979a9699509497509295939492505050565b6000806000606084860312156158da578283fd5b6158e3846155e2565b92506158f1602085016155e2565b9150604084013561590181615e51565b809150509250925092565b600080600060608486031215615920578283fd5b615929846155e2565b9250615937602085016155e2565b9150604084013590509250925092565b6000806000806080858703121561595c578384fd5b615965856155e2565b9350615973602086016155e2565b925060408501359150606085013567ffffffffffffffff811115615995578182fd5b6159a187828801615682565b91505092959194509250565b600080600080600080600060c0888a0312156159c7578283fd5b6159d0886155e2565b96506159de602089016155e2565b955060408801359450606088013593506080880135925060a088013567ffffffffffffffff811115615a0e578283fd5b615a1a8a828b01615642565b989b979a50959850939692959293505050565b60008060408385031215615a3f578081fd5b615a48836155e2565b91506020830135615a5881615e51565b809150509250929050565b60008060408385031215615a75578182fd5b615a7e836155e2565b946020939093013593505050565b60008060008060008060a08789031215615aa4578384fd5b615aad876155e2565b9550602087013594506040870135935060608701359250608087013567ffffffffffffffff811115615add578283fd5b6158b489828a01615642565b600080600080600060a08688031215615b00578283fd5b615b09866155e2565b9450602086013593506040860135925060608601359150608086013567ffffffffffffffff811115615b39578182fd5b615b4588828901615682565b9150509295509295909350565b600060208284031215615b63578081fd5b81516110ed81615e51565b600060208284031215615b7f578081fd5b81356110ed81615e5f565b600060208284031215615b9b578081fd5b81516110ed81615e5f565b600060208284031215615bb7578081fd5b5035919050565b600080600060608486031215615bd2578081fd5b505081359360208301359350604090920135919050565b60008151808452615c01816020860160208601615d9d565b601f01601f19169290920160200192915050565b60007f68747470733a2f2f6170692e73616e64626f782e67616d652f6c616e64732f0082528251615c4d81601f850160208701615d9d565b7f2f6d657461646174612e6a736f6e000000000000000000000000000000000000601f939091019283015250602d01919050565b6000608082016001600160a01b03808816845260208188168186015260806040860152829150865180845260a0860192508188019350845b81811015615cd557845184529382019392820192600101615cb9565b5050508381036060850152615cea8186615be9565b98975050505050505050565b60006001600160a01b038087168352808616602084015250836040830152608060608301526140b46080830184615be9565b600060208252611d526020830184615be9565b60008219821115615d4e57615d4e615e0f565b500190565b600082615d6257615d62615e25565b500490565b6000816000190483118215151615615d8157615d81615e0f565b500290565b600082821015615d9857615d98615e0f565b500390565b60005b83811015615db8578181015183820152602001615da0565b83811115610a035750506000910152565b600081615dd857615dd8615e0f565b506000190190565b6000600019821415615df457615df4615e0f565b5060010190565b600082615e0a57615e0a615e25565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114610efb57600080fd5b6001600160e01b031981168114610efb57600080fdfea26469706673582212205f535e62eb34e942a96652fbb1af129bf3a90bb0c71354170267fd01be0e19cd64736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "params": {
          "id": "The id of the token",
          "operator": "The address receiving the approval"
        }
      },
      "approveFor(address,address,uint256)": {
        "params": {
          "id": "The id of the token",
          "operator": "The address receiving the approval",
          "sender": "The address giving the approval"
        }
      },
      "balanceOf(address)": {
        "params": {
          "owner": "The address to look for."
        },
        "returns": {
          "_0": "The number of tokens owned by the address."
        }
      },
      "batchTransferFrom(address,address,uint256[],bytes)": {
        "params": {
          "data": "Additional data.",
          "from": "The sender of the token.",
          "ids": "The ids of the tokens.",
          "to": "The recipient of the token."
        }
      },
      "batchTransferQuad(address,address,uint256[],uint256[],uint256[],bytes)": {
        "params": {
          "data": "additional data",
          "from": "current owner of the quad",
          "sizes": "list of sizes for each quad",
          "to": "destination",
          "xs": "list of bottom left x coordinates for each quad",
          "ys": "list of bottom left y coordinates for each quad"
        }
      },
      "burn(uint256)": {
        "params": {
          "id": "The token which will be burnt."
        }
      },
      "burnFrom(address,uint256)": {
        "params": {
          "from": "address whose token is to be burnt.",
          "id": "The token which will be burnt."
        }
      },
      "changeAdmin(address)": {
        "details": "Change the administrator to be `newAdmin`.",
        "params": {
          "newAdmin": "The address of the new administrator."
        }
      },
      "exists(uint256,uint256,uint256)": {
        "params": {
          "size": "size of the",
          "x": "x coordinate of the quad",
          "y": "y coordinate of the quad"
        },
        "returns": {
          "_0": "bool for if Land has been minted or not"
        }
      },
      "getAdmin()": {
        "details": "Get the current administrator of this contract.",
        "returns": {
          "_0": "The current administrator of this contract."
        }
      },
      "getApproved(uint256)": {
        "params": {
          "id": "The id of the token."
        },
        "returns": {
          "_0": "The address of the operator."
        }
      },
      "getTrustedForwarder()": {
        "returns": {
          "_0": "trustedForwarder address of the trusted forwarder"
        }
      },
      "getX(uint256)": {
        "params": {
          "id": "tokenId"
        },
        "returns": {
          "_0": "the x coordinates"
        }
      },
      "getY(uint256)": {
        "params": {
          "id": "tokenId"
        },
        "returns": {
          "_0": "the y coordinates"
        }
      },
      "height()": {
        "returns": {
          "_0": "height"
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "operator": "The address of the operator.",
          "owner": "The address of the owner."
        },
        "returns": {
          "_0": "isOperator The status of the approval."
        }
      },
      "isMinter(address)": {
        "params": {
          "who": "The address to query."
        },
        "returns": {
          "_0": "whether the address has minter rights."
        }
      },
      "isSuperOperator(address)": {
        "params": {
          "who": "The address to query."
        },
        "returns": {
          "_0": "whether the address has superOperator rights."
        }
      },
      "isTrustedForwarder(address)": {
        "params": {
          "forwarder": "address to check"
        },
        "returns": {
          "_0": "is trusted"
        }
      },
      "mintAndTransferQuad(address,uint256,uint256,uint256,bytes)": {
        "params": {
          "data": "extra data to pass to the transfer",
          "size": "The size of the new quad",
          "to": "The recipient of the new quad",
          "x": "The top left x coordinate of the new quad",
          "y": "The top left y coordinate of the new quad"
        }
      },
      "mintQuad(address,uint256,uint256,uint256,bytes)": {
        "params": {
          "data": "extra data to pass to the transfer",
          "size": "The size of the new quad",
          "user": "The recipient of the new quad",
          "x": "The top left x coordinate of the new quad",
          "y": "The top left y coordinate of the new quad"
        }
      },
      "name()": {
        "returns": {
          "_0": "The name of the token contract"
        }
      },
      "ownerOf(uint256)": {
        "params": {
          "id": "The id of the token."
        },
        "returns": {
          "owner": "The address of the token owner."
        }
      },
      "register(address,bool)": {
        "details": "can only be called by admin.",
        "params": {
          "subscribe": "bool to signify subscription 'true' or to copy the list 'false'.",
          "subscriptionOrRegistrantToCopy": "registration address of the list to subscribe."
        }
      },
      "safeBatchTransferFrom(address,address,uint256[],bytes)": {
        "params": {
          "data": "Additional data.",
          "from": "The sender of the token.",
          "ids": "The ids of the tokens.",
          "to": "The recipient of the token."
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "params": {
          "from": "The send of the token",
          "id": "The id of the token",
          "to": "The recipient of the token"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "params": {
          "data": "Additional data",
          "from": "The sender of the token",
          "id": "The id of the token",
          "to": "The recipient of the token"
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "approved": "The determination of the approval",
          "operator": "The address receiving the approval"
        }
      },
      "setApprovalForAllFor(address,address,bool)": {
        "params": {
          "approved": "The determination of the approval",
          "operator": "The address receiving the approval",
          "sender": "The address giving the approval"
        }
      },
      "setMinter(address,bool)": {
        "params": {
          "enabled": "set whether the minter is enabled or disabled.",
          "minter": "address that will be given/removed minter right."
        }
      },
      "setOperatorRegistry(address)": {
        "params": {
          "registry": "the address of the registry"
        }
      },
      "setSuperOperator(address,bool)": {
        "params": {
          "enabled": "set whether the superOperator is enabled or disabled.",
          "superOperator": "address that will be given/removed superOperator right."
        }
      },
      "setTrustedForwarder(address)": {
        "details": "Change the address of the trusted forwarder for meta-TX",
        "params": {
          "trustedForwarder": "The new trustedForwarder"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "id": "The id of the interface"
        },
        "returns": {
          "_0": "True if the interface is supported"
        }
      },
      "symbol()": {
        "returns": {
          "_0": "The symbol of the token contract"
        }
      },
      "tokenURI(uint256)": {
        "params": {
          "id": "The id of the token"
        },
        "returns": {
          "_0": "The URI of the token"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "from": "The sender of the token",
          "id": "The id of the token",
          "to": "The recipient of the token"
        }
      },
      "transferQuad(address,address,uint256,uint256,uint256,bytes)": {
        "params": {
          "data": "additional data for transfer",
          "from": "current owner of the quad",
          "size": "size of the quad",
          "to": "destination",
          "x": "The top left x coordinate of the quad",
          "y": "The top left y coordinate of the quad"
        }
      },
      "width()": {
        "returns": {
          "_0": "width"
        }
      }
    },
    "title": "LAND token on L2",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approve(address,uint256)": {
        "notice": "Approve an operator to spend tokens on the sender behalf"
      },
      "approveFor(address,address,uint256)": {
        "notice": "Approve an operator to spend tokens on the sender behalf"
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens owned by an address."
      },
      "batchTransferFrom(address,address,uint256[],bytes)": {
        "notice": "Transfer many tokens between 2 addresses."
      },
      "batchTransferQuad(address,address,uint256[],uint256[],uint256[],bytes)": {
        "notice": "transfer multiple quad (aligned to a quad tree with size 3, 6, 12 or 24 only)"
      },
      "burn(uint256)": {
        "notice": "Burns token `id`."
      },
      "burnFrom(address,uint256)": {
        "notice": "Burn token `id` from `from`."
      },
      "changeAdmin(address)": {
        "notice": "Change the admin of the contract"
      },
      "exists(uint256,uint256,uint256)": {
        "notice": "checks if Land has been minted or not"
      },
      "getAdmin()": {
        "notice": "Get the current admin"
      },
      "getApproved(uint256)": {
        "notice": "Get the approved operator for a specific token."
      },
      "getTrustedForwarder()": {
        "notice": "Get the current trusted forwarder"
      },
      "getX(uint256)": {
        "notice": "x coordinate of Land token"
      },
      "getY(uint256)": {
        "notice": "y coordinate of Land token"
      },
      "height()": {
        "notice": "total height of the map"
      },
      "isApprovedForAll(address,address)": {
        "notice": "Check if the sender approved the operator."
      },
      "isMinter(address)": {
        "notice": "check whether address `who` is given minter rights."
      },
      "isSuperOperator(address)": {
        "notice": "check whether address `who` is given superOperator rights."
      },
      "isTrustedForwarder(address)": {
        "notice": "Checks if an address is a trusted forwarder"
      },
      "mintAndTransferQuad(address,uint256,uint256,uint256,bytes)": {
        "notice": "Checks if a parent quad has child quads already minted.  Then mints the rest child quads and transfers the parent quad.  Should only be called by the tunnel."
      },
      "mintQuad(address,uint256,uint256,uint256,bytes)": {
        "notice": "Mint a new quad (aligned to a quad tree with size 1, 3, 6, 12 or 24 only)"
      },
      "name()": {
        "notice": "Return the name of the token contract"
      },
      "ownerOf(uint256)": {
        "notice": "Get the owner of a token."
      },
      "register(address,bool)": {
        "notice": "This function is used to register Land contract on the Operator Filterer Registry of Opensea."
      },
      "safeBatchTransferFrom(address,address,uint256[],bytes)": {
        "notice": "Transfer many tokens between 2 addresses, while ensuring the receiving contract has a receiver method."
      },
      "safeTransferFrom(address,address,uint256)": {
        "notice": "Transfer a token between 2 addresses letting the receiver knows of the transfer"
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "Transfer a token between 2 addresses letting the receiver knows of the transfer"
      },
      "setApprovalForAll(address,bool)": {
        "notice": "Set the approval for an operator to manage all the tokens of the sender"
      },
      "setApprovalForAllFor(address,address,bool)": {
        "notice": "Set the approval for an operator to manage all the tokens of the sender"
      },
      "setMinter(address,bool)": {
        "notice": "Enable or disable the ability of `minter` to transfer tokens of all (minter rights)."
      },
      "setOperatorRegistry(address)": {
        "notice": "sets filter registry address deployed in test"
      },
      "setSuperOperator(address,bool)": {
        "notice": "Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights)."
      },
      "supportsInterface(bytes4)": {
        "notice": "Check if the contract supports an interface 0x01ffc9a7 is ERC-165 0x80ac58cd is ERC-721 0x5b5e139f is ERC-721 metadata"
      },
      "symbol()": {
        "notice": "Return the symbol of the token contract"
      },
      "tokenURI(uint256)": {
        "notice": "Return the URI of a specific token"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer a token between 2 addresses"
      },
      "transferQuad(address,address,uint256,uint256,uint256,bytes)": {
        "notice": "transfer one quad (aligned to a quad tree with size 3, 6, 12 or 24 only)"
      },
      "width()": {
        "notice": "total width of the map"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10217,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV2.sol:PolygonLandV2",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 10220,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV2.sol:PolygonLandV2",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 12276,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV2.sol:PolygonLandV2",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 38971,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV2.sol:PolygonLandV2",
        "label": "_admin",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 39430,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV2.sol:PolygonLandV2",
        "label": "_superOperators",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 37175,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV2.sol:PolygonLandV2",
        "label": "_numNFTPerAddress",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 37180,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV2.sol:PolygonLandV2",
        "label": "_owners",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 37186,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV2.sol:PolygonLandV2",
        "label": "_operatorsForAll",
        "offset": 0,
        "slot": "55",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 37190,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV2.sol:PolygonLandV2",
        "label": "_operators",
        "offset": 0,
        "slot": "56",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 60988,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV2.sol:PolygonLandV2",
        "label": "_minters",
        "offset": 0,
        "slot": "57",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 63668,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV2.sol:PolygonLandV2",
        "label": "__gap",
        "offset": 0,
        "slot": "58",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 35420,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV2.sol:PolygonLandV2",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "107",
        "type": "t_address"
      },
      {
        "astId": 17796,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV2.sol:PolygonLandV2",
        "label": "operatorFilterRegistry",
        "offset": 0,
        "slot": "108",
        "type": "t_contract(IOperatorFilterRegistry)18178"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IOperatorFilterRegistry)18178": {
        "encoding": "inplace",
        "label": "contract IOperatorFilterRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}