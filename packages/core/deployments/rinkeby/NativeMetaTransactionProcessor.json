{
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "meta_nonce",
      "outputs": [
        {
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x0327f06c"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "amount",
          "type": "uint256"
        },
        {
          "name": "data",
          "type": "bytes"
        },
        {
          "name": "params",
          "type": "uint256[5]"
        },
        {
          "name": "relayer",
          "type": "address"
        },
        {
          "name": "signature",
          "type": "bytes"
        },
        {
          "name": "tokenReceiver",
          "type": "address"
        },
        {
          "name": "signatureType",
          "type": "uint8"
        }
      ],
      "name": "executeERC20MetaTxViaBasicSignature",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        },
        {
          "name": "",
          "type": "bytes"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function",
      "signature": "0x405cdcac"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "amount",
          "type": "uint256"
        },
        {
          "name": "data",
          "type": "bytes"
        },
        {
          "name": "params",
          "type": "uint256[5]"
        },
        {
          "name": "relayer",
          "type": "address"
        },
        {
          "name": "signature",
          "type": "bytes"
        },
        {
          "name": "tokenReceiver",
          "type": "address"
        },
        {
          "name": "signatureType",
          "type": "uint8"
        }
      ],
      "name": "executeERC20MetaTx",
      "outputs": [
        {
          "name": "success",
          "type": "bool"
        },
        {
          "name": "returnData",
          "type": "bytes"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function",
      "signature": "0xca7d3aae"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "init712",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function",
      "signature": "0xff75d700"
    },
    {
      "inputs": [
        {
          "name": "tokenContract",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor",
      "signature": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "success",
          "type": "bool"
        }
      ],
      "name": "MetaTx",
      "type": "event",
      "signature": "0xefaba2f33aa25b55dc754bc8f130e29d44762a2c46ea678d680fd81da0d8b65e"
    }
  ],
  "address": "0x195a2Fbe6c4Af9135664EacaC9659D12D21DA20D",
  "receipt": {
    "transactionHash": "0x48a65f30543e9c8424df5fbcccc5e70839b8c4fc1aee5643e3e83ba270ab5809"
  },
  "args": ["0xCc933a862fc15379E441F2A16Cb943D385a4695f"],
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620019bb380380620019bb833981810160405260208110156200003757600080fd5b5051600380546001600160a01b0319166001600160a01b0383161790556200005e62000065565b5062000231565b6040518060400160405280600381526020017f37313200000000000000000000000000000000000000000000000000000000008152506000816040518082805190602001908083835b60208310620000cf5780518252601f199092019160209182019101620000ae565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205460ff1691506200022e90505760016000826040518082805190602001908083835b602083106200013d5780518252601f1990920191602091820191016200011c565b51815160209384036101000a600019018019909216911617905292019485525060405193849003018320805460ff191694151594909417909355509050806042620019798239604080519182900360420182207f5468652053616e64626f782033440000000000000000000000000000000000008352815192839003600e0183207f3100000000000000000000000000000000000000000000000000000000000000845282519384900360019081018520602080870194909452858501929092526060850191909152306080808601919091528351808603909101815260a090940190925282519201919091209055505b50565b61173880620002416000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630327f06c14610051578063405cdcac14610089578063ca7d3aae14610212578063ff75d70014610318575b600080fd5b6100776004803603602081101561006757600080fd5b50356001600160a01b0316610322565b60408051918252519081900360200190f35b61018f60048036036101a08110156100a057600080fd5b6001600160a01b038235811692602081013590911691604082013591908101906080810160608201356401000000008111156100db57600080fd5b8201836020820111156100ed57600080fd5b8035906020019184600183028401116401000000008311171561010f57600080fd5b919390926001600160a01b0360a084013516919060e0840160c085013564010000000081111561013e57600080fd5b82018360208201111561015057600080fd5b8035906020019184600183028401116401000000008311171561017257600080fd5b919350915080356001600160a01b0316906020013560ff1661033d565b604051808315151515815260200180602001828103825283818151815260200191508051906020019080838360005b838110156101d65781810151838201526020016101be565b50505050905090810190601f1680156102035780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b61018f60048036036101a081101561022957600080fd5b6001600160a01b0382358116926020810135909116916040820135919081019060808101606082013564010000000081111561026457600080fd5b82018360208201111561027657600080fd5b8035906020019184600183028401116401000000008311171561029857600080fd5b919390926001600160a01b0360a084013516919060e0840160c08501356401000000008111156102c757600080fd5b8201836020820111156102d957600080fd5b803590602001918460018302840111640100000000831117156102fb57600080fd5b919350915080356001600160a01b0316906020013560ff166104aa565b61032061059a565b005b6001600160a01b031660009081526002602052604090205490565b600060606103768d8960058060200260405190810160405280929190826005602002808284376000920191909152508b915061077e9050565b61042d8d8d8d8d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805160a081810190925292508f9150600590839083908082843760009201919091525050604080516020601f8f018190048102820181019092528d81528f9250908e908e908190840183828082843760009201919091525050604051915081905060ad611657823960ad01905060405180910390208b6108bb565b6104968d8d8d8d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805160a081810190925292508f915060059083908390808284376000920191909152508b9150610cd69050565b915091509b509b9950505050505050505050565b600060606104e38d8960058060200260405190810160405280929190826005602002808284376000920191909152508b915061077e9050565b61042d8d8d8d8d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805160a081810190925292508f9150600590839083908082843760009201919091525050604080516020601f8f018190048102820181019092528d81528f9250908e908e908190840183828082843760009201919091525050604051915081905060ad611657823960ad01905060405180910390208b6112c7565b6040518060400160405280600381526020017f37313200000000000000000000000000000000000000000000000000000000008152506000816040518082805190602001908083835b602083106106025780518252601f1990920191602091820191016105e3565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205460ff16915061077b90505760016000826040518082805190602001908083835b6020831061066d5780518252601f19909201916020918201910161064e565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016941515949094179093555090508060426116158239604080519182900360420182207f5468652053616e64626f782033440000000000000000000000000000000000008352815192839003600e0183207f3100000000000000000000000000000000000000000000000000000000000000845282519384900360019081018520602080870194909452858501929092526060850191909152306080808601919091528351808603909101815260a090940190925282519201919091209055505b50565b6001600160a01b038116158061079c57506001600160a01b03811633145b6107ed576040805162461bcd60e51b815260206004820152600d60248201527f77726f6e672072656c6179657200000000000000000000000000000000000000604482015290519081900360640190fd5b81516001600160a01b0384166000908152600260205260409020546001011461085d576040805162461bcd60e51b815260206004820152601260248201527f6e6f6e6365206f7574206f66206f726465720000000000000000000000000000604482015290519081900360640190fd5b60208201513a10156108b6576040805162461bcd60e51b815260206004820152601d60248201527f6761735072696365203c207369676e6572206d696e4761735072696365000000604482015290519081900360640190fd5b505050565b60606108d46108cf848c8c8c8c8c8c6113e6565b6114d0565b905060025b8260028111156108e557fe5b1415610abd57604080517f20c13b0b000000000000000000000000000000000000000000000000000000008082526004820192835283516044830152835190926001600160a01b038e16926320c13b0b9286928a92909182916024810191606490910190602087019080838360005b8381101561096c578181015183820152602001610954565b50505050905090810190601f1680156109995780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156109cc5781810151838201526020016109b4565b50505050905090810190601f1680156109f95780820380516001836020036101000a031916815260200191505b5094505050505060206040518083038186803b158015610a1857600080fd5b505afa158015610a2c573d6000803e3d6000fd5b505050506040513d6020811015610a4257600080fd5b50517fffffffff000000000000000000000000000000000000000000000000000000001614610ab8576040805162461bcd60e51b815260206004820152601660248201527f696e76616c69642031323731207369676e617475726500000000000000000000604482015290519081900360640190fd5b610cca565b6001826002811115610acb57fe5b1415610c4d57631626ba7e60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168a6001600160a01b0316631626ba7e8380519060200120876040518363ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610b62578181015183820152602001610b4a565b50505050905090810190601f168015610b8f5780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b158015610bad57600080fd5b505afa158015610bc1573d6000803e3d6000fd5b505050506040513d6020811015610bd757600080fd5b50517fffffffff000000000000000000000000000000000000000000000000000000001614610ab8576040805162461bcd60e51b815260206004820152601660248201527f696e76616c69642031363534207369676e617475726500000000000000000000604482015290519081900360640190fd5b6000610c60828051906020012086611515565b90508a6001600160a01b0316816001600160a01b031614610cc8576040805162461bcd60e51b815260206004820152600e60248201527f7369676e657220213d2066726f6d000000000000000000000000000000000000604482015290519081900360640190fd5b505b50505050505050505050565b81516001600160a01b0387166000908152600260205260408120919091558351606090610ec157608084015115610dc4576003546040808601516080870151606088015183517fe18aa3350000000000000000000000000000000000000000000000000000000081526001600160a01b038e811660048301528d81166024830152604482018d90526064820194909452608481019290925260a482015286821660c4820152915192169163e18aa3359160e48082019260009290919082900301818387803b158015610da757600080fd5b505af1158015610dbb573d6000803e3d6000fd5b50505050610eb8565b600354604080517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b038b811660048301528a81166024830152604482018a9052915191909216916323b872dd9160648083019260209291908290030181600087803b158015610e3b57600080fd5b505af1158015610e4f573d6000803e3d6000fd5b505050506040513d6020811015610e6557600080fd5b5051610eb8576040805162461bcd60e51b815260206004820152600f60248201527f6661696c6564207472616e736665720000000000000000000000000000000000604482015290519081900360640190fd5b60019150611279565b610ecb85896115e2565b610f1c576040805162461bcd60e51b815260206004820152601360248201527f666972737420706172616d20213d2066726f6d00000000000000000000000000604482015290519081900360640190fd5b6080840151156110ee576003546001600160a01b031663dc2173f3898989886002602002015189600460200201518a600360200201518a8d6040518963ffffffff1660e01b815260040180896001600160a01b03166001600160a01b03168152602001886001600160a01b03166001600160a01b03168152602001878152602001868152602001858152602001848152602001836001600160a01b03166001600160a01b0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611000578181015183820152602001610fe8565b50505050905090810190601f16801561102d5780820380516001836020036101000a031916815260200191505b509950505050505050505050600060405180830381600087803b15801561105357600080fd5b505af1158015611067573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604090815281101561109057600080fd5b8151602083018051919392830192916401000000008111156110b157600080fd5b820160208101848111156110c457600080fd5b81516401000000008111828201871017156110de57600080fd5b5094965094506112799350505050565b6003546001600160a01b0316637dd711c489898988600260200201518a6040518663ffffffff1660e01b815260040180866001600160a01b03166001600160a01b03168152602001856001600160a01b03166001600160a01b0316815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561119357818101518382015260200161117b565b50505050905090810190601f1680156111c05780820380516001836020036101000a031916815260200191505b509650505050505050600060405180830381600087803b1580156111e357600080fd5b505af11580156111f7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604090815281101561122057600080fd5b81516020830180519193928301929164010000000081111561124157600080fd5b8201602081018481111561125457600080fd5b815164010000000081118282018710171561126e57600080fd5b509496509450505050505b835160408051841515815290516001600160a01b038b16917fefaba2f33aa25b55dc754bc8f130e29d44762a2c46ea678d680fd81da0d8b65e919081900360200190a3965096945050505050565b60606112d161160e565b838b8b8b8b805190602001208b6000600581106112ea57fe5b60200201518c600160200201518d600260200201518e600360200201518f600460209081029190910151604080518084019c909c526001600160a01b039a8b168c820152988a1660608c015260808b019790975260a08a019590955260c089019390935260e088019190915261010087015261012086015261014085019190915291891661016080850191909152815180850390910181526101808401825280519201919091207f19010000000000000000000000000000000000000000000000000000000000006101a08401526101a28301939093526101c280830193909352805180830390930183526101e29091019052905060026108d9565b6000308888888888805190602001208860006005811061140257fe5b602090810291909101518a8201516040808d01516060808f01516080909f015183519c821b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000009081168e89015260348e019c909c5299811b8b1660548d015297881b8a1660688c0152607c8b0196909652609c8a019490945260bc89019190915260dc88015260fc87019290925261011c86019890985261013c8501929092529490941b1661015c820152835180820361015001815261017090910190935250815191012095945050505050565b604080517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8082019390935281518082039093018352605c01905290565b6000815160411461152557600080fd5b60208201516040830151606084015160001a601b81101561154457601b015b8060ff16601b148061155957508060ff16601c145b61156257600080fd5b6040805160008152602080820180845289905260ff8416828401526060820186905260808201859052915160019260a0808401939192601f1981019281900390910190855afa1580156115b9573d6000803e3d6000fd5b5050604051601f1901519450506001600160a01b0384166115d957600080fd5b50505092915050565b60006044835110156115f657506000611608565b5060248201516001600160a01b038216145b92915050565b6001549056fe454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c6164647265737320766572696679696e67436f6e74726163742945524332304d6574615472616e73616374696f6e28616464726573732066726f6d2c6164647265737320746f2c75696e7432353620616d6f756e742c627974657320646174612c75696e74323536206e6f6e63652c75696e74323536206d696e47617350726963652c75696e743235362074784761732c75696e7432353620626173654761732c75696e7432353620746f6b656e47617350726963652c616464726573732072656c6179657229a265627a7a7230582031a490d829ddb4cd9001e774a0a495b144837f5228105d37cc1759031bbf7fde64736f6c63430005090032454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c6164647265737320766572696679696e67436f6e747261637429",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80630327f06c14610051578063405cdcac14610089578063ca7d3aae14610212578063ff75d70014610318575b600080fd5b6100776004803603602081101561006757600080fd5b50356001600160a01b0316610322565b60408051918252519081900360200190f35b61018f60048036036101a08110156100a057600080fd5b6001600160a01b038235811692602081013590911691604082013591908101906080810160608201356401000000008111156100db57600080fd5b8201836020820111156100ed57600080fd5b8035906020019184600183028401116401000000008311171561010f57600080fd5b919390926001600160a01b0360a084013516919060e0840160c085013564010000000081111561013e57600080fd5b82018360208201111561015057600080fd5b8035906020019184600183028401116401000000008311171561017257600080fd5b919350915080356001600160a01b0316906020013560ff1661033d565b604051808315151515815260200180602001828103825283818151815260200191508051906020019080838360005b838110156101d65781810151838201526020016101be565b50505050905090810190601f1680156102035780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b61018f60048036036101a081101561022957600080fd5b6001600160a01b0382358116926020810135909116916040820135919081019060808101606082013564010000000081111561026457600080fd5b82018360208201111561027657600080fd5b8035906020019184600183028401116401000000008311171561029857600080fd5b919390926001600160a01b0360a084013516919060e0840160c08501356401000000008111156102c757600080fd5b8201836020820111156102d957600080fd5b803590602001918460018302840111640100000000831117156102fb57600080fd5b919350915080356001600160a01b0316906020013560ff166104aa565b61032061059a565b005b6001600160a01b031660009081526002602052604090205490565b600060606103768d8960058060200260405190810160405280929190826005602002808284376000920191909152508b915061077e9050565b61042d8d8d8d8d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805160a081810190925292508f9150600590839083908082843760009201919091525050604080516020601f8f018190048102820181019092528d81528f9250908e908e908190840183828082843760009201919091525050604051915081905060ad611657823960ad01905060405180910390208b6108bb565b6104968d8d8d8d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805160a081810190925292508f915060059083908390808284376000920191909152508b9150610cd69050565b915091509b509b9950505050505050505050565b600060606104e38d8960058060200260405190810160405280929190826005602002808284376000920191909152508b915061077e9050565b61042d8d8d8d8d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805160a081810190925292508f9150600590839083908082843760009201919091525050604080516020601f8f018190048102820181019092528d81528f9250908e908e908190840183828082843760009201919091525050604051915081905060ad611657823960ad01905060405180910390208b6112c7565b6040518060400160405280600381526020017f37313200000000000000000000000000000000000000000000000000000000008152506000816040518082805190602001908083835b602083106106025780518252601f1990920191602091820191016105e3565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205460ff16915061077b90505760016000826040518082805190602001908083835b6020831061066d5780518252601f19909201916020918201910161064e565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016941515949094179093555090508060426116158239604080519182900360420182207f5468652053616e64626f782033440000000000000000000000000000000000008352815192839003600e0183207f3100000000000000000000000000000000000000000000000000000000000000845282519384900360019081018520602080870194909452858501929092526060850191909152306080808601919091528351808603909101815260a090940190925282519201919091209055505b50565b6001600160a01b038116158061079c57506001600160a01b03811633145b6107ed576040805162461bcd60e51b815260206004820152600d60248201527f77726f6e672072656c6179657200000000000000000000000000000000000000604482015290519081900360640190fd5b81516001600160a01b0384166000908152600260205260409020546001011461085d576040805162461bcd60e51b815260206004820152601260248201527f6e6f6e6365206f7574206f66206f726465720000000000000000000000000000604482015290519081900360640190fd5b60208201513a10156108b6576040805162461bcd60e51b815260206004820152601d60248201527f6761735072696365203c207369676e6572206d696e4761735072696365000000604482015290519081900360640190fd5b505050565b60606108d46108cf848c8c8c8c8c8c6113e6565b6114d0565b905060025b8260028111156108e557fe5b1415610abd57604080517f20c13b0b000000000000000000000000000000000000000000000000000000008082526004820192835283516044830152835190926001600160a01b038e16926320c13b0b9286928a92909182916024810191606490910190602087019080838360005b8381101561096c578181015183820152602001610954565b50505050905090810190601f1680156109995780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156109cc5781810151838201526020016109b4565b50505050905090810190601f1680156109f95780820380516001836020036101000a031916815260200191505b5094505050505060206040518083038186803b158015610a1857600080fd5b505afa158015610a2c573d6000803e3d6000fd5b505050506040513d6020811015610a4257600080fd5b50517fffffffff000000000000000000000000000000000000000000000000000000001614610ab8576040805162461bcd60e51b815260206004820152601660248201527f696e76616c69642031323731207369676e617475726500000000000000000000604482015290519081900360640190fd5b610cca565b6001826002811115610acb57fe5b1415610c4d57631626ba7e60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168a6001600160a01b0316631626ba7e8380519060200120876040518363ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610b62578181015183820152602001610b4a565b50505050905090810190601f168015610b8f5780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b158015610bad57600080fd5b505afa158015610bc1573d6000803e3d6000fd5b505050506040513d6020811015610bd757600080fd5b50517fffffffff000000000000000000000000000000000000000000000000000000001614610ab8576040805162461bcd60e51b815260206004820152601660248201527f696e76616c69642031363534207369676e617475726500000000000000000000604482015290519081900360640190fd5b6000610c60828051906020012086611515565b90508a6001600160a01b0316816001600160a01b031614610cc8576040805162461bcd60e51b815260206004820152600e60248201527f7369676e657220213d2066726f6d000000000000000000000000000000000000604482015290519081900360640190fd5b505b50505050505050505050565b81516001600160a01b0387166000908152600260205260408120919091558351606090610ec157608084015115610dc4576003546040808601516080870151606088015183517fe18aa3350000000000000000000000000000000000000000000000000000000081526001600160a01b038e811660048301528d81166024830152604482018d90526064820194909452608481019290925260a482015286821660c4820152915192169163e18aa3359160e48082019260009290919082900301818387803b158015610da757600080fd5b505af1158015610dbb573d6000803e3d6000fd5b50505050610eb8565b600354604080517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b038b811660048301528a81166024830152604482018a9052915191909216916323b872dd9160648083019260209291908290030181600087803b158015610e3b57600080fd5b505af1158015610e4f573d6000803e3d6000fd5b505050506040513d6020811015610e6557600080fd5b5051610eb8576040805162461bcd60e51b815260206004820152600f60248201527f6661696c6564207472616e736665720000000000000000000000000000000000604482015290519081900360640190fd5b60019150611279565b610ecb85896115e2565b610f1c576040805162461bcd60e51b815260206004820152601360248201527f666972737420706172616d20213d2066726f6d00000000000000000000000000604482015290519081900360640190fd5b6080840151156110ee576003546001600160a01b031663dc2173f3898989886002602002015189600460200201518a600360200201518a8d6040518963ffffffff1660e01b815260040180896001600160a01b03166001600160a01b03168152602001886001600160a01b03166001600160a01b03168152602001878152602001868152602001858152602001848152602001836001600160a01b03166001600160a01b0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611000578181015183820152602001610fe8565b50505050905090810190601f16801561102d5780820380516001836020036101000a031916815260200191505b509950505050505050505050600060405180830381600087803b15801561105357600080fd5b505af1158015611067573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604090815281101561109057600080fd5b8151602083018051919392830192916401000000008111156110b157600080fd5b820160208101848111156110c457600080fd5b81516401000000008111828201871017156110de57600080fd5b5094965094506112799350505050565b6003546001600160a01b0316637dd711c489898988600260200201518a6040518663ffffffff1660e01b815260040180866001600160a01b03166001600160a01b03168152602001856001600160a01b03166001600160a01b0316815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561119357818101518382015260200161117b565b50505050905090810190601f1680156111c05780820380516001836020036101000a031916815260200191505b509650505050505050600060405180830381600087803b1580156111e357600080fd5b505af11580156111f7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604090815281101561122057600080fd5b81516020830180519193928301929164010000000081111561124157600080fd5b8201602081018481111561125457600080fd5b815164010000000081118282018710171561126e57600080fd5b509496509450505050505b835160408051841515815290516001600160a01b038b16917fefaba2f33aa25b55dc754bc8f130e29d44762a2c46ea678d680fd81da0d8b65e919081900360200190a3965096945050505050565b60606112d161160e565b838b8b8b8b805190602001208b6000600581106112ea57fe5b60200201518c600160200201518d600260200201518e600360200201518f600460209081029190910151604080518084019c909c526001600160a01b039a8b168c820152988a1660608c015260808b019790975260a08a019590955260c089019390935260e088019190915261010087015261012086015261014085019190915291891661016080850191909152815180850390910181526101808401825280519201919091207f19010000000000000000000000000000000000000000000000000000000000006101a08401526101a28301939093526101c280830193909352805180830390930183526101e29091019052905060026108d9565b6000308888888888805190602001208860006005811061140257fe5b602090810291909101518a8201516040808d01516060808f01516080909f015183519c821b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000009081168e89015260348e019c909c5299811b8b1660548d015297881b8a1660688c0152607c8b0196909652609c8a019490945260bc89019190915260dc88015260fc87019290925261011c86019890985261013c8501929092529490941b1661015c820152835180820361015001815261017090910190935250815191012095945050505050565b604080517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8082019390935281518082039093018352605c01905290565b6000815160411461152557600080fd5b60208201516040830151606084015160001a601b81101561154457601b015b8060ff16601b148061155957508060ff16601c145b61156257600080fd5b6040805160008152602080820180845289905260ff8416828401526060820186905260808201859052915160019260a0808401939192601f1981019281900390910190855afa1580156115b9573d6000803e3d6000fd5b5050604051601f1901519450506001600160a01b0384166115d957600080fd5b50505092915050565b60006044835110156115f657506000611608565b5060248201516001600160a01b038216145b92915050565b6001549056fe454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c6164647265737320766572696679696e67436f6e74726163742945524332304d6574615472616e73616374696f6e28616464726573732066726f6d2c6164647265737320746f2c75696e7432353620616d6f756e742c627974657320646174612c75696e74323536206e6f6e63652c75696e74323536206d696e47617350726963652c75696e743235362074784761732c75696e7432353620626173654761732c75696e7432353620746f6b656e47617350726963652c616464726573732072656c6179657229a265627a7a7230582031a490d829ddb4cd9001e774a0a495b144837f5228105d37cc1759031bbf7fde64736f6c63430005090032",
  "solidityMetadata": "{\"compiler\":{\"version\":\"0.5.9+commit.e560f70d\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"meta_nonce\",\"outputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"},{\"name\":\"params\",\"type\":\"uint256[5]\"},{\"name\":\"relayer\",\"type\":\"address\"},{\"name\":\"signature\",\"type\":\"bytes\"},{\"name\":\"tokenReceiver\",\"type\":\"address\"},{\"name\":\"signatureType\",\"type\":\"uint8\"}],\"name\":\"executeERC20MetaTxViaBasicSignature\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"},{\"name\":\"params\",\"type\":\"uint256[5]\"},{\"name\":\"relayer\",\"type\":\"address\"},{\"name\":\"signature\",\"type\":\"bytes\"},{\"name\":\"tokenReceiver\",\"type\":\"address\"},{\"name\":\"signatureType\",\"type\":\"uint8\"}],\"name\":\"executeERC20MetaTx\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"},{\"name\":\"returnData\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"init712\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"MetaTx\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"executeERC20MetaTx(address,address,uint256,bytes,uint256[5],address,bytes,address,uint8)\":{\"params\":{\"amount\":\"number of tokens to be transfered/allowed as part of the call.\",\"data\":\"bytes to send to the destination.\",\"from\":\"address from which the meta-tx originate.\",\"params\":\"the meta-tx parameters : nonce, minGasPrice, txGas, baseGas, tokenGasPrice.\",\"relayer\":\"the address allowed to perform the meta-tx.\",\"signature\":\"the signature that ensure from has allowed the meta-tx to be performed.\",\"signatureType\":\"indicate whether it was signed via EOA=0, EIP-1654=1 or EIP-1271=2.\",\"to\":\"destination address where the call will be performed.\",\"tokenReceiver\":\"recipient of the gas charge.\"},\"return\":\"success whether the execution was successful.returnData data resulting from the execution.\"},\"executeERC20MetaTxViaBasicSignature(address,address,uint256,bytes,uint256[5],address,bytes,address,uint8)\":{\"params\":{\"amount\":\"number of tokens to be transfered/allowed as part of the call.\",\"data\":\"bytes to send to the destination.\",\"from\":\"address from which the meta-tx originate.\",\"params\":\"the meta-tx parameters : nonce, minGasPrice, txGas, baseGas, tokenGasPrice.\",\"relayer\":\"the address allowed to perform the meta-tx.\",\"signature\":\"the signature that ensure from has allowed the meta-tx to be performed.\",\"signatureType\":\"indicate whether it was signed via EOA=0, EIP-1654=1 or EIP-1271=2.\",\"to\":\"destination address where the call will be performed.\",\"tokenReceiver\":\"recipient of the gas charge.\"},\"return\":\"success whether the execution was successful.returnData data resulting from the execution.\"},\"meta_nonce(address)\":{\"params\":{\"owner\":\"The address to query the nonce of.\"},\"return\":\"the current nonce\"}}},\"userdoc\":{\"methods\":{\"executeERC20MetaTx(address,address,uint256,bytes,uint256[5],address,bytes,address,uint8)\":{\"notice\":\"perform the meta-tx using EIP-712 message.\"},\"executeERC20MetaTxViaBasicSignature(address,address,uint256,bytes,uint256[5],address,bytes,address,uint8)\":{\"notice\":\"perform the meta-tx using personal_sign message.\"},\"meta_nonce(address)\":{\"notice\":\"gets the current nonce (number of metatx emitted) of `from`.\"}}}},\"settings\":{\"compilationTarget\":{\"src/Sand/erc20/NativeMetaTransactionProcessor.sol\":\"NativeMetaTransactionProcessor\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"contracts_common/src/BaseWithStorage/ProxyImplementation.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\ncontract ProxyImplementation {\\n    mapping(string => bool) _initialised;\\n\\n    modifier phase(string memory phaseName) {\\n        if (!_initialised[phaseName]) {\\n            _initialised[phaseName] = true;\\n            _;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9bfcb76a8aa264d0b33fb8b24c9401198a8e42ec8230ad6cc60ee628e3734fa4\"},\"contracts_common/src/Interfaces/ERC1271.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\ncontract ERC1271 {\\n\\n    /**\\n    * @dev Should return whether the signature provided is valid for the provided data\\n    * @param data Arbitrary length data signed on the behalf of address(this)\\n    * @param signature Signature byte array associated with _data\\n    *\\n    * MUST return the bytes4 magic value 0x20c13b0b when function passes.\\n    * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n    * MUST allow external calls\\n    */\\n    function isValidSignature(bytes memory data, bytes memory signature)\\n        public\\n        view\\n        returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xc96d98567763b067bb0264c9fed2a0df1e638b82e416c86e223e7e1cf2354514\"},\"contracts_common/src/Interfaces/ERC1271Constants.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\ncontract ERC1271Constants {\\n    bytes4 internal constant ERC1271_MAGICVALUE = 0x20c13b0b;\\n}\\n\",\"keccak256\":\"0xe0fa0515924272c2536cc0e09428c456e0303d968cccbcb3395ea5237743c068\"},\"contracts_common/src/Interfaces/ERC1654.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\ncontract ERC1654 {\\n\\n    /**\\n    * @dev Should return whether the signature provided is valid for the provided hash\\n    * @param hash 32 bytes hash to be signed\\n    * @param signature Signature byte array associated with hash\\n    * @return 0x1626ba7e if valid else 0x00000000\\n    */\\n    function isValidSignature(bytes32 hash, bytes memory signature)\\n        public\\n        view\\n        returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xa5a9f130315c41a3578c374651fedc45de45cf66e442442e1c6e3b5fab896db6\"},\"contracts_common/src/Interfaces/ERC1654Constants.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\ncontract ERC1654Constants {\\n    bytes4 internal constant ERC1654_MAGICVALUE = 0x1626ba7e;\\n}\\n\",\"keccak256\":\"0xc89fe81450f551045b148248ec1bb82156b20918e7dcb88b96e41ddcb62108a5\"},\"contracts_common/src/Libraries/BytesUtil.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\nlibrary BytesUtil {\\n    function memcpy(uint256 dest, uint256 src, uint256 len) internal pure {\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        uint256 mask = 256**(32 - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n\\n    function pointerToBytes(uint256 src, uint256 len)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory ret = new bytes(len);\\n        uint256 retptr;\\n        assembly {\\n            retptr := add(ret, 32)\\n        }\\n\\n        memcpy(retptr, src, len);\\n        return ret;\\n    }\\n\\n    function addressToBytes(address a) internal pure returns (bytes memory b) {\\n        assembly {\\n            let m := mload(0x40)\\n            mstore(\\n                add(m, 20),\\n                xor(0x140000000000000000000000000000000000000000, a)\\n            )\\n            mstore(0x40, add(m, 52))\\n            b := m\\n        }\\n    }\\n\\n    function uint256ToBytes(uint256 a) internal pure returns (bytes memory b) {\\n        assembly {\\n            let m := mload(0x40)\\n            mstore(add(m, 32), a)\\n            mstore(0x40, add(m, 64))\\n            b := m\\n        }\\n    }\\n\\n    function doFirstParamEqualsAddress(bytes memory data, address _address)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        if (data.length < (36 + 32)) {\\n            return false;\\n        }\\n        uint256 value;\\n        assembly {\\n            value := mload(add(data, 36))\\n        }\\n        return value == uint256(_address);\\n    }\\n\\n    function doParamEqualsUInt256(bytes memory data, uint256 i, uint256 value)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        if (data.length < (36 + (i + 1) * 32)) {\\n            return false;\\n        }\\n        uint256 offset = 36 + i * 32;\\n        uint256 valuePresent;\\n        assembly {\\n            valuePresent := mload(add(data, offset))\\n        }\\n        return valuePresent == value;\\n    }\\n\\n    function overrideFirst32BytesWithAddress(\\n        bytes memory data,\\n        address _address\\n    ) internal pure returns (bytes memory) {\\n        uint256 dest;\\n        assembly {\\n            dest := add(data, 48)\\n        } // 48 = 32 (offset) + 4 (func sig) + 12 (address is only 20 bytes)\\n\\n        bytes memory addressBytes = addressToBytes(_address);\\n        uint256 src;\\n        assembly {\\n            src := add(addressBytes, 32)\\n        }\\n\\n        memcpy(dest, src, 20);\\n        return data;\\n    }\\n\\n    function overrideFirstTwo32BytesWithAddressAndInt(\\n        bytes memory data,\\n        address _address,\\n        uint256 _value\\n    ) internal pure returns (bytes memory) {\\n        uint256 dest;\\n        uint256 src;\\n\\n        assembly {\\n            dest := add(data, 48)\\n        } // 48 = 32 (offset) + 4 (func sig) + 12 (address is only 20 bytes)\\n        bytes memory bbytes = addressToBytes(_address);\\n        assembly {\\n            src := add(bbytes, 32)\\n        }\\n        memcpy(dest, src, 20);\\n\\n        assembly {\\n            dest := add(data, 68)\\n        } // 48 = 32 (offset) + 4 (func sig) + 32 (next slot)\\n        bbytes = uint256ToBytes(_value);\\n        assembly {\\n            src := add(bbytes, 32)\\n        }\\n        memcpy(dest, src, 32);\\n\\n        return data;\\n    }\\n}\\n\",\"keccak256\":\"0xb5c236938e1f71524127371a015836e83103c5ac1b4ed7b7f22892a8c0429e10\"},\"contracts_common/src/Libraries/SigUtil.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\nlibrary SigUtil {\\n    function recover(bytes32 hash, bytes memory sig)\\n        internal\\n        pure\\n        returns (address recovered)\\n    {\\n        require(sig.length == 65);\\n\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            r := mload(add(sig, 32))\\n            s := mload(add(sig, 64))\\n            v := byte(0, mload(add(sig, 96)))\\n        }\\n\\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\\n        if (v < 27) {\\n            v += 27;\\n        }\\n        require(v == 27 || v == 28);\\n\\n        recovered = ecrecover(hash, v, r, s);\\n        require(recovered != address(0));\\n    }\\n\\n    function recoverWithZeroOnFailure(bytes32 hash, bytes memory sig)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        if (sig.length != 65) {\\n            return (address(0));\\n        }\\n\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            r := mload(add(sig, 32))\\n            s := mload(add(sig, 64))\\n            v := byte(0, mload(add(sig, 96)))\\n        }\\n\\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\\n        if (v < 27) {\\n            v += 27;\\n        }\\n\\n        if (v != 27 && v != 28) {\\n            return (address(0));\\n        } else {\\n            return ecrecover(hash, v, r, s);\\n        }\\n    }\\n\\n    // Builds a prefixed hash to mimic the behavior of eth_sign.\\n    function prefixed(bytes32 hash) internal pure returns (bytes memory) {\\n        return abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash);\\n    }\\n}\\n\",\"keccak256\":\"0xda7729e5b24c3780242ed1923b2a709ab284c18ee533669d6d0fa394ffb0491b\"},\"src/Sand/erc20/NativeMetaTransactionProcessor.sol\":{\"content\":\"pragma solidity 0.5.9;\\n\\nimport \\\"../../../contracts_common/src/Libraries/BytesUtil.sol\\\";\\nimport \\\"../../../contracts_common/src/Libraries/SigUtil.sol\\\";\\nimport \\\"../../../contracts_common/src/Interfaces/ERC1271.sol\\\";\\nimport \\\"../../../contracts_common/src/Interfaces/ERC1271Constants.sol\\\";\\nimport \\\"../../../contracts_common/src/Interfaces/ERC1654.sol\\\";\\nimport \\\"../../../contracts_common/src/Interfaces/ERC1654Constants.sol\\\";\\nimport \\\"../../TheSandbox712.sol\\\";\\n\\ninterface ExecutionableERC20 {\\n\\n    function balanceOf(address who) external view returns (uint256);\\n\\n    function transferFrom(address from, address to, uint256 amount) external returns(bool);\\n\\n    function approveAndExecuteWithSpecificGas(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 gasLimit,\\n        bytes calldata data\\n    ) external returns (bool success, bytes memory returnData);\\n\\n    function approveAndExecuteWithSpecificGasAndChargeForIt(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 gasLimit,\\n        uint256 tokenGasPrice,\\n        uint256 baseGasCharge,\\n        address tokenReceiver,\\n        bytes calldata data\\n    ) external returns (bool success, bytes memory returnData);\\n\\n    function transferAndChargeForGas(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 gasLimit,\\n        uint256 tokenGasPrice,\\n        uint256 baseGasCharge,\\n        address tokenReceiver\\n    ) external;\\n}\\n\\ncontract NativeMetaTransactionProcessor is ERC1654Constants, ERC1271Constants, TheSandbox712 {\\n    enum SignatureType { DIRECT, EIP1654, EIP1271 }\\n\\n    bytes32 constant ERC20METATRANSACTION_TYPEHASH = keccak256(\\n        \\\"ERC20MetaTransaction(address from,address to,uint256 amount,bytes data,uint256 nonce,uint256 minGasPrice,uint256 txGas,uint256 baseGas,uint256 tokenGasPrice,address relayer)\\\"\\n    );\\n    mapping(address => uint256) nonces;\\n\\n    event MetaTx(\\n        address indexed from,\\n        uint256 indexed nonce,\\n        bool success\\n    );\\n\\n    ExecutionableERC20 _tokenContract;\\n\\n    constructor(ExecutionableERC20 tokenContract) public {\\n        _tokenContract = tokenContract;\\n        init712();\\n    }\\n\\n    /// @notice gets the current nonce (number of metatx emitted) of `from`.\\n    /// @param owner The address to query the nonce of.\\n    /// @return the current nonce\\n    function meta_nonce(address owner) external view returns (uint256 nonce) {\\n        return nonces[owner];\\n    }\\n\\n    /// @notice perform the meta-tx using EIP-712 message.\\n    /// @param from address from which the meta-tx originate.\\n    /// @param to destination address where the call will be performed.\\n    /// @param amount number of tokens to be transfered/allowed as part of the call.\\n    /// @param data bytes to send to the destination.\\n    /// @param params the meta-tx parameters : nonce, minGasPrice, txGas, baseGas, tokenGasPrice.\\n    /// @param relayer the address allowed to perform the meta-tx.\\n    /// @param signature the signature that ensure from has allowed the meta-tx to be performed.\\n    /// @param tokenReceiver recipient of the gas charge.\\n    /// @param signatureType indicate whether it was signed via EOA=0, EIP-1654=1 or EIP-1271=2.\\n    /// @return success whether the execution was successful.\\n    /// @return returnData data resulting from the execution.\\n    function executeERC20MetaTx(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata data,\\n        uint256[5] calldata params, // nonce, minGasPrice, txGas, baseGas, tokenGasPrice\\n        address relayer,\\n        bytes calldata signature,\\n        address tokenReceiver,\\n        SignatureType signatureType\\n    ) external returns (bool success, bytes memory returnData) {\\n        ensureParametersValidity(from, params, relayer);\\n        ensureCorrectSigner(\\n            from,\\n            to,\\n            amount,\\n            data,\\n            params,\\n            relayer,\\n            signature,\\n            ERC20METATRANSACTION_TYPEHASH,\\n            signatureType\\n        );\\n        return\\n            performERC20MetaTx(\\n                from,\\n                to,\\n                amount,\\n                data,\\n                params,\\n                tokenReceiver\\n            );\\n    }\\n\\n    /// @notice perform the meta-tx using personal_sign message.\\n    /// @param from address from which the meta-tx originate.\\n    /// @param to destination address where the call will be performed.\\n    /// @param amount number of tokens to be transfered/allowed as part of the call.\\n    /// @param data bytes to send to the destination.\\n    /// @param params the meta-tx parameters : nonce, minGasPrice, txGas, baseGas, tokenGasPrice.\\n    /// @param relayer the address allowed to perform the meta-tx.\\n    /// @param signature the signature that ensure from has allowed the meta-tx to be performed.\\n    /// @param tokenReceiver recipient of the gas charge.\\n    /// @param signatureType indicate whether it was signed via EOA=0, EIP-1654=1 or EIP-1271=2.\\n    /// @return success whether the execution was successful.\\n    /// @return returnData data resulting from the execution.\\n    function executeERC20MetaTxViaBasicSignature(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata data,\\n        uint256[5] calldata params, // nonce, minGasPrice, txGas, baseGas, tokenGasPrice\\n        address relayer,\\n        bytes calldata signature,\\n        address tokenReceiver,\\n        SignatureType signatureType\\n    ) external returns (bool, bytes memory) {\\n        ensureParametersValidity(from, params, relayer);\\n        ensureCorrectSignerViaBasicSignature(\\n            from,\\n            to,\\n            amount,\\n            data,\\n            params,\\n            relayer,\\n            signature,\\n            ERC20METATRANSACTION_TYPEHASH,\\n            signatureType\\n        );\\n        return\\n            performERC20MetaTx(\\n                from,\\n                to,\\n                amount,\\n                data,\\n                params,\\n                tokenReceiver\\n            );\\n    }\\n\\n    function ensureParametersValidity(\\n        address from,\\n        uint256[5] memory params, // nonce, minGasPrice, txGas, baseGas, tokenGasPrice\\n        address relayer\\n    ) internal view {\\n        require(\\n            relayer == address(0) || relayer == msg.sender,\\n            \\\"wrong relayer\\\"\\n        );\\n        require(nonces[from] + 1 == params[0], \\\"nonce out of order\\\");\\n        require(tx.gasprice >= params[1], \\\"gasPrice < signer minGasPrice\\\");\\n    }\\n\\n    function ensureCorrectSigner(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory data,\\n        uint256[5] memory params, // nonce, minGasPrice, txGas, baseGas, tokenGasPrice\\n        address relayer,\\n        bytes memory signature,\\n        bytes32 typeHash,\\n        SignatureType signatureType\\n    ) internal view {\\n        bytes memory dataToHash = abi.encodePacked(\\n            \\\"\\\\x19\\\\x01\\\",\\n            domainSeparator(),\\n            keccak256(\\n                abi.encode(\\n                    typeHash,\\n                    from,\\n                    to,\\n                    amount,\\n                    keccak256(data),\\n                    params[0],\\n                    params[1],\\n                    params[2],\\n                    params[3],\\n                    params[4],\\n                    relayer\\n                )\\n            )\\n        );\\n        if (signatureType == SignatureType.EIP1271) {\\n            require(\\n                ERC1271(from).isValidSignature(dataToHash, signature) == ERC1271_MAGICVALUE,\\n                \\\"invalid 1271 signature\\\"\\n            );\\n        } else if(signatureType == SignatureType.EIP1654){\\n            require(\\n                ERC1654(from).isValidSignature(keccak256(dataToHash), signature) == ERC1654_MAGICVALUE,\\n                \\\"invalid 1654 signature\\\"\\n            );\\n        } else {\\n            address signer = SigUtil.recover(keccak256(dataToHash), signature);\\n            require(signer == from, \\\"signer != from\\\");\\n        }\\n    }\\n\\n    function encodeBasicSignatureData(\\n        bytes32 typeHash,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory data,\\n        uint256[5] memory params,\\n        address relayer\\n    ) internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    address(this),\\n                    typeHash,\\n                    from,\\n                    to,\\n                    amount,\\n                    keccak256(data),\\n                    params[0],\\n                    params[1],\\n                    params[2],\\n                    params[3],\\n                    params[4],\\n                    relayer\\n                )\\n            );\\n    }\\n\\n    function ensureCorrectSignerViaBasicSignature(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory data,\\n        uint256[5] memory params, // nonce, minGasPrice, txGas, baseGas, tokenGasPrice\\n        address relayer,\\n        bytes memory signature,\\n        bytes32 typeHash,\\n        SignatureType signatureType\\n    ) internal view {\\n        bytes memory dataToHash = SigUtil.prefixed(\\n            encodeBasicSignatureData(\\n                typeHash,\\n                from,\\n                to,\\n                amount,\\n                data,\\n                params,\\n                relayer\\n            )\\n        );\\n        if (signatureType == SignatureType.EIP1271) {\\n            require(\\n                ERC1271(from).isValidSignature(dataToHash, signature) == ERC1271_MAGICVALUE,\\n                \\\"invalid 1271 signature\\\"\\n            );\\n        } else if (signatureType == SignatureType.EIP1654) {\\n            require(\\n                ERC1654(from).isValidSignature(keccak256(dataToHash), signature) == ERC1654_MAGICVALUE,\\n                \\\"invalid 1654 signature\\\"\\n            );\\n        } else {\\n            address signer = SigUtil.recover(keccak256(dataToHash), signature);\\n            require(signer == from, \\\"signer != from\\\");\\n        }\\n    }\\n\\n    function performERC20MetaTx(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory data,\\n        uint256[5] memory params,\\n        address tokenReceiver\\n    ) internal returns (bool success, bytes memory returnData) {\\n        nonces[from] = params[0];\\n\\n        if (data.length == 0) {\\n            if(params[4] > 0) {\\n                _tokenContract.transferAndChargeForGas(\\n                    from,\\n                    to,\\n                    amount,\\n                    params[2],\\n                    params[4],\\n                    params[3],\\n                    tokenReceiver\\n                );\\n            } else {\\n                require(_tokenContract.transferFrom(from, to, amount), \\\"failed transfer\\\");\\n            }\\n            success = true;\\n        } else {\\n            require(\\n                BytesUtil.doFirstParamEqualsAddress(data, from),\\n                \\\"first param != from\\\"\\n            );\\n            if(params[4] > 0) {\\n                (success, returnData) = _tokenContract.approveAndExecuteWithSpecificGasAndChargeForIt(\\n                    from,\\n                    to,\\n                    amount,\\n                    params[2],\\n                    params[4],\\n                    params[3],\\n                    tokenReceiver,\\n                    data\\n                );\\n            } else {\\n                (success, returnData) = _tokenContract.approveAndExecuteWithSpecificGas(from, to, amount, params[2], data);\\n            }\\n        }\\n\\n        emit MetaTx(from, params[0], success);\\n    }\\n}\\n\",\"keccak256\":\"0x8522a1057a6efcf65284626b20125ce343edb11a7783a8e07fb252bfe9b74f30\"},\"src/TheSandbox712.sol\":{\"content\":\"pragma solidity 0.5.9;\\n\\nimport {\\n    ProxyImplementation\\n} from \\\"../contracts_common/src/BaseWithStorage/ProxyImplementation.sol\\\";\\n\\ncontract TheSandbox712 is ProxyImplementation {\\n    bytes32 constant EIP712DOMAIN_TYPEHASH = keccak256(\\n        \\\"EIP712Domain(string name,string version,address verifyingContract)\\\"\\n    );\\n    bytes32 DOMAIN_SEPARATOR;\\n\\n    function init712() public phase(\\\"712\\\") {\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                EIP712DOMAIN_TYPEHASH,\\n                keccak256(\\\"The Sandbox 3D\\\"),\\n                keccak256(\\\"1\\\"),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function domainSeparator() internal view returns (bytes32) {\\n        return DOMAIN_SEPARATOR;\\n    }\\n}\\n\",\"keccak256\":\"0x76f0233c0b532620a8d3a129d30b6551869be42514cbe2b03004400ea230de54\"}},\"version\":1}",
  "userdoc": {
    "methods": {
      "executeERC20MetaTx(address,address,uint256,bytes,uint256[5],address,bytes,address,uint8)": {
        "notice": "perform the meta-tx using EIP-712 message."
      },
      "executeERC20MetaTxViaBasicSignature(address,address,uint256,bytes,uint256[5],address,bytes,address,uint8)": {
        "notice": "perform the meta-tx using personal_sign message."
      },
      "meta_nonce(address)": {
        "notice": "gets the current nonce (number of metatx emitted) of `from`."
      }
    }
  }
}
