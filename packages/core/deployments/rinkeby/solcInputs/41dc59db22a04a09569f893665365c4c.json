{
  "language": "Solidity",
  "sources": {
    "src/solc_0.7/Base/TheSandbox712.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\ncontract TheSandbox712 {\n    bytes32 internal constant EIP712DOMAIN_TYPEHASH =\n        keccak256(\"EIP712Domain(string name,string version,address verifyingContract)\");\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 public immutable DOMAIN_SEPARATOR;\n\n    constructor() {\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(EIP712DOMAIN_TYPEHASH, keccak256(\"The Sandbox\"), keccak256(\"1\"), address(this))\n        );\n    }\n}\n"
    },
    "src/solc_0.7/Permit/Permit.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"../common/Interfaces/IERC20Extended.sol\";\nimport \"../Base/TheSandbox712.sol\";\n\n/// @title Permit contract\n/// @notice This contract manages approvals of SAND via signature\ncontract Permit is TheSandbox712 {\n    IERC20Extended internal immutable _sand;\n\n    mapping(address => uint256) public nonces;\n\n    bytes32 public constant PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    constructor(IERC20Extended sandContractAddress) {\n        _sand = sandContractAddress;\n    }\n\n    /// @notice Permit the expenditure of SAND by a nominated spender.\n    /// @param owner The owner of the ERC20 tokens.\n    /// @param spender The nominated spender of the ERC20 tokens.\n    /// @param value The value (allowance) of the ERC20 tokens that the nominated.\n    /// spender will be allowed to spend.\n    /// @param deadline The deadline for granting permission to the spender.\n    /// @param v The final 1 byte of signature.\n    /// @param r The first 32 bytes of signature.\n    /// @param s The second 32 bytes of signature.\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public {\n        require(deadline >= block.timestamp, \"PAST_DEADLINE\");\n        bytes32 digest =\n            keccak256(\n                abi.encodePacked(\n                    \"\\x19\\x01\",\n                    DOMAIN_SEPARATOR,\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\n                )\n            );\n        address recoveredAddress = ecrecover(digest, v, r, s);\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNATURE\");\n        _sand.approveFor(owner, spender, value);\n    }\n}\n"
    },
    "src/solc_0.7/common/Interfaces/IERC20Extended.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IERC20Extended is IERC20 {\n    function burnFor(address from, uint256 amount) external;\n\n    function burn(uint256 amount) external;\n\n    function approveFor(\n        address owner,\n        address spender,\n        uint256 amount\n    ) external returns (bool success);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "src/solc_0.7/catalyst/AssetUpgrader.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"./interfaces/IAssetAttributesRegistry.sol\";\nimport \"./interfaces/IAssetUpgrader.sol\";\nimport \"./GemsCatalystsRegistry.sol\";\nimport \"../common/Interfaces/IERC20Extended.sol\";\nimport \"../common/Interfaces/IAssetToken.sol\";\nimport \"../common/BaseWithStorage/WithMetaTransaction.sol\";\n\n/// @notice Allow to upgrade Asset with Catalyst, Gems and Sand, giving the assets attributes through AssetAttributeRegistry\ncontract AssetUpgrader is WithMetaTransaction, IAssetUpgrader {\n    using SafeMath for uint256;\n\n    address public immutable feeRecipient;\n    uint256 public immutable upgradeFee;\n    uint256 public immutable gemAdditionFee;\n    uint256 private constant GEM_UNIT = 1000000000000000000;\n    uint256 private constant CATALYST_UNIT = 1000000000000000000;\n    uint256 private constant IS_NFT = 0x0000000000000000000000000000000000000000800000000000000000000000;\n    address private constant BURN_ADDRESS = 0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF;\n\n    IERC20Extended internal immutable _sand;\n    IAssetAttributesRegistry internal immutable _registry;\n    IAssetToken internal immutable _asset;\n    GemsCatalystsRegistry internal immutable _gemsCatalystsRegistry;\n\n    /// @notice AssetUpgrader depends on\n    /// @param registry: AssetAttributesRegistry for recording catalyst and gems used\n    /// @param sand: ERC20 for fee payment\n    /// @param asset: Asset Token Contract (dual ERC1155/ERC721)\n    /// @param gemsCatalystsRegistry: that track the canonical catalyst and gems and provide batch burning facility\n    /// @param _upgradeFee: the fee in Sand paid for an upgrade (setting or replacing a catalyst)\n    /// @param _gemAdditionFee: the fee in Sand paid for adding gems\n    /// @param _feeRecipient: address receiving the Sand fee\n    constructor(\n        IAssetAttributesRegistry registry,\n        IERC20Extended sand,\n        IAssetToken asset,\n        GemsCatalystsRegistry gemsCatalystsRegistry,\n        uint256 _upgradeFee,\n        uint256 _gemAdditionFee,\n        address _feeRecipient\n    ) {\n        _registry = registry;\n        _sand = sand;\n        _asset = asset;\n        _gemsCatalystsRegistry = gemsCatalystsRegistry;\n        upgradeFee = _upgradeFee;\n        gemAdditionFee = _gemAdditionFee;\n        feeRecipient = _feeRecipient;\n    }\n\n    /// @notice associate a catalyst to a fungible Asset token by extracting it as ERC721 first.\n    /// @param from address from which the Asset token belongs to.\n    /// @param assetId tokenId of the Asset being extracted.\n    /// @param catalystId address of the catalyst token to use and burn.\n    /// @param gemIds list of gems to socket into the catalyst (burned).\n    /// @param to destination address receiving the extracted and upgraded ERC721 Asset token.\n    /// @return tokenId The Id of the extracted token.\n    function extractAndSetCatalyst(\n        address from,\n        uint256 assetId,\n        uint16 catalystId,\n        uint16[] calldata gemIds,\n        address to\n    ) external override returns (uint256 tokenId) {\n        require(to != address(0), \"INVALID_TO_ZERO_ADDRESS\");\n        _checkAuthorization(from);\n        tokenId = _asset.extractERC721From(from, assetId, from);\n        _changeCatalyst(from, tokenId, catalystId, gemIds, to);\n    }\n\n    /// @notice associate a new catalyst to a non-fungible Asset token.\n    /// @param from address from which the Asset token belongs to.\n    /// @param assetId tokenId of the Asset being updated.\n    /// @param catalystId address of the catalyst token to use and burn.\n    /// @param gemIds list of gems to socket into the catalyst (burned).\n    /// @param to destination address receiving the Asset token.\n    /// @return tokenId The id of the asset.\n    function changeCatalyst(\n        address from,\n        uint256 assetId,\n        uint16 catalystId,\n        uint16[] calldata gemIds,\n        address to\n    ) external override returns (uint256 tokenId) {\n        require(to != address(0), \"INVALID_TO_ZERO_ADDRESS\");\n        _checkAuthorization(from);\n        _changeCatalyst(from, assetId, catalystId, gemIds, to);\n        return assetId;\n    }\n\n    /// @notice add gems to a non-fungible Asset token.\n    /// @param from address from which the Asset token belongs to.\n    /// @param assetId tokenId of the Asset to which the gems will be added to.\n    /// @param gemIds list of gems to socket into the existing catalyst (burned).\n    /// @param to destination address receiving the extracted and upgraded ERC721 Asset token.\n    function addGems(\n        address from,\n        uint256 assetId,\n        uint16[] calldata gemIds,\n        address to\n    ) external override {\n        require(to != address(0), \"INVALID_TO_ZERO_ADDRESS\");\n        _checkAuthorization(from);\n        _addGems(from, assetId, gemIds, to);\n    }\n\n    /// @dev Collect a fee in SAND tokens\n    /// @param from The address paying the fee.\n    /// @param sandFee The fee amount.\n    function _chargeSand(address from, uint256 sandFee) internal {\n        if (feeRecipient != address(0) && sandFee != 0) {\n            if (feeRecipient == address(BURN_ADDRESS)) {\n                // special address for burn\n                _sand.burnFor(from, sandFee);\n            } else {\n                _sand.transferFrom(from, feeRecipient, sandFee);\n            }\n        }\n    }\n\n    /// @dev Change the catalyst for an asset.\n    /// @param from The current owner of the asset.\n    /// @param assetId The id of the asset to change.\n    /// @param catalystId The id of the new catalyst to set.\n    /// @param gemIds An array of gemIds to embed.\n    /// @param to The address to transfer the asset to after the catalyst is changed.\n    function _changeCatalyst(\n        address from,\n        uint256 assetId,\n        uint16 catalystId,\n        uint16[] memory gemIds,\n        address to\n    ) internal {\n        require(assetId & IS_NFT != 0, \"INVALID_NOT_NFT\"); // Asset (ERC1155ERC721.sol) ensure NFT will return true here and non-NFT will return false\n        _burnCatalyst(from, catalystId);\n        _burnGems(from, gemIds);\n        _chargeSand(from, upgradeFee);\n        _registry.setCatalyst(assetId, catalystId, gemIds);\n        _transfer(from, to, assetId);\n    }\n\n    /// @dev Add gems to an existing asset.\n    /// @param from The current owner of the asset.\n    /// @param assetId The asset to add gems to.\n    /// @param gemIds An array of gemIds to add to the asset.\n    /// @param to The address to transfer the asset to after adding gems.\n    function _addGems(\n        address from,\n        uint256 assetId,\n        uint16[] memory gemIds,\n        address to\n    ) internal {\n        require(assetId & IS_NFT != 0, \"INVALID_NOT_NFT\"); // Asset (ERC1155ERC721.sol) ensure NFT will return true here and non-NFT will return false\n        _burnGems(from, gemIds);\n        _chargeSand(from, gemAdditionFee);\n        _registry.addGems(assetId, gemIds);\n        _transfer(from, to, assetId);\n    }\n\n    /// @dev transfer an asset if from != to.\n    /// @param from The address to transfer the asset from.\n    /// @param to The address to transfer the asset to.\n    /// @param assetId The asset to transfer.\n    function _transfer(\n        address from,\n        address to,\n        uint256 assetId\n    ) internal {\n        if (from != to) {\n            _asset.safeTransferFrom(from, to, assetId);\n        } else {\n            require(_asset.balanceOf(from, assetId) > 0, \"NOT_AUTHORIZED_ASSET_OWNER\");\n        }\n    }\n\n    /// @dev Burn gems.\n    /// @param from The owner of the gems.\n    /// @param gemIds The gem types to burn.\n    function _burnGems(address from, uint16[] memory gemIds) internal {\n        _gemsCatalystsRegistry.burnDifferentGems(from, gemIds, GEM_UNIT);\n    }\n\n    /// @dev Burn a catalyst.\n    /// @param from The owner of the catalyst.\n    /// @param catalystId The catalyst type to burn.\n    function _burnCatalyst(address from, uint16 catalystId) internal {\n        _gemsCatalystsRegistry.burnCatalyst(from, catalystId, CATALYST_UNIT);\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "src/solc_0.7/catalyst/interfaces/IAssetAttributesRegistry.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\npragma experimental ABIEncoderV2;\n\ninterface IAssetAttributesRegistry {\n    struct GemEvent {\n        uint16[] gemIds;\n        bytes32 blockHash;\n    }\n\n    function getRecord(uint256 assetId)\n        external\n        view\n        returns (\n            bool exists,\n            uint16 catalystId,\n            uint16[] memory gemIds\n        );\n\n    function getAttributes(uint256 assetId, GemEvent[] calldata events) external view returns (uint32[] memory values);\n\n    function setCatalyst(\n        uint256 assetId,\n        uint16 catalystId,\n        uint16[] calldata gemIds\n    ) external;\n\n    function setCatalystWithBlockNumber(\n        uint256 assetId,\n        uint16 catalystId,\n        uint16[] calldata gemIds,\n        uint64 blockNumber\n    ) external;\n\n    function addGems(uint256 assetId, uint16[] calldata gemIds) external;\n\n    function setMigrationContract(address _migrationContract) external;\n}\n"
    },
    "src/solc_0.7/catalyst/interfaces/IAssetUpgrader.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\npragma experimental ABIEncoderV2;\n\ninterface IAssetUpgrader {\n    function extractAndSetCatalyst(\n        address from,\n        uint256 assetId,\n        uint16 catalystId,\n        uint16[] calldata gemIds,\n        address to\n    ) external returns (uint256 tokenId);\n\n    function changeCatalyst(\n        address from,\n        uint256 assetId,\n        uint16 catalystId,\n        uint16[] calldata gemIds,\n        address to\n    ) external returns (uint256 tokenId);\n\n    function addGems(\n        address from,\n        uint256 assetId,\n        uint16[] calldata gemIds,\n        address to\n    ) external;\n}\n"
    },
    "src/solc_0.7/catalyst/GemsCatalystsRegistry.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\npragma experimental ABIEncoderV2;\n\nimport \"./Gem.sol\";\nimport \"./Catalyst.sol\";\nimport \"./interfaces/IAssetAttributesRegistry.sol\";\nimport \"./interfaces/IGemsCatalystsRegistry.sol\";\nimport \"../common/BaseWithStorage/WithSuperOperators.sol\";\nimport \"../common/BaseWithStorage/WithMetaTransaction.sol\";\n\n/// @notice Contract managing the Gems and Catalysts\n/// Each Gems and Catalys must be registered here.\n/// Each new Gem get assigned a new id (starting at 1)\n/// Each new Catalyst get assigned a new id (starting at 1)\ncontract GemsCatalystsRegistry is WithSuperOperators, WithMetaTransaction, IGemsCatalystsRegistry {\n    Gem[] internal _gems;\n    Catalyst[] internal _catalysts;\n\n    constructor(address admin) {\n        _admin = admin;\n    }\n\n    /// @notice Returns the values for each gem included in a given asset.\n    /// @param catalystId The catalyst identifier.\n    /// @param assetId The asset tokenId.\n    /// @param events An array of GemEvents. Be aware that only gemEvents from the last CatalystApplied event onwards should be used to populate a query. If gemEvents from multiple CatalystApplied events are included the output values will be incorrect.\n    /// @return values An array of values for each gem present in the asset.\n    function getAttributes(\n        uint16 catalystId,\n        uint256 assetId,\n        IAssetAttributesRegistry.GemEvent[] calldata events\n    ) external view override returns (uint32[] memory values) {\n        Catalyst catalyst = getCatalyst(catalystId);\n        require(catalyst != Catalyst(0), \"CATALYST_DOES_NOT_EXIST\");\n        return catalyst.getAttributes(assetId, events);\n    }\n\n    /// @notice Returns the maximum number of gems for a given catalyst\n    /// @param catalystId catalyst identifier\n    function getMaxGems(uint16 catalystId) external view override returns (uint8) {\n        Catalyst catalyst = getCatalyst(catalystId);\n        require(catalyst != Catalyst(0), \"CATALYST_DOES_NOT_EXIST\");\n        return catalyst.getMaxGems();\n    }\n\n    /// @notice Burns one gem unit from each gem id on behalf of a beneficiary\n    /// @param from address of the beneficiary to burn on behalf of\n    /// @param gemIds list of gems to burn one gem from each\n    /// @param amount amount units to burn\n    function burnDifferentGems(\n        address from,\n        uint16[] calldata gemIds,\n        uint256 amount\n    ) external override {\n        for (uint256 i = 0; i < gemIds.length; i++) {\n            burnGem(from, gemIds[i], amount);\n        }\n    }\n\n    /// @notice Burns one catalyst unit from each catalyst id on behalf of a beneficiary\n    /// @param from address of the beneficiary to burn on behalf of\n    /// @param catalystIds list of catalysts to burn one catalyst from each\n    /// @param amount amount to burn\n    function burnDifferentCatalysts(\n        address from,\n        uint16[] calldata catalystIds,\n        uint256 amount\n    ) external override {\n        for (uint256 i = 0; i < catalystIds.length; i++) {\n            burnCatalyst(from, catalystIds[i], amount);\n        }\n    }\n\n    /// @notice Burns few gem units from each gem id on behalf of a beneficiary\n    /// @param from address of the beneficiary to burn on behalf of\n    /// @param gemIds list of gems to burn gem units from each\n    /// @param amounts list of amounts of units to burn\n    function batchBurnGems(\n        address from,\n        uint16[] calldata gemIds,\n        uint256[] calldata amounts\n    ) public override {\n        for (uint256 i = 0; i < gemIds.length; i++) {\n            if (gemIds[i] != 0 && amounts[i] != 0) {\n                burnGem(from, gemIds[i], amounts[i]);\n            }\n        }\n    }\n\n    /// @notice Burns few catalyst units from each catalyst id on behalf of a beneficiary\n    /// @param from address of the beneficiary to burn on behalf of\n    /// @param catalystIds list of catalysts to burn catalyst units from each\n    /// @param amounts list of amounts of units to burn\n    function batchBurnCatalysts(\n        address from,\n        uint16[] calldata catalystIds,\n        uint256[] calldata amounts\n    ) public override {\n        for (uint256 i = 0; i < catalystIds.length; i++) {\n            if (catalystIds[i] != 0 && amounts[i] != 0) {\n                burnCatalyst(from, catalystIds[i], amounts[i]);\n            }\n        }\n    }\n\n    /// @notice Adds both arrays of gems and catalysts to registry\n    /// @param gems array of gems to be added\n    /// @param catalysts array of catalysts to be added\n    function addGemsAndCatalysts(Gem[] calldata gems, Catalyst[] calldata catalysts) external override {\n        require(msg.sender == _admin, \"NOT_AUTHORIZED\");\n        for (uint256 i = 0; i < gems.length; i++) {\n            Gem gem = gems[i];\n            uint16 gemId = gem.gemId();\n            require(gemId == _gems.length + 1, \"GEM_ID_NOT_IN_ORDER\");\n            _gems.push(gem);\n        }\n\n        for (uint256 i = 0; i < catalysts.length; i++) {\n            Catalyst catalyst = catalysts[i];\n            uint16 catalystId = catalyst.catalystId();\n            require(catalystId == _catalysts.length + 1, \"CATALYST_ID_NOT_IN_ORDER\");\n            _catalysts.push(catalyst);\n        }\n    }\n\n    /// @notice Query whether a given gem exists.\n    /// @param gemId The gem being queried.\n    /// @return Whether the gem exists.\n    function doesGemExist(uint16 gemId) external view override returns (bool) {\n        return getGem(gemId) != Gem(0);\n    }\n\n    /// @notice Query whether a giving catalyst exists.\n    /// @param catalystId The catalyst being queried.\n    /// @return Whether the catalyst exists.\n    function doesCatalystExist(uint16 catalystId) external view returns (bool) {\n        return getCatalyst(catalystId) != Catalyst(0);\n    }\n\n    /// @notice Burn a catalyst.\n    /// @param from The signing address for the tx.\n    /// @param catalystId The id of the catalyst to burn.\n    /// @param amount The number of catalyst tokens to burn.\n    function burnCatalyst(\n        address from,\n        uint16 catalystId,\n        uint256 amount\n    ) public override {\n        _checkAuthorization(from);\n        Catalyst catalyst = getCatalyst(catalystId);\n        require(catalyst != Catalyst(0), \"CATALYST_DOES_NOT_EXIST\");\n        catalyst.burnFor(from, amount);\n    }\n\n    /// @notice Burn a gem.\n    /// @param from The signing address for the tx.\n    /// @param gemId The id of the gem to burn.\n    /// @param amount The number of gem tokens to burn.\n    function burnGem(\n        address from,\n        uint16 gemId,\n        uint256 amount\n    ) public override {\n        _checkAuthorization(from);\n        Gem gem = getGem(gemId);\n        require(gem != Gem(0), \"GEM_DOES_NOT_EXIST\");\n        gem.burnFor(from, amount);\n    }\n\n    // //////////////////// INTERNALS ////////////////////\n\n    /// @dev Get the catalyst contract corresponding to the id.\n    /// @param catalystId The catalyst id to use to retrieve the contract.\n    /// @return The requested Catalyst contract.\n    function getCatalyst(uint16 catalystId) internal view returns (Catalyst) {\n        if (catalystId > 0 && catalystId <= _catalysts.length) {\n            return _catalysts[catalystId - 1];\n        } else {\n            return Catalyst(0);\n        }\n    }\n\n    /// @dev Get the gem contract corresponding to the id.\n    /// @param gemId The gem id to use to retrieve the contract.\n    /// @return The requested Gem contract.\n    function getGem(uint16 gemId) internal view returns (Gem) {\n        if (gemId > 0 && gemId <= _gems.length) {\n            return _gems[gemId - 1];\n        } else {\n            return Gem(0);\n        }\n    }\n\n    /// @dev verify that the caller is authorized for this function call.\n    /// @param from The original signer of the transaction.\n    function _checkAuthorization(address from) internal view override {\n        require(msg.sender == from || _isValidMetaTx(from) || isSuperOperator(msg.sender), \"AUTH_ACCESS_DENIED\");\n    }\n}\n"
    },
    "src/solc_0.7/common/Interfaces/IAssetToken.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\ninterface IAssetToken {\n    function mint(\n        address creator,\n        uint40 packId,\n        bytes32 hash,\n        uint256 supply,\n        uint8 rarity,\n        address owner,\n        bytes calldata data\n    ) external returns (uint256 id);\n\n    function mintMultiple(\n        address creator,\n        uint40 packId,\n        bytes32 hash,\n        uint256[] calldata supplies,\n        bytes calldata rarityPack,\n        address owner,\n        bytes calldata data\n    ) external returns (uint256[] memory ids);\n\n    // fails on non-NFT or nft who do not have collection (was a mistake)\n    function collectionOf(uint256 id) external view returns (uint256);\n\n    function balanceOf(address owner, uint256 id) external view returns (uint256);\n\n    // return true for Non-NFT ERC1155 tokens which exists\n    function isCollection(uint256 id) external view returns (bool);\n\n    function collectionIndexOf(uint256 id) external view returns (uint256);\n\n    function extractERC721From(\n        address sender,\n        uint256 id,\n        address to\n    ) external returns (uint256 newId);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 id\n    ) external;\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id\n    ) external;\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external;\n\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        bytes calldata data\n    ) external;\n\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external;\n\n    function isSuperOperator(address who) external view returns (bool);\n}\n"
    },
    "src/solc_0.7/common/BaseWithStorage/WithMetaTransaction.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"./WithAdmin.sol\";\n\ncontract WithMetaTransaction is WithAdmin {\n    uint8 internal constant METATX_SANDBOX = 1;\n    uint8 internal constant METATX_2771 = 2;\n\n    mapping(address => uint8) internal _metaTransactionContracts;\n\n    /// @dev Emits when a meta transaction processor is enabled / disabled.\n    /// @param metaTransactionProcessor The address being enabled / disabled.\n    /// @param processorType The type of metaTransactionProcessor to set.\n    event MetaTransactionProcessor(address metaTransactionProcessor, uint8 processorType);\n\n    /// @dev Enable or disable the ability of metaTransactionProcessor.\n    /// to perform meta-tx (metaTransactionProcessor rights).\n    /// @param metaTransactionProcessor The address that will have metaTransactionProcessor rights\n    /// granted / revoked.\n    /// @param processorType The metaTransactionProcessor type to set.\n    function setMetaTransactionProcessor(address metaTransactionProcessor, uint8 processorType) public {\n        require(msg.sender == _admin, \"ADMIN_ACCESS_DENIED\");\n        _setMetaTransactionProcessor(metaTransactionProcessor, processorType);\n    }\n\n    /// @dev See setMetaTransactionProcessor\n    function _setMetaTransactionProcessor(address metaTransactionProcessor, uint8 processorType) internal {\n        _metaTransactionContracts[metaTransactionProcessor] = processorType;\n        emit MetaTransactionProcessor(metaTransactionProcessor, processorType);\n    }\n\n    /// @dev Check whether address `who` has been granted meta-transaction execution rights.\n    /// @param who The address to query.\n    /// @return The type of metatx processor (0 for none).\n    function getMetaTransactionProcessorType(address who) external view returns (uint8) {\n        return _metaTransactionContracts[who];\n    }\n\n    // --------------------------------------------------------------------------------\n    // EIP-2771 Meta Transaction Recipient\n    // --------------------------------------------------------------------------------\n\n    /// @notice Check if forwarder is trusted.\n    /// @param forwarder The address to query.\n    /// @return whether or not forwarder is trusted.\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\n        return _metaTransactionContracts[forwarder] == METATX_2771;\n    }\n\n    /// @dev Decide which sender address to use for this call.\n    /// If the call came through our trusted forwarder, return the original sender.\n    /// Otherwise, return `msg.sender`.\n    /// @return ret The sender of this call.\n\n    function _msgSender() internal view virtual returns (address payable ret) {\n        if (isTrustedForwarder(msg.sender)) {\n            return _forceMsgSender();\n        } else {\n            return msg.sender;\n        }\n    }\n\n    /// @dev Get the actual sender of call.\n    /// if the call came through our trusted forwarder, return the original sender.\n    /// otherwise, return `msg.sender`.\n    /// should be used in the contract anywhere instead of msg.sender\n    /// @return ret The sender of this call.\n    function _forceMsgSender() internal view virtual returns (address payable ret) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            ret := shr(96, calldataload(sub(calldatasize(), 20)))\n        }\n    }\n\n    /// @dev Test if a tx is a valid Sandbox or EIP-2771 metaTransaction.\n    /// @param from The address passed as either \"from\" or \"sender\" to the func which called this one.\n    /// @return Whether this is a valid metaTransaction.\n    function _isValidMetaTx(address from) internal view returns (bool) {\n        uint256 processorType = _metaTransactionContracts[msg.sender];\n        if (msg.sender == from || processorType == 0) {\n            return false;\n        }\n        if (processorType == METATX_2771) {\n            if (from != _forceMsgSender()) {\n                return false;\n            } else {\n                return true;\n            }\n        } else if (processorType == METATX_SANDBOX) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function _checkAuthorization(address from) internal view virtual {\n        require(msg.sender == from || _isValidMetaTx(from), \"AUTH_ACCESS_DENIED\");\n    }\n}\n"
    },
    "src/solc_0.7/catalyst/Gem.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"./ERC20Token.sol\";\n\ncontract Gem is ERC20Token {\n    uint16 public immutable gemId;\n\n    constructor(\n        string memory name,\n        string memory symbol,\n        address admin,\n        uint16 _gemId,\n        address operator\n    ) ERC20Token(name, symbol, admin, operator) {\n        gemId = _gemId;\n    }\n}\n"
    },
    "src/solc_0.7/catalyst/Catalyst.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IAssetAttributesRegistry.sol\";\nimport \"./ERC20Token.sol\";\nimport \"./interfaces/IAttributes.sol\";\n\ncontract Catalyst is ERC20Token, IAttributes {\n    uint16 public immutable catalystId;\n    uint8 internal immutable _maxGems;\n\n    IAttributes internal _attributes;\n\n    constructor(\n        string memory name,\n        string memory symbol,\n        address admin,\n        uint8 maxGems,\n        uint16 _catalystId,\n        IAttributes attributes,\n        address operator\n    ) ERC20Token(name, symbol, admin, operator) {\n        _maxGems = maxGems;\n        catalystId = _catalystId;\n        _attributes = attributes;\n    }\n\n    /// @notice Used by Admin to update the attributes contract.\n    /// @param attributes The new attributes contract.\n    function changeAttributes(IAttributes attributes) external onlyAdmin {\n        _attributes = attributes;\n    }\n\n    /// @notice Get the value of _maxGems(the max number of gems that can be embeded in this type of catalyst).\n    /// @return The value of _maxGems.\n    function getMaxGems() external view returns (uint8) {\n        return _maxGems;\n    }\n\n    /// @notice Get the attributes for each gem in an asset.\n    /// See DefaultAttributes.getAttributes for more.\n    /// @return values An array of values representing the \"level\" of each gem. ie: Power=14, speed=45, etc...\n    function getAttributes(uint256 assetId, IAssetAttributesRegistry.GemEvent[] calldata events)\n        external\n        view\n        override\n        returns (uint32[] memory values)\n    {\n        return _attributes.getAttributes(assetId, events);\n    }\n}\n"
    },
    "src/solc_0.7/catalyst/interfaces/IGemsCatalystsRegistry.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\npragma experimental ABIEncoderV2;\n\nimport \"./IAssetAttributesRegistry.sol\";\nimport \"../Gem.sol\";\nimport \"../Catalyst.sol\";\n\ninterface IGemsCatalystsRegistry {\n    function getAttributes(\n        uint16 catalystId,\n        uint256 assetId,\n        IAssetAttributesRegistry.GemEvent[] calldata events\n    ) external view returns (uint32[] memory values);\n\n    function getMaxGems(uint16 catalystId) external view returns (uint8);\n\n    function burnDifferentGems(\n        address from,\n        uint16[] calldata gemIds,\n        uint256 amount\n    ) external;\n\n    function burnDifferentCatalysts(\n        address from,\n        uint16[] calldata catalystIds,\n        uint256 amount\n    ) external;\n\n    function batchBurnGems(\n        address from,\n        uint16[] calldata gemIds,\n        uint256[] calldata amounts\n    ) external;\n\n    function batchBurnCatalysts(\n        address from,\n        uint16[] calldata catalystIds,\n        uint256[] calldata amounts\n    ) external;\n\n    function addGemsAndCatalysts(Gem[] calldata gems, Catalyst[] calldata catalysts) external;\n\n    function doesGemExist(uint16 gemId) external view returns (bool);\n\n    function burnCatalyst(\n        address from,\n        uint16 catalystId,\n        uint256 amount\n    ) external;\n\n    function burnGem(\n        address from,\n        uint16 gemId,\n        uint256 amount\n    ) external;\n}\n"
    },
    "src/solc_0.7/common/BaseWithStorage/WithSuperOperators.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"./WithAdmin.sol\";\n\ncontract WithSuperOperators is WithAdmin {\n    mapping(address => bool) internal _superOperators;\n\n    /// @dev Emits when superOperator rights are set\n    /// @param superOperator The address whose rights are being granted / evoked\n    /// @param enabled Whether or not this address has superOperator rights\n    event SuperOperator(address superOperator, bool enabled);\n\n    /// @notice Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights).\n    /// @param superOperator Address that will be given/removed superOperator right.\n    /// @param enabled Set whether the superOperator is enabled or disabled.\n    function setSuperOperator(address superOperator, bool enabled) external {\n        require(msg.sender == _admin, \"ADMIN_ACCESS_DENIED\");\n        _superOperators[superOperator] = enabled;\n        emit SuperOperator(superOperator, enabled);\n    }\n\n    /// @notice Check whether address `who` is given superOperator rights.\n    /// @param who The address to query.\n    /// @return Whether the address has superOperator rights.\n    function isSuperOperator(address who) public view returns (bool) {\n        return _superOperators[who];\n    }\n}\n"
    },
    "src/solc_0.7/catalyst/ERC20Token.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"../common/BaseWithStorage/erc20/ERC20BaseToken.sol\";\nimport \"../common/BaseWithStorage/erc20/extensions/ERC20BasicApproveExtension.sol\";\nimport \"../Base/TheSandbox712.sol\";\nimport \"../common/BaseWithStorage/erc20/extensions/ERC677Extension.sol\";\nimport \"../common/Interfaces/IERC677Receiver.sol\";\n\ncontract ERC20Token is ERC20BasicApproveExtension, ERC677Extension, TheSandbox712, ERC20BaseToken {\n    // //////////////////////// DATA /////////////////////\n\n    bytes32 internal constant PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    mapping(address => uint256) public nonces;\n\n    // /////////////////// CONSTRUCTOR ////////////////////\n    constructor(\n        string memory name,\n        string memory symbol,\n        address admin,\n        address operator\n    )\n        ERC20BaseToken(name, symbol, admin, operator) // solhint-disable-next-line no-empty-blocks\n    {}\n\n    function mint(address to, uint256 amount) external onlyAdmin {\n        _mint(to, amount);\n    }\n\n    /// @notice Function to permit the expenditure of ERC20 token by a nominated spender\n    /// @param owner The owner of the ERC20 tokens\n    /// @param spender The nominated spender of the ERC20 tokens\n    /// @param value The value (allowance) of the ERC20 tokens that the nominated spender will be allowed to spend\n    /// @param deadline The deadline for granting permission to the spender\n    /// @param v The final 1 byte of signature\n    /// @param r The first 32 bytes of signature\n    /// @param s The second 32 bytes of signature\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public {\n        require(deadline >= block.timestamp, \"PAST_DEADLINE\");\n        bytes32 digest =\n            keccak256(\n                abi.encodePacked(\n                    \"\\x19\\x01\",\n                    DOMAIN_SEPARATOR,\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\n                )\n            );\n        address recoveredAddress = ecrecover(digest, v, r, s);\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNATURE\");\n        _approveFor(owner, spender, value);\n    }\n}\n"
    },
    "src/solc_0.7/common/BaseWithStorage/erc20/ERC20BaseToken.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"./extensions/ERC20Internal.sol\";\nimport \"../../Interfaces/IERC20Extended.sol\";\nimport \"../WithSuperOperators.sol\";\n\nabstract contract ERC20BaseToken is WithSuperOperators, IERC20, IERC20Extended, ERC20Internal {\n    bytes32 internal immutable _name; // works only for string that can fit into 32 bytes\n    bytes32 internal immutable _symbol; // works only for string that can fit into 32 bytes\n    address internal immutable _operator;\n    uint256 internal _totalSupply;\n    mapping(address => uint256) internal _balances;\n    mapping(address => mapping(address => uint256)) internal _allowances;\n\n    constructor(\n        string memory tokenName,\n        string memory tokenSymbol,\n        address admin,\n        address operator\n    ) {\n        require(bytes(tokenName).length > 0, \"INVALID_NAME_REQUIRED\");\n        require(bytes(tokenName).length <= 32, \"INVALID_NAME_TOO_LONG\");\n        _name = _firstBytes32(bytes(tokenName));\n        require(bytes(tokenSymbol).length > 0, \"INVALID_SYMBOL_REQUIRED\");\n        require(bytes(tokenSymbol).length <= 32, \"INVALID_SYMBOL_TOO_LONG\");\n        _symbol = _firstBytes32(bytes(tokenSymbol));\n        _admin = admin;\n        _operator = operator;\n    }\n\n    /// @notice Transfer `amount` tokens to `to`.\n    /// @param to The recipient address of the tokens being transfered.\n    /// @param amount The number of tokens being transfered.\n    /// @return success Whether or not the transfer succeeded.\n    function transfer(address to, uint256 amount) external override returns (bool success) {\n        _transfer(msg.sender, to, amount);\n        return true;\n    }\n\n    /// @notice Transfer `amount` tokens from `from` to `to`.\n    /// @param from The origin address  of the tokens being transferred.\n    /// @param to The recipient address of the tokensbeing  transfered.\n    /// @param amount The number of tokens transfered.\n    /// @return success Whether or not the transfer succeeded.\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external override returns (bool success) {\n        if (msg.sender != from && !_superOperators[msg.sender] && msg.sender != _operator) {\n            uint256 currentAllowance = _allowances[from][msg.sender];\n            if (currentAllowance != ~uint256(0)) {\n                // save gas when allowance is maximal by not reducing it (see https://github.com/ethereum/EIPs/issues/717)\n                require(currentAllowance >= amount, \"NOT_AUTHORIZED_ALLOWANCE\");\n                _allowances[from][msg.sender] = currentAllowance - amount;\n            }\n        }\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /// @notice Burn `amount` tokens.\n    /// @param amount The number of tokens to burn.\n    function burn(uint256 amount) external override {\n        _burn(msg.sender, amount);\n    }\n\n    /// @notice Burn `amount` tokens from `owner`.\n    /// @param from The address whose token to burn.\n    /// @param amount The number of tokens to burn.\n    function burnFor(address from, uint256 amount) external override {\n        if (msg.sender != from && !_superOperators[msg.sender] && msg.sender != _operator) {\n            uint256 currentAllowance = _allowances[from][msg.sender];\n            if (currentAllowance != ~uint256(0)) {\n                require(currentAllowance >= amount, \"NOT_AUTHORIZED_ALLOWANCE\");\n                _allowances[from][msg.sender] = currentAllowance - amount;\n            }\n        }\n        _burn(from, amount);\n    }\n\n    /// @notice Approve `spender` to transfer `amount` tokens.\n    /// @param spender The address to be given rights to transfer.\n    /// @param amount The number of tokens allowed.\n    /// @return success Whether or not the call succeeded.\n    function approve(address spender, uint256 amount) external override returns (bool success) {\n        _approveFor(msg.sender, spender, amount);\n        return true;\n    }\n\n    /// @notice Get the name of the token collection.\n    /// @return The name of the token collection.\n    function name() external view returns (string memory) {\n        return string(abi.encodePacked(_name));\n    }\n\n    /// @notice Get the symbol for the token collection.\n    /// @return The symbol of the token collection.\n    function symbol() external view returns (string memory) {\n        return string(abi.encodePacked(_symbol));\n    }\n\n    /// @notice Get the total number of tokens in existence.\n    /// @return The total number of tokens in existence.\n    function totalSupply() external view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /// @notice Get the balance of `owner`.\n    /// @param owner The address to query the balance of.\n    /// @return The amount owned by `owner`.\n    function balanceOf(address owner) external view override returns (uint256) {\n        return _balances[owner];\n    }\n\n    /// @notice Get the allowance of `spender` for `owner`'s tokens.\n    /// @param owner The address whose token is allowed.\n    /// @param spender The address allowed to transfer.\n    /// @return remaining The amount of token `spender` is allowed to transfer on behalf of `owner`.\n    function allowance(address owner, address spender) external view override returns (uint256 remaining) {\n        return _allowances[owner][spender];\n    }\n\n    /// @notice Get the number of decimals for the token collection.\n    /// @return The number of decimals.\n    function decimals() external pure virtual returns (uint8) {\n        return uint8(18);\n    }\n\n    /// @notice Approve `spender` to transfer `amount` tokens from `owner`.\n    /// @param owner The address whose token is allowed.\n    /// @param spender The address to be given rights to transfer.\n    /// @param amount The number of tokens allowed.\n    /// @return success Whether or not the call succeeded.\n    function approveFor(\n        address owner,\n        address spender,\n        uint256 amount\n    ) public override returns (bool success) {\n        require(msg.sender == owner || _superOperators[msg.sender] || msg.sender == _operator, \"NOT_AUTHORIZED\"); // TODO metatx\n        _approveFor(owner, spender, amount);\n        return true;\n    }\n\n    /// @notice Increase the allowance for the spender if needed\n    /// @param owner The address of the owner of the tokens\n    /// @param spender The address wanting to spend tokens\n    /// @param amountNeeded The amount requested to spend\n    /// @return success Whether or not the call succeeded.\n    function addAllowanceIfNeeded(\n        address owner,\n        address spender,\n        uint256 amountNeeded\n    ) public returns (bool success) {\n        require(msg.sender == owner || _superOperators[msg.sender] || msg.sender == _operator, \"INVALID_SENDER\");\n        _addAllowanceIfNeeded(owner, spender, amountNeeded);\n        return true;\n    }\n\n    /// @notice Get the first 32 bytes of input `src`.\n    /// @param src The input data\n    /// @return output The first 32 bytes of `src`.\n    function _firstBytes32(bytes memory src) public pure returns (bytes32 output) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            output := mload(add(src, 32))\n        }\n    }\n\n    /// @dev See addAllowanceIfNeeded.\n    function _addAllowanceIfNeeded(\n        address owner,\n        address spender,\n        uint256 amountNeeded\n    ) internal override {\n        if (amountNeeded > 0 && !isSuperOperator(spender) && spender != _operator) {\n            uint256 currentAllowance = _allowances[owner][spender];\n            if (currentAllowance < amountNeeded) {\n                _approveFor(owner, spender, amountNeeded);\n            }\n        }\n    }\n\n    /// @dev See approveFor.\n    function _approveFor(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal override {\n        require(owner != address(0) && spender != address(0), \"INVALID_OWNER_||_SPENDER\");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /// @dev See transfer.\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override {\n        require(to != address(0), \"NOT_TO_ZEROADDRESS\");\n        require(to != address(this), \"NOT_TO_THIS\");\n        uint256 currentBalance = _balances[from];\n        require(currentBalance >= amount, \"INSUFFICIENT_FUNDS\");\n        _balances[from] = currentBalance - amount;\n        _balances[to] += amount;\n        emit Transfer(from, to, amount);\n    }\n\n    /// @dev Mint tokens for a recipient.\n    /// @param to The recipient address.\n    /// @param amount The number of token to mint.\n    function _mint(address to, uint256 amount) internal {\n        require(to != address(0), \"NOT_TO_ZEROADDRESS\");\n        require(amount > 0, \"MINT_O_TOKENS\");\n        uint256 currentTotalSupply = _totalSupply;\n        uint256 newTotalSupply = currentTotalSupply + amount;\n        require(newTotalSupply > currentTotalSupply, \"OVERFLOW\");\n        _totalSupply = newTotalSupply;\n        _balances[to] += amount;\n        emit Transfer(address(0), to, amount);\n    }\n\n    /// @dev Burn tokens from an address.\n    /// @param from The address whose tokens to burn.\n    /// @param amount The number of token to burn.\n    function _burn(address from, uint256 amount) internal {\n        require(amount > 0, \"BURN_O_TOKENS\");\n        if (msg.sender != from && !_superOperators[msg.sender] && msg.sender != _operator) {\n            uint256 currentAllowance = _allowances[from][msg.sender];\n            require(currentAllowance >= amount, \"INSUFFICIENT_ALLOWANCE\");\n            if (currentAllowance != ~uint256(0)) {\n                // save gas when allowance is maximal by not reducing it (see https://github.com/ethereum/EIPs/issues/717)\n                _allowances[from][msg.sender] = currentAllowance - amount;\n            }\n        }\n\n        uint256 currentBalance = _balances[from];\n        require(currentBalance >= amount, \"INSUFFICIENT_FUNDS\");\n        _balances[from] = currentBalance - amount;\n        _totalSupply -= amount;\n        emit Transfer(from, address(0), amount);\n    }\n}\n"
    },
    "src/solc_0.7/common/BaseWithStorage/erc20/extensions/ERC20BasicApproveExtension.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"./ERC20Internal.sol\";\nimport \"../../../Libraries/BytesUtil.sol\";\n\nabstract contract ERC20BasicApproveExtension is ERC20Internal {\n    /// @notice Approve `target` to spend `amount` and call it with data.\n    /// @param target The address to be given rights to transfer and destination of the call.\n    /// @param amount The number of tokens allowed.\n    /// @param data The bytes for the call.\n    /// @return The data of the call.\n    function approveAndCall(\n        address target,\n        uint256 amount,\n        bytes calldata data\n    ) external payable returns (bytes memory) {\n        require(BytesUtil.doFirstParamEqualsAddress(data, msg.sender), \"FIRST_PARAM_NOT_SENDER\");\n\n        _approveFor(msg.sender, target, amount);\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returnData) = target.call{value: msg.value}(data);\n        require(success, string(returnData));\n        return returnData;\n    }\n\n    /// @notice Temporarily approve `target` to spend `amount` and call it with data.\n    /// Previous approvals remains unchanged.\n    /// @param target The destination of the call, allowed to spend the amount specified\n    /// @param amount The number of tokens allowed to spend.\n    /// @param data The bytes for the call.\n    /// @return The data of the call.\n    function paidCall(\n        address target,\n        uint256 amount,\n        bytes calldata data\n    ) external payable returns (bytes memory) {\n        require(BytesUtil.doFirstParamEqualsAddress(data, msg.sender), \"FIRST_PARAM_NOT_SENDER\");\n\n        if (amount > 0) {\n            _addAllowanceIfNeeded(msg.sender, target, amount);\n        }\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returnData) = target.call{value: msg.value}(data);\n        require(success, string(returnData));\n\n        return returnData;\n    }\n}\n"
    },
    "src/solc_0.7/common/BaseWithStorage/erc20/extensions/ERC677Extension.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"../../../Interfaces/IERC677.sol\";\nimport \"../../../Interfaces/IERC677Receiver.sol\";\nimport \"./ERC20Internal.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\nabstract contract ERC677Extension is ERC20Internal, IERC677 {\n    using Address for address;\n\n    /// @notice Transfers tokens to an address with _data if the recipient is a contact.\n    /// @param _to The address to transfer to.\n    /// @param _value The amount to be transferred.\n    /// @param _data The extra data to be passed to the receiving contract.\n    function transferAndCall(\n        address _to,\n        uint256 _value,\n        bytes calldata _data\n    ) external override returns (bool success) {\n        _transfer(msg.sender, _to, _value);\n        if (_to.isContract()) {\n            IERC677Receiver receiver = IERC677Receiver(_to);\n            receiver.onTokenTransfer(msg.sender, _value, _data);\n        }\n        return true;\n    }\n}\n"
    },
    "src/solc_0.7/common/Interfaces/IERC677Receiver.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\ninterface IERC677Receiver {\n    function onTokenTransfer(\n        address _sender,\n        uint256 _value,\n        bytes calldata _data\n    ) external;\n}\n"
    },
    "src/solc_0.7/common/BaseWithStorage/erc20/extensions/ERC20Internal.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nabstract contract ERC20Internal {\n    function _approveFor(\n        address owner,\n        address target,\n        uint256 amount\n    ) internal virtual;\n\n    function _addAllowanceIfNeeded(\n        address owner,\n        address spender,\n        uint256 amountNeeded\n    ) internal virtual;\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual;\n}\n"
    },
    "src/solc_0.7/common/BaseWithStorage/WithAdmin.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\ncontract WithAdmin {\n    address internal _admin;\n\n    /// @dev Emits when the contract administrator is changed.\n    /// @param oldAdmin The address of the previous administrator.\n    /// @param newAdmin The address of the new administrator.\n    event AdminChanged(address oldAdmin, address newAdmin);\n\n    modifier onlyAdmin() {\n        require(msg.sender == _admin, \"ADMIN_ONLY\");\n        _;\n    }\n\n    /// @dev Get the current administrator of this contract.\n    /// @return The current administrator of this contract.\n    function getAdmin() external view returns (address) {\n        return _admin;\n    }\n\n    /// @dev Change the administrator to be `newAdmin`.\n    /// @param newAdmin The address of the new administrator.\n    function changeAdmin(address newAdmin) external {\n        require(msg.sender == _admin, \"ADMIN_ACCESS_DENIED\");\n        emit AdminChanged(_admin, newAdmin);\n        _admin = newAdmin;\n    }\n}\n"
    },
    "src/solc_0.7/common/Libraries/BytesUtil.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nlibrary BytesUtil {\n    /// @dev Check if the data == _address.\n    /// @param data The bytes passed to the function.\n    /// @param _address The address to compare to.\n    /// @return Whether the first param == _address.\n    function doFirstParamEqualsAddress(bytes memory data, address _address) internal pure returns (bool) {\n        if (data.length < (36 + 32)) {\n            return false;\n        }\n        uint256 value;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            value := mload(add(data, 36))\n        }\n        return value == uint256(_address);\n    }\n}\n"
    },
    "src/solc_0.7/common/Interfaces/IERC677.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\ninterface IERC677 {\n    function transferAndCall(\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bool success);\n    //TODO: decide whether we use that event, as it collides with ERC20 Transfer event\n    //event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "src/solc_0.7/catalyst/interfaces/IAttributes.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/IAssetAttributesRegistry.sol\";\n\ninterface IAttributes {\n    function getAttributes(uint256 assetId, IAssetAttributesRegistry.GemEvent[] calldata events)\n        external\n        view\n        returns (uint32[] memory values);\n}\n"
    },
    "src/solc_0.7/test/AssetUpgraderFeeBurner.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"../catalyst/AssetUpgrader.sol\";\n\n/// @notice Allow to upgrade Asset with Catalyst, Gems and Sand, giving the assets attributes through AssetAttributeRegistry\ncontract AssetUpgraderFeeBurner is AssetUpgrader {\n    constructor(\n        IAssetAttributesRegistry registry,\n        IERC20Extended sand,\n        IAssetToken asset,\n        GemsCatalystsRegistry gemsCatalystsRegistry,\n        uint256 _upgradeFee,\n        uint256 _gemAdditionFee,\n        address _feeRecipient\n    )\n        AssetUpgrader(registry, sand, asset, gemsCatalystsRegistry, _upgradeFee, _gemAdditionFee, _feeRecipient)\n    // solhint-disable-next-line no-empty-blocks\n    {\n\n    }\n}\n"
    },
    "src/solc_0.7/common/BaseWithStorage/ERC721BaseToken.sol": {
      "content": "//SPDX-License-Identifier: MIT\n/* solhint-disable func-order, code-complexity */\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"../BaseWithStorage/WithSuperOperators.sol\";\nimport \"../BaseWithStorage/WithMetaTransaction.sol\";\nimport \"../Interfaces/IERC721MandatoryTokenReceiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\ncontract ERC721BaseToken is IERC721, WithSuperOperators, WithMetaTransaction {\n    using Address for address;\n\n    bytes4 internal constant _ERC721_RECEIVED = 0x150b7a02;\n    bytes4 internal constant _ERC721_BATCH_RECEIVED = 0x4b808c46;\n\n    bytes4 internal constant ERC165ID = 0x01ffc9a7;\n    bytes4 internal constant ERC721_MANDATORY_RECEIVER = 0x5e8bf644;\n\n    uint256 internal constant NOT_ADDRESS = 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000;\n    uint256 internal constant OPERATOR_FLAG = (2**255);\n    uint256 internal constant NOT_OPERATOR_FLAG = OPERATOR_FLAG - 1;\n    uint256 internal constant BURNED_FLAG = (2**160);\n\n    mapping(address => uint256) internal _numNFTPerAddress;\n    mapping(uint256 => uint256) internal _owners;\n    mapping(address => mapping(address => bool)) internal _operatorsForAll;\n    mapping(uint256 => address) internal _operators;\n\n    constructor(address metaTransactionContract, address admin) {\n        _admin = admin;\n        _setMetaTransactionProcessor(metaTransactionContract, METATX_SANDBOX);\n    }\n\n    /// @notice Approve an operator to spend tokens on the senders behalf.\n    /// @param operator The address receiving the approval.\n    /// @param id The id of the token.\n    function approve(address operator, uint256 id) external override {\n        uint256 ownerData = _owners[_storageId(id)];\n        address owner = address(ownerData);\n        require(owner != address(0), \"NONEXISTENT_TOKEN\");\n        require(\n            owner == msg.sender || _superOperators[msg.sender] || _operatorsForAll[owner][msg.sender],\n            \"UNAUTHORIZED_APPROVAL\"\n        );\n        _approveFor(ownerData, operator, id);\n    }\n\n    /// @notice Approve an operator to spend tokens on the sender behalf.\n    /// @param sender The address giving the approval.\n    /// @param operator The address receiving the approval.\n    /// @param id The id of the token.\n    function approveFor(\n        address sender,\n        address operator,\n        uint256 id\n    ) external {\n        uint256 ownerData = _owners[_storageId(id)];\n        require(sender != address(0), \"ZERO_ADDRESS_SENDER\");\n        require(\n            msg.sender == sender ||\n                _isValidMetaTx(sender) ||\n                _superOperators[msg.sender] ||\n                _operatorsForAll[sender][msg.sender],\n            \"UNAUTHORIZED_APPROVAL\"\n        );\n        require(address(ownerData) == sender, \"OWNER_NOT_SENDER\");\n        _approveFor(ownerData, operator, id);\n    }\n\n    /// @notice Transfer a token between 2 addresses.\n    /// @param from The sender of the token.\n    /// @param to The recipient of the token.\n    /// @param id The id of the token.\n    function transferFrom(\n        address from,\n        address to,\n        uint256 id\n    ) external override {\n        bool metaTx = _checkTransfer(from, to, id);\n        _transferFrom(from, to, id);\n        if (to.isContract() && _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER)) {\n            require(_checkOnERC721Received(metaTx ? from : msg.sender, from, to, id, \"\"), \"ERC721_TRANSFER_REJECTED\");\n        }\n    }\n\n    /// @notice Transfer a token between 2 addresses letting the receiver know of the transfer.\n    /// @param from The send of the token.\n    /// @param to The recipient of the token.\n    /// @param id The id of the token.\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id\n    ) external override {\n        safeTransferFrom(from, to, id, \"\");\n    }\n\n    /// @notice Transfer many tokens between 2 addresses.\n    /// @param from The sender of the token.\n    /// @param to The recipient of the token.\n    /// @param ids The ids of the tokens.\n    /// @param data Additional data.\n    function batchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        bytes calldata data\n    ) external {\n        _batchTransferFrom(from, to, ids, data, false);\n    }\n\n    /// @notice Transfer many tokens between 2 addresses, while\n    /// ensuring the receiving contract has a receiver method.\n    /// @param from The sender of the token.\n    /// @param to The recipient of the token.\n    /// @param ids The ids of the tokens.\n    /// @param data Additional data.\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        bytes calldata data\n    ) external {\n        _batchTransferFrom(from, to, ids, data, true);\n    }\n\n    /// @notice Set the approval for an operator to manage all the tokens of the sender.\n    /// @param sender The address giving the approval.\n    /// @param operator The address receiving the approval.\n    /// @param approved The determination of the approval.\n    function setApprovalForAllFor(\n        address sender,\n        address operator,\n        bool approved\n    ) external {\n        require(sender != address(0), \"Invalid sender address\");\n        require(\n            msg.sender == sender || _isValidMetaTx(sender) || _superOperators[msg.sender],\n            \"UNAUTHORIZED_APPROVE_FOR_ALL\"\n        );\n\n        _setApprovalForAll(sender, operator, approved);\n    }\n\n    /// @notice Set the approval for an operator to manage all the tokens of the sender.\n    /// @param operator The address receiving the approval.\n    /// @param approved The determination of the approval.\n    function setApprovalForAll(address operator, bool approved) external override {\n        _setApprovalForAll(msg.sender, operator, approved);\n    }\n\n    /// @notice Burns token `id`.\n    /// @param id The token which will be burnt.\n    function burn(uint256 id) external virtual {\n        _burn(msg.sender, _ownerOf(id), id);\n    }\n\n    /// @notice Burn token`id` from `from`.\n    /// @param from address whose token is to be burnt.\n    /// @param id The token which will be burnt.\n    function burnFrom(address from, uint256 id) external virtual {\n        require(from != address(0), \"NOT_FROM_ZEROADDRESS\");\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\n        require(\n            msg.sender == from ||\n                _isValidMetaTx(from) ||\n                (operatorEnabled && _operators[id] == msg.sender) ||\n                _superOperators[msg.sender] ||\n                _operatorsForAll[from][msg.sender],\n            \"UNAUTHORIZED_BURN\"\n        );\n        _burn(from, owner, id);\n    }\n\n    /// @notice Get the number of tokens owned by an address.\n    /// @param owner The address to look for.\n    /// @return The number of tokens owned by the address.\n    function balanceOf(address owner) external view override returns (uint256) {\n        require(owner != address(0), \"ZERO_ADDRESS_OWNER\");\n        return _numNFTPerAddress[owner];\n    }\n\n    /// @notice Get the owner of a token.\n    /// @param id The id of the token.\n    /// @return owner The address of the token owner.\n    function ownerOf(uint256 id) external view override returns (address owner) {\n        owner = _ownerOf(id);\n        require(owner != address(0), \"NONEXISTANT_TOKEN\");\n    }\n\n    /// @notice Get the approved operator for a specific token.\n    /// @param id The id of the token.\n    /// @return The address of the operator.\n    function getApproved(uint256 id) external view override returns (address) {\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\n        require(owner != address(0), \"NONEXISTENT_TOKEN\");\n        if (operatorEnabled) {\n            return _operators[id];\n        } else {\n            return address(0);\n        }\n    }\n\n    /// @notice Check if the sender approved the operator.\n    /// @param owner The address of the owner.\n    /// @param operator The address of the operator.\n    /// @return isOperator The status of the approval.\n    function isApprovedForAll(address owner, address operator) external view override returns (bool isOperator) {\n        return _operatorsForAll[owner][operator] || _superOperators[operator];\n    }\n\n    /// @notice Transfer a token between 2 addresses letting the receiver knows of the transfer.\n    /// @param from The sender of the token.\n    /// @param to The recipient of the token.\n    /// @param id The id of the token.\n    /// @param data Additional data.\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        bytes memory data\n    ) public override {\n        bool metaTx = _checkTransfer(from, to, id);\n        _transferFrom(from, to, id);\n        if (to.isContract()) {\n            require(_checkOnERC721Received(metaTx ? from : msg.sender, from, to, id, data), \"ERC721_TRANSFER_REJECTED\");\n        }\n    }\n\n    /// @notice Check if the contract supports an interface.\n    /// 0x01ffc9a7 is ERC-165.\n    /// 0x80ac58cd is ERC-721\n    /// @param id The id of the interface.\n    /// @return Whether the interface is supported.\n    function supportsInterface(bytes4 id) public pure virtual override returns (bool) {\n        return id == 0x01ffc9a7 || id == 0x80ac58cd;\n    }\n\n    /// @dev By overriding this function in an implementation which inherits this contract, you can enable versioned tokenIds without the extra overhead of writing to a new storage slot in _owners each time a version is incremented. See GameToken._storageId() for an example, where the storageId is the tokenId minus the version number.\n    /// !!! Caution !!! Overriding this function without taking appropriate care could lead to\n    /// ownerOf() returning an owner for non-existent tokens. Tests should be written to\n    /// guard against introducing this bug.\n    /// @param id The id of a token.\n    /// @return The id used for storage mappings.\n    function _storageId(uint256 id) internal view virtual returns (uint256) {\n        return id;\n    }\n\n    function _updateOwnerData(\n        uint256 id,\n        uint256 oldData,\n        address newOwner,\n        bool hasOperator\n    ) internal virtual {\n        if (hasOperator) {\n            _owners[_storageId(id)] = (oldData & NOT_ADDRESS) | OPERATOR_FLAG | uint256(newOwner);\n        } else {\n            _owners[_storageId(id)] = ((oldData & NOT_ADDRESS) & NOT_OPERATOR_FLAG) | uint256(newOwner);\n        }\n    }\n\n    function _transferFrom(\n        address from,\n        address to,\n        uint256 id\n    ) internal {\n        _numNFTPerAddress[from]--;\n        _numNFTPerAddress[to]++;\n        _updateOwnerData(id, _owners[_storageId(id)], to, false);\n        emit Transfer(from, to, id);\n    }\n\n    /// @dev See approveFor.\n    function _approveFor(\n        uint256 ownerData,\n        address operator,\n        uint256 id\n    ) internal {\n        address owner = address(ownerData);\n        if (operator == address(0)) {\n            _updateOwnerData(id, ownerData, owner, false);\n        } else {\n            _updateOwnerData(id, ownerData, owner, true);\n            _operators[id] = operator;\n        }\n        emit Approval(owner, operator, id);\n    }\n\n    /// @dev See batchTransferFrom.\n    function _batchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        bytes memory data,\n        bool safe\n    ) internal {\n        bool metaTx = _isValidMetaTx(from);\n        bool authorized =\n            msg.sender == from || metaTx || _superOperators[msg.sender] || _operatorsForAll[from][msg.sender];\n\n        require(from != address(0), \"NOT_FROM_ZEROADDRESS\");\n        require(to != address(0), \"NOT_TO_ZEROADDRESS\");\n\n        uint256 numTokens = ids.length;\n        for (uint256 i = 0; i < numTokens; i++) {\n            uint256 id = ids[i];\n            (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\n            require(owner == from, \"BATCHTRANSFERFROM_NOT_OWNER\");\n            require(authorized || (operatorEnabled && _operators[id] == msg.sender), \"NOT_AUTHORIZED\");\n            _updateOwnerData(id, _owners[_storageId(id)], to, false);\n            emit Transfer(from, to, id);\n        }\n        if (from != to) {\n            _numNFTPerAddress[from] -= numTokens;\n            _numNFTPerAddress[to] += numTokens;\n        }\n\n        if (to.isContract() && (safe || _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER))) {\n            require(\n                _checkOnERC721BatchReceived(metaTx ? from : msg.sender, from, to, ids, data),\n                \"ERC721_BATCH_TRANSFER_REJECTED\"\n            );\n        }\n    }\n\n    /// @dev See setApprovalForAll.\n    function _setApprovalForAll(\n        address sender,\n        address operator,\n        bool approved\n    ) internal {\n        require(!_superOperators[operator], \"INVALID_APPROVAL_CHANGE\");\n        _operatorsForAll[sender][operator] = approved;\n\n        emit ApprovalForAll(sender, operator, approved);\n    }\n\n    /// @dev See burn.\n    function _burn(\n        address from,\n        address owner,\n        uint256 id\n    ) internal {\n        require(from == owner, \"NOT_OWNER\");\n        uint256 storageId = _storageId(id);\n        _owners[storageId] = (_owners[storageId] & NOT_OPERATOR_FLAG) | BURNED_FLAG; // record as non owner but keep track of last owner\n        _numNFTPerAddress[from]--;\n        emit Transfer(from, address(0), id);\n    }\n\n    /// @dev Check if receiving contract accepts erc721 transfers.\n    /// @param operator The address of the operator.\n    /// @param from The from address, may be different from msg.sender.\n    /// @param to The adddress we want to transfer to.\n    /// @param tokenId The id of the token we would like to transfer.\n    /// @param _data Any additional data to send with the transfer.\n    /// @return Whether the expected value of 0x150b7a02 is returned.\n    function _checkOnERC721Received(\n        address operator,\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal returns (bool) {\n        bytes4 retval = IERC721Receiver(to).onERC721Received(operator, from, tokenId, _data);\n        return (retval == _ERC721_RECEIVED);\n    }\n\n    /// @dev Check if receiving contract accepts erc721 batch transfers.\n    /// @param operator The address of the operator.\n    /// @param from The from address, may be different from msg.sender.\n    /// @param to The adddress we want to transfer to.\n    /// @param ids The ids of the tokens we would like to transfer.\n    /// @param _data Any additional data to send with the transfer.\n    /// @return Whether the expected value of 0x4b808c46 is returned.\n    function _checkOnERC721BatchReceived(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        bytes memory _data\n    ) internal returns (bool) {\n        bytes4 retval = IERC721MandatoryTokenReceiver(to).onERC721BatchReceived(operator, from, ids, _data);\n        return (retval == _ERC721_BATCH_RECEIVED);\n    }\n\n    /// @dev See ownerOf\n    function _ownerOf(uint256 id) internal view virtual returns (address) {\n        uint256 data = _owners[_storageId(id)];\n        if ((data & BURNED_FLAG) == BURNED_FLAG) {\n            return address(0);\n        }\n        return address(data);\n    }\n\n    /// @dev Get the owner and operatorEnabled status of a token.\n    /// @param id The token to query.\n    /// @return owner The owner of the token.\n    /// @return operatorEnabled Whether or not operators are enabled for this token.\n    function _ownerAndOperatorEnabledOf(uint256 id) internal view returns (address owner, bool operatorEnabled) {\n        uint256 data = _owners[_storageId(id)];\n        if ((data & BURNED_FLAG) == BURNED_FLAG) {\n            owner = address(0);\n        } else {\n            owner = address(data);\n        }\n        operatorEnabled = (data & OPERATOR_FLAG) == OPERATOR_FLAG;\n    }\n\n    /// @dev Check whether a transfer is a meta Transaction or not.\n    /// @param from The address who initiated the transfer (may differ from msg.sender).\n    /// @param to The address recieving the token.\n    /// @param id The token being transferred.\n    /// @return isMetaTx Whether or not the transaction is a MetaTx.\n    function _checkTransfer(\n        address from,\n        address to,\n        uint256 id\n    ) internal view returns (bool isMetaTx) {\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\n        require(owner != address(0), \"NONEXISTENT_TOKEN\");\n        require(owner == from, \"CHECKTRANSFER_NOT_OWNER\");\n        require(to != address(0), \"NOT_TO_ZEROADDRESS\");\n        isMetaTx = _isValidMetaTx(from);\n        if (msg.sender != from && !isMetaTx) {\n            require(\n                _superOperators[msg.sender] ||\n                    _operatorsForAll[from][msg.sender] ||\n                    (operatorEnabled && _operators[id] == msg.sender),\n                \"UNAUTHORIZED_TRANSFER\"\n            );\n        }\n    }\n\n    /// @dev Check if there was enough gas.\n    /// @param _contract The address of the contract to check.\n    /// @param interfaceId The id of the interface we want to test.\n    /// @return Whether or not this check succeeded.\n    function _checkInterfaceWith10000Gas(address _contract, bytes4 interfaceId) internal view returns (bool) {\n        bool success;\n        bool result;\n        bytes memory callData = abi.encodeWithSelector(ERC165ID, interfaceId);\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let call_ptr := add(0x20, callData)\n            let call_size := mload(callData)\n            let output := mload(0x40) // Find empty storage location using \"free memory pointer\"\n            mstore(output, 0x0)\n            success := staticcall(10000, _contract, call_ptr, call_size, output, 0x20) // 32 bytes\n            result := mload(output)\n        }\n        // (10000 / 63) \"not enough for supportsInterface(...)\" // consume all gas, so caller can potentially know that there was not enough gas\n        assert(gasleft() > 158);\n        return success && result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\n}\n"
    },
    "src/solc_0.7/common/Interfaces/IERC721MandatoryTokenReceiver.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\n/// @dev Note: The ERC-165 identifier for this interface is 0x5e8bf644.\ninterface IERC721MandatoryTokenReceiver {\n    function onERC721BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        bytes calldata data\n    ) external returns (bytes4); // needs to return 0x4b808c46\n\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4); // needs to return 0x150b7a02\n\n    // needs to implements EIP-165\n    // function supportsInterface(bytes4 interfaceId)\n    //     external\n    //     view\n    //     returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\nimport \"../../introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\n      *\n      * Requirements:\n      *\n      * - `from` cannot be the zero address.\n      * - `to` cannot be the zero address.\n      * - `tokenId` token must exist and be owned by `from`.\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n      *\n      * Emits a {Transfer} event.\n      */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n}\n"
    },
    "@openzeppelin/contracts/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../introspection/IERC165.sol\";\n\n/**\n * _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n\n    /**\n        @dev Handles the receipt of a single ERC1155 token type. This function is\n        called at the end of a `safeTransferFrom` after the balance has been updated.\n        To accept the transfer, this must return\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n        (i.e. 0xf23a6e61, or its own function selector).\n        @param operator The address which initiated the transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param id The ID of the token being transferred\n        @param value The amount of tokens being transferred\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n    */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    )\n        external\n        returns(bytes4);\n\n    /**\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\n        is called at the end of a `safeBatchTransferFrom` after the balances have\n        been updated. To accept the transfer(s), this must return\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n        (i.e. 0xbc197c81, or its own function selector).\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n    */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    )\n        external\n        returns(bytes4);\n}\n"
    },
    "src/solc_0.7/claims/MultiGiveaway/MultiGiveaway.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\nimport \"./ClaimERC1155ERC721ERC20.sol\";\nimport \"../../common/BaseWithStorage/WithAdmin.sol\";\n\n/// @title MultiGiveaway contract.\n/// @notice This contract manages claims for multiple token types.\ncontract MultiGiveaway is WithAdmin, ClaimERC1155ERC721ERC20 {\n    ///////////////////////////////  Data //////////////////////////////\n\n    bytes4 private constant ERC1155_RECEIVED = 0xf23a6e61;\n    bytes4 private constant ERC1155_BATCH_RECEIVED = 0xbc197c81;\n    bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\n    bytes4 internal constant ERC721_BATCH_RECEIVED = 0x4b808c46;\n\n    mapping(address => mapping(bytes32 => bool)) public claimed;\n    mapping(bytes32 => uint256) internal _expiryTime;\n\n    ///////////////////////////////  Events //////////////////////////////\n\n    event NewGiveaway(bytes32 merkleRoot, uint256 expiryTime);\n\n    ///////////////////////////////  Constructor /////////////////////////\n\n    constructor(address admin) {\n        _admin = admin;\n    }\n\n    ///////////////////////////////  Functions ///////////////////////////\n\n    /// @notice Function to add a new giveaway.\n    /// @param merkleRoot The merkle root hash of the claim data.\n    /// @param expiryTime The expiry time for the giveaway.\n    function addNewGiveaway(bytes32 merkleRoot, uint256 expiryTime) external onlyAdmin {\n        _expiryTime[merkleRoot] = expiryTime;\n        emit NewGiveaway(merkleRoot, expiryTime);\n    }\n\n    /// @notice Function to check which giveaways have been claimed by a particular user.\n    /// @param user The user (intended token destination) address.\n    /// @param rootHashes The array of giveaway root hashes to check.\n    /// @return claimedGiveaways The array of bools confirming whether or not the giveaways relating to the root hashes provided have been claimed.\n    function getClaimedStatus(address user, bytes32[] calldata rootHashes) external view returns (bool[] memory) {\n        bool[] memory claimedGiveaways = new bool[](rootHashes.length);\n        for (uint256 i = 0; i < rootHashes.length; i++) {\n            claimedGiveaways[i] = claimed[user][rootHashes[i]];\n        }\n        return claimedGiveaways;\n    }\n\n    /// @notice Function to permit the claiming of multiple tokens from multiple giveaways to a reserved address.\n    /// @param claims The array of claim structs, each containing a destination address, the giveaway items to be claimed and an optional salt param.\n    /// @param proofs The proofs submitted for verification.\n    function claimMultipleTokensFromMultipleMerkleTree(\n        bytes32[] calldata rootHashes,\n        Claim[] memory claims,\n        bytes32[][] calldata proofs\n    ) external {\n        require(claims.length == rootHashes.length, \"INVALID_INPUT\");\n        require(claims.length == proofs.length, \"INVALID_INPUT\");\n        for (uint256 i = 0; i < rootHashes.length; i++) {\n            claimMultipleTokens(rootHashes[i], claims[i], proofs[i]);\n        }\n    }\n\n    /// @dev Public function used to perform validity checks and progress to claim multiple token types in one claim.\n    /// @param merkleRoot The merkle root hash for the specific set of items being claimed.\n    /// @param claim The claim struct containing the destination address, all items to be claimed and optional salt param.\n    /// @param proof The proof provided by the user performing the claim function.\n    function claimMultipleTokens(\n        bytes32 merkleRoot,\n        Claim memory claim,\n        bytes32[] calldata proof\n    ) public {\n        uint256 giveawayExpiryTime = _expiryTime[merkleRoot];\n        require(claim.to != address(0), \"INVALID_TO_ZERO_ADDRESS\");\n        require(claim.to != address(this), \"DESTINATION_MULTIGIVEAWAY_CONTRACT\");\n        require(giveawayExpiryTime != 0, \"GIVEAWAY_DOES_NOT_EXIST\");\n        require(block.timestamp < giveawayExpiryTime, \"CLAIM_PERIOD_IS_OVER\");\n        require(claimed[claim.to][merkleRoot] == false, \"DESTINATION_ALREADY_CLAIMED\");\n        claimed[claim.to][merkleRoot] = true;\n        _claimERC1155ERC721ERC20(merkleRoot, claim, proof);\n    }\n\n    function onERC721Received(\n        address, /*operator*/\n        address, /*from*/\n        uint256, /*id*/\n        bytes calldata /*data*/\n    ) external pure returns (bytes4) {\n        return ERC721_RECEIVED;\n    }\n\n    function onERC721BatchReceived(\n        address, /*operator*/\n        address, /*from*/\n        uint256[] calldata, /*ids*/\n        bytes calldata /*data*/\n    ) external pure returns (bytes4) {\n        return ERC721_BATCH_RECEIVED;\n    }\n\n    function onERC1155Received(\n        address, /*operator*/\n        address, /*from*/\n        uint256, /*id*/\n        uint256, /*value*/\n        bytes calldata /*data*/\n    ) external pure returns (bytes4) {\n        return ERC1155_RECEIVED;\n    }\n\n    function onERC1155BatchReceived(\n        address, /*operator*/\n        address, /*from*/\n        uint256[] calldata, /*ids*/\n        uint256[] calldata, /*values*/\n        bytes calldata /*data*/\n    ) external pure returns (bytes4) {\n        return ERC1155_BATCH_RECEIVED;\n    }\n}\n"
    },
    "src/solc_0.7/claims/MultiGiveaway/ClaimERC1155ERC721ERC20.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"../../common/Interfaces/IERC721Extended.sol\";\nimport \"../../common/Libraries/Verify.sol\";\n\ncontract ClaimERC1155ERC721ERC20 {\n    ///////////////////////////////  Libs //////////////////////////////\n\n    using SafeERC20 for IERC20;\n\n    ///////////////////////////////  Data //////////////////////////////\n\n    struct Claim {\n        address to;\n        ERC1155Claim[] erc1155;\n        ERC721Claim[] erc721;\n        ERC20Claim erc20;\n        bytes32 salt;\n    }\n\n    struct ERC1155Claim {\n        uint256[] ids;\n        uint256[] values;\n        address contractAddress;\n    }\n\n    struct ERC721Claim {\n        uint256[] ids;\n        address contractAddress;\n    }\n\n    struct ERC20Claim {\n        uint256[] amounts;\n        address[] contractAddresses;\n    }\n\n    ///////////////////////////////  Events //////////////////////////////\n\n    /// @dev Emits when a successful claim occurs.\n    /// @param to The destination address for the claimed ERC1155, ERC721 and ERC20 tokens.\n    /// @param erc1155 The array of ERC1155Claim structs containing the ids, values and ERC1155 contract address.\n    /// @param erc721 The array of ERC721Claim structs containing the ids and ERC721 contract address.\n    /// @param erc20 The ERC20Claim struct containing the amounts and ERC20 contract addresses.\n    event ClaimedMultipleTokens(address to, ERC1155Claim[] erc1155, ERC721Claim[] erc721, ERC20Claim erc20);\n\n    ///////////////////////////////  Functions ///////////////////////////\n\n    /// @dev Internal function used to claim multiple token types in one claim.\n    /// @param merkleRoot The merkle root hash for the specific set of items being claimed.\n    /// @param claim The claim struct containing the destination address, all items to be claimed and optional salt param.\n    /// @param proof The proof provided by the user performing the claim function.\n    function _claimERC1155ERC721ERC20(\n        bytes32 merkleRoot,\n        Claim memory claim,\n        bytes32[] calldata proof\n    ) internal {\n        _checkValidity(merkleRoot, claim, proof);\n        for (uint256 i = 0; i < claim.erc1155.length; i++) {\n            require(claim.erc1155[i].ids.length == claim.erc1155[i].values.length, \"INVALID_INPUT\");\n            _transferERC1155(claim.to, claim.erc1155[i].ids, claim.erc1155[i].values, claim.erc1155[i].contractAddress);\n        }\n        for (uint256 i = 0; i < claim.erc721.length; i++) {\n            _transferERC721(claim.to, claim.erc721[i].ids, claim.erc721[i].contractAddress);\n        }\n        if (claim.erc20.amounts.length != 0) {\n            require(claim.erc20.amounts.length == claim.erc20.contractAddresses.length, \"INVALID_INPUT\");\n            _transferERC20(claim.to, claim.erc20.amounts, claim.erc20.contractAddresses);\n        }\n        emit ClaimedMultipleTokens(claim.to, claim.erc1155, claim.erc721, claim.erc20);\n    }\n\n    /// @dev Private function used to check the validity of a specific claim.\n    /// @param merkleRoot The merkle root hash for the specific set of items being claimed.\n    /// @param claim The claim struct containing the destination address, all items to be claimed and optional salt param.\n    /// @param proof The proof provided by the user performing the claim function.\n    function _checkValidity(\n        bytes32 merkleRoot,\n        Claim memory claim,\n        bytes32[] memory proof\n    ) private pure {\n        bytes32 leaf = _generateClaimHash(claim);\n        require(Verify.doesComputedHashMatchMerkleRootHash(merkleRoot, proof, leaf), \"INVALID_CLAIM\");\n    }\n\n    /// @dev Private function used to generate a hash from an encoded claim.\n    /// @param claim The claim struct.\n    function _generateClaimHash(Claim memory claim) private pure returns (bytes32) {\n        return keccak256(abi.encode(claim));\n    }\n\n    /// @dev Private function used to transfer the ERC1155 tokens specified in a specific claim.\n    /// @param to The destination address for the claimed tokens.\n    /// @param ids The array of ERC1155 ids.\n    /// @param values The amount of ERC1155 tokens of each id to be transferred.\n    /// @param contractAddress The ERC1155 token contract address.\n    function _transferERC1155(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values,\n        address contractAddress\n    ) private {\n        require(contractAddress != address(0), \"INVALID_CONTRACT_ZERO_ADDRESS\");\n        IERC1155(contractAddress).safeBatchTransferFrom(address(this), to, ids, values, \"\");\n    }\n\n    /// @dev Private function used to transfer the ERC721tokens specified in a specific claim.\n    /// @param to The destination address for the claimed tokens.\n    /// @param ids The array of ERC721 ids.\n    /// @param contractAddress The ERC721 token contract address.\n    function _transferERC721(\n        address to,\n        uint256[] memory ids,\n        address contractAddress\n    ) private {\n        require(contractAddress != address(0), \"INVALID_CONTRACT_ZERO_ADDRESS\");\n        IERC721Extended(contractAddress).safeBatchTransferFrom(address(this), to, ids, \"\");\n    }\n\n    /// @dev Private function used to transfer the ERC20 tokens specified in a specific claim.\n    /// @param to The destination address for the claimed tokens.\n    /// @param amounts The array of amounts of ERC20 tokens to be transferred.\n    /// @param contractAddresses The array of ERC20 token contract addresses.\n    function _transferERC20(\n        address to,\n        uint256[] memory amounts,\n        address[] memory contractAddresses\n    ) private {\n        for (uint256 i = 0; i < amounts.length; i++) {\n            address erc20ContractAddress = contractAddresses[i];\n            uint256 erc20Amount = amounts[i];\n            require(erc20ContractAddress != address(0), \"INVALID_CONTRACT_ZERO_ADDRESS\");\n            IERC20(erc20ContractAddress).safeTransferFrom(address(this), to, erc20Amount);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\nimport \"../../introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "src/solc_0.7/common/Interfaces/IERC721Extended.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\ninterface IERC721Extended is IERC721 {\n    function approveFor(\n        address sender,\n        address operator,\n        uint256 id\n    ) external;\n\n    function batchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        bytes calldata data\n    ) external;\n\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        bytes calldata data\n    ) external;\n\n    function setApprovalForAllFor(\n        address sender,\n        address operator,\n        bool approved\n    ) external;\n\n    function burn(uint256 id) external;\n\n    function burnFrom(address from, uint256 id) external;\n}\n"
    },
    "src/solc_0.7/common/Libraries/Verify.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\n/**\n * @title Verify\n * @dev Merkle root comparison function.\n */\nlibrary Verify {\n    /// @dev Check if the computedHash == comparisonHash.\n    /// @param comparisonHash The merkle root hash passed to the function.\n    /// @param proof The proof provided by the user.\n    /// @param leaf The generated hash.\n    /// @return Whether the computedHash == comparisonHash.\n    function doesComputedHashMatchMerkleRootHash(\n        bytes32 comparisonHash,\n        bytes32[] memory proof,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n\n            if (computedHash < proofElement) {\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n            } else {\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n            }\n        }\n        return computedHash == comparisonHash;\n    }\n}\n"
    },
    "src/solc_0.7/claims/AssetGiveaway/AssetGiveaway.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\nimport \"./ClaimERC1155.sol\";\nimport \"../../common/BaseWithStorage/WithAdmin.sol\";\n\n/// @title AssetGiveaway contract.\n/// @notice This contract manages ERC1155 claims.\ncontract AssetGiveaway is WithAdmin, ClaimERC1155 {\n    bytes4 private constant ERC1155_RECEIVED = 0xf23a6e61;\n    bytes4 private constant ERC1155_BATCH_RECEIVED = 0xbc197c81;\n    uint256 internal immutable _expiryTime;\n    mapping(address => bool) public claimed;\n\n    constructor(\n        address asset,\n        address admin,\n        bytes32 merkleRoot,\n        address assetsHolder,\n        uint256 expiryTime\n    ) ClaimERC1155(IERC1155(asset), assetsHolder) {\n        _admin = admin;\n        _merkleRoot = merkleRoot;\n        _expiryTime = expiryTime;\n    }\n\n    /// @notice Function to set the merkle root hash for the asset data, if it is 0.\n    /// @param merkleRoot The merkle root hash of the asset data.\n    function setMerkleRoot(bytes32 merkleRoot) external onlyAdmin {\n        require(_merkleRoot == 0, \"MERKLE_ROOT_ALREADY_SET\");\n        _merkleRoot = merkleRoot;\n    }\n\n    /// @notice Function to permit the claiming of an asset to a reserved address.\n    /// @param to The intended recipient (reserved address) of the ERC1155 tokens.\n    /// @param assetIds The array of IDs of the asset tokens.\n    /// @param assetValues The amounts of each token ID to transfer.\n    /// @param proof The proof submitted for verification.\n    /// @param salt The salt submitted for verification.\n    function claimAssets(\n        address to,\n        uint256[] calldata assetIds,\n        uint256[] calldata assetValues,\n        bytes32[] calldata proof,\n        bytes32 salt\n    ) external {\n        require(block.timestamp < _expiryTime, \"CLAIM_PERIOD_IS_OVER\");\n        require(to != address(0), \"INVALID_TO_ZERO_ADDRESS\");\n        require(claimed[to] == false, \"DESTINATION_ALREADY_CLAIMED\");\n        claimed[to] = true;\n        _claimERC1155(to, assetIds, assetValues, proof, salt);\n    }\n\n    function onERC1155Received(\n        address, /*operator*/\n        address, /*from*/\n        uint256, /*id*/\n        uint256, /*value*/\n        bytes calldata /*data*/\n    ) external pure returns (bytes4) {\n        return ERC1155_RECEIVED;\n    }\n\n    function onERC1155BatchReceived(\n        address, /*operator*/\n        address, /*from*/\n        uint256[] calldata, /*ids*/\n        uint256[] calldata, /*values*/\n        bytes calldata /*data*/\n    ) external pure returns (bytes4) {\n        return ERC1155_BATCH_RECEIVED;\n    }\n}\n"
    },
    "src/solc_0.7/claims/AssetGiveaway/ClaimERC1155.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\n\ncontract ClaimERC1155 {\n    bytes32 internal _merkleRoot;\n    IERC1155 internal immutable _asset;\n    address internal immutable _assetsHolder;\n    event ClaimedAssets(address to, uint256[] assetIds, uint256[] assetValues);\n\n    constructor(IERC1155 asset, address assetsHolder) {\n        _asset = asset;\n        if (assetsHolder == address(0)) {\n            assetsHolder = address(this);\n        }\n        _assetsHolder = assetsHolder;\n    }\n\n    /// @dev See for example AssetGiveaway.sol claimAssets.\n    function _claimERC1155(\n        address to,\n        uint256[] calldata assetIds,\n        uint256[] calldata assetValues,\n        bytes32[] calldata proof,\n        bytes32 salt\n    ) internal {\n        _checkValidity(to, assetIds, assetValues, proof, salt);\n        _sendAssets(to, assetIds, assetValues);\n        emit ClaimedAssets(to, assetIds, assetValues);\n    }\n\n    function _checkValidity(\n        address to,\n        uint256[] memory assetIds,\n        uint256[] memory assetValues,\n        bytes32[] memory proof,\n        bytes32 salt\n    ) internal view {\n        require(assetIds.length == assetValues.length, \"INVALID_INPUT\");\n        bytes32 leaf = _generateClaimHash(to, assetIds, assetValues, salt);\n        require(_verify(proof, leaf), \"INVALID_CLAIM\");\n    }\n\n    function _generateClaimHash(\n        address to,\n        uint256[] memory assetIds,\n        uint256[] memory assetValues,\n        bytes32 salt\n    ) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(to, assetIds, assetValues, salt));\n    }\n\n    function _verify(bytes32[] memory proof, bytes32 leaf) internal view returns (bool) {\n        bytes32 computedHash = leaf;\n\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n\n            if (computedHash < proofElement) {\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n            } else {\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n            }\n        }\n\n        return computedHash == _merkleRoot;\n    }\n\n    function _sendAssets(\n        address to,\n        uint256[] memory assetIds,\n        uint256[] memory assetValues\n    ) internal {\n        _asset.safeBatchTransferFrom(_assetsHolder, to, assetIds, assetValues, \"\");\n    }\n}\n"
    },
    "src/solc_0.7/Utils/Batch.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\ncontract Batch {\n    using Address for address;\n\n    struct Execution {\n        address target;\n        bytes callData;\n    }\n\n    struct ExecutionWithETH {\n        address target;\n        bytes callData;\n        uint256 value;\n    }\n\n    struct SingleTargetExecutionWithETH {\n        bytes callData;\n        uint256 value;\n    }\n\n    address public immutable executor;\n\n    constructor(address _executor) {\n        executor = _executor;\n    }\n\n    modifier onlyExecutor() {\n        require(msg.sender == executor, \"NOT_AUTHORIZED\");\n        _;\n    }\n\n    function atomicBatchWithETH(ExecutionWithETH[] memory executions) external payable onlyExecutor {\n        for (uint256 i = 0; i < executions.length; i++) {\n            executions[i].target.functionCallWithValue(executions[i].callData, executions[i].value);\n        }\n    }\n\n    function nonAtomicBatchWithETH(ExecutionWithETH[] memory executions) external payable onlyExecutor {\n        for (uint256 i = 0; i < executions.length; i++) {\n            _call(executions[i].target, executions[i].callData, executions[i].value);\n        }\n    }\n\n    function atomicBatch(Execution[] memory executions) external onlyExecutor {\n        for (uint256 i = 0; i < executions.length; i++) {\n            executions[i].target.functionCall(executions[i].callData);\n        }\n    }\n\n    function nonAtomicBatch(Execution[] memory executions) external onlyExecutor {\n        for (uint256 i = 0; i < executions.length; i++) {\n            _call(executions[i].target, executions[i].callData, 0);\n        }\n    }\n\n    function singleTargetAtomicBatchWithETH(address target, SingleTargetExecutionWithETH[] memory executions)\n        external\n        payable\n        onlyExecutor\n    {\n        for (uint256 i = 0; i < executions.length; i++) {\n            target.functionCallWithValue(executions[i].callData, executions[i].value);\n        }\n    }\n\n    function singleTargetNonAtomicBatchWithETH(address target, SingleTargetExecutionWithETH[] memory executions)\n        external\n        payable\n        onlyExecutor\n    {\n        for (uint256 i = 0; i < executions.length; i++) {\n            _call(target, executions[i].callData, executions[i].value);\n        }\n    }\n\n    function singleTargetAtomicBatch(address target, bytes[] memory callDatas) external onlyExecutor {\n        for (uint256 i = 0; i < callDatas.length; i++) {\n            target.functionCall(callDatas[i]);\n        }\n    }\n\n    function singleTargetNonAtomicBatch(address target, bytes[] memory callDatas) external onlyExecutor {\n        for (uint256 i = 0; i < callDatas.length; i++) {\n            _call(target, callDatas[i], 0);\n        }\n    }\n\n    function _call(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bool) {\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, ) = target.call{value: value}(data);\n        return success;\n    }\n\n    // ----------------------------------------------------------------------------------------------------\n    // TOKEN RECEPTION\n    // ----------------------------------------------------------------------------------------------------\n\n    // ERC1155\n    bytes4 private constant ERC1155_IS_RECEIVER = 0x4e2312e0;\n    bytes4 private constant ERC1155_RECEIVED = 0xf23a6e61;\n    bytes4 private constant ERC1155_BATCH_RECEIVED = 0xbc197c81;\n\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes calldata\n    ) external pure returns (bytes4) {\n        return ERC1155_RECEIVED;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] calldata,\n        uint256[] calldata,\n        bytes calldata\n    ) external pure returns (bytes4) {\n        return ERC1155_BATCH_RECEIVED;\n    }\n\n    // ERC721\n\n    bytes4 private constant ERC721_IS_RECEIVER = 0x150b7a02;\n    bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\n\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) external pure returns (bytes4) {\n        return ERC721_RECEIVED;\n    }\n\n    // ERC165\n    function supportsInterface(bytes4 _interfaceId) external pure returns (bool) {\n        return _interfaceId == 0x01ffc9a7 || _interfaceId == ERC1155_IS_RECEIVER || _interfaceId == ERC721_IS_RECEIVER;\n    }\n}\n"
    },
    "src/solc_0.7/catalyst/AssetMinter.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"./interfaces/IAssetAttributesRegistry.sol\";\nimport \"./interfaces/IAssetMinter.sol\";\nimport \"./GemsCatalystsRegistry.sol\";\nimport \"../common/Interfaces/IERC20Extended.sol\";\nimport \"../common/Interfaces/IAssetToken.sol\";\nimport \"../common/BaseWithStorage/WithMetaTransaction.sol\";\n\n/// @notice Allow to upgrade Asset with Catalyst, Gems and Sand, giving the assets attributes through AssetAttributeRegistry\ncontract AssetMinter is WithMetaTransaction, IAssetMinter {\n    using SafeMath for uint256;\n\n    uint256 private constant GEM_UNIT = 1000000000000000000;\n    uint256 private constant CATALYST_UNIT = 1000000000000000000;\n\n    IAssetAttributesRegistry internal immutable _registry;\n    IAssetToken internal immutable _asset;\n    GemsCatalystsRegistry internal immutable _gemsCatalystsRegistry;\n\n    /// @notice AssetMinter depends on\n    /// @param registry: AssetAttributesRegistry for recording catalyst and gems used\n    /// @param asset: Asset Token Contract (dual ERC1155/ERC721)\n    /// @param gemsCatalystsRegistry: that track the canonical catalyst and gems and provide batch burning facility\n    constructor(\n        IAssetAttributesRegistry registry,\n        IAssetToken asset,\n        GemsCatalystsRegistry gemsCatalystsRegistry,\n        address admin\n    ) {\n        _registry = registry;\n        _asset = asset;\n        _gemsCatalystsRegistry = gemsCatalystsRegistry;\n        _admin = admin;\n    }\n\n    /// @notice mint one Asset token.\n    /// @param from address creating the Asset, need to be the tx sender or meta tx signer.\n    /// @param packId unused packId that will let you predict the resulting tokenId.\n    /// @param metadataHash cidv1 ipfs hash of the folder where 0.json file contains the metadata.\n    /// @param catalystId Id of the Catalyst ERC20 token to burn (1, 2, 3 or 4).\n    /// @param gemIds list of gem ids to burn in the catalyst.\n    /// @param quantity asset supply to mint\n    /// @param rarity rarity power of the token to mint.\n    /// @param to destination address receiving the minted tokens.\n    /// @param data extra data.\n    /// @return assetId The new token Id.\n    function mint(\n        address from,\n        uint40 packId,\n        bytes32 metadataHash,\n        uint16 catalystId,\n        uint16[] calldata gemIds,\n        uint32 quantity,\n        uint8 rarity,\n        address to,\n        bytes calldata data\n    ) external override returns (uint256 assetId) {\n        require(to != address(0), \"INVALID_TO_ZERO_ADDRESS\");\n        _checkAuthorization(from);\n        assetId = _asset.mint(from, packId, metadataHash, quantity, rarity, to, data);\n        if (catalystId != 0) {\n            _setSingleCatalyst(from, assetId, quantity, catalystId, gemIds);\n        }\n        return assetId;\n    }\n\n    /// @notice mint multiple Asset tokens.\n    /// @param from address creating the Asset, need to be the tx sender or meta tx signer.\n    /// @param packId unused packId that will let you predict the resulting tokenId.\n    /// @param metadataHash cidv1 ipfs hash of the folder where 0.json file contains the metadata.\n    /// @param gemsQuantities quantities of gems to be used for each id in order, ie: [0, 1, 0, 2, 1, 0]\n    /// would be gemId1=1, gemId2=0, gemId3=2, gemId4=1, gemId5=0\n    /// @param catalystsQuantities quantities of catalyst to be used for each id in order, ie: [0, 1, 0, 3, 0]\n    /// would be catalystId1=1, catalystId2=0, catalystId3=3, catalystId4=0,\n    /// @param assets contains the data to associate catalyst and gems to the assets.\n    /// @param to destination address receiving the minted tokens.\n    /// @param data extra data.\n    function mintMultiple(\n        address from,\n        uint40 packId,\n        bytes32 metadataHash,\n        uint256[] memory gemsQuantities,\n        uint256[] memory catalystsQuantities,\n        AssetData[] memory assets,\n        address to,\n        bytes memory data\n    ) public override returns (uint256[] memory assetIds) {\n        require(assets.length != 0, \"INVALID_0_ASSETS\");\n        require(to != address(0), \"INVALID_TO_ZERO_ADDRESS\");\n        _checkAuthorization(from);\n        uint256[] memory supplies = _handleMultipleAssetRequirements(from, gemsQuantities, catalystsQuantities, assets);\n        assetIds = _asset.mintMultiple(from, packId, metadataHash, supplies, \"\", to, data);\n        for (uint256 i = 0; i < assetIds.length; i++) {\n            if (assets[i].catalystId != 0) {\n                _registry.setCatalyst(assetIds[i], assets[i].catalystId, assets[i].gemIds);\n            }\n        }\n        return assetIds;\n    }\n\n    /// @dev Handler for edaling with assets when minting multiple at once.\n    /// @param from The original address that signed the transaction.\n    /// @param gemsQuantities An array listing the quantity of each type of gem.\n    /// @param catalystsQuantities An array listing the quantity of each type of catalyst.\n    /// @param assets An array of AssetData structs to define how the total gems and catalysts are to be allocated.\n    /// @return supplies An array of the quantities for each asset being minted.\n    function _handleMultipleAssetRequirements(\n        address from,\n        uint256[] memory gemsQuantities,\n        uint256[] memory catalystsQuantities,\n        AssetData[] memory assets\n    ) internal returns (uint256[] memory supplies) {\n        _batchBurnCatalysts(from, catalystsQuantities);\n        _batchBurnGems(from, gemsQuantities);\n\n        supplies = new uint256[](assets.length);\n\n        for (uint256 i = 0; i < assets.length; i++) {\n            if (assets[i].catalystId != 0) {\n                require(catalystsQuantities[assets[i].catalystId] != 0, \"INVALID_CATALYST_NOT_ENOUGH\");\n                uint16 maxGems = _gemsCatalystsRegistry.getMaxGems(assets[i].catalystId);\n                require(assets[i].gemIds.length <= maxGems, \"INVALID_GEMS_TOO_MANY\");\n                catalystsQuantities[assets[i].catalystId] = catalystsQuantities[assets[i].catalystId].sub(1);\n                gemsQuantities = _checkGemsQuantities(gemsQuantities, assets[i].gemIds);\n            }\n            supplies[i] = assets[i].quantity;\n        }\n    }\n\n    /// @dev Validate the quantities of each type of gem passed.\n    /// @param gemsQuantities An array of the quantities of each gem type to use for minting assets.\n    /// @param gemIds An array of gemIds to use for minting assets.\n    /// @return An array of quantities for aech gem type.\n    function _checkGemsQuantities(uint256[] memory gemsQuantities, uint16[] memory gemIds)\n        internal\n        pure\n        returns (uint256[] memory)\n    {\n        for (uint256 i = 0; i < gemIds.length; i++) {\n            require(gemsQuantities[gemIds[i]] != 0, \"INVALID_GEMS_NOT_ENOUGH\");\n            gemsQuantities[gemIds[i]] = gemsQuantities[gemIds[i]].sub(1);\n        }\n        return gemsQuantities;\n    }\n\n    /// @dev Burn a batch of catalysts in one tx.\n    /// @param from The original address that signed the tx.\n    /// @param catalystsQuantities An array of quantities for each type of catalyst to burn.\n    function _batchBurnCatalysts(address from, uint256[] memory catalystsQuantities) internal {\n        uint16[] memory ids = new uint16[](catalystsQuantities.length);\n        for (uint16 i = 0; i < ids.length; i++) {\n            ids[i] = i;\n        }\n        _gemsCatalystsRegistry.batchBurnCatalysts(from, ids, scaleQuantities(catalystsQuantities));\n    }\n\n    /// @dev Burn a batch of gems in one tx.\n    /// @param from The original address that signed the tx.\n    /// @param gemsQuantities An array of quantities for each type of gems to burn.\n    function _batchBurnGems(address from, uint256[] memory gemsQuantities) internal {\n        uint16[] memory ids = new uint16[](gemsQuantities.length);\n        for (uint16 i = 0; i < ids.length; i++) {\n            ids[i] = i;\n        }\n        _gemsCatalystsRegistry.batchBurnGems(from, ids, scaleQuantities(gemsQuantities));\n    }\n\n    /// @dev Set a single catalyst for an asset.\n    /// @param from The original address that signed the tx.\n    /// @param assetId The id of the asset to set a catalyst for.\n    /// @param supply The total number of catalysts to be set.\n    /// @param catalystId The type of catalyst to set.\n    /// @param gemIds An array of gems to be embedded.\n    function _setSingleCatalyst(\n        address from,\n        uint256 assetId,\n        uint32 supply,\n        uint16 catalystId,\n        uint16[] memory gemIds\n    ) internal {\n        _burnCatalyst(from, catalystId, supply);\n        _burnGems(from, gemIds, supply);\n\n        _registry.setCatalyst(assetId, catalystId, gemIds);\n    }\n\n    /// @dev Burn an array of gems.\n    /// @param from The original signer of the tx.\n    /// @param gemIds The array of gems to burn.\n    /// @param numTimes Amount of gems to burn.\n    function _burnGems(\n        address from,\n        uint16[] memory gemIds,\n        uint32 numTimes\n    ) internal {\n        _gemsCatalystsRegistry.burnDifferentGems(from, gemIds, numTimes * GEM_UNIT);\n    }\n\n    /// @dev Burn a single type of catalyst.\n    /// @param from The original signer of the tx.\n    /// @param catalystId The type of catalyst to burn.\n    /// @param numTimes Amount of catalysts of this type to burn.\n    function _burnCatalyst(\n        address from,\n        uint16 catalystId,\n        uint32 numTimes\n    ) internal {\n        _gemsCatalystsRegistry.burnCatalyst(from, catalystId, numTimes * CATALYST_UNIT);\n    }\n\n    /// @dev Scale up each number in an array of quantities by a factor of 1000000000000000000.\n    /// @param quantities The array of numbers to scale.\n    /// @return scaledQuantities The scaled-up values.\n    function scaleQuantities(uint256[] memory quantities) internal pure returns (uint256[] memory scaledQuantities) {\n        uint256[] memory scaled = new uint256[](quantities.length);\n        for (uint256 i = 0; i < quantities.length; i++) {\n            scaled[i] = quantities[i] * GEM_UNIT;\n        }\n        return scaled;\n    }\n}\n"
    },
    "src/solc_0.7/catalyst/interfaces/IAssetMinter.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\npragma experimental ABIEncoderV2;\n\ninterface IAssetMinter {\n    struct AssetData {\n        uint16[] gemIds;\n        uint32 quantity;\n        uint16 catalystId;\n    }\n\n    function mint(\n        address from,\n        uint40 packId,\n        bytes32 metadataHash,\n        uint16 catalystId,\n        uint16[] calldata gemIds,\n        uint32 quantity,\n        uint8 rarity,\n        address to,\n        bytes calldata data\n    ) external returns (uint256 assetId);\n\n    function mintMultiple(\n        address from,\n        uint40 packId,\n        bytes32 metadataHash,\n        uint256[] memory gemsQuantities,\n        uint256[] memory catalystsQuantities,\n        AssetData[] memory assets,\n        address to,\n        bytes memory data\n    ) external returns (uint256[] memory assetIds);\n}\n"
    },
    "src/solc_0.7/catalyst/CollectionCatalystMigrations.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IOldCatalystRegistry.sol\";\nimport \"./interfaces/IAssetAttributesRegistry.sol\";\nimport \"./interfaces/ICollectionCatalystMigrations.sol\";\nimport \"../common/Interfaces/IAssetToken.sol\";\nimport \"../common/BaseWithStorage/WithAdmin.sol\";\n\n/// @notice Contract performing migrations for collections, do not require owner approval\ncontract CollectionCatalystMigrations is WithAdmin, ICollectionCatalystMigrations {\n    uint256 private constant IS_NFT = 0x0000000000000000000000000000000000000000800000000000000000000000;\n\n    IOldCatalystRegistry internal immutable _oldRegistry;\n    IAssetAttributesRegistry internal immutable _registry;\n    IAssetToken internal immutable _asset;\n\n    /// @notice CollectionCatalystMigrations depends on:\n    /// @param asset: Asset Token Contract\n    /// @param registry: New AssetAttributesRegistry\n    /// @param oldRegistry: Old CatalystRegistry\n    /// @param admin: Contract admin\n    constructor(\n        IAssetToken asset,\n        IAssetAttributesRegistry registry,\n        IOldCatalystRegistry oldRegistry,\n        address admin\n    ) {\n        _oldRegistry = oldRegistry;\n        _asset = asset;\n        _registry = registry;\n        _admin = admin;\n    }\n\n    /// @notice Migrate the catalyst for a collection of assets.\n    /// @param assetId The id of the asset for which the catalyst is being migrated.\n    /// @param oldGemIds The gems currently embedded in the catalyst (old gems count starts from 0)\n    /// @param blockNumber The blocknumber to use when setting the catalyst.\n    function migrate(\n        uint256 assetId,\n        uint16[] calldata oldGemIds,\n        uint64 blockNumber\n    ) external override {\n        require(msg.sender == _admin, \"NOT_AUTHORIZED\");\n        _migrate(assetId, oldGemIds, blockNumber);\n    }\n\n    /// @notice Migrate the catalysts for a batch of assets.\n    /// @param migrations The data to use for each migration in the batch.\n    function batchMigrate(Migration[] calldata migrations) external override {\n        require(msg.sender == _admin, \"NOT_AUTHORIZED\");\n        for (uint256 i = 0; i < migrations.length; i++) {\n            _migrate(migrations[i].assetId, migrations[i].gemIds, migrations[i].blockNumber);\n        }\n    }\n\n    /// @notice Set the registry migration contract\n    /// @param migrationContract The migration contract for AssetAttributesRegistry\n    function setAssetAttributesRegistryMigrationContract(address migrationContract) external {\n        require(msg.sender == _admin, \"NOT_AUTHORIZED\");\n        _registry.setMigrationContract(migrationContract);\n    }\n\n    /// @dev Perform the migration of the catalyst. See `migrate(...)`\n    function _migrate(\n        uint256 assetId,\n        uint16[] memory oldGemIds,\n        uint64 blockNumber\n    ) internal {\n        (bool oldExists, uint256 oldCatalystId) = _oldRegistry.getCatalyst(assetId);\n        require(oldExists, \"OLD_CATALYST_NOT_EXIST\");\n        (bool exists, , ) = _registry.getRecord(assetId);\n        require(!exists, \"ALREADY_MIGRATED\");\n        oldCatalystId += 1; // old catalyst start from 0 , new one start with common = 1\n        if (assetId & IS_NFT != 0) {\n            // ensure this NFT has no collection: original NFT\n            // If it has, the collection itself need to be migrated\n            try _asset.collectionOf(assetId) returns (uint256 collId) {\n                require(collId == 0, \"NOT_ORIGINAL_NFT\");\n                // solhint-disable-next-line no-empty-blocks\n            } catch {}\n        }\n        // old gems started from 0, new gems starts with power = 1\n        for (uint256 i = 0; i < oldGemIds.length; i++) {\n            oldGemIds[i] += 1;\n        }\n        _registry.setCatalystWithBlockNumber(assetId, uint16(oldCatalystId), oldGemIds, blockNumber);\n    }\n}\n"
    },
    "src/solc_0.7/catalyst/interfaces/IOldCatalystRegistry.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\ninterface IOldCatalystRegistry {\n    function getCatalyst(uint256 assetId) external view returns (bool exists, uint256 catalystId);\n}\n"
    },
    "src/solc_0.7/catalyst/interfaces/ICollectionCatalystMigrations.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\npragma experimental ABIEncoderV2;\n\ninterface ICollectionCatalystMigrations {\n    struct Migration {\n        uint256 assetId;\n        uint16[] gemIds;\n        uint64 blockNumber;\n    }\n\n    function migrate(\n        uint256 assetId,\n        uint16[] calldata gemIds,\n        uint64 blockNumber\n    ) external;\n\n    function batchMigrate(Migration[] calldata migrations) external;\n}\n"
    },
    "src/solc_0.7/catalyst/DefaultAttributes.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IAttributes.sol\";\n\ncontract DefaultAttributes is IAttributes {\n    uint256 internal constant MAX_NUM_GEMS = 15;\n    uint256 internal constant MAX_NUM_GEM_TYPES = 256;\n\n    /// @notice Returns the values for each gem included in a given asset.\n    /// @param assetId The asset tokenId.\n    /// @param events An array of GemEvents. Be aware that only gemEvents from the last CatalystApplied event onwards should be used to populate a query. If gemEvents from multiple CatalystApplied events are included the output values will be incorrect.\n    /// @return values An array of values for each gem present in the asset.\n    function getAttributes(uint256 assetId, IAssetAttributesRegistry.GemEvent[] calldata events)\n        external\n        pure\n        override\n        returns (uint32[] memory values)\n    {\n        values = new uint32[](MAX_NUM_GEM_TYPES);\n\n        uint256 numGems;\n        for (uint256 i = 0; i < events.length; i++) {\n            numGems += events[i].gemIds.length;\n        }\n        require(numGems <= MAX_NUM_GEMS, \"TOO_MANY_GEMS\");\n\n        uint32 minValue = (uint32(numGems) - 1) * 5 + 1;\n\n        uint256 numGemsSoFar = 0;\n        for (uint256 i = 0; i < events.length; i++) {\n            numGemsSoFar += events[i].gemIds.length;\n            for (uint256 j = 0; j < events[i].gemIds.length; j++) {\n                uint256 gemId = events[i].gemIds[j];\n                uint256 slotIndex = numGemsSoFar - events[i].gemIds.length + j;\n                if (values[gemId] == 0) {\n                    // first gem : value = roll between ((numGemsSoFar-1)*5+1) and 25\n                    values[gemId] = _computeValue(\n                        assetId,\n                        gemId,\n                        events[i].blockHash,\n                        slotIndex,\n                        (uint32(numGemsSoFar) - 1) * 5 + 1\n                    );\n                    // bump previous values:\n                    if (values[gemId] < minValue) {\n                        values[gemId] = minValue;\n                    }\n                } else {\n                    // further gem, previous roll are overriden with 25 and new roll between 1 and 25\n                    uint32 newRoll = _computeValue(assetId, gemId, events[i].blockHash, slotIndex, 1);\n                    values[gemId] = (((values[gemId] - 1) / 25) + 1) * 25 + newRoll;\n                }\n            }\n        }\n    }\n\n    /// @dev compute a random value between min to 25.\n    /// example: 1-25, 6-25, 11-25, 16-25\n    /// @param assetId The id of the asset.\n    /// @param gemId The id of the gem.\n    /// @param blockHash The blockHash from the gemEvent.\n    /// @param slotIndex Index of the current gem.\n    /// @param min The minumum value this gem can have.\n    /// @return The computed value for the given gem.\n    function _computeValue(\n        uint256 assetId,\n        uint256 gemId,\n        bytes32 blockHash,\n        uint256 slotIndex,\n        uint32 min\n    ) internal pure returns (uint32) {\n        return min + uint16(uint256(keccak256(abi.encodePacked(gemId, assetId, blockHash, slotIndex))) % (26 - min));\n    }\n}\n"
    },
    "src/solc_0.7/catalyst/AssetAttributesRegistry.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\npragma experimental ABIEncoderV2;\n\nimport \"../common/BaseWithStorage/WithAdmin.sol\";\nimport \"../common/BaseWithStorage/WithMinter.sol\";\nimport \"../common/BaseWithStorage/WithUpgrader.sol\";\nimport \"./GemsCatalystsRegistry.sol\";\nimport \"./interfaces/IAssetAttributesRegistry.sol\";\n\n/// @notice Allows setting the gems and catalysts of an asset\ncontract AssetAttributesRegistry is WithMinter, WithUpgrader, IAssetAttributesRegistry {\n    uint256 internal constant MAX_NUM_GEMS = 15;\n    uint256 private constant IS_NFT = 0x0000000000000000000000000000000000000000800000000000000000000000;\n    uint256 private constant NOT_IS_NFT = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFFFFFFFFFFF;\n    uint256 private constant NOT_NFT_INDEX = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800000007FFFFFFFFFFFFFFF;\n\n    GemsCatalystsRegistry internal immutable _gemsCatalystsRegistry;\n    mapping(uint256 => Record) internal _records;\n\n    // used to allow migration to specify blockNumber when setting catalyst/gems\n    address public migrationContract;\n\n    struct Record {\n        uint16 catalystId; // start at 1\n        uint16[MAX_NUM_GEMS] gemIds;\n    }\n\n    event CatalystApplied(uint256 indexed assetId, uint16 indexed catalystId, uint16[] gemIds, uint64 blockNumber);\n    event GemsAdded(uint256 indexed assetId, uint16[] gemIds, uint64 blockNumber);\n\n    /// @notice AssetAttributesRegistry depends on\n    /// @param gemsCatalystsRegistry: GemsCatalystsRegistry for fetching attributes\n    /// @param admin: for setting the migration contract address\n    /// @param minter: allowed to set gems and catalysts for a given asset\n    constructor(\n        GemsCatalystsRegistry gemsCatalystsRegistry,\n        address admin,\n        address minter,\n        address upgrader\n    ) {\n        _gemsCatalystsRegistry = gemsCatalystsRegistry;\n        _admin = admin;\n        _minter = minter;\n        _upgrader = upgrader;\n    }\n\n    /// @notice get the record data (catalyst id, gems ids list) for an asset id\n    /// @param assetId id of the asset\n    function getRecord(uint256 assetId)\n        external\n        view\n        override\n        returns (\n            bool exists,\n            uint16 catalystId,\n            uint16[] memory gemIds\n        )\n    {\n        catalystId = _records[assetId].catalystId;\n        if (catalystId == 0 && assetId & IS_NFT != 0) {\n            // fallback on collection catalyst\n            assetId = _getCollectionId(assetId);\n            catalystId = _records[assetId].catalystId;\n        }\n        uint16[MAX_NUM_GEMS] memory fixedGemIds = _records[assetId].gemIds;\n        exists = catalystId != 0;\n        gemIds = new uint16[](MAX_NUM_GEMS);\n        uint8 i = 0;\n        while (fixedGemIds[i] != 0) {\n            gemIds[i] = (fixedGemIds[i]);\n            i++;\n        }\n    }\n\n    /// @notice getAttributes\n    /// @param assetId id of the asset\n    /// @return values The array of values(256) requested.\n    function getAttributes(uint256 assetId, GemEvent[] calldata events)\n        external\n        view\n        override\n        returns (uint32[] memory values)\n    {\n        return _gemsCatalystsRegistry.getAttributes(_records[assetId].catalystId, assetId, events);\n    }\n\n    /// @notice sets the catalyst and gems for an asset, minter only\n    /// @param assetId id of the asset\n    /// @param catalystId id of the catalyst to set\n    /// @param gemIds list of gems ids to set\n    function setCatalyst(\n        uint256 assetId,\n        uint16 catalystId,\n        uint16[] calldata gemIds\n    ) external virtual override {\n        require(msg.sender == _minter || msg.sender == _upgrader, \"NOT_AUTHORIZED_MINTER\");\n        _setCatalyst(assetId, catalystId, gemIds, _getBlockNumber());\n    }\n\n    /// @notice sets the catalyst and gems for an asset for a given block number, migration contract only\n    /// @param assetId id of the asset\n    /// @param catalystId id of the catalyst to set\n    /// @param gemIds list of gems ids to set\n    /// @param blockNumber block number\n    function setCatalystWithBlockNumber(\n        uint256 assetId,\n        uint16 catalystId,\n        uint16[] calldata gemIds,\n        uint64 blockNumber\n    ) external override {\n        require(msg.sender == migrationContract, \"NOT_AUTHORIZED_MIGRATION\");\n        _setCatalyst(assetId, catalystId, gemIds, blockNumber);\n    }\n\n    /// @notice adds gems to an existing list of gems of an asset, minter only\n    /// @param assetId id of the asset\n    /// @param gemIds list of gems ids to set\n    function addGems(uint256 assetId, uint16[] calldata gemIds) external virtual override {\n        require(msg.sender == _upgrader, \"NOT_AUTHORIZED_UPGRADER\");\n        require(assetId & IS_NFT != 0, \"INVALID_NOT_NFT\");\n        require(gemIds.length != 0, \"INVALID_GEMS_0\");\n\n        uint16 catalystId = _records[assetId].catalystId;\n        uint16[MAX_NUM_GEMS] memory gemIdsToStore;\n        if (catalystId == 0) {\n            // fallback on collection catalyst\n            uint256 collectionId = _getCollectionId(assetId);\n            catalystId = _records[collectionId].catalystId;\n            if (catalystId != 0) {\n                _records[assetId].catalystId = catalystId;\n                gemIdsToStore = _records[collectionId].gemIds;\n            }\n        } else {\n            gemIdsToStore = _records[assetId].gemIds;\n        }\n\n        require(catalystId != 0, \"NO_CATALYST_SET\");\n        uint8 j = 0;\n        uint8 i = 0;\n        for (i = 0; i < MAX_NUM_GEMS; i++) {\n            if (j == gemIds.length) {\n                break;\n            }\n            if (gemIdsToStore[i] == 0) {\n                require(gemIds[j] != 0, \"INVALID_GEM_ID\");\n                gemIdsToStore[i] = gemIds[j];\n                j++;\n            }\n        }\n        uint8 maxGems = _gemsCatalystsRegistry.getMaxGems(catalystId);\n        require(i <= maxGems, \"GEMS_TOO_MANY\");\n        _records[assetId].gemIds = gemIdsToStore;\n        uint64 blockNumber = _getBlockNumber();\n        emit GemsAdded(assetId, gemIds, blockNumber);\n    }\n\n    /// @notice set the migratcion contract address, admin or migration contract only\n    /// @param _migrationContract address of the migration contract\n    function setMigrationContract(address _migrationContract) external override {\n        address currentMigrationContract = migrationContract;\n        if (currentMigrationContract == address(0)) {\n            require(msg.sender == _admin, \"NOT_AUTHORIZED\");\n            migrationContract = _migrationContract;\n        } else {\n            require(msg.sender == currentMigrationContract, \"NOT_AUTHORIZED_MIGRATION\");\n            migrationContract = _migrationContract;\n        }\n    }\n\n    /// @dev Set a catalyst for the given asset.\n    /// @param assetId The asset to set a catalyst on.\n    /// @param catalystId The catalyst to set.\n    /// @param gemIds The gems to embed in the catalyst.\n    /// @param blockNumber The blocknumber to emit in the event.\n    function _setCatalyst(\n        uint256 assetId,\n        uint16 catalystId,\n        uint16[] memory gemIds,\n        uint64 blockNumber\n    ) internal virtual {\n        require(gemIds.length <= MAX_NUM_GEMS, \"GEMS_MAX_REACHED\");\n        uint8 maxGems = _gemsCatalystsRegistry.getMaxGems(catalystId);\n        require(gemIds.length <= maxGems, \"GEMS_TOO_MANY\");\n        uint16[MAX_NUM_GEMS] memory gemIdsToStore;\n        for (uint8 i = 0; i < gemIds.length; i++) {\n            require(gemIds[i] != 0, \"INVALID_GEM_ID\");\n            gemIdsToStore[i] = gemIds[i];\n        }\n        _records[assetId] = Record(catalystId, gemIdsToStore);\n        emit CatalystApplied(assetId, catalystId, gemIds, blockNumber);\n    }\n\n    /// @dev Get the collection Id for an asset.\n    /// @param assetId The asset to get the collection id for.\n    /// @return The id of the collection the asset belongs to.\n    function _getCollectionId(uint256 assetId) internal pure returns (uint256) {\n        return assetId & NOT_NFT_INDEX & NOT_IS_NFT; // compute the same as Asset to get collectionId\n    }\n\n    /// @dev Get a blocknumber for use when querying attributes.\n    /// @return blockNumber The current blocknumber + 1.\n    function _getBlockNumber() internal view returns (uint64 blockNumber) {\n        blockNumber = uint64(block.number + 1);\n    }\n}\n"
    },
    "src/solc_0.7/common/BaseWithStorage/WithMinter.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"./WithAdmin.sol\";\n\ncontract WithMinter is WithAdmin {\n    address internal _minter;\n\n    /// @dev Emits when the Minter address is changed\n    /// @param oldMinter The previous Minter address\n    /// @param newMinter The new Minter address\n    event MinterChanged(address oldMinter, address newMinter);\n\n    modifier onlyMinter() {\n        require(msg.sender == _minter, \"MINTER_ACCESS_DENIED\");\n        _;\n    }\n\n    /// @dev Get the current minter of this contract.\n    /// @return The current minter of this contract.\n    function getMinter() external view returns (address) {\n        return _minter;\n    }\n\n    /// @dev Change the minter to be `newMinter`.\n    /// @param newMinter The address of the new minter.\n    function changeMinter(address newMinter) external onlyAdmin() {\n        emit MinterChanged(_minter, newMinter);\n        _minter = newMinter;\n    }\n}\n"
    },
    "src/solc_0.7/common/BaseWithStorage/WithUpgrader.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"./WithAdmin.sol\";\n\ncontract WithUpgrader is WithAdmin {\n    address internal _upgrader;\n\n    /// @dev Emits when the Upgrader address is changed\n    /// @param oldUpgrader The previous Upgrader address\n    /// @param newUpgrader The new Upgrader address\n    event UpgraderChanged(address oldUpgrader, address newUpgrader);\n\n    modifier onlyUpgrader() {\n        require(msg.sender == _upgrader, \"UPGRADER_ACCESS_DENIED\");\n        _;\n    }\n\n    /// @dev Get the current upgrader of this contract.\n    /// @return The current upgrader of this contract.\n    function getUpgrader() external view returns (address) {\n        return _upgrader;\n    }\n\n    /// @dev Change the upgrader to be `newUpgrader`.\n    /// @param newUpgrader The address of the new upgrader.\n    function changeUpgrader(address newUpgrader) external onlyAdmin() {\n        emit UpgraderChanged(_upgrader, newUpgrader);\n        _upgrader = newUpgrader;\n    }\n}\n"
    },
    "src/solc_0.7/test/MockAssetAttributesRegistry.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\npragma experimental ABIEncoderV2;\n\nimport \"../catalyst/AssetAttributesRegistry.sol\";\n\n/// @notice Allows setting the gems and catalysts of an asset\ncontract MockAssetAttributesRegistry is AssetAttributesRegistry {\n    uint256 private constant IS_NFT = 0x0000000000000000000000000000000000000000800000000000000000000000;\n\n    constructor(\n        GemsCatalystsRegistry gemsCatalystsRegistry,\n        address admin,\n        address minter,\n        address upgrader\n    )\n        AssetAttributesRegistry(gemsCatalystsRegistry, admin, minter, upgrader)\n    // solhint-disable-next-line no-empty-blocks\n    {\n\n    }\n\n    function setCatalyst(\n        uint256 assetId,\n        uint16 catalystId,\n        uint16[] calldata gemIds\n    ) external override {\n        // @note access control removed for testing\n        _setCatalyst(assetId, catalystId, gemIds, _getBlockNumber());\n    }\n\n    function _setCatalyst(\n        uint256 assetId,\n        uint16 catalystId,\n        uint16[] memory gemIds,\n        uint64 blockNumber\n    ) internal override {\n        // @note access control removed for testing\n        require(gemIds.length <= MAX_NUM_GEMS, \"GEMS_MAX_REACHED\");\n        uint8 maxGems = _gemsCatalystsRegistry.getMaxGems(catalystId);\n        require(gemIds.length <= maxGems, \"GEMS_TOO_MANY\");\n        uint16[MAX_NUM_GEMS] memory gemIdsToStore;\n        for (uint8 i = 0; i < gemIds.length; i++) {\n            require(gemIds[i] != 0, \"INVALID_GEM_ID\");\n            gemIdsToStore[i] = gemIds[i];\n        }\n        _records[assetId] = Record(catalystId, gemIdsToStore);\n        emit CatalystApplied(assetId, catalystId, gemIds, blockNumber);\n    }\n\n    function addGems(uint256 assetId, uint16[] calldata gemIds) external override {\n        // @note removed access control for ease of testing.\n        require(assetId & IS_NFT != 0, \"INVALID_NOT_NFT\");\n        require(gemIds.length != 0, \"INVALID_GEMS_0\");\n\n        uint16 catalystId = _records[assetId].catalystId;\n        uint16[MAX_NUM_GEMS] memory gemIdsToStore;\n        if (catalystId == 0) {\n            // fallback on collection catalyst\n            uint256 collectionId = _getCollectionId(assetId);\n            catalystId = _records[collectionId].catalystId;\n            if (catalystId != 0) {\n                _records[assetId].catalystId = catalystId;\n                gemIdsToStore = _records[collectionId].gemIds;\n            }\n        } else {\n            gemIdsToStore = _records[assetId].gemIds;\n        }\n\n        require(catalystId != 0, \"NO_CATALYST_SET\");\n        uint8 j = 0;\n        uint8 i = 0;\n        for (i = 0; i < MAX_NUM_GEMS; i++) {\n            if (j == gemIds.length) {\n                break;\n            }\n            if (gemIdsToStore[i] == 0) {\n                require(gemIds[j] != 0, \"INVALID_GEM_ID\");\n                gemIdsToStore[i] = gemIds[j];\n                j++;\n            }\n        }\n        uint8 maxGems = _gemsCatalystsRegistry.getMaxGems(catalystId);\n        require(i <= maxGems, \"GEMS_TOO_MANY\");\n        _records[assetId].gemIds = gemIdsToStore;\n        uint64 blockNumber = _getBlockNumber();\n        emit GemsAdded(assetId, gemIds, blockNumber);\n    }\n}\n"
    },
    "src/solc_0.7/test/MockERC677Receiver.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\nimport \"../common/Interfaces/IERC677Receiver.sol\";\n\ncontract MockERC677Receiver is IERC677Receiver {\n    event OnTokenTransferEvent(address indexed _sender, uint256 _value, bytes _data);\n\n    /// @dev Emits the OnTokenTransferEvent.\n    /// @param _sender The address of the sender.\n    /// @param _value The value sent with the tx.\n    /// @param _data The data sent with the tx.\n    function onTokenTransfer(\n        address _sender,\n        uint256 _value,\n        bytes calldata _data\n    ) external override {\n        emit OnTokenTransferEvent(_sender, _value, _data);\n    }\n}\n"
    },
    "src/solc_0.7/common/Interfaces/IERC20WithMetadata.sol": {
      "content": "/* This Source Code Form is subject to the terms of the Mozilla external\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n *\n * This code has not been reviewed.\n * Do not use or deploy this code before reviewing it personally first.\n */\n// solhint-disable-next-line compiler-fixed\n//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IERC20WithMetadata is IERC20 {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 2000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}