{
  "address": "0xa21342f796996954284B8DC6AAe7ecBF8f83A9e4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "ids",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct ClaimERC1155ERC721ERC20.ERC1155Claim[]",
          "name": "erc1155",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "ids",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct ClaimERC1155ERC721ERC20.ERC721Claim[]",
          "name": "erc721",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "address[]",
              "name": "contractAddresses",
              "type": "address[]"
            }
          ],
          "indexed": false,
          "internalType": "struct ClaimERC1155ERC721ERC20.ERC20Claim",
          "name": "erc20",
          "type": "tuple"
        }
      ],
      "name": "ClaimedMultipleTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiryTime",
          "type": "uint256"
        }
      ],
      "name": "NewGiveaway",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "expiryTime",
          "type": "uint256"
        }
      ],
      "name": "addNewGiveaway",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "changeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint256[]",
                  "name": "ids",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "values",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address",
                  "name": "contractAddress",
                  "type": "address"
                }
              ],
              "internalType": "struct ClaimERC1155ERC721ERC20.ERC1155Claim[]",
              "name": "erc1155",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256[]",
                  "name": "ids",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address",
                  "name": "contractAddress",
                  "type": "address"
                }
              ],
              "internalType": "struct ClaimERC1155ERC721ERC20.ERC721Claim[]",
              "name": "erc721",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address[]",
                  "name": "contractAddresses",
                  "type": "address[]"
                }
              ],
              "internalType": "struct ClaimERC1155ERC721ERC20.ERC20Claim",
              "name": "erc20",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "salt",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ClaimERC1155ERC721ERC20.Claim",
          "name": "claim",
          "type": "tuple"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "claimMultipleTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "rootHashes",
          "type": "bytes32[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint256[]",
                  "name": "ids",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "values",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address",
                  "name": "contractAddress",
                  "type": "address"
                }
              ],
              "internalType": "struct ClaimERC1155ERC721ERC20.ERC1155Claim[]",
              "name": "erc1155",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256[]",
                  "name": "ids",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address",
                  "name": "contractAddress",
                  "type": "address"
                }
              ],
              "internalType": "struct ClaimERC1155ERC721ERC20.ERC721Claim[]",
              "name": "erc721",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address[]",
                  "name": "contractAddresses",
                  "type": "address[]"
                }
              ],
              "internalType": "struct ClaimERC1155ERC721ERC20.ERC20Claim",
              "name": "erc20",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "salt",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ClaimERC1155ERC721ERC20.Claim[]",
          "name": "claims",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes32[][]",
          "name": "proofs",
          "type": "bytes32[][]"
        }
      ],
      "name": "claimMultipleTokensFromMultipleMerkleTree",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "claimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bytes32[]",
          "name": "rootHashes",
          "type": "bytes32[]"
        }
      ],
      "name": "getClaimedStatus",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xdbfa9b4b4765cc2e941e221d228d29a591acc8e00098441291b242044904d5ac",
  "receipt": {
    "to": null,
    "from": "0xe19ae8F9B36Ca43D12741288D0e311396140DF6F",
    "contractAddress": "0xa21342f796996954284B8DC6AAe7ecBF8f83A9e4",
    "transactionIndex": 312,
    "gasUsed": "1827538",
    "logsBloom": "0x
    "blockHash": "0x8c5e37d9880f8a74c29d268d59b45b382d04e6f12fdd95d26a24925834bbaeaf",
    "transactionHash": "0xdbfa9b4b4765cc2e941e221d228d29a591acc8e00098441291b242044904d5ac",
    "logs": [],
    "blockNumber": 13243326,
    "cumulativeGasUsed": "21460006",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xEAA0993E1d21c2103e4f172a20D29371FbAF6D06"
  ],
  "solcInputHash": "997289cc54be33c1e29c920242d0c46b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct ClaimERC1155ERC721ERC20.ERC1155Claim[]\",\"name\":\"erc1155\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct ClaimERC1155ERC721ERC20.ERC721Claim[]\",\"name\":\"erc721\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"contractAddresses\",\"type\":\"address[]\"}],\"indexed\":false,\"internalType\":\"struct ClaimERC1155ERC721ERC20.ERC20Claim\",\"name\":\"erc20\",\"type\":\"tuple\"}],\"name\":\"ClaimedMultipleTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"}],\"name\":\"NewGiveaway\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"}],\"name\":\"addNewGiveaway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct ClaimERC1155ERC721ERC20.ERC1155Claim[]\",\"name\":\"erc1155\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct ClaimERC1155ERC721ERC20.ERC721Claim[]\",\"name\":\"erc721\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"contractAddresses\",\"type\":\"address[]\"}],\"internalType\":\"struct ClaimERC1155ERC721ERC20.ERC20Claim\",\"name\":\"erc20\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"internalType\":\"struct ClaimERC1155ERC721ERC20.Claim\",\"name\":\"claim\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"claimMultipleTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"rootHashes\",\"type\":\"bytes32[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct ClaimERC1155ERC721ERC20.ERC1155Claim[]\",\"name\":\"erc1155\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct ClaimERC1155ERC721ERC20.ERC721Claim[]\",\"name\":\"erc721\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"contractAddresses\",\"type\":\"address[]\"}],\"internalType\":\"struct ClaimERC1155ERC721ERC20.ERC20Claim\",\"name\":\"erc20\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"internalType\":\"struct ClaimERC1155ERC721ERC20.Claim[]\",\"name\":\"claims\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"proofs\",\"type\":\"bytes32[][]\"}],\"name\":\"claimMultipleTokensFromMultipleMerkleTree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"rootHashes\",\"type\":\"bytes32[]\"}],\"name\":\"getClaimedStatus\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addNewGiveaway(bytes32,uint256)\":{\"params\":{\"expiryTime\":\"The expiry time for the giveaway.\",\"merkleRoot\":\"The merkle root hash of the claim data.\"}},\"changeAdmin(address)\":{\"details\":\"Change the administrator to be `newAdmin`.\",\"params\":{\"newAdmin\":\"The address of the new administrator.\"}},\"claimMultipleTokens(bytes32,(address,(uint256[],uint256[],address)[],(uint256[],address)[],(uint256[],address[]),bytes32),bytes32[])\":{\"details\":\"Public function used to perform validity checks and progress to claim multiple token types in one claim.\",\"params\":{\"claim\":\"The claim struct containing the destination address, all items to be claimed and optional salt param.\",\"merkleRoot\":\"The merkle root hash for the specific set of items being claimed.\",\"proof\":\"The proof provided by the user performing the claim function.\"}},\"claimMultipleTokensFromMultipleMerkleTree(bytes32[],(address,(uint256[],uint256[],address)[],(uint256[],address)[],(uint256[],address[]),bytes32)[],bytes32[][])\":{\"params\":{\"claims\":\"The array of claim structs, each containing a destination address, the giveaway items to be claimed and an optional salt param.\",\"proofs\":\"The proofs submitted for verification.\"}},\"getAdmin()\":{\"details\":\"Get the current administrator of this contract.\",\"returns\":{\"_0\":\"The current administrator of this contract.\"}},\"getClaimedStatus(address,bytes32[])\":{\"params\":{\"rootHashes\":\"The array of giveaway root hashes to check.\",\"user\":\"The user (intended token destination) address.\"},\"returns\":{\"_0\":\"claimedGiveaways The array of bools confirming whether or not the giveaways relating to the root hashes provided have been claimed.\"}}},\"title\":\"MultiGiveaway contract.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addNewGiveaway(bytes32,uint256)\":{\"notice\":\"Function to add a new giveaway.\"},\"claimMultipleTokensFromMultipleMerkleTree(bytes32[],(address,(uint256[],uint256[],address)[],(uint256[],address)[],(uint256[],address[]),bytes32)[],bytes32[][])\":{\"notice\":\"Function to permit the claiming of multiple tokens from multiple giveaways to a reserved address.\"},\"getClaimedStatus(address,bytes32[])\":{\"notice\":\"Function to check which giveaways have been claimed by a particular user.\"}},\"notice\":\"This contract manages claims for multiple token types.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/solc_0.8/claims/MultiGiveaway/MultiGiveaway.sol\":\"MultiGiveaway\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-0.8/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x249bc2a6d919da5f5145950664134cfcf2f66874bda801fd3b8fb861783da079\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\",\"keccak256\":\"0xc7aa8a96aaeb7e1672a3d5fd37582136ff46b6a6cafabcc40ec0e00a42915e1c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xc1c941ad1e580b4623007305921efe2f26fc7320a4edc226234dd707c658a428\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x96877bb2eb8ca360e949ee1bd77b47a14e92e42f79897c350f088f87a3c231d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"src/solc_0.8/claims/MultiGiveaway/ClaimERC1155ERC721ERC20.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-0.8/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../../common/interfaces/IERC721Extended.sol\\\";\\nimport \\\"../../common/Libraries/Verify.sol\\\";\\n\\ncontract ClaimERC1155ERC721ERC20 {\\n    ///////////////////////////////  Libs //////////////////////////////\\n\\n    using SafeERC20 for IERC20;\\n\\n    ///////////////////////////////  Data //////////////////////////////\\n\\n    struct Claim {\\n        address to;\\n        ERC1155Claim[] erc1155;\\n        ERC721Claim[] erc721;\\n        ERC20Claim erc20;\\n        bytes32 salt;\\n    }\\n\\n    struct ERC1155Claim {\\n        uint256[] ids;\\n        uint256[] values;\\n        address contractAddress;\\n    }\\n\\n    struct ERC721Claim {\\n        uint256[] ids;\\n        address contractAddress;\\n    }\\n\\n    struct ERC20Claim {\\n        uint256[] amounts;\\n        address[] contractAddresses;\\n    }\\n\\n    ///////////////////////////////  Events //////////////////////////////\\n\\n    /// @dev Emits when a successful claim occurs.\\n    /// @param to The destination address for the claimed ERC1155, ERC721 and ERC20 tokens.\\n    /// @param erc1155 The array of ERC1155Claim structs containing the ids, values and ERC1155 contract address.\\n    /// @param erc721 The array of ERC721Claim structs containing the ids and ERC721 contract address.\\n    /// @param erc20 The ERC20Claim struct containing the amounts and ERC20 contract addresses.\\n    event ClaimedMultipleTokens(address to, ERC1155Claim[] erc1155, ERC721Claim[] erc721, ERC20Claim erc20);\\n\\n    ///////////////////////////////  Functions ///////////////////////////\\n\\n    /// @dev Internal function used to claim multiple token types in one claim.\\n    /// @param merkleRoot The merkle root hash for the specific set of items being claimed.\\n    /// @param claim The claim struct containing the destination address, all items to be claimed and optional salt param.\\n    /// @param proof The proof provided by the user performing the claim function.\\n    function _claimERC1155ERC721ERC20(\\n        bytes32 merkleRoot,\\n        Claim memory claim,\\n        bytes32[] calldata proof\\n    ) internal {\\n        _checkValidity(merkleRoot, claim, proof);\\n        for (uint256 i = 0; i < claim.erc1155.length; i++) {\\n            require(claim.erc1155[i].ids.length == claim.erc1155[i].values.length, \\\"INVALID_INPUT\\\");\\n            _transferERC1155(claim.to, claim.erc1155[i].ids, claim.erc1155[i].values, claim.erc1155[i].contractAddress);\\n        }\\n        for (uint256 i = 0; i < claim.erc721.length; i++) {\\n            _transferERC721(claim.to, claim.erc721[i].ids, claim.erc721[i].contractAddress);\\n        }\\n        if (claim.erc20.amounts.length != 0) {\\n            require(claim.erc20.amounts.length == claim.erc20.contractAddresses.length, \\\"INVALID_INPUT\\\");\\n            _transferERC20(claim.to, claim.erc20.amounts, claim.erc20.contractAddresses);\\n        }\\n        emit ClaimedMultipleTokens(claim.to, claim.erc1155, claim.erc721, claim.erc20);\\n    }\\n\\n    /// @dev Private function used to check the validity of a specific claim.\\n    /// @param merkleRoot The merkle root hash for the specific set of items being claimed.\\n    /// @param claim The claim struct containing the destination address, all items to be claimed and optional salt param.\\n    /// @param proof The proof provided by the user performing the claim function.\\n    function _checkValidity(\\n        bytes32 merkleRoot,\\n        Claim memory claim,\\n        bytes32[] memory proof\\n    ) private pure {\\n        bytes32 leaf = _generateClaimHash(claim);\\n        require(Verify.doesComputedHashMatchMerkleRootHash(merkleRoot, proof, leaf), \\\"INVALID_CLAIM\\\");\\n    }\\n\\n    /// @dev Private function used to generate a hash from an encoded claim.\\n    /// @param claim The claim struct.\\n    function _generateClaimHash(Claim memory claim) private pure returns (bytes32) {\\n        return keccak256(abi.encode(claim));\\n    }\\n\\n    /// @dev Private function used to transfer the ERC1155 tokens specified in a specific claim.\\n    /// @param to The destination address for the claimed tokens.\\n    /// @param ids The array of ERC1155 ids.\\n    /// @param values The amount of ERC1155 tokens of each id to be transferred.\\n    /// @param contractAddress The ERC1155 token contract address.\\n    function _transferERC1155(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        address contractAddress\\n    ) private {\\n        require(contractAddress != address(0), \\\"INVALID_CONTRACT_ZERO_ADDRESS\\\");\\n        IERC1155(contractAddress).safeBatchTransferFrom(address(this), to, ids, values, \\\"\\\");\\n    }\\n\\n    /// @dev Private function used to transfer the ERC721tokens specified in a specific claim.\\n    /// @param to The destination address for the claimed tokens.\\n    /// @param ids The array of ERC721 ids.\\n    /// @param contractAddress The ERC721 token contract address.\\n    function _transferERC721(\\n        address to,\\n        uint256[] memory ids,\\n        address contractAddress\\n    ) private {\\n        require(contractAddress != address(0), \\\"INVALID_CONTRACT_ZERO_ADDRESS\\\");\\n        IERC721Extended(contractAddress).safeBatchTransferFrom(address(this), to, ids, \\\"\\\");\\n    }\\n\\n    /// @dev Private function used to transfer the ERC20 tokens specified in a specific claim.\\n    /// @param to The destination address for the claimed tokens.\\n    /// @param amounts The array of amounts of ERC20 tokens to be transferred.\\n    /// @param contractAddresses The array of ERC20 token contract addresses.\\n    function _transferERC20(\\n        address to,\\n        uint256[] memory amounts,\\n        address[] memory contractAddresses\\n    ) private {\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            address erc20ContractAddress = contractAddresses[i];\\n            uint256 erc20Amount = amounts[i];\\n            require(erc20ContractAddress != address(0), \\\"INVALID_CONTRACT_ZERO_ADDRESS\\\");\\n            IERC20(erc20ContractAddress).safeTransferFrom(address(this), to, erc20Amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x31fd5dd8d2e7acc45e10ed13f2b7dcbf6da1ef69e842925fffc6fcb5289cef54\",\"license\":\"MIT\"},\"src/solc_0.8/claims/MultiGiveaway/MultiGiveaway.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-0.8/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport \\\"./ClaimERC1155ERC721ERC20.sol\\\";\\nimport \\\"../../common/BaseWithStorage/WithAdmin.sol\\\";\\n\\n/// @title MultiGiveaway contract.\\n/// @notice This contract manages claims for multiple token types.\\ncontract MultiGiveaway is WithAdmin, ClaimERC1155ERC721ERC20 {\\n    ///////////////////////////////  Data //////////////////////////////\\n\\n    bytes4 private constant ERC1155_RECEIVED = 0xf23a6e61;\\n    bytes4 private constant ERC1155_BATCH_RECEIVED = 0xbc197c81;\\n    bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\\n    bytes4 internal constant ERC721_BATCH_RECEIVED = 0x4b808c46;\\n\\n    mapping(address => mapping(bytes32 => bool)) public claimed;\\n    mapping(bytes32 => uint256) internal _expiryTime;\\n\\n    ///////////////////////////////  Events //////////////////////////////\\n\\n    event NewGiveaway(bytes32 merkleRoot, uint256 expiryTime);\\n\\n    ///////////////////////////////  Constructor /////////////////////////\\n\\n    constructor(address admin) {\\n        _admin = admin;\\n    }\\n\\n    ///////////////////////////////  Functions ///////////////////////////\\n\\n    /// @notice Function to add a new giveaway.\\n    /// @param merkleRoot The merkle root hash of the claim data.\\n    /// @param expiryTime The expiry time for the giveaway.\\n    function addNewGiveaway(bytes32 merkleRoot, uint256 expiryTime) external onlyAdmin {\\n        _expiryTime[merkleRoot] = expiryTime;\\n        emit NewGiveaway(merkleRoot, expiryTime);\\n    }\\n\\n    /// @notice Function to check which giveaways have been claimed by a particular user.\\n    /// @param user The user (intended token destination) address.\\n    /// @param rootHashes The array of giveaway root hashes to check.\\n    /// @return claimedGiveaways The array of bools confirming whether or not the giveaways relating to the root hashes provided have been claimed.\\n    function getClaimedStatus(address user, bytes32[] calldata rootHashes) external view returns (bool[] memory) {\\n        bool[] memory claimedGiveaways = new bool[](rootHashes.length);\\n        for (uint256 i = 0; i < rootHashes.length; i++) {\\n            claimedGiveaways[i] = claimed[user][rootHashes[i]];\\n        }\\n        return claimedGiveaways;\\n    }\\n\\n    /// @notice Function to permit the claiming of multiple tokens from multiple giveaways to a reserved address.\\n    /// @param claims The array of claim structs, each containing a destination address, the giveaway items to be claimed and an optional salt param.\\n    /// @param proofs The proofs submitted for verification.\\n    function claimMultipleTokensFromMultipleMerkleTree(\\n        bytes32[] calldata rootHashes,\\n        Claim[] memory claims,\\n        bytes32[][] calldata proofs\\n    ) external {\\n        require(claims.length == rootHashes.length, \\\"INVALID_INPUT\\\");\\n        require(claims.length == proofs.length, \\\"INVALID_INPUT\\\");\\n        for (uint256 i = 0; i < rootHashes.length; i++) {\\n            claimMultipleTokens(rootHashes[i], claims[i], proofs[i]);\\n        }\\n    }\\n\\n    /// @dev Public function used to perform validity checks and progress to claim multiple token types in one claim.\\n    /// @param merkleRoot The merkle root hash for the specific set of items being claimed.\\n    /// @param claim The claim struct containing the destination address, all items to be claimed and optional salt param.\\n    /// @param proof The proof provided by the user performing the claim function.\\n    function claimMultipleTokens(\\n        bytes32 merkleRoot,\\n        Claim memory claim,\\n        bytes32[] calldata proof\\n    ) public {\\n        uint256 giveawayExpiryTime = _expiryTime[merkleRoot];\\n        require(claim.to != address(0), \\\"INVALID_TO_ZERO_ADDRESS\\\");\\n        require(claim.to != address(this), \\\"DESTINATION_MULTIGIVEAWAY_CONTRACT\\\");\\n        require(giveawayExpiryTime != 0, \\\"GIVEAWAY_DOES_NOT_EXIST\\\");\\n        require(block.timestamp < giveawayExpiryTime, \\\"CLAIM_PERIOD_IS_OVER\\\");\\n        require(claimed[claim.to][merkleRoot] == false, \\\"DESTINATION_ALREADY_CLAIMED\\\");\\n        claimed[claim.to][merkleRoot] = true;\\n        _claimERC1155ERC721ERC20(merkleRoot, claim, proof);\\n    }\\n\\n    function onERC721Received(\\n        address, /*operator*/\\n        address, /*from*/\\n        uint256, /*id*/\\n        bytes calldata /*data*/\\n    ) external pure returns (bytes4) {\\n        return ERC721_RECEIVED;\\n    }\\n\\n    function onERC721BatchReceived(\\n        address, /*operator*/\\n        address, /*from*/\\n        uint256[] calldata, /*ids*/\\n        bytes calldata /*data*/\\n    ) external pure returns (bytes4) {\\n        return ERC721_BATCH_RECEIVED;\\n    }\\n\\n    function onERC1155Received(\\n        address, /*operator*/\\n        address, /*from*/\\n        uint256, /*id*/\\n        uint256, /*value*/\\n        bytes calldata /*data*/\\n    ) external pure returns (bytes4) {\\n        return ERC1155_RECEIVED;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address, /*operator*/\\n        address, /*from*/\\n        uint256[] calldata, /*ids*/\\n        uint256[] calldata, /*values*/\\n        bytes calldata /*data*/\\n    ) external pure returns (bytes4) {\\n        return ERC1155_BATCH_RECEIVED;\\n    }\\n}\\n\",\"keccak256\":\"0xf86f6914b9c21520d64772fe518d75f76c2ab5700df61499de2390a65b40bbdd\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/WithAdmin.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\ncontract WithAdmin {\\n    address internal _admin;\\n\\n    /// @dev Emits when the contract administrator is changed.\\n    /// @param oldAdmin The address of the previous administrator.\\n    /// @param newAdmin The address of the new administrator.\\n    event AdminChanged(address oldAdmin, address newAdmin);\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == _admin, \\\"ADMIN_ONLY\\\");\\n        _;\\n    }\\n\\n    /// @dev Get the current administrator of this contract.\\n    /// @return The current administrator of this contract.\\n    function getAdmin() external view returns (address) {\\n        return _admin;\\n    }\\n\\n    /// @dev Change the administrator to be `newAdmin`.\\n    /// @param newAdmin The address of the new administrator.\\n    function changeAdmin(address newAdmin) external {\\n        require(msg.sender == _admin, \\\"ADMIN_ACCESS_DENIED\\\");\\n        emit AdminChanged(_admin, newAdmin);\\n        _admin = newAdmin;\\n    }\\n}\\n\",\"keccak256\":\"0xf2ce40f1b23052a50a5b2d5ad61fbc04ab6c9fb2e5b1dba17ccddf4507e4649f\",\"license\":\"MIT\"},\"src/solc_0.8/common/Libraries/Verify.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\n/**\\n * @title Verify\\n * @dev Merkle root comparison function.\\n */\\nlibrary Verify {\\n    /// @dev Check if the computedHash == comparisonHash.\\n    /// @param comparisonHash The merkle root hash passed to the function.\\n    /// @param proof The proof provided by the user.\\n    /// @param leaf The generated hash.\\n    /// @return Whether the computedHash == comparisonHash.\\n    function doesComputedHashMatchMerkleRootHash(\\n        bytes32 comparisonHash,\\n        bytes32[] memory proof,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash < proofElement) {\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n        return computedHash == comparisonHash;\\n    }\\n}\\n\",\"keccak256\":\"0xd26acd53be346632600309157004c38be9d248ffa7d6472cac14d3d355335c99\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC721Extended.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-0.8/token/ERC721/IERC721.sol\\\";\\n\\ninterface IERC721Extended is IERC721 {\\n    function approveFor(\\n        address sender,\\n        address operator,\\n        uint256 id\\n    ) external;\\n\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external;\\n\\n    function setApprovalForAllFor(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) external;\\n\\n    function burn(uint256 id) external;\\n\\n    function burnFrom(address from, uint256 id) external;\\n}\\n\",\"keccak256\":\"0x7859e5f756379e10b50869355595471e6a9379b95dced4f68d00355f6b15a9c5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161204e38038061204e83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610082565b600060208284031215610065578081fd5b81516001600160a01b038116811461007b578182fd5b9392505050565b611fbd806100916000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c80636e9960c311610081578063bc197c811161005b578063bc197c8114610229578063c850933214610264578063f23a6e6114610277576100c9565b80636e9960c3146101db5780638f283970146101f6578063a7d235be14610209576100c9565b806325839ca7116100b257806325839ca71461017a5780634b808c461461018f5780636aea75f1146101c8576100c9565b80630f2d940b146100ce578063150b7a0214610111575b600080fd5b6100fc6100dc366004611911565b600160209081526000928352604080842090915290825290205460ff1681565b60405190151581526020015b60405180910390f35b61014961011f3660046117ef565b7f150b7a020000000000000000000000000000000000000000000000000000000095945050505050565b6040517fffffffff000000000000000000000000000000000000000000000000000000009091168152602001610108565b61018d610188366004611a28565b6102b0565b005b61014961019d366004611761565b7f4b808c46000000000000000000000000000000000000000000000000000000009695505050505050565b61018d6101d6366004611a95565b61050d565b6000546040516001600160a01b039091168152602001610108565b61018d610204366004611690565b6105b6565b61021c6102173660046118c0565b610691565b6040516101089190611d4b565b6101496102373660046116aa565b7fbc197c810000000000000000000000000000000000000000000000000000000098975050505050505050565b61018d61027236600461193a565b61079c565b61014961028536600461185c565b7ff23a6e61000000000000000000000000000000000000000000000000000000009695505050505050565b60008481526002602052604090205483516001600160a01b031661031b5760405162461bcd60e51b815260206004820152601760248201527f494e56414c49445f544f5f5a45524f5f4144445245535300000000000000000060448201526064015b60405180910390fd5b83516001600160a01b031630141561039b5760405162461bcd60e51b815260206004820152602260248201527f44455354494e4154494f4e5f4d554c544947495645415741595f434f4e54524160448201527f43540000000000000000000000000000000000000000000000000000000000006064820152608401610312565b806103e85760405162461bcd60e51b815260206004820152601760248201527f47495645415741595f444f45535f4e4f545f45584953540000000000000000006044820152606401610312565b8042106104375760405162461bcd60e51b815260206004820152601460248201527f434c41494d5f504552494f445f49535f4f5645520000000000000000000000006044820152606401610312565b83516001600160a01b0316600090815260016020908152604080832088845290915290205460ff16156104ac5760405162461bcd60e51b815260206004820152601b60248201527f44455354494e4154494f4e5f414c52454144595f434c41494d454400000000006044820152606401610312565b83516001600160a01b0316600090815260016020818152604080842089855290915290912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169091179055610506858585856108c5565b5050505050565b6000546001600160a01b031633146105675760405162461bcd60e51b815260206004820152600a60248201527f41444d494e5f4f4e4c59000000000000000000000000000000000000000000006044820152606401610312565b60008281526002602090815260409182902083905581518481529081018390527fcf995c8d29c258a6c2056e0d5ddfa67f3634d25f5eed5dcf65ead06195b1a271910160405180910390a15050565b6000546001600160a01b031633146106105760405162461bcd60e51b815260206004820152601360248201527f41444d494e5f4143434553535f44454e494544000000000000000000000000006044820152606401610312565b600054604080516001600160a01b03928316815291831660208301527f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f910160405180910390a1600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b606060008267ffffffffffffffff8111156106bc57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156106e5578160200160208202803683370190505b50905060005b83811015610791576001600160a01b03861660009081526001602052604081209086868481811061072c57634e487b7160e01b600052603260045260246000fd5b90506020020135815260200190815260200160002060009054906101000a900460ff1682828151811061076f57634e487b7160e01b600052603260045260246000fd5b911515602092830291909101909101528061078981611f2c565b9150506106eb565b5090505b9392505050565b825184146107dc5760405162461bcd60e51b815260206004820152600d60248201526c1253959053125117d253941555609a1b6044820152606401610312565b8251811461081c5760405162461bcd60e51b815260206004820152600d60248201526c1253959053125117d253941555609a1b6044820152606401610312565b60005b848110156108bd576108ab86868381811061084a57634e487b7160e01b600052603260045260246000fd5b9050602002013585838151811061087157634e487b7160e01b600052603260045260246000fd5b602002602001015185858581811061089957634e487b7160e01b600052603260045260246000fd5b90506020028101906101889190611e46565b806108b581611f2c565b91505061081f565b505050505050565b6109038484848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610bb692505050565b60005b836020015151811015610a61578360200151818151811061093757634e487b7160e01b600052603260045260246000fd5b602002602001015160200151518460200151828151811061096857634e487b7160e01b600052603260045260246000fd5b60200260200101516000015151146109b25760405162461bcd60e51b815260206004820152600d60248201526c1253959053125117d253941555609a1b6044820152606401610312565b610a4f8460000151856020015183815181106109de57634e487b7160e01b600052603260045260246000fd5b60200260200101516000015186602001518481518110610a0e57634e487b7160e01b600052603260045260246000fd5b60200260200101516020015187602001518581518110610a3e57634e487b7160e01b600052603260045260246000fd5b602002602001015160400151610c20565b80610a5981611f2c565b915050610906565b5060005b836040015151811015610af157610adf846000015185604001518381518110610a9e57634e487b7160e01b600052603260045260246000fd5b60200260200101516000015186604001518481518110610ace57634e487b7160e01b600052603260045260246000fd5b602002602001015160200151610cf9565b80610ae981611f2c565b915050610a65565b506060830151515115610b6357606083015160208101515190515114610b495760405162461bcd60e51b815260206004820152600d60248201526c1253959053125117d253941555609a1b6044820152606401610312565b825160608401518051602090910151610b63929190610dcf565b7fdbf330cc6723e4f92690af8e3d5103c1b06d58e85b16421cc981f407535d2f278360000151846020015185604001518660600151604051610ba89493929190611d03565b60405180910390a150505050565b6000610bc183610ec0565b9050610bce848383610ef1565b610c1a5760405162461bcd60e51b815260206004820152600d60248201527f494e56414c49445f434c41494d000000000000000000000000000000000000006044820152606401610312565b50505050565b6001600160a01b038116610c765760405162461bcd60e51b815260206004820152601d60248201527f494e56414c49445f434f4e54524143545f5a45524f5f414444524553530000006044820152606401610312565b6040517f2eb2c2d60000000000000000000000000000000000000000000000000000000081526001600160a01b03821690632eb2c2d690610cc1903090889088908890600401611c67565b600060405180830381600087803b158015610cdb57600080fd5b505af1158015610cef573d6000803e3d6000fd5b5050505050505050565b6001600160a01b038116610d4f5760405162461bcd60e51b815260206004820152601d60248201527f494e56414c49445f434f4e54524143545f5a45524f5f414444524553530000006044820152606401610312565b6040517f28cfbd460000000000000000000000000000000000000000000000000000000081526001600160a01b038216906328cfbd4690610d9890309087908790600401611cbf565b600060405180830381600087803b158015610db257600080fd5b505af1158015610dc6573d6000803e3d6000fd5b50505050505050565b60005b8251811015610c1a576000828281518110610dfd57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000848381518110610e2957634e487b7160e01b600052603260045260246000fd5b6020026020010151905060006001600160a01b0316826001600160a01b03161415610e965760405162461bcd60e51b815260206004820152601d60248201527f494e56414c49445f434f4e54524143545f5a45524f5f414444524553530000006044820152606401610312565b610eab6001600160a01b038316308884610faf565b50508080610eb890611f2c565b915050610dd2565b600081604051602001610ed39190611dc4565b6040516020818303038152906040528051906020012090505b919050565b600081815b8451811015610fa4576000858281518110610f2157634e487b7160e01b600052603260045260246000fd5b6020026020010151905080831015610f64576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250610f91565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b5080610f9c81611f2c565b915050610ef6565b509093149392505050565b604080516001600160a01b038581166024830152848116604483015260648083018590528351808403909101815260849092018352602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656490840152610c1a9287929160009161107591851690849061110a565b80519091501561110557808060200190518101906110939190611a08565b6111055760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610312565b505050565b60606111198484600085611121565b949350505050565b6060824710156111995760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610312565b843b6111e75760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610312565b600080866001600160a01b031685876040516112039190611c4b565b60006040518083038185875af1925050503d8060008114611240576040519150601f19603f3d011682016040523d82523d6000602084013e611245565b606091505b5091509150611255828286611260565b979650505050505050565b6060831561126f575081610795565b82511561127f5782518084602001fd5b8160405162461bcd60e51b81526004016103129190611d91565b80356001600160a01b0381168114610eec57600080fd5b60008083601f8401126112c1578182fd5b50813567ffffffffffffffff8111156112d8578182fd5b60208301915083602080830285010111156112f257600080fd5b9250929050565b600082601f830112611309578081fd5b8135602061131e61131983611edc565b611eab565b82815281810190858301855b858110156113c75781358801606080601f19838d0301121561134a578889fd5b61135381611eab565b8783013567ffffffffffffffff8082111561136c578b8cfd5b61137a8e8b84880101611475565b8352604091508185013581811115611390578c8dfd5b61139e8f8c83890101611475565b8b85015250506113af838501611299565b9082015286525050928401929084019060010161132a565b5090979650505050505050565b600082601f8301126113e4578081fd5b813560206113f461131983611edc565b82815281810190858301855b858110156113c75781358801604080601f19838d03011215611420578889fd5b61142981611eab565b8783013567ffffffffffffffff811115611441578a8bfd5b61144f8d8a83870101611475565b82525061145d828401611299565b81890152865250509284019290840190600101611400565b600082601f830112611485578081fd5b8135602061149561131983611edc565b82815281810190858301838502870184018810156114b1578586fd5b855b858110156113c7578135845292840192908401906001016114b3565b60008083601f8401126114e0578182fd5b50813567ffffffffffffffff8111156114f7578182fd5b6020830191508360208285010111156112f257600080fd5b600060a08284031215611520578081fd5b61152a60a0611eab565b905061153582611299565b8152602082013567ffffffffffffffff8082111561155257600080fd5b61155e858386016112f9565b6020840152604084013591508082111561157757600080fd5b611583858386016113d4565b6040840152606084013591508082111561159c57600080fd5b506115a9848285016115bf565b6060830152506080820135608082015292915050565b6000604082840312156115d0578081fd5b6115da6040611eab565b9050813567ffffffffffffffff808211156115f457600080fd5b61160085838601611475565b835260209150818401358181111561161757600080fd5b84019050601f8101851361162a57600080fd5b803561163861131982611edc565b818152838101908385018584028501860189101561165557600080fd5b600094505b8385101561167f5761166b81611299565b83526001949094019391850191850161165a565b508085870152505050505092915050565b6000602082840312156116a1578081fd5b61079582611299565b60008060008060008060008060a0898b0312156116c5578384fd5b6116ce89611299565b97506116dc60208a01611299565b9650604089013567ffffffffffffffff808211156116f8578586fd5b6117048c838d016112b0565b909850965060608b013591508082111561171c578586fd5b6117288c838d016112b0565b909650945060808b0135915080821115611740578384fd5b5061174d8b828c016114cf565b999c989b5096995094979396929594505050565b60008060008060008060808789031215611779578384fd5b61178287611299565b955061179060208801611299565b9450604087013567ffffffffffffffff808211156117ac578586fd5b6117b88a838b016112b0565b909650945060608901359150808211156117d0578384fd5b506117dd89828a016114cf565b979a9699509497509295939492505050565b600080600080600060808688031215611806578283fd5b61180f86611299565b945061181d60208701611299565b935060408601359250606086013567ffffffffffffffff81111561183f578182fd5b61184b888289016114cf565b969995985093965092949392505050565b60008060008060008060a08789031215611874578384fd5b61187d87611299565b955061188b60208801611299565b94506040870135935060608701359250608087013567ffffffffffffffff8111156118b4578283fd5b6117dd89828a016114cf565b6000806000604084860312156118d4578081fd5b6118dd84611299565b9250602084013567ffffffffffffffff8111156118f8578182fd5b611904868287016112b0565b9497909650939450505050565b60008060408385031215611923578182fd5b61192c83611299565b946020939093013593505050565b600080600080600060608688031215611951578283fd5b853567ffffffffffffffff80821115611968578485fd5b61197489838a016112b0565b909750955060209150878201358181111561198d578586fd5b8801601f81018a1361199d578586fd5b80356119ab61131982611edc565b81815284810190838601895b848110156119e0576119ce8f89843589010161150f565b845292870192908701906001016119b7565b509098505050506040890135925050808211156119fb578283fd5b5061184b888289016112b0565b600060208284031215611a19578081fd5b81518015158114610795578182fd5b60008060008060608587031215611a3d578182fd5b84359350602085013567ffffffffffffffff80821115611a5b578384fd5b611a678883890161150f565b94506040870135915080821115611a7c578384fd5b50611a89878288016112b0565b95989497509550505050565b60008060408385031215611aa7578182fd5b50508035926020909101359150565b6000815180845260208085018081965082840281019150828601855b85811015611b36578284038952815160608151818752611af482880182611ba8565b9150508682015186820388880152611b0c8282611ba8565b6040938401516001600160a01b031697909301969096525098850198935090840190600101611ad2565b5091979650505050505050565b6000815180845260208085018081965082840281019150828601855b85811015611b36578284038952815160408151818752611b8182880182611ba8565b928801516001600160a01b0316968801969096525098850198935090840190600101611b5f565b6000815180845260208085019450808401835b83811015611bd757815187529582019590820190600101611bbb565b509495945050505050565b6000815160408452611bf76040850182611ba8565b602084810151868303878301528051808452908201935090918491908301905b80831015611c405784516001600160a01b03168252938301936001929092019190830190611c17565b509695505050505050565b60008251611c5d818460208701611f00565b9190910192915050565b60006001600160a01b03808716835280861660208401525060a06040830152611c9360a0830185611ba8565b8281036060840152611ca58185611ba8565b838103608090940193909352508152602001949350505050565b60006001600160a01b03808616835280851660208401525060806040830152611ceb6080830184611ba8565b82810360609093019290925281526020019392505050565b60006001600160a01b038616825260806020830152611d256080830186611ab6565b8281036040840152611d378186611b43565b905082810360608401526112558185611be2565b6020808252825182820181905260009190848201906040850190845b81811015611d85578351151583529284019291840191600101611d67565b50909695505050505050565b6000602082528251806020840152611db0816040850160208701611f00565b601f01601f19169190910160400192915050565b6000602082526001600160a01b038351166020830152602083015160a06040840152611df360c0840182611ab6565b90506040840151601f1980858403016060860152611e118383611b43565b9250606086015191508085840301608086015250611e2f8282611be2565b915050608084015160a08401528091505092915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112611e7a578283fd5b83018035915067ffffffffffffffff821115611e94578283fd5b60209081019250810236038213156112f257600080fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611ed457611ed4611f71565b604052919050565b600067ffffffffffffffff821115611ef657611ef6611f71565b5060209081020190565b60005b83811015611f1b578181015183820152602001611f03565b83811115610c1a5750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611f6a57634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220b4867497a2dc74b8644537bbd4f044bcb72587ab9eeac79048f4f5816640b95164736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100c95760003560e01c80636e9960c311610081578063bc197c811161005b578063bc197c8114610229578063c850933214610264578063f23a6e6114610277576100c9565b80636e9960c3146101db5780638f283970146101f6578063a7d235be14610209576100c9565b806325839ca7116100b257806325839ca71461017a5780634b808c461461018f5780636aea75f1146101c8576100c9565b80630f2d940b146100ce578063150b7a0214610111575b600080fd5b6100fc6100dc366004611911565b600160209081526000928352604080842090915290825290205460ff1681565b60405190151581526020015b60405180910390f35b61014961011f3660046117ef565b7f150b7a020000000000000000000000000000000000000000000000000000000095945050505050565b6040517fffffffff000000000000000000000000000000000000000000000000000000009091168152602001610108565b61018d610188366004611a28565b6102b0565b005b61014961019d366004611761565b7f4b808c46000000000000000000000000000000000000000000000000000000009695505050505050565b61018d6101d6366004611a95565b61050d565b6000546040516001600160a01b039091168152602001610108565b61018d610204366004611690565b6105b6565b61021c6102173660046118c0565b610691565b6040516101089190611d4b565b6101496102373660046116aa565b7fbc197c810000000000000000000000000000000000000000000000000000000098975050505050505050565b61018d61027236600461193a565b61079c565b61014961028536600461185c565b7ff23a6e61000000000000000000000000000000000000000000000000000000009695505050505050565b60008481526002602052604090205483516001600160a01b031661031b5760405162461bcd60e51b815260206004820152601760248201527f494e56414c49445f544f5f5a45524f5f4144445245535300000000000000000060448201526064015b60405180910390fd5b83516001600160a01b031630141561039b5760405162461bcd60e51b815260206004820152602260248201527f44455354494e4154494f4e5f4d554c544947495645415741595f434f4e54524160448201527f43540000000000000000000000000000000000000000000000000000000000006064820152608401610312565b806103e85760405162461bcd60e51b815260206004820152601760248201527f47495645415741595f444f45535f4e4f545f45584953540000000000000000006044820152606401610312565b8042106104375760405162461bcd60e51b815260206004820152601460248201527f434c41494d5f504552494f445f49535f4f5645520000000000000000000000006044820152606401610312565b83516001600160a01b0316600090815260016020908152604080832088845290915290205460ff16156104ac5760405162461bcd60e51b815260206004820152601b60248201527f44455354494e4154494f4e5f414c52454144595f434c41494d454400000000006044820152606401610312565b83516001600160a01b0316600090815260016020818152604080842089855290915290912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169091179055610506858585856108c5565b5050505050565b6000546001600160a01b031633146105675760405162461bcd60e51b815260206004820152600a60248201527f41444d494e5f4f4e4c59000000000000000000000000000000000000000000006044820152606401610312565b60008281526002602090815260409182902083905581518481529081018390527fcf995c8d29c258a6c2056e0d5ddfa67f3634d25f5eed5dcf65ead06195b1a271910160405180910390a15050565b6000546001600160a01b031633146106105760405162461bcd60e51b815260206004820152601360248201527f41444d494e5f4143434553535f44454e494544000000000000000000000000006044820152606401610312565b600054604080516001600160a01b03928316815291831660208301527f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f910160405180910390a1600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b606060008267ffffffffffffffff8111156106bc57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156106e5578160200160208202803683370190505b50905060005b83811015610791576001600160a01b03861660009081526001602052604081209086868481811061072c57634e487b7160e01b600052603260045260246000fd5b90506020020135815260200190815260200160002060009054906101000a900460ff1682828151811061076f57634e487b7160e01b600052603260045260246000fd5b911515602092830291909101909101528061078981611f2c565b9150506106eb565b5090505b9392505050565b825184146107dc5760405162461bcd60e51b815260206004820152600d60248201526c1253959053125117d253941555609a1b6044820152606401610312565b8251811461081c5760405162461bcd60e51b815260206004820152600d60248201526c1253959053125117d253941555609a1b6044820152606401610312565b60005b848110156108bd576108ab86868381811061084a57634e487b7160e01b600052603260045260246000fd5b9050602002013585838151811061087157634e487b7160e01b600052603260045260246000fd5b602002602001015185858581811061089957634e487b7160e01b600052603260045260246000fd5b90506020028101906101889190611e46565b806108b581611f2c565b91505061081f565b505050505050565b6109038484848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610bb692505050565b60005b836020015151811015610a61578360200151818151811061093757634e487b7160e01b600052603260045260246000fd5b602002602001015160200151518460200151828151811061096857634e487b7160e01b600052603260045260246000fd5b60200260200101516000015151146109b25760405162461bcd60e51b815260206004820152600d60248201526c1253959053125117d253941555609a1b6044820152606401610312565b610a4f8460000151856020015183815181106109de57634e487b7160e01b600052603260045260246000fd5b60200260200101516000015186602001518481518110610a0e57634e487b7160e01b600052603260045260246000fd5b60200260200101516020015187602001518581518110610a3e57634e487b7160e01b600052603260045260246000fd5b602002602001015160400151610c20565b80610a5981611f2c565b915050610906565b5060005b836040015151811015610af157610adf846000015185604001518381518110610a9e57634e487b7160e01b600052603260045260246000fd5b60200260200101516000015186604001518481518110610ace57634e487b7160e01b600052603260045260246000fd5b602002602001015160200151610cf9565b80610ae981611f2c565b915050610a65565b506060830151515115610b6357606083015160208101515190515114610b495760405162461bcd60e51b815260206004820152600d60248201526c1253959053125117d253941555609a1b6044820152606401610312565b825160608401518051602090910151610b63929190610dcf565b7fdbf330cc6723e4f92690af8e3d5103c1b06d58e85b16421cc981f407535d2f278360000151846020015185604001518660600151604051610ba89493929190611d03565b60405180910390a150505050565b6000610bc183610ec0565b9050610bce848383610ef1565b610c1a5760405162461bcd60e51b815260206004820152600d60248201527f494e56414c49445f434c41494d000000000000000000000000000000000000006044820152606401610312565b50505050565b6001600160a01b038116610c765760405162461bcd60e51b815260206004820152601d60248201527f494e56414c49445f434f4e54524143545f5a45524f5f414444524553530000006044820152606401610312565b6040517f2eb2c2d60000000000000000000000000000000000000000000000000000000081526001600160a01b03821690632eb2c2d690610cc1903090889088908890600401611c67565b600060405180830381600087803b158015610cdb57600080fd5b505af1158015610cef573d6000803e3d6000fd5b5050505050505050565b6001600160a01b038116610d4f5760405162461bcd60e51b815260206004820152601d60248201527f494e56414c49445f434f4e54524143545f5a45524f5f414444524553530000006044820152606401610312565b6040517f28cfbd460000000000000000000000000000000000000000000000000000000081526001600160a01b038216906328cfbd4690610d9890309087908790600401611cbf565b600060405180830381600087803b158015610db257600080fd5b505af1158015610dc6573d6000803e3d6000fd5b50505050505050565b60005b8251811015610c1a576000828281518110610dfd57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000848381518110610e2957634e487b7160e01b600052603260045260246000fd5b6020026020010151905060006001600160a01b0316826001600160a01b03161415610e965760405162461bcd60e51b815260206004820152601d60248201527f494e56414c49445f434f4e54524143545f5a45524f5f414444524553530000006044820152606401610312565b610eab6001600160a01b038316308884610faf565b50508080610eb890611f2c565b915050610dd2565b600081604051602001610ed39190611dc4565b6040516020818303038152906040528051906020012090505b919050565b600081815b8451811015610fa4576000858281518110610f2157634e487b7160e01b600052603260045260246000fd5b6020026020010151905080831015610f64576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250610f91565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b5080610f9c81611f2c565b915050610ef6565b509093149392505050565b604080516001600160a01b038581166024830152848116604483015260648083018590528351808403909101815260849092018352602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656490840152610c1a9287929160009161107591851690849061110a565b80519091501561110557808060200190518101906110939190611a08565b6111055760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610312565b505050565b60606111198484600085611121565b949350505050565b6060824710156111995760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610312565b843b6111e75760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610312565b600080866001600160a01b031685876040516112039190611c4b565b60006040518083038185875af1925050503d8060008114611240576040519150601f19603f3d011682016040523d82523d6000602084013e611245565b606091505b5091509150611255828286611260565b979650505050505050565b6060831561126f575081610795565b82511561127f5782518084602001fd5b8160405162461bcd60e51b81526004016103129190611d91565b80356001600160a01b0381168114610eec57600080fd5b60008083601f8401126112c1578182fd5b50813567ffffffffffffffff8111156112d8578182fd5b60208301915083602080830285010111156112f257600080fd5b9250929050565b600082601f830112611309578081fd5b8135602061131e61131983611edc565b611eab565b82815281810190858301855b858110156113c75781358801606080601f19838d0301121561134a578889fd5b61135381611eab565b8783013567ffffffffffffffff8082111561136c578b8cfd5b61137a8e8b84880101611475565b8352604091508185013581811115611390578c8dfd5b61139e8f8c83890101611475565b8b85015250506113af838501611299565b9082015286525050928401929084019060010161132a565b5090979650505050505050565b600082601f8301126113e4578081fd5b813560206113f461131983611edc565b82815281810190858301855b858110156113c75781358801604080601f19838d03011215611420578889fd5b61142981611eab565b8783013567ffffffffffffffff811115611441578a8bfd5b61144f8d8a83870101611475565b82525061145d828401611299565b81890152865250509284019290840190600101611400565b600082601f830112611485578081fd5b8135602061149561131983611edc565b82815281810190858301838502870184018810156114b1578586fd5b855b858110156113c7578135845292840192908401906001016114b3565b60008083601f8401126114e0578182fd5b50813567ffffffffffffffff8111156114f7578182fd5b6020830191508360208285010111156112f257600080fd5b600060a08284031215611520578081fd5b61152a60a0611eab565b905061153582611299565b8152602082013567ffffffffffffffff8082111561155257600080fd5b61155e858386016112f9565b6020840152604084013591508082111561157757600080fd5b611583858386016113d4565b6040840152606084013591508082111561159c57600080fd5b506115a9848285016115bf565b6060830152506080820135608082015292915050565b6000604082840312156115d0578081fd5b6115da6040611eab565b9050813567ffffffffffffffff808211156115f457600080fd5b61160085838601611475565b835260209150818401358181111561161757600080fd5b84019050601f8101851361162a57600080fd5b803561163861131982611edc565b818152838101908385018584028501860189101561165557600080fd5b600094505b8385101561167f5761166b81611299565b83526001949094019391850191850161165a565b508085870152505050505092915050565b6000602082840312156116a1578081fd5b61079582611299565b60008060008060008060008060a0898b0312156116c5578384fd5b6116ce89611299565b97506116dc60208a01611299565b9650604089013567ffffffffffffffff808211156116f8578586fd5b6117048c838d016112b0565b909850965060608b013591508082111561171c578586fd5b6117288c838d016112b0565b909650945060808b0135915080821115611740578384fd5b5061174d8b828c016114cf565b999c989b5096995094979396929594505050565b60008060008060008060808789031215611779578384fd5b61178287611299565b955061179060208801611299565b9450604087013567ffffffffffffffff808211156117ac578586fd5b6117b88a838b016112b0565b909650945060608901359150808211156117d0578384fd5b506117dd89828a016114cf565b979a9699509497509295939492505050565b600080600080600060808688031215611806578283fd5b61180f86611299565b945061181d60208701611299565b935060408601359250606086013567ffffffffffffffff81111561183f578182fd5b61184b888289016114cf565b969995985093965092949392505050565b60008060008060008060a08789031215611874578384fd5b61187d87611299565b955061188b60208801611299565b94506040870135935060608701359250608087013567ffffffffffffffff8111156118b4578283fd5b6117dd89828a016114cf565b6000806000604084860312156118d4578081fd5b6118dd84611299565b9250602084013567ffffffffffffffff8111156118f8578182fd5b611904868287016112b0565b9497909650939450505050565b60008060408385031215611923578182fd5b61192c83611299565b946020939093013593505050565b600080600080600060608688031215611951578283fd5b853567ffffffffffffffff80821115611968578485fd5b61197489838a016112b0565b909750955060209150878201358181111561198d578586fd5b8801601f81018a1361199d578586fd5b80356119ab61131982611edc565b81815284810190838601895b848110156119e0576119ce8f89843589010161150f565b845292870192908701906001016119b7565b509098505050506040890135925050808211156119fb578283fd5b5061184b888289016112b0565b600060208284031215611a19578081fd5b81518015158114610795578182fd5b60008060008060608587031215611a3d578182fd5b84359350602085013567ffffffffffffffff80821115611a5b578384fd5b611a678883890161150f565b94506040870135915080821115611a7c578384fd5b50611a89878288016112b0565b95989497509550505050565b60008060408385031215611aa7578182fd5b50508035926020909101359150565b6000815180845260208085018081965082840281019150828601855b85811015611b36578284038952815160608151818752611af482880182611ba8565b9150508682015186820388880152611b0c8282611ba8565b6040938401516001600160a01b031697909301969096525098850198935090840190600101611ad2565b5091979650505050505050565b6000815180845260208085018081965082840281019150828601855b85811015611b36578284038952815160408151818752611b8182880182611ba8565b928801516001600160a01b0316968801969096525098850198935090840190600101611b5f565b6000815180845260208085019450808401835b83811015611bd757815187529582019590820190600101611bbb565b509495945050505050565b6000815160408452611bf76040850182611ba8565b602084810151868303878301528051808452908201935090918491908301905b80831015611c405784516001600160a01b03168252938301936001929092019190830190611c17565b509695505050505050565b60008251611c5d818460208701611f00565b9190910192915050565b60006001600160a01b03808716835280861660208401525060a06040830152611c9360a0830185611ba8565b8281036060840152611ca58185611ba8565b838103608090940193909352508152602001949350505050565b60006001600160a01b03808616835280851660208401525060806040830152611ceb6080830184611ba8565b82810360609093019290925281526020019392505050565b60006001600160a01b038616825260806020830152611d256080830186611ab6565b8281036040840152611d378186611b43565b905082810360608401526112558185611be2565b6020808252825182820181905260009190848201906040850190845b81811015611d85578351151583529284019291840191600101611d67565b50909695505050505050565b6000602082528251806020840152611db0816040850160208701611f00565b601f01601f19169190910160400192915050565b6000602082526001600160a01b038351166020830152602083015160a06040840152611df360c0840182611ab6565b90506040840151601f1980858403016060860152611e118383611b43565b9250606086015191508085840301608086015250611e2f8282611be2565b915050608084015160a08401528091505092915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112611e7a578283fd5b83018035915067ffffffffffffffff821115611e94578283fd5b60209081019250810236038213156112f257600080fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611ed457611ed4611f71565b604052919050565b600067ffffffffffffffff821115611ef657611ef6611f71565b5060209081020190565b60005b83811015611f1b578181015183820152602001611f03565b83811115610c1a5750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611f6a57634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220b4867497a2dc74b8644537bbd4f044bcb72587ab9eeac79048f4f5816640b95164736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addNewGiveaway(bytes32,uint256)": {
        "params": {
          "expiryTime": "The expiry time for the giveaway.",
          "merkleRoot": "The merkle root hash of the claim data."
        }
      },
      "changeAdmin(address)": {
        "details": "Change the administrator to be `newAdmin`.",
        "params": {
          "newAdmin": "The address of the new administrator."
        }
      },
      "claimMultipleTokens(bytes32,(address,(uint256[],uint256[],address)[],(uint256[],address)[],(uint256[],address[]),bytes32),bytes32[])": {
        "details": "Public function used to perform validity checks and progress to claim multiple token types in one claim.",
        "params": {
          "claim": "The claim struct containing the destination address, all items to be claimed and optional salt param.",
          "merkleRoot": "The merkle root hash for the specific set of items being claimed.",
          "proof": "The proof provided by the user performing the claim function."
        }
      },
      "claimMultipleTokensFromMultipleMerkleTree(bytes32[],(address,(uint256[],uint256[],address)[],(uint256[],address)[],(uint256[],address[]),bytes32)[],bytes32[][])": {
        "params": {
          "claims": "The array of claim structs, each containing a destination address, the giveaway items to be claimed and an optional salt param.",
          "proofs": "The proofs submitted for verification."
        }
      },
      "getAdmin()": {
        "details": "Get the current administrator of this contract.",
        "returns": {
          "_0": "The current administrator of this contract."
        }
      },
      "getClaimedStatus(address,bytes32[])": {
        "params": {
          "rootHashes": "The array of giveaway root hashes to check.",
          "user": "The user (intended token destination) address."
        },
        "returns": {
          "_0": "claimedGiveaways The array of bools confirming whether or not the giveaways relating to the root hashes provided have been claimed."
        }
      }
    },
    "title": "MultiGiveaway contract.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addNewGiveaway(bytes32,uint256)": {
        "notice": "Function to add a new giveaway."
      },
      "claimMultipleTokensFromMultipleMerkleTree(bytes32[],(address,(uint256[],uint256[],address)[],(uint256[],address)[],(uint256[],address[]),bytes32)[],bytes32[][])": {
        "notice": "Function to permit the claiming of multiple tokens from multiple giveaways to a reserved address."
      },
      "getClaimedStatus(address,bytes32[])": {
        "notice": "Function to check which giveaways have been claimed by a particular user."
      }
    },
    "notice": "This contract manages claims for multiple token types.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15965,
        "contract": "src/solc_0.8/claims/MultiGiveaway/MultiGiveaway.sol:MultiGiveaway",
        "label": "_admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 12755,
        "contract": "src/solc_0.8/claims/MultiGiveaway/MultiGiveaway.sol:MultiGiveaway",
        "label": "claimed",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_bool))"
      },
      {
        "astId": 12759,
        "contract": "src/solc_0.8/claims/MultiGiveaway/MultiGiveaway.sol:MultiGiveaway",
        "label": "_expiryTime",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_bool)"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}