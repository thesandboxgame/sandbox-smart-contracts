{
  "language": "Solidity",
  "sources": {
    "src/solc_0.7/AssetGiveaway/AssetGiveaway.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\nimport \"./ClaimERC1155.sol\";\nimport \"../common/BaseWithStorage/WithAdmin.sol\";\n\n/// @title AssetGiveaway contract\n/// @notice This contract manages ERC1155 claims\ncontract AssetGiveaway is WithAdmin, ClaimERC1155 {\n    bytes4 private constant ERC1155_RECEIVED = 0xf23a6e61;\n    bytes4 private constant ERC1155_BATCH_RECEIVED = 0xbc197c81;\n    uint256 internal immutable _expiryTime;\n    mapping(address => bool) public claimed;\n\n    constructor(\n        address asset,\n        address admin,\n        bytes32 merkleRoot,\n        address assetsHolder,\n        uint256 expiryTime\n    ) ClaimERC1155(IERC1155(asset), assetsHolder) {\n        _admin = admin;\n        _merkleRoot = merkleRoot;\n        _expiryTime = expiryTime;\n    }\n\n    /// @notice Function to set the merkle root hash for the asset data, if it is 0\n    /// @param merkleRoot The merkle root hash of the asset data\n    function setMerkleRoot(bytes32 merkleRoot) external onlyAdmin {\n        require(_merkleRoot == 0, \"MERKLE_ROOT_ALREADY_SET\");\n        _merkleRoot = merkleRoot;\n    }\n\n    /// @notice Function to permit the claiming of an asset to a reserved address\n    /// @param to The intended recipient (reserved address) of the ERC1155 tokens\n    /// @param assetIds The array of IDs of the asset tokens\n    /// @param assetValues The amounts of each token ID to transfer\n    /// @param proof The proof submitted for verification\n    /// @param salt The salt submitted for verification\n    function claimAssets(\n        address to,\n        uint256[] calldata assetIds,\n        uint256[] calldata assetValues,\n        bytes32[] calldata proof,\n        bytes32 salt\n    ) external {\n        require(block.timestamp < _expiryTime, \"CLAIM_PERIOD_IS_OVER\");\n        require(to != address(0), \"INVALID_TO_ZERO_ADDRESS\");\n        require(claimed[to] == false, \"DESTINATION_ALREADY_CLAIMED\");\n        claimed[to] = true;\n        _claimERC1155(to, assetIds, assetValues, proof, salt);\n    }\n\n    function onERC1155Received(\n        address, /*operator*/\n        address, /*from*/\n        uint256, /*id*/\n        uint256, /*value*/\n        bytes calldata /*data*/\n    ) external pure returns (bytes4) {\n        return ERC1155_RECEIVED;\n    }\n\n    function onERC1155BatchReceived(\n        address, /*operator*/\n        address, /*from*/\n        uint256[] calldata, /*ids*/\n        uint256[] calldata, /*values*/\n        bytes calldata /*data*/\n    ) external pure returns (bytes4) {\n        return ERC1155_BATCH_RECEIVED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"../../introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"../../introspection/IERC165.sol\";\n\n/**\n * _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n\n    /**\n        @dev Handles the receipt of a single ERC1155 token type. This function is\n        called at the end of a `safeTransferFrom` after the balance has been updated.\n        To accept the transfer, this must return\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n        (i.e. 0xf23a6e61, or its own function selector).\n        @param operator The address which initiated the transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param id The ID of the token being transferred\n        @param value The amount of tokens being transferred\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n    */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    )\n        external\n        returns(bytes4);\n\n    /**\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\n        is called at the end of a `safeBatchTransferFrom` after the balances have\n        been updated. To accept the transfer(s), this must return\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n        (i.e. 0xbc197c81, or its own function selector).\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n    */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    )\n        external\n        returns(bytes4);\n}\n"
    },
    "src/solc_0.7/AssetGiveaway/ClaimERC1155.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\n\ncontract ClaimERC1155 {\n    bytes32 internal _merkleRoot;\n    IERC1155 internal immutable _asset;\n    address internal immutable _assetsHolder;\n    event ClaimedAssets(address to, uint256[] assetIds, uint256[] assetValues);\n\n    constructor(IERC1155 asset, address assetsHolder) {\n        _asset = asset;\n        if (assetsHolder == address(0)) {\n            assetsHolder = address(this);\n        }\n        _assetsHolder = assetsHolder;\n    }\n\n    function _claimERC1155(\n        address to,\n        uint256[] calldata assetIds,\n        uint256[] calldata assetValues,\n        bytes32[] calldata proof,\n        bytes32 salt\n    ) internal {\n        _checkValidity(to, assetIds, assetValues, proof, salt);\n        _sendAssets(to, assetIds, assetValues);\n        emit ClaimedAssets(to, assetIds, assetValues);\n    }\n\n    function _checkValidity(\n        address to,\n        uint256[] memory assetIds,\n        uint256[] memory assetValues,\n        bytes32[] memory proof,\n        bytes32 salt\n    ) internal view {\n        require(assetIds.length == assetValues.length, \"INVALID_INPUT\");\n        bytes32 leaf = _generateClaimHash(to, assetIds, assetValues, salt);\n        require(_verify(proof, leaf), \"INVALID_CLAIM\");\n    }\n\n    function _generateClaimHash(\n        address to,\n        uint256[] memory assetIds,\n        uint256[] memory assetValues,\n        bytes32 salt\n    ) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(to, assetIds, assetValues, salt));\n    }\n\n    function _verify(bytes32[] memory proof, bytes32 leaf) internal view returns (bool) {\n        bytes32 computedHash = leaf;\n\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n\n            if (computedHash < proofElement) {\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n            } else {\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n            }\n        }\n\n        return computedHash == _merkleRoot;\n    }\n\n    function _sendAssets(\n        address to,\n        uint256[] memory assetIds,\n        uint256[] memory assetValues\n    ) internal {\n        _asset.safeBatchTransferFrom(_assetsHolder, to, assetIds, assetValues, \"\");\n    }\n}\n"
    },
    "src/solc_0.7/common/BaseWithStorage/WithAdmin.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\ncontract WithAdmin {\n    address internal _admin;\n\n    /// @dev Emits when the contract administrator is changed.\n    /// @param oldAdmin The address of the previous administrator.\n    /// @param newAdmin The address of the new administrator.\n    event AdminChanged(address oldAdmin, address newAdmin);\n\n    modifier onlyAdmin() {\n        require(msg.sender == _admin, \"ADMIN_ONLY\");\n        _;\n    }\n\n    /// @dev Get the current administrator of this contract.\n    /// @return The current administrator of this contract.\n    function getAdmin() external view returns (address) {\n        return _admin;\n    }\n\n    /// @dev Change the administrator to be `newAdmin`.\n    /// @param newAdmin The address of the new administrator.\n    function changeAdmin(address newAdmin) external {\n        require(msg.sender == _admin, \"ADMIN_ACCESS_DENIED\");\n        emit AdminChanged(_admin, newAdmin);\n        _admin = newAdmin;\n    }\n}\n"
    },
    "@openzeppelin/contracts/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "src/solc_0.7/common/BaseWithStorage/WithMinter.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"./WithAdmin.sol\";\n\ncontract WithMinter is WithAdmin {\n    address internal _minter;\n\n    /// @dev Emits when the Minter address is changed\n    /// @param oldMinter The previous Minter address\n    /// @param newMinter The new Minter address\n    event MinterChanged(address oldMinter, address newMinter);\n\n    modifier onlyMinter() {\n        require(msg.sender == _minter, \"MINTER_ACCESS_DENIED\");\n        _;\n    }\n\n    /// @dev Get the current minter of this contract.\n    /// @return The current minter of this contract.\n    function getMinter() external view returns (address) {\n        return _minter;\n    }\n\n    /// @dev Change the minter to be `newMinter`.\n    /// @param newMinter The address of the new minter.\n    function changeMinter(address newMinter) external onlyAdmin() {\n        emit MinterChanged(_minter, newMinter);\n        _minter = newMinter;\n    }\n}\n"
    },
    "src/solc_0.7/Game/GameToken.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\npragma experimental ABIEncoderV2;\n\nimport \"../common/BaseWithStorage/ERC721BaseToken.sol\";\nimport \"../common/BaseWithStorage/WithMinter.sol\";\nimport \"../common/Interfaces/IAssetToken.sol\";\nimport \"../common/Interfaces/IGameToken.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\ncontract GameToken is ERC721BaseToken, WithMinter, IGameToken {\n    ///////////////////////////////  Libs //////////////////////////////\n\n    using SafeMath for uint256;\n\n    ///////////////////////////////  Data //////////////////////////////\n\n    IAssetToken internal immutable _asset;\n\n    bytes4 private constant ERC1155_RECEIVED = 0xf23a6e61;\n    bytes4 private constant ERC1155_BATCH_RECEIVED = 0xbc197c81;\n    uint256 private constant CREATOR_OFFSET_MULTIPLIER = uint256(2)**(256 - 160);\n    uint256 private constant SUBID_MULTIPLIER = uint256(2)**(256 - 224);\n    // ((uint256(1) * 2**224) - 1) << 32;\n    uint256 private constant STORAGE_ID_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000;\n    // ((uint256(1) * 2**32) - 1) << 200;\n    uint256 private constant VERSION_MASK = 0x000000FFFFFFFF00000000000000000000000000000000000000000000000000;\n    bytes32 private constant base32Alphabet = 0x6162636465666768696A6B6C6D6E6F707172737475767778797A323334353637;\n\n    mapping(uint256 => mapping(uint256 => uint256)) private _gameAssets;\n    mapping(address => address) private _creatorship; // creatorship transfer\n\n    mapping(uint256 => bytes32) private _metaData;\n    mapping(address => mapping(address => bool)) private _gameEditors;\n\n    ///////////////////////////////  Events //////////////////////////////\n\n    /// @dev Emits when a game is updated.\n    /// @param oldId The id of the previous erc721 GAME token.\n    /// @param newId The id of the newly minted token.\n    /// @param update The changes made to the Game: new assets, removed assets, uri\n\n    event GameTokenUpdated(uint256 indexed oldId, uint256 indexed newId, IGameToken.Update update);\n\n    /// @dev Emits when creatorship of a GAME token is transferred.\n    /// @param original The original creator of the GAME token.\n    /// @param from The current 'creator' of the token.\n    /// @param to The new 'creator' of the token.\n    event CreatorshipTransfer(address indexed original, address indexed from, address indexed to);\n\n    /// @dev Emits when an address has its gameEditor status changed.\n    /// @param gameOwner The owner of the GAME token.\n    /// @param gameEditor The address whose editor rights to update.\n    /// @param isEditor WHether the address 'gameEditor' should be an editor.\n    event GameEditorSet(address indexed gameOwner, address gameEditor, bool isEditor);\n\n    constructor(\n        address metaTransactionContract,\n        address admin,\n        IAssetToken asset\n    ) ERC721BaseToken(metaTransactionContract, admin) {\n        _asset = asset;\n    }\n\n    ///////////////////////////////  Modifiers //////////////////////////////\n\n    modifier notToZero(address to) {\n        require(to != address(0), \"DESTINATION_ZERO_ADDRESS\");\n        _;\n    }\n\n    modifier notToThis(address to) {\n        require(to != address(this), \"DESTINATION_GAME_CONTRACT\");\n        _;\n    }\n\n    ///////////////////////////////  Functions //////////////////////////////\n\n    /// @notice Allow token owner to set game editors.\n    /// @param gameOwner The address of a GAME token creator.\n    /// @param editor The address of the editor to set.\n    /// @param isEditor Add or remove the ability to edit.\n    function setGameEditor(\n        address gameOwner,\n        address editor,\n        bool isEditor\n    ) external override {\n        require(msg.sender == gameOwner || _isValidMetaTx(gameOwner), \"EDITOR_ACCESS_DENIED\");\n        _setGameEditor(gameOwner, editor, isEditor);\n    }\n\n    /// @notice Transfers creatorship of `original` from `sender` to `to`.\n    /// @param sender The address of current registered creator.\n    /// @param original The address of the original creator whose creation are saved in the ids themselves.\n    /// @param to The address which will be given creatorship for all tokens originally minted by `original`.\n    function transferCreatorship(\n        address sender,\n        address original,\n        address to\n    ) external override notToZero(to) {\n        require(\n            msg.sender == sender || _isValidMetaTx(sender) || _superOperators[msg.sender],\n            \"TRANSFER_ACCESS_DENIED\"\n        );\n        require(sender != address(0), \"NOT_FROM_ZEROADDRESS\");\n        address current = _creatorship[original];\n        if (current == address(0)) {\n            current = original;\n        }\n        require(current != to, \"CURRENT_=_TO\");\n        require(current == sender, \"CURRENT_!=_SENDER\");\n        if (to == original) {\n            _creatorship[original] = address(0);\n        } else {\n            _creatorship[original] = to;\n        }\n        emit CreatorshipTransfer(original, current, to);\n    }\n\n    /// @notice Create a new GAME token.\n    /// @param from The address of the one creating the game (may be different from msg.sender if metaTx).\n    /// @param to The address who will be assigned ownership of this game.\n    /// @param creation The struct containing ids & ammounts of assets to add to this game,\n    /// along with the uri to set.\n    /// @param editor The address to allow to edit (can also be set later).\n    /// @param subId A random id created on the backend.\n    /// @return id The id of the new GAME token (erc721).\n    function createGame(\n        address from,\n        address to,\n        Update calldata creation,\n        address editor,\n        uint64 subId\n    ) external override onlyMinter() notToZero(to) notToThis(to) returns (uint256 id) {\n        (uint256 gameId, uint256 storageId) = _mintGame(from, to, subId, 0, true);\n\n        if (editor != address(0)) {\n            _setGameEditor(to, editor, true);\n        }\n        if (creation.assetIdsToAdd.length != 0) {\n            _addAssets(from, storageId, creation.assetIdsToAdd, creation.assetAmountsToAdd);\n        }\n\n        _metaData[storageId] = creation.uri;\n        emit GameTokenUpdated(0, gameId, creation);\n        return gameId;\n    }\n\n    /// @notice Update an existing GAME token.This actually burns old token\n    /// and mints new token with same basId & incremented version.\n    /// @param from The one updating the GAME token.\n    /// @param gameId The current id of the GAME token.\n    /// @param update The values to use for the update.\n    /// @return The new gameId.\n    function updateGame(\n        address from,\n        uint256 gameId,\n        IGameToken.Update memory update\n    ) external override onlyMinter() returns (uint256) {\n        uint256 storageId = _storageId(gameId);\n        _addAssets(from, storageId, update.assetIdsToAdd, update.assetAmountsToAdd);\n        _removeAssets(storageId, update.assetIdsToRemove, update.assetAmountsToRemove, _ownerOf(gameId));\n        _metaData[storageId] = update.uri;\n        uint256 newId = _bumpGameVersion(from, gameId);\n        emit GameTokenUpdated(gameId, newId, update);\n        return newId;\n    }\n\n    /// @notice Burn a GAME token and recover assets.\n    /// @param from The address of the one destroying the game.\n    /// @param to The address to send all GAME assets to.\n    /// @param gameId The id of the GAME to destroy.\n    /// @param assetIds The assets to recover from the burnt GAME.\n    function burnAndRecover(\n        address from,\n        address to,\n        uint256 gameId,\n        uint256[] calldata assetIds\n    ) external override {\n        _burnGame(from, gameId);\n        _recoverAssets(from, to, gameId, assetIds);\n    }\n\n    /// @notice Burn a GAME token.\n    /// @param gameId The id of the GAME to destroy.\n    function burn(uint256 gameId) external override(ERC721BaseToken, IGameToken) {\n        _burnGame(msg.sender, gameId);\n    }\n\n    /// @notice Burn a GAME token on behalf of owner.\n    /// @param from The address whose GAME is being burnt.\n    /// @param gameId The id of the GAME to burn.\n    function burnFrom(address from, uint256 gameId) external override(ERC721BaseToken, IGameToken) {\n        require(from != address(0), \"NOT_FROM_ZEROADDRESS\");\n        _burnGame(from, gameId);\n    }\n\n    /// @notice Get the amount of each assetId in a GAME.\n    /// @param gameId The game to query.\n    /// @param assetIds The assets to get balances for.\n    function getAssetBalances(uint256 gameId, uint256[] calldata assetIds)\n        external\n        view\n        override\n        returns (uint256[] memory)\n    {\n        uint256 storageId = _storageId(gameId);\n        require(_ownerOf(gameId) != address(0), \"NONEXISTANT_TOKEN\");\n        uint256 length = assetIds.length;\n        uint256[] memory assets;\n        assets = new uint256[](length);\n        for (uint256 i = 0; i < length; i++) {\n            assets[i] = _gameAssets[storageId][assetIds[i]];\n        }\n        return assets;\n    }\n\n    /// @notice Get game editor status.\n    /// @param gameOwner The address of the owner of the GAME.\n    /// @param editor The address of the editor to set.\n    /// @return isEditor Editor status of editor for given tokenId.\n    function isGameEditor(address gameOwner, address editor) external view override returns (bool isEditor) {\n        return _gameEditors[gameOwner][editor];\n    }\n\n    /// @notice Called by other contracts to check if this can receive erc1155 batch.\n    /// @param operator The address of the operator in the current tx.\n    /// @return the bytes4 value 0xbc197c81.\n    function onERC1155BatchReceived(\n        address operator,\n        address, /*from*/\n        uint256[] calldata, /*ids*/\n        uint256[] calldata, /*values*/\n        bytes calldata /*data*/\n    ) external view override returns (bytes4) {\n        if (operator == address(this)) {\n            return ERC1155_BATCH_RECEIVED;\n        }\n        revert(\"ERC1155_BATCH_REJECTED\");\n    }\n\n    /// @notice Called by other contracts to check if this can receive erc1155 tokens.\n    /// @param operator The address of the operator in the current tx.\n    /// @return the bytes4 value 0xf23a6e61.\n    function onERC1155Received(\n        address operator,\n        address, /*from*/\n        uint256, /*id*/\n        uint256, /*value*/\n        bytes calldata /*data*/\n    ) external view override returns (bytes4) {\n        if (operator == address(this)) {\n            return ERC1155_RECEIVED;\n        }\n        revert(\"ERC1155_REJECTED\");\n    }\n\n    /// @notice Get the first token id minted using the same storageId as given tokenId.\n    /// Can be useful in tracking lineage of a token.\n    /// @param gameId The tokenId for which to find the first token Id.\n    /// @return The first token minted with this base id.\n    function originalId(uint256 gameId) external pure override returns (uint256) {\n        return _storageId(gameId) + uint32(1);\n    }\n\n    /// @notice Return the name of the token contract.\n    /// @return The name of the token contract.\n    function name() external pure override returns (string memory) {\n        return \"The Sandbox: GAME token\";\n    }\n\n    /// @notice Get the symbol of the token contract.\n    /// @return the symbol of the token contract.\n    function symbol() external pure override returns (string memory) {\n        return \"GAME\";\n    }\n\n    /// @notice Get the creator of the token type `id`.\n    /// @param id The id of the token to get the creator of.\n    /// @return the creator of the token type `id`.\n    function creatorOf(uint256 id) public view override returns (address) {\n        require(id != uint256(0), \"GAME_NEVER_MINTED\");\n        address originalCreator = address(id / CREATOR_OFFSET_MULTIPLIER);\n        address newCreator = _creatorship[originalCreator];\n        if (newCreator != address(0)) {\n            return newCreator;\n        }\n        return originalCreator;\n    }\n\n    /// @notice Return the URI of a specific token.\n    /// @param gameId The id of the token.\n    /// @return uri The URI of the token metadata.\n    function tokenURI(uint256 gameId) public view override returns (string memory uri) {\n        require(_ownerOf(gameId) != address(0), \"BURNED_OR_NEVER_MINTED\");\n        uint256 storageId = _storageId(gameId);\n        return _toFullURI(_metaData[storageId]);\n    }\n\n    /// @notice Transfer assets from a burnt GAME.\n    /// @param from Previous owner of the burnt game.\n    /// @param to Address that will receive the assets.\n    /// @param gameId Id of the burnt GAME token.\n    /// @param assetIds The assets to recover from the burnt GAME.\n    function recoverAssets(\n        address from,\n        address to,\n        uint256 gameId,\n        uint256[] memory assetIds\n    ) public override {\n        _recoverAssets(from, to, gameId, assetIds);\n    }\n\n    /// @notice Check if the contract supports an interface.\n    /// 0x01ffc9a7 is ERC-165.\n    /// 0x80ac58cd is ERC-721.\n    /// @param id The id of the interface.\n    /// @return if the interface is supported.\n    function supportsInterface(bytes4 id) public pure override returns (bool) {\n        return id == 0x01ffc9a7 || id == 0x80ac58cd || id == 0x5b5e139f;\n    }\n\n    /// @notice Add assets to an existing GAME.\n    /// @param from The address of the current owner of assets.\n    /// @param storageId The storageId of the GAME to add assets to.\n    /// @param assetIds The id of the asset to add to GAME.\n    /// @param amounts The amount of each asset to add to GAME.\n    function _addAssets(\n        address from,\n        uint256 storageId,\n        uint256[] memory assetIds,\n        uint256[] memory amounts\n    ) internal {\n        if (assetIds.length == 0) {\n            return;\n        }\n        require(assetIds.length == amounts.length, \"INVALID_INPUT_LENGTHS\");\n        uint256 currentValue;\n        for (uint256 i = 0; i < assetIds.length; i++) {\n            currentValue = _gameAssets[storageId][assetIds[i]];\n            require(amounts[i] != 0, \"INVALID_ASSET_ADDITION\");\n            _gameAssets[storageId][assetIds[i]] = currentValue.add(amounts[i]);\n        }\n        if (assetIds.length == 1) {\n            _asset.safeTransferFrom(from, address(this), assetIds[0], amounts[0], \"\");\n        } else {\n            _asset.safeBatchTransferFrom(from, address(this), assetIds, amounts, \"\");\n        }\n    }\n\n    /// @notice Remove assets from a GAME.\n    /// @param storageId The storageId of the GAME to remove assets from.\n    /// @param assetIds An array of asset Ids to remove.\n    /// @param values An array of the number of each asset id to remove.\n    /// @param to The address to send removed assets to.\n    function _removeAssets(\n        uint256 storageId,\n        uint256[] memory assetIds,\n        uint256[] memory values,\n        address to\n    ) internal {\n        if (assetIds.length == 0) {\n            return;\n        }\n        require(assetIds.length == values.length && assetIds.length != 0, \"INVALID_INPUT_LENGTHS\");\n        uint256 currentValue;\n        for (uint256 i = 0; i < assetIds.length; i++) {\n            currentValue = _gameAssets[storageId][assetIds[i]];\n            require(currentValue != 0 && values[i] != 0 && values[i] <= currentValue, \"INVALID_ASSET_REMOVAL\");\n            _gameAssets[storageId][assetIds[i]] = currentValue.sub(values[i]);\n        }\n\n        if (assetIds.length == 1) {\n            _asset.safeTransferFrom(address(this), to, assetIds[0], values[0], \"\");\n        } else {\n            _asset.safeBatchTransferFrom(address(this), to, assetIds, values, \"\");\n        }\n    }\n\n    /// @dev See burn / burnFrom.\n    function _burnGame(address from, uint256 gameId) internal {\n        uint256 storageId = _storageId(gameId);\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(storageId);\n        require(\n            msg.sender == owner ||\n                _isValidMetaTx(from) ||\n                (operatorEnabled && _operators[storageId] == msg.sender) ||\n                _superOperators[msg.sender] ||\n                _operatorsForAll[from][msg.sender],\n            \"UNAUTHORIZED_BURN\"\n        );\n\n        delete _metaData[storageId];\n        _creatorship[creatorOf(gameId)] = address(0);\n        _burn(from, owner, gameId);\n    }\n\n    /// @dev See recoverAssets.\n    function _recoverAssets(\n        address from,\n        address to,\n        uint256 gameId,\n        uint256[] memory assetIds\n    ) internal notToZero(to) notToThis(to) {\n        require(_ownerOf(gameId) == address(0), \"ONLY_FROM_BURNED_TOKEN\");\n        bool validMetaTx = _isValidMetaTx(from);\n        uint256 storageId = _storageId(gameId);\n        if (!validMetaTx) {\n            require(from == msg.sender, \"INVALID_RECOVERY\");\n        }\n        _check_withdrawal_authorized(from, gameId);\n        require(assetIds.length > 0, \"WITHDRAWAL_COMPLETE\");\n        uint256[] memory values;\n        values = new uint256[](assetIds.length);\n        for (uint256 i = 0; i < assetIds.length; i++) {\n            values[i] = _gameAssets[storageId][assetIds[i]];\n            delete _gameAssets[storageId][assetIds[i]];\n        }\n        _asset.safeBatchTransferFrom(address(this), to, assetIds, values, \"\");\n\n        Update memory recovery;\n        recovery.assetIdsToRemove = assetIds;\n        recovery.assetAmountsToRemove = values;\n        emit GameTokenUpdated(gameId, 0, recovery);\n    }\n\n    /// @dev Create a new gameId and associate it with an owner.\n    /// @param from The address of one creating the game.\n    /// @param to The address of the Game owner.\n    /// @param subId The id to use when generating the new GameId.\n    /// @param version The version number part of the gameId.\n    /// @param isCreation Whether this is a brand new GAME (as opposed to an update).\n    /// @return id The newly created gameId.\n    function _mintGame(\n        address from,\n        address to,\n        uint64 subId,\n        uint32 version,\n        bool isCreation\n    ) internal returns (uint256 id, uint256 storageId) {\n        uint32 idVersion;\n        uint256 gameId;\n        uint256 storageId;\n        if (isCreation) {\n            idVersion = 1;\n            gameId = _generateGameId(from, subId, idVersion);\n            storageId = _storageId(gameId);\n            require(_owners[storageId] == 0, \"STORAGE_ID_REUSE_FORBIDDEN\");\n        } else {\n            idVersion = version;\n            gameId = _generateGameId(from, subId, idVersion);\n            storageId = _storageId(gameId);\n        }\n\n        _owners[storageId] = (uint256(idVersion) << 200) + uint256(to);\n        _numNFTPerAddress[to]++;\n        emit Transfer(address(0), to, gameId);\n        return (gameId, storageId);\n    }\n\n    /// @dev Allow token owner to set game editors.\n    /// @param gameCreator The address of a GAME creator,\n    /// @param editor The address of the editor to set.\n    /// @param isEditor Add or remove the ability to edit.\n    function _setGameEditor(\n        address gameCreator,\n        address editor,\n        bool isEditor\n    ) internal {\n        emit GameEditorSet(gameCreator, editor, isEditor);\n        _gameEditors[gameCreator][editor] = isEditor;\n    }\n\n    /// @dev Bumps the version number of a game token, buring the previous\n    /// version and minting a new one.\n    /// @param from The address of the GAME token owner.\n    /// @param gameId The Game token to bump the version of.\n    /// @return The new gameId.\n    function _bumpGameVersion(address from, uint256 gameId) internal returns (uint256) {\n        address originalCreator = address(gameId / CREATOR_OFFSET_MULTIPLIER);\n        uint64 subId = uint64(gameId / SUBID_MULTIPLIER);\n        uint32 version = uint32(gameId);\n        version++;\n        address owner = _ownerOf(gameId);\n        if (from == owner) {\n            // caller is owner or metaTx on owner's behalf\n            _burn(from, owner, gameId);\n        } else if (_gameEditors[owner][from]) {\n            // caller is editor or metaTx on editor's behalf, so we need to pass owner\n            // instead of from or _burn will fail\n            _burn(owner, owner, gameId);\n        }\n        (uint256 newId, ) = _mintGame(originalCreator, owner, subId, version, false);\n        address newOwner = _ownerOf(newId);\n        assert(owner == newOwner);\n        return newId;\n    }\n\n    /// @dev Check if a withdrawal is allowed.\n    /// @param from The address requesting the withdrawal.\n    /// @param gameId The id of the GAME token to withdraw assets from.\n    function _check_withdrawal_authorized(address from, uint256 gameId) internal view {\n        require(from != address(0), \"SENDER_ZERO_ADDRESS\");\n        require(from == _withdrawalOwnerOf(gameId), \"LAST_OWNER_NOT_EQUAL_SENDER\");\n    }\n\n    /// @dev Get the address allowed to withdraw assets from the GAME token.\n    /// If too many assets in GAME, block.gaslimit won't allow detroy and withdraw in 1 tx.\n    /// A game owner may destroy their GAME token, then withdraw assets in a later tx (even\n    /// though ownerOf(id) would be address(0) after burning.)\n    /// @param id The id of the GAME token to query.\n    /// @return the address of the owner before burning.\n    function _withdrawalOwnerOf(uint256 id) internal view returns (address) {\n        uint256 packedData = _owners[_storageId(id)];\n        if ((packedData & BURNED_FLAG) == BURNED_FLAG) {\n            return address(packedData);\n        }\n        return address(0);\n    }\n\n    /// @dev A GameToken-specific implementation which handles versioned tokenIds.\n    /// @param id The tokenId to get the owner of.\n    /// @return The address of the owner.\n    function _ownerOf(uint256 id) internal view override returns (address) {\n        uint256 packedData = _owners[_storageId(id)];\n        uint32 idVersion = uint32(id);\n        uint32 storageVersion = uint32((packedData & VERSION_MASK) >> 200);\n\n        if (((packedData & BURNED_FLAG) == BURNED_FLAG) || idVersion != storageVersion) {\n            return address(0);\n        }\n        return address(packedData);\n    }\n\n    /// @dev Get the storageId (full id without the version number) from the full tokenId.\n    /// @param id The full tokenId for the GAME token.\n    /// @return The storageId.\n    function _storageId(uint256 id) internal pure override returns (uint256) {\n        return uint256(id & STORAGE_ID_MASK);\n    }\n\n    /// @dev Create a new gameId and associate it with an owner.\n    /// This is a packed id, consisting of 3 parts:\n    /// the creator's address, a uint64 subId and a uint32 version number.\n    /// @param creator The address of the Game creator.\n    /// @param subId The id to use when generating the new GameId.\n    function _generateGameId(\n        address creator,\n        uint64 subId,\n        uint32 version\n    ) internal pure returns (uint256) {\n        return uint256(creator) * CREATOR_OFFSET_MULTIPLIER + uint64(subId) * SUBID_MULTIPLIER + uint32(version);\n    }\n\n    /// @dev Get the a full URI string for a given hash + gameId.\n    /// @param hash The 32 byte IPFS hash.\n    /// @return The URI string.\n    function _toFullURI(bytes32 hash) internal pure returns (string memory) {\n        return string(abi.encodePacked(\"ipfs://bafybei\", hash2base32(hash), \"/\", \"game.json\"));\n    }\n\n    /// @dev Convert a 32 byte hash to a base 32 string.\n    /// @param hash A 32 byte (IPFS) hash.\n    /// @return _uintAsString The hash as a base 32 string.\n    // solium-disable-next-line security/no-assign-params\n    function hash2base32(bytes32 hash) private pure returns (string memory _uintAsString) {\n        uint256 _i = uint256(hash);\n        uint256 k = 52;\n        bytes memory bstr = new bytes(k);\n        bstr[--k] = base32Alphabet[uint8((_i % 8) << 2)]; // uint8 s = uint8((256 - skip) % 5);  // (_i % (2**s)) << (5-s)\n        _i /= 8;\n        while (k > 0) {\n            bstr[--k] = base32Alphabet[_i % 32];\n            _i /= 32;\n        }\n        return string(bstr);\n    }\n}\n"
    },
    "src/solc_0.7/common/BaseWithStorage/ERC721BaseToken.sol": {
      "content": "//SPDX-License-Identifier: MIT\n/* solhint-disable func-order, code-complexity */\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"../BaseWithStorage/WithSuperOperators.sol\";\nimport \"../BaseWithStorage/WithMetaTransaction.sol\";\nimport \"../Interfaces/IERC721MandatoryTokenReceiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\ncontract ERC721BaseToken is IERC721, WithSuperOperators, WithMetaTransaction {\n    using Address for address;\n\n    bytes4 internal constant _ERC721_RECEIVED = 0x150b7a02;\n    bytes4 internal constant _ERC721_BATCH_RECEIVED = 0x4b808c46;\n\n    bytes4 internal constant ERC165ID = 0x01ffc9a7;\n    bytes4 internal constant ERC721_MANDATORY_RECEIVER = 0x5e8bf644;\n\n    uint256 internal constant NOT_ADDRESS = 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000;\n    uint256 internal constant OPERATOR_FLAG = (2**255);\n    uint256 internal constant NOT_OPERATOR_FLAG = OPERATOR_FLAG - 1;\n    uint256 internal constant BURNED_FLAG = (2**160);\n\n    mapping(address => uint256) internal _numNFTPerAddress;\n    mapping(uint256 => uint256) internal _owners;\n    mapping(address => mapping(address => bool)) internal _operatorsForAll;\n    mapping(uint256 => address) internal _operators;\n\n    constructor(address metaTransactionContract, address admin) {\n        _admin = admin;\n        _setMetaTransactionProcessor(metaTransactionContract, METATX_SANDBOX);\n    }\n\n    /// @notice Approve an operator to spend tokens on the senders behalf.\n    /// @param operator The address receiving the approval.\n    /// @param id The id of the token.\n    function approve(address operator, uint256 id) external override {\n        uint256 ownerData = _owners[_storageId(id)];\n        address owner = address(ownerData);\n        require(owner != address(0), \"NONEXISTENT_TOKEN\");\n        require(\n            owner == msg.sender || _superOperators[msg.sender] || _operatorsForAll[owner][msg.sender],\n            \"UNAUTHORIZED_APPROVAL\"\n        );\n        _approveFor(ownerData, operator, id);\n    }\n\n    /// @notice Approve an operator to spend tokens on the sender behalf.\n    /// @param sender The address giving the approval.\n    /// @param operator The address receiving the approval.\n    /// @param id The id of the token.\n    function approveFor(\n        address sender,\n        address operator,\n        uint256 id\n    ) external {\n        uint256 ownerData = _owners[_storageId(id)];\n        require(sender != address(0), \"ZERO_ADDRESS_SENDER\");\n        require(\n            msg.sender == sender ||\n                _isValidMetaTx(sender) ||\n                _superOperators[msg.sender] ||\n                _operatorsForAll[sender][msg.sender],\n            \"UNAUTHORIZED_APPROVAL\"\n        );\n        require(address(ownerData) == sender, \"OWNER_NOT_SENDER\");\n        _approveFor(ownerData, operator, id);\n    }\n\n    /// @notice Transfer a token between 2 addresses.\n    /// @param from The sender of the token.\n    /// @param to The recipient of the token.\n    /// @param id The id of the token.\n    function transferFrom(\n        address from,\n        address to,\n        uint256 id\n    ) external override {\n        bool metaTx = _checkTransfer(from, to, id);\n        _transferFrom(from, to, id);\n        if (to.isContract() && _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER)) {\n            require(_checkOnERC721Received(metaTx ? from : msg.sender, from, to, id, \"\"), \"ERC721_TRANSFER_REJECTED\");\n        }\n    }\n\n    /// @notice Transfer a token between 2 addresses letting the receiver know of the transfer.\n    /// @param from The send of the token.\n    /// @param to The recipient of the token.\n    /// @param id The id of the token.\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id\n    ) external override {\n        safeTransferFrom(from, to, id, \"\");\n    }\n\n    /// @notice Transfer many tokens between 2 addresses.\n    /// @param from The sender of the token.\n    /// @param to The recipient of the token.\n    /// @param ids The ids of the tokens.\n    /// @param data Additional data.\n    function batchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        bytes calldata data\n    ) external {\n        _batchTransferFrom(from, to, ids, data, false);\n    }\n\n    /// @notice Transfer many tokens between 2 addresses, while\n    /// ensuring the receiving contract has a receiver method.\n    /// @param from The sender of the token.\n    /// @param to The recipient of the token.\n    /// @param ids The ids of the tokens.\n    /// @param data Additional data.\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        bytes calldata data\n    ) external {\n        _batchTransferFrom(from, to, ids, data, true);\n    }\n\n    /// @notice Set the approval for an operator to manage all the tokens of the sender.\n    /// @param sender The address giving the approval.\n    /// @param operator The address receiving the approval.\n    /// @param approved The determination of the approval.\n    function setApprovalForAllFor(\n        address sender,\n        address operator,\n        bool approved\n    ) external {\n        require(sender != address(0), \"Invalid sender address\");\n        require(\n            msg.sender == sender || _isValidMetaTx(sender) || _superOperators[msg.sender],\n            \"UNAUTHORIZED_APPROVE_FOR_ALL\"\n        );\n\n        _setApprovalForAll(sender, operator, approved);\n    }\n\n    /// @notice Set the approval for an operator to manage all the tokens of the sender.\n    /// @param operator The address receiving the approval.\n    /// @param approved The determination of the approval.\n    function setApprovalForAll(address operator, bool approved) external override {\n        _setApprovalForAll(msg.sender, operator, approved);\n    }\n\n    /// @notice Burns token `id`.\n    /// @param id The token which will be burnt.\n    function burn(uint256 id) external virtual {\n        _burn(msg.sender, _ownerOf(id), id);\n    }\n\n    /// @notice Burn token`id` from `from`.\n    /// @param from address whose token is to be burnt.\n    /// @param id The token which will be burnt.\n    function burnFrom(address from, uint256 id) external virtual {\n        require(from != address(0), \"NOT_FROM_ZEROADDRESS\");\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\n        require(\n            msg.sender == from ||\n                _isValidMetaTx(from) ||\n                (operatorEnabled && _operators[id] == msg.sender) ||\n                _superOperators[msg.sender] ||\n                _operatorsForAll[from][msg.sender],\n            \"UNAUTHORIZED_BURN\"\n        );\n        _burn(from, owner, id);\n    }\n\n    /// @notice Get the number of tokens owned by an address.\n    /// @param owner The address to look for.\n    /// @return The number of tokens owned by the address.\n    function balanceOf(address owner) external view override returns (uint256) {\n        require(owner != address(0), \"ZERO_ADDRESS_OWNER\");\n        return _numNFTPerAddress[owner];\n    }\n\n    /// @notice Get the owner of a token.\n    /// @param id The id of the token.\n    /// @return owner The address of the token owner.\n    function ownerOf(uint256 id) external view override returns (address owner) {\n        owner = _ownerOf(id);\n        require(owner != address(0), \"NONEXISTANT_TOKEN\");\n    }\n\n    /// @notice Get the approved operator for a specific token.\n    /// @param id The id of the token.\n    /// @return The address of the operator.\n    function getApproved(uint256 id) external view override returns (address) {\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\n        require(owner != address(0), \"NONEXISTENT_TOKEN\");\n        if (operatorEnabled) {\n            return _operators[id];\n        } else {\n            return address(0);\n        }\n    }\n\n    /// @notice Check if the sender approved the operator.\n    /// @param owner The address of the owner.\n    /// @param operator The address of the operator.\n    /// @return isOperator The status of the approval.\n    function isApprovedForAll(address owner, address operator) external view override returns (bool isOperator) {\n        return _operatorsForAll[owner][operator] || _superOperators[operator];\n    }\n\n    /// @notice Transfer a token between 2 addresses letting the receiver knows of the transfer.\n    /// @param from The sender of the token.\n    /// @param to The recipient of the token.\n    /// @param id The id of the token.\n    /// @param data Additional data.\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        bytes memory data\n    ) public override {\n        bool metaTx = _checkTransfer(from, to, id);\n        _transferFrom(from, to, id);\n        if (to.isContract()) {\n            require(_checkOnERC721Received(metaTx ? from : msg.sender, from, to, id, data), \"ERC721_TRANSFER_REJECTED\");\n        }\n    }\n\n    /// @notice Check if the contract supports an interface.\n    /// 0x01ffc9a7 is ERC-165.\n    /// 0x80ac58cd is ERC-721\n    /// @param id The id of the interface.\n    /// @return Whether the interface is supported.\n    function supportsInterface(bytes4 id) public pure virtual override returns (bool) {\n        return id == 0x01ffc9a7 || id == 0x80ac58cd;\n    }\n\n    /// @dev By overriding this function in an implementation which inherits this contract, you can enable versioned tokenIds without the extra overhead of writing to a new storage slot in _owners each time a version is incremented. See GameToken._storageId() for an example, where the storageId is the tokenId minus the version number.\n    /// !!! Caution !!! Overriding this function without taking appropriate care could lead to\n    /// ownerOf() returning an owner for non-existent tokens. Tests should be written to\n    /// guard against introducing this bug.\n    /// @param id The id of a token.\n    /// @return The id used for storage mappings.\n    function _storageId(uint256 id) internal view virtual returns (uint256) {\n        return id;\n    }\n\n    function _updateOwnerData(\n        uint256 id,\n        uint256 oldData,\n        address newOwner,\n        bool hasOperator\n    ) internal virtual {\n        if (hasOperator) {\n            _owners[_storageId(id)] = (oldData & NOT_ADDRESS) | OPERATOR_FLAG | uint256(newOwner);\n        } else {\n            _owners[_storageId(id)] = ((oldData & NOT_ADDRESS) & NOT_OPERATOR_FLAG) | uint256(newOwner);\n        }\n    }\n\n    function _transferFrom(\n        address from,\n        address to,\n        uint256 id\n    ) internal {\n        _numNFTPerAddress[from]--;\n        _numNFTPerAddress[to]++;\n        _updateOwnerData(id, _owners[_storageId(id)], to, false);\n        emit Transfer(from, to, id);\n    }\n\n    /// @dev See approveFor.\n    function _approveFor(\n        uint256 ownerData,\n        address operator,\n        uint256 id\n    ) internal {\n        address owner = address(ownerData);\n        if (operator == address(0)) {\n            _updateOwnerData(id, ownerData, owner, false);\n        } else {\n            _updateOwnerData(id, ownerData, owner, true);\n            _operators[id] = operator;\n        }\n        emit Approval(owner, operator, id);\n    }\n\n    /// @dev See batchTransferFrom.\n    function _batchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        bytes memory data,\n        bool safe\n    ) internal {\n        bool metaTx = _isValidMetaTx(from);\n        bool authorized = msg.sender == from ||\n            metaTx ||\n            _superOperators[msg.sender] ||\n            _operatorsForAll[from][msg.sender];\n\n        require(from != address(0), \"NOT_FROM_ZEROADDRESS\");\n        require(to != address(0), \"NOT_TO_ZEROADDRESS\");\n\n        uint256 numTokens = ids.length;\n        for (uint256 i = 0; i < numTokens; i++) {\n            uint256 id = ids[i];\n            (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\n            require(owner == from, \"BATCHTRANSFERFROM_NOT_OWNER\");\n            require(authorized || (operatorEnabled && _operators[id] == msg.sender), \"NOT_AUTHORIZED\");\n            _updateOwnerData(id, _owners[_storageId(id)], to, false);\n            emit Transfer(from, to, id);\n        }\n        if (from != to) {\n            _numNFTPerAddress[from] -= numTokens;\n            _numNFTPerAddress[to] += numTokens;\n        }\n\n        if (to.isContract() && (safe || _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER))) {\n            require(\n                _checkOnERC721BatchReceived(metaTx ? from : msg.sender, from, to, ids, data),\n                \"ERC721_BATCH_TRANSFER_REJECTED\"\n            );\n        }\n    }\n\n    /// @dev See setApprovalForAll.\n    function _setApprovalForAll(\n        address sender,\n        address operator,\n        bool approved\n    ) internal {\n        require(!_superOperators[operator], \"INVALID_APPROVAL_CHANGE\");\n        _operatorsForAll[sender][operator] = approved;\n\n        emit ApprovalForAll(sender, operator, approved);\n    }\n\n    /// @dev See burn.\n    function _burn(\n        address from,\n        address owner,\n        uint256 id\n    ) internal {\n        require(from == owner, \"NOT_OWNER\");\n        uint256 storageId = _storageId(id);\n        _owners[storageId] = (_owners[storageId] & NOT_OPERATOR_FLAG) | BURNED_FLAG; // record as non owner but keep track of last owner\n        _numNFTPerAddress[from]--;\n        emit Transfer(from, address(0), id);\n    }\n\n    /// @dev Check if receiving contract accepts erc721 transfers.\n    /// @param operator The address of the operator.\n    /// @param from The from address, may be different from msg.sender.\n    /// @param to The adddress we want to transfer to.\n    /// @param tokenId The id of the token we would like to transfer.\n    /// @param _data Any additional data to send with the transfer.\n    /// @return Whether the expected value of 0x150b7a02 is returned.\n    function _checkOnERC721Received(\n        address operator,\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal returns (bool) {\n        bytes4 retval = IERC721Receiver(to).onERC721Received(operator, from, tokenId, _data);\n        return (retval == _ERC721_RECEIVED);\n    }\n\n    /// @dev Check if receiving contract accepts erc721 batch transfers.\n    /// @param operator The address of the operator.\n    /// @param from The from address, may be different from msg.sender.\n    /// @param to The adddress we want to transfer to.\n    /// @param ids The ids of the tokens we would like to transfer.\n    /// @param _data Any additional data to send with the transfer.\n    /// @return Whether the expected value of 0x4b808c46 is returned.\n    function _checkOnERC721BatchReceived(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        bytes memory _data\n    ) internal returns (bool) {\n        bytes4 retval = IERC721MandatoryTokenReceiver(to).onERC721BatchReceived(operator, from, ids, _data);\n        return (retval == _ERC721_BATCH_RECEIVED);\n    }\n\n    /// @dev See ownerOf\n    function _ownerOf(uint256 id) internal view virtual returns (address) {\n        uint256 data = _owners[_storageId(id)];\n        if ((data & BURNED_FLAG) == BURNED_FLAG) {\n            return address(0);\n        }\n        return address(data);\n    }\n\n    /// @dev Get the owner and operatorEnabled status of a token.\n    /// @param id The token to query.\n    /// @return owner The owner of the token.\n    /// @return operatorEnabled Whether or not operators are enabled for this token.\n    function _ownerAndOperatorEnabledOf(uint256 id) internal view returns (address owner, bool operatorEnabled) {\n        uint256 data = _owners[_storageId(id)];\n        if ((data & BURNED_FLAG) == BURNED_FLAG) {\n            owner = address(0);\n        } else {\n            owner = address(data);\n        }\n        operatorEnabled = (data / OPERATOR_FLAG) == 1;\n    }\n\n    /// @dev Check whether a transfer is a meta Transaction or not.\n    /// @param from The address who initiated the transfer (may differ from msg.sender).\n    /// @param to The address recieving the token.\n    /// @param id The token being transferred.\n    /// @return isMetaTx Whether or not the transaction is a MetaTx.\n    function _checkTransfer(\n        address from,\n        address to,\n        uint256 id\n    ) internal view returns (bool isMetaTx) {\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\n        require(owner != address(0), \"NONEXISTENT_TOKEN\");\n        require(owner == from, \"CHECKTRANSFER_NOT_OWNER\");\n        require(to != address(0), \"NOT_TO_ZEROADDRESS\");\n        isMetaTx = _isValidMetaTx(from);\n        if (msg.sender != from && !isMetaTx) {\n            require(\n                _superOperators[msg.sender] ||\n                    _operatorsForAll[from][msg.sender] ||\n                    (operatorEnabled && _operators[id] == msg.sender),\n                \"UNAUTHORIZED_TRANSFER\"\n            );\n        }\n    }\n\n    /// @dev Check if there was enough gas.\n    /// @param _contract The address of the contract to check.\n    /// @param interfaceId The id of the interface we want to test.\n    /// @return Whether or not this check succeeded.\n    function _checkInterfaceWith10000Gas(address _contract, bytes4 interfaceId) internal view returns (bool) {\n        bool success;\n        bool result;\n        bytes memory callData = abi.encodeWithSelector(ERC165ID, interfaceId);\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let call_ptr := add(0x20, callData)\n            let call_size := mload(callData)\n            let output := mload(0x40) // Find empty storage location using \"free memory pointer\"\n            mstore(output, 0x0)\n            success := staticcall(10000, _contract, call_ptr, call_size, output, 0x20) // 32 bytes\n            result := mload(output)\n        }\n        // (10000 / 63) \"not enough for supportsInterface(...)\" // consume all gas, so caller can potentially know that there was not enough gas\n        assert(gasleft() > 158);\n        return success && result;\n    }\n}\n"
    },
    "src/solc_0.7/common/Interfaces/IAssetToken.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\ninterface IAssetToken {\n    function mint(\n        address creator,\n        uint40 packId,\n        bytes32 hash,\n        uint256 supply,\n        uint8 rarity,\n        address owner,\n        bytes calldata data\n    ) external returns (uint256 id);\n\n    function mintMultiple(\n        address creator,\n        uint40 packId,\n        bytes32 hash,\n        uint256[] calldata supplies,\n        bytes calldata rarityPack,\n        address owner,\n        bytes calldata data\n    ) external returns (uint256[] memory ids);\n\n    // fails on non-NFT or nft who do not have collection (was a mistake)\n    function collectionOf(uint256 id) external view returns (uint256);\n\n    function balanceOf(address owner, uint256 id) external view returns (uint256);\n\n    // return true for Non-NFT ERC1155 tokens which exists\n    function isCollection(uint256 id) external view returns (bool);\n\n    function collectionIndexOf(uint256 id) external view returns (uint256);\n\n    function extractERC721From(\n        address sender,\n        uint256 id,\n        address to\n    ) external returns (uint256 newId);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 id\n    ) external;\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id\n    ) external;\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external;\n\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        bytes calldata data\n    ) external;\n\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external;\n\n    function isSuperOperator(address who) external view returns (bool);\n}\n"
    },
    "src/solc_0.7/common/Interfaces/IGameToken.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\npragma experimental ABIEncoderV2;\n\n/// @title Interface for the Game token\n\ninterface IGameToken {\n    struct Update {\n        uint256[] assetIdsToRemove;\n        uint256[] assetAmountsToRemove;\n        uint256[] assetIdsToAdd;\n        uint256[] assetAmountsToAdd;\n        bytes32 uri;\n    }\n\n    function createGame(\n        address from,\n        address to,\n        Update calldata creation,\n        address editor,\n        uint64 subId\n    ) external returns (uint256 id);\n\n    function burn(uint256 gameId) external;\n\n    function burnFrom(address from, uint256 gameId) external;\n\n    function recoverAssets(\n        address from,\n        address to,\n        uint256 gameId,\n        uint256[] calldata assetIds\n    ) external;\n\n    function burnAndRecover(\n        address from,\n        address to,\n        uint256 gameId,\n        uint256[] calldata assetIds\n    ) external;\n\n    function updateGame(\n        address from,\n        uint256 gameId,\n        Update calldata update\n    ) external returns (uint256);\n\n    function getAssetBalances(uint256 gameId, uint256[] calldata assetIds) external view returns (uint256[] calldata);\n\n    function setGameEditor(\n        address gameCreator,\n        address editor,\n        bool isEditor\n    ) external;\n\n    function isGameEditor(address gameOwner, address editor) external view returns (bool isEditor);\n\n    function creatorOf(uint256 id) external view returns (address);\n\n    function transferCreatorship(\n        address sender,\n        address original,\n        address to\n    ) external;\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function tokenURI(uint256 gameId) external returns (string memory uri);\n\n    function onERC1155Received(\n        address operator,\n        address, /*from*/\n        uint256, /*id*/\n        uint256, /*value*/\n        bytes calldata /*data*/\n    ) external view returns (bytes4);\n\n    function onERC1155BatchReceived(\n        address operator,\n        address, /*from*/\n        uint256[] calldata, /*ids*/\n        uint256[] calldata, /*values*/\n        bytes calldata /*data*/\n    ) external view returns (bytes4);\n\n    function originalId(uint256 gameId) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data)\n    external returns (bytes4);\n}\n"
    },
    "src/solc_0.7/common/BaseWithStorage/WithSuperOperators.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"./WithAdmin.sol\";\n\ncontract WithSuperOperators is WithAdmin {\n    mapping(address => bool) internal _superOperators;\n\n    /// @dev Emits when superOperator rights are set\n    /// @param superOperator The address whose rights are being granted / evoked\n    /// @param enabled Whether or not this address has superOperator rights\n    event SuperOperator(address superOperator, bool enabled);\n\n    /// @notice Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights).\n    /// @param superOperator Address that will be given/removed superOperator right.\n    /// @param enabled Set whether the superOperator is enabled or disabled.\n    function setSuperOperator(address superOperator, bool enabled) external {\n        require(msg.sender == _admin, \"ADMIN_ACCESS_DENIED\");\n        _superOperators[superOperator] = enabled;\n        emit SuperOperator(superOperator, enabled);\n    }\n\n    /// @notice Check whether address `who` is given superOperator rights.\n    /// @param who The address to query.\n    /// @return Whether the address has superOperator rights.\n    function isSuperOperator(address who) public view returns (bool) {\n        return _superOperators[who];\n    }\n}\n"
    },
    "src/solc_0.7/common/BaseWithStorage/WithMetaTransaction.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"./WithAdmin.sol\";\n\ncontract WithMetaTransaction is WithAdmin {\n    uint8 internal constant METATX_SANDBOX = 1;\n    uint8 internal constant METATX_2771 = 2;\n\n    mapping(address => uint8) internal _metaTransactionContracts;\n\n    /// @dev Emits when a meta transaction processor is enabled / disabled.\n    /// @param metaTransactionProcessor The address being enabled / disabled.\n    /// @param processorType The type of metaTransactionProcessor to set.\n    event MetaTransactionProcessor(address metaTransactionProcessor, uint8 processorType);\n\n    /// @dev Enable or disable the ability of metaTransactionProcessor.\n    /// to perform meta-tx (metaTransactionProcessor rights).\n    /// @param metaTransactionProcessor The address that will have metaTransactionProcessor rights\n    /// granted / revoked.\n    /// @param processorType The metaTransactionProcessor type to set.\n    function setMetaTransactionProcessor(address metaTransactionProcessor, uint8 processorType) public {\n        require(msg.sender == _admin, \"ADMIN_ACCESS_DENIED\");\n        _setMetaTransactionProcessor(metaTransactionProcessor, processorType);\n    }\n\n    /// @dev See setMetaTransactionProcessor\n    function _setMetaTransactionProcessor(address metaTransactionProcessor, uint8 processorType) internal {\n        _metaTransactionContracts[metaTransactionProcessor] = processorType;\n        emit MetaTransactionProcessor(metaTransactionProcessor, processorType);\n    }\n\n    /// @dev Check whether address `who` has been granted meta-transaction execution rights.\n    /// @param who The address to query.\n    /// @return The type of metatx processor (0 for none).\n    function getMetaTransactionProcessorType(address who) external view returns (uint8) {\n        return _metaTransactionContracts[who];\n    }\n\n    // --------------------------------------------------------------------------------\n    // EIP-2771 Meta Transaction Recipient\n    // --------------------------------------------------------------------------------\n\n    /// @notice Check if forwarder is trusted.\n    /// @param forwarder The address to query.\n    /// @return whether or not forwarder is trusted.\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\n        return _metaTransactionContracts[forwarder] == METATX_2771;\n    }\n\n    /// @dev Decide which sender address to use for this call.\n    /// If the call came through our trusted forwarder, return the original sender.\n    /// Otherwise, return `msg.sender`.\n    /// @return ret The sender of this call.\n\n    function _msgSender() internal view virtual returns (address payable ret) {\n        if (isTrustedForwarder(msg.sender)) {\n            return _forceMsgSender();\n        } else {\n            return msg.sender;\n        }\n    }\n\n    /// @dev Get the actual sender of call.\n    /// if the call came through our trusted forwarder, return the original sender.\n    /// otherwise, return `msg.sender`.\n    /// should be used in the contract anywhere instead of msg.sender\n    /// @return ret The sender of this call.\n    function _forceMsgSender() internal view virtual returns (address payable ret) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            ret := shr(96, calldataload(sub(calldatasize(), 20)))\n        }\n    }\n\n    /// @dev Test if a tx is a valid Sandbox or EIP-2771 metaTransaction.\n    /// @param from The address passed as either \"from\" or \"sender\" to the func which called this one.\n    /// @return Whether this is a valid metaTransaction.\n    function _isValidMetaTx(address from) internal view returns (bool) {\n        uint256 processorType = _metaTransactionContracts[msg.sender];\n        if (msg.sender == from || processorType == 0) {\n            return false;\n        }\n        if (processorType == METATX_2771) {\n            if (from != _forceMsgSender()) {\n                return false;\n            } else {\n                return true;\n            }\n        } else if (processorType == METATX_SANDBOX) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
    },
    "src/solc_0.7/common/Interfaces/IERC721MandatoryTokenReceiver.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\n/// @dev Note: The ERC-165 identifier for this interface is 0x5e8bf644.\ninterface IERC721MandatoryTokenReceiver {\n    function onERC721BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        bytes calldata data\n    ) external returns (bytes4); // needs to return 0x4b808c46\n\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4); // needs to return 0x150b7a02\n\n    // needs to implements EIP-165\n    // function supportsInterface(bytes4 interfaceId)\n    //     external\n    //     view\n    //     returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"../../introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\n      *\n      * Requirements:\n      *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n      * - `tokenId` token must exist and be owned by `from`.\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n      *\n      * Emits a {Transfer} event.\n      */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n}\n"
    },
    "src/solc_0.7/Game/GameMinter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\npragma experimental ABIEncoderV2;\n\nimport \"../common/BaseWithStorage/WithMetaTransaction.sol\";\nimport \"./GameToken.sol\";\nimport \"../common/Interfaces/IGameMinter.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\ncontract GameMinter is WithMetaTransaction, IGameMinter {\n    ///////////////////////////////  Libs //////////////////////////////\n    using SafeMath for uint256;\n\n    ///////////////////////////////  Data //////////////////////////////\n\n    GameToken internal immutable _gameToken;\n    // @todo confirm actual fees\n    uint256 internal immutable _gameMintingFee;\n    uint256 internal immutable _gameUpdateFee;\n    address internal immutable _feeBeneficiary;\n    IERC20 internal immutable _sand;\n\n    ///////////////////////////////  Functions /////////////////////////\n\n    constructor(\n        GameToken gameTokenContract,\n        address metaTransactionContract,\n        uint256 gameMintingFee,\n        uint256 gameUpdateFee,\n        address feeBeneficiary,\n        IERC20 sand\n    ) {\n        _gameToken = gameTokenContract;\n        _setMetaTransactionProcessor(metaTransactionContract, METATX_SANDBOX);\n        _gameMintingFee = gameMintingFee;\n        _gameUpdateFee = gameUpdateFee;\n        _feeBeneficiary = feeBeneficiary;\n        _sand = sand;\n    }\n\n    /// @notice Function to create a new GAME token\n    /// @param from The address of the one creating the game (included in the gameId).\n    /// @param to The address who will be assigned ownership of this game.\n    /// @param creation The struct containing ids & ammounts of assets to add to this game,\n    /// along with the uri to set.\n    /// @param editor The address to allow to edit (can also be set later).\n    /// @param subId A random id created on the backend.\n    /// @return gameId The id of the new GAME token (erc721)\n    function createGame(\n        address from,\n        address to,\n        GameToken.Update calldata creation,\n        address editor,\n        uint64 subId\n    ) external override returns (uint256 gameId) {\n        require(msg.sender == from || _isValidMetaTx(from), \"CREATE_ACCESS_DENIED\");\n        _chargeSand(from, _gameMintingFee);\n        return _gameToken.createGame(from, to, creation, editor, subId);\n    }\n\n    /// @notice Update an existing GAME token.This actually burns old token\n    /// and mints new token with same basId & incremented version.\n    /// @param from The address whose GAME token is to be updated.\n    /// @param gameId The current id of the GAME token.\n    /// @param update The values to use for the update.\n    /// @return newId The new gameId.\n    function updateGame(\n        address from,\n        uint256 gameId,\n        GameToken.Update memory update\n    ) external override returns (uint256 newId) {\n        _checkAuthorization(from, gameId);\n        _chargeSand(from, _gameUpdateFee);\n        return _gameToken.updateGame(from, gameId, update);\n    }\n\n    /// @dev Charge a fee in Sand if conditions are met.\n    /// @param from The address responsible for paying the fee.\n    /// @param sandFee The fee that applies to the current operation (create || update).\n    function _chargeSand(address from, uint256 sandFee) internal {\n        if (_feeBeneficiary != address(0) && sandFee != 0) {\n            _sand.transferFrom(from, _feeBeneficiary, sandFee);\n        }\n    }\n\n    /// @dev Ensures that only authorized callers can update functionality.\n    /// @param from The from address passed to the update function\n    /// @param id The tokenId to update.\n    function _checkAuthorization(address from, uint256 id) internal view {\n        address gameOwner = _gameToken.ownerOf(id);\n        require(\n            msg.sender == gameOwner ||\n                _gameToken.isGameEditor(gameOwner, msg.sender) ||\n                (_isValidMetaTx(from) && (from == gameOwner || _gameToken.isGameEditor(gameOwner, from))),\n            \"AUTH_ACCESS_DENIED\"\n        );\n    }\n}\n"
    },
    "src/solc_0.7/common/Interfaces/IGameMinter.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\npragma experimental ABIEncoderV2;\n\nimport \"./IGameToken.sol\";\n\ninterface IGameMinter {\n    function createGame(\n        address from,\n        address to,\n        IGameToken.Update calldata creation,\n        address editor,\n        uint64 subId\n    ) external returns (uint256 gameId);\n\n    function updateGame(\n        address from,\n        uint256 gameId,\n        IGameToken.Update memory update\n    ) external returns (uint256 newId);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "src/solc_0.7/common/Interfaces/IERC20WithMetadata.sol": {
      "content": "/* This Source Code Form is subject to the terms of the Mozilla external\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n *\n * This code has not been reviewed.\n * Do not use or deploy this code before reviewing it personally first.\n */\n// solhint-disable-next-line compiler-fixed\n//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IERC20WithMetadata is IERC20 {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n"
    },
    "src/solc_0.7/common/Interfaces/IERC20Extended.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IERC20Extended is IERC20 {\n    function burnFor(address from, uint256 amount) external;\n\n    function burn(uint256 amount) external;\n\n    function approveFor(\n        address owner,\n        address spender,\n        uint256 amount\n    ) external returns (bool success);\n}\n"
    },
    "src/solc_0.7/Permit/Permit.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"../common/Interfaces/IERC20Extended.sol\";\nimport \"../Base/TheSandbox712.sol\";\n\n/// @title Permit contract\n/// @notice This contract manages approvals of SAND via signature\ncontract Permit is TheSandbox712 {\n    IERC20Extended internal immutable _sand;\n\n    mapping(address => uint256) public nonces;\n\n    bytes32 public constant PERMIT_TYPEHASH = keccak256(\n        \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\n    );\n\n    constructor(IERC20Extended sandContractAddress) {\n        _sand = sandContractAddress;\n    }\n\n    /// @notice Permit the expenditure of SAND by a nominated spender.\n    /// @param owner The owner of the ERC20 tokens.\n    /// @param spender The nominated spender of the ERC20 tokens.\n    /// @param value The value (allowance) of the ERC20 tokens that the nominated.\n    /// spender will be allowed to spend.\n    /// @param deadline The deadline for granting permission to the spender.\n    /// @param v The final 1 byte of signature.\n    /// @param r The first 32 bytes of signature.\n    /// @param s The second 32 bytes of signature.\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public {\n        require(deadline >= block.timestamp, \"PAST_DEADLINE\");\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                DOMAIN_SEPARATOR,\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\n            )\n        );\n        address recoveredAddress = ecrecover(digest, v, r, s);\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNATURE\");\n        _sand.approveFor(owner, spender, value);\n    }\n}\n"
    },
    "src/solc_0.7/Base/TheSandbox712.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\ncontract TheSandbox712 {\n    bytes32 internal constant EIP712DOMAIN_TYPEHASH = keccak256(\n        \"EIP712Domain(string name,string version,address verifyingContract)\"\n    );\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 public immutable DOMAIN_SEPARATOR;\n\n    constructor() {\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(EIP712DOMAIN_TYPEHASH, keccak256(\"The Sandbox\"), keccak256(\"1\"), address(this))\n        );\n    }\n}\n"
    },
    "src/solc_0.7/catalyst/ERC20Token.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"../common/BaseWithStorage/erc20/ERC20BaseToken.sol\";\nimport \"../common/BaseWithStorage/erc20/extensions/ERC20BasicApproveExtension.sol\";\nimport \"../Base/TheSandbox712.sol\";\nimport \"../common/BaseWithStorage/erc20/extensions/ERC677Extension.sol\";\nimport \"../common/Interfaces/IERC677Receiver.sol\";\n\ncontract ERC20Token is ERC20BasicApproveExtension, ERC677Extension, TheSandbox712, ERC20BaseToken {\n    // //////////////////////// DATA /////////////////////\n\n    bytes32 internal constant PERMIT_TYPEHASH = keccak256(\n        \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\n    );\n\n    mapping(address => uint256) public nonces;\n\n    // /////////////////// CONSTRUCTOR ////////////////////\n    constructor(\n        string memory name,\n        string memory symbol,\n        address admin\n    )\n        ERC20BaseToken(name, symbol, admin) // solhint-disable-next-line no-empty-blocks\n    {}\n\n    function mint(address to, uint256 amount) external onlyAdmin {\n        _mint(to, amount);\n    }\n\n    /// @notice Function to permit the expenditure of ERC20 token by a nominated spender\n    /// @param owner The owner of the ERC20 tokens\n    /// @param spender The nominated spender of the ERC20 tokens\n    /// @param value The value (allowance) of the ERC20 tokens that the nominated spender will be allowed to spend\n    /// @param deadline The deadline for granting permission to the spender\n    /// @param v The final 1 byte of signature\n    /// @param r The first 32 bytes of signature\n    /// @param s The second 32 bytes of signature\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public {\n        require(deadline >= block.timestamp, \"PAST_DEADLINE\");\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                DOMAIN_SEPARATOR,\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\n            )\n        );\n        address recoveredAddress = ecrecover(digest, v, r, s);\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNATURE\");\n        _approveFor(owner, spender, value);\n    }\n}\n"
    },
    "src/solc_0.7/common/BaseWithStorage/erc20/ERC20BaseToken.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"./extensions/ERC20Internal.sol\";\nimport \"../../Interfaces/IERC20Extended.sol\";\nimport \"../WithSuperOperators.sol\";\n\nabstract contract ERC20BaseToken is WithSuperOperators, IERC20, IERC20Extended, ERC20Internal {\n    bytes32 internal immutable _name; // works only for string that can fit into 32 bytes\n    bytes32 internal immutable _symbol; // works only for string that can fit into 32 bytes\n\n    uint256 internal _totalSupply;\n    mapping(address => uint256) internal _balances;\n    mapping(address => mapping(address => uint256)) internal _allowances;\n\n    constructor(\n        string memory tokenName,\n        string memory tokenSymbol,\n        address admin\n    ) {\n        require(bytes(tokenName).length > 0, \"INVALID_NAME_REQUIRED\");\n        require(bytes(tokenName).length <= 32, \"INVALID_NAME_TOO_LONG\");\n        _name = _firstBytes32(bytes(tokenName));\n        require(bytes(tokenSymbol).length > 0, \"INVALID_SYMBOL_REQUIRED\");\n        require(bytes(tokenSymbol).length <= 32, \"INVALID_SYMBOL_TOO_LONG\");\n        _symbol = _firstBytes32(bytes(tokenSymbol));\n\n        _admin = admin;\n    }\n\n    /// @notice Transfer `amount` tokens to `to`.\n    /// @param to The recipient address of the tokens being transfered.\n    /// @param amount The number of tokens being transfered.\n    /// @return success Whether or not the transfer succeeded.\n    function transfer(address to, uint256 amount) external override returns (bool success) {\n        _transfer(msg.sender, to, amount);\n        return true;\n    }\n\n    /// @notice Transfer `amount` tokens from `from` to `to`.\n    /// @param from The origin address  of the tokens being transferred.\n    /// @param to The recipient address of the tokensbeing  transfered.\n    /// @param amount The number of tokens transfered.\n    /// @return success Whether or not the transfer succeeded.\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external override returns (bool success) {\n        if (msg.sender != from && !_superOperators[msg.sender]) {\n            uint256 currentAllowance = _allowances[from][msg.sender];\n            if (currentAllowance != ~uint256(0)) {\n                // save gas when allowance is maximal by not reducing it (see https://github.com/ethereum/EIPs/issues/717)\n                require(currentAllowance >= amount, \"NOT_AUTHORIZED_ALLOWANCE\");\n                _allowances[from][msg.sender] = currentAllowance - amount;\n            }\n        }\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /// @notice Burn `amount` tokens.\n    /// @param amount The number of tokens to burn.\n    function burn(uint256 amount) external override {\n        _burn(msg.sender, amount);\n    }\n\n    /// @notice Burn `amount` tokens from `owner`.\n    /// @param from The address whose token to burn.\n    /// @param amount The number of tokens to burn.\n    function burnFor(address from, uint256 amount) external override {\n        if (msg.sender != from && !_superOperators[msg.sender]) {\n            uint256 currentAllowance = _allowances[from][msg.sender];\n            if (currentAllowance != ~uint256(0)) {\n                require(currentAllowance >= amount, \"NOT_AUTHORIZED_ALLOWANCE\");\n                _allowances[from][msg.sender] = currentAllowance - amount;\n            }\n        }\n        _burn(from, amount);\n    }\n\n    /// @notice Approve `spender` to transfer `amount` tokens.\n    /// @param spender The address to be given rights to transfer.\n    /// @param amount The number of tokens allowed.\n    /// @return success Whether or not the call succeeded.\n    function approve(address spender, uint256 amount) external override returns (bool success) {\n        _approveFor(msg.sender, spender, amount);\n        return true;\n    }\n\n    /// @notice Get the name of the token collection.\n    /// @return The name of the token collection.\n    function name() external view returns (string memory) {\n        return string(abi.encodePacked(_name));\n    }\n\n    /// @notice Get the symbol for the token collection.\n    /// @return The symbol of the token collection.\n    function symbol() external view returns (string memory) {\n        return string(abi.encodePacked(_symbol));\n    }\n\n    /// @notice Get the total number of tokens in existence.\n    /// @return The total number of tokens in existence.\n    function totalSupply() external view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /// @notice Get the balance of `owner`.\n    /// @param owner The address to query the balance of.\n    /// @return The amount owned by `owner`.\n    function balanceOf(address owner) external view override returns (uint256) {\n        return _balances[owner];\n    }\n\n    /// @notice Get the allowance of `spender` for `owner`'s tokens.\n    /// @param owner The address whose token is allowed.\n    /// @param spender The address allowed to transfer.\n    /// @return remaining The amount of token `spender` is allowed to transfer on behalf of `owner`.\n    function allowance(address owner, address spender) external view override returns (uint256 remaining) {\n        return _allowances[owner][spender];\n    }\n\n    /// @notice Get the number of decimals for the token collection.\n    /// @return The number of decimals.\n    function decimals() external pure virtual returns (uint8) {\n        return uint8(18);\n    }\n\n    /// @notice Approve `spender` to transfer `amount` tokens from `owner`.\n    /// @param owner The address whose token is allowed.\n    /// @param spender The address to be given rights to transfer.\n    /// @param amount The number of tokens allowed.\n    /// @return success Whether or not the call succeeded.\n    function approveFor(\n        address owner,\n        address spender,\n        uint256 amount\n    ) public override returns (bool success) {\n        require(msg.sender == owner || _superOperators[msg.sender], \"NOT_AUTHORIZED\"); // TODO metatx\n        _approveFor(owner, spender, amount);\n        return true;\n    }\n\n    /// @notice Increase the allowance for the spender if needed\n    /// @param owner The address of the owner of the tokens\n    /// @param spender The address wanting to spend tokens\n    /// @param amountNeeded The amount requested to spend\n    /// @return success Whether or not the call succeeded.\n    function addAllowanceIfNeeded(\n        address owner,\n        address spender,\n        uint256 amountNeeded\n    ) public returns (bool success) {\n        require(msg.sender == owner || _superOperators[msg.sender], \"INVALID_SENDER\");\n        _addAllowanceIfNeeded(owner, spender, amountNeeded);\n        return true;\n    }\n\n    /// @notice Get the first 32 bytes of input `src`.\n    /// @param src The input data\n    /// @return output The first 32 bytes of `src`.\n    function _firstBytes32(bytes memory src) public pure returns (bytes32 output) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            output := mload(add(src, 32))\n        }\n    }\n\n    /// @dev See addAllowanceIfNeeded.\n    function _addAllowanceIfNeeded(\n        address owner,\n        address spender,\n        uint256 amountNeeded\n    ) internal override {\n        if (amountNeeded > 0 && !isSuperOperator(spender)) {\n            uint256 currentAllowance = _allowances[owner][spender];\n            if (currentAllowance < amountNeeded) {\n                _approveFor(owner, spender, amountNeeded);\n            }\n        }\n    }\n\n    /// @dev See approveFor.\n    function _approveFor(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal override {\n        require(owner != address(0) && spender != address(0), \"INVALID_OWNER_||_SPENDER\");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /// @dev See transfer.\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override {\n        require(to != address(0), \"NOT_TO_ZEROADDRESS\");\n        require(to != address(this), \"NOT_TO_THIS\");\n        uint256 currentBalance = _balances[from];\n        require(currentBalance >= amount, \"INSUFFICIENT_FUNDS\");\n        _balances[from] = currentBalance - amount;\n        _balances[to] += amount;\n        emit Transfer(from, to, amount);\n    }\n\n    /// @dev Mint tokens for a recipient.\n    /// @param to The recipient address.\n    /// @param amount The number of token to mint.\n    function _mint(address to, uint256 amount) internal {\n        require(to != address(0), \"NOT_TO_ZEROADDRESS\");\n        require(amount > 0, \"MINT_O_TOKENS\");\n        uint256 currentTotalSupply = _totalSupply;\n        uint256 newTotalSupply = currentTotalSupply + amount;\n        require(newTotalSupply > currentTotalSupply, \"OVERFLOW\");\n        _totalSupply = newTotalSupply;\n        _balances[to] += amount;\n        emit Transfer(address(0), to, amount);\n    }\n\n    /// @dev Burn tokens from an address.\n    /// @param from The address whose tokens to burn.\n    /// @param amount The number of token to burn.\n    function _burn(address from, uint256 amount) internal {\n        require(amount > 0, \"BURN_O_TOKENS\");\n        if (msg.sender != from && !_superOperators[msg.sender]) {\n            uint256 currentAllowance = _allowances[from][msg.sender];\n            require(currentAllowance >= amount, \"INSUFFICIENT_ALLOWANCE\");\n            if (currentAllowance != ~uint256(0)) {\n                // save gas when allowance is maximal by not reducing it (see https://github.com/ethereum/EIPs/issues/717)\n                _allowances[from][msg.sender] = currentAllowance - amount;\n            }\n        }\n\n        uint256 currentBalance = _balances[from];\n        require(currentBalance >= amount, \"INSUFFICIENT_FUNDS\");\n        _balances[from] = currentBalance - amount;\n        _totalSupply -= amount;\n        emit Transfer(from, address(0), amount);\n    }\n}\n"
    },
    "src/solc_0.7/common/BaseWithStorage/erc20/extensions/ERC20BasicApproveExtension.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"./ERC20Internal.sol\";\nimport \"../../../Libraries/BytesUtil.sol\";\n\nabstract contract ERC20BasicApproveExtension is ERC20Internal {\n    /// @notice Approve `target` to spend `amount` and call it with data.\n    /// @param target The address to be given rights to transfer and destination of the call.\n    /// @param amount The number of tokens allowed.\n    /// @param data The bytes for the call.\n    /// @return The data of the call.\n    function approveAndCall(\n        address target,\n        uint256 amount,\n        bytes calldata data\n    ) external payable returns (bytes memory) {\n        require(BytesUtil.doFirstParamEqualsAddress(data, msg.sender), \"FIRST_PARAM_NOT_SENDER\");\n\n        _approveFor(msg.sender, target, amount);\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returnData) = target.call{value: msg.value}(data);\n        require(success, string(returnData));\n        return returnData;\n    }\n\n    /// @notice Temporarily approve `target` to spend `amount` and call it with data.\n    /// Previous approvals remains unchanged.\n    /// @param target The destination of the call, allowed to spend the amount specified\n    /// @param amount The number of tokens allowed to spend.\n    /// @param data The bytes for the call.\n    /// @return The data of the call.\n    function paidCall(\n        address target,\n        uint256 amount,\n        bytes calldata data\n    ) external payable returns (bytes memory) {\n        require(BytesUtil.doFirstParamEqualsAddress(data, msg.sender), \"FIRST_PARAM_NOT_SENDER\");\n\n        if (amount > 0) {\n            _addAllowanceIfNeeded(msg.sender, target, amount);\n        }\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returnData) = target.call{value: msg.value}(data);\n        require(success, string(returnData));\n\n        return returnData;\n    }\n}\n"
    },
    "src/solc_0.7/common/BaseWithStorage/erc20/extensions/ERC677Extension.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"../../../Interfaces/IERC677.sol\";\nimport \"../../../Interfaces/IERC677Receiver.sol\";\nimport \"./ERC20Internal.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\nabstract contract ERC677Extension is ERC20Internal, IERC677 {\n    using Address for address;\n\n    /// @notice Transfers tokens to an address with _data if the recipient is a contact.\n    /// @param _to The address to transfer to.\n    /// @param _value The amount to be transferred.\n    /// @param _data The extra data to be passed to the receiving contract.\n    function transferAndCall(\n        address _to,\n        uint256 _value,\n        bytes calldata _data\n    ) external override returns (bool success) {\n        _transfer(msg.sender, _to, _value);\n        if (_to.isContract()) {\n            IERC677Receiver receiver = IERC677Receiver(_to);\n            receiver.onTokenTransfer(msg.sender, _value, _data);\n        }\n        return true;\n    }\n}\n"
    },
    "src/solc_0.7/common/Interfaces/IERC677Receiver.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\ninterface IERC677Receiver {\n    function onTokenTransfer(\n        address _sender,\n        uint256 _value,\n        bytes calldata _data\n    ) external;\n}\n"
    },
    "src/solc_0.7/common/BaseWithStorage/erc20/extensions/ERC20Internal.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nabstract contract ERC20Internal {\n    function _approveFor(\n        address owner,\n        address target,\n        uint256 amount\n    ) internal virtual;\n\n    function _addAllowanceIfNeeded(\n        address owner,\n        address spender,\n        uint256 amountNeeded\n    ) internal virtual;\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual;\n}\n"
    },
    "src/solc_0.7/common/Libraries/BytesUtil.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nlibrary BytesUtil {\n    /// @dev Check if the data == _address.\n    /// @param data The bytes passed to the function.\n    /// @param _address The address to compare to.\n    /// @return Whether the first param == _address.\n    function doFirstParamEqualsAddress(bytes memory data, address _address) internal pure returns (bool) {\n        if (data.length < (36 + 32)) {\n            return false;\n        }\n        uint256 value;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            value := mload(add(data, 36))\n        }\n        return value == uint256(_address);\n    }\n}\n"
    },
    "src/solc_0.7/common/Interfaces/IERC677.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\ninterface IERC677 {\n    function transferAndCall(\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bool success);\n    //TODO: decide whether we use that event, as it collides with ERC20 Transfer event\n    //event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\n}\n"
    },
    "src/solc_0.7/test/MockERC677Receiver.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\nimport \"../common/Interfaces/IERC677Receiver.sol\";\n\ncontract MockERC677Receiver is IERC677Receiver {\n    event OnTokenTransferEvent(address indexed _sender, uint256 _value, bytes _data);\n\n    /// @dev Emits the OnTokenTransferEvent.\n    /// @param _sender The address of the sender.\n    /// @param _value The value sent with the tx.\n    /// @param _data The data sent with the tx.\n    function onTokenTransfer(\n        address _sender,\n        uint256 _value,\n        bytes calldata _data\n    ) external override {\n        emit OnTokenTransferEvent(_sender, _value, _data);\n    }\n}\n"
    },
    "src/solc_0.7/Utils/Batch.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\ncontract Batch {\n    using Address for address;\n\n    struct Execution {\n        address target;\n        bytes callData;\n    }\n\n    struct ExecutionWithETH {\n        address target;\n        bytes callData;\n        uint256 value;\n    }\n\n    struct SingleTargetExecutionWithETH {\n        bytes callData;\n        uint256 value;\n    }\n\n    address public immutable executor;\n\n    constructor(address _executor) {\n        executor = _executor;\n    }\n\n    modifier onlyExecutor() {\n        require(msg.sender == executor, \"NOT_AUTHORIZED\");\n        _;\n    }\n\n    function atomicBatchWithETH(ExecutionWithETH[] memory executions) external payable onlyExecutor {\n        for (uint256 i = 0; i < executions.length; i++) {\n            executions[i].target.functionCallWithValue(executions[i].callData, executions[i].value);\n        }\n    }\n\n    function nonAtomicBatchWithETH(ExecutionWithETH[] memory executions) external payable onlyExecutor {\n        for (uint256 i = 0; i < executions.length; i++) {\n            _call(executions[i].target, executions[i].callData, executions[i].value);\n        }\n    }\n\n    function atomicBatch(Execution[] memory executions) external onlyExecutor {\n        for (uint256 i = 0; i < executions.length; i++) {\n            executions[i].target.functionCall(executions[i].callData);\n        }\n    }\n\n    function nonAtomicBatch(Execution[] memory executions) external onlyExecutor {\n        for (uint256 i = 0; i < executions.length; i++) {\n            _call(executions[i].target, executions[i].callData, 0);\n        }\n    }\n\n    function singleTargetAtomicBatchWithETH(address target, SingleTargetExecutionWithETH[] memory executions)\n        external\n        payable\n        onlyExecutor\n    {\n        for (uint256 i = 0; i < executions.length; i++) {\n            target.functionCallWithValue(executions[i].callData, executions[i].value);\n        }\n    }\n\n    function singleTargetNonAtomicBatchWithETH(address target, SingleTargetExecutionWithETH[] memory executions)\n        external\n        payable\n        onlyExecutor\n    {\n        for (uint256 i = 0; i < executions.length; i++) {\n            _call(target, executions[i].callData, executions[i].value);\n        }\n    }\n\n    function singleTargetAtomicBatch(address target, bytes[] memory callDatas) external onlyExecutor {\n        for (uint256 i = 0; i < callDatas.length; i++) {\n            target.functionCall(callDatas[i]);\n        }\n    }\n\n    function singleTargetNonAtomicBatch(address target, bytes[] memory callDatas) external onlyExecutor {\n        for (uint256 i = 0; i < callDatas.length; i++) {\n            _call(target, callDatas[i], 0);\n        }\n    }\n\n    function _call(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bool) {\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, ) = target.call{value: value}(data);\n        return success;\n    }\n\n    // ----------------------------------------------------------------------------------------------------\n    // TOKEN RECEPTION\n    // ----------------------------------------------------------------------------------------------------\n\n    // ERC1155\n    bytes4 private constant ERC1155_IS_RECEIVER = 0x4e2312e0;\n    bytes4 private constant ERC1155_RECEIVED = 0xf23a6e61;\n    bytes4 private constant ERC1155_BATCH_RECEIVED = 0xbc197c81;\n\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes calldata\n    ) external pure returns (bytes4) {\n        return ERC1155_RECEIVED;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] calldata,\n        uint256[] calldata,\n        bytes calldata\n    ) external pure returns (bytes4) {\n        return ERC1155_BATCH_RECEIVED;\n    }\n\n    // ERC721\n\n    bytes4 private constant ERC721_IS_RECEIVER = 0x150b7a02;\n    bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\n\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) external pure returns (bytes4) {\n        return ERC721_RECEIVED;\n    }\n\n    // ERC165\n    function supportsInterface(bytes4 _interfaceId) external pure returns (bool) {\n        return _interfaceId == 0x01ffc9a7 || _interfaceId == ERC1155_IS_RECEIVER || _interfaceId == ERC721_IS_RECEIVER;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 2000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}