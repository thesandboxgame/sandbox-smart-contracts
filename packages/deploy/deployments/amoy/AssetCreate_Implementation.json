{
  "address": "0xEe020cCF1Fcc6Dc434c69d789f174A48FdeF3D1C",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "creators",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint8[]",
          "name": "tiers",
          "type": "uint8[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "metadataHashes",
          "type": "string[]"
        }
      ],
      "name": "AssetBatchLazyMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint8[]",
          "name": "tiers",
          "type": "uint8[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "metadataHashes",
          "type": "string[]"
        },
        {
          "indexed": false,
          "internalType": "bool[]",
          "name": "revealed",
          "type": "bool[]"
        }
      ],
      "name": "AssetBatchMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "tier",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadataHash",
          "type": "string"
        }
      ],
      "name": "AssetLazyMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "tier",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadataHash",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "revealed",
          "type": "bool"
        }
      ],
      "name": "AssetMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "authValidator",
          "type": "address"
        }
      ],
      "name": "AuthValidatorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "EIP712DomainChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "exchangeContract",
          "type": "address"
        }
      ],
      "name": "ExchangeContractSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newLazyMintFeeReceived",
          "type": "address"
        }
      ],
      "name": "LazyMintFeeReceiverSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newLazyMintFee",
          "type": "uint256"
        }
      ],
      "name": "LazyMintFeeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint8[]",
          "name": "tiers",
          "type": "uint8[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "metadataHashes",
          "type": "string[]"
        },
        {
          "indexed": false,
          "internalType": "bool[]",
          "name": "revealed",
          "type": "bool[]"
        }
      ],
      "name": "SpecialAssetBatchMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "tier",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadataHash",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "revealed",
          "type": "bool"
        }
      ],
      "name": "SpecialAssetMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newTrustedForwarderAddress",
          "type": "address"
        }
      ],
      "name": "TrustedForwarderChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldTrustedForwarder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newTrustedForwarder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "TrustedForwarderSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LAZY_MINT_BATCH_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LAZY_MINT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_BPS_IN_UNIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_BATCH_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NOT_BRIDGED",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NOT_REVEALED",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NOT_REVEALED_NONCE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REVEALED",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REVEALED_NONCE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SPECIAL_MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetContract",
      "outputs": [
        {
          "internalType": "contract IAsset",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "authValidator",
      "outputs": [
        {
          "internalType": "contract AuthSuperValidator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "availableToMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "catalystContract",
      "outputs": [
        {
          "internalType": "contract ICatalyst",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "uint8",
          "name": "tier",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "revealed",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "metadataHash",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "createAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "uint8[]",
          "name": "tiers",
          "type": "uint8[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bool[]",
          "name": "revealed",
          "type": "bool[]"
        },
        {
          "internalType": "string[]",
          "name": "metadataHashes",
          "type": "string[]"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "createMultipleAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "metadataHashes",
          "type": "string[]"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "createMultipleSpecialAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "metadataHash",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "createSpecialAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "creatorNonces",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eip712Domain",
      "outputs": [
        {
          "internalType": "bytes1",
          "name": "fields",
          "type": "bytes1"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "verifyingContract",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "extensions",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeContract",
      "outputs": [
        {
          "internalType": "contract IExchange",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_version",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_assetContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_catalystContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_authValidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_forwarder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_defaultAdmin",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "caller",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "tier",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unitPrice",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "paymentToken",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "metadataHash",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "maxSupply",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "expirationTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct IAssetCreate.LazyMintData",
          "name": "mintData",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "maker",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "enum LibAsset.AssetClass",
                          "name": "assetClass",
                          "type": "uint8"
                        },
                        {
                          "internalType": "bytes",
                          "name": "data",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct LibAsset.AssetType",
                      "name": "assetType",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct LibAsset.Asset",
                  "name": "makeAsset",
                  "type": "tuple"
                },
                {
                  "internalType": "address",
                  "name": "taker",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "enum LibAsset.AssetClass",
                          "name": "assetClass",
                          "type": "uint8"
                        },
                        {
                          "internalType": "bytes",
                          "name": "data",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct LibAsset.AssetType",
                      "name": "assetType",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct LibAsset.Asset",
                  "name": "takeAsset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "salt",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "start",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "end",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibOrder.Order",
              "name": "orderLeft",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "signatureLeft",
              "type": "bytes"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "maker",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "enum LibAsset.AssetClass",
                          "name": "assetClass",
                          "type": "uint8"
                        },
                        {
                          "internalType": "bytes",
                          "name": "data",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct LibAsset.AssetType",
                      "name": "assetType",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct LibAsset.Asset",
                  "name": "makeAsset",
                  "type": "tuple"
                },
                {
                  "internalType": "address",
                  "name": "taker",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "enum LibAsset.AssetClass",
                          "name": "assetClass",
                          "type": "uint8"
                        },
                        {
                          "internalType": "bytes",
                          "name": "data",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct LibAsset.AssetType",
                      "name": "assetType",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct LibAsset.Asset",
                  "name": "takeAsset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "salt",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "start",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "end",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibOrder.Order",
              "name": "orderRight",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "signatureRight",
              "type": "bytes"
            }
          ],
          "internalType": "struct ExchangeMatch[]",
          "name": "matchedOrders",
          "type": "tuple[]"
        }
      ],
      "name": "lazyCreateAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "caller",
              "type": "address"
            },
            {
              "internalType": "uint8[]",
              "name": "tiers",
              "type": "uint8[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "unitPrices",
              "type": "uint256[]"
            },
            {
              "internalType": "address[]",
              "name": "paymentTokens",
              "type": "address[]"
            },
            {
              "internalType": "string[]",
              "name": "metadataHashes",
              "type": "string[]"
            },
            {
              "internalType": "uint256[]",
              "name": "maxSupplies",
              "type": "uint256[]"
            },
            {
              "internalType": "address[]",
              "name": "creators",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "expirationTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct IAssetCreate.LazyMintBatchData",
          "name": "mintData",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "maker",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "enum LibAsset.AssetClass",
                          "name": "assetClass",
                          "type": "uint8"
                        },
                        {
                          "internalType": "bytes",
                          "name": "data",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct LibAsset.AssetType",
                      "name": "assetType",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct LibAsset.Asset",
                  "name": "makeAsset",
                  "type": "tuple"
                },
                {
                  "internalType": "address",
                  "name": "taker",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "enum LibAsset.AssetClass",
                          "name": "assetClass",
                          "type": "uint8"
                        },
                        {
                          "internalType": "bytes",
                          "name": "data",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct LibAsset.AssetType",
                      "name": "assetType",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct LibAsset.Asset",
                  "name": "takeAsset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "salt",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "start",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "end",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibOrder.Order",
              "name": "orderLeft",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "signatureLeft",
              "type": "bytes"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "maker",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "enum LibAsset.AssetClass",
                          "name": "assetClass",
                          "type": "uint8"
                        },
                        {
                          "internalType": "bytes",
                          "name": "data",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct LibAsset.AssetType",
                      "name": "assetType",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct LibAsset.Asset",
                  "name": "makeAsset",
                  "type": "tuple"
                },
                {
                  "internalType": "address",
                  "name": "taker",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "enum LibAsset.AssetClass",
                          "name": "assetClass",
                          "type": "uint8"
                        },
                        {
                          "internalType": "bytes",
                          "name": "data",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct LibAsset.AssetType",
                      "name": "assetType",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct LibAsset.Asset",
                  "name": "takeAsset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "salt",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "start",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "end",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibOrder.Order",
              "name": "orderRight",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "signatureRight",
              "type": "bytes"
            }
          ],
          "internalType": "struct ExchangeMatch[][]",
          "name": "matchedOrdersArray",
          "type": "tuple[][]"
        }
      ],
      "name": "lazyCreateMultipleAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lazyMintFeeInBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lazyMintFeeReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_authValidator",
          "type": "address"
        }
      ],
      "name": "setAuthValidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchangeContract",
          "type": "address"
        }
      ],
      "name": "setExchangeContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lazyMintFeeInBps",
          "type": "uint256"
        }
      ],
      "name": "setLazyMintFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lazyMintFeeReceiver",
          "type": "address"
        }
      ],
      "name": "setLazyMintFeeReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "signatureNonces",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd6430d6084e68fff3375342fd26c942714ecb04fead1321a8d54252eaea011ad",
  "receipt": {
    "to": null,
    "from": "0x5F890c9522dCE5670d741D4277BFCC2d9cA8Af02",
    "contractAddress": "0xEe020cCF1Fcc6Dc434c69d789f174A48FdeF3D1C",
    "transactionIndex": 4,
    "gasUsed": "5257367",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000008000000000000000010000000000000000000000000000000000000000800000000000000000000100000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000004000000080000000000000200000200000000000000000000000000400000000000000000000000000000080004000000000000000000001000000040000000000000000000010508000000000000000000000000000000000010000000000000000000000000000000000100000",
    "blockHash": "0x25c75d5da63a06dd75f9aa5fb1652c479d8a7d7382ea71bacd024e0786eed996",
    "transactionHash": "0xd6430d6084e68fff3375342fd26c942714ecb04fead1321a8d54252eaea011ad",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 8736724,
        "transactionHash": "0xd6430d6084e68fff3375342fd26c942714ecb04fead1321a8d54252eaea011ad",
        "address": "0xEe020cCF1Fcc6Dc434c69d789f174A48FdeF3D1C",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 7,
        "blockHash": "0x25c75d5da63a06dd75f9aa5fb1652c479d8a7d7382ea71bacd024e0786eed996"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 8736724,
        "transactionHash": "0xd6430d6084e68fff3375342fd26c942714ecb04fead1321a8d54252eaea011ad",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02",
          "0x00000000000000000000000009207a6efee346cb3e4a54ac18523e3715d38b3f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000002671787a18f7a230000000000000000000000000000000000000000000000024255328180c715a500000000000000000000000000000000000000000000013b9d93cdbce84e085b0000000000000000000000000000000000000000000000023fee1af9df379b8200000000000000000000000000000000000000000000013b9ffae54489dd827e",
        "logIndex": 8,
        "blockHash": "0x25c75d5da63a06dd75f9aa5fb1652c479d8a7d7382ea71bacd024e0786eed996"
      }
    ],
    "blockNumber": 8736724,
    "cumulativeGasUsed": "5366739",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "660c23554b77fcc5d0826500cbb93709",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"creators\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"tiers\",\"type\":\"uint8[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"metadataHashes\",\"type\":\"string[]\"}],\"name\":\"AssetBatchLazyMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"tiers\",\"type\":\"uint8[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"metadataHashes\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"revealed\",\"type\":\"bool[]\"}],\"name\":\"AssetBatchMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"tier\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataHash\",\"type\":\"string\"}],\"name\":\"AssetLazyMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"tier\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"revealed\",\"type\":\"bool\"}],\"name\":\"AssetMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authValidator\",\"type\":\"address\"}],\"name\":\"AuthValidatorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exchangeContract\",\"type\":\"address\"}],\"name\":\"ExchangeContractSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newLazyMintFeeReceived\",\"type\":\"address\"}],\"name\":\"LazyMintFeeReceiverSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newLazyMintFee\",\"type\":\"uint256\"}],\"name\":\"LazyMintFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"tiers\",\"type\":\"uint8[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"metadataHashes\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"revealed\",\"type\":\"bool[]\"}],\"name\":\"SpecialAssetBatchMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"tier\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"revealed\",\"type\":\"bool\"}],\"name\":\"SpecialAssetMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTrustedForwarderAddress\",\"type\":\"address\"}],\"name\":\"TrustedForwarderChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldTrustedForwarder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTrustedForwarder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"TrustedForwarderSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LAZY_MINT_BATCH_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LAZY_MINT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BPS_IN_UNIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_BATCH_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NOT_BRIDGED\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NOT_REVEALED\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NOT_REVEALED_NONCE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REVEALED\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REVEALED_NONCE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SPECIAL_MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetContract\",\"outputs\":[{\"internalType\":\"contract IAsset\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authValidator\",\"outputs\":[{\"internalType\":\"contract AuthSuperValidator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"availableToMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"catalystContract\",\"outputs\":[{\"internalType\":\"contract ICatalyst\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"revealed\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"metadataHash\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"createAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint8[]\",\"name\":\"tiers\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"revealed\",\"type\":\"bool[]\"},{\"internalType\":\"string[]\",\"name\":\"metadataHashes\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"createMultipleAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"metadataHashes\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"createMultipleSpecialAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadataHash\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"createSpecialAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"creatorNonces\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeContract\",\"outputs\":[{\"internalType\":\"contract IExchange\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_assetContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_catalystContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_authValidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_forwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_defaultAdmin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadataHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"}],\"internalType\":\"struct IAssetCreate.LazyMintData\",\"name\":\"mintData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"enum LibAsset.AssetClass\",\"name\":\"assetClass\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"makeAsset\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"enum LibAsset.AssetClass\",\"name\":\"assetClass\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"takeAsset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"internalType\":\"struct LibOrder.Order\",\"name\":\"orderLeft\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signatureLeft\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"enum LibAsset.AssetClass\",\"name\":\"assetClass\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"makeAsset\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"enum LibAsset.AssetClass\",\"name\":\"assetClass\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"takeAsset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"internalType\":\"struct LibOrder.Order\",\"name\":\"orderRight\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signatureRight\",\"type\":\"bytes\"}],\"internalType\":\"struct ExchangeMatch[]\",\"name\":\"matchedOrders\",\"type\":\"tuple[]\"}],\"name\":\"lazyCreateAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"tiers\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"unitPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"paymentTokens\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"metadataHashes\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxSupplies\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"creators\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"}],\"internalType\":\"struct IAssetCreate.LazyMintBatchData\",\"name\":\"mintData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"enum LibAsset.AssetClass\",\"name\":\"assetClass\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"makeAsset\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"enum LibAsset.AssetClass\",\"name\":\"assetClass\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"takeAsset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"internalType\":\"struct LibOrder.Order\",\"name\":\"orderLeft\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signatureLeft\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"enum LibAsset.AssetClass\",\"name\":\"assetClass\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"makeAsset\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"enum LibAsset.AssetClass\",\"name\":\"assetClass\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"takeAsset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"internalType\":\"struct LibOrder.Order\",\"name\":\"orderRight\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signatureRight\",\"type\":\"bytes\"}],\"internalType\":\"struct ExchangeMatch[][]\",\"name\":\"matchedOrdersArray\",\"type\":\"tuple[][]\"}],\"name\":\"lazyCreateMultipleAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lazyMintFeeInBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lazyMintFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authValidator\",\"type\":\"address\"}],\"name\":\"setAuthValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchangeContract\",\"type\":\"address\"}],\"name\":\"setExchangeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lazyMintFeeInBps\",\"type\":\"uint256\"}],\"name\":\"setLazyMintFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lazyMintFeeReceiver\",\"type\":\"address\"}],\"name\":\"setLazyMintFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"signatureNonces\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"The Sandbox\",\"custom:security-contact\":\"contact-blockchain@sandbox.game\",\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"TrustedForwarderSet(address,address,address)\":{\"params\":{\"newTrustedForwarder\":\"new trusted forwarder\",\"oldTrustedForwarder\":\"old trusted forwarder\",\"operator\":\"the sender of the transaction\"}},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"createAsset(bytes,uint8,uint256,bool,string,address)\":{\"params\":{\"amount\":\"The amount of the asset to mint\",\"creator\":\"The address of the creator\",\"metadataHash\":\"The metadata hash of the asset to mint\",\"revealed\":\"Whether the asset is revealed or not\",\"signature\":\"A signature generated by TSB\",\"tier\":\"The tier of the asset to mint\"}},\"createMultipleAssets(bytes,uint8[],uint256[],bool[],string[],address)\":{\"params\":{\"amounts\":\"The amounts of the assets to mint\",\"creator\":\"The address of the creator\",\"metadataHashes\":\"The metadata hashes of the assets to mint\",\"revealed\":\"Whether the assets are revealed or not\",\"signature\":\"A signature generated by TSB\",\"tiers\":\"The tiers of the assets to mint\"}},\"createMultipleSpecialAssets(bytes,uint256[],string[],address)\":{\"details\":\"Only callable by the special minter\",\"params\":{\"amounts\":\"The amounts of the assets to mint\",\"creator\":\"The address of the creator\",\"metadataHashes\":\"The metadata hashes of the assets to mint\",\"signature\":\"A signature generated by TSB\"}},\"createSpecialAsset(bytes,uint256,string,address)\":{\"details\":\"Only callable by the special minter\",\"params\":{\"amount\":\"The amount of the asset to mint\",\"creator\":\"The address of the creator\",\"metadataHash\":\"The metadata hash of the asset to mint,\",\"signature\":\"A signature generated by TSB\"}},\"eip712Domain()\":{\"details\":\"See {EIP-5267}. _Available since v4.9._\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getTrustedForwarder()\":{\"returns\":{\"_0\":\"return the address of the trusted forwarder\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(string,string,address,address,address,address,address)\":{\"params\":{\"_assetContract\":\"The address of the asset contract\",\"_authValidator\":\"The address of the AuthSuperValidator contract\",\"_catalystContract\":\"The address of the catalyst contract\",\"_defaultAdmin\":\"The address of the default admin\",\"_forwarder\":\"The address of the forwarder contract\",\"_name\":\"The name of the contract (for EIP712)\",\"_version\":\"The version of the contract (for EIP712)\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"trusted forwarder address to check\"},\"returns\":{\"_0\":\"true if the address is the same as the trusted forwarder\"}},\"lazyCreateAsset(address,bytes,(address,uint8,uint256,uint256,address,string,uint256,address,uint256),((address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes,(address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes)[])\":{\"details\":\"Allows users to lazy mint assets\",\"params\":{\"from\":\"The address of the sender\",\"matchedOrders\":\"The orders to match for catalyst purchase\",\"mintData\":\"The data for the lazy mint\",\"signature\":\"The signature of the lazy mint generated by TSB\"}},\"lazyCreateMultipleAssets(address,bytes,(address,uint8[],uint256[],uint256[],address[],string[],uint256[],address[],uint256),((address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes,(address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes)[][])\":{\"details\":\"Allows users to lazy mint assets coming from multiple creators\",\"params\":{\"from\":\"The address of the sender\",\"matchedOrdersArray\":\"The orders to match for catalyst purchase\",\"mintData\":\"The data for the lazy mint\",\"signature\":\"The signature of the lazy mint generated by TSB\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setAuthValidator(address)\":{\"params\":{\"_authValidator\":\"The auth validator contract address to set\"}},\"setExchangeContract(address)\":{\"params\":{\"_exchangeContract\":\"The exchange contract to set\"}},\"setLazyMintFee(uint256)\":{\"params\":{\"_lazyMintFeeInBps\":\"The fee to set\"}},\"setLazyMintFeeReceiver(address)\":{\"params\":{\"_lazyMintFeeReceiver\":\"The receiver to set\"}},\"setTrustedForwarder(address)\":{\"details\":\"Change the address of the trusted forwarder for meta-TX\",\"params\":{\"trustedForwarder\":\"The new trustedForwarder\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"title\":\"AssetCreate\",\"version\":1},\"userdoc\":{\"events\":{\"TrustedForwarderSet(address,address,address)\":{\"notice\":\"Emitted when a `newTrustedForwarder` is set, replacing the `oldTrustedForwarder`\"}},\"kind\":\"user\",\"methods\":{\"LAZY_MINT_BATCH_TYPEHASH()\":{\"notice\":\"Lazy mint batch signature typehash\"},\"LAZY_MINT_TYPEHASH()\":{\"notice\":\"Lazy mint signature typehash\"},\"MAX_BPS_IN_UNIT()\":{\"notice\":\"Maximum BPS value\"},\"MINT_BATCH_TYPEHASH()\":{\"notice\":\"Mint batch signature typehash\"},\"MINT_TYPEHASH()\":{\"notice\":\"Mint signature typehash\"},\"NOT_BRIDGED()\":{\"notice\":\"Not bridged status flag\"},\"NOT_REVEALED()\":{\"notice\":\"Not revealed status flag\"},\"NOT_REVEALED_NONCE()\":{\"notice\":\"Not revealed status nonce value\"},\"PAUSER_ROLE()\":{\"notice\":\"Role allowing to pause the contract\"},\"REVEALED()\":{\"notice\":\"Revealed status flag\"},\"REVEALED_NONCE()\":{\"notice\":\"Revealed status nonce value\"},\"SPECIAL_MINTER_ROLE()\":{\"notice\":\"Role allowing to mint special assets\"},\"availableToMint(uint256)\":{\"notice\":\"mapping of tokenId => maxSupply specified by the creator\"},\"createAsset(bytes,uint8,uint256,bool,string,address)\":{\"notice\":\"Create a new asset\"},\"createMultipleAssets(bytes,uint8[],uint256[],bool[],string[],address)\":{\"notice\":\"Create multiple assets at once\"},\"createMultipleSpecialAssets(bytes,uint256[],string[],address)\":{\"notice\":\"Create multiple special assets\"},\"createSpecialAsset(bytes,uint256,string,address)\":{\"notice\":\"Create special assets\"},\"creatorNonces(address)\":{\"notice\":\"mapping of creator address to creator nonce, a nonce is incremented every time a creator mints a new token\"},\"exchangeContract()\":{\"notice\":\"The marketplace exchange contract to purchase catalyst\"},\"getTrustedForwarder()\":{\"notice\":\"return the address of the trusted forwarder\"},\"initialize(string,string,address,address,address,address,address)\":{\"notice\":\"Initialize the contract\"},\"isTrustedForwarder(address)\":{\"notice\":\"return true if the forwarder is the trusted forwarder\"},\"lazyCreateAsset(address,bytes,(address,uint8,uint256,uint256,address,string,uint256,address,uint256),((address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes,(address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes)[])\":{\"notice\":\"Lazily creates a new asset with a signature\"},\"lazyCreateMultipleAssets(address,bytes,(address,uint8[],uint256[],uint256[],address[],string[],uint256[],address[],uint256),((address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes,(address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes)[][])\":{\"notice\":\"Lazily creates multiple assets with a signature\"},\"lazyMintFeeInBps()\":{\"notice\":\"A fee denoted in BPS that is charged when using the lazy minting feature, deducted from the creators payout\"},\"lazyMintFeeReceiver()\":{\"notice\":\"The address that receives the lazy mint fee\"},\"pause()\":{\"notice\":\"Pause the contracts mint and burn functions\"},\"setAuthValidator(address)\":{\"notice\":\"Set the auth validator contract address\"},\"setExchangeContract(address)\":{\"notice\":\"Set the exchange contract\"},\"setLazyMintFee(uint256)\":{\"notice\":\"Set the lazy mint fee\"},\"setLazyMintFeeReceiver(address)\":{\"notice\":\"Set the lazy mint fee receiver\"},\"setTrustedForwarder(address)\":{\"notice\":\"Set a new trusted forwarder address, limited to DEFAULT_ADMIN_ROLE only\"},\"signatureNonces(address)\":{\"notice\":\"mapping of minter address to signature nonce, a nonce is incremented every time asset minter consumes a signature generated by TSB\"},\"unpause()\":{\"notice\":\"Unpause the contracts mint and burn functions\"}},\"notice\":\"User-facing contract for creating new assets\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@sandbox-smart-contracts/asset/contracts/AssetCreate.sol\":\"AssetCreate\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xfeefb24d068524440e1ba885efdf105d91f83504af3c2d745ffacc4595396831\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267Upgradeable {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0xe562dab443278837fa50faddb76743399e942181881db8dccaea3bd1712994db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0xa014f65d84b02827055d99993ccdbfb4b56b2c9e91eb278d82a93330659d06e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC5267Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable, IERC5267Upgradeable {\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @custom:oz-renamed-from _HASHED_NAME\\n    bytes32 private _hashedName;\\n    /// @custom:oz-renamed-from _HASHED_VERSION\\n    bytes32 private _hashedVersion;\\n\\n    string private _name;\\n    string private _version;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        _name = name;\\n        _version = version;\\n\\n        // Reset prior values in storage if upgrading\\n        _hashedName = 0;\\n        _hashedVersion = 0;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator();\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash(), block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {EIP-5267}.\\n     *\\n     * _Available since v4.9._\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        // If the hashed name and version in storage are non-zero, the contract hasn't been properly initialized\\n        // and the EIP712 domain is not reliable, as it will be missing name and version.\\n        require(_hashedName == 0 && _hashedVersion == 0, \\\"EIP712: Uninitialized\\\");\\n\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Name() internal virtual view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Version() internal virtual view returns (string memory) {\\n        return _version;\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Name` instead.\\n     */\\n    function _EIP712NameHash() internal view returns (bytes32) {\\n        string memory name = _EIP712Name();\\n        if (bytes(name).length > 0) {\\n            return keccak256(bytes(name));\\n        } else {\\n            // If the name is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the name hash in storage if non-zero, otherwise we assume the name is empty by design.\\n            bytes32 hashedName = _hashedName;\\n            if (hashedName != 0) {\\n                return hashedName;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Version` instead.\\n     */\\n    function _EIP712VersionHash() internal view returns (bytes32) {\\n        string memory version = _EIP712Version();\\n        if (bytes(version).length > 0) {\\n            return keccak256(bytes(version));\\n        } else {\\n            // If the version is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the version hash in storage if non-zero, otherwise we assume the version is empty by design.\\n            bytes32 hashedVersion = _hashedVersion;\\n            if (hashedVersion != 0) {\\n                return hashedVersion;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0xeb8d6be406a373771724922eb41b5d593bc8e2dc705daa22cd1145cfc8f5a3a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/asset/contracts/AssetCreate.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {EIP712Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\\\";\\nimport {\\n    AccessControlUpgradeable,\\n    ContextUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {TokenIdUtils} from \\\"./libraries/TokenIdUtils.sol\\\";\\nimport {AuthSuperValidator} from \\\"./AuthSuperValidator.sol\\\";\\nimport {\\n    ERC2771HandlerUpgradeable\\n} from \\\"@sandbox-smart-contracts/dependency-metatx/contracts/ERC2771HandlerUpgradeable.sol\\\";\\nimport {IAsset} from \\\"./interfaces/IAsset.sol\\\";\\nimport {ICatalyst} from \\\"./interfaces/ICatalyst.sol\\\";\\nimport {IAssetCreate} from \\\"./interfaces/IAssetCreate.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IExchange, ExchangeMatch} from \\\"./interfaces/IExchange.sol\\\";\\n\\n/// @title AssetCreate\\n/// @author The Sandbox\\n/// @custom:security-contact contact-blockchain@sandbox.game\\n/// @notice User-facing contract for creating new assets\\ncontract AssetCreate is\\n    IAssetCreate,\\n    Initializable,\\n    ERC2771HandlerUpgradeable,\\n    EIP712Upgradeable,\\n    AccessControlUpgradeable,\\n    PausableUpgradeable\\n{\\n    using TokenIdUtils for uint256;\\n    using Address for address;\\n\\n    IAsset public assetContract;\\n    ICatalyst public catalystContract;\\n    AuthSuperValidator public authValidator;\\n\\n    /// @notice mapping of creator address to creator nonce, a nonce is incremented every time a creator mints a new token\\n    mapping(address => uint16) public creatorNonces;\\n    /// @notice mapping of minter address to signature nonce, a nonce is incremented every time asset minter consumes a signature generated by TSB\\n    mapping(address => uint16) public signatureNonces;\\n\\n    /// @notice A fee denoted in BPS that is charged when using the lazy minting feature, deducted from the creators payout\\n    uint256 public lazyMintFeeInBps;\\n    /// @notice The address that receives the lazy mint fee\\n    address public lazyMintFeeReceiver;\\n    /// @notice mapping of tokenId => maxSupply specified by the creator\\n    mapping(uint256 => uint256) public availableToMint;\\n\\n    /// @notice The marketplace exchange contract to purchase catalyst\\n    IExchange public exchangeContract;\\n\\n    /// @notice Maximum BPS value\\n    uint256 public constant MAX_BPS_IN_UNIT = 10000;\\n    /// @notice Revealed status nonce value\\n    uint8 public constant REVEALED_NONCE = 1;\\n    /// @notice Not revealed status nonce value\\n    uint8 public constant NOT_REVEALED_NONCE = 0;\\n    /// @notice Revealed status flag\\n    bool public constant REVEALED = true;\\n    /// @notice Not revealed status flag\\n    bool public constant NOT_REVEALED = false;\\n    /// @notice Not bridged status flag\\n    bool public constant NOT_BRIDGED = false;\\n    /// @notice Role allowing to mint special assets\\n    bytes32 public constant SPECIAL_MINTER_ROLE = keccak256(\\\"SPECIAL_MINTER_ROLE\\\");\\n    /// @notice Role allowing to pause the contract\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    /// @notice Mint signature typehash\\n    bytes32 public constant MINT_TYPEHASH =\\n        keccak256(\\\"Mint(address creator,uint16 nonce,uint8 tier,uint256 amount,bool revealed,string metadataHash)\\\");\\n    /// @notice Mint batch signature typehash\\n    bytes32 public constant MINT_BATCH_TYPEHASH =\\n        keccak256(\\n            \\\"MintBatch(address creator,uint16 nonce,uint8[] tiers,uint256[] amounts,bool[] revealed,string[] metadataHashes)\\\"\\n        );\\n    /// @notice Lazy mint signature typehash\\n    bytes32 public constant LAZY_MINT_TYPEHASH =\\n        keccak256(\\n            \\\"LazyMint(address caller,address creator,uint16 nonce,uint8 tier,uint256 amount,uint256 unitPrice,address paymentToken,string metadataHash,uint256 maxSupply,uint256 expirationTime)\\\"\\n        );\\n    /// @notice Lazy mint batch signature typehash\\n    bytes32 public constant LAZY_MINT_BATCH_TYPEHASH =\\n        keccak256(\\n            \\\"LazyMintBatch(address caller,address[] creators,uint16 nonce,uint8[] tiers,uint256[] amounts,uint256[] unitPrices,address[] paymentTokens,string[] metadataHashes,uint256[] maxSupplies,uint256 expirationTime)\\\"\\n        );\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Initialize the contract\\n    /// @param _name The name of the contract (for EIP712)\\n    /// @param _version The version of the contract (for EIP712)\\n    /// @param _assetContract The address of the asset contract\\n    /// @param _catalystContract The address of the catalyst contract\\n    /// @param _authValidator The address of the AuthSuperValidator contract\\n    /// @param _forwarder The address of the forwarder contract\\n    /// @param _defaultAdmin The address of the default admin\\n    function initialize(\\n        string memory _name,\\n        string memory _version,\\n        address _assetContract,\\n        address _catalystContract,\\n        address _authValidator,\\n        address _forwarder,\\n        address _defaultAdmin\\n    ) external initializer {\\n        assetContract = IAsset(_assetContract);\\n        catalystContract = ICatalyst(_catalystContract);\\n        authValidator = AuthSuperValidator(_authValidator);\\n        __ERC2771Handler_init(_forwarder);\\n        __EIP712_init(_name, _version);\\n        __AccessControl_init();\\n        __Pausable_init();\\n        _grantRole(DEFAULT_ADMIN_ROLE, _defaultAdmin);\\n    }\\n\\n    /// @notice Create a new asset\\n    /// @param signature A signature generated by TSB\\n    /// @param tier The tier of the asset to mint\\n    /// @param amount The amount of the asset to mint\\n    /// @param revealed Whether the asset is revealed or not\\n    /// @param metadataHash The metadata hash of the asset to mint\\n    /// @param creator The address of the creator\\n    function createAsset(\\n        bytes memory signature,\\n        uint8 tier,\\n        uint256 amount,\\n        bool revealed,\\n        string calldata metadataHash,\\n        address creator\\n    ) external whenNotPaused {\\n        require(_msgSender() == creator, \\\"AssetCreate: Invalid caller\\\");\\n        require(\\n            authValidator.verify(\\n                signature,\\n                _hashMint(creator, signatureNonces[_msgSender()]++, tier, amount, revealed, metadataHash)\\n            ),\\n            \\\"AssetCreate: Invalid signature\\\"\\n        );\\n\\n        uint256 tokenId =\\n            TokenIdUtils.generateTokenId(\\n                creator,\\n                tier,\\n                ++creatorNonces[creator],\\n                revealed ? REVEALED_NONCE : NOT_REVEALED_NONCE,\\n                NOT_BRIDGED\\n            );\\n\\n        // burn catalyst of a given tier, the tier is representing catalyst token id\\n        catalystContract.burnFrom(creator, tier, amount);\\n        assetContract.mint(creator, tokenId, amount, metadataHash);\\n        emit AssetMinted(creator, tokenId, tier, amount, metadataHash, revealed);\\n    }\\n\\n    /// @notice Create multiple assets at once\\n    /// @param signature A signature generated by TSB\\n    /// @param tiers The tiers of the assets to mint\\n    /// @param amounts The amounts of the assets to mint\\n    /// @param revealed Whether the assets are revealed or not\\n    /// @param metadataHashes The metadata hashes of the assets to mint\\n    /// @param creator The address of the creator\\n    function createMultipleAssets(\\n        bytes memory signature,\\n        uint8[] calldata tiers,\\n        uint256[] calldata amounts,\\n        bool[] calldata revealed,\\n        string[] calldata metadataHashes,\\n        address creator\\n    ) external whenNotPaused {\\n        require(_msgSender() == creator, \\\"AssetCreate: Invalid caller\\\");\\n        require(\\n            authValidator.verify(\\n                signature,\\n                _hashBatchMint(creator, signatureNonces[_msgSender()]++, tiers, amounts, revealed, metadataHashes)\\n            ),\\n            \\\"AssetCreate: Invalid signature\\\"\\n        );\\n\\n        require(amounts.length == tiers.length, \\\"AssetCreate: 1-Array lengths\\\");\\n        require(revealed.length == tiers.length, \\\"AssetCreate: 2-Array lengths\\\");\\n        require(metadataHashes.length == tiers.length, \\\"AssetCreate: 3-Array lengths\\\");\\n\\n        uint256[] memory tokenIds = new uint256[](tiers.length);\\n        uint256[] memory tiersToBurn = new uint256[](tiers.length);\\n        for (uint256 i; i < tiers.length; ) {\\n            tiersToBurn[i] = tiers[i];\\n            tokenIds[i] = TokenIdUtils.generateTokenId(\\n                creator,\\n                tiers[i],\\n                ++creatorNonces[creator],\\n                revealed[i] ? REVEALED_NONCE : NOT_REVEALED_NONCE,\\n                NOT_BRIDGED\\n            );\\n            unchecked {++i;}\\n        }\\n\\n        catalystContract.burnBatchFrom(creator, tiersToBurn, amounts);\\n\\n        assetContract.mintBatch(creator, tokenIds, amounts, metadataHashes);\\n        emit AssetBatchMinted(creator, tokenIds, tiers, amounts, metadataHashes, revealed);\\n    }\\n\\n    /// @notice Create special assets\\n    /// @dev Only callable by the special minter\\n    /// @param signature A signature generated by TSB\\n    /// @param amount The amount of the asset to mint\\n    /// @param metadataHash The metadata hash of the asset to mint,\\n    /// @param creator The address of the creator\\n    function createSpecialAsset(\\n        bytes memory signature,\\n        uint256 amount,\\n        string calldata metadataHash,\\n        address creator\\n    ) external onlyRole(SPECIAL_MINTER_ROLE) whenNotPaused {\\n        require(\\n            authValidator.verify(\\n                signature,\\n                _hashMint(\\n                    creator,\\n                    signatureNonces[_msgSender()]++,\\n                    uint8(ICatalyst.CatalystType.TSB_EXCLUSIVE),\\n                    amount,\\n                    REVEALED,\\n                    metadataHash\\n                )\\n            ),\\n            \\\"AssetCreate: Invalid signature\\\"\\n        );\\n\\n        uint256 tokenId =\\n            TokenIdUtils.generateTokenId(\\n                creator,\\n                uint8(ICatalyst.CatalystType.TSB_EXCLUSIVE),\\n                ++creatorNonces[creator],\\n                REVEALED_NONCE,\\n                NOT_BRIDGED\\n            );\\n\\n        assetContract.mint(creator, tokenId, amount, metadataHash);\\n        emit SpecialAssetMinted(\\n            creator,\\n            tokenId,\\n            uint8(ICatalyst.CatalystType.TSB_EXCLUSIVE),\\n            amount,\\n            metadataHash,\\n            REVEALED\\n        );\\n    }\\n\\n    /// @notice Create multiple special assets\\n    /// @dev Only callable by the special minter\\n    /// @param signature A signature generated by TSB\\n    /// @param amounts The amounts of the assets to mint\\n    /// @param metadataHashes The metadata hashes of the assets to mint\\n    /// @param creator The address of the creator\\n    function createMultipleSpecialAssets(\\n        bytes memory signature,\\n        uint256[] calldata amounts,\\n        string[] calldata metadataHashes,\\n        address creator\\n    ) external onlyRole(SPECIAL_MINTER_ROLE) whenNotPaused {\\n        require(amounts.length == metadataHashes.length, \\\"AssetCreate: Array lengths\\\");\\n\\n        bool[] memory revealed = new bool[](amounts.length);\\n        uint8[] memory tiers = new uint8[](amounts.length);\\n        for (uint256 i; i < amounts.length; ) {\\n            revealed[i] = REVEALED;\\n            tiers[i] = uint8(ICatalyst.CatalystType.TSB_EXCLUSIVE);\\n            unchecked {++i;}\\n        }\\n\\n        require(\\n            authValidator.verify(\\n                signature,\\n                _hashBatchMint(creator, signatureNonces[_msgSender()]++, tiers, amounts, revealed, metadataHashes)\\n            ),\\n            \\\"AssetCreate: Invalid signature\\\"\\n        );\\n\\n        uint256[] memory tokenIds = new uint256[](amounts.length);\\n        for (uint256 i; i < amounts.length; ) {\\n            tokenIds[i] = TokenIdUtils.generateTokenId(\\n                creator,\\n                uint8(ICatalyst.CatalystType.TSB_EXCLUSIVE),\\n                ++creatorNonces[creator],\\n                REVEALED_NONCE,\\n                NOT_BRIDGED\\n            );\\n            unchecked {++i;}\\n        }\\n\\n        assetContract.mintBatch(creator, tokenIds, amounts, metadataHashes);\\n        emit SpecialAssetBatchMinted(creator, tokenIds, tiers, amounts, metadataHashes, revealed);\\n    }\\n\\n    /// @notice Lazily creates a new asset with a signature\\n    /// @dev Allows users to lazy mint assets\\n    /// @param from The address of the sender\\n    /// @param signature The signature of the lazy mint generated by TSB\\n    /// @param mintData The data for the lazy mint\\n    /// @param matchedOrders The orders to match for catalyst purchase\\n    function lazyCreateAsset(\\n        address from,\\n        bytes memory signature,\\n        LazyMintData calldata mintData,\\n        ExchangeMatch[] calldata matchedOrders\\n    ) external whenNotPaused {\\n        require(\\n            authValidator.verify(\\n                signature,\\n                _hashLazyMint(\\n                    mintData.caller,\\n                    mintData.creator,\\n                    signatureNonces[mintData.caller]++,\\n                    mintData.tier,\\n                    mintData.amount,\\n                    mintData.unitPrice,\\n                    mintData.paymentToken,\\n                    mintData.metadataHash,\\n                    mintData.maxSupply,\\n                    mintData.expirationTime\\n                ),\\n                mintData.expirationTime\\n            ),\\n            \\\"AssetCreate: Invalid signature\\\"\\n        );\\n\\n        require(from == mintData.caller, \\\"AssetCreate: Invalid caller\\\");\\n        // check if asset has already been minted before\\n        uint256 tokenId = assetContract.getTokenIdByMetadataHash(mintData.metadataHash);\\n        if (tokenId == 0) {\\n            tokenId = TokenIdUtils.generateTokenId(\\n                mintData.creator,\\n                mintData.tier,\\n                ++creatorNonces[mintData.creator],\\n                mintData.tier == uint8(ICatalyst.CatalystType.COMMON) ? REVEALED_NONCE : NOT_REVEALED_NONCE,\\n                NOT_BRIDGED\\n            );\\n            require(mintData.amount <= mintData.maxSupply, \\\"AssetCreate: Max supply exceeded\\\");\\n            unchecked {availableToMint[tokenId] = mintData.maxSupply - mintData.amount;}\\n        } else {\\n            require(availableToMint[tokenId] >= mintData.amount, \\\"AssetCreate: Max supply reached\\\");\\n            unchecked {availableToMint[tokenId] -= mintData.amount;}\\n        }\\n\\n        if (matchedOrders.length > 0) {\\n            exchangeContract.matchOrdersFrom(mintData.caller, matchedOrders);\\n        }\\n        // burn catalyst of a given tier, the tier is representing catalyst token id\\n        catalystContract.burnFrom(mintData.caller, mintData.tier, mintData.amount);\\n        // send the payment to the creator after deducting the lazy mint fee\\n        _distributePayment(\\n            mintData.caller,\\n            mintData.unitPrice,\\n            mintData.amount,\\n            mintData.paymentToken,\\n            mintData.creator\\n        );\\n        // mint the asset\\n\\n        assetContract.mint(mintData.caller, tokenId, mintData.amount, mintData.metadataHash);\\n        emit AssetLazyMinted(\\n            mintData.caller,\\n            mintData.creator,\\n            tokenId,\\n            mintData.tier,\\n            mintData.amount,\\n            mintData.metadataHash\\n        );\\n    }\\n\\n    /// @notice Lazily creates multiple assets with a signature\\n    /// @dev Allows users to lazy mint assets coming from multiple creators\\n    /// @param from The address of the sender\\n    /// @param signature The signature of the lazy mint generated by TSB\\n    /// @param mintData The data for the lazy mint\\n    /// @param matchedOrdersArray The orders to match for catalyst purchase\\n    function lazyCreateMultipleAssets(\\n        address from,\\n        bytes memory signature,\\n        LazyMintBatchData calldata mintData,\\n        ExchangeMatch[][] calldata matchedOrdersArray\\n    ) external whenNotPaused {\\n        require(\\n            authValidator.verify(\\n                signature,\\n                _hashLazyBatchMint(\\n                    mintData.caller,\\n                    mintData.creators,\\n                    signatureNonces[mintData.caller]++,\\n                    mintData.tiers,\\n                    mintData.amounts,\\n                    mintData.unitPrices,\\n                    mintData.paymentTokens,\\n                    mintData.metadataHashes,\\n                    mintData.maxSupplies,\\n                    mintData.expirationTime\\n                ),\\n                mintData.expirationTime\\n            ),\\n            \\\"AssetCreate: Invalid signature\\\"\\n        );\\n\\n        require(from == mintData.caller, \\\"AssetCreate: Invalid caller\\\");\\n        uint256 expectedLength = mintData.tiers.length;\\n        require(mintData.creators.length == expectedLength, \\\"AssetCreate: 1-Array lengths\\\");\\n        require(mintData.amounts.length == expectedLength, \\\"AssetCreate: 2-Array lengths\\\");\\n        require(mintData.unitPrices.length == expectedLength, \\\"AssetCreate: 3-Array lengths\\\");\\n        require(mintData.paymentTokens.length == expectedLength, \\\"AssetCreate: 4-Array lengths\\\");\\n        require(mintData.metadataHashes.length == expectedLength, \\\"AssetCreate: 5-Array lengths\\\");\\n        require(mintData.maxSupplies.length == expectedLength, \\\"AssetCreate: 6-Array lengths\\\");\\n\\n        uint256[] memory tokenIds = new uint256[](expectedLength);\\n        uint256[] memory tiersToBurn = new uint256[](expectedLength);\\n        for (uint256 i; i < expectedLength; ) {\\n            uint16 revealed =\\n                mintData.tiers[i] == uint8(ICatalyst.CatalystType.COMMON) ? REVEALED_NONCE : NOT_REVEALED_NONCE;\\n            tiersToBurn[i] = mintData.tiers[i];\\n            tokenIds[i] = assetContract.getTokenIdByMetadataHash(mintData.metadataHashes[i]);\\n            if (tokenIds[i] == 0) {\\n                tokenIds[i] = TokenIdUtils.generateTokenId(\\n                    mintData.creators[i],\\n                    mintData.tiers[i],\\n                    ++creatorNonces[mintData.creators[i]],\\n                    revealed,\\n                    NOT_BRIDGED\\n                );\\n                require(mintData.amounts[i] <= mintData.maxSupplies[i], \\\"AssetCreate: Max supply exceeded\\\");\\n                unchecked {availableToMint[tokenIds[i]] = mintData.maxSupplies[i] - mintData.amounts[i];}\\n            } else {\\n                require(availableToMint[tokenIds[i]] >= mintData.amounts[i], \\\"AssetCreate: Max supply reached\\\");\\n                unchecked {availableToMint[tokenIds[i]] -= mintData.amounts[i];}\\n            }\\n            if (matchedOrdersArray.length > i && matchedOrdersArray[i].length > 0) {\\n                exchangeContract.matchOrdersFrom(mintData.caller, matchedOrdersArray[i]);\\n            }\\n            _distributePayment(\\n                mintData.caller,\\n                mintData.unitPrices[i],\\n                mintData.amounts[i],\\n                mintData.paymentTokens[i],\\n                mintData.creators[i]\\n            );\\n            unchecked {++i;}\\n        }\\n\\n        catalystContract.burnBatchFrom(mintData.caller, tiersToBurn, mintData.amounts);\\n        assetContract.mintBatch(mintData.caller, tokenIds, mintData.amounts, mintData.metadataHashes);\\n        emit AssetBatchLazyMinted(\\n            mintData.caller,\\n            mintData.creators,\\n            tokenIds,\\n            mintData.tiers,\\n            mintData.amounts,\\n            mintData.metadataHashes\\n        );\\n    }\\n\\n    /// @notice Pause the contracts mint and burn functions\\n    function pause() external onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    /// @notice Unpause the contracts mint and burn functions\\n    function unpause() external onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n\\n    /// @notice Set the lazy mint fee\\n    /// @param _lazyMintFeeInBps The fee to set\\n    function setLazyMintFee(uint256 _lazyMintFeeInBps) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(_lazyMintFeeInBps <= MAX_BPS_IN_UNIT, \\\"AssetCreate: Invalid fee\\\");\\n        lazyMintFeeInBps = _lazyMintFeeInBps;\\n        emit LazyMintFeeSet(_lazyMintFeeInBps);\\n    }\\n\\n    /// @notice Set the lazy mint fee receiver\\n    /// @param _lazyMintFeeReceiver The receiver to set\\n    function setLazyMintFeeReceiver(address _lazyMintFeeReceiver) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(_lazyMintFeeReceiver != address(0), \\\"AssetCreate: Invalid receiver\\\");\\n        lazyMintFeeReceiver = _lazyMintFeeReceiver;\\n        emit LazyMintFeeReceiverSet(_lazyMintFeeReceiver);\\n    }\\n\\n    /// @notice Set the exchange contract\\n    /// @param _exchangeContract The exchange contract to set\\n    function setExchangeContract(address _exchangeContract) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(_exchangeContract.isContract(), \\\"AssetCreate: Invalid contract\\\");\\n        exchangeContract = IExchange(_exchangeContract);\\n        emit ExchangeContractSet(_exchangeContract);\\n    }\\n\\n    /// @notice Set a new trusted forwarder address, limited to DEFAULT_ADMIN_ROLE only\\n    /// @dev Change the address of the trusted forwarder for meta-TX\\n    /// @param trustedForwarder The new trustedForwarder\\n    function setTrustedForwarder(address trustedForwarder) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(trustedForwarder.isContract(), \\\"AssetCreate: Bad forwarder addr\\\");\\n        _setTrustedForwarder(trustedForwarder);\\n    }\\n\\n    /// @notice Set the auth validator contract address\\n    /// @param _authValidator The auth validator contract address to set\\n    function setAuthValidator(address _authValidator) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(_authValidator.isContract(), \\\"AssetCreate: Invalid contract\\\");\\n        authValidator = AuthSuperValidator(_authValidator);\\n        emit AuthValidatorSet(_authValidator);\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override(ContextUpgradeable, ERC2771HandlerUpgradeable)\\n        returns (address sender)\\n    {\\n        return ERC2771HandlerUpgradeable._msgSender();\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        virtual\\n        override(ContextUpgradeable, ERC2771HandlerUpgradeable)\\n        returns (bytes calldata)\\n    {\\n        return ERC2771HandlerUpgradeable._msgData();\\n    }\\n\\n    /// @notice Splits the lazy mint payment between the creator and TSB if there is a fee\\n    /// @param from The address of the sender\\n    /// @param unitPrice The price of the asset\\n    /// @param amount The amount of copies to mint\\n    /// @param paymentToken The payment token\\n    /// @param creator The address of the creator\\n    function _distributePayment(\\n        address from,\\n        uint256 unitPrice,\\n        uint256 amount,\\n        address paymentToken,\\n        address creator\\n    ) private {\\n        uint256 fee;\\n        if (lazyMintFeeInBps > 0) {\\n            fee = (unitPrice * amount * lazyMintFeeInBps) / MAX_BPS_IN_UNIT;\\n            SafeERC20.safeTransferFrom(IERC20(paymentToken), from, lazyMintFeeReceiver, fee);\\n        }\\n        uint256 creatorPayment = unitPrice * amount - fee;\\n        SafeERC20.safeTransferFrom(IERC20(paymentToken), from, creator, creatorPayment);\\n    }\\n\\n    /// @notice Creates a hash of the mint data\\n    /// @param creator The address of the creator\\n    /// @param nonce The nonce of the creator\\n    /// @param tier The tier of the asset\\n    /// @param amount The amount of copies to mint\\n    /// @param revealed Whether the asset is revealed or not\\n    /// @param metadataHash The metadata hash of the asset\\n    /// @return digest The hash of the mint data\\n    function _hashMint(\\n        address creator,\\n        uint16 nonce,\\n        uint8 tier,\\n        uint256 amount,\\n        bool revealed,\\n        string memory metadataHash\\n    ) private view returns (bytes32 digest) {\\n        digest = _hashTypedDataV4(\\n            keccak256(\\n                abi.encode(\\n                    MINT_TYPEHASH,\\n                    creator,\\n                    nonce,\\n                    tier,\\n                    amount,\\n                    revealed,\\n                    keccak256((abi.encodePacked(metadataHash)))\\n                )\\n            )\\n        );\\n    }\\n\\n    /// @notice Creates a hash of the mint batch data\\n    /// @param creator The address of the creator\\n    /// @param nonce The nonce of the creator\\n    /// @param tiers The tiers of the assets\\n    /// @param amounts The amounts of copies to mint\\n    /// @param revealed Whether the assets are revealed or not\\n    /// @param metadataHashes The metadata hashes of the assets\\n    /// @return digest The hash of the mint batch data\\n    function _hashBatchMint(\\n        address creator,\\n        uint16 nonce,\\n        uint8[] memory tiers,\\n        uint256[] memory amounts,\\n        bool[] memory revealed,\\n        string[] memory metadataHashes\\n    ) private view returns (bytes32 digest) {\\n        digest = _hashTypedDataV4(\\n            keccak256(\\n                abi.encode(\\n                    MINT_BATCH_TYPEHASH,\\n                    creator,\\n                    nonce,\\n                    keccak256(abi.encodePacked(tiers)),\\n                    keccak256(abi.encodePacked(amounts)),\\n                    keccak256(abi.encodePacked(revealed)),\\n                    _encodeHashes(metadataHashes)\\n                )\\n            )\\n        );\\n    }\\n\\n    /// @notice Creates a hash of the lazy mint data\\n    /// @param creator The address of the creator\\n    /// @param nonce The nonce of the caller\\n    /// @param tier The tier of the asset\\n    /// @param amount The amount of copies to mint\\n    /// @param metadataHash The metadata hash of the asset\\n    /// @param maxSupply The max supply of the asset\\n    /// @param expirationTime The expiration timestamp of the signature\\n    function _hashLazyMint(\\n        address caller,\\n        address creator,\\n        uint16 nonce,\\n        uint8 tier,\\n        uint256 amount,\\n        uint256 unitPrice,\\n        address paymentToken,\\n        string memory metadataHash,\\n        uint256 maxSupply,\\n        uint256 expirationTime\\n    ) private view returns (bytes32 digest) {\\n        digest = _hashTypedDataV4(\\n            keccak256(\\n                abi.encode(\\n                    LAZY_MINT_TYPEHASH,\\n                    caller,\\n                    creator,\\n                    nonce,\\n                    tier,\\n                    amount,\\n                    unitPrice,\\n                    paymentToken,\\n                    keccak256((abi.encodePacked(metadataHash))),\\n                    maxSupply,\\n                    expirationTime\\n                )\\n            )\\n        );\\n    }\\n\\n    /// @notice Creates a hash of the lazy mint batch data\\n    /// @param creators The addresses of the creators\\n    /// @param nonce The nonce of the caller\\n    /// @param tiers The tiers of the assets\\n    /// @param amounts The amounts of copies to mint\\n    /// @param unitPrices The unit prices of the assets\\n    /// @param paymentTokens The payment tokens of the assets\\n    /// @param metadataHashes The metadata hashes of the assets\\n    /// @param maxSupplies The max supplies of the assets\\n    /// @param expirationTime The expiration timestamp of the signature\\n    function _hashLazyBatchMint(\\n        address caller,\\n        address[] memory creators,\\n        uint16 nonce,\\n        uint8[] memory tiers,\\n        uint256[] memory amounts,\\n        uint256[] memory unitPrices,\\n        address[] memory paymentTokens,\\n        string[] memory metadataHashes,\\n        uint256[] memory maxSupplies,\\n        uint256 expirationTime\\n    ) private view returns (bytes32 digest) {\\n        digest = _hashTypedDataV4(\\n            keccak256(\\n                abi.encode(\\n                    LAZY_MINT_BATCH_TYPEHASH,\\n                    caller,\\n                    keccak256(abi.encodePacked(creators)),\\n                    nonce,\\n                    keccak256(abi.encodePacked(tiers)),\\n                    keccak256(abi.encodePacked(amounts)),\\n                    keccak256(abi.encodePacked(unitPrices)),\\n                    keccak256(abi.encodePacked(paymentTokens)),\\n                    _encodeHashes(metadataHashes),\\n                    keccak256(abi.encodePacked(maxSupplies)),\\n                    expirationTime\\n                )\\n            )\\n        );\\n    }\\n\\n    /// @notice Encodes the hashes of the metadata for signature verification\\n    /// @param metadataHashes The hashes of the metadata\\n    /// @return encodedHashes The encoded hashes of the metadata\\n    function _encodeHashes(string[] memory metadataHashes) private pure returns (bytes32) {\\n        uint256 arrayLength = metadataHashes.length;\\n        bytes32[] memory encodedHashes = new bytes32[](arrayLength);\\n        for (uint256 i; i < arrayLength; ) {\\n            encodedHashes[i] = keccak256((abi.encodePacked(metadataHashes[i])));\\n            unchecked {++i;}\\n        }\\n\\n        return keccak256(abi.encodePacked(encodedHashes));\\n    }\\n\\n    uint256[41] private __gap;\\n}\\n\",\"keccak256\":\"0x5dc90c4745b019042e4c78b484b82678cc7407081f83de5f4451ca9beed34cb5\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/asset/contracts/AuthSuperValidator.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\n/// @title AuthSuperValidator\\n/// @author The Sandbox\\n/// @custom:security-contact contact-blockchain@sandbox.game\\n/// @notice This contract is used to validate the signatures of the backend, each contract can have a separate signer assigned\\ncontract AuthSuperValidator is AccessControl {\\n    mapping(address => address) private _signers;\\n\\n    /// @dev Constructor\\n    /// @param admin Address of the admin that will be able to grant roles\\n    constructor(address admin) {\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\\n    }\\n\\n    /// @notice Sets the signer for a contract\\n    /// @dev Only the admin can call this function\\n    /// @param contractAddress Address of the contract to set the signer for\\n    /// @param signer Address of the signer\\n    function setSigner(address contractAddress, address signer) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _signers[contractAddress] = signer;\\n    }\\n\\n    /// @notice Gets the signer for a contract\\n    /// @param contractAddress Address of the contract to get the signer for\\n    /// @return address of the signer\\n    function getSigner(address contractAddress) public view returns (address) {\\n        return _signers[contractAddress];\\n    }\\n\\n    /// @notice Takes the signature and the digest and returns if the signer has a backend signer role assigned\\n    /// @dev Multipurpose function that can be used to verify signatures with different digests\\n    /// @param signature Signature hash\\n    /// @param digest Digest hash\\n    /// @return bool\\n    function verify(bytes memory signature, bytes32 digest) public view returns (bool) {\\n        address signer = _signers[_msgSender()];\\n        require(signer != address(0), \\\"AuthSuperValidator: No signer\\\");\\n        address recoveredSigner = ECDSA.recover(digest, signature);\\n        return recoveredSigner == signer;\\n    }\\n\\n    /// @notice Takes the signature and the digest and returns if the signer has a backend signer role assigned and the signature is not expired\\n    /// @dev Multipurpose function that can be used to verify signatures with different digests and expiration times\\n    /// @param signature Signature hash\\n    /// @param digest Digest hash\\n    /// @return bool\\n    function verify(\\n        bytes memory signature,\\n        bytes32 digest,\\n        uint256 expirationTime\\n    ) public view returns (bool) {\\n        require(block.timestamp <= expirationTime, \\\"AuthSuperValidator: Expired\\\");\\n        return verify(signature, digest);\\n    }\\n\\n    /// @notice Prevents the DEFAULT_ADMIN_ROLE from being renounced\\n    /// @dev This function overrides the default renounceRole function to prevent the DEFAULT_ADMIN_ROLE from being renounced\\n    /// @param role Role to renounce\\n    /// @param account Account to renounce the role for\\n    function renounceRole(bytes32 role, address account) public override {\\n        require(role != DEFAULT_ADMIN_ROLE, \\\"AuthSuperValidator: Admin needed\\\");\\n        super.renounceRole(role, account);\\n    }\\n}\\n\",\"keccak256\":\"0xa285f1bb7c2aa9b4a239ff25a1048b33edc8776976dc05c778db8c408d27f335\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/asset/contracts/interfaces/IAsset.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\n/// @title Asset interface\\n/// @author The Sandbox\\ninterface IAsset {\\n    // AssetData reflects the asset tokenId structure\\n    // Refer to TokenIdUtils.sol\\n    struct AssetData {\\n        uint256 tokenId;\\n        address creator;\\n        uint256 amount;\\n        uint8 tier;\\n        uint16 creatorNonce;\\n        bool revealed;\\n        string metadataHash;\\n        bool bridged;\\n    }\\n\\n    event TrustedForwarderChanged(address indexed newTrustedForwarderAddress);\\n\\n    /// @notice Mint new tokens\\n    /// @dev Only callable by the minter role\\n    /// @param to The address of the recipient\\n    /// @param id The id of the token to mint\\n    /// @param amount The amount of the token to mint\\n    /// @param metadataHash The metadata hash of the token to mint\\n    function mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        string memory metadataHash\\n    ) external;\\n\\n    /// @notice Mint new tokens with catalyst tier chosen by the creator\\n    /// @dev Only callable by the minter role\\n    /// @param to The address of the recipient\\n    /// @param ids The ids of the tokens to mint\\n    /// @param amounts The amounts of the tokens to mint\\n    /// @param metadataHashes The metadata hashes of the tokens to mint\\n    function mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        string[] memory metadataHashes\\n    ) external;\\n\\n    /// @notice Burn a token from a given account\\n    /// @dev Only the minter role can burn tokens\\n    /// @dev This function was added with token recycling and bridging in mind but may have other use cases\\n    /// @param account The account to burn tokens from\\n    /// @param id The token id to burn\\n    /// @param amount The amount of tokens to burn\\n    function burnFrom(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) external;\\n\\n    /// @notice Burn a batch of tokens from a given account\\n    /// @dev Only the minter role can burn tokens\\n    /// @dev This function was added with token recycling and bridging in mind but may have other use cases\\n    /// @dev The length of the ids and amounts arrays must be the same\\n    /// @param account The account to burn tokens from\\n    /// @param ids An array of token ids to burn\\n    /// @param amounts An array of amounts of tokens to burn\\n    function burnBatchFrom(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    /// @notice returns the tokenId associated with provided metadata hash\\n    /// @param metadataHash The metadata hash to get tokenId for\\n    /// @return tokenId the tokenId associated with the metadata hash\\n    function getTokenIdByMetadataHash(string memory metadataHash) external view returns (uint256 tokenId);\\n}\\n\",\"keccak256\":\"0xbc79058becff31b0b7f465d92a89aad25f561dbdb5a2cd068d51c7ef93b4fbfe\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/asset/contracts/interfaces/IAssetCreate.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title AssetCreate interface\\n/// @author The Sandbox\\ninterface IAssetCreate {\\n    struct LazyMintData {\\n        address caller;\\n        uint8 tier;\\n        uint256 amount;\\n        uint256 unitPrice;\\n        address paymentToken;\\n        string metadataHash;\\n        uint256 maxSupply;\\n        address creator;\\n        uint256 expirationTime;\\n    }\\n\\n    struct LazyMintBatchData {\\n        address caller;\\n        uint8[] tiers;\\n        uint256[] amounts;\\n        uint256[] unitPrices;\\n        address[] paymentTokens;\\n        string[] metadataHashes;\\n        uint256[] maxSupplies;\\n        address[] creators;\\n        uint256 expirationTime;\\n    }\\n\\n    event TrustedForwarderChanged(address indexed newTrustedForwarderAddress);\\n    event AssetMinted(\\n        address indexed creator,\\n        uint256 tokenId,\\n        uint16 tier,\\n        uint256 amount,\\n        string metadataHash,\\n        bool revealed\\n    );\\n    event SpecialAssetMinted(\\n        address indexed creator,\\n        uint256 tokenId,\\n        uint16 tier,\\n        uint256 amount,\\n        string metadataHash,\\n        bool revealed\\n    );\\n    event SpecialAssetBatchMinted(\\n        address indexed creator,\\n        uint256[] tokenIds,\\n        uint8[] tiers,\\n        uint256[] amounts,\\n        string[] metadataHashes,\\n        bool[] revealed\\n    );\\n    event AssetBatchMinted(\\n        address indexed creator,\\n        uint256[] tokenIds,\\n        uint8[] tiers,\\n        uint256[] amounts,\\n        string[] metadataHashes,\\n        bool[] revealed\\n    );\\n    event AssetLazyMinted(\\n        address indexed recipient,\\n        address indexed creator,\\n        uint256 tokenId,\\n        uint16 tier,\\n        uint256 amount,\\n        string metadataHash\\n    );\\n    event AssetBatchLazyMinted(\\n        address indexed recipient,\\n        address[] creators,\\n        uint256[] tokenIds,\\n        uint8[] tiers,\\n        uint256[] amounts,\\n        string[] metadataHashes\\n    );\\n    event LazyMintFeeSet(uint256 indexed newLazyMintFee);\\n    event LazyMintFeeReceiverSet(address indexed newLazyMintFeeReceived);\\n    event ExchangeContractSet(address indexed exchangeContract);\\n    event AuthValidatorSet(address indexed authValidator);\\n}\\n\",\"keccak256\":\"0x53780ce363f6ee1f0e879ae7d6b4ee291d2b15d5e6352a9b04743a5ddbdb9b69\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/asset/contracts/interfaces/ICatalyst.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\ninterface ICatalyst {\\n    enum CatalystType {TSB_EXCLUSIVE, COMMON, UNCOMMON, RARE, EPIC, LEGENDARY, MYTHIC}\\n\\n    event TrustedForwarderChanged(address indexed newTrustedForwarderAddress);\\n    event NewCatalystTypeAdded(uint256 catalystId);\\n    event DefaultRoyaltyChanged(address indexed newDefaultRoyaltyRecipient, uint256 newDefaultRoyaltyAmount);\\n    event BaseURISet(string baseURI);\\n    event OperatorRegistrySet(address indexed registry);\\n\\n    /// @notice Mints a new token, limited to MINTER_ROLE only\\n    /// @param to The address that will own the minted token\\n    /// @param id The token id to mint\\n    /// @param amount The amount to be minted\\n    function mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount\\n    ) external;\\n\\n    /// @notice Mints a batch of tokens, limited to MINTER_ROLE only\\n    /// @param to The address that will own the minted tokens\\n    /// @param ids The token ids to mint\\n    /// @param amounts The amounts to be minted per token id\\n    function mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    /// @notice Burns a specified amount of tokens from a specific address\\n    /// @param account The address to burn from\\n    /// @param id The token id to burn\\n    /// @param amount The amount to be burned\\n    function burnFrom(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) external;\\n\\n    /// @notice Burns a batch of tokens from a specific address\\n    /// @param account The address to burn from\\n    /// @param ids The token ids to burn\\n    /// @param amounts The amounts to be burned\\n    function burnBatchFrom(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    /// @notice Add a new catalyst type, limited to DEFAULT_ADMIN_ROLE only\\n    /// @param ipfsCID The royalty bps for the catalyst\\n    function addNewCatalystType(string memory ipfsCID) external;\\n\\n    /// @notice Set a new URI for specific tokenid\\n    /// @param tokenId The token id to set URI for\\n    /// @param metadataHash The new URI\\n    function setMetadataHash(uint256 tokenId, string memory metadataHash) external;\\n\\n    /// @notice Set a new base URI\\n    /// @param baseURI The new base URI\\n    function setBaseURI(string memory baseURI) external;\\n}\\n\",\"keccak256\":\"0x4dec39e4b662c4b51f0f828f1b8ea01c873c8a0a18a7c17bc5497f557ceff101\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/asset/contracts/interfaces/IExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {LibOrder} from \\\"../libraries/LibOrder.sol\\\";\\n\\nstruct ExchangeMatch {\\n    LibOrder.Order orderLeft; // Left order details\\n    bytes signatureLeft; // Signature of the left order\\n    LibOrder.Order orderRight; // Right order details\\n    bytes signatureRight; // Signature of the right order\\n}\\n\\ninterface IExchange {\\n    function matchOrdersFrom(address sender, ExchangeMatch[] calldata matchedOrders) external;\\n}\\n\",\"keccak256\":\"0x298265d4ec9d2d854786f9663e8a76366a8c417334a43a1f6d8b2b22f4418b34\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/asset/contracts/libraries/LibAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/// @author The Sandbox\\n/// @title LibAsset: A library for handling different types of Ethereum assets.\\n/// @notice This library contains structs, enums, and utility functions for managing and processing Ethereum assets.\\nlibrary LibAsset {\\n    /// @dev Represents different types of assets on the Ethereum network.\\n    enum AssetClass {\\n        INVALID, // Represents an invalid asset type.\\n        ERC20, // Represents an ERC20 token.\\n        ERC721, // Represents a single ERC721 token.\\n        ERC1155 // Represents an ERC1155 token.\\n    }\\n\\n    /// @dev Represents the side of the trade from which a fee should be taken, if any.\\n    enum FeeSide {\\n        NONE, // No fees are taken.\\n        LEFT, // Fees are taken from the left side of the trade.\\n        RIGHT // Fees are taken from the right side of the trade.\\n    }\\n\\n    /// @dev Represents the type of a specific asset.\\n    /// AssetType can represent a specific ERC-721 token (defined by the token contract address and tokenId) or\\n    /// a specific ERC-20 token (like DAI).\\n    struct AssetType {\\n        AssetClass assetClass; // The class of the asset (ERC20, ERC721, etc.).\\n        bytes data; // Contains the token's contract address and possibly its tokenId.\\n    }\\n\\n    /// @dev Represents any asset on the Ethereum blockchain with its type and value.\\n    struct Asset {\\n        AssetType assetType; // The type of the asset.\\n        uint256 value; // The amount or value of the asset.\\n    }\\n\\n    bytes32 internal constant ASSET_TYPE_TYPEHASH = keccak256(\\\"AssetType(uint256 assetClass,bytes data)\\\");\\n\\n    bytes32 internal constant ASSET_TYPEHASH =\\n        keccak256(\\\"Asset(AssetType assetType,uint256 value)AssetType(uint256 assetClass,bytes data)\\\");\\n\\n    /// @notice Determine which side of a trade should bear the fee, based on the asset types.\\n    /// @param leftClass The asset class type of the left side of the trade.\\n    /// @param rightClass The asset class type of the right side of the trade.\\n    /// @return FeeSide representing which side should bear the fee, if any.\\n    function getFeeSide(AssetClass leftClass, AssetClass rightClass) internal pure returns (FeeSide) {\\n        if (leftClass == AssetClass.ERC20 && rightClass != AssetClass.ERC20) {\\n            return FeeSide.LEFT;\\n        }\\n        if (rightClass == AssetClass.ERC20 && leftClass != AssetClass.ERC20) {\\n            return FeeSide.RIGHT;\\n        }\\n        return FeeSide.NONE;\\n    }\\n\\n    /// @notice Check if two asset types match.\\n    /// @param leftType Asset type on the left side of a trade.\\n    /// @param rightType Asset type on the right side of a trade.\\n    /// @return AssetType representing the matched asset type.\\n    function matchAssets(AssetType calldata leftType, AssetType calldata rightType)\\n        internal\\n        pure\\n        returns (AssetType memory)\\n    {\\n        AssetClass classLeft = leftType.assetClass;\\n        AssetClass classRight = rightType.assetClass;\\n\\n        require(classLeft != AssetClass.INVALID, \\\"invalid left asset class\\\");\\n        require(classRight != AssetClass.INVALID, \\\"invalid right asset class\\\");\\n        require(classLeft == classRight, \\\"assets don't match\\\");\\n\\n        bytes32 leftHash = keccak256(leftType.data);\\n        bytes32 rightHash = keccak256(rightType.data);\\n        require(leftHash == rightHash, \\\"assets don't match\\\");\\n\\n        return leftType;\\n    }\\n\\n    /// @notice Compute the hash of an asset type.\\n    /// @param assetType The asset type to hash.\\n    /// @return The hash of the asset type.\\n    function hash(AssetType memory assetType) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(ASSET_TYPE_TYPEHASH, assetType.assetClass, keccak256(assetType.data)));\\n    }\\n\\n    /// @notice Compute the hash of an asset.\\n    /// @param asset The asset to hash.\\n    /// @return The hash of the asset.\\n    function hash(Asset memory asset) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(ASSET_TYPEHASH, hash(asset.assetType), asset.value));\\n    }\\n\\n    /// @notice Decode the token details (address and tokenId) from an AssetType.\\n    /// @param assetType The asset type to decode.\\n    /// @return Address of the token\\n    /// @return Id of the token\\n    function decodeToken(AssetType memory assetType) internal pure returns (address, uint256) {\\n        return abi.decode(assetType.data, (address, uint256));\\n    }\\n\\n    /// @notice Decode the token address from an AssetType.\\n    /// @param assetType The asset type to decode.\\n    /// @return The address of the token.\\n    function decodeAddress(AssetType memory assetType) internal pure returns (address) {\\n        return abi.decode(assetType.data, (address));\\n    }\\n}\\n\",\"keccak256\":\"0x7baeda860343d05834768a950ff6c7cdf2178859bcb69d0963426e5a9d0de80d\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/asset/contracts/libraries/LibMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/// @author The Sandbox\\n/// @title LibMath: A library for handling specific math operations.\\nlibrary LibMath {\\n    uint256 internal constant ACCEPTABLE_RELATIVE_ERROR = 1000;\\n\\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\\n    ///      Reverts if rounding error is >= 0.1%\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to calculate partial of.\\n    /// @return partialAmount value of target rounded down.\\n    function safeGetPartialAmountFloor(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (uint256 partialAmount) {\\n        if (isRoundingErrorFloor(numerator, denominator, target)) {\\n            revert(\\\"rounding error\\\");\\n        }\\n        partialAmount = (numerator * target) / (denominator);\\n    }\\n\\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to multiply with numerator/denominator.\\n    /// @return isError Rounding error is present.\\n    function isRoundingErrorFloor(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (bool isError) {\\n        if (denominator == 0) {\\n            revert(\\\"division by zero\\\");\\n        }\\n\\n        // The absolute rounding error is the difference between the rounded\\n        // value and the ideal value. The relative rounding error is the\\n        // absolute rounding error divided by the absolute value of the\\n        // ideal value. This is undefined when the ideal value is zero.\\n        //\\n        // The ideal value is `numerator * target / denominator`.\\n        // Let's call `numerator * target % denominator` the remainder.\\n        // The absolute error is `remainder / denominator`.\\n        //\\n        // When the ideal value is zero, we require the absolute error to\\n        // be zero. Fortunately, this is always the case. The ideal value is\\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\\n        // remainder and absolute error are also zero.\\n        if (target == 0 || numerator == 0) {\\n            return false;\\n        }\\n\\n        // Otherwise, we want the relative rounding error to be strictly\\n        // less than 0.1%.\\n        // The relative error is `remainder / (numerator * target)`.\\n        // We want the relative error less than 1 / 1000:\\n        //        remainder / (numerator * target)  <  1 / 1000\\n        // or equivalently:\\n        //        1000 * remainder  <  numerator * target\\n        // so we have a rounding error iff:\\n        //        1000 * remainder  >=  numerator * target\\n        uint256 remainder = mulmod(target, numerator, denominator);\\n        isError = remainder * ACCEPTABLE_RELATIVE_ERROR >= numerator * target;\\n    }\\n}\\n\",\"keccak256\":\"0x74d7f3cdef04521d7e187d48a8fb82809ba3fa8d66ace7d97859efb3e645f534\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/asset/contracts/libraries/LibOrder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport {LibAsset} from \\\"./LibAsset.sol\\\";\\nimport {LibMath} from \\\"./LibMath.sol\\\";\\n\\n/// @author The Sandbox\\n/// @title Order Handling Library\\n/// @notice Provides tools for constructing, hashing, and validating orders.\\nlibrary LibOrder {\\n    bytes32 internal constant ORDER_TYPEHASH =\\n        keccak256(\\n            \\\"Order(address maker,Asset makeAsset,address taker,Asset takeAsset,uint256 salt,uint256 start,uint256 end)Asset(AssetType assetType,uint256 value)AssetType(uint256 assetClass,bytes data)\\\"\\n        );\\n\\n    /// @dev Represents the structure of an order.\\n    struct Order {\\n        address maker; // Address of the maker.\\n        LibAsset.Asset makeAsset; // Asset the maker is providing.\\n        address taker; // Address of the taker.\\n        LibAsset.Asset takeAsset; // Asset the taker is providing.\\n        uint256 salt; // Random number to ensure unique order hash.\\n        uint256 start; // Timestamp when the order becomes valid.\\n        uint256 end; // Timestamp when the order expires.\\n    }\\n\\n    /// @dev Represents the result of filling two orders.\\n    struct FillResult {\\n        uint256 leftValue; // Amount filled from the left order.\\n        uint256 rightValue; // Amount filled from the right order.\\n    }\\n\\n    /// @notice Computes the unique hash of an order.\\n    /// @param order The order data.\\n    /// @return The unique hash of the order.\\n    function hashKey(Order calldata order) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    order.maker,\\n                    LibAsset.hash(order.makeAsset.assetType),\\n                    LibAsset.hash(order.takeAsset.assetType),\\n                    order.salt\\n                )\\n            );\\n    }\\n\\n    /// @notice Computes the complete hash of an order, including domain-specific data.\\n    /// @param order The order data.\\n    /// @return The complete hash of the order.\\n    function hash(Order calldata order) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                // solhint-disable-next-line func-named-parameters\\n                abi.encode(\\n                    ORDER_TYPEHASH,\\n                    order.maker,\\n                    LibAsset.hash(order.makeAsset),\\n                    order.taker,\\n                    LibAsset.hash(order.takeAsset),\\n                    order.salt,\\n                    order.start,\\n                    order.end\\n                )\\n            );\\n    }\\n\\n    /// @notice Validates order time\\n    /// @param order Whose time we want to validate\\n    // solhint-disable not-rely-on-time\\n    // slither-disable-start timestamp\\n    function validateOrderTime(Order memory order) internal view {\\n        require(order.start == 0 || order.start < block.timestamp, \\\"Order start validation failed\\\");\\n        require(order.end == 0 || order.end > block.timestamp, \\\"Order end validation failed\\\");\\n    }\\n\\n    // slither-disable-end timestamp\\n    // solhint-enable not-rely-on-time\\n\\n    /// @notice Should return filled values\\n    /// @param leftOrder Left order\\n    /// @param rightOrder Right order\\n    /// @param leftOrderFill Current fill of the left order (0 if order is unfilled)\\n    /// @param rightOrderFill Current fill of the right order (0 if order is unfilled)\\n    /// @dev We have 3 cases, 1st: left order should be fully filled\\n    /// @dev 2nd: right order should be fully filled or 3d: both should be fully filled if required values are the same\\n    /// @return The fill result of both orders\\n    function fillOrder(\\n        LibOrder.Order calldata leftOrder,\\n        LibOrder.Order calldata rightOrder,\\n        uint256 leftOrderFill,\\n        uint256 rightOrderFill\\n    ) internal pure returns (FillResult memory) {\\n        (uint256 leftMakeValue, uint256 leftTakeValue) = calculateRemaining(leftOrder, leftOrderFill);\\n        (uint256 rightMakeValue, uint256 rightTakeValue) = calculateRemaining(rightOrder, rightOrderFill);\\n\\n        if (rightTakeValue > leftMakeValue) {\\n            return _fillLeft(leftMakeValue, leftTakeValue, rightOrder.makeAsset.value, rightOrder.takeAsset.value);\\n        }\\n        return _fillRight(leftOrder.makeAsset.value, leftOrder.takeAsset.value, rightMakeValue, rightTakeValue);\\n    }\\n\\n    /// @notice Computes the remaining fillable amount of an order.\\n    /// @param order The order to compute from.\\n    /// @param fill The amount of the order already filled.\\n    /// @return makeValue The remaining fillable amount from the maker's side.\\n    /// @return takeValue The remaining fillable amount from the taker's side.\\n    function calculateRemaining(LibOrder.Order calldata order, uint256 fill)\\n        internal\\n        pure\\n        returns (uint256 makeValue, uint256 takeValue)\\n    {\\n        require(order.takeAsset.value >= fill, \\\"filling more than order permits\\\");\\n        takeValue = order.takeAsset.value - fill;\\n        makeValue = LibMath.safeGetPartialAmountFloor(order.makeAsset.value, order.takeAsset.value, takeValue);\\n    }\\n\\n    /// @notice Computes the fill values for a situation where the right order is expected to fill the left order.\\n    /// @param leftMakeValue The amount the left order maker wants to trade.\\n    /// @param leftTakeValue The amount the left order taker wants in return.\\n    /// @param rightMakeValue The amount the right order maker wants to trade.\\n    /// @param rightTakeValue The amount the right order taker wants in return.\\n    /// @return The filled amounts for both the left and right orders.\\n    function _fillRight(\\n        uint256 leftMakeValue,\\n        uint256 leftTakeValue,\\n        uint256 rightMakeValue,\\n        uint256 rightTakeValue\\n    ) internal pure returns (FillResult memory) {\\n        uint256 makerValue = LibMath.safeGetPartialAmountFloor(rightTakeValue, leftMakeValue, leftTakeValue);\\n        require(makerValue <= rightMakeValue, \\\"fillRight: unable to fill\\\");\\n        return FillResult(rightTakeValue, makerValue);\\n    }\\n\\n    /// @notice Computes the fill values for a situation where the left order is expected to fill the right order.\\n    /// @param leftMakeValue The amount the left order maker wants to trade.\\n    /// @param leftTakeValue The amount the left order taker wants in return.\\n    /// @param rightMakeValue The amount the right order maker wants to trade.\\n    /// @param rightTakeValue The amount the right order taker wants in return.\\n    /// @return The filled amounts for both the left and right orders.\\n    function _fillLeft(\\n        uint256 leftMakeValue,\\n        uint256 leftTakeValue,\\n        uint256 rightMakeValue,\\n        uint256 rightTakeValue\\n    ) internal pure returns (FillResult memory) {\\n        uint256 rightTake = LibMath.safeGetPartialAmountFloor(leftTakeValue, rightMakeValue, rightTakeValue);\\n        require(rightTake <= leftMakeValue, \\\"fillLeft: unable to fill\\\");\\n        return FillResult(leftMakeValue, leftTakeValue);\\n    }\\n}\\n\",\"keccak256\":\"0x3e84cddc5820de6983496f4959a43f932792749fb7f98a43ce336023d76fe540\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/asset/contracts/libraries/TokenIdUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IAsset} from \\\"../interfaces/IAsset.sol\\\";\\n\\n/// @title TokenIdUtils library\\n/// @author The Sandbox\\n/// @notice Contains utility functions for token ids\\nlibrary TokenIdUtils {\\n    // Layer masks\\n    uint256 public constant TIER_MASK = 0xFF;\\n    uint256 public constant NONCE_MASK = 0xFFFF;\\n    uint256 public constant REVEAL_NONCE_MASK = 0xFFFF;\\n    uint256 public constant BRIDGED_MASK = 0x1;\\n\\n    // Bit shifts\\n    uint256 public constant CREATOR_SHIFT = 0;\\n    uint256 public constant TIER_SHIFT = 160;\\n    uint256 public constant NONCE_SHIFT = 168;\\n    uint256 public constant REVEAL_NONCE_SHIFT = 184;\\n    uint256 public constant BRIDGED_SHIFT = 200;\\n\\n    /// @notice Generates a token id for a given asset\\n    /// @dev The token id is generated by concatenating the following fields:\\n    /// @dev creator address, tier, creator nonce, reveal nonce and bridged boolean\\n    /// @dev The first 160 bits are the creator address\\n    /// @dev The next 8 bits are the tier\\n    /// @dev The next 16 bits are the creator nonce\\n    /// @dev The next 16 bits are for reveal nonce.\\n    /// @dev The last bit is for bridged boolean\\n    /// @param creator The address of the creator of the asset\\n    /// @param tier The tier of the asset determined by the catalyst used to create it\\n    /// @param creatorNonce The nonce of the asset creator\\n    /// @param revealNonce The reveal nonce of the asset\\n    /// @param bridged Whether the asset is bridged or not\\n    /// @return tokenId The generated token id\\n    function generateTokenId(\\n        address creator,\\n        uint8 tier,\\n        uint16 creatorNonce,\\n        uint16 revealNonce,\\n        bool bridged\\n    ) internal pure returns (uint256 tokenId) {\\n        uint160 creatorAddress = uint160(creator);\\n\\n        tokenId = tokenId =\\n            uint256(creatorAddress) |\\n            (uint256(tier) << TIER_SHIFT) |\\n            (uint256(creatorNonce) << NONCE_SHIFT) |\\n            (uint256(revealNonce) << REVEAL_NONCE_SHIFT) |\\n            (uint256(bridged ? 1 : 0) << BRIDGED_SHIFT);\\n\\n        return tokenId;\\n    }\\n\\n    /// @notice Extracts the creator address from a given token id\\n    /// @param tokenId The token id to extract the creator address from\\n    /// @return creator The asset creator address\\n    function getCreatorAddress(uint256 tokenId) internal pure returns (address creator) {\\n        creator = address(uint160(tokenId));\\n        return creator;\\n    }\\n\\n    /// @notice Extracts the tier from a given token id\\n    /// @param tokenId The token id to extract the tier from\\n    /// @return tier The asset tier, determined by the catalyst used to create it\\n    function getTier(uint256 tokenId) internal pure returns (uint8 tier) {\\n        tier = uint8((tokenId >> TIER_SHIFT) & TIER_MASK);\\n        return tier;\\n    }\\n\\n    /// @notice Extracts the revealed flag from a given token id\\n    /// @param tokenId The token id to extract the revealed flag from\\n    /// @return isRevealed Whether the asset is revealed or not\\n    function isRevealed(uint256 tokenId) internal pure returns (bool) {\\n        uint16 revealNonce = getRevealNonce(tokenId);\\n        return revealNonce != 0;\\n    }\\n\\n    /// @notice Extracts the asset nonce from a given token id\\n    /// @param tokenId The token id to extract the asset nonce from\\n    /// @return creatorNonce The asset creator nonce\\n    function getCreatorNonce(uint256 tokenId) internal pure returns (uint16) {\\n        uint16 creatorNonce = uint16((tokenId >> NONCE_SHIFT) & NONCE_MASK);\\n        return creatorNonce;\\n    }\\n\\n    /// @notice Extracts the abilities and enhancements hash from a given token id\\n    /// @param tokenId The token id to extract reveal nonce from\\n    /// @return revealNonce The reveal nonce of the asset\\n    function getRevealNonce(uint256 tokenId) internal pure returns (uint16) {\\n        uint16 revealNonce = uint16((tokenId >> REVEAL_NONCE_SHIFT) & REVEAL_NONCE_MASK);\\n        return revealNonce;\\n    }\\n\\n    /// @notice Extracts the bridged flag from a given token id\\n    /// @param tokenId The token id to extract the bridged flag from\\n    /// @return bridged Whether the asset is bridged or not\\n    function isBridged(uint256 tokenId) internal pure returns (bool) {\\n        bool bridged = ((tokenId >> BRIDGED_SHIFT) & BRIDGED_MASK) == 1;\\n        return bridged;\\n    }\\n\\n    /// @notice Extracts the asset data from a given token id\\n    /// @dev Created to limit the number of functions that need to be called when revealing an asset\\n    /// @param tokenId The token id to extract the asset data from\\n    /// @return data The asset data struct\\n    function getData(uint256 tokenId) internal pure returns (IAsset.AssetData memory data) {\\n        data.creator = getCreatorAddress(tokenId);\\n        data.tier = getTier(tokenId);\\n        data.revealed = isRevealed(tokenId);\\n        data.creatorNonce = getCreatorNonce(tokenId);\\n        data.bridged = isBridged(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x68a7d6f1ff700f2c1cc9b20e89ccd9aa7fced45a54cc1e3c361136c57d0e4511\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/dependency-metatx/contracts/ERC2771HandlerAbstract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @dev minimal ERC2771 handler to keep bytecode-size down\\n/// based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/metatx/ERC2771Context.sol\\nabstract contract ERC2771HandlerAbstract {\\n    /// @notice return true if the forwarder is the trusted forwarder\\n    /// @param forwarder trusted forwarder address to check\\n    /// @return true if the address is the same as the trusted forwarder\\n    function isTrustedForwarder(address forwarder) external view returns (bool) {\\n        return _isTrustedForwarder(forwarder);\\n    }\\n\\n    /// @notice if the call is from the trusted forwarder the sender is extracted from calldata, msg.sender otherwise\\n    /// @return sender the calculated address of the sender\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (_isTrustedForwarder(msg.sender) && msg.data.length >= 20) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            sender = msg.sender;\\n        }\\n    }\\n\\n    /// @notice if the call is from the trusted forwarder the sender is removed from calldata\\n    /// @return the calldata without the sender\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (_isTrustedForwarder(msg.sender) && msg.data.length >= 20) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n\\n    /// @notice return true if the forwarder is the trusted forwarder\\n    /// @param forwarder trusted forwarder address to check\\n    /// @return true if the address is the same as the trusted forwarder\\n    /// @dev this function must be IMPLEMENTED\\n    function _isTrustedForwarder(address forwarder) internal view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0xc4f349865ea7146f51b69f1edacdef60e0a2a7cf4dab538a5ae53ee9a0036231\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/dependency-metatx/contracts/ERC2771HandlerUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {ERC2771HandlerAbstract} from \\\"./ERC2771HandlerAbstract.sol\\\";\\n\\n/// @dev minimal ERC2771 handler to keep bytecode-size down\\n/// based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/metatx/ERC2771Context.sol\\ncontract ERC2771HandlerUpgradeable is Initializable, ERC2771HandlerAbstract {\\n    address private _trustedForwarder;\\n\\n    /// @notice Emitted when a `newTrustedForwarder` is set, replacing the `oldTrustedForwarder`\\n    /// @param oldTrustedForwarder old trusted forwarder\\n    /// @param newTrustedForwarder new trusted forwarder\\n    /// @param operator the sender of the transaction\\n    event TrustedForwarderSet(\\n        address indexed oldTrustedForwarder,\\n        address indexed newTrustedForwarder,\\n        address indexed operator\\n    );\\n\\n    /// @notice initialize the trusted forwarder address\\n    /// @param forwarder trusted forwarder address or zero to disable it\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __ERC2771Handler_init(address forwarder) internal onlyInitializing {\\n        __ERC2771Handler_init_unchained(forwarder);\\n    }\\n\\n    /// @notice initialize the trusted forwarder address\\n    /// @param forwarder trusted forwarder address or zero to disable it\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __ERC2771Handler_init_unchained(address forwarder) internal onlyInitializing {\\n        _setTrustedForwarder(forwarder);\\n    }\\n\\n    /// @notice return the address of the trusted forwarder\\n    /// @return return the address of the trusted forwarder\\n    function getTrustedForwarder() external view returns (address) {\\n        return _trustedForwarder;\\n    }\\n\\n    /// @notice set the address of the trusted forwarder\\n    /// @param newForwarder the address of the new forwarder.\\n    function _setTrustedForwarder(address newForwarder) internal virtual {\\n        require(newForwarder != _trustedForwarder, \\\"ERC2771HandlerUpgradeable: forwarder already set\\\");\\n        emit TrustedForwarderSet(_trustedForwarder, newForwarder, _msgSender());\\n        _trustedForwarder = newForwarder;\\n    }\\n\\n    /// @notice return true if the forwarder is the trusted forwarder\\n    /// @param forwarder trusted forwarder address to check\\n    /// @return true if the address is the same as the trusted forwarder\\n    function _isTrustedForwarder(address forwarder) internal view virtual override returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    /// @notice if the call is from the trusted forwarder the sender is extracted from calldata, msg.sender otherwise\\n    /// @return sender the calculated address of the sender\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        return super._msgSender();\\n    }\\n\\n    /// @notice if the call is from the trusted forwarder the sender is removed from calldata\\n    /// @return the calldata without the sender\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        return super._msgData();\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x63b605598cecd8d66880b7978e17036367dfa8b0f236c2d5eaf0bff6328d26b8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e3565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811614620000e1576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b615dc780620000f36000396000f3fe608060405234801561001057600080fd5b506004361061030a5760003560e01c806374e3447a1161019c578063ce1b815f116100ee578063de743a7211610097578063f04f5b6611610071578063f04f5b6614610704578063f76fc35e14610717578063fcd5c2511461073e57600080fd5b8063de743a72146106a3578063e5c42a3b146106ca578063e63ab1e9146106dd57600080fd5b8063d547741f116100c8578063d547741f14610658578063da7422281461066b578063dbd8483d1461067e57600080fd5b8063ce1b815f14610607578063d006224e1461061e578063d4cbfc6b1461064557600080fd5b80639bcbb80b11610150578063a76a95871161012a578063a76a9587146105e3578063b991c0ef146105eb578063c91f0c53146105f457600080fd5b80639bcbb80b146105b55780639e7495aa146105c8578063a217fddf146105db57600080fd5b80638456cb59116101815780638456cb591461055957806384b0196e1461056157806391d148541461057c57600080fd5b806374e3447a1461050b57806377424c051461053257600080fd5b80633ef591c7116102605780635bd8c4db11610209578063614cb55e116101e3578063614cb55e146104dc578063676b00c5146104f05780636a7d17ed146104f857600080fd5b80635bd8c4db146104b05780635c975abb146104d1578063603168841461045157600080fd5b806343f468901161023a57806343f46890146104755780634d16304f14610489578063572b6c051461049d57600080fd5b80633ef591c7146104515780633f0a0797146104595780633f4ba83a1461046d57600080fd5b80631afdf942116102c25780632f2ff15d1161029c5780632f2ff15d146103f357806334dcdd521461040657806336568abe1461043e57600080fd5b80631afdf94214610391578063248a9ca3146103bd5780632d94a9d3146103e057600080fd5b80630772bd16116102f35780630772bd161461034c578063081a2930146103645780631a3101b11461037e57600080fd5b806301ffc9a71461030f57806304c8584514610337575b600080fd5b61032261031d3660046149a9565b610751565b60405190151581526020015b60405180910390f35b61034a610345366004614a07565b6107ea565b005b6103566101335481565b60405190815260200161032e565b61036c600181565b60405160ff909116815260200161032e565b61034a61038c366004614b41565b6108aa565b610134546103a5906001600160a01b031681565b6040516001600160a01b03909116815260200161032e565b6103566103cb366004614beb565b600090815260ca602052604090206001015490565b61034a6103ee366004614c04565b610c35565b61034a610401366004614c89565b610eff565b61042b610414366004614a07565b6101316020526000908152604090205461ffff1681565b60405161ffff909116815260200161032e565b61034a61044c366004614c89565b610f29565b610322600081565b610136546103a5906001600160a01b031681565b61034a610fc5565b610130546103a5906001600160a01b031681565b61012e546103a5906001600160a01b031681565b6103226104ab366004614a07565b610ffa565b6103566104be366004614beb565b6101356020526000908152604090205481565b60fc5460ff16610322565b61012f546103a5906001600160a01b031681565b61036c600081565b61034a610506366004614d13565b611017565b6103567fb696df569c2dfecb5a24edfd39d7f55b0f442be14350cbc68dbe8eb35489d3a681565b6103567f7a33244e2e34cc040cc0a272df105a213c9596c87fe75b9d662550a4d8566d9881565b61034a611718565b61056961174a565b60405161032e9796959493929190614e3e565b61032261058a366004614c89565b600091825260ca602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61034a6105c3366004614d13565b61180c565b61034a6105d6366004614ec8565b612610565b610356600081565b610322600181565b61035661271081565b61034a610602366004614fc1565b612c58565b6000546201000090046001600160a01b03166103a5565b6103567ffcad23869509ddef67affca3b6a58edb6672563be7df22616adfc882d6a7eebb81565b61034a610653366004614a07565b612df2565b61034a610666366004614c89565b612eac565b61034a610679366004614a07565b612ed1565b61042b61068c366004614a07565b6101326020526000908152604090205461ffff1681565b6103567f52955c021a90f71f7afee289089576ce6998f456ca81e444651c71363bf2609581565b61034a6106d8366004614a07565b612f3c565b6103567f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b61034a610712366004614beb565b612ff7565b6103567f3b0c69bab62d38b5774be9b5185349bf525ef97a4d288b652e29bb4ec2a4902d81565b61034a61074c36600461506a565b613089565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b0000000000000000000000000000000000000000000000000000000014806107e457507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b60006107f5816134e2565b6001600160a01b0382163b6108515760405162461bcd60e51b815260206004820152601d60248201527f41737365744372656174653a20496e76616c696420636f6e747261637400000060448201526064015b60405180910390fd5b610130805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091556040517f6b3a0eed469fcf80be1ad86649b4884bd547e01230119d91fd32d2bf5ee57bcf90600090a25050565b6108b26134f3565b806001600160a01b03166108c4613548565b6001600160a01b03161461091a5760405162461bcd60e51b815260206004820152601b60248201527f41737365744372656174653a20496e76616c69642063616c6c657200000000006044820152606401610848565b610130546001600160a01b0316636b406341886109c284610132600061093e613548565b6001600160a01b0316815260208101919091526040016000908120805461ffff169161096983615124565b91906101000a81548161ffff021916908361ffff1602179055508b8b8b8b8b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061355792505050565b6040518363ffffffff1660e01b81526004016109df929190615145565b602060405180830381865afa1580156109fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a209190615167565b610a6c5760405162461bcd60e51b815260206004820152601e60248201527f41737365744372656174653a20496e76616c6964207369676e617475726500006044820152606401610848565b6001600160a01b0381166000908152610131602052604081208054610ad19184918a91908590610a9f9061ffff16615124565b91906101000a81548161ffff021916908361ffff160217905588610ac4576000610ac7565b60015b60ff166000613618565b61012f546040517f124d91e50000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015260ff8b166024830152604482018a905292935091169063124d91e590606401600060405180830381600087803b158015610b4457600080fd5b505af1158015610b58573d6000803e3d6000fd5b505061012e546040517fbb7fde710000000000000000000000000000000000000000000000000000000081526001600160a01b03909116925063bb7fde719150610bae90859085908b908a908a906004016151af565b600060405180830381600087803b158015610bc857600080fd5b505af1158015610bdc573d6000803e3d6000fd5b50505050816001600160a01b03167f293c16277edbc93bfb30f56ac279e45bbdbd421755b0278d19ebcd1cee6a795b82898988888b604051610c23969594939291906151de565b60405180910390a25050505050505050565b7fb696df569c2dfecb5a24edfd39d7f55b0f442be14350cbc68dbe8eb35489d3a6610c5f816134e2565b610c676134f3565b610130546001600160a01b0316636b40634187610d22856101326000610c8b613548565b6001600160a01b0316815260208101919091526040016000908120805461ffff1691610cb683615124565b91906101000a81548161ffff021916908361ffff16021790555060006006811115610ce357610ce361521c565b8b60018c8c8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061355792505050565b6040518363ffffffff1660e01b8152600401610d3f929190615145565b602060405180830381865afa158015610d5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d809190615167565b610dcc5760405162461bcd60e51b815260206004820152601e60248201527f41737365744372656174653a20496e76616c6964207369676e617475726500006044820152606401610848565b6000610e2383826001600160a01b0386166000908152610131602052604081208054909190610dfe9061ffff16615124565b91906101000a81548161ffff021916908361ffff1602179055600160ff166000613618565b61012e546040517fbb7fde710000000000000000000000000000000000000000000000000000000081529192506001600160a01b03169063bb7fde7190610e7690869085908b908b908b906004016151af565b600060405180830381600087803b158015610e9057600080fd5b505af1158015610ea4573d6000803e3d6000fd5b5050506001600160a01b03841690507f07560e268a00bce229c6a07c00d3f177f67674deae28b79a1840dd20712366288260008989896001604051610eee969594939291906151de565b60405180910390a250505050505050565b600082815260ca6020526040902060010154610f1a816134e2565b610f248383613665565b505050565b610f31613548565b6001600160a01b0316816001600160a01b031614610fb75760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610848565b610fc18282613708565b5050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610fef816134e2565b610ff76137a9565b50565b600080546001600160a01b038381166201000090920416146107e4565b61101f6134f3565b610130546001600160a01b031663c28b92d6856111376110426020880188614a07565b611053610100890160e08a01614a07565b610132600061106560208c018c614a07565b6001600160a01b0316815260208101919091526040016000908120805461ffff169161109083615124565b91906101000a81548161ffff021916908361ffff1602179055508960200160208101906110bd9190615232565b60408b013560608c01356110d760a08e0160808f01614a07565b6110e460a08f018f61524d565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508e60c001358f6101000135613801565b8661010001356040518463ffffffff1660e01b815260040161115b93929190615294565b602060405180830381865afa158015611178573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119c9190615167565b6111e85760405162461bcd60e51b815260206004820152601e60248201527f41737365744372656174653a20496e76616c6964207369676e617475726500006044820152606401610848565b6111f56020840184614a07565b6001600160a01b0316856001600160a01b0316146112555760405162461bcd60e51b815260206004820152601b60248201527f41737365744372656174653a20496e76616c69642063616c6c657200000000006044820152606401610848565b61012e546000906001600160a01b031663fdda1d0e61127760a087018761524d565b6040518363ffffffff1660e01b81526004016112949291906152b9565b602060405180830381865afa1580156112b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d591906152cd565b905080600003611410576113946112f3610100860160e08701614a07565b6113036040870160208801615232565b61013160006113196101008a0160e08b01614a07565b6001600160a01b031681526020810191909152604001600090812080549091906113469061ffff16615124565b91906101000a81548161ffff021916908361ffff1602179055600160068111156113725761137261521c565b60ff1661138560408a0160208b01615232565b60ff1614610ac4576000610ac7565b90508360c00135846040013511156113ee5760405162461bcd60e51b815260206004820181905260248201527f41737365744372656174653a204d617820737570706c792065786365656465646044820152606401610848565b60008181526101356020526040908190209085013560c0860135039055611491565b6000818152610135602052604090819020549085013511156114745760405162461bcd60e51b815260206004820152601f60248201527f41737365744372656174653a204d617820737570706c792072656163686564006044820152606401610848565b600081815261013560205260409081902080549186013590910390555b811561150957610136546001600160a01b031663fb01d36b6114b66020870187614a07565b85856040518463ffffffff1660e01b81526004016114d693929190615495565b600060405180830381600087803b1580156114f057600080fd5b505af1158015611504573d6000803e3d6000fd5b505050505b61012f546001600160a01b031663124d91e56115286020870187614a07565b6115386040880160208901615232565b604080517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b03909316600484015260ff90911660248301528701356044820152606401600060405180830381600087803b1580156115a457600080fd5b505af11580156115b8573d6000803e3d6000fd5b506115fe92506115ce9150506020860186614a07565b606086013560408701356115e860a0890160808a01614a07565b6115f96101008a0160e08b01614a07565b6138cf565b61012e546001600160a01b031663bb7fde7161161d6020870187614a07565b83604088013561163060a08a018a61524d565b6040518663ffffffff1660e01b81526004016116509594939291906151af565b600060405180830381600087803b15801561166a57600080fd5b505af115801561167e573d6000803e3d6000fd5b5061169492505050610100850160e08601614a07565b6001600160a01b03166116aa6020860186614a07565b6001600160a01b03167f4637427e03cdc4c6ae5b8544143ffd8b034bc6b2792b7d3997fa591147126845836116e56040890160208a01615232565b60408901356116f760a08b018b61524d565b6040516117089594939291906155d1565b60405180910390a3505050505050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a611742816134e2565b610ff761394d565b6000606080600080600060606032546000801b14801561176a5750603354155b6117b65760405162461bcd60e51b815260206004820152601560248201527f4549503731323a20556e696e697469616c697a656400000000000000000000006044820152606401610848565b6117be61398b565b6117c6613a1d565b604080516000808252602082019092527f0f000000000000000000000000000000000000000000000000000000000000009b939a50919850469750309650945092509050565b6118146134f3565b610130546001600160a01b031663c28b92d685611a4d6118376020880188614a07565b61184460e08901896155fa565b80806020026020016040519081016040528093929190818152602001838360200280828437600092018290525061013293509150611887905060208c018c614a07565b6001600160a01b0316815260208101919091526040016000908120805461ffff16916118b283615124565b91906101000a81548161ffff021916908361ffff1602179055508980602001906118dc91906155fa565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061191b9250505060408c018c6155fa565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061195a9250505060608d018d6155fa565b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506119999250505060808e018e6155fa565b80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508d8060a001906119e991906155fa565b6119f291615644565b8e8060c00190611a0291906155fa565b80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508f6101000135613a2c565b8661010001356040518463ffffffff1660e01b8152600401611a7193929190615294565b602060405180830381865afa158015611a8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab29190615167565b611afe5760405162461bcd60e51b815260206004820152601e60248201527f41737365744372656174653a20496e76616c6964207369676e617475726500006044820152606401610848565b611b0b6020840184614a07565b6001600160a01b0316856001600160a01b031614611b6b5760405162461bcd60e51b815260206004820152601b60248201527f41737365744372656174653a20496e76616c69642063616c6c657200000000006044820152606401610848565b6000611b7a60208501856155fa565b9150819050611b8c60e08601866155fa565b905014611bdb5760405162461bcd60e51b815260206004820152601c60248201527f41737365744372656174653a20312d4172726179206c656e67746873000000006044820152606401610848565b80611be960408601866155fa565b905014611c385760405162461bcd60e51b815260206004820152601c60248201527f41737365744372656174653a20322d4172726179206c656e67746873000000006044820152606401610848565b80611c4660608601866155fa565b905014611c955760405162461bcd60e51b815260206004820152601c60248201527f41737365744372656174653a20332d4172726179206c656e67746873000000006044820152606401610848565b80611ca360808601866155fa565b905014611cf25760405162461bcd60e51b815260206004820152601c60248201527f41737365744372656174653a20342d4172726179206c656e67746873000000006044820152606401610848565b80611d0060a08601866155fa565b905014611d4f5760405162461bcd60e51b815260206004820152601c60248201527f41737365744372656174653a20352d4172726179206c656e67746873000000006044820152606401610848565b80611d5d60c08601866155fa565b905014611dac5760405162461bcd60e51b815260206004820152601c60248201527f41737365744372656174653a20362d4172726179206c656e67746873000000006044820152606401610848565b60008167ffffffffffffffff811115611dc757611dc7614a22565b604051908082528060200260200182016040528015611df0578160200160208202803683370190505b50905060008267ffffffffffffffff811115611e0e57611e0e614a22565b604051908082528060200260200182016040528015611e37578160200160208202803683370190505b50905060005b8381101561247d5760006001611e5660208a018a6155fa565b84818110611e6657611e666156c8565b9050602002016020810190611e7b9190615232565b60ff1614611e8a576000611e8d565b60015b60ff169050611e9f60208901896155fa565b83818110611eaf57611eaf6156c8565b9050602002016020810190611ec49190615232565b60ff16838381518110611ed957611ed96156c8565b602090810291909101015261012e546001600160a01b031663fdda1d0e611f0360a08b018b6155fa565b85818110611f1357611f136156c8565b9050602002810190611f25919061524d565b6040518363ffffffff1660e01b8152600401611f429291906152b9565b602060405180830381865afa158015611f5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f8391906152cd565b848381518110611f9557611f956156c8565b602002602001018181525050838281518110611fb357611fb36156c8565b60200260200101516000036121e6576120ae611fd260e08a018a6155fa565b84818110611fe257611fe26156c8565b9050602002016020810190611ff79190614a07565b61200460208b018b6155fa565b85818110612014576120146156c8565b90506020020160208101906120299190615232565b610131600061203b60e08e018e6155fa565b8881811061204b5761204b6156c8565b90506020020160208101906120609190614a07565b6001600160a01b0316815260208101919091526040016000908120805490919061208d9061ffff16615124565b91906101000a81548161ffff021916908361ffff1602179055846000613618565b8483815181106120c0576120c06156c8565b60209081029190910101526120d860c08901896155fa565b838181106120e8576120e86156c8565b905060200201358880604001906120ff91906155fa565b8481811061210f5761210f6156c8565b9050602002013511156121645760405162461bcd60e51b815260206004820181905260248201527f41737365744372656174653a204d617820737570706c792065786365656465646044820152606401610848565b61217160408901896155fa565b83818110612181576121816156c8565b90506020020135888060c0019061219891906155fa565b848181106121a8576121a86156c8565b905060200201350361013560008685815181106121c7576121c76156c8565b60200260200101518152602001908152602001600020819055506122e5565b6121f360408901896155fa565b83818110612203576122036156c8565b905060200201356101356000868581518110612221576122216156c8565b602002602001015181526020019081526020016000205410156122865760405162461bcd60e51b815260206004820152601f60248201527f41737365744372656174653a204d617820737570706c792072656163686564006044820152606401610848565b61229360408901896155fa565b838181106122a3576122a36156c8565b9050602002013561013560008685815181106122c1576122c16156c8565b60200260200101518152602001908152602001600020600082825403925050819055505b818611801561231957506000878784818110612303576123036156c8565b905060200281019061231591906155fa565b9050115b156123b257610136546001600160a01b031663fb01d36b61233d60208b018b614a07565b89898681811061234f5761234f6156c8565b905060200281019061236191906155fa565b6040518463ffffffff1660e01b815260040161237f93929190615495565b600060405180830381600087803b15801561239957600080fd5b505af11580156123ad573d6000803e3d6000fd5b505050505b6124746123c260208a018a614a07565b6123cf60608b018b6155fa565b858181106123df576123df6156c8565b905060200201358a80604001906123f691906155fa565b86818110612406576124066156c8565b905060200201358b806080019061241d91906155fa565b8781811061242d5761242d6156c8565b90506020020160208101906124429190614a07565b61244f60e08e018e6155fa565b8881811061245f5761245f6156c8565b90506020020160208101906115f99190614a07565b50600101611e3d565b5061012f546001600160a01b03166320820ec361249d6020890189614a07565b836124ab60408b018b6155fa565b6040518563ffffffff1660e01b81526004016124ca9493929190615729565b600060405180830381600087803b1580156124e457600080fd5b505af11580156124f8573d6000803e3d6000fd5b505061012e546001600160a01b0316915063a55784ef905061251d6020890189614a07565b8461252b60408b018b6155fa565b61253860a08d018d6155fa565b6040518763ffffffff1660e01b8152600401612559969594939291906157bb565b600060405180830381600087803b15801561257357600080fd5b505af1158015612587573d6000803e3d6000fd5b50612599925050506020870187614a07565b6001600160a01b03167fb6cda9847b34a55acaabcaabf7c3e0a63afb4e464e1fef1d0ce2e92d16953cb86125d060e08901896155fa565b856125de60208c018c6155fa565b6125eb60408e018e6155fa565b8e8060a001906125fb91906155fa565b604051610c2399989796959493929190615848565b6126186134f3565b806001600160a01b031661262a613548565b6001600160a01b0316146126805760405162461bcd60e51b815260206004820152601b60248201527f41737365744372656174653a20496e76616c69642063616c6c657200000000006044820152606401610848565b610130546001600160a01b0316636b4063418b6127b28461013260006126a4613548565b6001600160a01b0316815260208101919091526040016000908120805461ffff16916126cf83615124565b91906101000a81548161ffff021916908361ffff1602179055508e8e80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508d8d80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508c8c808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506127ad92508d91508e9050615644565b613bad565b6040518363ffffffff1660e01b81526004016127cf929190615145565b602060405180830381865afa1580156127ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128109190615167565b61285c5760405162461bcd60e51b815260206004820152601e60248201527f41737365744372656174653a20496e76616c6964207369676e617475726500006044820152606401610848565b8588146128ab5760405162461bcd60e51b815260206004820152601c60248201527f41737365744372656174653a20312d4172726179206c656e67746873000000006044820152606401610848565b8388146128fa5760405162461bcd60e51b815260206004820152601c60248201527f41737365744372656174653a20322d4172726179206c656e67746873000000006044820152606401610848565b8188146129495760405162461bcd60e51b815260206004820152601c60248201527f41737365744372656174653a20332d4172726179206c656e67746873000000006044820152606401610848565b60008867ffffffffffffffff81111561296457612964614a22565b60405190808252806020026020018201604052801561298d578160200160208202803683370190505b50905060008967ffffffffffffffff8111156129ab576129ab614a22565b6040519080825280602002602001820160405280156129d4578160200160208202803683370190505b50905060005b8a811015612af0578b8b828181106129f4576129f46156c8565b9050602002016020810190612a099190615232565b60ff16828281518110612a1e57612a1e6156c8565b602002602001018181525050612acb848d8d84818110612a4057612a406156c8565b9050602002016020810190612a559190615232565b6001600160a01b0387166000908152610131602052604081208054909190612a809061ffff16615124565b91906101000a81548161ffff021916908361ffff16021790558b8b86818110612aab57612aab6156c8565b9050602002016020810190612ac091906158ec565b610ac4576000610ac7565b838281518110612add57612add6156c8565b60209081029190910101526001016129da565b5061012f546040517f20820ec30000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906320820ec390612b4190869085908e908e90600401615729565b600060405180830381600087803b158015612b5b57600080fd5b505af1158015612b6f573d6000803e3d6000fd5b505061012e546040517fa55784ef0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116925063a55784ef9150612bc790869086908e908e908c908c906004016157bb565b600060405180830381600087803b158015612be157600080fd5b505af1158015612bf5573d6000803e3d6000fd5b50505050826001600160a01b03167fdd4b554190cbd4759e711abb655bdaf12557fea0ac84cec4fd4d978db3148bab838d8d8d8d8b8b8f8f604051612c4299989796959493929190615909565b60405180910390a2505050505050505050505050565b600054610100900460ff1615808015612c785750600054600160ff909116105b80612c925750303b158015612c92575060005460ff166001145b612d045760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610848565b6000805460ff191660011790558015612d27576000805461ff0019166101001790555b61012e80546001600160a01b0380891673ffffffffffffffffffffffffffffffffffffffff199283161790925561012f8054888416908316179055610130805492871692909116919091179055612d7d83613c9c565b612d878888613d10565b612d8f613d85565b612d97613df0565b612da2600083613665565b8015612de8576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b6000612dfd816134e2565b6001600160a01b038216612e535760405162461bcd60e51b815260206004820152601d60248201527f41737365744372656174653a20496e76616c69642072656365697665720000006044820152606401610848565b610134805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091556040517f89bbd7786d7f66068c5751778547165602190050b40838fcae9be44856bb239290600090a25050565b600082815260ca6020526040902060010154612ec7816134e2565b610f248383613708565b6000612edc816134e2565b6001600160a01b0382163b612f335760405162461bcd60e51b815260206004820152601f60248201527f41737365744372656174653a2042616420666f727761726465722061646472006044820152606401610848565b610fc182613e63565b6000612f47816134e2565b6001600160a01b0382163b612f9e5760405162461bcd60e51b815260206004820152601d60248201527f41737365744372656174653a20496e76616c696420636f6e74726163740000006044820152606401610848565b610136805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091556040517f41a6004fda1323c349fe85c5e8b416e5c0f14819f500254df5de73c57d58204390600090a25050565b6000613002816134e2565b6127108211156130545760405162461bcd60e51b815260206004820152601860248201527f41737365744372656174653a20496e76616c69642066656500000000000000006044820152606401610848565b61013382905560405182907f56e98052a09c6d94b752a506c701831eaf1f2fcea1dc11f7e9c70d6049e2c15a90600090a25050565b7fb696df569c2dfecb5a24edfd39d7f55b0f442be14350cbc68dbe8eb35489d3a66130b3816134e2565b6130bb6134f3565b84831461310a5760405162461bcd60e51b815260206004820152601a60248201527f41737365744372656174653a204172726179206c656e677468730000000000006044820152606401610848565b60008567ffffffffffffffff81111561312557613125614a22565b60405190808252806020026020018201604052801561314e578160200160208202803683370190505b50905060008667ffffffffffffffff81111561316c5761316c614a22565b604051908082528060200260200182016040528015613195578160200160208202803683370190505b50905060005b878110156131f55760018382815181106131b7576131b76156c8565b9115156020928302919091019091015260008282815181106131db576131db6156c8565b60ff9092166020928302919091019091015260010161319b565b50610130546001600160a01b0316636b4063418a6132b087610132600061321a613548565b6001600160a01b0316815260208101919091526040016000908120805461ffff169161324583615124565b91906101000a81548161ffff021916908361ffff160217905550868e8e80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050898e8e906127ad9190615644565b6040518363ffffffff1660e01b81526004016132cd929190615145565b602060405180830381865afa1580156132ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061330e9190615167565b61335a5760405162461bcd60e51b815260206004820152601e60248201527f41737365744372656174653a20496e76616c6964207369676e617475726500006044820152606401610848565b60008767ffffffffffffffff81111561337557613375614a22565b60405190808252806020026020018201604052801561339e578160200160208202803683370190505b50905060005b88811015613402576133dd8660006001600160a01b0389166000908152610131602052604081208054909190610dfe9061ffff16615124565b8282815181106133ef576133ef6156c8565b60209081029190910101526001016133a4565b5061012e546040517fa55784ef0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063a55784ef9061345790889085908e908e908e908e906004016157bb565b600060405180830381600087803b15801561347157600080fd5b505af1158015613485573d6000803e3d6000fd5b50505050846001600160a01b03167fcd3d86cd3e99d95b428ee7766fa8b206e37ef710a215d4190fae8fd99556d49c82848c8c8c8c8a6040516134ce97969594939291906159a6565b60405180910390a250505050505050505050565b610ff7816134ee613548565b613f78565b60fc5460ff16156135465760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610848565b565b6000613552613fed565b905090565b600061360d7f3b0c69bab62d38b5774be9b5185349bf525ef97a4d288b652e29bb4ec2a4902d8888888888886040516020016135939190615a67565b60408051601f198184030181528282528051602091820120908301989098526001600160a01b039096169581019590955261ffff909316606085015260ff909116608084015260a0830152151560c082015260e0810191909152610100015b60405160208183030381529060405280519060200120613ff7565b979650505050505050565b60008560c88361362957600061362c565b60015b60ff16901b60b88561ffff16901b60a88761ffff16901b60a08960ff16901b846001600160a01b03161717171791505095945050505050565b600082815260ca602090815260408083206001600160a01b038516845290915290205460ff16610fc157600082815260ca602090815260408083206001600160a01b03851684529091529020805460ff191660011790556136c4613548565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600082815260ca602090815260408083206001600160a01b038516845290915290205460ff1615610fc157600082815260ca602090815260408083206001600160a01b03851684529091529020805460ff19169055613765613548565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6137b161403f565b60fc805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6137e4613548565b6040516001600160a01b03909116815260200160405180910390a1565b60006138c07f7a33244e2e34cc040cc0a272df105a213c9596c87fe75b9d662550a4d8566d988c8c8c8c8c8c8c8c60405160200161383f9190615a67565b60408051601f1981840301815282825280516020918201209083019a909a526001600160a01b0398891690820152958716606087015261ffff909416608086015260ff90921660a085015260c084015260e08301529190911661010082015261012081019190915261014081018590526101608101849052610180016135f2565b9b9a5050505050505050505050565b610133546000901561391f5761013354612710906138ed8688615a83565b6138f79190615a83565b6139019190615a9a565b6101345490915061391f90849088906001600160a01b031684614091565b60008161392c8688615a83565b6139369190615abc565b905061394484888584614091565b50505050505050565b6139556134f3565b60fc805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586137e4613548565b60606034805461399a90615acf565b80601f01602080910402602001604051908101604052809291908181526020018280546139c690615acf565b8015613a135780601f106139e857610100808354040283529160200191613a13565b820191906000526020600020905b8154815290600101906020018083116139f657829003601f168201915b5050505050905090565b60606035805461399a90615acf565b60006138c07ffcad23869509ddef67affca3b6a58edb6672563be7df22616adfc882d6a7eebb8c8c604051602001613a649190615b03565b604051602081830303815290604052805190602001208c8c604051602001613a8c9190615b42565b604051602081830303815290604052805190602001208c604051602001613ab39190615b6f565b604051602081830303815290604052805190602001208c604051602001613ada9190615b6f565b604051602081830303815290604052805190602001208c604051602001613b019190615b03565b60405160208183030381529060405280519060200120613b208d61411f565b8c604051602001613b319190615b6f565b60408051601f1981840301815282825280516020918201209083019b909b526001600160a01b0390991698810198909852606088019690965261ffff909416608087015260a086019290925260c085015260e08401526101008301526101208201526101408101919091526101608101849052610180016135f2565b600061360d7f52955c021a90f71f7afee289089576ce6998f456ca81e444651c71363bf26095888888604051602001613be69190615b42565b6040516020818303038152906040528051906020012088604051602001613c0d9190615b6f565b6040516020818303038152906040528051906020012088604051602001613c349190615b99565b60405160208183030381529060405280519060200120613c538961411f565b6040805160208101989098526001600160a01b039096169587019590955261ffff9093166060860152608085019190915260a084015260c083015260e0820152610100016135f2565b600054610100900460ff16613d075760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610848565b610ff78161420b565b600054610100900460ff16613d7b5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610848565b610fc1828261427f565b600054610100900460ff166135465760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610848565b600054610100900460ff16613e5b5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610848565b613546614312565b6000546001600160a01b0362010000909104811690821603613eed5760405162461bcd60e51b815260206004820152603060248201527f4552433237373148616e646c65725570677261646561626c653a20666f72776160448201527f7264657220616c726561647920736574000000000000000000000000000000006064820152608401610848565b613ef5613548565b600080546040516001600160a01b0393841693858116936201000090930416917f8ca022029d8ff7ad974913f8970aeed6c5e0e7eaf494a0c5b262249f6b5759e591a4600080546001600160a01b0390921662010000027fffffffffffffffffffff0000000000000000000000000000000000000000ffff909216919091179055565b600082815260ca602090815260408083206001600160a01b038516845290915290205460ff16610fc157613fab81614389565b613fb683602061439b565b604051602001613fc7929190615bc5565b60408051601f198184030181529082905262461bcd60e51b825261084891600401615c46565b60006135526145cb565b60006107e4614004614622565b836040517f19010000000000000000000000000000000000000000000000000000000000008152600281019290925260228201526042902090565b60fc5460ff166135465760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610848565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905261411990859061462c565b50505050565b8051600090818167ffffffffffffffff81111561413e5761413e614a22565b604051908082528060200260200182016040528015614167578160200160208202803683370190505b50905060005b828110156141da57848181518110614187576141876156c8565b602002602001015160405160200161419f9190615a67565b604051602081830303815290604052805190602001208282815181106141c7576141c76156c8565b602090810291909101015260010161416d565b50806040516020016141ec9190615b6f565b6040516020818303038152906040528051906020012092505050919050565b600054610100900460ff166142765760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610848565b610ff781613e63565b600054610100900460ff166142ea5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610848565b60346142f68382615ca7565b5060356143038282615ca7565b50506000603281905560335550565b600054610100900460ff1661437d5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610848565b60fc805460ff19169055565b60606107e46001600160a01b03831660145b606060006143aa836002615a83565b6143b5906002615d67565b67ffffffffffffffff8111156143cd576143cd614a22565b6040519080825280601f01601f1916602001820160405280156143f7576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061442e5761442e6156c8565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110614491576144916156c8565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006144cd846002615a83565b6144d8906001615d67565b90505b6001811115614575577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110614519576145196156c8565b1a60f81b82828151811061452f5761452f6156c8565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361456e81615d7a565b90506144db565b5083156145c45760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610848565b9392505050565b600080546201000090046001600160a01b0316331480156145ed575060143610155b1561461d57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c90565b503390565b6000613552614714565b6000614681826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166147889092919063ffffffff16565b90508051600014806146a25750808060200190518101906146a29190615167565b610f245760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610848565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f61473f61479f565b6147476147f8565b60408051602081019490945283019190915260608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b60606147978484600085614829565b949350505050565b6000806147aa61398b565b8051909150156147c1578051602090910120919050565b60325480156147d05792915050565b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4709250505090565b600080614803613a1d565b80519091501561481a578051602090910120919050565b60335480156147d05792915050565b6060824710156148a15760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610848565b600080866001600160a01b031685876040516148bd9190615a67565b60006040518083038185875af1925050503d80600081146148fa576040519150601f19603f3d011682016040523d82523d6000602084013e6148ff565b606091505b509150915061360d878383876060831561497a578251600003614973576001600160a01b0385163b6149735760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610848565b5081614797565b614797838381511561498f5781518083602001fd5b8060405162461bcd60e51b81526004016108489190615c46565b6000602082840312156149bb57600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146145c457600080fd5b80356001600160a01b0381168114614a0257600080fd5b919050565b600060208284031215614a1957600080fd5b6145c4826149eb565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715614a6157614a61614a22565b604052919050565b600082601f830112614a7a57600080fd5b813567ffffffffffffffff811115614a9457614a94614a22565b614aa76020601f19601f84011601614a38565b818152846020838601011115614abc57600080fd5b816020850160208301376000918101602001919091529392505050565b803560ff81168114614a0257600080fd5b8015158114610ff757600080fd5b60008083601f840112614b0a57600080fd5b50813567ffffffffffffffff811115614b2257600080fd5b602083019150836020828501011115614b3a57600080fd5b9250929050565b600080600080600080600060c0888a031215614b5c57600080fd5b873567ffffffffffffffff80821115614b7457600080fd5b614b808b838c01614a69565b9850614b8e60208b01614ad9565b975060408a0135965060608a01359150614ba782614aea565b90945060808901359080821115614bbd57600080fd5b50614bca8a828b01614af8565b9094509250614bdd905060a089016149eb565b905092959891949750929550565b600060208284031215614bfd57600080fd5b5035919050565b600080600080600060808688031215614c1c57600080fd5b853567ffffffffffffffff80821115614c3457600080fd5b614c4089838a01614a69565b9650602088013595506040880135915080821115614c5d57600080fd5b50614c6a88828901614af8565b9094509250614c7d9050606087016149eb565b90509295509295909350565b60008060408385031215614c9c57600080fd5b82359150614cac602084016149eb565b90509250929050565b60006101208284031215614cc857600080fd5b50919050565b60008083601f840112614ce057600080fd5b50813567ffffffffffffffff811115614cf857600080fd5b6020830191508360208260051b8501011115614b3a57600080fd5b600080600080600060808688031215614d2b57600080fd5b614d34866149eb565b9450602086013567ffffffffffffffff80821115614d5157600080fd5b614d5d89838a01614a69565b95506040880135915080821115614d7357600080fd5b614d7f89838a01614cb5565b94506060880135915080821115614d9557600080fd5b50614da288828901614cce565b969995985093965092949392505050565b60005b83811015614dce578181015183820152602001614db6565b50506000910152565b60008151808452614def816020860160208601614db3565b601f01601f19169290920160200192915050565b600081518084526020808501945080840160005b83811015614e3357815187529582019590820190600101614e17565b509495945050505050565b7fff000000000000000000000000000000000000000000000000000000000000008816815260e060208201526000614e7960e0830189614dd7565b8281036040840152614e8b8189614dd7565b90508660608401526001600160a01b03861660808401528460a084015282810360c0840152614eba8185614e03565b9a9950505050505050505050565b60008060008060008060008060008060c08b8d031215614ee757600080fd5b8a3567ffffffffffffffff80821115614eff57600080fd5b614f0b8e838f01614a69565b9b5060208d0135915080821115614f2157600080fd5b614f2d8e838f01614cce565b909b50995060408d0135915080821115614f4657600080fd5b614f528e838f01614cce565b909950975060608d0135915080821115614f6b57600080fd5b614f778e838f01614cce565b909750955060808d0135915080821115614f9057600080fd5b50614f9d8d828e01614cce565b9094509250614fb0905060a08c016149eb565b90509295989b9194979a5092959850565b600080600080600080600060e0888a031215614fdc57600080fd5b873567ffffffffffffffff80821115614ff457600080fd5b6150008b838c01614a69565b985060208a013591508082111561501657600080fd5b506150238a828b01614a69565b965050615032604089016149eb565b9450615040606089016149eb565b935061504e608089016149eb565b925061505c60a089016149eb565b9150614bdd60c089016149eb565b6000806000806000806080878903121561508357600080fd5b863567ffffffffffffffff8082111561509b57600080fd5b6150a78a838b01614a69565b975060208901359150808211156150bd57600080fd5b6150c98a838b01614cce565b909750955060408901359150808211156150e257600080fd5b506150ef89828a01614cce565b90945092506151029050606088016149eb565b90509295509295509295565b634e487b7160e01b600052601160045260246000fd5b600061ffff80831681810361513b5761513b61510e565b6001019392505050565b6040815260006151586040830185614dd7565b90508260208301529392505050565b60006020828403121561517957600080fd5b81516145c481614aea565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b6001600160a01b038616815284602082015283604082015260806060820152600061360d608083018486615184565b86815260ff8616602082015284604082015260a06060820152600061520760a083018587615184565b90508215156080830152979650505050505050565b634e487b7160e01b600052602160045260246000fd5b60006020828403121561524457600080fd5b6145c482614ad9565b6000808335601e1984360301811261526457600080fd5b83018035915067ffffffffffffffff82111561527f57600080fd5b602001915036819003821315614b3a57600080fd5b6060815260006152a76060830186614dd7565b60208301949094525060400152919050565b602081526000614797602083018486615184565b6000602082840312156152df57600080fd5b5051919050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2183360301811261531a57600080fd5b90910192915050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc183360301811261531a57600080fd5b6000808335601e1984360301811261536e57600080fd5b830160208101925035905067ffffffffffffffff81111561538e57600080fd5b803603821315614b3a57600080fd5b60006153a98283615323565b604084528035600481106153bc57600080fd5b60408501526153ce6020820182615357565b9150604060608601526153e5608086018383615184565b915050602083013560208501528091505092915050565b60006001600160a01b0380615410846149eb565b1684526154206020840184615323565b60e0602086015261543460e086018261539d565b905081615443604086016149eb565b1660408601526154566060850185615323565b9150848103606086015261546a818361539d565b9150506080830135608085015260a083013560a085015260c083013560c08501528091505092915050565b600060408083016001600160a01b03871684526020828186015281868352606092508286019050828760051b870101886000805b8a8110156155c0577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa08a850301855282357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff818d3603018112615529578283fd5b8c01608061553782806152e6565b818752615546828801826153fc565b91505061555588830183615357565b8783038a890152615567838284615184565b925050506155778a8301836152e6565b8682038b88015261558882826153fc565b91505061559789830183615357565b92508682038a8801526155ab828483615184565b978901979650505092860192506001016154c9565b50919b9a5050505050505050505050565b85815260ff8516602082015283604082015260806060820152600061360d608083018486615184565b6000808335601e1984360301811261561157600080fd5b83018035915067ffffffffffffffff82111561562c57600080fd5b6020019150600581901b3603821315614b3a57600080fd5b600067ffffffffffffffff8084111561565f5761565f614a22565b8360051b6020615670818301614a38565b86815291850191818101903684111561568857600080fd5b865b848110156156bc578035868111156156a25760008081fd5b6156ae36828b01614a69565b84525091830191830161568a565b50979650505050505050565b634e487b7160e01b600052603260045260246000fd5b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561571057600080fd5b8260051b80836020870137939093016020019392505050565b6001600160a01b038516815260606020820152600061574b6060830186614e03565b828103604084015261360d8185876156de565b81835260006020808501808196508560051b810191508460005b878110156157ae57828403895261578f8288615357565b61579a868284615184565b9a87019a9550505090840190600101615778565b5091979650505050505050565b6001600160a01b03871681526080602082015260006157dd6080830188614e03565b82810360408401526157f08187896156de565b9050828103606084015261580581858761575e565b9998505050505050505050565b8183526000602080850194508260005b85811015614e335760ff61583583614ad9565b1687529582019590820190600101615822565b60a0808252810189905260008a60c08301825b8c811015615889576001600160a01b03615874846149eb565b1682526020928301929091019060010161585b565b50838103602085015261589c818c614e03565b91505082810360408401526158b281898b615812565b905082810360608401526158c78187896156de565b905082810360808401526158dc81858761575e565b9c9b505050505050505050505050565b6000602082840312156158fe57600080fd5b81356145c481614aea565b60a08152600061591c60a083018c614e03565b602083820381850152615930828c8e615812565b91508382036040850152615945828a8c6156de565b9150838203606085015261595a82888a61575e565b8481036080860152858152869250810160005b8681101561599457833561598081614aea565b15158252928201929082019060010161596d565b509d9c50505050505050505050505050565b60a0815260006159b960a083018a614e03565b82810360208481019190915289518083528a82019282019060005b818110156159f357845160ff16835293830193918301916001016159d4565b50508481036040860152615a08818a8c6156de565b9250508382036060850152615a1e82878961575e565b8481036080860152855180825282870193509082019060005b81811015615a55578451151583529383019391830191600101615a37565b50909c9b505050505050505050505050565b60008251615a79818460208701614db3565b9190910192915050565b80820281158282048414176107e4576107e461510e565b600082615ab757634e487b7160e01b600052601260045260246000fd5b500490565b818103818111156107e4576107e461510e565b600181811c90821680615ae357607f821691505b602082108103614cc857634e487b7160e01b600052602260045260246000fd5b815160009082906020808601845b83811015615b365781516001600160a01b031685529382019390820190600101615b11565b50929695505050505050565b815160009082906020808601845b83811015615b3657815160ff1685529382019390820190600101615b50565b815160009082906020808601845b83811015615b3657815185529382019390820190600101615b7d565b815160009082906020808601845b83811015615b36578151151585529382019390820190600101615ba7565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351615bfd816017850160208801614db3565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351615c3a816028840160208801614db3565b01602801949350505050565b6020815260006145c46020830184614dd7565b601f821115610f2457600081815260208120601f850160051c81016020861015615c805750805b601f850160051c820191505b81811015615c9f57828155600101615c8c565b505050505050565b815167ffffffffffffffff811115615cc157615cc1614a22565b615cd581615ccf8454615acf565b84615c59565b602080601f831160018114615d0a5760008415615cf25750858301515b600019600386901b1c1916600185901b178555615c9f565b600085815260208120601f198616915b82811015615d3957888601518255948401946001909101908401615d1a565b5085821015615d575787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b808201808211156107e4576107e461510e565b600081615d8957615d8961510e565b50600019019056fea26469706673582212203a34e5097fe0f20a253d88ad6b0a201ff7969ca4e39760280a69b3aad7b8bb9964736f6c63430008120033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "The Sandbox",
    "custom:security-contact": "contact-blockchain@sandbox.game",
    "events": {
      "EIP712DomainChanged()": {
        "details": "MAY be emitted to signal that the domain could have changed."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "TrustedForwarderSet(address,address,address)": {
        "params": {
          "newTrustedForwarder": "new trusted forwarder",
          "oldTrustedForwarder": "old trusted forwarder",
          "operator": "the sender of the transaction"
        }
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "createAsset(bytes,uint8,uint256,bool,string,address)": {
        "params": {
          "amount": "The amount of the asset to mint",
          "creator": "The address of the creator",
          "metadataHash": "The metadata hash of the asset to mint",
          "revealed": "Whether the asset is revealed or not",
          "signature": "A signature generated by TSB",
          "tier": "The tier of the asset to mint"
        }
      },
      "createMultipleAssets(bytes,uint8[],uint256[],bool[],string[],address)": {
        "params": {
          "amounts": "The amounts of the assets to mint",
          "creator": "The address of the creator",
          "metadataHashes": "The metadata hashes of the assets to mint",
          "revealed": "Whether the assets are revealed or not",
          "signature": "A signature generated by TSB",
          "tiers": "The tiers of the assets to mint"
        }
      },
      "createMultipleSpecialAssets(bytes,uint256[],string[],address)": {
        "details": "Only callable by the special minter",
        "params": {
          "amounts": "The amounts of the assets to mint",
          "creator": "The address of the creator",
          "metadataHashes": "The metadata hashes of the assets to mint",
          "signature": "A signature generated by TSB"
        }
      },
      "createSpecialAsset(bytes,uint256,string,address)": {
        "details": "Only callable by the special minter",
        "params": {
          "amount": "The amount of the asset to mint",
          "creator": "The address of the creator",
          "metadataHash": "The metadata hash of the asset to mint,",
          "signature": "A signature generated by TSB"
        }
      },
      "eip712Domain()": {
        "details": "See {EIP-5267}. _Available since v4.9._"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getTrustedForwarder()": {
        "returns": {
          "_0": "return the address of the trusted forwarder"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(string,string,address,address,address,address,address)": {
        "params": {
          "_assetContract": "The address of the asset contract",
          "_authValidator": "The address of the AuthSuperValidator contract",
          "_catalystContract": "The address of the catalyst contract",
          "_defaultAdmin": "The address of the default admin",
          "_forwarder": "The address of the forwarder contract",
          "_name": "The name of the contract (for EIP712)",
          "_version": "The version of the contract (for EIP712)"
        }
      },
      "isTrustedForwarder(address)": {
        "params": {
          "forwarder": "trusted forwarder address to check"
        },
        "returns": {
          "_0": "true if the address is the same as the trusted forwarder"
        }
      },
      "lazyCreateAsset(address,bytes,(address,uint8,uint256,uint256,address,string,uint256,address,uint256),((address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes,(address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes)[])": {
        "details": "Allows users to lazy mint assets",
        "params": {
          "from": "The address of the sender",
          "matchedOrders": "The orders to match for catalyst purchase",
          "mintData": "The data for the lazy mint",
          "signature": "The signature of the lazy mint generated by TSB"
        }
      },
      "lazyCreateMultipleAssets(address,bytes,(address,uint8[],uint256[],uint256[],address[],string[],uint256[],address[],uint256),((address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes,(address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes)[][])": {
        "details": "Allows users to lazy mint assets coming from multiple creators",
        "params": {
          "from": "The address of the sender",
          "matchedOrdersArray": "The orders to match for catalyst purchase",
          "mintData": "The data for the lazy mint",
          "signature": "The signature of the lazy mint generated by TSB"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setAuthValidator(address)": {
        "params": {
          "_authValidator": "The auth validator contract address to set"
        }
      },
      "setExchangeContract(address)": {
        "params": {
          "_exchangeContract": "The exchange contract to set"
        }
      },
      "setLazyMintFee(uint256)": {
        "params": {
          "_lazyMintFeeInBps": "The fee to set"
        }
      },
      "setLazyMintFeeReceiver(address)": {
        "params": {
          "_lazyMintFeeReceiver": "The receiver to set"
        }
      },
      "setTrustedForwarder(address)": {
        "details": "Change the address of the trusted forwarder for meta-TX",
        "params": {
          "trustedForwarder": "The new trustedForwarder"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "title": "AssetCreate",
    "version": 1
  },
  "userdoc": {
    "events": {
      "TrustedForwarderSet(address,address,address)": {
        "notice": "Emitted when a `newTrustedForwarder` is set, replacing the `oldTrustedForwarder`"
      }
    },
    "kind": "user",
    "methods": {
      "LAZY_MINT_BATCH_TYPEHASH()": {
        "notice": "Lazy mint batch signature typehash"
      },
      "LAZY_MINT_TYPEHASH()": {
        "notice": "Lazy mint signature typehash"
      },
      "MAX_BPS_IN_UNIT()": {
        "notice": "Maximum BPS value"
      },
      "MINT_BATCH_TYPEHASH()": {
        "notice": "Mint batch signature typehash"
      },
      "MINT_TYPEHASH()": {
        "notice": "Mint signature typehash"
      },
      "NOT_BRIDGED()": {
        "notice": "Not bridged status flag"
      },
      "NOT_REVEALED()": {
        "notice": "Not revealed status flag"
      },
      "NOT_REVEALED_NONCE()": {
        "notice": "Not revealed status nonce value"
      },
      "PAUSER_ROLE()": {
        "notice": "Role allowing to pause the contract"
      },
      "REVEALED()": {
        "notice": "Revealed status flag"
      },
      "REVEALED_NONCE()": {
        "notice": "Revealed status nonce value"
      },
      "SPECIAL_MINTER_ROLE()": {
        "notice": "Role allowing to mint special assets"
      },
      "availableToMint(uint256)": {
        "notice": "mapping of tokenId => maxSupply specified by the creator"
      },
      "createAsset(bytes,uint8,uint256,bool,string,address)": {
        "notice": "Create a new asset"
      },
      "createMultipleAssets(bytes,uint8[],uint256[],bool[],string[],address)": {
        "notice": "Create multiple assets at once"
      },
      "createMultipleSpecialAssets(bytes,uint256[],string[],address)": {
        "notice": "Create multiple special assets"
      },
      "createSpecialAsset(bytes,uint256,string,address)": {
        "notice": "Create special assets"
      },
      "creatorNonces(address)": {
        "notice": "mapping of creator address to creator nonce, a nonce is incremented every time a creator mints a new token"
      },
      "exchangeContract()": {
        "notice": "The marketplace exchange contract to purchase catalyst"
      },
      "getTrustedForwarder()": {
        "notice": "return the address of the trusted forwarder"
      },
      "initialize(string,string,address,address,address,address,address)": {
        "notice": "Initialize the contract"
      },
      "isTrustedForwarder(address)": {
        "notice": "return true if the forwarder is the trusted forwarder"
      },
      "lazyCreateAsset(address,bytes,(address,uint8,uint256,uint256,address,string,uint256,address,uint256),((address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes,(address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes)[])": {
        "notice": "Lazily creates a new asset with a signature"
      },
      "lazyCreateMultipleAssets(address,bytes,(address,uint8[],uint256[],uint256[],address[],string[],uint256[],address[],uint256),((address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes,(address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes)[][])": {
        "notice": "Lazily creates multiple assets with a signature"
      },
      "lazyMintFeeInBps()": {
        "notice": "A fee denoted in BPS that is charged when using the lazy minting feature, deducted from the creators payout"
      },
      "lazyMintFeeReceiver()": {
        "notice": "The address that receives the lazy mint fee"
      },
      "pause()": {
        "notice": "Pause the contracts mint and burn functions"
      },
      "setAuthValidator(address)": {
        "notice": "Set the auth validator contract address"
      },
      "setExchangeContract(address)": {
        "notice": "Set the exchange contract"
      },
      "setLazyMintFee(uint256)": {
        "notice": "Set the lazy mint fee"
      },
      "setLazyMintFeeReceiver(address)": {
        "notice": "Set the lazy mint fee receiver"
      },
      "setTrustedForwarder(address)": {
        "notice": "Set a new trusted forwarder address, limited to DEFAULT_ADMIN_ROLE only"
      },
      "signatureNonces(address)": {
        "notice": "mapping of minter address to signature nonce, a nonce is incremented every time asset minter consumes a signature generated by TSB"
      },
      "unpause()": {
        "notice": "Unpause the contracts mint and burn functions"
      }
    },
    "notice": "User-facing contract for creating new assets",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 440,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetCreate.sol:AssetCreate",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 443,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetCreate.sol:AssetCreate",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 10577,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetCreate.sol:AssetCreate",
        "label": "_trustedForwarder",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10688,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetCreate.sol:AssetCreate",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1714,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetCreate.sol:AssetCreate",
        "label": "_hashedName",
        "offset": 0,
        "slot": "50",
        "type": "t_bytes32"
      },
      {
        "astId": 1717,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetCreate.sol:AssetCreate",
        "label": "_hashedVersion",
        "offset": 0,
        "slot": "51",
        "type": "t_bytes32"
      },
      {
        "astId": 1719,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetCreate.sol:AssetCreate",
        "label": "_name",
        "offset": 0,
        "slot": "52",
        "type": "t_string_storage"
      },
      {
        "astId": 1721,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetCreate.sol:AssetCreate",
        "label": "_version",
        "offset": 0,
        "slot": "53",
        "type": "t_string_storage"
      },
      {
        "astId": 1979,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetCreate.sol:AssetCreate",
        "label": "__gap",
        "offset": 0,
        "slot": "54",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 1100,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetCreate.sol:AssetCreate",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2023,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetCreate.sol:AssetCreate",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetCreate.sol:AssetCreate",
        "label": "_roles",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 334,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetCreate.sol:AssetCreate",
        "label": "__gap",
        "offset": 0,
        "slot": "203",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 623,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetCreate.sol:AssetCreate",
        "label": "_paused",
        "offset": 0,
        "slot": "252",
        "type": "t_bool"
      },
      {
        "astId": 728,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetCreate.sol:AssetCreate",
        "label": "__gap",
        "offset": 0,
        "slot": "253",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5894,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetCreate.sol:AssetCreate",
        "label": "assetContract",
        "offset": 0,
        "slot": "302",
        "type": "t_contract(IAsset)9193"
      },
      {
        "astId": 5897,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetCreate.sol:AssetCreate",
        "label": "catalystContract",
        "offset": 0,
        "slot": "303",
        "type": "t_contract(ICatalyst)9518"
      },
      {
        "astId": 5900,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetCreate.sol:AssetCreate",
        "label": "authValidator",
        "offset": 0,
        "slot": "304",
        "type": "t_contract(AuthSuperValidator)9111"
      },
      {
        "astId": 5905,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetCreate.sol:AssetCreate",
        "label": "creatorNonces",
        "offset": 0,
        "slot": "305",
        "type": "t_mapping(t_address,t_uint16)"
      },
      {
        "astId": 5910,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetCreate.sol:AssetCreate",
        "label": "signatureNonces",
        "offset": 0,
        "slot": "306",
        "type": "t_mapping(t_address,t_uint16)"
      },
      {
        "astId": 5913,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetCreate.sol:AssetCreate",
        "label": "lazyMintFeeInBps",
        "offset": 0,
        "slot": "307",
        "type": "t_uint256"
      },
      {
        "astId": 5916,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetCreate.sol:AssetCreate",
        "label": "lazyMintFeeReceiver",
        "offset": 0,
        "slot": "308",
        "type": "t_address"
      },
      {
        "astId": 5921,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetCreate.sol:AssetCreate",
        "label": "availableToMint",
        "offset": 0,
        "slot": "309",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5925,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetCreate.sol:AssetCreate",
        "label": "exchangeContract",
        "offset": 0,
        "slot": "310",
        "type": "t_contract(IExchange)9543"
      },
      {
        "astId": 7677,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetCreate.sol:AssetCreate",
        "label": "__gap",
        "offset": 0,
        "slot": "311",
        "type": "t_array(t_uint256)41_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)41_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[41]",
        "numberOfBytes": "1312"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(AuthSuperValidator)9111": {
        "encoding": "inplace",
        "label": "contract AuthSuperValidator",
        "numberOfBytes": "20"
      },
      "t_contract(IAsset)9193": {
        "encoding": "inplace",
        "label": "contract IAsset",
        "numberOfBytes": "20"
      },
      "t_contract(ICatalyst)9518": {
        "encoding": "inplace",
        "label": "contract ICatalyst",
        "numberOfBytes": "20"
      },
      "t_contract(IExchange)9543": {
        "encoding": "inplace",
        "label": "contract IExchange",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint16)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "@sandbox-smart-contracts/asset/contracts/AssetCreate.sol:AssetCreate",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "@sandbox-smart-contracts/asset/contracts/AssetCreate.sol:AssetCreate",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}