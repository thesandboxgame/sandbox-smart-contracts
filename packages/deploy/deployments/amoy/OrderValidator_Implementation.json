{
  "address": "0x3AFE10Ad154165b5c687D17f0B20E655B5ae54eE",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "EIP712DomainChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "RoleDisabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "RoleEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "WhitelistsDisabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "WhitelistsEnabled",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ERC20_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PARTNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TSB_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "disableRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableWhitelists",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eip712Domain",
      "outputs": [
        {
          "internalType": "bytes1",
          "name": "fields",
          "type": "bytes1"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "verifyingContract",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "extensions",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "enableRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableWhitelists",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "bytes32[]",
          "name": "roles",
          "type": "bytes32[]"
        },
        {
          "internalType": "bool[]",
          "name": "permissions",
          "type": "bool[]"
        },
        {
          "internalType": "bool",
          "name": "whitelistsEnabled",
          "type": "bool"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "isRoleEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isWhitelistsEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "roles",
          "type": "bytes32[]"
        },
        {
          "internalType": "bool[]",
          "name": "permissions",
          "type": "bool[]"
        }
      ],
      "name": "setRolesEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum LibAsset.AssetClass",
                      "name": "assetClass",
                      "type": "uint8"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct LibAsset.AssetType",
                  "name": "assetType",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibAsset.Asset",
              "name": "makeAsset",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum LibAsset.AssetClass",
                      "name": "assetClass",
                      "type": "uint8"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct LibAsset.AssetType",
                  "name": "assetType",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibAsset.Asset",
              "name": "takeAsset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "end",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibOrder.Order",
          "name": "order",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "validate",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x85c1602a8d76b5c1fe99cea17b5d2e7fb77a624dcaeb99541ccf2f648e7f5145",
  "receipt": {
    "to": null,
    "from": "0x5F890c9522dCE5670d741D4277BFCC2d9cA8Af02",
    "contractAddress": "0x3AFE10Ad154165b5c687D17f0B20E655B5ae54eE",
    "transactionIndex": 1,
    "gasUsed": "2291529",
    "logsBloom": "0x
    "blockHash": "0x600300296f3d36e8e27eea8e23e4df574ded6fa4ca8d14ad9ae5c70decbc9823",
    "transactionHash": "0x85c1602a8d76b5c1fe99cea17b5d2e7fb77a624dcaeb99541ccf2f648e7f5145",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 6020226,
        "transactionHash": "0x85c1602a8d76b5c1fe99cea17b5d2e7fb77a624dcaeb99541ccf2f648e7f5145",
        "address": "0x3AFE10Ad154165b5c687D17f0B20E655B5ae54eE",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 2,
        "blockHash": "0x600300296f3d36e8e27eea8e23e4df574ded6fa4ca8d14ad9ae5c70decbc9823"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 6020226,
        "transactionHash": "0x85c1602a8d76b5c1fe99cea17b5d2e7fb77a624dcaeb99541ccf2f648e7f5145",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02",
          "0x000000000000000000000000915a2284d28bd93de7d6f31173b981204bb666e6"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000c3633420e6700000000000000000000000000000000000000000000000003b035a5f629fecb0f00000000000000000000000000000000000000000000004d13bdad9b83319993000000000000000000000000000000000000000000000003b0296fc2e7f0640f00000000000000000000000000000000000000000000004d13c9e3cec5400093",
        "logIndex": 3,
        "blockHash": "0x600300296f3d36e8e27eea8e23e4df574ded6fa4ca8d14ad9ae5c70decbc9823"
      }
    ],
    "blockNumber": 6020226,
    "cumulativeGasUsed": "2332592",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "96c70340179a720b56419f200f7c3ce5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"RoleDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"RoleEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"WhitelistsDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"WhitelistsEnabled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC20_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PARTNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TSB_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"disableRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableWhitelists\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"enableRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableWhitelists\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"roles\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"permissions\",\"type\":\"bool[]\"},{\"internalType\":\"bool\",\"name\":\"whitelistsEnabled\",\"type\":\"bool\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"isRoleEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWhitelistsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"roles\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"permissions\",\"type\":\"bool[]\"}],\"name\":\"setRolesEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"enum LibAsset.AssetClass\",\"name\":\"assetClass\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"makeAsset\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"enum LibAsset.AssetClass\",\"name\":\"assetClass\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"takeAsset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"internalType\":\"struct LibOrder.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"validate\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"The Sandbox\",\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleEnabled(bytes32)\":{\"params\":{\"role\":\"Roles whose permissions were enabled\"}},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\",\"details\":\"Internal mechanism to protect the implementation contract from being initialized.\"},\"disableRole(bytes32)\":{\"params\":{\"role\":\"Identifier of the role to be disabled.\"}},\"eip712Domain()\":{\"details\":\"See {EIP-5267}. _Available since v4.9._\"},\"enableRole(bytes32)\":{\"params\":{\"role\":\"Identifier of the role to be enabled.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,bytes32[],bool[],bool)\":{\"params\":{\"admin\":\"The admin address for the OrderValidator and Whitelist.\",\"permissions\":\"Array of permissions associated with each role.\",\"roles\":\"Array of role identifiers for the Whitelist contract.\",\"whitelistsEnabled\":\"Boolean to indicate if whitelist functionality is enabled.\"}},\"isRoleEnabled(bytes32)\":{\"params\":{\"role\":\"Identifier of the role.\"},\"returns\":{\"_0\":\"True if the role is enabled, false otherwise.\"}},\"isWhitelistsEnabled()\":{\"returns\":{\"_0\":\"True if whitelists are active, false otherwise.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setRolesEnabled(bytes32[],bool[])\":{\"params\":{\"permissions\":\"List of booleans indicating the desired status of each role.\",\"roles\":\"List of role identifiers.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"validate((address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes,address)\":{\"params\":{\"order\":\"The order details to be validated.\",\"sender\":\"Address of the order sender.\",\"signature\":\"The signature associated with the order.\"}}},\"title\":\"OrderValidator\",\"version\":1},\"userdoc\":{\"events\":{\"RoleDisabled(bytes32)\":{\"notice\":\"Emitted when a specific role gets disabled.\"},\"RoleEnabled(bytes32)\":{\"notice\":\"Emitted when a specific role gets enabled.\"},\"WhitelistsDisabled()\":{\"notice\":\"Emitted when all non-ERC20 tokens are allowed in the market.\"},\"WhitelistsEnabled()\":{\"notice\":\"Emitted when only non-ERC20 tokens that are whitelisted can be allowed.\"}},\"kind\":\"user\",\"methods\":{\"ERC20_ROLE()\":{\"notice\":\"Role for ERC20 tokens, enabled all times\"},\"PARTNER_ROLE()\":{\"notice\":\"Role for partner tokens\"},\"TSB_ROLE()\":{\"notice\":\"Role for The Sandbox tokens\"},\"disableRole(bytes32)\":{\"notice\":\"Disable a given role.\"},\"disableWhitelists()\":{\"notice\":\"Deactivate whitelists for all non-ERC20 tokens.\"},\"enableRole(bytes32)\":{\"notice\":\"Enable a given role.\"},\"enableWhitelists()\":{\"notice\":\"Activate whitelists for all non-ERC20 tokens.\"},\"initialize(address,bytes32[],bool[],bool)\":{\"notice\":\"Initializes the OrderValidator contract.\"},\"isRoleEnabled(bytes32)\":{\"notice\":\"Query the status of a given role.\"},\"isWhitelistsEnabled()\":{\"notice\":\"Check the status of the whitelist functionality.\"},\"setRolesEnabled(bytes32[],bool[])\":{\"notice\":\"Enables or disables specific roles.\"},\"validate((address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes,address)\":{\"notice\":\"Validates the given order.\"}},\"notice\":\"Contract for order validation. It validates orders and contains a whitelist of tokens.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@sandbox-smart-contracts/marketplace/contracts/OrderValidator.sol\":\"OrderValidator\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x7d24c901e098a04fa7f388c9ff1890bb522307272a2fee8030ee15a8d907096f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc8710577334e8d0799ae2b2a731b1924a7bddd64319da9787ddd2dc69bdd1ce5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1271Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271Upgradeable {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x4473c09c087ee1a48c5547b23799c0474b2e08cde6fec5921c628171c4ebcdc0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267Upgradeable {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0xe562dab443278837fa50faddb76743399e942181881db8dccaea3bd1712994db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0xa014f65d84b02827055d99993ccdbfb4b56b2c9e91eb278d82a93330659d06e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC5267Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable, IERC5267Upgradeable {\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @custom:oz-renamed-from _HASHED_NAME\\n    bytes32 private _hashedName;\\n    /// @custom:oz-renamed-from _HASHED_VERSION\\n    bytes32 private _hashedVersion;\\n\\n    string private _name;\\n    string private _version;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        _name = name;\\n        _version = version;\\n\\n        // Reset prior values in storage if upgrading\\n        _hashedName = 0;\\n        _hashedVersion = 0;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator();\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash(), block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {EIP-5267}.\\n     *\\n     * _Available since v4.9._\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        // If the hashed name and version in storage are non-zero, the contract hasn't been properly initialized\\n        // and the EIP712 domain is not reliable, as it will be missing name and version.\\n        require(_hashedName == 0 && _hashedVersion == 0, \\\"EIP712: Uninitialized\\\");\\n\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Name() internal virtual view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Version() internal virtual view returns (string memory) {\\n        return _version;\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Name` instead.\\n     */\\n    function _EIP712NameHash() internal view returns (bytes32) {\\n        string memory name = _EIP712Name();\\n        if (bytes(name).length > 0) {\\n            return keccak256(bytes(name));\\n        } else {\\n            // If the name is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the name hash in storage if non-zero, otherwise we assume the name is empty by design.\\n            bytes32 hashedName = _hashedName;\\n            if (hashedName != 0) {\\n                return hashedName;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Version` instead.\\n     */\\n    function _EIP712VersionHash() internal view returns (bytes32) {\\n        string memory version = _EIP712Version();\\n        if (bytes(version).length > 0) {\\n            return keccak256(bytes(version));\\n        } else {\\n            // If the version is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the version hash in storage if non-zero, otherwise we assume the version is empty by design.\\n            bytes32 hashedVersion = _hashedVersion;\\n            if (hashedVersion != 0) {\\n                return hashedVersion;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0x7077d7f3369b21f286840c0d69b09a8a6d3d6e522fff67bfc240fd0a6cdf178c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/SignatureCheckerUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1271Upgradeable.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureCheckerUpgradeable {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\\n        (address recovered, ECDSAUpgradeable.RecoverError error) = ECDSAUpgradeable.tryRecover(hash, signature);\\n        return\\n            (error == ECDSAUpgradeable.RecoverError.NoError && recovered == signer) ||\\n            isValidERC1271SignatureNow(signer, hash, signature);\\n    }\\n\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\\n     * against the signer smart contract using ERC1271.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidERC1271SignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271Upgradeable.isValidSignature.selector, hash, signature)\\n        );\\n        return (success &&\\n            result.length >= 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271Upgradeable.isValidSignature.selector));\\n    }\\n}\\n\",\"keccak256\":\"0x7c3cbce7cec023937ebbae16ca73e569979b4d63bbcd471f0db6b17d5fc6d1df\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// EIP-712 is Final as of 2022-08-11. This file is deprecated.\\n\\nimport \\\"./EIP712Upgradeable.sol\\\";\\n\",\"keccak256\":\"0x31a2e227f5653e4b31e0f680857b8842073d083b33df11b3f3b3bb5ddc10526e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xd90d7723512df65ae417adaf0801042940f0dabd60039ceeaffe34aa5b238da1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x1c65595a26548a1b2263315b08a56334a2d7087319814437559c3c96025e939f\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/marketplace/contracts/OrderValidator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport {LibOrder} from \\\"./libraries/LibOrder.sol\\\";\\nimport {LibAsset} from \\\"./libraries/LibAsset.sol\\\";\\nimport {SignatureCheckerUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/SignatureCheckerUpgradeable.sol\\\";\\nimport {EIP712Upgradeable, Initializable} from \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\\\";\\nimport {IOrderValidator} from \\\"./interfaces/IOrderValidator.sol\\\";\\nimport {Whitelist} from \\\"./Whitelist.sol\\\";\\n\\n/// @author The Sandbox\\n/// @title OrderValidator\\n/// @notice Contract for order validation. It validates orders and contains a whitelist of tokens.\\ncontract OrderValidator is IOrderValidator, Initializable, EIP712Upgradeable, Whitelist {\\n    using SignatureCheckerUpgradeable for address;\\n\\n    /// @dev Internal mechanism to protect the implementation contract from being initialized.\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Initializes the OrderValidator contract.\\n    /// @param admin The admin address for the OrderValidator and Whitelist.\\n    /// @param roles Array of role identifiers for the Whitelist contract.\\n    /// @param permissions Array of permissions associated with each role.\\n    /// @param whitelistsEnabled Boolean to indicate if whitelist functionality is enabled.\\n    function initialize(\\n        address admin,\\n        bytes32[] calldata roles,\\n        bool[] calldata permissions,\\n        bool whitelistsEnabled\\n    ) external initializer {\\n        __EIP712_init_unchained(\\\"The Sandbox Marketplace\\\", \\\"1.0.0\\\");\\n        __Whitelist_init(admin, roles, permissions, whitelistsEnabled);\\n    }\\n\\n    /// @notice Validates the given order.\\n    /// @param order The order details to be validated.\\n    /// @param signature The signature associated with the order.\\n    /// @param sender Address of the order sender.\\n    function validate(LibOrder.Order calldata order, bytes memory signature, address sender) external view {\\n        require(order.maker != address(0), \\\"no maker\\\");\\n\\n        LibOrder.validateOrderTime(order);\\n        _verifyWhitelists(order.makeAsset);\\n\\n        if (order.salt == 0) {\\n            require(sender == order.maker, \\\"maker is not tx sender\\\");\\n            // No partial fill, the order is reusable forever\\n            return;\\n        }\\n\\n        if (sender == order.maker) {\\n            return;\\n        }\\n\\n        bytes32 hash = LibOrder.hash(order);\\n\\n        require(order.maker.isValidSignatureNow(_hashTypedDataV4(hash), signature), \\\"signature verification error\\\");\\n    }\\n\\n    /// @notice Verifies if the asset exchange is affected by the whitelist.\\n    /// @param asset Details of the asset to be verified.\\n    /// @dev If the asset type is ERC20, the ERC20_ROLE is checked.\\n    /// @dev if ERC20_ROLE is enabled only tokens that have the role are accepted\\n    /// @dev If whitelists are enabled, checks TSB_ROLE and PARTNER_ROLE.\\n    function _verifyWhitelists(LibAsset.Asset calldata asset) internal view {\\n        address makeToken = LibAsset.decodeAddress(asset.assetType);\\n        if (asset.assetType.assetClass == LibAsset.AssetClass.ERC20) {\\n            if (!hasRole(ERC20_ROLE, makeToken)) {\\n                revert(\\\"payment token not allowed\\\");\\n            }\\n        } else {\\n            if (!isWhitelistsEnabled()) {\\n                return;\\n            } else if (\\n                (isRoleEnabled(TSB_ROLE) && hasRole(TSB_ROLE, makeToken)) ||\\n                (isRoleEnabled(PARTNER_ROLE) && hasRole(PARTNER_ROLE, makeToken))\\n            ) {\\n                return;\\n            } else {\\n                revert(\\\"not allowed\\\");\\n            }\\n        }\\n    }\\n\\n    // slither-disable-next-line unused-state\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x3a9bba13c68fb5539d6fb1d12ae53c1093f917ee3bbf39fde34d16a41cae3d7f\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/marketplace/contracts/Whitelist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {AccessControlEnumerableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport {IWhitelist} from \\\"./interfaces/IWhitelist.sol\\\";\\n\\n/// @author The Sandbox\\n/// @title Whitelist contract\\n/// @dev A contract to control which tokens are accepted in the marketplace.\\ncontract Whitelist is IWhitelist, Initializable, AccessControlEnumerableUpgradeable {\\n    /// @notice Role for The Sandbox tokens\\n    /// @return Hash for TSB_ROLE\\n    bytes32 public constant TSB_ROLE = keccak256(\\\"TSB_ROLE\\\");\\n    /// @notice Role for partner tokens\\n    /// @return Hash for PARTNER_ROLE\\n    bytes32 public constant PARTNER_ROLE = keccak256(\\\"PARTNER_ROLE\\\");\\n    /// @notice Role for ERC20 tokens, enabled all times\\n    /// @return Hash for ERC20_ROLE\\n    bytes32 public constant ERC20_ROLE = keccak256(\\\"ERC20_ROLE\\\");\\n\\n    /// @dev Internal mapping to keep track of the enablement status of each role.\\n    mapping(bytes32 role => bool isEnabled) private _rolesEnabled;\\n\\n    /// @dev Boolean that indicates if non-ERC20 whitelists are enabled or not\\n    bool private _whitelistsEnabled;\\n\\n    /// @notice Emitted when a specific role gets enabled.\\n    /// @param role Roles whose permissions were enabled\\n    event RoleEnabled(bytes32 indexed role);\\n\\n    /// @notice Emitted when a specific role gets disabled.\\n    event RoleDisabled(bytes32 indexed role);\\n\\n    /// @notice Emitted when only non-ERC20 tokens that are whitelisted can be allowed.\\n    event WhitelistsEnabled();\\n\\n    /// @notice Emitted when all non-ERC20 tokens are allowed in the market.\\n    event WhitelistsDisabled();\\n\\n    /// @dev This protects the implementation contract from being initialized.\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Enables or disables specific roles.\\n    /// @param roles List of role identifiers.\\n    /// @param permissions List of booleans indicating the desired status of each role.\\n    function setRolesEnabled(\\n        bytes32[] calldata roles,\\n        bool[] calldata permissions\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _setRolesEnabled(roles, permissions);\\n    }\\n\\n    /// @notice Enable a given role.\\n    /// @param role Identifier of the role to be enabled.\\n    function enableRole(bytes32 role) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _enableRole(role);\\n    }\\n\\n    /// @notice Disable a given role.\\n    /// @param role Identifier of the role to be disabled.\\n    function disableRole(bytes32 role) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _disableRole(role);\\n    }\\n\\n    /// @notice Activate whitelists for all non-ERC20 tokens.\\n    function enableWhitelists() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _enableWhitelists();\\n    }\\n\\n    /// @notice Deactivate whitelists for all non-ERC20 tokens.\\n    function disableWhitelists() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _disableWhitelists();\\n    }\\n\\n    /// @notice Query the status of a given role.\\n    /// @param role Identifier of the role.\\n    /// @return True if the role is enabled, false otherwise.\\n    function isRoleEnabled(bytes32 role) public view returns (bool) {\\n        return _rolesEnabled[role];\\n    }\\n\\n    /// @notice Check the status of the whitelist functionality.\\n    /// @return True if whitelists are active, false otherwise.\\n    function isWhitelistsEnabled() public view returns (bool) {\\n        return _whitelistsEnabled;\\n    }\\n\\n    /// @notice Initializer function for the Whitelist contract.\\n    /// @param admin Address to be granted the admin role.\\n    /// @param roles List of role identifiers.\\n    /// @param permissions List of booleans for the initial status of each role.\\n    /// @param whitelistsEnabled Initial status of the whitelist functionality.\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __Whitelist_init(\\n        address admin,\\n        bytes32[] calldata roles,\\n        bool[] calldata permissions,\\n        bool whitelistsEnabled\\n    ) internal onlyInitializing {\\n        __AccessControlEnumerable_init_unchained();\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\\n        _setRolesEnabled(roles, permissions);\\n        if (whitelistsEnabled) {\\n            _enableWhitelists();\\n        } else {\\n            _disableWhitelists();\\n        }\\n    }\\n\\n    /// @dev Internal function to set the status of multiple roles.\\n    /// @param roles List of role identifiers.\\n    /// @param permissions List of desired status for each role.\\n    function _setRolesEnabled(bytes32[] memory roles, bool[] memory permissions) internal {\\n        require(roles.length == permissions.length, \\\"Mismatched input lengths\\\");\\n        for (uint256 i = 0; i < roles.length; ++i) {\\n            if (isRoleEnabled(roles[i]) != permissions[i]) {\\n                if (permissions[i]) {\\n                    _enableRole(roles[i]);\\n                } else {\\n                    _disableRole(roles[i]);\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Internal function to activate a role.\\n    /// @param role Identifier of the role to be enabled.\\n    function _enableRole(bytes32 role) internal {\\n        _rolesEnabled[role] = true;\\n        emit RoleEnabled(role);\\n    }\\n\\n    /// @dev Internal function to deactivate a role.\\n    /// @param role Identifier of the role to be disabled.\\n    function _disableRole(bytes32 role) internal {\\n        _rolesEnabled[role] = false;\\n        emit RoleDisabled(role);\\n    }\\n\\n    /// @dev Internal function to activate the whitelist functionality.\\n    function _enableWhitelists() internal {\\n        _whitelistsEnabled = true;\\n        emit WhitelistsEnabled();\\n    }\\n\\n    /// @dev Internal function to deactivate the whitelist functionality.\\n    function _disableWhitelists() internal {\\n        _whitelistsEnabled = false;\\n        emit WhitelistsDisabled();\\n    }\\n\\n    // slither-disable-next-line unused-state\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x54d9a559492e531c2d56c11b15910b4fff3773d93d4b21704818b711bc42f7a5\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/marketplace/contracts/interfaces/IOrderValidator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport {LibOrder} from \\\"../libraries/LibOrder.sol\\\";\\n\\n/// @author The Sandbox\\n/// @title OrderValidator contract interface\\n/// @notice Contains the signature for validate, isPurchaseValid and verifyERC20Whitelist functions\\ninterface IOrderValidator {\\n    /// @notice Verifies order\\n    /// @param order Order to be validated\\n    /// @param signature Signature of order\\n    /// @param sender Order sender\\n    function validate(LibOrder.Order memory order, bytes memory signature, address sender) external view;\\n}\\n\",\"keccak256\":\"0x0b88d05e24a53fe183b4d56c689f0a65199dc7530a0d2548fab8fcfa24efd647\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/marketplace/contracts/interfaces/IWhitelist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\n/// @author The Sandbox\\n/// @title Interface for the Whitelist contract\\n/// @notice Contains the function signatures for the contract.\\ninterface IWhitelist {\\n    /// @notice Check if a specific role is enabled or disabled.\\n    /// @param role The role identifier.\\n    /// @return True if the role is enabled, false if disabled.\\n    function isRoleEnabled(bytes32 role) external view returns (bool);\\n\\n    /// @notice Check if whitelists are enabled.\\n    /// @return True if whitelists are enabled, false if disabled.\\n    function isWhitelistsEnabled() external view returns (bool);\\n\\n    /// @notice Setting permissions for tokens.\\n    /// @param roles Roles we want to enable or disable.\\n    /// @param permissions Boolean.\\n    function setRolesEnabled(bytes32[] calldata roles, bool[] calldata permissions) external;\\n\\n    /// @notice Enable role.\\n    /// @param role Role we want to enable.\\n    function enableRole(bytes32 role) external;\\n\\n    /// @notice Disable role.\\n    /// @param role Role we want to disable.\\n    function disableRole(bytes32 role) external;\\n\\n    /// @notice Enable whitelists, allowing orders with any token except for ERC20 tokens.\\n    function enableWhitelists() external;\\n\\n    /// @notice Disable whitelists, requiring orders to refer to the specified whitelists.\\n    function disableWhitelists() external;\\n}\\n\",\"keccak256\":\"0x4084c1ad60973c581f6fc796f5e320f032668008196c8792b2b1b43fef0c370a\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/marketplace/contracts/libraries/LibAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n/// @author The Sandbox\\n/// @title LibAsset: A library for handling different types of Ethereum assets.\\n/// @notice This library contains structs, enums, and utility functions for managing and processing Ethereum assets.\\nlibrary LibAsset {\\n    /// @dev Represents different types of assets on the Ethereum network.\\n    enum AssetClass {\\n        INVALID, // Represents an invalid asset type.\\n        ERC20, // Represents an ERC20 token.\\n        ERC721, // Represents a single ERC721 token.\\n        ERC1155 // Represents an ERC1155 token.\\n    }\\n\\n    /// @dev Represents the side of the trade from which a fee should be taken, if any.\\n    enum FeeSide {\\n        NONE, // No fees are taken.\\n        LEFT, // Fees are taken from the left side of the trade.\\n        RIGHT // Fees are taken from the right side of the trade.\\n    }\\n\\n    /// @dev Represents the type of a specific asset.\\n    /// AssetType can represent a specific ERC-721 token (defined by the token contract address and tokenId) or\\n    /// a specific ERC-20 token (like DAI).\\n    struct AssetType {\\n        AssetClass assetClass; // The class of the asset (ERC20, ERC721, etc.).\\n        bytes data; // Contains the token's contract address and possibly its tokenId.\\n    }\\n\\n    /// @dev Represents any asset on the Ethereum blockchain with its type and value.\\n    struct Asset {\\n        AssetType assetType; // The type of the asset.\\n        uint256 value; // The amount or value of the asset.\\n    }\\n\\n    bytes32 internal constant ASSET_TYPE_TYPEHASH = keccak256(\\\"AssetType(uint256 assetClass,bytes data)\\\");\\n\\n    bytes32 internal constant ASSET_TYPEHASH =\\n        keccak256(\\\"Asset(AssetType assetType,uint256 value)AssetType(uint256 assetClass,bytes data)\\\");\\n\\n    /// @notice Determine which side of a trade should bear the fee, based on the asset types.\\n    /// @param leftClass The asset class type of the left side of the trade.\\n    /// @param rightClass The asset class type of the right side of the trade.\\n    /// @return FeeSide representing which side should bear the fee, if any.\\n    function getFeeSide(AssetClass leftClass, AssetClass rightClass) internal pure returns (FeeSide) {\\n        if (leftClass == AssetClass.ERC20 && rightClass != AssetClass.ERC20) {\\n            return FeeSide.LEFT;\\n        }\\n        if (rightClass == AssetClass.ERC20 && leftClass != AssetClass.ERC20) {\\n            return FeeSide.RIGHT;\\n        }\\n        return FeeSide.NONE;\\n    }\\n\\n    /// @notice Check if two asset types match.\\n    /// @param leftType Asset type on the left side of a trade.\\n    /// @param rightType Asset type on the right side of a trade.\\n    /// @return AssetType representing the matched asset type.\\n    function matchAssets(\\n        AssetType calldata leftType,\\n        AssetType calldata rightType\\n    ) internal pure returns (AssetType memory) {\\n        AssetClass classLeft = leftType.assetClass;\\n        AssetClass classRight = rightType.assetClass;\\n\\n        require(classLeft != AssetClass.INVALID, \\\"invalid left asset class\\\");\\n        require(classRight != AssetClass.INVALID, \\\"invalid right asset class\\\");\\n        require(classLeft == classRight, \\\"assets don't match\\\");\\n\\n        bytes32 leftHash = keccak256(leftType.data);\\n        bytes32 rightHash = keccak256(rightType.data);\\n        require(leftHash == rightHash, \\\"assets don't match\\\");\\n\\n        return leftType;\\n    }\\n\\n    /// @notice Compute the hash of an asset type.\\n    /// @param assetType The asset type to hash.\\n    /// @return The hash of the asset type.\\n    function hash(AssetType memory assetType) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(ASSET_TYPE_TYPEHASH, assetType.assetClass, keccak256(assetType.data)));\\n    }\\n\\n    /// @notice Compute the hash of an asset.\\n    /// @param asset The asset to hash.\\n    /// @return The hash of the asset.\\n    function hash(Asset memory asset) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(ASSET_TYPEHASH, hash(asset.assetType), asset.value));\\n    }\\n\\n    /// @notice Decode the token details (address and tokenId) from an AssetType.\\n    /// @param assetType The asset type to decode.\\n    /// @return Address of the token\\n    /// @return Id of the token\\n    function decodeToken(AssetType memory assetType) internal pure returns (address, uint256) {\\n        return abi.decode(assetType.data, (address, uint256));\\n    }\\n\\n    /// @notice Decode the token address from an AssetType.\\n    /// @param assetType The asset type to decode.\\n    /// @return The address of the token.\\n    function decodeAddress(AssetType memory assetType) internal pure returns (address) {\\n        return abi.decode(assetType.data, (address));\\n    }\\n}\\n\",\"keccak256\":\"0xe23da99d5ce9a8129f0413a5f650e6a7c8d7a6a46b59fce546b8f19676d81fa2\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/marketplace/contracts/libraries/LibMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n/// @author The Sandbox\\n/// @title LibMath: A library for handling specific math operations.\\nlibrary LibMath {\\n    uint256 internal constant ACCEPTABLE_RELATIVE_ERROR = 1000;\\n\\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\\n    ///      Reverts if rounding error is >= 0.1%\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to calculate partial of.\\n    /// @return partialAmount value of target rounded down.\\n    function safeGetPartialAmountFloor(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (uint256 partialAmount) {\\n        if (isRoundingErrorFloor(numerator, denominator, target)) {\\n            revert(\\\"rounding error\\\");\\n        }\\n        partialAmount = (numerator * target) / (denominator);\\n    }\\n\\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to multiply with numerator/denominator.\\n    /// @return isError Rounding error is present.\\n    function isRoundingErrorFloor(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (bool isError) {\\n        if (denominator == 0) {\\n            revert(\\\"division by zero\\\");\\n        }\\n\\n        // The absolute rounding error is the difference between the rounded\\n        // value and the ideal value. The relative rounding error is the\\n        // absolute rounding error divided by the absolute value of the\\n        // ideal value. This is undefined when the ideal value is zero.\\n        //\\n        // The ideal value is `numerator * target / denominator`.\\n        // Let's call `numerator * target % denominator` the remainder.\\n        // The absolute error is `remainder / denominator`.\\n        //\\n        // When the ideal value is zero, we require the absolute error to\\n        // be zero. Fortunately, this is always the case. The ideal value is\\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\\n        // remainder and absolute error are also zero.\\n        if (target == 0 || numerator == 0) {\\n            return false;\\n        }\\n\\n        // Otherwise, we want the relative rounding error to be strictly\\n        // less than 0.1%.\\n        // The relative error is `remainder / (numerator * target)`.\\n        // We want the relative error less than 1 / 1000:\\n        //        remainder / (numerator * target)  <  1 / 1000\\n        // or equivalently:\\n        //        1000 * remainder  <  numerator * target\\n        // so we have a rounding error iff:\\n        //        1000 * remainder  >=  numerator * target\\n        uint256 remainder = mulmod(target, numerator, denominator);\\n        isError = remainder * ACCEPTABLE_RELATIVE_ERROR >= numerator * target;\\n    }\\n}\\n\",\"keccak256\":\"0xa5daa3df082d3f8ff705f9d21f6e7f9fa1caffdc53bd53001e6285c35c58f33a\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/marketplace/contracts/libraries/LibOrder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport {LibAsset} from \\\"./LibAsset.sol\\\";\\nimport {LibMath} from \\\"./LibMath.sol\\\";\\n\\n/// @author The Sandbox\\n/// @title Order Handling Library\\n/// @notice Provides tools for constructing, hashing, and validating orders.\\nlibrary LibOrder {\\n    bytes32 internal constant ORDER_TYPEHASH =\\n        keccak256(\\n            \\\"Order(address maker,Asset makeAsset,address taker,Asset takeAsset,uint256 salt,uint256 start,uint256 end)Asset(AssetType assetType,uint256 value)AssetType(uint256 assetClass,bytes data)\\\"\\n        );\\n\\n    /// @dev Represents the structure of an order.\\n    struct Order {\\n        address maker; // Address of the maker.\\n        LibAsset.Asset makeAsset; // Asset the maker is providing.\\n        address taker; // Address of the taker.\\n        LibAsset.Asset takeAsset; // Asset the taker is providing.\\n        uint256 salt; // Random number to ensure unique order hash.\\n        uint256 start; // Timestamp when the order becomes valid.\\n        uint256 end; // Timestamp when the order expires.\\n    }\\n\\n    /// @dev Represents the result of filling two orders.\\n    struct FillResult {\\n        uint256 leftValue; // Amount filled from the left order.\\n        uint256 rightValue; // Amount filled from the right order.\\n    }\\n\\n    /// @notice Computes the unique hash of an order.\\n    /// @param order The order data.\\n    /// @return The unique hash of the order.\\n    function hashKey(Order calldata order) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    order.maker,\\n                    LibAsset.hash(order.makeAsset.assetType),\\n                    LibAsset.hash(order.takeAsset.assetType),\\n                    order.salt\\n                )\\n            );\\n    }\\n\\n    /// @notice Computes the complete hash of an order, including domain-specific data.\\n    /// @param order The order data.\\n    /// @return The complete hash of the order.\\n    function hash(Order calldata order) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                // solhint-disable-next-line func-named-parameters\\n                abi.encode(\\n                    ORDER_TYPEHASH,\\n                    order.maker,\\n                    LibAsset.hash(order.makeAsset),\\n                    order.taker,\\n                    LibAsset.hash(order.takeAsset),\\n                    order.salt,\\n                    order.start,\\n                    order.end\\n                )\\n            );\\n    }\\n\\n    /// @notice Validates order time\\n    /// @param order Whose time we want to validate\\n    // solhint-disable not-rely-on-time\\n    // slither-disable-start timestamp\\n    function validateOrderTime(Order memory order) internal view {\\n        require(order.start == 0 || order.start < block.timestamp, \\\"Order start validation failed\\\");\\n        require(order.end == 0 || order.end > block.timestamp, \\\"Order end validation failed\\\");\\n    }\\n\\n    // slither-disable-end timestamp\\n    // solhint-enable not-rely-on-time\\n\\n    /// @notice Should return filled values\\n    /// @param leftOrder Left order\\n    /// @param rightOrder Right order\\n    /// @param leftOrderFill Current fill of the left order (0 if order is unfilled)\\n    /// @param rightOrderFill Current fill of the right order (0 if order is unfilled)\\n    /// @dev We have 3 cases, 1st: left order should be fully filled\\n    /// @dev 2nd: right order should be fully filled or 3d: both should be fully filled if required values are the same\\n    /// @return The fill result of both orders\\n    function fillOrder(\\n        LibOrder.Order calldata leftOrder,\\n        LibOrder.Order calldata rightOrder,\\n        uint256 leftOrderFill,\\n        uint256 rightOrderFill\\n    ) internal pure returns (FillResult memory) {\\n        (uint256 leftMakeValue, uint256 leftTakeValue) = calculateRemaining(leftOrder, leftOrderFill);\\n        (uint256 rightMakeValue, uint256 rightTakeValue) = calculateRemaining(rightOrder, rightOrderFill);\\n\\n        if (rightTakeValue > leftMakeValue) {\\n            return _fillLeft(leftMakeValue, leftTakeValue, rightOrder.makeAsset.value, rightOrder.takeAsset.value);\\n        }\\n        return _fillRight(leftOrder.makeAsset.value, leftOrder.takeAsset.value, rightMakeValue, rightTakeValue);\\n    }\\n\\n    /// @notice Computes the remaining fillable amount of an order.\\n    /// @param order The order to compute from.\\n    /// @param fill The amount of the order already filled.\\n    /// @return makeValue The remaining fillable amount from the maker's side.\\n    /// @return takeValue The remaining fillable amount from the taker's side.\\n    function calculateRemaining(\\n        LibOrder.Order calldata order,\\n        uint256 fill\\n    ) internal pure returns (uint256 makeValue, uint256 takeValue) {\\n        require(order.takeAsset.value >= fill, \\\"filling more than order permits\\\");\\n        takeValue = order.takeAsset.value - fill;\\n        makeValue = LibMath.safeGetPartialAmountFloor(order.makeAsset.value, order.takeAsset.value, takeValue);\\n    }\\n\\n    /// @notice Computes the fill values for a situation where the right order is expected to fill the left order.\\n    /// @param leftMakeValue The amount the left order maker wants to trade.\\n    /// @param leftTakeValue The amount the left order taker wants in return.\\n    /// @param rightMakeValue The amount the right order maker wants to trade.\\n    /// @param rightTakeValue The amount the right order taker wants in return.\\n    /// @return The filled amounts for both the left and right orders.\\n    function _fillRight(\\n        uint256 leftMakeValue,\\n        uint256 leftTakeValue,\\n        uint256 rightMakeValue,\\n        uint256 rightTakeValue\\n    ) internal pure returns (FillResult memory) {\\n        uint256 makerValue = LibMath.safeGetPartialAmountFloor(rightTakeValue, leftMakeValue, leftTakeValue);\\n        require(makerValue <= rightMakeValue, \\\"fillRight: unable to fill\\\");\\n        return FillResult(rightTakeValue, makerValue);\\n    }\\n\\n    /// @notice Computes the fill values for a situation where the left order is expected to fill the right order.\\n    /// @param leftMakeValue The amount the left order maker wants to trade.\\n    /// @param leftTakeValue The amount the left order taker wants in return.\\n    /// @param rightMakeValue The amount the right order maker wants to trade.\\n    /// @param rightTakeValue The amount the right order taker wants in return.\\n    /// @return The filled amounts for both the left and right orders.\\n    function _fillLeft(\\n        uint256 leftMakeValue,\\n        uint256 leftTakeValue,\\n        uint256 rightMakeValue,\\n        uint256 rightTakeValue\\n    ) internal pure returns (FillResult memory) {\\n        uint256 rightTake = LibMath.safeGetPartialAmountFloor(leftTakeValue, rightMakeValue, rightTakeValue);\\n        require(rightTake <= leftMakeValue, \\\"fillLeft: unable to fill\\\");\\n        return FillResult(leftMakeValue, leftTakeValue);\\n    }\\n}\\n\",\"keccak256\":\"0x988f3a3a2acacf4b28e7854fffae94684b2ac2ee8fb35b0c2118222ab3eb87b2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c6200002c565b620000266200002c565b620000ed565b600054610100900460ff1615620000995760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811614620000eb576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b61282280620000fd6000396000f3fe608060405234801561001057600080fd5b50600436106101825760003560e01c80639010d07c116100d8578063ca15c8731161008c578063e3c83e6511610066578063e3c83e6514610385578063eb7f494d146103ac578063f6224fa2146103bf57600080fd5b8063ca15c87314610357578063d547741f1461036a578063e1f1845f1461037d57600080fd5b8063940bdcc5116100bd578063940bdcc514610329578063a217fddf1461033c578063b45230ec1461034457600080fd5b80639010d07c146102c557806391d14854146102f057600080fd5b806332a1c22f1161013a5780637c4a13b1116101145780637c4a13b11461028c5780637d2111001461029f57806384b0196e146102aa57600080fd5b806332a1c22f1461023f57806336568abe1461025257806362972e231461026557600080fd5b80632513e2b91161016b5780632513e2b9146101e05780632f032edd146102075780632f2ff15d1461022a57600080fd5b806301ffc9a714610187578063248a9ca3146101af575b600080fd5b61019a610195366004611e2d565b6103c7565b60405190151581526020015b60405180910390f35b6101d26101bd366004611e6f565b60009081526099602052604090206001015490565b6040519081526020016101a6565b6101d27f2f049b28665abd79bc83d9aa564dba6b787ac439dba27b48e163a83befa9b26081565b61019a610215366004611e6f565b600090815260fd602052604090205460ff1690565b61023d610238366004611ead565b610423565b005b61023d61024d366004611f22565b61044d565b61023d610260366004611ead565b6104cc565b6101d27f839f6f26c78a3e8185d8004defa846bd7b66fef8def9b9f16459a6ebf250216281565b61023d61029a366004611e6f565b61055d565b60fe5460ff1661019a565b6102b2610571565b6040516101a69796959493929190611fde565b6102d86102d3366004612090565b610633565b6040516001600160a01b0390911681526020016101a6565b61019a6102fe366004611ead565b60009182526099602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61023d6103373660046120b2565b610652565b6101d2600081565b61023d61035236600461223b565b6107f2565b6101d2610365366004611e6f565b6109a9565b61023d610378366004611ead565b6109c0565b61023d6109e5565b6101d27f6278160ef7ca8a5eb8e5b274bcc0427c2cc7e12eee2a53c5989a1afb360f640481565b61023d6103ba366004611e6f565b6109fb565b61023d610a0f565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f5a05180f00000000000000000000000000000000000000000000000000000000148061041d575061041d82610a22565b92915050565b60008281526099602052604090206001015461043e81610ab9565b6104488383610ac3565b505050565b600061045881610ab9565b6104c585858080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808902828101820190935288825290935088925087918291850190849080828437600092019190915250610ae592505050565b5050505050565b6001600160a01b038116331461054f5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b6105598282610c0f565b5050565b600061056881610ab9565b61055982610c31565b6000606080600080600060606001546000801b1480156105915750600254155b6105dd5760405162461bcd60e51b815260206004820152601560248201527f4549503731323a20556e696e697469616c697a656400000000000000000000006044820152606401610546565b6105e5610c71565b6105ed610d03565b604080516000808252602082019092527f0f000000000000000000000000000000000000000000000000000000000000009b939a50919850469750309650945092509050565b600082815260cb6020526040812061064b9083610d12565b9392505050565b600054610100900460ff16158080156106725750600054600160ff909116105b8061068c5750303b15801561068c575060005460ff166001145b6106fe5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610546565b6000805460ff191660011790558015610721576000805461ff0019166101001790555b6107956040518060400160405280601781526020017f5468652053616e64626f78204d61726b6574706c6163650000000000000000008152506040518060400160405280600581526020017f312e302e30000000000000000000000000000000000000000000000000000000815250610d1e565b6107a3878787878787610dc3565b80156107e9576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b600061080160208501856122bb565b6001600160a01b0316036108575760405162461bcd60e51b815260206004820152600860248201527f6e6f206d616b65720000000000000000000000000000000000000000000000006044820152606401610546565b61086861086384612392565b610ee3565b61087d6108786020850185612442565b610fa3565b82608001356000036108f65761089660208401846122bb565b6001600160a01b0316816001600160a01b0316146104485760405162461bcd60e51b815260206004820152601660248201527f6d616b6572206973206e6f742074782073656e646572000000000000000000006044820152606401610546565b61090360208401846122bb565b6001600160a01b0316816001600160a01b03160361092057505050565b600061092b84611200565b9050610957610939826112e6565b8461094760208801886122bb565b6001600160a01b0316919061132e565b6109a35760405162461bcd60e51b815260206004820152601c60248201527f7369676e617475726520766572696669636174696f6e206572726f72000000006044820152606401610546565b50505050565b600081815260cb6020526040812061041d9061138f565b6000828152609960205260409020600101546109db81610ab9565b6104488383610c0f565b60006109f081610ab9565b6109f8611399565b50565b6000610a0681610ab9565b610559826113d1565b6000610a1a81610ab9565b6109f8611414565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061041d57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083161461041d565b6109f88133611449565b610acd82826114be565b600082815260cb602052604090206104489082611560565b8051825114610b365760405162461bcd60e51b815260206004820152601860248201527f4d69736d61746368656420696e707574206c656e6774687300000000000000006044820152606401610546565b60005b825181101561044857818181518110610b5457610b54612480565b60200260200101511515610b90848381518110610b7357610b73612480565b6020026020010151600090815260fd602052604090205460ff1690565b151514610bff57818181518110610ba957610ba9612480565b602002602001015115610bdd57610bd8838281518110610bcb57610bcb612480565b60200260200101516113d1565b610bff565b610bff838281518110610bf257610bf2612480565b6020026020010151610c31565b610c08816124ac565b9050610b39565b610c198282611575565b600082815260cb6020526040902061044890826115f8565b600081815260fd6020526040808220805460ff191690555182917f0826d4320d30163213509a51eb5dd049b754ecd74ff5b4168697471e488d397791a250565b606060038054610c80906124c6565b80601f0160208091040260200160405190810160405280929190818152602001828054610cac906124c6565b8015610cf95780601f10610cce57610100808354040283529160200191610cf9565b820191906000526020600020905b815481529060010190602001808311610cdc57829003601f168201915b5050505050905090565b606060048054610c80906124c6565b600061064b838361160d565b600054610100900460ff16610d9b5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610546565b6003610da78382612546565b506004610db48282612546565b50506000600181905560025550565b600054610100900460ff16610e405760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610546565b610e48611637565b610e53600087610ac3565b610ec085858080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808902828101820190935288825290935088925087918291850190849080828437600092019190915250610ae592505050565b8015610ed357610ece611399565b610edb565b610edb611414565b505050505050565b60a08101511580610ef75750428160a00151105b610f435760405162461bcd60e51b815260206004820152601d60248201527f4f726465722073746172742076616c69646174696f6e206661696c65640000006044820152606401610546565b60c08101511580610f575750428160c00151115b6109f85760405162461bcd60e51b815260206004820152601b60248201527f4f7264657220656e642076616c69646174696f6e206661696c656400000000006044820152606401610546565b6000610fc0610fb28380612442565b610fbb90612606565b6116b6565b90506001610fce8380612442565b610fdc906020810190612628565b6003811115610fed57610fed612612565b03611079576001600160a01b03811660009081527f5e9f46c6f3a37aed912e47cb012973583ff2f5b7e4db3839efae4d86e269a9ef602052604090205460ff166105595760405162461bcd60e51b815260206004820152601960248201527f7061796d656e7420746f6b656e206e6f7420616c6c6f776564000000000000006044820152606401610546565b60fe5460ff16611087575050565b7f6278160ef7ca8a5eb8e5b274bcc0427c2cc7e12eee2a53c5989a1afb360f640460005260fd6020527f6d4c51cb41eaeee2e980dbf36cf3178286ec811e2aa785091791a39e03bc997d5460ff16801561111857506001600160a01b03811660009081527f27a059ae9669021ef10a697fd7d5e365594d7c130d5e544605b6f0726c800eec602052604090205460ff165b806111af57507f2f049b28665abd79bc83d9aa564dba6b787ac439dba27b48e163a83befa9b26060005260fd6020527f51101be588ad657566d25c6263ea6c4d7bdd08268898b096b27029c5fe9606525460ff1680156111af57506001600160a01b03811660009081527f51385dcb82e028c1f1d2026bfd3c761e37e44b58a46fec9151abc8352b81cac3602052604090205460ff165b156111b8575050565b60405162461bcd60e51b815260206004820152600b60248201527f6e6f7420616c6c6f7765640000000000000000000000000000000000000000006044820152606401610546565b60007fb45f699a9d66ae9f6815d4c26a3eec190eb66c90f1300a6acc292fcc127c3a6c61123060208401846122bb565b61124e6112406020860186612442565b61124990612643565b6116d0565b61125e60608601604087016122bb565b61126e6112406060880188612442565b6040805160208101969096526001600160a01b0394851690860152606085019290925290911660808084019190915260a08084019290925284013560c0808401919091529084013560e0830152830135610100820152610120015b604051602081830303815290604052805190602001209050919050565b600061041d6112f3611726565b836040517f19010000000000000000000000000000000000000000000000000000000000008152600281019290925260228201526042902090565b600080600061133d8585611735565b9092509050600081600481111561135657611356612612565b1480156113745750856001600160a01b0316826001600160a01b0316145b80611385575061138586868661177a565b9695505050505050565b600061041d825490565b60fe805460ff191660011790556040517fb8f079825ac54aa2427b0dd7633c0a9555187c371bc772fb3be9fb87cc876b0790600090a1565b600081815260fd6020526040808220805460ff191660011790555182917fc3bedfde6bf09c48a8f395ea5988cda5b69f381a42e3c9be93a136c51b32dc6b91a250565b60fe805460ff191690556040517fd3681855fd5e456dde1e3776a9be32bb29fab90b31bba9fb52bcf27a9bcb444f90600090a1565b60008281526099602090815260408083206001600160a01b038516845290915290205460ff166105595761147c816118ac565b6114878360206118be565b60405160200161149892919061264f565b60408051601f198184030181529082905262461bcd60e51b8252610546916004016126d0565b60008281526099602090815260408083206001600160a01b038516845290915290205460ff166105595760008281526099602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561151c3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600061064b836001600160a01b038416611ae7565b60008281526099602090815260408083206001600160a01b038516845290915290205460ff16156105595760008281526099602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600061064b836001600160a01b038416611b36565b600082600001828154811061162457611624612480565b9060005260206000200154905092915050565b600054610100900460ff166116b45760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610546565b565b6000816020015180602001905181019061041d91906126e3565b60007fb3dadb929e65125a0302b36e16e3b077edea8c07de20fe04795776ed6bd3bb596117008360000151611c29565b6020808501516040516112c9949392019283526020830191909152604082015260600190565b6000611730611c6b565b905090565b600080825160410361176b5760208301516040840151606085015160001a61175f87828585611cdf565b94509450505050611773565b506000905060025b9250929050565b6000806000856001600160a01b0316631626ba7e60e01b86866040516024016117a4929190612700565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252905161180f9190612721565b600060405180830381855afa9150503d806000811461184a576040519150601f19603f3d011682016040523d82523d6000602084013e61184f565b606091505b509150915081801561186357506020815110155b8015611385575080517f1626ba7e00000000000000000000000000000000000000000000000000000000906118a19083016020908101908401612733565b149695505050505050565b606061041d6001600160a01b03831660145b606060006118cd83600261274c565b6118d8906002612763565b67ffffffffffffffff8111156118f0576118f061214c565b6040519080825280601f01601f19166020018201604052801561191a576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061195157611951612480565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106119b4576119b4612480565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006119f084600261274c565b6119fb906001612763565b90505b6001811115611a98577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611a3c57611a3c612480565b1a60f81b828281518110611a5257611a52612480565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93611a9181612776565b90506119fe565b50831561064b5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610546565b6000818152600183016020526040812054611b2e5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561041d565b50600061041d565b60008181526001830160205260408120548015611c1f576000611b5a60018361278d565b8554909150600090611b6e9060019061278d565b9050818114611bd3576000866000018281548110611b8e57611b8e612480565b9060005260206000200154905080876000018481548110611bb157611bb1612480565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611be457611be46127a0565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061041d565b600091505061041d565b80516020808301518051908201206040516000936112c9937f75aacb2727a36600741802d07994792d9d768ee841822bca87180d320cea9912939192016127b6565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611c96611da3565b611c9e611dfc565b60408051602081019490945283019190915260608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611d165750600090506003611d9a565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611d6a573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611d9357600060019250925050611d9a565b9150600090505b94509492505050565b600080611dae610c71565b805190915015611dc5578051602090910120919050565b6001548015611dd45792915050565b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4709250505090565b600080611e07610d03565b805190915015611e1e578051602090910120919050565b6002548015611dd45792915050565b600060208284031215611e3f57600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461064b57600080fd5b600060208284031215611e8157600080fd5b5035919050565b6001600160a01b03811681146109f857600080fd5b8035611ea881611e88565b919050565b60008060408385031215611ec057600080fd5b823591506020830135611ed281611e88565b809150509250929050565b60008083601f840112611eef57600080fd5b50813567ffffffffffffffff811115611f0757600080fd5b6020830191508360208260051b850101111561177357600080fd5b60008060008060408587031215611f3857600080fd5b843567ffffffffffffffff80821115611f5057600080fd5b611f5c88838901611edd565b90965094506020870135915080821115611f7557600080fd5b50611f8287828801611edd565b95989497509550505050565b60005b83811015611fa9578181015183820152602001611f91565b50506000910152565b60008151808452611fca816020860160208601611f8e565b601f01601f19169290920160200192915050565b7fff00000000000000000000000000000000000000000000000000000000000000881681526000602060e08184015261201a60e084018a611fb2565b838103604085015261202c818a611fb2565b606085018990526001600160a01b038816608086015260a0850187905284810360c0860152855180825283870192509083019060005b8181101561207e57835183529284019291840191600101612062565b50909c9b505050505050505050505050565b600080604083850312156120a357600080fd5b50508035926020909101359150565b600080600080600080608087890312156120cb57600080fd5b86356120d681611e88565b9550602087013567ffffffffffffffff808211156120f357600080fd5b6120ff8a838b01611edd565b9097509550604089013591508082111561211857600080fd5b5061212589828a01611edd565b9094509250506060870135801515811461213e57600080fd5b809150509295509295509295565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156121855761218561214c565b60405290565b60405160e0810167ffffffffffffffff811182821017156121855761218561214c565b600082601f8301126121bf57600080fd5b813567ffffffffffffffff808211156121da576121da61214c565b604051601f8301601f19908116603f011681019082821181831017156122025761220261214c565b8160405283815286602085880101111561221b57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121561225057600080fd5b833567ffffffffffffffff8082111561226857600080fd5b9085019060e0828803121561227c57600080fd5b9093506020850135908082111561229257600080fd5b5061229f868287016121ae565b92505060408401356122b081611e88565b809150509250925092565b6000602082840312156122cd57600080fd5b813561064b81611e88565b803560048110611ea857600080fd5b6000604082840312156122f957600080fd5b612301612162565b905061230c826122d8565b8152602082013567ffffffffffffffff81111561232857600080fd5b612334848285016121ae565b60208301525092915050565b60006040828403121561235257600080fd5b61235a612162565b9050813567ffffffffffffffff81111561237357600080fd5b61237f848285016122e7565b8252506020820135602082015292915050565b600060e082360312156123a457600080fd5b6123ac61218b565b6123b583611e9d565b8152602083013567ffffffffffffffff808211156123d257600080fd5b6123de36838701612340565b60208401526123ef60408601611e9d565b6040840152606085013591508082111561240857600080fd5b5061241536828601612340565b6060830152506080830135608082015260a083013560a082015260c083013560c082015280915050919050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc183360301811261247657600080fd5b9190910192915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982036124bf576124bf612496565b5060010190565b600181811c908216806124da57607f821691505b6020821081036124fa57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561044857600081815260208120601f850160051c810160208610156125275750805b601f850160051c820191505b81811015610edb57828155600101612533565b815167ffffffffffffffff8111156125605761256061214c565b6125748161256e84546124c6565b84612500565b602080601f8311600181146125a957600084156125915750858301515b600019600386901b1c1916600185901b178555610edb565b600085815260208120601f198616915b828110156125d8578886015182559484019460019091019084016125b9565b50858210156125f65787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600061041d36836122e7565b634e487b7160e01b600052602160045260246000fd5b60006020828403121561263a57600080fd5b61064b826122d8565b600061041d3683612340565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612687816017850160208801611f8e565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516126c4816028840160208801611f8e565b01602801949350505050565b60208152600061064b6020830184611fb2565b6000602082840312156126f557600080fd5b815161064b81611e88565b8281526040602082015260006127196040830184611fb2565b949350505050565b60008251612476818460208701611f8e565b60006020828403121561274557600080fd5b5051919050565b808202811582820484141761041d5761041d612496565b8082018082111561041d5761041d612496565b60008161278557612785612496565b506000190190565b8181038181111561041d5761041d612496565b634e487b7160e01b600052603160045260246000fd5b83815260608101600484106127db57634e487b7160e01b600052602160045260246000fd5b60208201939093526040015291905056fea2646970667358221220238bc3bb4cb92efedb9521fb94cbaf8fde2fe49bf33a8553af0ef5be26ccb00d64736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101825760003560e01c80639010d07c116100d8578063ca15c8731161008c578063e3c83e6511610066578063e3c83e6514610385578063eb7f494d146103ac578063f6224fa2146103bf57600080fd5b8063ca15c87314610357578063d547741f1461036a578063e1f1845f1461037d57600080fd5b8063940bdcc5116100bd578063940bdcc514610329578063a217fddf1461033c578063b45230ec1461034457600080fd5b80639010d07c146102c557806391d14854146102f057600080fd5b806332a1c22f1161013a5780637c4a13b1116101145780637c4a13b11461028c5780637d2111001461029f57806384b0196e146102aa57600080fd5b806332a1c22f1461023f57806336568abe1461025257806362972e231461026557600080fd5b80632513e2b91161016b5780632513e2b9146101e05780632f032edd146102075780632f2ff15d1461022a57600080fd5b806301ffc9a714610187578063248a9ca3146101af575b600080fd5b61019a610195366004611e2d565b6103c7565b60405190151581526020015b60405180910390f35b6101d26101bd366004611e6f565b60009081526099602052604090206001015490565b6040519081526020016101a6565b6101d27f2f049b28665abd79bc83d9aa564dba6b787ac439dba27b48e163a83befa9b26081565b61019a610215366004611e6f565b600090815260fd602052604090205460ff1690565b61023d610238366004611ead565b610423565b005b61023d61024d366004611f22565b61044d565b61023d610260366004611ead565b6104cc565b6101d27f839f6f26c78a3e8185d8004defa846bd7b66fef8def9b9f16459a6ebf250216281565b61023d61029a366004611e6f565b61055d565b60fe5460ff1661019a565b6102b2610571565b6040516101a69796959493929190611fde565b6102d86102d3366004612090565b610633565b6040516001600160a01b0390911681526020016101a6565b61019a6102fe366004611ead565b60009182526099602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61023d6103373660046120b2565b610652565b6101d2600081565b61023d61035236600461223b565b6107f2565b6101d2610365366004611e6f565b6109a9565b61023d610378366004611ead565b6109c0565b61023d6109e5565b6101d27f6278160ef7ca8a5eb8e5b274bcc0427c2cc7e12eee2a53c5989a1afb360f640481565b61023d6103ba366004611e6f565b6109fb565b61023d610a0f565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f5a05180f00000000000000000000000000000000000000000000000000000000148061041d575061041d82610a22565b92915050565b60008281526099602052604090206001015461043e81610ab9565b6104488383610ac3565b505050565b600061045881610ab9565b6104c585858080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808902828101820190935288825290935088925087918291850190849080828437600092019190915250610ae592505050565b5050505050565b6001600160a01b038116331461054f5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b6105598282610c0f565b5050565b600061056881610ab9565b61055982610c31565b6000606080600080600060606001546000801b1480156105915750600254155b6105dd5760405162461bcd60e51b815260206004820152601560248201527f4549503731323a20556e696e697469616c697a656400000000000000000000006044820152606401610546565b6105e5610c71565b6105ed610d03565b604080516000808252602082019092527f0f000000000000000000000000000000000000000000000000000000000000009b939a50919850469750309650945092509050565b600082815260cb6020526040812061064b9083610d12565b9392505050565b600054610100900460ff16158080156106725750600054600160ff909116105b8061068c5750303b15801561068c575060005460ff166001145b6106fe5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610546565b6000805460ff191660011790558015610721576000805461ff0019166101001790555b6107956040518060400160405280601781526020017f5468652053616e64626f78204d61726b6574706c6163650000000000000000008152506040518060400160405280600581526020017f312e302e30000000000000000000000000000000000000000000000000000000815250610d1e565b6107a3878787878787610dc3565b80156107e9576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b600061080160208501856122bb565b6001600160a01b0316036108575760405162461bcd60e51b815260206004820152600860248201527f6e6f206d616b65720000000000000000000000000000000000000000000000006044820152606401610546565b61086861086384612392565b610ee3565b61087d6108786020850185612442565b610fa3565b82608001356000036108f65761089660208401846122bb565b6001600160a01b0316816001600160a01b0316146104485760405162461bcd60e51b815260206004820152601660248201527f6d616b6572206973206e6f742074782073656e646572000000000000000000006044820152606401610546565b61090360208401846122bb565b6001600160a01b0316816001600160a01b03160361092057505050565b600061092b84611200565b9050610957610939826112e6565b8461094760208801886122bb565b6001600160a01b0316919061132e565b6109a35760405162461bcd60e51b815260206004820152601c60248201527f7369676e617475726520766572696669636174696f6e206572726f72000000006044820152606401610546565b50505050565b600081815260cb6020526040812061041d9061138f565b6000828152609960205260409020600101546109db81610ab9565b6104488383610c0f565b60006109f081610ab9565b6109f8611399565b50565b6000610a0681610ab9565b610559826113d1565b6000610a1a81610ab9565b6109f8611414565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061041d57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083161461041d565b6109f88133611449565b610acd82826114be565b600082815260cb602052604090206104489082611560565b8051825114610b365760405162461bcd60e51b815260206004820152601860248201527f4d69736d61746368656420696e707574206c656e6774687300000000000000006044820152606401610546565b60005b825181101561044857818181518110610b5457610b54612480565b60200260200101511515610b90848381518110610b7357610b73612480565b6020026020010151600090815260fd602052604090205460ff1690565b151514610bff57818181518110610ba957610ba9612480565b602002602001015115610bdd57610bd8838281518110610bcb57610bcb612480565b60200260200101516113d1565b610bff565b610bff838281518110610bf257610bf2612480565b6020026020010151610c31565b610c08816124ac565b9050610b39565b610c198282611575565b600082815260cb6020526040902061044890826115f8565b600081815260fd6020526040808220805460ff191690555182917f0826d4320d30163213509a51eb5dd049b754ecd74ff5b4168697471e488d397791a250565b606060038054610c80906124c6565b80601f0160208091040260200160405190810160405280929190818152602001828054610cac906124c6565b8015610cf95780601f10610cce57610100808354040283529160200191610cf9565b820191906000526020600020905b815481529060010190602001808311610cdc57829003601f168201915b5050505050905090565b606060048054610c80906124c6565b600061064b838361160d565b600054610100900460ff16610d9b5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610546565b6003610da78382612546565b506004610db48282612546565b50506000600181905560025550565b600054610100900460ff16610e405760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610546565b610e48611637565b610e53600087610ac3565b610ec085858080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808902828101820190935288825290935088925087918291850190849080828437600092019190915250610ae592505050565b8015610ed357610ece611399565b610edb565b610edb611414565b505050505050565b60a08101511580610ef75750428160a00151105b610f435760405162461bcd60e51b815260206004820152601d60248201527f4f726465722073746172742076616c69646174696f6e206661696c65640000006044820152606401610546565b60c08101511580610f575750428160c00151115b6109f85760405162461bcd60e51b815260206004820152601b60248201527f4f7264657220656e642076616c69646174696f6e206661696c656400000000006044820152606401610546565b6000610fc0610fb28380612442565b610fbb90612606565b6116b6565b90506001610fce8380612442565b610fdc906020810190612628565b6003811115610fed57610fed612612565b03611079576001600160a01b03811660009081527f5e9f46c6f3a37aed912e47cb012973583ff2f5b7e4db3839efae4d86e269a9ef602052604090205460ff166105595760405162461bcd60e51b815260206004820152601960248201527f7061796d656e7420746f6b656e206e6f7420616c6c6f776564000000000000006044820152606401610546565b60fe5460ff16611087575050565b7f6278160ef7ca8a5eb8e5b274bcc0427c2cc7e12eee2a53c5989a1afb360f640460005260fd6020527f6d4c51cb41eaeee2e980dbf36cf3178286ec811e2aa785091791a39e03bc997d5460ff16801561111857506001600160a01b03811660009081527f27a059ae9669021ef10a697fd7d5e365594d7c130d5e544605b6f0726c800eec602052604090205460ff165b806111af57507f2f049b28665abd79bc83d9aa564dba6b787ac439dba27b48e163a83befa9b26060005260fd6020527f51101be588ad657566d25c6263ea6c4d7bdd08268898b096b27029c5fe9606525460ff1680156111af57506001600160a01b03811660009081527f51385dcb82e028c1f1d2026bfd3c761e37e44b58a46fec9151abc8352b81cac3602052604090205460ff165b156111b8575050565b60405162461bcd60e51b815260206004820152600b60248201527f6e6f7420616c6c6f7765640000000000000000000000000000000000000000006044820152606401610546565b60007fb45f699a9d66ae9f6815d4c26a3eec190eb66c90f1300a6acc292fcc127c3a6c61123060208401846122bb565b61124e6112406020860186612442565b61124990612643565b6116d0565b61125e60608601604087016122bb565b61126e6112406060880188612442565b6040805160208101969096526001600160a01b0394851690860152606085019290925290911660808084019190915260a08084019290925284013560c0808401919091529084013560e0830152830135610100820152610120015b604051602081830303815290604052805190602001209050919050565b600061041d6112f3611726565b836040517f19010000000000000000000000000000000000000000000000000000000000008152600281019290925260228201526042902090565b600080600061133d8585611735565b9092509050600081600481111561135657611356612612565b1480156113745750856001600160a01b0316826001600160a01b0316145b80611385575061138586868661177a565b9695505050505050565b600061041d825490565b60fe805460ff191660011790556040517fb8f079825ac54aa2427b0dd7633c0a9555187c371bc772fb3be9fb87cc876b0790600090a1565b600081815260fd6020526040808220805460ff191660011790555182917fc3bedfde6bf09c48a8f395ea5988cda5b69f381a42e3c9be93a136c51b32dc6b91a250565b60fe805460ff191690556040517fd3681855fd5e456dde1e3776a9be32bb29fab90b31bba9fb52bcf27a9bcb444f90600090a1565b60008281526099602090815260408083206001600160a01b038516845290915290205460ff166105595761147c816118ac565b6114878360206118be565b60405160200161149892919061264f565b60408051601f198184030181529082905262461bcd60e51b8252610546916004016126d0565b60008281526099602090815260408083206001600160a01b038516845290915290205460ff166105595760008281526099602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561151c3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600061064b836001600160a01b038416611ae7565b60008281526099602090815260408083206001600160a01b038516845290915290205460ff16156105595760008281526099602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600061064b836001600160a01b038416611b36565b600082600001828154811061162457611624612480565b9060005260206000200154905092915050565b600054610100900460ff166116b45760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610546565b565b6000816020015180602001905181019061041d91906126e3565b60007fb3dadb929e65125a0302b36e16e3b077edea8c07de20fe04795776ed6bd3bb596117008360000151611c29565b6020808501516040516112c9949392019283526020830191909152604082015260600190565b6000611730611c6b565b905090565b600080825160410361176b5760208301516040840151606085015160001a61175f87828585611cdf565b94509450505050611773565b506000905060025b9250929050565b6000806000856001600160a01b0316631626ba7e60e01b86866040516024016117a4929190612700565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252905161180f9190612721565b600060405180830381855afa9150503d806000811461184a576040519150601f19603f3d011682016040523d82523d6000602084013e61184f565b606091505b509150915081801561186357506020815110155b8015611385575080517f1626ba7e00000000000000000000000000000000000000000000000000000000906118a19083016020908101908401612733565b149695505050505050565b606061041d6001600160a01b03831660145b606060006118cd83600261274c565b6118d8906002612763565b67ffffffffffffffff8111156118f0576118f061214c565b6040519080825280601f01601f19166020018201604052801561191a576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061195157611951612480565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106119b4576119b4612480565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006119f084600261274c565b6119fb906001612763565b90505b6001811115611a98577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611a3c57611a3c612480565b1a60f81b828281518110611a5257611a52612480565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93611a9181612776565b90506119fe565b50831561064b5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610546565b6000818152600183016020526040812054611b2e5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561041d565b50600061041d565b60008181526001830160205260408120548015611c1f576000611b5a60018361278d565b8554909150600090611b6e9060019061278d565b9050818114611bd3576000866000018281548110611b8e57611b8e612480565b9060005260206000200154905080876000018481548110611bb157611bb1612480565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611be457611be46127a0565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061041d565b600091505061041d565b80516020808301518051908201206040516000936112c9937f75aacb2727a36600741802d07994792d9d768ee841822bca87180d320cea9912939192016127b6565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611c96611da3565b611c9e611dfc565b60408051602081019490945283019190915260608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611d165750600090506003611d9a565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611d6a573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611d9357600060019250925050611d9a565b9150600090505b94509492505050565b600080611dae610c71565b805190915015611dc5578051602090910120919050565b6001548015611dd45792915050565b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4709250505090565b600080611e07610d03565b805190915015611e1e578051602090910120919050565b6002548015611dd45792915050565b600060208284031215611e3f57600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461064b57600080fd5b600060208284031215611e8157600080fd5b5035919050565b6001600160a01b03811681146109f857600080fd5b8035611ea881611e88565b919050565b60008060408385031215611ec057600080fd5b823591506020830135611ed281611e88565b809150509250929050565b60008083601f840112611eef57600080fd5b50813567ffffffffffffffff811115611f0757600080fd5b6020830191508360208260051b850101111561177357600080fd5b60008060008060408587031215611f3857600080fd5b843567ffffffffffffffff80821115611f5057600080fd5b611f5c88838901611edd565b90965094506020870135915080821115611f7557600080fd5b50611f8287828801611edd565b95989497509550505050565b60005b83811015611fa9578181015183820152602001611f91565b50506000910152565b60008151808452611fca816020860160208601611f8e565b601f01601f19169290920160200192915050565b7fff00000000000000000000000000000000000000000000000000000000000000881681526000602060e08184015261201a60e084018a611fb2565b838103604085015261202c818a611fb2565b606085018990526001600160a01b038816608086015260a0850187905284810360c0860152855180825283870192509083019060005b8181101561207e57835183529284019291840191600101612062565b50909c9b505050505050505050505050565b600080604083850312156120a357600080fd5b50508035926020909101359150565b600080600080600080608087890312156120cb57600080fd5b86356120d681611e88565b9550602087013567ffffffffffffffff808211156120f357600080fd5b6120ff8a838b01611edd565b9097509550604089013591508082111561211857600080fd5b5061212589828a01611edd565b9094509250506060870135801515811461213e57600080fd5b809150509295509295509295565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156121855761218561214c565b60405290565b60405160e0810167ffffffffffffffff811182821017156121855761218561214c565b600082601f8301126121bf57600080fd5b813567ffffffffffffffff808211156121da576121da61214c565b604051601f8301601f19908116603f011681019082821181831017156122025761220261214c565b8160405283815286602085880101111561221b57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121561225057600080fd5b833567ffffffffffffffff8082111561226857600080fd5b9085019060e0828803121561227c57600080fd5b9093506020850135908082111561229257600080fd5b5061229f868287016121ae565b92505060408401356122b081611e88565b809150509250925092565b6000602082840312156122cd57600080fd5b813561064b81611e88565b803560048110611ea857600080fd5b6000604082840312156122f957600080fd5b612301612162565b905061230c826122d8565b8152602082013567ffffffffffffffff81111561232857600080fd5b612334848285016121ae565b60208301525092915050565b60006040828403121561235257600080fd5b61235a612162565b9050813567ffffffffffffffff81111561237357600080fd5b61237f848285016122e7565b8252506020820135602082015292915050565b600060e082360312156123a457600080fd5b6123ac61218b565b6123b583611e9d565b8152602083013567ffffffffffffffff808211156123d257600080fd5b6123de36838701612340565b60208401526123ef60408601611e9d565b6040840152606085013591508082111561240857600080fd5b5061241536828601612340565b6060830152506080830135608082015260a083013560a082015260c083013560c082015280915050919050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc183360301811261247657600080fd5b9190910192915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982036124bf576124bf612496565b5060010190565b600181811c908216806124da57607f821691505b6020821081036124fa57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561044857600081815260208120601f850160051c810160208610156125275750805b601f850160051c820191505b81811015610edb57828155600101612533565b815167ffffffffffffffff8111156125605761256061214c565b6125748161256e84546124c6565b84612500565b602080601f8311600181146125a957600084156125915750858301515b600019600386901b1c1916600185901b178555610edb565b600085815260208120601f198616915b828110156125d8578886015182559484019460019091019084016125b9565b50858210156125f65787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600061041d36836122e7565b634e487b7160e01b600052602160045260246000fd5b60006020828403121561263a57600080fd5b61064b826122d8565b600061041d3683612340565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612687816017850160208801611f8e565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516126c4816028840160208801611f8e565b01602801949350505050565b60208152600061064b6020830184611fb2565b6000602082840312156126f557600080fd5b815161064b81611e88565b8281526040602082015260006127196040830184611fb2565b949350505050565b60008251612476818460208701611f8e565b60006020828403121561274557600080fd5b5051919050565b808202811582820484141761041d5761041d612496565b8082018082111561041d5761041d612496565b60008161278557612785612496565b506000190190565b8181038181111561041d5761041d612496565b634e487b7160e01b600052603160045260246000fd5b83815260608101600484106127db57634e487b7160e01b600052602160045260246000fd5b60208201939093526040015291905056fea2646970667358221220238bc3bb4cb92efedb9521fb94cbaf8fde2fe49bf33a8553af0ef5be26ccb00d64736f6c63430008130033",
  "devdoc": {
    "author": "The Sandbox",
    "events": {
      "EIP712DomainChanged()": {
        "details": "MAY be emitted to signal that the domain could have changed."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleEnabled(bytes32)": {
        "params": {
          "role": "Roles whose permissions were enabled"
        }
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor",
        "details": "Internal mechanism to protect the implementation contract from being initialized."
      },
      "disableRole(bytes32)": {
        "params": {
          "role": "Identifier of the role to be disabled."
        }
      },
      "eip712Domain()": {
        "details": "See {EIP-5267}. _Available since v4.9._"
      },
      "enableRole(bytes32)": {
        "params": {
          "role": "Identifier of the role to be enabled."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,bytes32[],bool[],bool)": {
        "params": {
          "admin": "The admin address for the OrderValidator and Whitelist.",
          "permissions": "Array of permissions associated with each role.",
          "roles": "Array of role identifiers for the Whitelist contract.",
          "whitelistsEnabled": "Boolean to indicate if whitelist functionality is enabled."
        }
      },
      "isRoleEnabled(bytes32)": {
        "params": {
          "role": "Identifier of the role."
        },
        "returns": {
          "_0": "True if the role is enabled, false otherwise."
        }
      },
      "isWhitelistsEnabled()": {
        "returns": {
          "_0": "True if whitelists are active, false otherwise."
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setRolesEnabled(bytes32[],bool[])": {
        "params": {
          "permissions": "List of booleans indicating the desired status of each role.",
          "roles": "List of role identifiers."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "validate((address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes,address)": {
        "params": {
          "order": "The order details to be validated.",
          "sender": "Address of the order sender.",
          "signature": "The signature associated with the order."
        }
      }
    },
    "title": "OrderValidator",
    "version": 1
  },
  "userdoc": {
    "events": {
      "RoleDisabled(bytes32)": {
        "notice": "Emitted when a specific role gets disabled."
      },
      "RoleEnabled(bytes32)": {
        "notice": "Emitted when a specific role gets enabled."
      },
      "WhitelistsDisabled()": {
        "notice": "Emitted when all non-ERC20 tokens are allowed in the market."
      },
      "WhitelistsEnabled()": {
        "notice": "Emitted when only non-ERC20 tokens that are whitelisted can be allowed."
      }
    },
    "kind": "user",
    "methods": {
      "ERC20_ROLE()": {
        "notice": "Role for ERC20 tokens, enabled all times"
      },
      "PARTNER_ROLE()": {
        "notice": "Role for partner tokens"
      },
      "TSB_ROLE()": {
        "notice": "Role for The Sandbox tokens"
      },
      "disableRole(bytes32)": {
        "notice": "Disable a given role."
      },
      "disableWhitelists()": {
        "notice": "Deactivate whitelists for all non-ERC20 tokens."
      },
      "enableRole(bytes32)": {
        "notice": "Enable a given role."
      },
      "enableWhitelists()": {
        "notice": "Activate whitelists for all non-ERC20 tokens."
      },
      "initialize(address,bytes32[],bool[],bool)": {
        "notice": "Initializes the OrderValidator contract."
      },
      "isRoleEnabled(bytes32)": {
        "notice": "Query the status of a given role."
      },
      "isWhitelistsEnabled()": {
        "notice": "Check the status of the whitelist functionality."
      },
      "setRolesEnabled(bytes32[],bool[])": {
        "notice": "Enables or disables specific roles."
      },
      "validate((address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes,address)": {
        "notice": "Validates the given order."
      }
    },
    "notice": "Contract for order validation. It validates orders and contains a whitelist of tokens.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 786,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/OrderValidator.sol:OrderValidator",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 789,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/OrderValidator.sol:OrderValidator",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2799,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/OrderValidator.sol:OrderValidator",
        "label": "_hashedName",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 2802,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/OrderValidator.sol:OrderValidator",
        "label": "_hashedVersion",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 2804,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/OrderValidator.sol:OrderValidator",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 2806,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/OrderValidator.sol:OrderValidator",
        "label": "_version",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 3064,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/OrderValidator.sol:OrderValidator",
        "label": "__gap",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 2184,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/OrderValidator.sol:OrderValidator",
        "label": "__gap",
        "offset": 0,
        "slot": "53",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3405,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/OrderValidator.sol:OrderValidator",
        "label": "__gap",
        "offset": 0,
        "slot": "103",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 201,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/OrderValidator.sol:OrderValidator",
        "label": "_roles",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)196_storage)"
      },
      {
        "astId": 508,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/OrderValidator.sol:OrderValidator",
        "label": "__gap",
        "offset": 0,
        "slot": "154",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 49,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/OrderValidator.sol:OrderValidator",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)4715_storage)"
      },
      {
        "astId": 171,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/OrderValidator.sol:OrderValidator",
        "label": "__gap",
        "offset": 0,
        "slot": "204",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8043,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/OrderValidator.sol:OrderValidator",
        "label": "_rolesEnabled",
        "offset": 0,
        "slot": "253",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 8046,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/OrderValidator.sol:OrderValidator",
        "label": "_whitelistsEnabled",
        "offset": 0,
        "slot": "254",
        "type": "t_bool"
      },
      {
        "astId": 8325,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/OrderValidator.sol:OrderValidator",
        "label": "__gap",
        "offset": 0,
        "slot": "255",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 6403,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/OrderValidator.sol:OrderValidator",
        "label": "__gap",
        "offset": 0,
        "slot": "305",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)4715_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)4715_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)196_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)196_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)4715_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 4714,
            "contract": "@sandbox-smart-contracts/marketplace/contracts/OrderValidator.sol:OrderValidator",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)4400_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)196_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 193,
            "contract": "@sandbox-smart-contracts/marketplace/contracts/OrderValidator.sol:OrderValidator",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 195,
            "contract": "@sandbox-smart-contracts/marketplace/contracts/OrderValidator.sol:OrderValidator",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)4400_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 4395,
            "contract": "@sandbox-smart-contracts/marketplace/contracts/OrderValidator.sol:OrderValidator",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4399,
            "contract": "@sandbox-smart-contracts/marketplace/contracts/OrderValidator.sol:OrderValidator",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}