{
  "address": "0x63c11e0fDD11Bfe8c2525Fa4002D3b91C7954BaA",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "AlreadyMinted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC721IncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC721InsufficientApproval",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidOperator",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC721NonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidArgument",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        }
      ],
      "name": "InvalidCoordinates",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        }
      ],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAdmin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OperatorNotAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "subscriptionOrRegistrant",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "subscribe",
          "type": "bool"
        }
      ],
      "name": "ContractRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "metadataRegistry",
          "type": "address"
        }
      ],
      "name": "MetadataRegistrySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "Minter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IOperatorFilterRegistry",
          "name": "registry",
          "type": "address"
        }
      ],
      "name": "OperatorRegistrySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "royaltyManager",
          "type": "address"
        }
      ],
      "name": "RoyaltyManagerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "superOperator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "SuperOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newForwarder",
          "type": "address"
        }
      ],
      "name": "TrustedForwarderSet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approveFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "batchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "sizes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "xs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ys",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "batchTransferQuad",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "changeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getMetadata",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMetadataRegistry",
      "outputs": [
        {
          "internalType": "contract ILandMetadataRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getNeighborhoodId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getOwnerData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRoyaltyManager",
      "outputs": [
        {
          "internalType": "contract IRoyaltyManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "height",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "isMinter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isPremium",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "superOperator",
          "type": "address"
        }
      ],
      "name": "isSuperOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mintAndTransferQuad",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mintQuad",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operatorFilterRegistry",
      "outputs": [
        {
          "internalType": "contract IOperatorFilterRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "subscriptionOrRegistrantToCopy",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "subscribe",
          "type": "bool"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAllFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "metadataRegistry",
          "type": "address"
        }
      ],
      "name": "setMetadataRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOperatorFilterRegistry",
          "name": "registry",
          "type": "address"
        }
      ],
      "name": "setOperatorRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "royaltyManager",
          "type": "address"
        }
      ],
      "name": "setRoyaltyManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "superOperator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setSuperOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "transferQuad",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "width",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x4b2d923ca20d9ecdc399e9c0ca7cbef43e9370ae129b0d5c8ac837d0a43e545f",
  "receipt": {
    "to": null,
    "from": "0x5F890c9522dCE5670d741D4277BFCC2d9cA8Af02",
    "contractAddress": "0x63c11e0fDD11Bfe8c2525Fa4002D3b91C7954BaA",
    "transactionIndex": 1,
    "gasUsed": "4467344",
    "logsBloom": "0x00800000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000008000000000000080010000000000000000000000000000000000000000800000000000000000000100000000000000002000000000000000000000000000000000000000000080000000000000000000000000000000000800000000000000004000000080000000000000200000200000000000000000000000000000000000000000000000000000000000004000000000000000000001000000000000000000000004000000108000000000000000000000000000000000010000000000000000000000000000000000100000",
    "blockHash": "0x26d9bc5901b60a4a1825e60cea64d4302c88d9111472f0a7f86dff4d4914bdd8",
    "transactionHash": "0x4b2d923ca20d9ecdc399e9c0ca7cbef43e9370ae129b0d5c8ac837d0a43e545f",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 17791610,
        "transactionHash": "0x4b2d923ca20d9ecdc399e9c0ca7cbef43e9370ae129b0d5c8ac837d0a43e545f",
        "address": "0x63c11e0fDD11Bfe8c2525Fa4002D3b91C7954BaA",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 2,
        "blockHash": "0x26d9bc5901b60a4a1825e60cea64d4302c88d9111472f0a7f86dff4d4914bdd8"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 17791610,
        "transactionHash": "0x4b2d923ca20d9ecdc399e9c0ca7cbef43e9370ae129b0d5c8ac837d0a43e545f",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02",
          "0x00000000000000000000000009207a6efee346cb3e4a54ac18523e3715d38b3f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000001eff98d978bc800000000000000000000000000000000000000000000000000119bad27de486f12e0000000000000000000000000000000000000000000005bbc817153d04fac181000000000000000000000000000000000000000000000000fabb39a46bca712e0000000000000000000000000000000000000000000005bbe716ae167db74181",
        "logIndex": 3,
        "blockHash": "0x26d9bc5901b60a4a1825e60cea64d4302c88d9111472f0a7f86dff4d4914bdd8"
      }
    ],
    "blockNumber": 17791610,
    "cumulativeGasUsed": "4549938",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "f02626537b0dc847741d4d28935b6a2d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AlreadyMinted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArgument\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"InvalidCoordinates\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperatorNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriptionOrRegistrant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"subscribe\",\"type\":\"bool\"}],\"name\":\"ContractRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"metadataRegistry\",\"type\":\"address\"}],\"name\":\"MetadataRegistrySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"Minter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IOperatorFilterRegistry\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"OperatorRegistrySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"royaltyManager\",\"type\":\"address\"}],\"name\":\"RoyaltyManagerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"superOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SuperOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newForwarder\",\"type\":\"address\"}],\"name\":\"TrustedForwarderSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approveFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"batchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"sizes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"xs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ys\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"batchTransferQuad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getMetadata\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMetadataRegistry\",\"outputs\":[{\"internalType\":\"contract ILandMetadataRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getNeighborhoodId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getOwnerData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRoyaltyManager\",\"outputs\":[{\"internalType\":\"contract IRoyaltyManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"height\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isPremium\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"superOperator\",\"type\":\"address\"}],\"name\":\"isSuperOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintAndTransferQuad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintQuad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorFilterRegistry\",\"outputs\":[{\"internalType\":\"contract IOperatorFilterRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"subscriptionOrRegistrantToCopy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"subscribe\",\"type\":\"bool\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAllFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"metadataRegistry\",\"type\":\"address\"}],\"name\":\"setMetadataRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOperatorFilterRegistry\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"setOperatorRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"royaltyManager\",\"type\":\"address\"}],\"name\":\"setRoyaltyManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"superOperator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setSuperOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferQuad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"width\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"The Sandbox\",\"custom:security-contact\":\"contact-blockchain@sandbox.game\",\"details\":\"We use the storage mixing for historical reasons.There is a difference between L1 and L2 storage slots order and we want to upgrade the contract.This contract uses the exact storage slots configuration that we have in `core` package so we can upgradePolygonLandStorageMixin must be the first one in the inheritance chain for subclasses\",\"errors\":{\"AlreadyMinted(uint256)\":[{\"params\":{\"tokenId\":\"the id of land\"}}],\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}],\"InvalidCoordinates(uint256,uint256,uint256)\":[{\"params\":{\"size\":\"The size of the quad\",\"x\":\"The bottom left x coordinate of the quad\",\"y\":\"The bottom left y coordinate of the quad\"}}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"NotOwner(uint256,uint256)\":[{\"params\":{\"x\":\"The bottom left x coordinate of the quad\",\"y\":\"The bottom left y coordinate of the quad\"}}]},\"events\":{\"AdminChanged(address,address)\":{\"params\":{\"newAdmin\":\"The address of the new administrator.\",\"oldAdmin\":\"The address of the previous administrator.\"}},\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"ContractRegistered(address,bool)\":{\"params\":{\"subscribe\":\"should it subscribe\",\"subscriptionOrRegistrant\":\"address to subscribe or copy entries from\"}},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"MetadataRegistrySet(address)\":{\"params\":{\"metadataRegistry\":\"the address of the metadata registry\"}},\"Minter(address,bool)\":{\"params\":{\"enabled\":\"set whether the minter is enabled or disabled.\",\"minter\":\"address that will be given/removed minter right.\"}},\"OperatorRegistrySet(address)\":{\"params\":{\"registry\":\"address of the registry to set\"}},\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"The new address of the owner.\",\"previousOwner\":\"The old address of the owner.\"}},\"RoyaltyManagerSet(address)\":{\"params\":{\"royaltyManager\":\"the address of royalty manager contract.\"}},\"SuperOperator(address,bool)\":{\"params\":{\"enabled\":\"set whether the superOperator is enabled or disabled.\",\"superOperator\":\"address that will be given/removed superOperator right.\"}},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"},\"TrustedForwarderSet(address)\":{\"params\":{\"newForwarder\":\"the new trusted forwarder\"}}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"params\":{\"operator\":\"The address receiving the approval\",\"tokenId\":\"The id of the token\"}},\"approveFor(address,address,uint256)\":{\"params\":{\"operator\":\"The address receiving the approval\",\"sender\":\"The address giving the approval\",\"tokenId\":\"The id of the token\"}},\"balanceOf(address)\":{\"params\":{\"owner\":\"The address to look for.\"},\"returns\":{\"_0\":\"The number of tokens owned by the address.\"}},\"batchTransferFrom(address,address,uint256[],bytes)\":{\"params\":{\"data\":\"Additional data.\",\"from\":\"The sender of the token.\",\"ids\":\"The ids of the tokens.\",\"to\":\"The recipient of the token.\"}},\"batchTransferQuad(address,address,uint256[],uint256[],uint256[],bytes)\":{\"params\":{\"data\":\"additional data\",\"from\":\"current owner of the quad\",\"sizes\":\"list of sizes for each quad\",\"to\":\"destination\",\"xs\":\"list of bottom left x coordinates for each quad\",\"ys\":\"list of bottom left y coordinates for each quad\"}},\"changeAdmin(address)\":{\"details\":\"Change the administrator to be `newAdmin`.\",\"params\":{\"newAdmin\":\"The address of the new administrator.\"}},\"exists(uint256,uint256,uint256)\":{\"params\":{\"size\":\"The size of the quad\",\"x\":\"The bottom left x coordinate of the quad\",\"y\":\"The bottom left y coordinate of the quad\"},\"returns\":{\"_0\":\"bool for if Land has been minted or not\"}},\"getAdmin()\":{\"details\":\"Get the current administrator of this contract.\",\"returns\":{\"_0\":\"The current administrator of this contract.\"}},\"getApproved(uint256)\":{\"params\":{\"tokenId\":\"The id of the token.\"},\"returns\":{\"_0\":\"The address of the operator.\"}},\"getMetadata(uint256)\":{\"params\":{\"tokenId\":\"the token id\"},\"returns\":{\"_0\":\"premium true if the land is premium\",\"_1\":\"neighborhoodId the number that identifies the neighborhood\",\"_2\":\"neighborhoodName the neighborhood name\"}},\"getMetadataRegistry()\":{\"returns\":{\"_0\":\"The address of the Metadata Registry\"}},\"getNeighborhoodId(uint256)\":{\"params\":{\"tokenId\":\"the token id\"}},\"getOwnerData(uint256)\":{\"details\":\"for debugging purposes\",\"params\":{\"tokenId\":\"The id of the Land\"},\"returns\":{\"_0\":\"the owner data (address + burn flag + operatorEnabled)\"}},\"getRoyaltyManager()\":{\"returns\":{\"_0\":\"the address of royalty manager contract.\"}},\"getTrustedForwarder()\":{\"returns\":{\"_0\":\"trustedForwarder address of the trusted forwarder\"}},\"getX(uint256)\":{\"params\":{\"tokenId\":\"the id of land\"},\"returns\":{\"_0\":\"the x coordinates\"}},\"getY(uint256)\":{\"params\":{\"tokenId\":\"the id of land\"},\"returns\":{\"_0\":\"the y coordinates\"}},\"height()\":{\"returns\":{\"_0\":\"height\"}},\"initialize(address)\":{\"params\":{\"admin\":\"Admin of the contract\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"operator\":\"The address of the operator.\",\"owner\":\"The address of the owner.\"},\"returns\":{\"_0\":\"isOperator The status of the approval.\"}},\"isMinter(address)\":{\"params\":{\"who\":\"The address to query.\"},\"returns\":{\"_0\":\"whether the address has minter rights.\"}},\"isPremium(uint256)\":{\"params\":{\"tokenId\":\"the token id\"}},\"isSuperOperator(address)\":{\"params\":{\"superOperator\":\"the operator address to check\"},\"returns\":{\"_0\":\"true if an address is a super-operator\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"address to check\"},\"returns\":{\"_0\":\"is trusted\"}},\"mintAndTransferQuad(address,uint256,uint256,uint256,bytes)\":{\"params\":{\"data\":\"extra data to pass to the transfer\",\"size\":\"The size of the new quad\",\"to\":\"The recipient of the new quad\",\"x\":\"The bottom left x coordinate of the new quad\",\"y\":\"The bottom left y coordinate of the new quad\"}},\"mintQuad(address,uint256,uint256,uint256,bytes)\":{\"params\":{\"data\":\"extra data to pass to the transfer\",\"size\":\"The size of the new quad\",\"to\":\"The recipient of the new quad\",\"x\":\"The bottom left x coordinate of the new quad\",\"y\":\"The bottom left y coordinate of the new quad\"}},\"name()\":{\"returns\":{\"_0\":\"The name of the token contract\"}},\"operatorFilterRegistry()\":{\"returns\":{\"_0\":\"the address of  the operator filter registry\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the owner.\"}},\"ownerOf(uint256)\":{\"params\":{\"tokenId\":\"The id of the token.\"},\"returns\":{\"owner\":\"The address of the token owner.\"}},\"register(address,bool)\":{\"params\":{\"subscribe\":\"bool to signify subscription 'true' or to copy the list 'false'.\",\"subscriptionOrRegistrantToCopy\":\"registration address of the list to subscribe.\"}},\"royaltyInfo(uint256,uint256)\":{\"details\":\"tokenId is one of the EIP2981 args for this function can't be removed\",\"params\":{\"salePrice\":\"the price of token on which the royalty is calculated\"},\"returns\":{\"receiver\":\"the receiver of royalty\",\"royaltyAmount\":\"the amount of royalty\"}},\"safeBatchTransferFrom(address,address,uint256[],bytes)\":{\"params\":{\"data\":\"Additional data.\",\"from\":\"The sender of the token.\",\"ids\":\"The ids of the tokens.\",\"to\":\"The recipient of the token.\"}},\"safeTransferFrom(address,address,uint256)\":{\"params\":{\"from\":\"The sender of the token\",\"to\":\"The recipient of the token\",\"tokenId\":\"The id of the token\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"params\":{\"data\":\"Additional data\",\"from\":\"The sender of the token\",\"to\":\"The recipient of the token\",\"tokenId\":\"The id of the token\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"approved\":\"The determination of the approval\",\"operator\":\"The address receiving the approval\"}},\"setApprovalForAllFor(address,address,bool)\":{\"params\":{\"approved\":\"The determination of the approval\",\"operator\":\"The address receiving the approval\",\"sender\":\"The address giving the approval\"}},\"setMetadataRegistry(address)\":{\"params\":{\"metadataRegistry\":\"The address of the Metadata Registry\"}},\"setMinter(address,bool)\":{\"params\":{\"enabled\":\"set whether the minter is enabled or disabled.\",\"minter\":\"address that will be given/removed minter right.\"}},\"setOperatorRegistry(address)\":{\"params\":{\"registry\":\"the address of the registry\"}},\"setRoyaltyManager(address)\":{\"params\":{\"royaltyManager\":\"address of the manager contract for common royalty recipient\"}},\"setSuperOperator(address,bool)\":{\"params\":{\"enabled\":\"set whether the superOperator is enabled or disabled.\",\"superOperator\":\"address that will be given/removed superOperator right.\"}},\"setTrustedForwarder(address)\":{\"params\":{\"trustedForwarder\":\"The new trustedForwarder\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"The id of the interface\"},\"returns\":{\"_0\":\"True if the interface is supported\"}},\"symbol()\":{\"returns\":{\"_0\":\"The symbol of the token contract\"}},\"tokenURI(uint256)\":{\"params\":{\"tokenId\":\"The id of the token\"},\"returns\":{\"_0\":\"The URI of the token\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"from\":\"The sender of the token\",\"to\":\"The recipient of the token\",\"tokenId\":\"The id of the token\"}},\"transferOwnership(address)\":{\"details\":\"This owner doesn't have any privileged role within this contractIt is set by the admin to comply with EIP173 which is needed by some marketplacesEven when set to address(0) ownership is never permanently renounced the admin can always set any value\",\"params\":{\"newOwner\":\"address of new owner\"}},\"transferQuad(address,address,uint256,uint256,uint256,bytes)\":{\"params\":{\"data\":\"additional data for transfer\",\"from\":\"current owner of the quad\",\"size\":\"The size of the quad\",\"to\":\"destination\",\"x\":\"The bottom left x coordinate of the quad\",\"y\":\"The bottom left y coordinate of the quad\"}},\"width()\":{\"returns\":{\"_0\":\"width\"}}},\"title\":\"LAND token on L2\",\"version\":1},\"userdoc\":{\"errors\":{\"AlreadyMinted(uint256)\":[{\"notice\":\"the token is already minted\"}],\"InvalidAddress()\":[{\"notice\":\"an address passed as argument is invalid\"}],\"InvalidArgument()\":[{\"notice\":\"an argument passed is invalid\"}],\"InvalidCoordinates(uint256,uint256,uint256)\":[{\"notice\":\"the coordinates are invalid\"}],\"InvalidLength()\":[{\"notice\":\"an array argument has an invalid length\"}],\"NotOwner(uint256,uint256)\":[{\"notice\":\"is not the owner of the quad\"}],\"OnlyAdmin()\":[{\"notice\":\"only admin can call this function\"}],\"OperatorNotAllowed()\":[{\"notice\":\"the caller is not the operator\"}]},\"events\":{\"AdminChanged(address,address)\":{\"notice\":\"Emits when the contract administrator is changed.\"},\"ContractRegistered(address,bool)\":{\"notice\":\"emitted when the contract is registered into the registry\"},\"MetadataRegistrySet(address)\":{\"notice\":\"emitted when the metadata registry is set\"},\"Minter(address,bool)\":{\"notice\":\"emitted when a minter right is changed.\"},\"OperatorRegistrySet(address)\":{\"notice\":\"emitted when a registry is set\"},\"OwnershipTransferred(address,address)\":{\"notice\":\"emitted when the ownership of the contract is changed\"},\"RoyaltyManagerSet(address)\":{\"notice\":\"emitted when the royalty manager is set\"},\"TrustedForwarderSet(address)\":{\"notice\":\"emitted when a new trusted forwarder is set\"}},\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Approve an operator to spend tokens on the sender behalf\"},\"approveFor(address,address,uint256)\":{\"notice\":\"Approve an operator to spend tokens on the sender behalf\"},\"balanceOf(address)\":{\"notice\":\"Get the number of tokens owned by an address.\"},\"batchTransferFrom(address,address,uint256[],bytes)\":{\"notice\":\"Transfer many tokens between 2 addresses.\"},\"batchTransferQuad(address,address,uint256[],uint256[],uint256[],bytes)\":{\"notice\":\"transfer multiple quad (aligned to a quad tree with size 3, 6, 12 or 24 only)\"},\"changeAdmin(address)\":{\"notice\":\"Change the admin of the contract\"},\"exists(uint256,uint256,uint256)\":{\"notice\":\"checks if Land has been minted or not\"},\"getAdmin()\":{\"notice\":\"Get the current admin\"},\"getApproved(uint256)\":{\"notice\":\"Get the approved operator for a specific token.\"},\"getMetadata(uint256)\":{\"notice\":\"return the metadata for one land\"},\"getMetadataRegistry()\":{\"notice\":\"Get the address of the Metadata Registry\"},\"getNeighborhoodId(uint256)\":{\"notice\":\"return the id that identifies the neighborhood\"},\"getOwnerData(uint256)\":{\"notice\":\"Return the internal owner data of a Land\"},\"getRoyaltyManager()\":{\"notice\":\"returns the royalty manager\"},\"getTrustedForwarder()\":{\"notice\":\"Get the current trusted forwarder\"},\"getX(uint256)\":{\"notice\":\"x coordinate of Land token\"},\"getY(uint256)\":{\"notice\":\"y coordinate of Land token\"},\"height()\":{\"notice\":\"total height of the map\"},\"initialize(address)\":{\"notice\":\"Initializes the contract admin\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Check if the sender approved the operator.\"},\"isMinter(address)\":{\"notice\":\"check whether address `who` is given minter rights.\"},\"isPremium(uint256)\":{\"notice\":\"return true if a land is premium\"},\"isSuperOperator(address)\":{\"notice\":\"check if an address is a super-operator\"},\"isTrustedForwarder(address)\":{\"notice\":\"Checks if an address is a trusted forwarder\"},\"mintAndTransferQuad(address,uint256,uint256,uint256,bytes)\":{\"notice\":\"Checks if a parent quad has child quads already minted.Then mints the rest child quads and transfers the parent quad.Should only be called by the tunnel.\"},\"mintQuad(address,uint256,uint256,uint256,bytes)\":{\"notice\":\"Mint a new quad (aligned to a quad tree with size 1, 3, 6, 12 or 24 only)\"},\"name()\":{\"notice\":\"Return the name of the token contract\"},\"operatorFilterRegistry()\":{\"notice\":\"return the address of the operator filter registry\"},\"owner()\":{\"notice\":\"Get the address of the owner\"},\"ownerOf(uint256)\":{\"notice\":\"Get the owner of a token.\"},\"register(address,bool)\":{\"notice\":\"This function is used to register Land contract on the Operator Filterer Registry of Opensea.\"},\"royaltyInfo(uint256,uint256)\":{\"notice\":\"Returns how much royalty is owed and to whom based on ERC2981\"},\"safeBatchTransferFrom(address,address,uint256[],bytes)\":{\"notice\":\"Transfer many tokens between 2 addresses, while ensuring the receiving contract has a receiver method.\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"Transfer a token between 2 addresses letting the receiver know of the transfer\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Transfer a token between 2 addresses letting the receiver know of the transfer\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Set the approval for an operator to manage all the tokens of the msgSender\"},\"setApprovalForAllFor(address,address,bool)\":{\"notice\":\"Set the approval for an operator to manage all the tokens of the sender (may differ from msgSender)\"},\"setMetadataRegistry(address)\":{\"notice\":\"sets address of the Metadata Registry\"},\"setMinter(address,bool)\":{\"notice\":\"Enable or disable the ability of `minter` to mint tokens\"},\"setOperatorRegistry(address)\":{\"notice\":\"sets filter registry address deployed in test\"},\"setRoyaltyManager(address)\":{\"notice\":\"set royalty manager\"},\"setSuperOperator(address,bool)\":{\"notice\":\"Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights).\"},\"setTrustedForwarder(address)\":{\"notice\":\"Change the address of the trusted forwarder for meta-TX\"},\"supportsInterface(bytes4)\":{\"notice\":\"Check if the contract supports an interface\"},\"symbol()\":{\"notice\":\"Return the symbol of the token contract\"},\"tokenURI(uint256)\":{\"notice\":\"Return the URI of a specific token\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer a token between 2 addresses\"},\"transferOwnership(address)\":{\"notice\":\"Set the address of the new owner of the contract\"},\"transferQuad(address,address,uint256,uint256,uint256,bytes)\":{\"notice\":\"transfer one quad (aligned to a quad tree with size 3, 6, 12 or 24 only)\"},\"width()\":{\"notice\":\"total width of the map\"}},\"notice\":\"LAND contract on L2\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@sandbox-smart-contracts/land/contracts/PolygonLand.sol\":\"PolygonLand\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@manifoldxyz/royalty-registry-solidity/contracts/overrides/IRoyaltySplitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\nstruct Recipient {\\n    address payable recipient;\\n    uint16 bps;\\n}\\n\\ninterface IRoyaltySplitter is IERC165 {\\n    /**\\n     * @dev Set the splitter recipients. Total bps must total 10000.\\n     */\\n    function setRecipients(Recipient[] calldata recipients) external;\\n\\n    /**\\n     * @dev Get the splitter recipients;\\n     */\\n    function getRecipients() external view returns (Recipient[] memory);\\n}\\n\",\"keccak256\":\"0xc507963f66c4238d25e69d2d05ac5995c549aa89789e89e7a556403221547c6d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x89b84f7b1b2d6c294cd6b9a9f661c1cfb1b9b10ca7bac5b3445850a8ce96dcf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function getSupportedInterfaces(\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeCall(IERC165.supportsInterface, (interfaceId));\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xac3d50e321a48a40b4496970ce725900f13aeb2255b7c1203f5adbe98c4a911a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/dependency-royalty-management/contracts/interfaces/IRoyaltyManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Recipient} from \\\"@manifoldxyz/royalty-registry-solidity/contracts/overrides/IRoyaltySplitter.sol\\\";\\n\\n/// @title IRoyaltyManager\\n/// @notice interface for RoyaltyManager Contract\\ninterface IRoyaltyManager {\\n    event RecipientSet(address indexed commonRecipient);\\n\\n    event SplitSet(uint16 commonSplit);\\n\\n    event RoyaltySet(uint16 royaltyBps, address indexed contractAddress);\\n\\n    event TrustedForwarderSet(address indexed previousForwarder, address indexed newForwarder);\\n\\n    event SplitterDeployed(address indexed creator, address indexed recipient, address splitterAddress);\\n\\n    ///@notice sets the common recipient\\n    ///@param _commonRecipient is the common recipient for all the splitters\\n    function setRecipient(address payable _commonRecipient) external;\\n\\n    ///@notice sets the common split\\n    ///@param commonSplit split for the common recipient\\n    function setSplit(uint16 commonSplit) external;\\n\\n    ///@notice to be called by the splitters to get the common recipient and split\\n    ///@return recipient which has the common recipient and split\\n    function getCommonRecipient() external view returns (Recipient memory recipient);\\n\\n    ///@notice returns the amount of basis points allocated to the creator\\n    ///@return creatorSplit the share of creator in bps\\n    function getCreatorSplit() external view returns (uint16 creatorSplit);\\n\\n    ///@notice returns the commonRecipient and EIP2981 royalty split\\n    ///@return recipient address of common royalty recipient\\n    ///@return royaltySplit contract EIP2981 royalty bps\\n    function getRoyaltyInfo() external view returns (address payable recipient, uint16 royaltySplit);\\n\\n    ///@notice deploys splitter for creator\\n    ///@param creator the address of the creator\\n    ///@param recipient the wallet of the recipient where they would receive their royalty\\n    ///@return creatorSplitterAddress splitter's address deployed for creator\\n    function deploySplitter(address creator, address payable recipient)\\n        external\\n        returns (address payable creatorSplitterAddress);\\n\\n    ///@notice returns the address of splitter of a creator.\\n    ///@param creator the address of the creator\\n    ///@return creatorSplitterAddress splitter's address deployed for a creator\\n    function getCreatorRoyaltySplitter(address creator) external view returns (address payable creatorSplitterAddress);\\n\\n    ///@notice returns the EIP2981 royalty split\\n    ///@param _contractAddress the address of the contract for which the royalty is required\\n    ///@return royaltyBps royalty bps of the contract\\n    function getContractRoyalty(address _contractAddress) external view returns (uint16 royaltyBps);\\n\\n    ///@notice sets the trustedForwarder address to be used by the splitters\\n    ///@param _newForwarder is the new trusted forwarder address\\n    function setTrustedForwarder(address _newForwarder) external;\\n\\n    ///@notice get the current trustedForwarder address\\n    ///@return trustedForwarder address of current trusted Forwarder\\n    function getTrustedForwarder() external view returns (address trustedForwarder);\\n}\\n\",\"keccak256\":\"0x5e8e149845df288a5d0ddfa00407ebda15d024e8caf1057822670a5232fee93f\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/land/contracts/PolygonLand.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.23;\\n\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {IOperatorFilterRegistry} from \\\"./interfaces/IOperatorFilterRegistry.sol\\\";\\nimport {WithAdmin} from \\\"./common/WithAdmin.sol\\\";\\nimport {WithSuperOperators} from \\\"./common/WithSuperOperators.sol\\\";\\nimport {OperatorFiltererUpgradeable} from \\\"./common/OperatorFiltererUpgradeable.sol\\\";\\nimport {ERC721BaseToken} from \\\"./common/ERC721BaseToken.sol\\\";\\nimport {LandBaseToken} from \\\"./common/LandBaseToken.sol\\\";\\nimport {ERC2771Handler} from \\\"./polygon/ERC2771Handler.sol\\\";\\nimport {PolygonLandStorageMixin} from \\\"./polygon/PolygonLandStorageMixin.sol\\\";\\nimport {LandBase} from \\\"./common/LandBase.sol\\\";\\n\\n/// @title LAND token on L2\\n/// @author The Sandbox\\n/// @custom:security-contact contact-blockchain@sandbox.game\\n/// @notice LAND contract on L2\\n/// @dev We use the storage mixing for historical reasons.\\n/// @dev There is a difference between L1 and L2 storage slots order and we want to upgrade the contract.\\n/// @dev This contract uses the exact storage slots configuration that we have in `core` package so we can upgrade\\n/// @dev PolygonLandStorageMixin must be the first one in the inheritance chain for subclasses\\ncontract PolygonLand is PolygonLandStorageMixin, LandBase, ERC2771Handler {\\n    /// @notice Change the address of the trusted forwarder for meta-TX\\n    /// @param trustedForwarder The new trustedForwarder\\n    function setTrustedForwarder(address trustedForwarder) external onlyAdmin {\\n        _setTrustedForwarder(trustedForwarder);\\n    }\\n\\n    /// @notice Implements the Context msg sender\\n    /// @return the address of the message sender\\n    function _msgSender() internal view override(Context, ERC2771Handler) returns (address) {\\n        return ERC2771Handler._msgSender();\\n    }\\n\\n    /// @notice get the admin address\\n    /// @return the admin address\\n    function _readAdmin() internal view override(PolygonLandStorageMixin, WithAdmin) returns (address) {\\n        return PolygonLandStorageMixin._readAdmin();\\n    }\\n\\n    /// @notice set the admin address\\n    /// @param admin the admin address\\n    function _writeAdmin(address admin) internal override(PolygonLandStorageMixin, WithAdmin) {\\n        PolygonLandStorageMixin._writeAdmin(admin);\\n    }\\n\\n    /// @notice check if an address is a super-operator\\n    /// @param superOperator the operator address to check\\n    /// @return true if an address is a super-operator\\n    function _isSuperOperator(\\n        address superOperator\\n    ) internal view override(PolygonLandStorageMixin, WithSuperOperators) returns (bool) {\\n        return PolygonLandStorageMixin._isSuperOperator(superOperator);\\n    }\\n\\n    /// @notice enable an address to be super-operator\\n    /// @param superOperator the address to set\\n    /// @param enabled true enable the address, false disable it.\\n    function _writeSuperOperator(\\n        address superOperator,\\n        bool enabled\\n    ) internal override(PolygonLandStorageMixin, WithSuperOperators) {\\n        PolygonLandStorageMixin._writeSuperOperator(superOperator, enabled);\\n    }\\n\\n    /// @notice get the number of nft for an address\\n    /// @param owner address to check\\n    /// @return the number of nfts\\n    function _readNumNFTPerAddress(\\n        address owner\\n    ) internal view override(PolygonLandStorageMixin, ERC721BaseToken) returns (uint256) {\\n        return PolygonLandStorageMixin._readNumNFTPerAddress(owner);\\n    }\\n\\n    /// @notice set the number of nft for an address\\n    /// @param owner address to set\\n    /// @param quantity the number of nfts to set for the owner\\n    function _writeNumNFTPerAddress(\\n        address owner,\\n        uint256 quantity\\n    ) internal override(PolygonLandStorageMixin, ERC721BaseToken) {\\n        PolygonLandStorageMixin._writeNumNFTPerAddress(owner, quantity);\\n    }\\n\\n    /// @notice get the owner data, this includes: owner address, burn flag and operator flag (see: _owners declaration)\\n    /// @param tokenId the token Id\\n    /// @return the owner data\\n    function _readOwnerData(\\n        uint256 tokenId\\n    ) internal view override(PolygonLandStorageMixin, ERC721BaseToken) returns (uint256) {\\n        return PolygonLandStorageMixin._readOwnerData(tokenId);\\n    }\\n\\n    /// @notice set the owner data, this includes: owner address, burn flag and operator flag (see: _owners declaration)\\n    /// @param tokenId the token Id\\n    /// @param data the owner data\\n    function _writeOwnerData(\\n        uint256 tokenId,\\n        uint256 data\\n    ) internal override(PolygonLandStorageMixin, ERC721BaseToken) {\\n        PolygonLandStorageMixin._writeOwnerData(tokenId, data);\\n    }\\n\\n    /// @notice check if an operator was enabled by a given owner\\n    /// @param owner that enabled the operator\\n    /// @param operator address to check if it was enabled\\n    /// @return true if the operator has access\\n    function _isOperatorForAll(\\n        address owner,\\n        address operator\\n    ) internal view override(PolygonLandStorageMixin, ERC721BaseToken) returns (bool) {\\n        return PolygonLandStorageMixin._isOperatorForAll(owner, operator);\\n    }\\n\\n    /// @notice set an operator for a given owner\\n    /// @param owner that enabled the operator\\n    /// @param operator address to check if it was enabled\\n    /// @param enabled true enable the address, false disable it.\\n    function _writeOperatorForAll(\\n        address owner,\\n        address operator,\\n        bool enabled\\n    ) internal override(PolygonLandStorageMixin, ERC721BaseToken) {\\n        PolygonLandStorageMixin._writeOperatorForAll(owner, operator, enabled);\\n    }\\n\\n    /// @notice get the operator for a specific token, the operator can transfer on the owner behalf\\n    /// @param tokenId The id of the token.\\n    /// @return the operator address\\n    function _readOperator(\\n        uint256 tokenId\\n    ) internal view override(PolygonLandStorageMixin, ERC721BaseToken) returns (address) {\\n        return PolygonLandStorageMixin._readOperator(tokenId);\\n    }\\n\\n    /// @notice set the operator for a specific token, the operator can transfer on the owner behalf\\n    /// @param tokenId the id of the token.\\n    /// @param operator the operator address\\n    function _writeOperator(\\n        uint256 tokenId,\\n        address operator\\n    ) internal override(PolygonLandStorageMixin, ERC721BaseToken) {\\n        PolygonLandStorageMixin._writeOperator(tokenId, operator);\\n    }\\n\\n    /// @notice checks if an address is enabled as minter\\n    /// @param minter the address to check\\n    /// @return true if the address is a minter\\n    function _isMinter(address minter) internal view override(PolygonLandStorageMixin, LandBaseToken) returns (bool) {\\n        return PolygonLandStorageMixin._isMinter(minter);\\n    }\\n\\n    /// @notice set an address as minter\\n    /// @param minter the address to set\\n    /// @param enabled true enable the address, false disable it.\\n    function _writeMinter(address minter, bool enabled) internal override(PolygonLandStorageMixin, LandBaseToken) {\\n        PolygonLandStorageMixin._writeMinter(minter, enabled);\\n    }\\n\\n    /// @notice get the address of the ERC2771 trusted forwarder\\n    /// @return the address of the trusted forwarder\\n    function _readTrustedForwarder() internal view override(PolygonLandStorageMixin, ERC2771Handler) returns (address) {\\n        return PolygonLandStorageMixin._readTrustedForwarder();\\n    }\\n\\n    /// @notice set the address of the ERC2771 trusted forwarder\\n    /// @param trustedForwarder the address of the trusted forwarder\\n    function _writeTrustedForwarder(\\n        address trustedForwarder\\n    ) internal virtual override(PolygonLandStorageMixin, ERC2771Handler) {\\n        PolygonLandStorageMixin._writeTrustedForwarder(trustedForwarder);\\n    }\\n\\n    /// @notice get the OpenSea operator filter\\n    /// @return the address of the OpenSea operator filter registry\\n    function _readOperatorFilterRegistry()\\n        internal\\n        view\\n        override(PolygonLandStorageMixin, OperatorFiltererUpgradeable)\\n        returns (IOperatorFilterRegistry)\\n    {\\n        return PolygonLandStorageMixin._readOperatorFilterRegistry();\\n    }\\n\\n    /// @notice set the OpenSea operator filter\\n    /// @param registry the address of the OpenSea operator filter registry\\n    function _writeOperatorFilterRegistry(\\n        IOperatorFilterRegistry registry\\n    ) internal override(PolygonLandStorageMixin, OperatorFiltererUpgradeable) {\\n        PolygonLandStorageMixin._writeOperatorFilterRegistry(registry);\\n    }\\n}\\n\",\"keccak256\":\"0x9f4df3a08994d99c00efeb0ff4cc34738b14ebeccf95c6277c527d867f628a3b\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/land/contracts/common/ERC721BaseToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport {ERC165Checker} from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {IERC721Errors} from \\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\";\\nimport {IERC721MandatoryTokenReceiver} from \\\"../interfaces/IERC721MandatoryTokenReceiver.sol\\\";\\nimport {IErrors} from \\\"../interfaces/IErrors.sol\\\";\\nimport {IERC721BatchOps} from \\\"../interfaces/IERC721BatchOps.sol\\\";\\nimport {WithSuperOperators} from \\\"./WithSuperOperators.sol\\\";\\n\\n/// @title ERC721BaseTokenCommon\\n/// @author The Sandbox\\n/// @custom:security-contact contact-blockchain@sandbox.game\\n/// @notice Basic functionalities of a NFT\\n/// @dev ERC721 implementation that supports meta-transactions and super operators\\nabstract contract ERC721BaseToken is IERC721, IERC721BatchOps, IERC721Errors, IErrors, Context, WithSuperOperators {\\n    using Address for address;\\n\\n    uint256 internal constant NOT_ADDRESS = 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000;\\n    uint256 internal constant OPERATOR_FLAG = (2 ** 255);\\n    uint256 internal constant NOT_OPERATOR_FLAG = OPERATOR_FLAG - 1;\\n    uint256 internal constant BURNED_FLAG = (2 ** 160);\\n\\n    /// @notice Get the number of tokens owned by an address.\\n    /// @param owner The address to look for.\\n    /// @return The number of tokens owned by the address.\\n    function balanceOf(address owner) external view virtual override returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _readNumNFTPerAddress(owner);\\n    }\\n\\n    /// @notice Get the owner of a token.\\n    /// @param tokenId The id of the token.\\n    /// @return owner The address of the token owner.\\n    function ownerOf(uint256 tokenId) external view virtual override returns (address owner) {\\n        owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /// @notice Get the approved operator for a specific token.\\n    /// @param tokenId The id of the token.\\n    /// @return The address of the operator.\\n    function getApproved(uint256 tokenId) external view virtual override returns (address) {\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        if (operatorEnabled) {\\n            return _readOperator(tokenId);\\n        }\\n        return address(0);\\n    }\\n\\n    /// @notice Return the internal owner data of a Land\\n    /// @param tokenId The id of the Land\\n    /// @return the owner data (address + burn flag + operatorEnabled)\\n    /// @dev for debugging purposes\\n    function getOwnerData(uint256 tokenId) external view virtual returns (uint256) {\\n        return _readOwnerData(tokenId);\\n    }\\n\\n    /// @notice Check if the sender approved the operator.\\n    /// @param owner The address of the owner.\\n    /// @param operator The address of the operator.\\n    /// @return isOperator The status of the approval.\\n    function isApprovedForAll(address owner, address operator) external view virtual override returns (bool) {\\n        return _isApprovedForAllOrSuperOperator(owner, operator);\\n    }\\n\\n    /// @param from The address who initiated the transfer (may differ from msg.sender).\\n    /// @param to The address receiving the token.\\n    /// @param tokenId The token being transferred.\\n    function _transferFrom(address from, address to, uint256 tokenId) internal {\\n        address msgSender = _msgSender();\\n        _doTransfer(msgSender, from, to, tokenId);\\n        if (to.code.length > 0 && _checkIERC721MandatoryTokenReceiver(to)) {\\n            _checkOnERC721Received(msgSender, from, to, tokenId, \\\"\\\");\\n        }\\n    }\\n\\n    /// @notice Transfer a token between 2 addresses letting the receiver know of the transfer.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param tokenId The id of the token.\\n    /// @param data Additional data.\\n    function _safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) internal {\\n        address msgSender = _msgSender();\\n        _doTransfer(msgSender, from, to, tokenId);\\n        if (to.code.length > 0) {\\n            _checkOnERC721Received(msgSender, from, to, tokenId, data);\\n        }\\n    }\\n\\n    /// @param msgSender The sender of the transaction\\n    /// @param from The address who initiated the transfer (may differ from msg.sender).\\n    /// @param to The address receiving the token.\\n    /// @param tokenId The token being transferred.\\n    function _doTransfer(address msgSender, address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert InvalidAddress();\\n        }\\n        bool operatorEnabled = _checkFromIsOwner(from, tokenId);\\n        bool authorized = msgSender == from || _isApprovedForAllOrSuperOperator(from, msgSender);\\n        if (!authorized && !(operatorEnabled && _readOperator(tokenId) == msgSender)) {\\n            revert ERC721InsufficientApproval(msgSender, tokenId);\\n        }\\n        _transferNumNFTPerAddress(from, to, 1);\\n        _updateOwnerData(tokenId, to, false);\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /// @param from The sender of the token\\n    /// @param to The recipient of the token\\n    /// @param ids The ids of the tokens\\n    /// @param data additional data\\n    /// @param safe checks the target contract\\n    function _batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes memory data,\\n        bool safe\\n    ) internal {\\n        if (from == address(0) || to == address(0)) {\\n            revert InvalidAddress();\\n        }\\n\\n        address msgSender = _msgSender();\\n        bool authorized = msgSender == from || _isApprovedForAllOrSuperOperator(from, msgSender);\\n        uint256 numTokens = ids.length;\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            uint256 tokenId = ids[i];\\n            (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(tokenId);\\n            if (from != owner) {\\n                revert ERC721InvalidOwner(from);\\n            }\\n            if (!authorized && !(operatorEnabled && _readOperator(tokenId) == msgSender)) {\\n                revert ERC721InsufficientApproval(msgSender, tokenId);\\n            }\\n            _updateOwnerData(tokenId, to, false);\\n            emit Transfer(from, to, tokenId);\\n        }\\n        _transferNumNFTPerAddress(from, to, numTokens);\\n\\n        if (to.code.length > 0) {\\n            if (_checkIERC721MandatoryTokenReceiver(to)) {\\n                _checkOnERC721BatchReceived(msgSender, from, to, ids, data);\\n            } else if (safe) {\\n                for (uint256 i = 0; i < numTokens; i++) {\\n                    _checkOnERC721Received(msgSender, from, to, ids[i], data);\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @param from The address who initiated the transfer (may differ from msg.sender).\\n    /// @param operator The address receiving the approval\\n    /// @param approved The determination of the approval\\n    function _setApprovalForAll(address from, address operator, bool approved) internal {\\n        if (from == address(0)) {\\n            revert ERC721InvalidSender(from);\\n        }\\n        address msgSender = _msgSender();\\n        if (msgSender != from && !_isSuperOperator(msgSender)) {\\n            revert ERC721InvalidApprover(msgSender);\\n        }\\n        if (_isSuperOperator(operator)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _writeOperatorForAll(from, operator, approved);\\n        emit ApprovalForAll(from, operator, approved);\\n    }\\n\\n    /// @param from The address who initiated the transfer (may differ from msg.sender).\\n    /// @param operator The address receiving the approval\\n    /// @param tokenId The id of the token\\n    function _approveFor(address from, address operator, uint256 tokenId) internal {\\n        _checkFromIsOwner(from, tokenId);\\n\\n        address msgSender = _msgSender();\\n        bool authorized = msgSender == from || _isApprovedForAllOrSuperOperator(from, msgSender);\\n        if (!authorized) {\\n            revert ERC721InvalidApprover(msgSender);\\n        }\\n        if (operator == address(0)) {\\n            _updateOwnerData(tokenId, from, false);\\n        } else {\\n            _updateOwnerData(tokenId, from, true);\\n            _writeOperator(tokenId, operator);\\n        }\\n        emit Approval(from, operator, tokenId);\\n    }\\n\\n    /// @param from The address who initiated the transfer (may differ from msg.sender).\\n    /// @param tokenId token id to burn\\n    function _burn(address from, uint256 tokenId) internal {\\n        bool operatorEnabled = _checkFromIsOwner(from, tokenId);\\n        address msgSender = _msgSender();\\n        bool authorized = msgSender == from || _isApprovedForAllOrSuperOperator(from, msgSender);\\n        if (!authorized && !(operatorEnabled && _readOperator(tokenId) == msgSender)) {\\n            revert ERC721InsufficientApproval(msgSender, tokenId);\\n        }\\n        _writeOwnerData(tokenId, (_readOwnerData(tokenId) & (NOT_ADDRESS & NOT_OPERATOR_FLAG)) | BURNED_FLAG);\\n        _subNumNFTPerAddress(from, 1);\\n        emit Transfer(from, address(0), tokenId);\\n    }\\n\\n    /// @notice checks that the token is taken from the owner after the call (from == owner)\\n    /// @param from sender address\\n    /// @param tokenId The id of the token\\n    /// @return operatorEnabled Whether or not operators are enabled for this token.\\n    function _checkFromIsOwner(address from, uint256 tokenId) internal view returns (bool) {\\n        if (from == address(0)) {\\n            revert ERC721InvalidSender(from);\\n        }\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(tokenId);\\n        // As from == owner, this is the same check as from == address(0) but we want a specific error for this one.\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        if (from != owner) {\\n            revert ERC721InvalidOwner(from);\\n        }\\n        return operatorEnabled;\\n    }\\n\\n    /// @param tokenId The id of the token\\n    /// @param newOwner The new owner of the token\\n    /// @param hasOperator if true the operator flag is set\\n    function _updateOwnerData(uint256 tokenId, address newOwner, bool hasOperator) internal {\\n        uint256 oldData = (_readOwnerData(tokenId) & (NOT_ADDRESS & NOT_OPERATOR_FLAG)) | uint256(uint160(newOwner));\\n        if (hasOperator) {\\n            oldData = oldData | OPERATOR_FLAG;\\n        }\\n        _writeOwnerData(tokenId, oldData);\\n    }\\n\\n    /// @param tokenId token id\\n    /// @return owner address of the owner\\n    function _ownerOf(uint256 tokenId) internal view returns (address owner) {\\n        (owner, ) = _ownerAndOperatorEnabledOf(tokenId);\\n    }\\n\\n    /// @notice Get the owner and operatorEnabled flag of a token.\\n    /// @param tokenId The token to query.\\n    /// @return owner The owner of the token.\\n    /// @return operatorEnabled Whether or not operators are enabled for this token.\\n    /// @dev must extract the owner, burn and operator flag from _readOwnerData(tokenId) if burned must return owner = address(0)\\n    function _ownerAndOperatorEnabledOf(\\n        uint256 tokenId\\n    ) internal view virtual returns (address owner, bool operatorEnabled);\\n\\n    /// @notice Check if receiving contract accepts erc721 transfers.\\n    /// @param operator The address of the operator.\\n    /// @param from The from address, may be different from msg.sender.\\n    /// @param to The address we want to transfer to.\\n    /// @param tokenId The id of the token we would like to transfer.\\n    /// @param data Any additional data to send with the transfer.\\n    function _checkOnERC721Received(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal {\\n        /* solhint-disable no-empty-blocks */\\n        try IERC721Receiver(to).onERC721Received(operator, from, tokenId, data) returns (bytes4 retval) {\\n            if (retval == IERC721Receiver.onERC721Received.selector) {\\n                return;\\n            }\\n        } catch (bytes memory) {}\\n        /* solhint-enable no-empty-blocks */\\n        revert ERC721InvalidReceiver(to);\\n    }\\n\\n    /// @notice Check if receiving contract accepts erc721 batch transfers.\\n    /// @param operator The address of the operator.\\n    /// @param from The from address, may be different from msg.sender.\\n    /// @param to The address we want to transfer to.\\n    /// @param ids The ids of the tokens we would like to transfer.\\n    /// @param _data Any additional data to send with the transfer.\\n    function _checkOnERC721BatchReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        bytes memory _data\\n    ) internal {\\n        /* solhint-disable no-empty-blocks */\\n        try IERC721MandatoryTokenReceiver(to).onERC721BatchReceived(operator, from, ids, _data) returns (\\n            bytes4 retval\\n        ) {\\n            if (retval == IERC721MandatoryTokenReceiver.onERC721BatchReceived.selector) {\\n                return;\\n            }\\n        } catch (bytes memory) {}\\n        /* solhint-enable no-empty-blocks */\\n        revert ERC721InvalidReceiver(to);\\n    }\\n\\n    /// @notice Check if there was enough gas.\\n    /// @param to The address of the contract to check.\\n    /// @return Whether or not this check succeeded.\\n    function _checkIERC721MandatoryTokenReceiver(address to) internal view returns (bool) {\\n        return ERC165Checker.supportsERC165InterfaceUnchecked(to, type(IERC721MandatoryTokenReceiver).interfaceId);\\n    }\\n\\n    /// @notice Check if the sender approved the operator.\\n    /// @param owner The address of the owner.\\n    /// @param operator The address of the operator.\\n    /// @return isOperator The status of the approval.\\n    function _isApprovedForAllOrSuperOperator(address owner, address operator) internal view returns (bool) {\\n        return _isOperatorForAll(owner, operator) || _isSuperOperator(operator);\\n    }\\n\\n    /// @notice Add tokens to the owner balance\\n    /// @param who the owner of the token\\n    /// @param val how much to add to the owner's balance\\n    /// @dev we can use unchecked because there is a limited number of lands 408x408\\n    function _addNumNFTPerAddress(address who, uint256 val) internal {\\n        unchecked {\\n            _writeNumNFTPerAddress(who, _readNumNFTPerAddress(who) + val);\\n        }\\n    }\\n\\n    /// @notice Subtract tokens to the owner balance\\n    /// @param who the owner of the token\\n    /// @param val how much to subtract from the owner's balance\\n    /// @dev we can use unchecked because there is a limited number of lands 408x408\\n    function _subNumNFTPerAddress(address who, uint256 val) internal {\\n        unchecked {\\n            _writeNumNFTPerAddress(who, _readNumNFTPerAddress(who) - val);\\n        }\\n    }\\n\\n    /// @notice Move balance between two users\\n    /// @param from address to subtract from\\n    /// @param to address to add from\\n    /// @param quantity how many tokens to move\\n    function _transferNumNFTPerAddress(address from, address to, uint256 quantity) internal virtual {\\n        if (from != to) {\\n            _subNumNFTPerAddress(from, quantity);\\n            _addNumNFTPerAddress(to, quantity);\\n        }\\n    }\\n\\n    /// @notice get the number of nft for an address\\n    /// @param owner address to check\\n    /// @return the number of nfts\\n    function _readNumNFTPerAddress(address owner) internal view virtual returns (uint256);\\n\\n    /// @notice set the number of nft for an address\\n    /// @param owner address to set\\n    /// @param quantity the number of nfts to set for the owner\\n    function _writeNumNFTPerAddress(address owner, uint256 quantity) internal virtual;\\n\\n    /// @notice Get the owner data of a token for a user\\n    /// @param tokenId The id of the token.\\n    /// @return the owner data\\n    /// @dev The owner data has three fields: owner address, operator flag and burn flag. See: _owners declaration.\\n    function _readOwnerData(uint256 tokenId) internal view virtual returns (uint256);\\n\\n    /// @notice Get the owner address of a token (included in the ownerData, see: _getOwnerData)\\n    /// @param tokenId The id of the token.\\n    /// @return the owner address\\n    function _getOwnerAddress(uint256 tokenId) internal view virtual returns (address) {\\n        return address(uint160(_readOwnerData(tokenId)));\\n    }\\n\\n    /// @notice Set the owner data of a token\\n    /// @param tokenId the token Id\\n    /// @param data the owner data\\n    /// @dev The owner data has three fields: owner address, operator flag and burn flag. See: _owners declaration.\\n    function _writeOwnerData(uint256 tokenId, uint256 data) internal virtual;\\n\\n    /// @notice check if an operator was enabled by a given owner\\n    /// @param owner that enabled the operator\\n    /// @param operator address to check if it was enabled\\n    /// @return true if the operator has access\\n    function _isOperatorForAll(address owner, address operator) internal view virtual returns (bool);\\n\\n    /// @notice Provides an operator access to all the tokens of an owner\\n    /// @param owner that enabled the operator\\n    /// @param operator address to check if it was enabled\\n    /// @param enabled if true give access to the operator, else disable it\\n    function _writeOperatorForAll(address owner, address operator, bool enabled) internal virtual;\\n\\n    /// @notice get the operator for a specific token, the operator can transfer on the owner behalf\\n    /// @param tokenId The id of the token.\\n    /// @return the operator address\\n    function _readOperator(uint256 tokenId) internal view virtual returns (address);\\n\\n    /// @notice set the operator for a specific token, the operator can transfer on the owner behalf\\n    /// @param tokenId the id of the token.\\n    /// @param operator the operator address\\n    function _writeOperator(uint256 tokenId, address operator) internal virtual;\\n}\\n\",\"keccak256\":\"0x471ebe03c25e23b7aac889f5a494f7424f5b9f8a0173dd5d9c3b5e6e98972abb\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/land/contracts/common/LandBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {IERC2981} from \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC721Metadata} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport {IOperatorFilterRegistry} from \\\"../interfaces/IOperatorFilterRegistry.sol\\\";\\nimport {IERC173} from \\\"../interfaces/IERC173.sol\\\";\\nimport {ILandToken} from \\\"../interfaces/ILandToken.sol\\\";\\nimport {IQuad} from \\\"../interfaces/IQuad.sol\\\";\\nimport {ILandMetadataRegistry} from \\\"../interfaces/ILandMetadataRegistry.sol\\\";\\nimport {IERC721BatchOps} from \\\"../interfaces/IERC721BatchOps.sol\\\";\\nimport {WithAdmin} from \\\"./WithAdmin.sol\\\";\\nimport {OperatorFiltererUpgradeable} from \\\"../common/OperatorFiltererUpgradeable.sol\\\";\\nimport {WithMetadataRegistry} from \\\"../common/WithMetadataRegistry.sol\\\";\\nimport {WithRoyalties} from \\\"../common/WithRoyalties.sol\\\";\\nimport {WithOwner} from \\\"../common/WithOwner.sol\\\";\\nimport {LandBaseToken} from \\\"./LandBaseToken.sol\\\";\\n\\n/// @title Land Contract\\n/// @author The Sandbox\\n/// @custom:security-contact contact-blockchain@sandbox.game\\n/// @notice LAND contract\\n/// @dev LAND contract implements ERC721, quads, metadata, royalties and marketplace filtering functionalities.\\n/// @dev The contract also implements EIP173 because it is needed by some marketplaces. The owner() doesn't have\\n/// @dev any privileged roles within the contract. It can be set by the admin to any value.\\nabstract contract LandBase is\\n    LandBaseToken,\\n    Initializable,\\n    OperatorFiltererUpgradeable,\\n    WithAdmin,\\n    WithMetadataRegistry,\\n    WithRoyalties,\\n    WithOwner\\n{\\n    /// @dev this protects the implementation contract from being initialized.\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Initializes the contract admin\\n    /// @param admin Admin of the contract\\n    function initialize(address admin) external initializer {\\n        // We must be able to initialize the admin if this is a fresh deploy, but we want to\\n        // be backward compatible with the current deployment\\n        if (_readAdmin() != address(0)) {\\n            revert InvalidInitialization();\\n        }\\n        _setAdmin(admin);\\n    }\\n\\n    /// @notice This function is used to register Land contract on the Operator Filterer Registry of Opensea.\\n    /// @param subscriptionOrRegistrantToCopy registration address of the list to subscribe.\\n    /// @param subscribe bool to signify subscription 'true' or to copy the list 'false'.\\n    function register(address subscriptionOrRegistrantToCopy, bool subscribe) external onlyAdmin {\\n        if (subscriptionOrRegistrantToCopy == address(0)) {\\n            revert InvalidAddress();\\n        }\\n        _register(subscriptionOrRegistrantToCopy, subscribe);\\n    }\\n\\n    /// @notice Change the admin of the contract\\n    /// @dev Change the administrator to be `newAdmin`.\\n    /// @param newAdmin The address of the new administrator.\\n    function changeAdmin(address newAdmin) external onlyAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /// @notice Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights).\\n    /// @param superOperator address that will be given/removed superOperator right.\\n    /// @param enabled set whether the superOperator is enabled or disabled.\\n    function setSuperOperator(address superOperator, bool enabled) external onlyAdmin {\\n        _setSuperOperator(superOperator, enabled);\\n    }\\n\\n    /// @notice Enable or disable the ability of `minter` to mint tokens\\n    /// @param minter address that will be given/removed minter right.\\n    /// @param enabled set whether the minter is enabled or disabled.\\n    function setMinter(address minter, bool enabled) external onlyAdmin {\\n        _setMinter(minter, enabled);\\n    }\\n\\n    /// @notice sets filter registry address deployed in test\\n    /// @param registry the address of the registry\\n    function setOperatorRegistry(IOperatorFilterRegistry registry) external virtual onlyAdmin {\\n        _setOperatorRegistry(registry);\\n    }\\n\\n    /// @notice set royalty manager\\n    /// @param royaltyManager address of the manager contract for common royalty recipient\\n    function setRoyaltyManager(address royaltyManager) external onlyAdmin {\\n        _setRoyaltyManager(royaltyManager);\\n    }\\n\\n    /// @notice sets address of the Metadata Registry\\n    /// @param metadataRegistry The address of the Metadata Registry\\n    function setMetadataRegistry(address metadataRegistry) external onlyAdmin {\\n        _setMetadataRegistry(metadataRegistry);\\n    }\\n\\n    /// @notice Set the address of the new owner of the contract\\n    /// @param newOwner address of new owner\\n    /// @dev This owner doesn't have any privileged role within this contract\\n    /// @dev It is set by the admin to comply with EIP173 which is needed by some marketplaces\\n    /// @dev Even when set to address(0) ownership is never permanently renounced the admin can always set any value\\n    function transferOwnership(address newOwner) external onlyAdmin {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /// @notice Approve an operator to spend tokens on the sender behalf\\n    /// @param sender The address giving the approval\\n    /// @param operator The address receiving the approval\\n    /// @param tokenId The id of the token\\n    function approveFor(\\n        address sender,\\n        address operator,\\n        uint256 tokenId\\n    ) external onlyAllowedOperatorApproval(operator) {\\n        _approveFor(sender, operator, tokenId);\\n    }\\n\\n    /// @notice Set the approval for an operator to manage all the tokens of the msgSender\\n    /// @param operator The address receiving the approval\\n    /// @param approved The determination of the approval\\n    function setApprovalForAll(\\n        address operator,\\n        bool approved\\n    ) external override onlyAllowedOperatorApproval(operator) {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /// @notice Set the approval for an operator to manage all the tokens of the sender (may differ from msgSender)\\n    /// @param sender The address giving the approval\\n    /// @param operator The address receiving the approval\\n    /// @param approved The determination of the approval\\n    function setApprovalForAllFor(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) external onlyAllowedOperatorApproval(operator) {\\n        _setApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @notice Approve an operator to spend tokens on the sender behalf\\n    /// @param operator The address receiving the approval\\n    /// @param tokenId The id of the token\\n    function approve(address operator, uint256 tokenId) external override onlyAllowedOperatorApproval(operator) {\\n        _approveFor(_msgSender(), operator, tokenId);\\n    }\\n\\n    /// @notice Transfer a token between 2 addresses\\n    /// @param from The sender of the token\\n    /// @param to The recipient of the token\\n    /// @param tokenId The id of the token\\n    function transferFrom(address from, address to, uint256 tokenId) external override onlyAllowedOperator(from) {\\n        _transferFrom(from, to, tokenId);\\n    }\\n\\n    /// @notice Transfer many tokens between 2 addresses.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param ids The ids of the tokens.\\n    /// @param data Additional data.\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external virtual override onlyAllowedOperator(from) {\\n        _batchTransferFrom(from, to, ids, data, false);\\n    }\\n\\n    /// @notice Transfer a token between 2 addresses letting the receiver know of the transfer\\n    /// @param from The sender of the token\\n    /// @param to The recipient of the token\\n    /// @param tokenId The id of the token\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external override onlyAllowedOperator(from) {\\n        _safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /// @notice Transfer a token between 2 addresses letting the receiver know of the transfer\\n    /// @param from The sender of the token\\n    /// @param to The recipient of the token\\n    /// @param tokenId The id of the token\\n    /// @param data Additional data\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) external override onlyAllowedOperator(from) {\\n        _safeTransferFrom(from, to, tokenId, data);\\n    }\\n\\n    /// @notice Transfer many tokens between 2 addresses, while\\n    /// ensuring the receiving contract has a receiver method.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param ids The ids of the tokens.\\n    /// @param data Additional data.\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external virtual onlyAllowedOperator(from) {\\n        _batchTransferFrom(from, to, ids, data, true);\\n    }\\n\\n    /// @notice Check if the contract supports an interface\\n    /// @param interfaceId The id of the interface\\n    /// @return True if the interface is supported\\n    function supportsInterface(bytes4 interfaceId) public pure override returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721BatchOps).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            interfaceId == type(IERC165).interfaceId ||\\n            interfaceId == type(IERC173).interfaceId ||\\n            interfaceId == type(IERC2981).interfaceId ||\\n            interfaceId == type(ILandToken).interfaceId ||\\n            interfaceId == type(ILandToken).interfaceId ^ type(IQuad).interfaceId ||\\n            interfaceId == type(IQuad).interfaceId ||\\n            interfaceId == type(ILandMetadataRegistry).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd85ba9c574d0017835f1eae745b260c054e565926f02bbff207547e8dcb2c5e0\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/land/contracts/common/LandBaseToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {IErrors} from \\\"../interfaces/IErrors.sol\\\";\\nimport {ILandToken} from \\\"../interfaces/ILandToken.sol\\\";\\nimport {ERC721BaseToken} from \\\"../common/ERC721BaseToken.sol\\\";\\n\\n/// @title LandBaseToken\\n/// @author The Sandbox\\n/// @custom:security-contact contact-blockchain@sandbox.game\\n/// @notice Implement LAND and quad functionalities on top of an ERC721 token\\n/// @dev This contract implements a quad tree structure to handle groups of ERC721 tokens at once\\nabstract contract LandBaseToken is IErrors, ILandToken, ERC721BaseToken {\\n    using Address for address;\\n\\n    /// @notice the coordinates are invalid\\n    /// @param size The size of the quad\\n    /// @param x The bottom left x coordinate of the quad\\n    /// @param y The bottom left y coordinate of the quad\\n    error InvalidCoordinates(uint256 size, uint256 x, uint256 y);\\n\\n    /// @notice is not the owner of the quad\\n    /// @param x The bottom left x coordinate of the quad\\n    /// @param y The bottom left y coordinate of the quad\\n    error NotOwner(uint256 x, uint256 y);\\n\\n    /// @notice the token is already minted\\n    /// @param tokenId the id of land\\n    error AlreadyMinted(uint256 tokenId);\\n\\n    uint256 internal constant GRID_SIZE = 408;\\n\\n    /* solhint-disable const-name-snakecase */\\n    uint256 internal constant LAYER = 0xFF00000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_1x1 = 0x0000000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_3x3 = 0x0100000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_6x6 = 0x0200000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_12x12 = 0x0300000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_24x24 = 0x0400000000000000000000000000000000000000000000000000000000000000;\\n    /* solhint-enable const-name-snakecase */\\n\\n    /// @notice emitted when a minter right is changed.\\n    /// @param minter address that will be given/removed minter right.\\n    /// @param enabled set whether the minter is enabled or disabled.\\n    event Minter(address indexed minter, bool enabled);\\n\\n    /// @dev helper struct to store arguments in memory instead of the stack.\\n    struct Land {\\n        uint256 x;\\n        uint256 y;\\n        uint256 size;\\n    }\\n\\n    /// @notice transfer multiple quad (aligned to a quad tree with size 3, 6, 12 or 24 only)\\n    /// @param from current owner of the quad\\n    /// @param to destination\\n    /// @param sizes list of sizes for each quad\\n    /// @param xs list of bottom left x coordinates for each quad\\n    /// @param ys list of bottom left y coordinates for each quad\\n    /// @param data additional data\\n    function batchTransferQuad(\\n        address from,\\n        address to,\\n        uint256[] calldata sizes,\\n        uint256[] calldata xs,\\n        uint256[] calldata ys,\\n        bytes calldata data\\n    ) external override {\\n        if (from == address(0) || to == address(0)) {\\n            revert InvalidAddress();\\n        }\\n        if (sizes.length != xs.length || xs.length != ys.length) {\\n            revert InvalidLength();\\n        }\\n        address msgSender = _msgSender();\\n        if (msgSender != from && !_isApprovedForAllOrSuperOperator(from, msgSender)) {\\n            revert ERC721InvalidOwner(msgSender);\\n        }\\n        uint256 numTokensTransferred = 0;\\n        for (uint256 i = 0; i < sizes.length; i++) {\\n            uint256 size = sizes[i];\\n            _isValidQuad(size, xs[i], ys[i]);\\n            _transferQuad(from, to, size, xs[i], ys[i]);\\n            numTokensTransferred += size * size;\\n        }\\n        _transferNumNFTPerAddress(from, to, numTokensTransferred);\\n\\n        if (to.code.length > 0 && _checkIERC721MandatoryTokenReceiver(to)) {\\n            uint256[] memory ids = new uint256[](numTokensTransferred);\\n            uint256 counter = 0;\\n            for (uint256 j = 0; j < sizes.length; j++) {\\n                uint256 size = sizes[j];\\n                for (uint256 i = 0; i < size * size; i++) {\\n                    ids[counter] = _idInPath(i, size, xs[j], ys[j]);\\n                    counter++;\\n                }\\n            }\\n            _checkOnERC721BatchReceived(msgSender, from, to, ids, data);\\n        }\\n    }\\n\\n    /// @notice transfer one quad (aligned to a quad tree with size 3, 6, 12 or 24 only)\\n    /// @param from current owner of the quad\\n    /// @param to destination\\n    /// @param size The size of the quad\\n    /// @param x The bottom left x coordinate of the quad\\n    /// @param y The bottom left y coordinate of the quad\\n    /// @param data additional data for transfer\\n    function transferQuad(\\n        address from,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes calldata data\\n    ) external override {\\n        address msgSender = _msgSender();\\n        if (from == address(0) || to == address(0)) {\\n            revert InvalidAddress();\\n        }\\n        if (msgSender != from && !_isApprovedForAllOrSuperOperator(from, msgSender)) {\\n            revert ERC721InvalidOwner(msgSender);\\n        }\\n        _isValidQuad(size, x, y);\\n        _transferQuad(from, to, size, x, y);\\n        _transferNumNFTPerAddress(from, to, size * size);\\n        _checkBatchReceiverAcceptQuad(msgSender, from, to, size, x, y, data);\\n    }\\n\\n    /// @notice Mint a new quad (aligned to a quad tree with size 1, 3, 6, 12 or 24 only)\\n    /// @param to The recipient of the new quad\\n    /// @param size The size of the new quad\\n    /// @param x The bottom left x coordinate of the new quad\\n    /// @param y The bottom left y coordinate of the new quad\\n    /// @param data extra data to pass to the transfer\\n    function mintQuad(address to, uint256 size, uint256 x, uint256 y, bytes memory data) external virtual override {\\n        address msgSender = _msgSender();\\n        if (!_isMinter(msgSender)) {\\n            revert ERC721InvalidOwner(msgSender);\\n        }\\n        _isValidQuad(size, x, y);\\n        _mintQuad(msgSender, to, size, x, y, data);\\n    }\\n\\n    /// @notice Checks if a parent quad has child quads already minted.\\n    /// @notice Then mints the rest child quads and transfers the parent quad.\\n    /// @notice Should only be called by the tunnel.\\n    /// @param to The recipient of the new quad\\n    /// @param size The size of the new quad\\n    /// @param x The bottom left x coordinate of the new quad\\n    /// @param y The bottom left y coordinate of the new quad\\n    /// @param data extra data to pass to the transfer\\n    function mintAndTransferQuad(address to, uint256 size, uint256 x, uint256 y, bytes calldata data) external virtual {\\n        address msgSender = _msgSender();\\n        if (!_isMinter(msgSender)) {\\n            revert ERC721InvalidOwner(msgSender);\\n        }\\n        if (to == address(0)) {\\n            revert InvalidAddress();\\n        }\\n\\n        _isValidQuad(size, x, y);\\n        if (_ownerOfQuad(size, x, y) != address(0)) {\\n            _transferQuad(msgSender, to, size, x, y);\\n            _transferNumNFTPerAddress(msgSender, to, size * size);\\n            _checkBatchReceiverAcceptQuad(msgSender, msgSender, to, size, x, y, data);\\n        } else {\\n            _mintAndTransferQuad(msgSender, to, size, x, y, data);\\n        }\\n    }\\n\\n    /// @notice x coordinate of Land token\\n    /// @param tokenId the id of land\\n    /// @return the x coordinates\\n    function getX(uint256 tokenId) external pure returns (uint256) {\\n        return _getX(tokenId);\\n    }\\n\\n    /// @notice y coordinate of Land token\\n    /// @param tokenId the id of land\\n    /// @return the y coordinates\\n    function getY(uint256 tokenId) external pure returns (uint256) {\\n        return _getY(tokenId);\\n    }\\n\\n    /// @notice Return the name of the token contract\\n    /// @return The name of the token contract\\n    function name() external pure virtual returns (string memory) {\\n        return \\\"Sandbox's LANDs\\\";\\n    }\\n\\n    /// @notice check whether address `who` is given minter rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has minter rights.\\n    function isMinter(address who) external view virtual returns (bool) {\\n        return _isMinter(who);\\n    }\\n\\n    /// @notice checks if Land has been minted or not\\n    /// @param size The size of the quad\\n    /// @param x The bottom left x coordinate of the quad\\n    /// @param y The bottom left y coordinate of the quad\\n    /// @return bool for if Land has been minted or not\\n    function exists(uint256 size, uint256 x, uint256 y) external view virtual override returns (bool) {\\n        _isValidQuad(size, x, y);\\n        return _ownerOfQuad(size, x, y) != address(0);\\n    }\\n\\n    /// @notice Return the symbol of the token contract\\n    /// @return The symbol of the token contract\\n    function symbol() external pure virtual returns (string memory) {\\n        return \\\"LAND\\\";\\n    }\\n\\n    /// @notice total width of the map\\n    /// @return width\\n    function width() external pure virtual returns (uint256) {\\n        return GRID_SIZE;\\n    }\\n\\n    /// @notice total height of the map\\n    /// @return height\\n    function height() public pure returns (uint256) {\\n        return GRID_SIZE;\\n    }\\n\\n    /// @notice Return the URI of a specific token\\n    /// @param tokenId The id of the token\\n    /// @return The URI of the token\\n    function tokenURI(uint256 tokenId) external view virtual returns (string memory) {\\n        if (_ownerOf(tokenId) == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return string(abi.encodePacked(\\\"https://api.sandbox.game/lands/\\\", Strings.toString(tokenId), \\\"/metadata.json\\\"));\\n    }\\n\\n    /// @notice Check size and coordinate of a quad\\n    /// @param size The size of the quad\\n    /// @param x The bottom left x coordinate of the quad\\n    /// @param y The bottom left y coordinate of the quad\\n    /// @dev after calling this function we can safely use unchecked math for x,y,size\\n    function _isValidQuad(uint256 size, uint256 x, uint256 y) internal pure {\\n        if (size != 1 && size != 3 && size != 6 && size != 12 && size != 24) {\\n            revert InvalidCoordinates(size, x, y);\\n        }\\n        if (x % size != 0 || y % size != 0 || x > GRID_SIZE - size || y > GRID_SIZE - size) {\\n            revert InvalidCoordinates(size, x, y);\\n        }\\n    }\\n\\n    /// @param from current owner of the quad\\n    /// @param to destination\\n    /// @param size The size of the quad\\n    /// @param x The bottom left x coordinate of the quad\\n    /// @param y The bottom left y coordinate of the quad\\n    function _transferQuad(address from, address to, uint256 size, uint256 x, uint256 y) internal {\\n        if (size == 1) {\\n            uint256 id1x1 = _getQuadId(LAYER_1x1, x, y);\\n            address owner = _ownerOf(id1x1);\\n            if (owner == address(0)) {\\n                revert NotOwner(x, y);\\n            }\\n            if (owner != from) {\\n                revert ERC721InvalidOwner(from);\\n            }\\n            _writeOwnerData(id1x1, uint160(to));\\n        } else {\\n            _regroupQuad(from, to, Land({x: x, y: y, size: size}), true, size / 2);\\n        }\\n        for (uint256 i = 0; i < size * size; i++) {\\n            emit Transfer(from, to, _idInPath(i, size, x, y));\\n        }\\n    }\\n\\n    /// @notice Mint a new quad\\n    /// @param msgSender The original sender of the transaction\\n    /// @param to The recipient of the new quad\\n    /// @param size The size of the new quad\\n    /// @param x The bottom left x coordinate of the new quad\\n    /// @param y The bottom left y coordinate of the new quad\\n    /// @param data extra data to pass to the transfer\\n    function _mintQuad(address msgSender, address to, uint256 size, uint256 x, uint256 y, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert InvalidAddress();\\n        }\\n\\n        (uint256 layer, , ) = _getQuadLayer(size);\\n        uint256 quadId = _getQuadId(layer, x, y);\\n\\n        _checkQuadIsNotMinted(size, x, y, 24);\\n        for (uint256 i = 0; i < size * size; i++) {\\n            uint256 _id = _idInPath(i, size, x, y);\\n            if (_readOwnerData(_id) != 0) {\\n                revert AlreadyMinted(_id);\\n            }\\n            emit Transfer(address(0), to, _id);\\n        }\\n\\n        _writeOwnerData(quadId, uint160(to));\\n        _addNumNFTPerAddress(to, size * size);\\n        _checkBatchReceiverAcceptQuad(msgSender, address(0), to, size, x, y, data);\\n    }\\n\\n    /// @notice checks if the child quads in the parent quad (size, x, y) are owned by msgSender.\\n    /// @param msgSender The original sender of the transaction\\n    /// @param to The address to which the ownership of the quad will be transferred\\n    /// @param size The size of the quad being minted and transferred\\n    /// @param x The x-coordinate of the top-left corner of the quad being minted.\\n    /// @param y The y-coordinate of the top-left corner of the quad being minted.\\n    /// @dev It recursively checks whether child quad of every size (excluding Lands of 1x1 size) are minted or not.\\n    /// @dev Quad which are minted are pushed into quadMinted to also check if every Land of size 1x1 in\\n    /// @dev the parent quad is minted or not. While checking if every child Quad and Land is minted it\\n    /// @dev also checks and clears the owner for quads which are minted. Finally it checks if the new owner\\n    /// @dev is a contract, can handle ERC-721 tokens, and transfers the parent quad to new owner.\\n    function _mintAndTransferQuad(\\n        address msgSender,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes memory data\\n    ) internal {\\n        (uint256 layer, , ) = _getQuadLayer(size);\\n        uint256 quadId = _getQuadId(layer, x, y);\\n\\n        // Length of array is equal to number of 3x3 child quad a 24x24 quad can have. Would be used to push the minted Quads.\\n        Land[] memory quadMinted = new Land[](64);\\n        // index of last minted quad pushed on quadMinted Array\\n        uint256 index = 0;\\n        uint256 landMinted = 0;\\n\\n        // if size of the Quad in land struct to be transferred is greater than 3 we check recursively if the child quads are minted or not.\\n        if (size > 3) {\\n            (index, landMinted) = _checkQuadIsNotMintedAndClearOwner(\\n                msgSender,\\n                Land({x: x, y: y, size: size}),\\n                quadMinted,\\n                landMinted,\\n                index,\\n                size / 2\\n            );\\n        }\\n\\n        // Looping around the Quad in land struct to generate ids of 1x1 land token and checking if they are owned by msg.sender\\n        for (uint256 i = 0; i < size * size; i++) {\\n            uint256 _id = _idInPath(i, size, x, y);\\n            // checking land with token id \\\"_id\\\" is in the quadMinted array.\\n            bool isAlreadyMinted = _isQuadMinted(quadMinted, Land({x: _getX(_id), y: _getY(_id), size: 1}), index);\\n            if (isAlreadyMinted) {\\n                // if land is in the quadMinted array, emit transfer event\\n                emit Transfer(msgSender, to, _id);\\n            } else {\\n                if (_getOwnerAddress(_id) == msgSender) {\\n                    if (_readOperator(_id) != address(0)) _writeOperator(_id, address(0));\\n                    landMinted += 1;\\n                    emit Transfer(msgSender, to, _id);\\n                } else {\\n                    // else check if owned by the msgSender or not. If it is not owned by msgSender it should not have an owner.\\n                    if (_readOwnerData(_id) != 0) {\\n                        revert AlreadyMinted(_id);\\n                    }\\n\\n                    emit Transfer(address(0), to, _id);\\n                }\\n            }\\n        }\\n\\n        // checking if the new owner \\\"to\\\" is a contract. If yes, checking if it could handle ERC721 tokens.\\n        _checkBatchReceiverAcceptQuadAndClearOwner(msgSender, quadMinted, index, landMinted, to, size, x, y, data);\\n\\n        _writeOwnerData(quadId, uint160(to));\\n        _addNumNFTPerAddress(to, size * size);\\n        _subNumNFTPerAddress(msgSender, landMinted);\\n    }\\n\\n    /// @notice recursively checks if the child quads are minted.\\n    /// @param size The size of the quad\\n    /// @param x The x-coordinate of the top-left corner of the quad being minted.\\n    /// @param y The y-coordinate of the top-left corner of the quad being minted.\\n    /// @param quadCompareSize the size of the child quads to be checked.\\n    function _checkQuadIsNotMinted(uint256 size, uint256 x, uint256 y, uint256 quadCompareSize) internal {\\n        (uint256 layer, , ) = _getQuadLayer(quadCompareSize);\\n\\n        if (size <= quadCompareSize) {\\n            // when the size of the quad is smaller than the quadCompareSize(size to be compared with),\\n            // then it is checked if the bigger quad which encapsulates the quad to be minted\\n            // of with size equals the quadCompareSize has been minted or not\\n            uint256 id = _getQuadId(\\n                layer,\\n                (x / quadCompareSize) * quadCompareSize,\\n                (y / quadCompareSize) * quadCompareSize\\n            );\\n            if (_readOwnerData(id) != 0) {\\n                revert AlreadyMinted(id);\\n            }\\n        } else {\\n            // when the size is greater than the quadCompare size the owner of all the greater quads with size\\n            // quadCompare size in the quad to be minted are checked if they are minted or not\\n            uint256 toX = x + size;\\n            uint256 toY = y + size;\\n            for (uint256 xi = x; xi < toX; xi += quadCompareSize) {\\n                for (uint256 yi = y; yi < toY; yi += quadCompareSize) {\\n                    uint256 id = _getQuadId(layer, xi, yi);\\n                    if (_readOwnerData(id) != 0) {\\n                        revert AlreadyMinted(id);\\n                    }\\n                }\\n            }\\n        }\\n\\n        quadCompareSize = quadCompareSize / 2;\\n        if (quadCompareSize >= 3) _checkQuadIsNotMinted(size, x, y, quadCompareSize);\\n    }\\n\\n    /// @notice recursively checks if the child quads are minted in land and push them to the quadMinted array.\\n    /// @param msgSender The original sender of the transaction\\n    /// @param land the struct which has the size x and y co-ordinate of Quad to be checked\\n    /// @param quadMinted array in which the minted child quad would be pushed\\n    /// @param landMinted total 1x1 land already minted\\n    /// @param index index of last element of quadMinted array\\n    /// @param quadCompareSize the size of the child quads to be checked.\\n    /// @return the index of last quad pushed in quadMinted array and the total land already minted\\n    /// @dev if a child quad is minted in land such quads child quads will be skipped such that there is no overlapping\\n    /// @dev in quads which are minted. it clears the minted child quads owners.\\n    function _checkQuadIsNotMintedAndClearOwner(\\n        address msgSender,\\n        Land memory land,\\n        Land[] memory quadMinted,\\n        uint256 landMinted,\\n        uint256 index,\\n        uint256 quadCompareSize\\n    ) internal returns (uint256, uint256) {\\n        (uint256 layer, , ) = _getQuadLayer(quadCompareSize);\\n        uint256 toX = land.x + land.size;\\n        uint256 toY = land.y + land.size;\\n\\n        // Looping around the Quad in land struct to check if the child quad are minted or not\\n        for (uint256 xi = land.x; xi < toX; xi += quadCompareSize) {\\n            for (uint256 yi = land.y; yi < toY; yi += quadCompareSize) {\\n                //checking if the child Quad is minted or not. i.e Checks if the quad is in the quadMinted array.\\n                bool isQuadChecked = _isQuadMinted(quadMinted, Land({x: xi, y: yi, size: quadCompareSize}), index);\\n                // if child quad is not already in the quadMinted array.\\n                if (!isQuadChecked) {\\n                    uint256 id = _getQuadId(layer, xi, yi);\\n                    address owner = _getOwnerAddress(id);\\n                    // owner of the child quad is checked to be owned by msgSender else should not be owned by anyone.\\n                    if (owner == msgSender) {\\n                        // if child quad is minted it would be pushed in quadMinted array.\\n                        quadMinted[index] = Land({x: xi, y: yi, size: quadCompareSize});\\n                        // index of quadMinted is increased\\n                        index++;\\n                        // total land minted is increase by the number if land of 1x1 in child quad\\n                        landMinted += quadCompareSize * quadCompareSize;\\n                        //owner is cleared\\n                        _writeOwnerData(id, 0);\\n                    } else {\\n                        if (owner != address(0)) {\\n                            revert AlreadyMinted(id);\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n\\n        // size of the child quad is set to be the next smaller child quad size (12 => 6 => 3)\\n        quadCompareSize = quadCompareSize / 2;\\n        // if child quad size is greater than 3 _checkAndClearOwner is checked for new child quads in the  quad in land struct.\\n        if (quadCompareSize >= 3)\\n            (index, landMinted) = _checkQuadIsNotMintedAndClearOwner(\\n                msgSender,\\n                land,\\n                quadMinted,\\n                landMinted,\\n                index,\\n                quadCompareSize\\n            );\\n        return (index, landMinted);\\n    }\\n\\n    /// @dev checks the owner of land with 'tokenId' to be 'from' and clears it\\n    /// @param from the address to be checked against the owner of the land\\n    /// @param x The x-coordinate of the top-left corner of the quad being minted.\\n    /// @param y The y-coordinate of the top-left corner of the quad being minted.\\n    /// @return bool for if land is owned by 'from' or not.\\n    function _checkAndClearLandOwner(address from, uint256 x, uint256 y) internal returns (bool) {\\n        uint256 tokenId = _getQuadId(LAYER_1x1, x, y);\\n        uint256 currentOwner = _readOwnerData(tokenId);\\n        if (currentOwner != 0) {\\n            if ((currentOwner & BURNED_FLAG) == BURNED_FLAG) {\\n                revert NotOwner(x, y);\\n            }\\n            if (address(uint160(currentOwner)) != from) {\\n                revert ERC721InvalidOwner(from);\\n            }\\n            _writeOwnerData(tokenId, 0);\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function _checkBatchReceiverAcceptQuad(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length > 0 && _checkIERC721MandatoryTokenReceiver(to)) {\\n            uint256[] memory ids = new uint256[](size * size);\\n            for (uint256 i = 0; i < size * size; i++) {\\n                ids[i] = _idInPath(i, size, x, y);\\n            }\\n            _checkOnERC721BatchReceived(operator, from, to, ids, data);\\n        }\\n    }\\n\\n    /// @param msgSender The original sender of the transaction\\n    /// @param quadMinted - an array of Land structs in which the minted child quad or Quad to be transferred are.\\n    /// @param landMinted - the total amount of land that has been minted\\n    /// @param index - the index of the last element in the quadMinted array\\n    /// @param to the address of the new owner of Quad to be transferred\\n    /// @param size The size of the quad\\n    /// @param x The x-coordinate of the top-left corner of the quad being minted.\\n    /// @param y The y-coordinate of the top-left corner of the quad being minted.\\n    /// @dev checks if the receiver of the quad(size, x, y) is a contact. If yes can it handle ERC721 tokens. It also clears owner of 1x1 land's owned by msgSender.\\n    function _checkBatchReceiverAcceptQuadAndClearOwner(\\n        address msgSender,\\n        Land[] memory quadMinted,\\n        uint256 index,\\n        uint256 landMinted,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes memory data\\n    ) internal {\\n        // checks if to is a contract and supports ERC721_MANDATORY_RECEIVER interfaces. if it doesn't it just clears the owner of 1x1 lands in quad(size, x, y)\\n        if (to.code.length > 0 && _checkIERC721MandatoryTokenReceiver(to)) {\\n            // array to push minted 1x1 land\\n            uint256[] memory idsToTransfer = new uint256[](landMinted);\\n            // index of last land pushed in idsToTransfer array\\n            uint256 transferIndex = 0;\\n            // array to push ids to be minted\\n            uint256[] memory idsToMint = new uint256[]((size * size) - landMinted);\\n            // index of last land pushed in idsToMint array\\n            uint256 mintIndex = 0;\\n\\n            // iterating over every 1x1 land in the quad to be pushed in the above arrays\\n            for (uint256 i = 0; i < size * size; i++) {\\n                uint256 id = _idInPath(i, size, x, y);\\n\\n                if (_isQuadMinted(quadMinted, Land({x: _getX(id), y: _getY(id), size: 1}), index)) {\\n                    // if land is in the quads already minted it just pushed in to the idsToTransfer array\\n                    idsToTransfer[transferIndex] = id;\\n                    transferIndex++;\\n                } else if (_getOwnerAddress(id) == msgSender) {\\n                    // if it is owned by the msgSender owner data is removed and it is pushed in to idsToTransfer array\\n                    _writeOwnerData(id, 0);\\n                    idsToTransfer[transferIndex] = id;\\n                    transferIndex++;\\n                } else {\\n                    // else it is not owned by any one and and pushed in the idsToMint array\\n                    idsToMint[mintIndex] = id;\\n                    mintIndex++;\\n                }\\n            }\\n\\n            // checking if \\\"to\\\" contact can handle ERC721 tokens\\n            _checkOnERC721BatchReceived(msgSender, address(0), to, idsToMint, data);\\n            _checkOnERC721BatchReceived(msgSender, msgSender, to, idsToTransfer, data);\\n        } else {\\n            for (uint256 i = 0; i < size * size; i++) {\\n                uint256 id = _idInPath(i, size, x, y);\\n                if (_getOwnerAddress(id) == msgSender) _writeOwnerData(id, 0);\\n            }\\n        }\\n    }\\n\\n    /// @notice x coordinate of Land token\\n    /// @param tokenId The token id\\n    /// @return the x coordinates\\n    function _getX(uint256 tokenId) internal pure returns (uint256) {\\n        return (tokenId & ~LAYER) % GRID_SIZE;\\n    }\\n\\n    /// @notice y coordinate of Land token\\n    /// @param tokenId The token id\\n    /// @return the y coordinates\\n    function _getY(uint256 tokenId) internal pure returns (uint256) {\\n        return (tokenId & ~LAYER) / GRID_SIZE;\\n    }\\n\\n    /// @notice check if a quad is in the array of minted lands\\n    /// @param quad the quad that will be searched through mintedLand\\n    /// @param quadMinted array of quads that are minted in the current transaction\\n    /// @param index the amount of entries in mintedQuad\\n    /// @return true if a quad is minted\\n    function _isQuadMinted(Land[] memory quadMinted, Land memory quad, uint256 index) internal pure returns (bool) {\\n        for (uint256 i = 0; i < index; i++) {\\n            Land memory land = quadMinted[i];\\n            if (\\n                land.size > quad.size &&\\n                quad.x >= land.x &&\\n                quad.x < land.x + land.size &&\\n                quad.y >= land.y &&\\n                quad.y < land.y + land.size\\n            ) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @notice get size related information (there is one-to-one relationship between layer and size)\\n    /// @param size The size of the quad\\n    /// @return layer the layers that corresponds to the size\\n    /// @return parentSize the size of the parent (bigger quad that contains the current one)\\n    /// @return childLayer the layer of the child (smaller quad contained by this one)\\n    function _getQuadLayer(uint256 size) internal pure returns (uint256 layer, uint256 parentSize, uint256 childLayer) {\\n        if (size == 1) {\\n            layer = LAYER_1x1;\\n            parentSize = 3;\\n        } else if (size == 3) {\\n            layer = LAYER_3x3;\\n            parentSize = 6;\\n        } else if (size == 6) {\\n            layer = LAYER_6x6;\\n            parentSize = 12;\\n            childLayer = LAYER_3x3;\\n        } else if (size == 12) {\\n            layer = LAYER_12x12;\\n            parentSize = 24;\\n            childLayer = LAYER_6x6;\\n        } else {\\n            layer = LAYER_24x24;\\n            childLayer = LAYER_12x12;\\n        }\\n    }\\n\\n    /// @notice get the quad id given the layer and coordinates.\\n    /// @param layer the layer of the quad see: _getQuadLayer\\n    /// @param x The bottom left x coordinate of the quad\\n    /// @param y The bottom left y coordinate of the quad\\n    /// @return the tokenId of the quad\\n    /// @dev this method is gas optimized, must be called with verified x,y and size, after a call to _isValidQuad\\n    function _getQuadId(uint256 layer, uint256 x, uint256 y) internal pure returns (uint256) {\\n        unchecked {\\n            return layer + x + y * GRID_SIZE;\\n        }\\n    }\\n\\n    /// @notice return the quadId given and index, size and coordinates\\n    /// @param i the index to be added to x,y to get row and column\\n    /// @param size The bottom left x coordinate of the quad\\n    /// @param x The bottom left x coordinate of the quad\\n    /// @param y The bottom left y coordinate of the quad\\n    /// @return the tokenId of the quad\\n    /// @dev this method is gas optimized, must be called with verified x,y and size, after a call to _isValidQuad\\n    function _idInPath(uint256 i, uint256 size, uint256 x, uint256 y) internal pure returns (uint256) {\\n        unchecked {\\n            // This is an inlined/optimized version of: _getQuadId(LAYER_1x1, x + (i % size), y + (i / size))\\n            return (x + (i % size)) + (y + (i / size)) * GRID_SIZE;\\n        }\\n    }\\n\\n    /// @notice checks if the Land's child quads are owned by the from address and clears all the previous owners\\n    /// @param from address of the previous owner\\n    /// @param to address of the new owner\\n    /// @param land the quad to be regrouped and transferred\\n    /// @param set for setting the new owner\\n    /// @param childQuadSize  size of the child quad to be checked for owner in the regrouping\\n    /// @dev if all the child quads are not owned by the \\\"from\\\" address then the owner of parent quad to the land\\n    /// @dev is checked if owned by the \\\"from\\\" address. If from is the owner then land owner is set to \\\"to\\\" address\\n    function _regroupQuad(\\n        address from,\\n        address to,\\n        Land memory land,\\n        bool set,\\n        uint256 childQuadSize\\n    ) internal returns (bool) {\\n        (uint256 layer, , uint256 childLayer) = _getQuadLayer(land.size);\\n        uint256 quadId = _getQuadId(layer, land.x, land.y);\\n        bool ownerOfAll = true;\\n\\n        // double for loop iterates and checks owner of all the smaller quads in land\\n        for (uint256 xi = land.x; xi < land.x + land.size; xi += childQuadSize) {\\n            for (uint256 yi = land.y; yi < land.y + land.size; yi += childQuadSize) {\\n                uint256 ownerChild = 0;\\n                bool ownAllIndividual = false;\\n                if (childQuadSize < 3) {\\n                    // case when the smaller quad is 1x1,\\n                    ownAllIndividual = _checkAndClearLandOwner(from, xi, yi) && ownerOfAll;\\n                } else {\\n                    // recursively calling the _regroupQuad function to check the owner of child quads.\\n                    ownAllIndividual = _regroupQuad(\\n                        from,\\n                        to,\\n                        Land({x: xi, y: yi, size: childQuadSize}),\\n                        false,\\n                        childQuadSize / 2\\n                    );\\n                    uint256 idChild = _getQuadId(childLayer, xi, yi);\\n                    ownerChild = _readOwnerData(idChild);\\n                    if (ownerChild != 0) {\\n                        // checking the owner of child quad\\n                        if (!ownAllIndividual && ownerChild != uint256(uint160(from))) {\\n                            revert NotOwner(xi, yi);\\n                        }\\n                        // clearing owner of child quad\\n                        _writeOwnerData(idChild, 0);\\n                    }\\n                }\\n                // ownerOfAll should be true if \\\"from\\\" is owner of all the child quads iterated over\\n                ownerOfAll = (ownAllIndividual || ownerChild != 0) && ownerOfAll;\\n            }\\n        }\\n\\n        // if set is true it check if the \\\"from\\\" is owner of all else checks for the owner of parent quad is\\n        // owned by \\\"from\\\" and sets the owner for the id of land to \\\"to\\\" address.\\n        if (set) {\\n            if (!ownerOfAll && _ownerOfQuad(land.size, land.x, land.y) != from) {\\n                revert ERC721InvalidOwner(from);\\n            }\\n            _writeOwnerData(quadId, uint160(to));\\n            return true;\\n        }\\n\\n        return ownerOfAll;\\n    }\\n\\n    /// @notice return the owner of a quad given his size and coordinates or zero if is not minted yet.\\n    /// @param size The size of the quad\\n    /// @param x coordinate inside the quad\\n    /// @param y coordinate inside the quad\\n    /// @return the address of the owner\\n    function _ownerOfQuad(uint256 size, uint256 x, uint256 y) internal view returns (address) {\\n        (uint256 layer, uint256 parentSize, ) = _getQuadLayer(size);\\n        address owner = _getOwnerAddress(_getQuadId(layer, (x / size) * size, (y / size) * size));\\n        if (owner != address(0)) {\\n            return owner;\\n        } else if (size < 24) {\\n            return _ownerOfQuad(parentSize, x, y);\\n        }\\n        return address(0);\\n    }\\n\\n    /// @notice Get the owner and operatorEnabled flag of a token.\\n    /// @param tokenId The token to query.\\n    /// @return owner The owner of the token.\\n    /// @return operatorEnabled Whether or not operators are enabled for this token.\\n    function _ownerAndOperatorEnabledOf(\\n        uint256 tokenId\\n    ) internal view override returns (address owner, bool operatorEnabled) {\\n        if (tokenId & LAYER != 0) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        uint256 x = tokenId % GRID_SIZE;\\n        uint256 y = tokenId / GRID_SIZE;\\n        uint256 owner1x1 = _readOwnerData(tokenId);\\n\\n        if ((owner1x1 & BURNED_FLAG) == BURNED_FLAG) {\\n            owner = address(0);\\n            operatorEnabled = (owner1x1 & OPERATOR_FLAG) == OPERATOR_FLAG;\\n            return (owner, operatorEnabled);\\n        }\\n\\n        if (owner1x1 != 0) {\\n            owner = address(uint160(owner1x1));\\n            operatorEnabled = (owner1x1 & OPERATOR_FLAG) == OPERATOR_FLAG;\\n        } else {\\n            owner = _ownerOfQuad(3, x, y);\\n            operatorEnabled = false;\\n        }\\n    }\\n\\n    /// @notice Enable or disable the ability of `minter` to mint tokens\\n    /// @param minter address that will be given/removed minter right.\\n    /// @param enabled set whether the minter is enabled or disabled.\\n    function _setMinter(address minter, bool enabled) internal {\\n        if (minter == address(0)) {\\n            revert InvalidAddress();\\n        }\\n        if (enabled == _isMinter(minter)) {\\n            revert InvalidArgument();\\n        }\\n        _writeMinter(minter, enabled);\\n        emit Minter(minter, enabled);\\n    }\\n\\n    /// @notice checks if an address is enabled as minter\\n    /// @param minter the address to check\\n    /// @return true if the address is a minter\\n    function _isMinter(address minter) internal view virtual returns (bool);\\n\\n    /// @notice set an address as minter\\n    /// @param minter the address to set\\n    /// @param enabled true enable the address, false disable it.\\n    function _writeMinter(address minter, bool enabled) internal virtual;\\n}\\n\",\"keccak256\":\"0xfc1db9619e08d974057b9364aa90c818b915875375ca64d53fbaace6dcc9dd8e\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/land/contracts/common/OperatorFiltererUpgradeable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.23;\\n\\nimport {IOperatorFilterRegistry} from \\\"../interfaces/IOperatorFilterRegistry.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title OperatorFiltererUpgradeable\\n/// @author The Sandbox\\n/// @custom:security-contact contact-blockchain@sandbox.game\\n/// @notice This contract would subscribe or copy or just to the subscription provided or just register to default subscription list\\n/// @dev This contract is the upgradeable version of the OpenSea implementation https://github.com/ProjectOpenSea/operator-filter-registry/blob/main/src/OperatorFilterer.sol and adapted to the 0.5.9 solidity version\\nabstract contract OperatorFiltererUpgradeable is Context {\\n    /// @notice emitted when a registry is set\\n    /// @param registry address of the registry to set\\n    event OperatorRegistrySet(IOperatorFilterRegistry indexed registry);\\n\\n    /// @notice emitted when the contract is registered into the registry\\n    /// @param subscriptionOrRegistrant address to subscribe or copy entries from\\n    /// @param subscribe should it subscribe\\n    event ContractRegistered(address indexed subscriptionOrRegistrant, bool subscribe);\\n\\n    /// @notice the caller is not the operator\\n    error OperatorNotAllowed();\\n\\n    /// @notice Used in approval operations to check if the operator is allowed to call this contract\\n    /// @param operator The address receiving the approval\\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\\n        _checkIsOperatorAllowed(address(this), operator);\\n        _;\\n    }\\n\\n    /// @notice Used in transfer from operations to check if the sender of the token is allowed to call this contract\\n    /// @param from the sender of the token\\n    modifier onlyAllowedOperator(address from) virtual {\\n        // Allow spending tokens from addresses with balance (from == _msgSender())\\n        // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\\n        // from an EOA.\\n        if (from != _msgSender()) {\\n            _checkIsOperatorAllowed(address(this), _msgSender());\\n        }\\n        _;\\n    }\\n\\n    /// @notice return the address of the operator filter registry\\n    /// @return the address of  the operator filter registry\\n    function operatorFilterRegistry() external view returns (IOperatorFilterRegistry) {\\n        return _readOperatorFilterRegistry();\\n    }\\n\\n    /// @notice Register this contract into the registry\\n    /// @param subscriptionOrRegistrantToCopy address to subscribe or copy entries from\\n    /// @param subscribe should it subscribe\\n    function _register(address subscriptionOrRegistrantToCopy, bool subscribe) internal {\\n        IOperatorFilterRegistry registry = _readOperatorFilterRegistry();\\n        if (address(registry).code.length > 0) {\\n            if (!registry.isRegistered(address(this))) {\\n                if (subscribe) {\\n                    registry.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\\n                } else {\\n                    if (subscriptionOrRegistrantToCopy != address(0)) {\\n                        registry.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\\n                    } else {\\n                        registry.register(address(this));\\n                    }\\n                }\\n            }\\n        }\\n        emit ContractRegistered(subscriptionOrRegistrantToCopy, subscribe);\\n    }\\n\\n    /// @notice sets filter registry address deployed in test\\n    /// @param registry the address of the registry\\n    function _setOperatorRegistry(IOperatorFilterRegistry registry) internal {\\n        _writeOperatorFilterRegistry(registry);\\n        emit OperatorRegistrySet(registry);\\n    }\\n\\n    /// @notice Check if the operator is allowed for the given registrant\\n    /// @param registrant address of the registrant\\n    /// @param operator operator address to check\\n    function _checkIsOperatorAllowed(address registrant, address operator) internal view {\\n        IOperatorFilterRegistry registry = _readOperatorFilterRegistry();\\n        // Check registry code length to facilitate testing in environments without a deployed registry.\\n        if (address(registry).code.length > 0) {\\n            /* solhint-disable no-empty-blocks */\\n            try registry.isOperatorAllowed(registrant, operator) returns (bool retval) {\\n                if (retval) {\\n                    return;\\n                }\\n            } catch (bytes memory) {}\\n            /* solhint-enable  no-empty-blocks */\\n            revert OperatorNotAllowed();\\n        }\\n    }\\n\\n    /// @notice get the OpenSea operator filter\\n    /// @return the address of the OpenSea operator filter registry\\n    function _readOperatorFilterRegistry() internal view virtual returns (IOperatorFilterRegistry);\\n\\n    /// @notice set the OpenSea operator filter\\n    /// @param registry the address of the OpenSea operator filter registry\\n    function _writeOperatorFilterRegistry(IOperatorFilterRegistry registry) internal virtual;\\n}\\n\",\"keccak256\":\"0x9788ada75d6db684fa7e4802954bcdd020eb21bdca53f1389cb7e881bd5b1c47\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/land/contracts/common/WithAdmin.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport {IErrors} from \\\"../interfaces/IErrors.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title WithAdmin\\n/// @author The Sandbox\\n/// @custom:security-contact contact-blockchain@sandbox.game\\n/// @notice Add an admin to the contract\\nabstract contract WithAdmin is IErrors, Context {\\n    /// @notice Emits when the contract administrator is changed.\\n    /// @param oldAdmin The address of the previous administrator.\\n    /// @param newAdmin The address of the new administrator.\\n    event AdminChanged(address indexed oldAdmin, address indexed newAdmin);\\n\\n    /// @notice checks if the sender is admin\\n    modifier onlyAdmin() {\\n        if (_msgSender() != _readAdmin()) {\\n            revert OnlyAdmin();\\n        }\\n        _;\\n    }\\n\\n    /// @notice Get the current admin\\n    /// @dev Get the current administrator of this contract.\\n    /// @return The current administrator of this contract.\\n    function getAdmin() external view returns (address) {\\n        return _readAdmin();\\n    }\\n\\n    /// @notice Change the admin of the contract\\n    /// @dev Change the administrator to be `newAdmin`.\\n    /// @param newAdmin The address of the new administrator.\\n    function _changeAdmin(address newAdmin) internal {\\n        address oldAdmin = _readAdmin();\\n        if (oldAdmin == address(0)) {\\n            revert InvalidAddress();\\n        }\\n        if (oldAdmin == newAdmin) {\\n            revert InvalidArgument();\\n        }\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /// @notice Change the admin of the contract\\n    /// @dev Change the administrator to be `newAdmin`.\\n    /// @param newAdmin The address of the new administrator.\\n    function _setAdmin(address newAdmin) internal {\\n        if (newAdmin == address(0)) {\\n            revert InvalidAddress();\\n        }\\n        address oldAdmin = _readAdmin();\\n        emit AdminChanged(oldAdmin, newAdmin);\\n        _writeAdmin(newAdmin);\\n    }\\n\\n    /// @notice get the admin address\\n    /// @return the admin address\\n    ///@dev Implement\\n    function _readAdmin() internal view virtual returns (address);\\n\\n    /// @notice set the admin address\\n    /// @param admin the admin address\\n    ///@dev Implement\\n    function _writeAdmin(address admin) internal virtual;\\n}\\n\",\"keccak256\":\"0x85d6e8308a9579db3ac406bdcb7226240a764f710344ed6c08314c36302f87da\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/land/contracts/common/WithMetadataRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.23;\\n\\nimport {IErrors} from \\\"../interfaces/IErrors.sol\\\";\\nimport {ILandMetadataRegistry} from \\\"../interfaces/ILandMetadataRegistry.sol\\\";\\n\\n/// @title WithMetadataRegistry\\n/// @author The Sandbox\\n/// @custom:security-contact contact-blockchain@sandbox.game\\n/// @notice Add support for the metadata registry\\nabstract contract WithMetadataRegistry is IErrors {\\n    /// @notice value returned when the neighborhood is not set yet.\\n    string private constant UNKNOWN_NEIGHBORHOOD = \\\"unknown\\\";\\n\\n    /// @notice emitted when the metadata registry is set\\n    /// @param metadataRegistry the address of the metadata registry\\n    event MetadataRegistrySet(address indexed metadataRegistry);\\n\\n    struct MetadataRegistryStorage {\\n        ILandMetadataRegistry _metadataRegistry;\\n    }\\n\\n    /// @custom:storage-location erc7201:thesandbox.storage.land.common.WithMetadataRegistry\\n    bytes32 internal constant METADATA_REGISTRY_STORAGE_LOCATION =\\n        0x3899f13de39885dfce849839be8330453b5866928dd0e5933e36794349628400;\\n\\n    function _getMetadataRegistryStorage() private pure returns (MetadataRegistryStorage storage $) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            $.slot := METADATA_REGISTRY_STORAGE_LOCATION\\n        }\\n    }\\n\\n    /// @notice Get the address of the Metadata Registry\\n    /// @return The address of the Metadata Registry\\n    function getMetadataRegistry() external view returns (ILandMetadataRegistry) {\\n        MetadataRegistryStorage storage $ = _getMetadataRegistryStorage();\\n        return $._metadataRegistry;\\n    }\\n\\n    /// @notice return the metadata for one land\\n    /// @param tokenId the token id\\n    /// @return premium true if the land is premium\\n    /// @return neighborhoodId the number that identifies the neighborhood\\n    /// @return neighborhoodName the neighborhood name\\n    function getMetadata(uint256 tokenId) external view returns (bool, uint256, string memory) {\\n        ILandMetadataRegistry registry = _getMetadataRegistryStorage()._metadataRegistry;\\n        if (registry == ILandMetadataRegistry(address(0))) {\\n            return (false, 0, UNKNOWN_NEIGHBORHOOD);\\n        }\\n        return registry.getMetadata(tokenId);\\n    }\\n\\n    /// @notice return true if a land is premium\\n    /// @param tokenId the token id\\n    function isPremium(uint256 tokenId) external view returns (bool) {\\n        ILandMetadataRegistry registry = _getMetadataRegistryStorage()._metadataRegistry;\\n        if (registry == ILandMetadataRegistry(address(0))) {\\n            return false;\\n        }\\n        return registry.isPremium(tokenId);\\n    }\\n\\n    /// @notice return the id that identifies the neighborhood\\n    /// @param tokenId the token id\\n    function getNeighborhoodId(uint256 tokenId) external view returns (uint256) {\\n        ILandMetadataRegistry registry = _getMetadataRegistryStorage()._metadataRegistry;\\n        if (registry == ILandMetadataRegistry(address(0))) {\\n            return 0;\\n        }\\n        return registry.getNeighborhoodId(tokenId);\\n    }\\n\\n    /// @notice set the address of the metadata registry\\n    /// @param metadataRegistry the address of the metadata registry\\n    function _setMetadataRegistry(address metadataRegistry) internal {\\n        if (metadataRegistry == address(0)) {\\n            revert InvalidAddress();\\n        }\\n        MetadataRegistryStorage storage $ = _getMetadataRegistryStorage();\\n        $._metadataRegistry = ILandMetadataRegistry(metadataRegistry);\\n        emit MetadataRegistrySet(metadataRegistry);\\n    }\\n}\\n\",\"keccak256\":\"0xb04a36e93c0f1f538654090274e8a14906d9f2705510fb0c3db23a0e7ea4972d\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/land/contracts/common/WithOwner.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.23;\\n\\n/// @title Owner support (EIP173)\\n/// @author The Sandbox\\n/// @custom:security-contact contact-blockchain@sandbox.game\\n/// @notice Add an owner for the stores that need it\\ncontract WithOwner {\\n    /// @notice emitted when the ownership of the contract is changed\\n    /// @param previousOwner The old address of the owner.\\n    /// @param newOwner The new address of the owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    struct OwnerStorage {\\n        address _owner;\\n    }\\n\\n    /// @custom:storage-location erc7201:thesandbox.storage.land.common.WithOwner\\n    bytes32 internal constant OWNER_STORAGE_LOCATION =\\n        0x1836e2fa424a35b79c13fd66f8e282cb3a31513f9610d6e7a99baf7ffe56ec00;\\n\\n    function _getOwnerStorage() private pure returns (OwnerStorage storage $) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            $.slot := OWNER_STORAGE_LOCATION\\n        }\\n    }\\n\\n    /// @notice Get the address of the owner\\n    /// @return The address of the owner.\\n    function owner() external view returns (address) {\\n        OwnerStorage storage $ = _getOwnerStorage();\\n        return $._owner;\\n    }\\n\\n    /// @notice change the ownership of the contract\\n    /// @param newOwner The new address of the owner.\\n    function _transferOwnership(address newOwner) internal {\\n        OwnerStorage storage $ = _getOwnerStorage();\\n        emit OwnershipTransferred($._owner, newOwner);\\n        $._owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0xb340d4e98bd4a0e921d3503a52d7944ed9f211248f47530cb0e8a599bcd59530\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/land/contracts/common/WithRoyalties.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.23;\\n\\nimport {IRoyaltyManager} from \\\"@sandbox-smart-contracts/dependency-royalty-management/contracts/interfaces/IRoyaltyManager.sol\\\";\\n\\n/// @title WithRoyalties\\n/// @author The Sandbox\\n/// @custom:security-contact contact-blockchain@sandbox.game\\n/// @notice Add royalty support to land contracts (EIP2981 implemented with our royalty manager)\\ncontract WithRoyalties {\\n    /// @notice emitted when the royalty manager is set\\n    /// @param royaltyManager the address of royalty manager contract.\\n    event RoyaltyManagerSet(address indexed royaltyManager);\\n\\n    uint16 internal constant TOTAL_BASIS_POINTS = 10000;\\n\\n    struct RoyaltiesStorage {\\n        IRoyaltyManager _royaltyManager;\\n    }\\n\\n    /// @custom:storage-location erc7201:thesandbox.storage.land.common.WithRoyalties\\n    bytes32 internal constant ROYALTIES_STORAGE_LOCATION =\\n        0xf7bae505580fc5d233bb20f4fb93f39f43d44ecc81ed63dd6455097b4c455000;\\n\\n    function _getRoyaltiesStorage() private pure returns (RoyaltiesStorage storage $) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            $.slot := ROYALTIES_STORAGE_LOCATION\\n        }\\n    }\\n\\n    /// @notice Returns how much royalty is owed and to whom based on ERC2981\\n    /// @dev tokenId is one of the EIP2981 args for this function can't be removed\\n    /// @param salePrice the price of token on which the royalty is calculated\\n    /// @return receiver the receiver of royalty\\n    /// @return royaltyAmount the amount of royalty\\n    function royaltyInfo(\\n        uint256 /*_tokenId */,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount) {\\n        RoyaltiesStorage storage $ = _getRoyaltiesStorage();\\n        uint16 royaltyBps;\\n        (receiver, royaltyBps) = $._royaltyManager.getRoyaltyInfo();\\n        royaltyAmount = (salePrice * royaltyBps) / TOTAL_BASIS_POINTS;\\n        return (receiver, royaltyAmount);\\n    }\\n\\n    /// @notice returns the royalty manager\\n    /// @return the address of royalty manager contract.\\n    function getRoyaltyManager() external view returns (IRoyaltyManager) {\\n        RoyaltiesStorage storage $ = _getRoyaltiesStorage();\\n        return $._royaltyManager;\\n    }\\n\\n    /// @notice set the address of the royalty manager\\n    /// @param royaltyManager the address of royalty manager contract.\\n    function _setRoyaltyManager(address royaltyManager) internal {\\n        RoyaltiesStorage storage $ = _getRoyaltiesStorage();\\n        $._royaltyManager = IRoyaltyManager(royaltyManager);\\n        emit RoyaltyManagerSet(royaltyManager);\\n    }\\n}\\n\",\"keccak256\":\"0x7fcb81c2705c59823b0c9d3e40d7c01495b0faa54f5d20c379b396b85bd4b17c\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/land/contracts/common/WithSuperOperators.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport {IErrors} from \\\"../interfaces/IErrors.sol\\\";\\n\\n/// @title WithSuperOperators\\n/// @author The Sandbox\\n/// @custom:security-contact contact-blockchain@sandbox.game\\n/// @notice Add super operators handled by an admin\\nabstract contract WithSuperOperators is IErrors {\\n    /// @param superOperator address that will be given/removed superOperator right.\\n    /// @param enabled set whether the superOperator is enabled or disabled.\\n    event SuperOperator(address indexed superOperator, bool indexed enabled);\\n\\n    /// @notice check if an address is a super-operator\\n    /// @param superOperator the operator address to check\\n    /// @return true if an address is a super-operator\\n    function isSuperOperator(address superOperator) external view returns (bool) {\\n        return _isSuperOperator(superOperator);\\n    }\\n\\n    /// @notice Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights).\\n    /// @param superOperator address that will be given/removed superOperator right.\\n    /// @param enabled set whether the superOperator is enabled or disabled.\\n    function _setSuperOperator(address superOperator, bool enabled) internal {\\n        if (superOperator == address(0)) {\\n            revert InvalidAddress();\\n        }\\n        if (enabled == _isSuperOperator(superOperator)) {\\n            revert InvalidArgument();\\n        }\\n        _writeSuperOperator(superOperator, enabled);\\n        emit SuperOperator(superOperator, enabled);\\n    }\\n\\n    /// @notice check if an address is a super-operator\\n    /// @param superOperator the operator address to check\\n    /// @return true if an address is a super-operator\\n    /// @dev Implement\\n    function _isSuperOperator(address superOperator) internal view virtual returns (bool);\\n\\n    /// @notice enable an address to be super-operator\\n    /// @param superOperator the address to set\\n    /// @param enabled true enable the address, false disable it.\\n    /// @dev Implement\\n    function _writeSuperOperator(address superOperator, bool enabled) internal virtual;\\n}\\n\",\"keccak256\":\"0x6c580d5fd2626a52f9f4bc9b3e9b98aead3f1da664a22212d2faaef343f735cc\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/land/contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @custom:security-contact contact-blockchain@sandbox.game\\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-173.md\\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when ownership of a contract changes.\\n    /// @param previousOwner the old owner\\n    /// @param newOwner the new owner\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Get the address of the owner\\n    /// @return The address of the owner.\\n    function owner() external view returns (address);\\n\\n    /// @notice Set the address of the new owner of the contract\\n    /// @param newOwner The address of the new owner of the contract\\n    function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0x37e78f76d8ce023903ca57fd08ca19c1bdee7d37ca6987d222f44e205144ee2e\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/land/contracts/interfaces/IERC721BatchOps.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title IERC721BatchOps\\n/// @author The Sandbox\\n/// @custom:security-contact contact-blockchain@sandbox.game\\n/// @notice ERC721 Batch operations\\ninterface IERC721BatchOps {\\n    /// @notice Transfer many tokens between 2 addresses.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param ids The ids of the tokens.\\n    /// @param data Additional data.\\n    function batchTransferFrom(address from, address to, uint256[] calldata ids, bytes calldata data) external;\\n\\n    /// @notice Transfer many tokens between 2 addresses, while\\n    /// ensuring the receiving contract has a receiver method.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param ids The ids of the tokens.\\n    /// @param data Additional data.\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xd182981c8acbc97f124ecfe3f0831935fcb7b3a8eadd24d7690b34194581c089\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/land/contracts/interfaces/IERC721MandatoryTokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title ERC721MandatoryTokenReceiver\\n/// @author The Sandbox\\n/// @custom:security-contact contact-blockchain@sandbox.game\\n/// @notice Interface for any contract that wants to support safeBatchTransfers\\n/// @notice from ERC721 asset contracts.\\n/// @dev The ERC-165 identifier for this interface is 0x5e8bf644.\\ninterface IERC721MandatoryTokenReceiver {\\n    /// @notice Whenever tokens are transferred to this contract via {IERC721-safeBatchTransferFrom}\\n    /// @notice by `operator` from `from`, this function is called.\\n    /// @param operator sender\\n    /// @param from owner of the tokens\\n    /// @param ids token ids\\n    /// @param data extra data\\n    /// @return 0x4b808c46 if the transfer is a success\\n    function onERC721BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external returns (bytes4); // needs to return 0x4b808c46\\n\\n    /// @notice Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n    /// @notice by `operator` from `from`, this function is called.\\n    /// @param operator sender\\n    /// @param from owner of the token\\n    /// @param tokenId token id\\n    /// @param data extra data\\n    /// @return 0x150b7a02 if the transfer is a success\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4); // needs to return 0x150b7a02\\n}\\n\",\"keccak256\":\"0x3d48930020c38b87a572edf99cb8a93b9dca9d58642a78a160c05fdb9cf5d886\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/land/contracts/interfaces/IErrors.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.23;\\n\\n/// @title Errors\\n/// @author The Sandbox\\n/// @custom:security-contact contact-blockchain@sandbox.game\\n/// @notice Common errors\\ninterface IErrors {\\n    /// @notice an address passed as argument is invalid\\n    error InvalidAddress();\\n\\n    /// @notice an argument passed is invalid\\n    error InvalidArgument();\\n\\n    /// @notice an array argument has an invalid length\\n    error InvalidLength();\\n\\n    /// @notice only admin can call this function\\n    error OnlyAdmin();\\n}\\n\",\"keccak256\":\"0x303ca7609d4c5448ea00d7d1dda50d6638f251ae1f62c18215dcc139305e7cc4\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/land/contracts/interfaces/ILandMetadataRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title ILandMetadataRegistry\\n/// @author The Sandbox\\n/// @custom:security-contact contact-blockchain@sandbox.game\\n/// @notice Interface implemented by the LandMetadataRegistry\\ninterface ILandMetadataRegistry {\\n    /// @notice return the metadata for one land\\n    /// @param tokenId the token id\\n    /// @return premium true if the land is premium\\n    /// @return neighborhoodId the number that identifies the neighborhood\\n    /// @return neighborhoodName the neighborhood name\\n    function getMetadata(\\n        uint256 tokenId\\n    ) external view returns (bool premium, uint256 neighborhoodId, string memory neighborhoodName);\\n\\n    /// @notice return true if a land is premium\\n    /// @param tokenId the token id\\n    /// @return true if the land is premium\\n    function isPremium(uint256 tokenId) external view returns (bool);\\n\\n    /// @notice return the id that identifies the neighborhood\\n    /// @param tokenId the token id\\n    /// @return the neighborhoodId number\\n    function getNeighborhoodId(uint256 tokenId) external view returns (uint256);\\n\\n    /// @notice return the neighborhood name\\n    /// @param tokenId the token id\\n    /// @return the neighborhood name\\n    function getNeighborhoodName(uint256 tokenId) external view returns (string memory);\\n\\n    /// @notice return the neighborhood name using neighborhood id as the key\\n    /// @param neighborhoodId the number that identifies the neighborhood\\n    /// @return the neighborhood name\\n    function getNeighborhoodNameForId(uint256 neighborhoodId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x693b08c212d0ab9d853f588c1c83cbe82bd662b5f0906e25cf3e2a039093b1fa\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/land/contracts/interfaces/ILandToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {IQuad} from \\\"./IQuad.sol\\\";\\n\\n/// @title ILandToken\\n/// @author The Sandbox\\n/// @custom:security-contact contact-blockchain@sandbox.game\\n/// @notice Interface of the LAND token including quad methods\\ninterface ILandToken is IQuad {\\n    /// @notice Mint a new quad (aligned to a quad tree with size 1, 3, 6, 12 or 24 only)\\n    /// @param to The recipient of the new quad\\n    /// @param size The size of the new quad\\n    /// @param x The bottom left x coordinate of the new quad\\n    /// @param y The bottom left y coordinate of the new quad\\n    /// @param data extra data to pass to the transfer\\n    function mintQuad(address to, uint256 size, uint256 x, uint256 y, bytes memory data) external;\\n\\n    /// @notice Checks if a LAND exists by its coordinates\\n    /// @param size size of the quad\\n    /// @param x x coordinate\\n    /// @param y y coordinate\\n    /// @return does the LAND exist\\n    function exists(uint256 size, uint256 x, uint256 y) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2a54573a39308f64863383b0f85bbce1d143a7608e490df0abc76962997b43c8\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/land/contracts/interfaces/IOperatorFilterRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title IOperatorFilterRegistry\\n/// @author The Sandbox\\n/// @custom:security-contact contact-blockchain@sandbox.game\\n/// @notice Interface of the operator filter registry\\n/// @dev This interface comes from OpenSea https://github.com/ProjectOpenSea/operator-filter-registry/blob/main/src/IOperatorFilterRegistry.sol and adapted to the 0.8.23 solidity version\\ninterface IOperatorFilterRegistry {\\n    /// @notice Check if the operator is allowed for the given registrant\\n    /// @param registrant address of the registrant\\n    /// @param operator operator address to check\\n    /// @return is the operator allowed\\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\\n\\n    /// @notice Register a new address\\n    /// @param registrant address to register\\n    function register(address registrant) external;\\n\\n    /// @notice Register a new address & subscribe to an address\\n    /// @param registrant address of the registrant\\n    /// @param subscription address where the registrant is subscribed to\\n    function registerAndSubscribe(address registrant, address subscription) external;\\n\\n    /// @notice Register and copy entries of another registrant\\n    /// @param registrant address of the registrant\\n    /// @param registrantToCopy address to copy from\\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\\n\\n    /// @notice update the operator for a registrant\\n    /// @param registrant address of the registrant\\n    /// @param operator operator to be updated\\n    /// @param filtered is it filtered\\n    function updateOperator(address registrant, address operator, bool filtered) external;\\n\\n    /// @notice Update operators for a registrant\\n    /// @param registrant address of the registrant\\n    /// @param operators addresses of the operators\\n    /// @param filtered is it filtered\\n    function updateOperators(address registrant, address[] calldata operators, bool filtered) external;\\n\\n    /// @notice Update code hash\\n    /// @param registrant address of the registrant\\n    /// @param codehash code hash\\n    /// @param filtered is it filtered\\n    function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;\\n\\n    /// @notice Update code hashes\\n    /// @param registrant address of the registrant\\n    /// @param codeHashes code hashes\\n    /// @param filtered is it filtered\\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external;\\n\\n    /// @notice Subscribe a registrant\\n    /// @param registrant address of the registrant\\n    /// @param registrantToSubscribe address to subscribe with\\n    function subscribe(address registrant, address registrantToSubscribe) external;\\n\\n    /// @notice Unsubscribe a registrant\\n    /// @param registrant address of the registrant\\n    /// @param copyExistingEntries copy existing entries\\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\\n\\n    /// @notice Get the subscription of an address\\n    /// @param addr address to check\\n    /// @return registrant the registrant address\\n    function subscriptionOf(address addr) external returns (address registrant);\\n\\n    /// @notice Get the subscribers of the registrant\\n    /// @param registrant address of the registrant\\n    /// @return the subscribers addresses\\n    function subscribers(address registrant) external returns (address[] memory);\\n\\n    /// @notice Get a specific subscriber\\n    /// @param registrant address of the registrant\\n    /// @param index index to check\\n    /// @return the ith subscriber of the registrant\\n    function subscriberAt(address registrant, uint256 index) external returns (address);\\n\\n    /// @notice Copy the entries of a registrant\\n    /// @param registrant address of the registrant\\n    /// @param registrantToCopy address to copy\\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\\n\\n    /// @notice Is a registrant filtered\\n    /// @param registrant address of the registrant\\n    /// @param operator operator address to check\\n    /// @return is it filtered\\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\\n\\n    /// @notice Is the code hash of an operator filtered\\n    /// @param registrant address of the registrant\\n    /// @param operatorWithCode operator address to check\\n    /// @return is it filtered\\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\\n\\n    /// @notice Is the code hash filtered\\n    /// @param registrant address of the registrant\\n    /// @param codeHash code hash\\n    /// @return is it filtered\\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\\n\\n    /// @notice Get the filtered operators\\n    /// @param addr address to check\\n    /// @return filtered operators\\n    function filteredOperators(address addr) external returns (address[] memory);\\n\\n    /// @notice Get the filtered code hashes\\n    /// @param addr address to check\\n    /// @return filtered code hashes\\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\\n\\n    /// @notice Get a specific operator\\n    /// @param registrant address of the registrant\\n    /// @param index index to check\\n    /// @return address of the operator\\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\\n\\n    /// @notice Get the ith filtered code hash\\n    /// @param registrant address of the registrant\\n    /// @param index index to check\\n    /// @return the code hash\\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\\n\\n    /// @notice Is the address registered\\n    /// @param addr address to check\\n    /// @return is it registered\\n    function isRegistered(address addr) external returns (bool);\\n\\n    /// @notice Get the code hash for this address\\n    /// @param addr address to check\\n    /// @return the code hash\\n    function codeHashOf(address addr) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6098ec161546d624787aa5fdc6e6aea57fb62e0667e822970df26b92d9cf54fa\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/land/contracts/interfaces/IQuad.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title IQuad\\n/// @author The Sandbox\\n/// @custom:security-contact contact-blockchain@sandbox.game\\n/// @notice Interface of the LAND token (quad methods)\\ninterface IQuad {\\n    /// @notice transfer multiple quad (aligned to a quad tree with size 3, 6, 12 or 24 only)\\n    /// @param from current owner of the quad\\n    /// @param to destination\\n    /// @param sizes list of sizes for each quad\\n    /// @param xs list of bottom left x coordinates for each quad\\n    /// @param ys list of bottom left y coordinates for each quad\\n    /// @param data additional data\\n    function batchTransferQuad(\\n        address from,\\n        address to,\\n        uint256[] calldata sizes,\\n        uint256[] calldata xs,\\n        uint256[] calldata ys,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice transfer one quad (aligned to a quad tree with size 3, 6, 12 or 24 only)\\n    /// @param from current owner of the quad\\n    /// @param to destination\\n    /// @param size size of the quad\\n    /// @param x The bottom left x coordinate of the quad\\n    /// @param y The bottom left y coordinate of the quad\\n    /// @param data additional data\\n    function transferQuad(address from, address to, uint256 size, uint256 x, uint256 y, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x9311460b3744a6f37b81b794cd7d335ff9c481e1410af335465023555fe052cb\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/land/contracts/polygon/ERC2771Handler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\n/// @title ERC2771Handler\\n/// @author The Sandbox\\n/// @custom:security-contact contact-blockchain@sandbox.game\\n/// @notice Handle meta-transactions\\n/// @dev minimal ERC2771 handler to keep bytecode-size down\\n/// @dev based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.6.0/contracts/metatx/ERC2771Context.sol\\n/// @dev with an initializer for proxies and a mutable forwarder\\nabstract contract ERC2771Handler {\\n    /// @notice emitted when a new trusted forwarder is set\\n    /// @param newForwarder the new trusted forwarder\\n    event TrustedForwarderSet(address indexed newForwarder);\\n\\n    /// @notice Checks if an address is a trusted forwarder\\n    /// @param forwarder address to check\\n    /// @return is trusted\\n    function isTrustedForwarder(address forwarder) external view returns (bool) {\\n        return _isTrustedForwarder(forwarder);\\n    }\\n\\n    /// @notice Change the address of the trusted forwarder for meta-TX\\n    /// @param trustedForwarder The new trustedForwarder\\n    function _setTrustedForwarder(address trustedForwarder) internal {\\n        _writeTrustedForwarder(trustedForwarder);\\n        emit TrustedForwarderSet(trustedForwarder);\\n    }\\n\\n    /// @notice Get the current trusted forwarder\\n    /// @return trustedForwarder address of the trusted forwarder\\n    function getTrustedForwarder() external view returns (address) {\\n        return _readTrustedForwarder();\\n    }\\n\\n    /// @dev if the call comes from the trusted forwarder, it gets the real sender by checking the encoded address in the data\\n    /// @return sender address of the real sender\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (_isTrustedForwarder(msg.sender) && msg.data.length >= 20) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            sender = msg.sender;\\n        }\\n    }\\n\\n    /// @notice Checks if an address is a trusted forwarder\\n    /// @param trustedForwarder address to check\\n    /// @return is trusted\\n    function _isTrustedForwarder(address trustedForwarder) internal view returns (bool) {\\n        return trustedForwarder == _readTrustedForwarder();\\n    }\\n\\n    /// @notice get the address of the ERC2771 trusted forwarder\\n    /// @return the address of the trusted forwarder\\n    function _readTrustedForwarder() internal view virtual returns (address);\\n\\n    /// @notice set the address of the ERC2771 trusted forwarder\\n    /// @param trustedForwarder the address of the trusted forwarder\\n    function _writeTrustedForwarder(address trustedForwarder) internal virtual;\\n}\\n\",\"keccak256\":\"0x0868810541b80cea8852ae704ae977f32532168c9d55ce2c0533ed77cd841e17\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/land/contracts/polygon/PolygonLandStorageMixin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport {IOperatorFilterRegistry} from \\\"../interfaces/IOperatorFilterRegistry.sol\\\";\\n\\n/// @title PolygonLandStorageMixin\\n/// @author The Sandbox\\n/// @custom:security-contact contact-blockchain@sandbox.game\\n/// @notice Storage structure of the Polygon implementation of Land contract\\n/// @dev According to hardhat-storage plugin run onto the latest deployed version (@core)\\n/// @dev |          contract           \\u2502      state_variable       \\u2502 storage_slot \\u2502 offset \\u2502                       type                       \\u2502 idx \\u2502                     artifact                      \\u2502 numberOfBytes \\u2502\\n/// @dev |         PolygonLand         \\u2502       _initialized        \\u2502      0       \\u2502   0    \\u2502                     t_uint8                      \\u2502  0  \\u2502 /build-info/3abb06944792151ded64cbcd19543bb1.json \\u2502       1       \\u2502\\n/// @dev |         PolygonLand         \\u2502       _initializing       \\u2502      0       \\u2502   1    \\u2502                      t_bool                      \\u2502  0  \\u2502 /build-info/3abb06944792151ded64cbcd19543bb1.json \\u2502       1       \\u2502\\n/// @dev |         PolygonLand         \\u2502           __gap           \\u2502      1       \\u2502   0    \\u2502           t_array(t_uint256)50_storage           \\u2502  0  \\u2502 /build-info/3abb06944792151ded64cbcd19543bb1.json \\u2502     1600      \\u2502\\n/// @dev |         PolygonLand         \\u2502          _admin           \\u2502      51      \\u2502   0    \\u2502                    t_address                     \\u2502  0  \\u2502 /build-info/3abb06944792151ded64cbcd19543bb1.json \\u2502      20       \\u2502\\n/// @dev |         PolygonLand         \\u2502      _superOperators      \\u2502      52      \\u2502   0    \\u2502           t_mapping(t_address,t_bool)            \\u2502  0  \\u2502 /build-info/3abb06944792151ded64cbcd19543bb1.json \\u2502      32       \\u2502\\n/// @dev |         PolygonLand         \\u2502     _numNFTPerAddress     \\u2502      53      \\u2502   0    \\u2502          t_mapping(t_address,t_uint256)          \\u2502  0  \\u2502 /build-info/3abb06944792151ded64cbcd19543bb1.json \\u2502      32       \\u2502\\n/// @dev |         PolygonLand         \\u2502          _owners          \\u2502      54      \\u2502   0    \\u2502          t_mapping(t_uint256,t_uint256)          \\u2502  0  \\u2502 /build-info/3abb06944792151ded64cbcd19543bb1.json \\u2502      32       \\u2502\\n/// @dev |         PolygonLand         \\u2502     _operatorsForAll      \\u2502      55      \\u2502   0    \\u2502 t_mapping(t_address,t_mapping(t_address,t_bool)) \\u2502  0  \\u2502 /build-info/3abb06944792151ded64cbcd19543bb1.json \\u2502      32       \\u2502\\n/// @dev |         PolygonLand         \\u2502        _operators         \\u2502      56      \\u2502   0    \\u2502          t_mapping(t_uint256,t_address)          \\u2502  0  \\u2502 /build-info/3abb06944792151ded64cbcd19543bb1.json \\u2502      32       \\u2502\\n/// @dev |         PolygonLand         \\u2502         _minters          \\u2502      57      \\u2502   0    \\u2502           t_mapping(t_address,t_bool)            \\u2502  0  \\u2502 /build-info/3abb06944792151ded64cbcd19543bb1.json \\u2502      32       \\u2502\\n/// @dev |         PolygonLand         \\u2502           __gap           \\u2502      58      \\u2502   0    \\u2502           t_array(t_uint256)49_storage           \\u2502  0  \\u2502 /build-info/3abb06944792151ded64cbcd19543bb1.json \\u2502     1568      \\u2502\\n/// @dev |         PolygonLand         \\u2502     _trustedForwarder     \\u2502     107      \\u2502   0    \\u2502                    t_address                     \\u2502  0  \\u2502 /build-info/3abb06944792151ded64cbcd19543bb1.json \\u2502      20       \\u2502\\n/// @dev |         PolygonLand         \\u2502  operatorFilterRegistry   \\u2502     108      \\u2502   0    \\u2502     t_contract(IOperatorFilterRegistry)3942      \\u2502  0  \\u2502 /build-info/3abb06944792151ded64cbcd19543bb1.json \\u2502      20       \\u2502\\ncontract PolygonLandStorageMixin {\\n    /// @dev Obsolete: This is the storage used by the OZ v4 Initializer, they are unused now.\\n    uint8 private _initialized; // unused\\n    bool private _initializing; // unused\\n    uint256[50] private ___gap; // unused\\n\\n    /// @dev The admin of the contract\\n    address internal _admin;\\n\\n    /// @dev super operators that can transfer tokens on behalf of all the users\\n    mapping(address superOperator => bool enabled) internal _superOperators;\\n\\n    /// @dev Number of NFT an address own\\n    mapping(address owner => uint256 numNFT) internal _numNFTPerAddress;\\n\\n    /// @dev mapping to store owner of lands and quads.\\n    /// @dev For 1x1 lands the 255 bit is a flag that land has operator approved.\\n    /// @dev For 1x1 lands the 160 bit is a flag that indicates if the token is burned.\\n    mapping(uint256 owner => uint256 ownerData) internal _owners;\\n\\n    /// @dev Operators by owner address for all tokens\\n    mapping(address owner => mapping(address operator => bool enabled)) internal _operatorsForAll;\\n\\n    /// @dev Operator by token id, the operator flag must be also true (see: _owners)\\n    mapping(uint256 tokenId => address operator) internal _operators;\\n\\n    /// @dev Addresses authorized to mint tokens\\n    mapping(address minter => bool enabled) internal _minters;\\n\\n    uint256[49] private __gap;\\n\\n    /// @dev meta transaction ERC2771 trusted forwarder\\n    address internal _trustedForwarder;\\n\\n    /// @dev OpenSea operator filter registry address\\n    IOperatorFilterRegistry internal _operatorFilterRegistry;\\n\\n    /// @notice get the admin address\\n    /// @return the admin address\\n    function _readAdmin() internal view virtual returns (address) {\\n        return _admin;\\n    }\\n\\n    /// @notice set the admin address\\n    /// @param admin the admin address\\n    function _writeAdmin(address admin) internal virtual {\\n        _admin = admin;\\n    }\\n\\n    /// @notice check if an address is a super-operator\\n    /// @param superOperator the operator address to check\\n    /// @return true if an address is a super-operator\\n    function _isSuperOperator(address superOperator) internal view virtual returns (bool) {\\n        return _superOperators[superOperator];\\n    }\\n\\n    /// @notice enable an address to be super-operator\\n    /// @param superOperator the address to set\\n    /// @param enabled true enable the address, false disable it.\\n    function _writeSuperOperator(address superOperator, bool enabled) internal virtual {\\n        _superOperators[superOperator] = enabled;\\n    }\\n\\n    /// @notice get the number of nft for an address\\n    /// @param owner address to check\\n    /// @return the number of nfts\\n    function _readNumNFTPerAddress(address owner) internal view virtual returns (uint256) {\\n        return _numNFTPerAddress[owner];\\n    }\\n\\n    /// @notice set the number of nft for an address\\n    /// @param owner address to set\\n    /// @param quantity the number of nfts to set for the owner\\n    function _writeNumNFTPerAddress(address owner, uint256 quantity) internal virtual {\\n        _numNFTPerAddress[owner] = quantity;\\n    }\\n\\n    /// @notice get the owner data, this includes: owner address, burn flag and operator flag (see: _owners declaration)\\n    /// @param tokenId the token Id\\n    /// @return the owner data\\n    function _readOwnerData(uint256 tokenId) internal view virtual returns (uint256) {\\n        return _owners[tokenId];\\n    }\\n\\n    /// @notice set the owner data, this includes: owner address, burn flag and operator flag (see: _owners declaration)\\n    /// @param tokenId the token Id\\n    /// @param data the owner data\\n    function _writeOwnerData(uint256 tokenId, uint256 data) internal virtual {\\n        _owners[tokenId] = data;\\n    }\\n\\n    /// @notice check if an operator was enabled by a given owner\\n    /// @param owner that enabled the operator\\n    /// @param operator address to check if it was enabled\\n    /// @return true if the operator has access\\n    function _isOperatorForAll(address owner, address operator) internal view virtual returns (bool) {\\n        return _operatorsForAll[owner][operator];\\n    }\\n\\n    /// @notice Let an operator to access to all the tokens of a owner\\n    /// @param owner that enabled the operator\\n    /// @param operator address to check if it was enabled\\n    /// @param enabled if true give access to the operator, else disable it\\n    function _writeOperatorForAll(address owner, address operator, bool enabled) internal virtual {\\n        _operatorsForAll[owner][operator] = enabled;\\n    }\\n\\n    /// @notice get the operator for a specific token, the operator can transfer on the owner behalf\\n    /// @param tokenId The id of the token.\\n    /// @return the operator address\\n    function _readOperator(uint256 tokenId) internal view virtual returns (address) {\\n        return _operators[tokenId];\\n    }\\n\\n    /// @notice set the operator for a specific token, the operator can transfer on the owner behalf\\n    /// @param tokenId the id of the token.\\n    /// @param operator the operator address\\n    function _writeOperator(uint256 tokenId, address operator) internal virtual {\\n        _operators[tokenId] = operator;\\n    }\\n\\n    /// @notice checks if an address is enabled as minter\\n    /// @param minter the address to check\\n    /// @return true if the address is a minter\\n    function _isMinter(address minter) internal view virtual returns (bool) {\\n        return _minters[minter];\\n    }\\n\\n    /// @notice set an address as minter\\n    /// @param minter the address to set\\n    /// @param enabled true enable the address, false disable it.\\n    function _writeMinter(address minter, bool enabled) internal virtual {\\n        _minters[minter] = enabled;\\n    }\\n\\n    /// @notice get the address of the ERC2771 trusted forwarder\\n    /// @return the address of the trusted forwarder\\n    function _readTrustedForwarder() internal view virtual returns (address) {\\n        return _trustedForwarder;\\n    }\\n\\n    /// @notice set the address of the ERC2771 trusted forwarder\\n    /// @param trustedForwarder the address of the trusted forwarder\\n    function _writeTrustedForwarder(address trustedForwarder) internal virtual {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    /// @notice get the OpenSea operator filter\\n    /// @return the address of the OpenSea operator filter registry\\n    function _readOperatorFilterRegistry() internal view virtual returns (IOperatorFilterRegistry) {\\n        return _operatorFilterRegistry;\\n    }\\n\\n    /// @notice set the OpenSea operator filter\\n    /// @param registry the address of the OpenSea operator filter registry\\n    function _writeOperatorFilterRegistry(IOperatorFilterRegistry registry) internal virtual {\\n        _operatorFilterRegistry = registry;\\n    }\\n}\\n\",\"keccak256\":\"0x5faca5d5e9258c988880d20e1f2dc0372bba1faa41cf9f749dcb432ee762be75\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000d6565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff1615620000735760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b0390811614620000d35780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b614fa880620000e66000396000f3fe608060405234801561001057600080fd5b50600436106103365760003560e01c80638da5cb5b116101b2578063ab01b469116100f9578063ce1b815f116100a2578063e985e9c51161007c578063e985e9c514610701578063eaa5e06714610714578063eeb5a5d114610727578063f2fde38b1461073a57600080fd5b8063ce1b815f146106d3578063cf456ae7146106db578063da742228146106ee57600080fd5b8063b88d4fde116100d3578063b88d4fde1461069a578063c4d66de8146106ad578063c87b56dd146106c057600080fd5b8063ab01b4691461066c578063ac9fe4211461067f578063b0ccc31e1461069257600080fd5b80639a7ac3131161015b578063a22cb46511610135578063a22cb46514610624578063a574cea414610637578063aa271e1a1461065957600080fd5b80639a7ac313146106095780639d28fb86146106115780639ededf77146103f857600080fd5b806395c671d81161018c57806395c671d8146105b557806395d89b41146105c85780639a1b2fb41461060157600080fd5b80638da5cb5b146105875780638e5cb5f61461058f5780638f283970146105a257600080fd5b806338bb305a11610281578063572b6c051161022a5780636e1e3bbf116102045780636e1e3bbf146105465780636e9960c31461055957806370a0823114610561578063845a46971461057457600080fd5b8063572b6c051461050d5780636352211e14610520578063654b748a1461053357600080fd5b80634e6a0f441161025b5780634e6a0f44146104d457806350cf5a31146104e757806355064d85146104fa57600080fd5b806338bb305a1461049b57806342842e0e146104ae578063468ad0a6146104c157600080fd5b806315ddc535116102e35780632a55205a116102bd5780632a55205a146104435780632b26a407146104755780632b9917461461048857600080fd5b806315ddc5351461040a57806323b872dd1461041d57806328cfbd461461043057600080fd5b8063081812fc11610314578063081812fc146103b8578063095ea7b3146103e35780630ef26743146103f857600080fd5b806301ffc9a71461033b578063029bca781461036357806306fdde0314610376575b600080fd5b61034e610349366004614577565b61074d565b60405190151581526020015b60405180910390f35b61034e610371366004614594565b610956565b60408051808201909152600f81527f53616e64626f782773204c414e4473000000000000000000000000000000000060208201525b60405161035a91906145fd565b6103cb6103c6366004614594565b610a1b565b6040516001600160a01b03909116815260200161035a565b6103f66103f1366004614630565b610a7e565b005b6101985b60405190815260200161035a565b6103f66104183660046146e3565b610aa0565b6103f661042b366004614778565b610b1e565b6103f661043e3660046146e3565b610b5c565b6104566104513660046147b9565b610bcf565b604080516001600160a01b03909316835260208301919091520161035a565b6103fc610483366004614594565b610ca7565b6103f6610496366004614778565b610d65565b6103f66104a93660046147db565b610d7b565b6103f66104bc366004614778565b610e8f565b6103f66104cf366004614861565b610ed7565b6103f66104e236600461487e565b610f23565b6103f66104f5366004614861565b611057565b61034e6105083660046148df565b6110a0565b61034e61051b366004614861565b6110cd565b6103cb61052e366004614594565b6110d8565b61034e610541366004614861565b611114565b6103f66105543660046149d0565b61111f565b6103cb61117d565b6103fc61056f366004614861565b61118c565b6103fc610582366004614594565b6111c1565b6103cb6111cc565b6103fc61059d366004614594565b611201565b6103f66105b0366004614861565b61120c565b6103fc6105c3366004614594565b611255565b60408051808201909152600481527f4c414e440000000000000000000000000000000000000000000000000000000060208201526103ab565b6103cb611260565b6103cb611289565b6103f661061f366004614861565b6112b2565b6103f6610632366004614a4b565b6112fb565b61064a610645366004614594565b611318565b60405161035a93929190614a84565b61034e610667366004614861565b611427565b6103f661067a366004614a4b565b611432565b6103f661068d366004614a4b565b6114a7565b6103cb6114f1565b6103f66106a8366004614aa5565b6114fb565b6103f66106bb366004614861565b61153b565b6103ab6106ce366004614594565b6116d8565b6103cb61173e565b6103f66106e9366004614a4b565b611748565b6103f66106fc366004614861565b611792565b61034e61070f366004614b11565b6117db565b6103f6610722366004614b3f565b6117e7565b6103f6610735366004614c27565b611b06565b6103f6610748366004614861565b611b1c565b60006001600160e01b031982167f80ac58cd0000000000000000000000000000000000000000000000000000000014806107b057506001600160e01b031982167f3d12787300000000000000000000000000000000000000000000000000000000145b806107e457506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061081857506001600160e01b031982167f01ffc9a700000000000000000000000000000000000000000000000000000000145b8061084c57506001600160e01b031982167f7f5828d000000000000000000000000000000000000000000000000000000000145b8061088057506001600160e01b031982167f2a55205a00000000000000000000000000000000000000000000000000000000145b806108b457506001600160e01b031982167f3b18763a00000000000000000000000000000000000000000000000000000000145b806108e857506001600160e01b031982167fe906a60700000000000000000000000000000000000000000000000000000000145b8061091c57506001600160e01b031982167fd21ed03d00000000000000000000000000000000000000000000000000000000145b8061095057506001600160e01b031982167f519cd8d900000000000000000000000000000000000000000000000000000000145b92915050565b7f3899f13de39885dfce849839be8330453b5866928dd0e5933e36794349628400546000906001600160a01b0316806109925750600092915050565b6040517f029bca78000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b0382169063029bca7890602401602060405180830381865afa1580156109f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a149190614c72565b9392505050565b6000806000610a2984611b65565b90925090506001600160a01b038216610a5d57604051637e27328960e01b8152600481018590526024015b60405180910390fd5b8015610a7457610a6c84611c42565b949350505050565b5060009392505050565b81610a893082611c5f565b610a9b610a94611d78565b8484611d82565b505050565b85610aa9611d78565b6001600160a01b0316816001600160a01b031614610ad257610ad230610acd611d78565b611c5f565b610b158787878787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509250611eac915050565b50505050505050565b82610b27611d78565b6001600160a01b0316816001600160a01b031614610b4b57610b4b30610acd611d78565b610b5684848461211f565b50505050565b85610b65611d78565b6001600160a01b0316816001600160a01b031614610b8957610b8930610acd611d78565b610b158787878787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525060019250611eac915050565b7ff7bae505580fc5d233bb20f4fb93f39f43d44ecc81ed63dd6455097b4c4550008054604080517fa86a28d100000000000000000000000000000000000000000000000000000000815281516000948594909385936001600160a01b039092169263a86a28d19260048082019392918290030181865afa158015610c57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7b9190614c8f565b9094509050612710610c9161ffff831687614cdb565b610c9b9190614d08565b925050505b9250929050565b7f3899f13de39885dfce849839be8330453b5866928dd0e5933e36794349628400546000906001600160a01b031680610ce35750600092915050565b6040517f2b26a407000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b03821690632b26a40790602401602060405180830381865afa158015610d41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a149190614d1c565b81610d703082611c5f565b610b56848484611d82565b6000610d85611d78565b90506001600160a01b0388161580610da457506001600160a01b038716155b15610dc25760405163e6c4247b60e01b815260040160405180910390fd5b876001600160a01b0316816001600160a01b031614158015610deb5750610de98882612176565b155b15610e14576040516322718ad960e21b81526001600160a01b0382166004820152602401610a54565b610e1f868686612191565b610e2c88888888886122a3565b610e408888610e3b8980614cdb565b6123eb565b610e8581898989898989898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061241892505050565b5050505050505050565b82610e98611d78565b6001600160a01b0316816001600160a01b031614610ebc57610ebc30610acd611d78565b610b56848484604051806020016040528060008152506124de565b610edf612513565b6001600160a01b0316610ef0611d78565b6001600160a01b031614610f1757604051634755657960e01b815260040160405180910390fd5b610f2081612527565b50565b6000610f2d611d78565b9050610f38816125c4565b610f60576040516322718ad960e21b81526001600160a01b0382166004820152602401610a54565b6001600160a01b038716610f875760405163e6c4247b60e01b815260040160405180910390fd5b610f92868686612191565b6000610f9f8787876125e5565b6001600160a01b03161461101357610fba81888888886122a3565b610fc98188610e3b8980614cdb565b61100e81828989898989898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061241892505050565b610b15565b610b15818888888888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061267c92505050565b61105f612513565b6001600160a01b0316611070611d78565b6001600160a01b03161461109757604051634755657960e01b815260040160405180910390fd5b610f208161295a565b60006110ad848484612191565b60006110ba8585856125e5565b6001600160a01b03161415949350505050565b6000610950826129d0565b60006110e3826129f5565b90506001600160a01b03811661110f57604051637e27328960e01b815260048101839052602401610a54565b919050565b600061095082612a07565b6000611129611d78565b9050611134816125c4565b61115c576040516322718ad960e21b81526001600160a01b0382166004820152602401610a54565b611167858585612191565b611175818787878787612a28565b505050505050565b6000611187612513565b905090565b60006001600160a01b0382166111b8576040516322718ad960e21b815260006004820152602401610a54565b61095082612b47565b600061095082612b65565b6000807f1836e2fa424a35b79c13fd66f8e282cb3a31513f9610d6e7a99baf7ffe56ec005b546001600160a01b031692915050565b600061095082612b94565b611214612513565b6001600160a01b0316611225611d78565b6001600160a01b03161461124c57604051634755657960e01b815260040160405180910390fd5b610f2081612bc3565b600061095082612c31565b6000807ff7bae505580fc5d233bb20f4fb93f39f43d44ecc81ed63dd6455097b4c4550006111f1565b6000807f3899f13de39885dfce849839be8330453b5866928dd0e5933e367943496284006111f1565b6112ba612513565b6001600160a01b03166112cb611d78565b6001600160a01b0316146112f257604051634755657960e01b815260040160405180910390fd5b610f2081612c45565b816113063082611c5f565b610a9b611311611d78565b8484612cab565b6000806060817f3899f13de39885dfce849839be8330453b5866928dd0e5933e36794349628400546001600160a01b031690508061139257505060408051808201909152600781527f756e6b6e6f776e00000000000000000000000000000000000000000000000000602082015260009250829150611420565b6040517fa574cea4000000000000000000000000000000000000000000000000000000008152600481018690526001600160a01b0382169063a574cea490602401600060405180830381865afa1580156113f0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114189190810190614d35565b935093509350505b9193909250565b6000610950826125c4565b61143a612513565b6001600160a01b031661144b611d78565b6001600160a01b03161461147257604051634755657960e01b815260040160405180910390fd5b6001600160a01b0382166114995760405163e6c4247b60e01b815260040160405180910390fd5b6114a38282612e25565b5050565b6114af612513565b6001600160a01b03166114c0611d78565b6001600160a01b0316146114e757604051634755657960e01b815260040160405180910390fd5b6114a38282613067565b600061118761310e565b83611504611d78565b6001600160a01b0316816001600160a01b0316146115285761152830610acd611d78565b611534858585856124de565b5050505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff166000811580156115865750825b905060008267ffffffffffffffff1660011480156115a35750303b155b9050811580156115b1575080155b156115e8576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84547fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000166001178555831561163357845468ff00000000000000001916680100000000000000001785555b600061163d612513565b6001600160a01b03161461167d576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61168686613122565b831561117557845468ff000000000000000019168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a1505050505050565b606060006116e5836129f5565b6001600160a01b03160361170f57604051637e27328960e01b815260048101839052602401610a54565b611718826131c4565b6040516020016117289190614dcb565b6040516020818303038152906040529050919050565b6000611187613264565b611750612513565b6001600160a01b0316611761611d78565b6001600160a01b03161461178857604051634755657960e01b815260040160405180910390fd5b6114a38282613278565b61179a612513565b6001600160a01b03166117ab611d78565b6001600160a01b0316146117d257604051634755657960e01b815260040160405180910390fd5b610f2081613338565b6000610a148383612176565b6001600160a01b038a16158061180457506001600160a01b038916155b156118225760405163e6c4247b60e01b815260040160405180910390fd5b86851415806118315750848314155b15611868576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611872611d78565b90508a6001600160a01b0316816001600160a01b03161415801561189d575061189b8b82612176565b155b156118c6576040516322718ad960e21b81526001600160a01b0382166004820152602401610a54565b6000805b898110156119865760008b8b838181106118e6576118e6614e37565b90506020020135905061192a818b8b8581811061190557611905614e37565b905060200201358a8a8681811061191e5761191e614e37565b90506020020135612191565b6119678e8e838d8d8781811061194257611942614e37565b905060200201358c8c8881811061195b5761195b614e37565b905060200201356122a3565b6119718180614cdb565b61197b9084614e4d565b9250506001016118ca565b506119928c8c836123eb565b60008b6001600160a01b03163b1180156119b057506119b08b61339e565b15611af85760008167ffffffffffffffff8111156119d0576119d061490b565b6040519080825280602002602001820160405280156119f9578160200160208202803683370190505b5090506000805b8b811015611ab15760008d8d83818110611a1c57611a1c614e37565b90506020020135905060005b611a328280614cdb565b811015611aa757611a7581838f8f87818110611a5057611a50614e37565b905060200201358e8e88818110611a6957611a69614e37565b905060200201356133ca565b858581518110611a8757611a87614e37565b602090810291909101015283611a9c81614e60565b945050600101611a28565b5050600101611a00565b50611af5848f8f858a8a8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506133ff92505050565b50505b505050505050505050505050565b81611b113082611c5f565b610b56848484612cab565b611b24612513565b6001600160a01b0316611b35611d78565b6001600160a01b031614611b5c57604051634755657960e01b815260040160405180910390fd5b610f2081613535565b6000807fff00000000000000000000000000000000000000000000000000000000000000831615611bac57604051637e27328960e01b815260048101849052602401610a54565b6000611bba61019885614e7a565b90506000611bca61019886614d08565b90506000611bd786612c31565b90507401000000000000000000000000000000000000000080821603611c0e5760009450600160ff1b808216149350505050915091565b8015611c2757809450600160ff1b808216149350611c3a565b611c33600384846125e5565b9450600093505b505050915091565b6000818152603860205260408120546001600160a01b0316610950565b6000611c6961310e565b90506001600160a01b0381163b15610a9b576040517fc61711340000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152838116602483015282169063c617113490604401602060405180830381865afa925050508015611cfe575060408051601f3d908101601f19168201909252611cfb91810190614c72565b60015b611d38573d808015611d2c576040519150601f19603f3d011682016040523d82523d6000602084013e611d31565b606091505b5050611d46565b8015611d445750505050565b505b6040517f8a10919300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006111876135bc565b611d8c8382613609565b506000611d97611d78565b90506000846001600160a01b0316826001600160a01b03161480611dc05750611dc08583612176565b905080611e04576040517fa9fbf51f0000000000000000000000000000000000000000000000000000000081526001600160a01b0383166004820152602401610a54565b6001600160a01b038416611e2357611e1e838660006136ce565b611e64565b611e2f838660016136ce565b6000838152603860205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386161790555b82846001600160a01b0316866001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050505050565b6001600160a01b0386161580611ec957506001600160a01b038516155b15611ee75760405163e6c4247b60e01b815260040160405180910390fd5b6000611ef1611d78565b90506000876001600160a01b0316826001600160a01b03161480611f1a5750611f1a8883612176565b90508460005b81811015612064576000888883818110611f3c57611f3c614e37565b905060200201359050600080611f5183611b65565b91509150816001600160a01b03168d6001600160a01b031614611f92576040516322718ad960e21b81526001600160a01b038e166004820152602401610a54565b85158015611fc35750808015611fc15750866001600160a01b0316611fb684611c42565b6001600160a01b0316145b155b1561200c576040517f177e802f0000000000000000000000000000000000000000000000000000000081526001600160a01b038816600482015260248101849052604401610a54565b612018838d60006136ce565b828c6001600160a01b03168e6001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050600101611f20565b506120708989836123eb565b6001600160a01b0388163b15612114576120898861339e565b156120d4576120cf838a8a8a8a808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508c92506133ff915050565b612114565b83156121145760005b818110156121125761210a848b8b8b8b868181106120fd576120fd614e37565b905060200201358a613730565b6001016120dd565b505b505050505050505050565b6000612129611d78565b90506121378185858561381b565b6000836001600160a01b03163b11801561215557506121558361339e565b15610b5657610b568185858560405180602001604052806000815250613730565b60006121828383613954565b80610a145750610a1482612a07565b826001141580156121a3575082600314155b80156121b0575082600614155b80156121bd575082600c14155b80156121ca575082601814155b15612212576040517f699b5cb0000000000000000000000000000000000000000000000000000000008152600481018490526024810183905260448101829052606401610a54565b61221c8383614e7a565b151580612231575061222e8382614e7a565b15155b80612246575061224383610198614e8e565b82115b8061225b575061225883610198614e8e565b81115b15610a9b576040517f699b5cb0000000000000000000000000000000000000000000000000000000008152600481018490526024810183905260448101829052606401610a54565b8260010361234d576101988102820160006122bd826129f5565b90506001600160a01b0381166122f05760405163c1194ebf60e01b81526004810185905260248101849052604401610a54565b866001600160a01b0316816001600160a01b03161461232d576040516322718ad960e21b81526001600160a01b0388166004820152602401610a54565b5060009081526036602052604090206001600160a01b0385169055612383565b6123818585604051806060016040528086815260200185815260200187815250600160028861237c9190614d08565b613984565b505b60005b6123908480614cdb565b811015611175576123a3818585856133ca565b856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4600101612386565b816001600160a01b0316836001600160a01b031614610a9b5761240e8382613b93565b610a9b8282613bbf565b6000856001600160a01b03163b11801561243657506124368561339e565b15610b155760006124478580614cdb565b67ffffffffffffffff81111561245f5761245f61490b565b604051908082528060200260200182016040528015612488578160200160208202803683370190505b50905060005b6124988680614cdb565b8110156124d0576124ab818787876133ca565b8282815181106124bd576124bd614e37565b602090810291909101015260010161248e565b50610e8588888884866133ff565b60006124e8611d78565b90506124f68186868661381b565b6001600160a01b0384163b15611534576115348186868686613730565b60006111876033546001600160a01b031690565b6001600160a01b03811661254e5760405163e6c4247b60e01b815260040160405180910390fd5b7f3899f13de39885dfce849839be8330453b5866928dd0e5933e36794349628400805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831690811782556040517f03ce93da23cc307353ca8a7aac205697bd48963ee54982eacb40dd9d40a1d72990600090a25050565b6001600160a01b03811660009081526039602052604081205460ff16610950565b60008060006125f386613beb565b50909250905060006126366105c3848961260d818b614d08565b6126179190614cdb565b8a612622818b614d08565b61262c9190614cdb565b6101980291010190565b90506001600160a01b03811615612651579250610a14915050565b601887101561266f576126658287876125e5565b9350505050610a14565b5060009695505050505050565b600061268785613beb565b50509050600061269d8286866101980291010190565b604080518181526108208101825291925060009190816020015b6126db60405180606001604052806000815260200160008152602001600081525090565b8152602001906001900390816126b75790505090506000806003891115612736576127308b60405180606001604052808b81526020018a81526020018c81525085848660028f61272b9190614d08565b613d30565b90925090505b60005b6127438a80614cdb565b811015612904576000612758828c8c8c6133ca565b9050600061279286604051806060016040528061277486612b94565b815260200161278286612b65565b8152602001600181525087613ee6565b905080156127e057818d6001600160a01b03168f6001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46128fa565b8d6001600160a01b03166127f383611255565b6001600160a01b03160361289757600061280c83611c42565b6001600160a01b031614612844576000828152603860205260409020805473ffffffffffffffffffffffffffffffffffffffff191690555b61284f600185614e4d565b9350818d6001600160a01b03168f6001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46128fa565b6128a082612c31565b156128c1576040516314b27b7f60e31b815260048101839052602401610a54565b60405182906001600160a01b038f16906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45b5050600101612739565b506129168b8484848e8e8e8e8e613f9f565b60008481526036602052604090206001600160a01b038b1690556129438a61293e8b80614cdb565b613bbf565b61294d8b82613b93565b5050505050505050505050565b7ff7bae505580fc5d233bb20f4fb93f39f43d44ecc81ed63dd6455097b4c455000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831690811782556040517f1ad03d64d67ed9b2c90cfdf8dc8e54de3e41af88ae55e45a53dc27e476406de890600090a25050565b60006129da613264565b6001600160a01b0316826001600160a01b0316149050919050565b6000612a0082611b65565b5092915050565b6001600160a01b03811660009081526034602052604081205460ff16610950565b6001600160a01b038516612a4f5760405163e6c4247b60e01b815260040160405180910390fd5b6000612a5a85613beb565b505090506000612a708286866101980291010190565b9050612a7f86868660186141f0565b60005b612a8c8780614cdb565b811015612b0e576000612aa1828989896133ca565b9050612aac81612c31565b15612acd576040516314b27b7f60e31b815260048101829052602401610a54565b60405181906001600160a01b038b16906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a450600101612a82565b5060008181526036602052604090206001600160a01b0388169055612b378761293e8880614cdb565b610e858860008989898989612418565b6001600160a01b038116600090815260356020526040812054610950565b60006109506101987effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8416614d08565b60006109506101987effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8416614e7a565b6000612bcd612513565b90506001600160a01b038116612bf65760405163e6c4247b60e01b815260040160405180910390fd5b816001600160a01b0316816001600160a01b031603612c285760405163a9cb9e0d60e01b815260040160405180910390fd5b6114a382613122565b600081815260366020526040812054610950565b612c7481606c805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831617905550565b6040516001600160a01b038216907fc6df119c56c99171b170652a3c4750ba46dcaacbdb3b7ab4847a9fa339659bd490600090a250565b6001600160a01b038316612cf6576040517f73c6ac6e0000000000000000000000000000000000000000000000000000000081526001600160a01b0384166004820152602401610a54565b6000612d00611d78565b9050836001600160a01b0316816001600160a01b031614158015612d2a5750612d2881612a07565b155b15612d6c576040517fa9fbf51f0000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610a54565b612d7583612a07565b15612db7576040517f5b08ba180000000000000000000000000000000000000000000000000000000081526001600160a01b0384166004820152602401610a54565b6001600160a01b03848116600081815260376020908152604080832094881680845294825291829020805460ff191687151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a350505050565b6000612e2f61310e565b90506001600160a01b0381163b1561301d576040517fc3c5a5470000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0382169063c3c5a547906024016020604051808303816000875af1158015612ea0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ec49190614c72565b61301d578115612f4e576040517f7d3e3dbe0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038481166024830152821690637d3e3dbe906044015b600060405180830381600087803b158015612f3157600080fd5b505af1158015612f45573d6000803e3d6000fd5b5050505061301d565b6001600160a01b03831615612faa576040517fa0af29030000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03848116602483015282169063a0af290390604401612f17565b6040517f4420e4860000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03821690634420e48690602401600060405180830381600087803b15801561300457600080fd5b505af1158015613018573d6000803e3d6000fd5b505050505b826001600160a01b03167f3c7a9c847c035e45b84027e44ad55724873d5921b3a6abb8c0926b415d9241b18360405161305a911515815260200190565b60405180910390a2505050565b6001600160a01b03821661308e5760405163e6c4247b60e01b815260040160405180910390fd5b61309782612a07565b1515811515036130ba5760405163a9cb9e0d60e01b815260040160405180910390fd5b6001600160a01b038216600081815260346020526040808220805460ff191685151590811790915590519092917f44f92d27abdf4cfb6a7d712c3af68f3be086d4ca747ab802c36f67d6790060d891a35050565b6000611187606c546001600160a01b031690565b6001600160a01b0381166131495760405163e6c4247b60e01b815260040160405180910390fd5b6000613153612513565b9050816001600160a01b0316816001600160a01b03167f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f60405160405180910390a36114a3826033805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831617905550565b606060006131d18361430a565b600101905060008167ffffffffffffffff8111156131f1576131f161490b565b6040519080825280601f01601f19166020018201604052801561321b576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461322557509392505050565b6000611187606b546001600160a01b031690565b6001600160a01b03821661329f5760405163e6c4247b60e01b815260040160405180910390fd5b6132a8826125c4565b1515811515036132cb5760405163a9cb9e0d60e01b815260040160405180910390fd5b6001600160a01b0382166000908152603960205260409020805460ff1916821515179055816001600160a01b03167fff452b3b9159b024a9098f0058c63eccd90d36b3584608202800d662f962bb608260405161332c911515815260200190565b60405180910390a25050565b61336781606b805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831617905550565b6040516001600160a01b038216907fd91237492a9e30cd2faf361fc103998a382ff0ec2b1b07dc1cbebb76ae2f1ea290600090a250565b6000610950827f5e8bf644000000000000000000000000000000000000000000000000000000006143ec565b60006101988486816133de576133de614cf2565b048301028486816133f1576133f1614cf2565b068401019050949350505050565b6040517f4b808c460000000000000000000000000000000000000000000000000000000081526001600160a01b03841690634b808c469061344a908890889087908790600401614ea1565b6020604051808303816000875af1925050508015613485575060408051601f3d908101601f1916820190925261348291810190614f19565b60015b6134bf573d8080156134b3576040519150601f19603f3d011682016040523d82523d6000602084013e6134b8565b606091505b50506134f8565b7fb47f73ba000000000000000000000000000000000000000000000000000000006001600160e01b03198216016134f65750611534565b505b6040517f64a0ae920000000000000000000000000000000000000000000000000000000081526001600160a01b0384166004820152602401610a54565b7f1836e2fa424a35b79c13fd66f8e282cb3a31513f9610d6e7a99baf7ffe56ec0080546040516001600160a01b038481169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60006135c7336129d0565b80156135d4575060143610155b1561360457507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c90565b503390565b60006001600160a01b038316613656576040517f73c6ac6e0000000000000000000000000000000000000000000000000000000081526001600160a01b0384166004820152602401610a54565b60008061366284611b65565b90925090506001600160a01b03821661369157604051637e27328960e01b815260048101859052602401610a54565b816001600160a01b0316856001600160a01b031614610a6c576040516322718ad960e21b81526001600160a01b0386166004820152602401610a54565b60006001600160a01b0383166136e96001600160ff1b614e8e565b73ffffffffffffffffffffffffffffffffffffffff191661370986612c31565b16179050811561371a57600160ff1b175b6000848152603660205260409020819055610b56565b6040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0384169063150b7a029061377b908890889087908790600401614f36565b6020604051808303816000875af19250505080156137b6575060408051601f3d908101601f191682019092526137b391810190614f19565b60015b6137e4573d8080156134b3576040519150601f19603f3d011682016040523d82523d6000602084013e6134b8565b7feaf485fe000000000000000000000000000000000000000000000000000000006001600160e01b03198216016134f65750611534565b6001600160a01b0382166138425760405163e6c4247b60e01b815260040160405180910390fd5b600061384e8483613609565b90506000846001600160a01b0316866001600160a01b0316148061387757506138778587612176565b9050801580156138aa57508180156138a85750856001600160a01b031661389d84611c42565b6001600160a01b0316145b155b156138f3576040517f177e802f0000000000000000000000000000000000000000000000000000000081526001600160a01b038716600482015260248101849052604401610a54565b6138ff858560016123eb565b61390b838560006136ce565b82846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050505050565b6001600160a01b03808316600090815260376020908152604080832093851683529290529081205460ff16610a14565b60008060006139968660400151613beb565b925050915060006139b583886000015189602001516101980291010190565b87519091506001905b604089015189516139cf9190614e4d565b811015613af75760208901515b89604001518a602001516139f09190614e4d565b811015613ae55760008060038a1015613a1e57613a0e8e85856144a4565b8015613a175750845b9050613aba565b613a4d8e8e60405180606001604052808881526020018781526020018e815250600060028f61237c9190614d08565b9050610198830287850101613a6181612c31565b92508215613ab85781158015613a8057508e6001600160a01b03168314155b15613aa85760405163c1194ebf60e01b81526004810186905260248101859052604401610a54565b6000818152603660205260408120555b505b8080613ac557508115155b8015613ace5750845b945050508781613ade9190614e4d565b90506139dc565b50613af08782614e4d565b90506139be565b508615613b845780158015613b345750896001600160a01b0316613b2889604001518a600001518b602001516125e5565b6001600160a01b031614155b15613b5d576040516322718ad960e21b81526001600160a01b038b166004820152602401610a54565b60008281526036602052604090206001600160a01b038a1690556001945050505050613b8a565b93505050505b95945050505050565b6114a38282613ba185612b47565b036001600160a01b0391909116600090815260356020526040902055565b6114a38282613bcd85612b47565b016001600160a01b0391909116600090815260356020526040902055565b600080600083600103613c05576000925060039150611420565b83600303613c39577f0100000000000000000000000000000000000000000000000000000000000000925060069150611420565b83600603613c8f57507f02000000000000000000000000000000000000000000000000000000000000009150600c90507f0100000000000000000000000000000000000000000000000000000000000000611420565b83600c03613ce557507f03000000000000000000000000000000000000000000000000000000000000009150601890507f0200000000000000000000000000000000000000000000000000000000000000611420565b507f0400000000000000000000000000000000000000000000000000000000000000939092507f03000000000000000000000000000000000000000000000000000000000000009150565b6000806000613d3e84613beb565b50509050600088604001518960000151613d589190614e4d565b9050600089604001518a60200151613d709190614e4d565b8a519091505b82811015613eac5760208b01515b82811015613e9a576000613db38c60405180606001604052808681526020018581526020018c8152508c613ee6565b905080613e88576101988202868401016000613dce82611255565b90508f6001600160a01b0316816001600160a01b031603613e5a5760405180606001604052808681526020018581526020018c8152508e8d81518110613e1657613e16614e37565b60200260200101819052508b80613e2c90614e60565b9c50613e3a90508b80614cdb565b613e44908e614e4d565b6000838152603660205260408120559c50613e85565b6001600160a01b03811615613e85576040516314b27b7f60e31b815260048101839052602401610a54565b50505b50613e938882614e4d565b9050613d84565b50613ea58782614e4d565b9050613d76565b50613eb8600287614d08565b955060038610613ed557613ed08b8b8b8b8b8b613d30565b985096505b509499959850949650505050505050565b6000805b82811015613f94576000858281518110613f0657613f06614e37565b6020026020010151905084604001518160400151118015613f2957508051855110155b8015613f45575060408101518151613f419190614e4d565b8551105b8015613f5957508060200151856020015110155b8015613f7b575080604001518160200151613f749190614e4d565b8560200151105b15613f8b57600192505050610a14565b50600101613eea565b506000949350505050565b6000856001600160a01b03163b118015613fbd5750613fbd8561339e565b156141925760008667ffffffffffffffff811115613fdd57613fdd61490b565b604051908082528060200260200182016040528015614006578160200160208202803683370190505b509050600080886140178880614cdb565b6140219190614e8e565b67ffffffffffffffff8111156140395761403961490b565b604051908082528060200260200182016040528015614062578160200160208202803683370190505b5090506000805b6140738980614cdb565b81101561416d576000614088828b8b8b6133ca565b90506140c08e60405180606001604052806140a285612b94565b81526020016140b085612b65565b815260200160018152508f613ee6565b156140f557808686815181106140d8576140d8614e37565b6020908102919091010152846140ed81614e60565b955050614164565b8e6001600160a01b031661410882611255565b6001600160a01b03160361413857600081815260366020526040812055808686815181106140d8576140d8614e37565b8084848151811061414b5761414b614e37565b60209081029190910101528261416081614e60565b9350505b50600101614069565b5061417c8d60008b85896133ff565b6141898d8e8b87896133ff565b50505050612114565b60005b61419f8580614cdb565b8110156121125760006141b4828787876133ca565b90508a6001600160a01b03166141c982611255565b6001600160a01b0316036141e7576000818152603660205260408120555b50600101614195565b60006141fb82613beb565b5050905081851161425e57600061422c82846142178189614d08565b6142219190614cdb565b856126228189614d08565b905061423781612c31565b15614258576040516314b27b7f60e31b815260048101829052602401610a54565b506142e9565b600061426a8686614e4d565b905060006142788786614e4d565b9050855b828110156142e557855b828110156142d3576101988102858301016142a081612c31565b156142c1576040516314b27b7f60e31b815260048101829052602401610a54565b506142cc8682614e4d565b9050614286565b506142de8582614e4d565b905061427c565b5050505b6142f4600283614d08565b91506003821061153457611534858585856141f0565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310614353577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef8100000000831061437f576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061439d57662386f26fc10000830492506010015b6305f5e10083106143b5576305f5e100830492506008015b61271083106143c957612710830492506004015b606483106143db576064830492506002015b600a83106109505760010192915050565b6040516001600160e01b031982166024820152600090819060440160408051601f19818403018152919052602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01ffc9a700000000000000000000000000000000000000000000000000000000178152825192935060009283928392909183918a617530fa92503d9150600051905082801561448d575060208210155b80156144995750600081115b979650505050505050565b600061019882028301816144b782612c31565b905080156145555774010000000000000000000000000000000000000000808216036145005760405163c1194ebf60e01b81526004810186905260248101859052604401610a54565b856001600160a01b0316816001600160a01b03161461453d576040516322718ad960e21b81526001600160a01b0387166004820152602401610a54565b50600090815260366020526040812055506001610a14565b50600095945050505050565b6001600160e01b031981168114610f2057600080fd5b60006020828403121561458957600080fd5b8135610a1481614561565b6000602082840312156145a657600080fd5b5035919050565b60005b838110156145c85781810151838201526020016145b0565b50506000910152565b600081518084526145e98160208601602086016145ad565b601f01601f19169290920160200192915050565b602081526000610a1460208301846145d1565b6001600160a01b0381168114610f2057600080fd5b803561110f81614610565b6000806040838503121561464357600080fd5b823561464e81614610565b946020939093013593505050565b60008083601f84011261466e57600080fd5b50813567ffffffffffffffff81111561468657600080fd5b6020830191508360208260051b8501011115610ca057600080fd5b60008083601f8401126146b357600080fd5b50813567ffffffffffffffff8111156146cb57600080fd5b602083019150836020828501011115610ca057600080fd5b600080600080600080608087890312156146fc57600080fd5b863561470781614610565b9550602087013561471781614610565b9450604087013567ffffffffffffffff8082111561473457600080fd5b6147408a838b0161465c565b9096509450606089013591508082111561475957600080fd5b5061476689828a016146a1565b979a9699509497509295939492505050565b60008060006060848603121561478d57600080fd5b833561479881614610565b925060208401356147a881614610565b929592945050506040919091013590565b600080604083850312156147cc57600080fd5b50508035926020909101359150565b600080600080600080600060c0888a0312156147f657600080fd5b873561480181614610565b9650602088013561481181614610565b955060408801359450606088013593506080880135925060a088013567ffffffffffffffff81111561484257600080fd5b61484e8a828b016146a1565b989b979a50959850939692959293505050565b60006020828403121561487357600080fd5b8135610a1481614610565b60008060008060008060a0878903121561489757600080fd5b86356148a281614610565b9550602087013594506040870135935060608701359250608087013567ffffffffffffffff8111156148d357600080fd5b61476689828a016146a1565b6000806000606084860312156148f457600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561494a5761494a61490b565b604052919050565b600067ffffffffffffffff82111561496c5761496c61490b565b50601f01601f191660200190565b600082601f83011261498b57600080fd5b813561499e61499982614952565b614921565b8181528460208386010111156149b357600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312156149e857600080fd5b85356149f381614610565b9450602086013593506040860135925060608601359150608086013567ffffffffffffffff811115614a2457600080fd5b614a308882890161497a565b9150509295509295909350565b8015158114610f2057600080fd5b60008060408385031215614a5e57600080fd5b8235614a6981614610565b91506020830135614a7981614a3d565b809150509250929050565b8315158152826020820152606060408201526000613b8a60608301846145d1565b60008060008060808587031215614abb57600080fd5b8435614ac681614610565b93506020850135614ad681614610565b925060408501359150606085013567ffffffffffffffff811115614af957600080fd5b614b058782880161497a565b91505092959194509250565b60008060408385031215614b2457600080fd5b8235614b2f81614610565b91506020830135614a7981614610565b60008060008060008060008060008060c08b8d031215614b5e57600080fd5b614b678b614625565b9950614b7560208c01614625565b985060408b013567ffffffffffffffff80821115614b9257600080fd5b614b9e8e838f0161465c565b909a50985060608d0135915080821115614bb757600080fd5b614bc38e838f0161465c565b909850965060808d0135915080821115614bdc57600080fd5b614be88e838f0161465c565b909650945060a08d0135915080821115614c0157600080fd5b50614c0e8d828e016146a1565b915080935050809150509295989b9194979a5092959850565b600080600060608486031215614c3c57600080fd5b8335614c4781614610565b92506020840135614c5781614610565b91506040840135614c6781614a3d565b809150509250925092565b600060208284031215614c8457600080fd5b8151610a1481614a3d565b60008060408385031215614ca257600080fd5b8251614cad81614610565b602084015190925061ffff81168114614a7957600080fd5b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761095057610950614cc5565b634e487b7160e01b600052601260045260246000fd5b600082614d1757614d17614cf2565b500490565b600060208284031215614d2e57600080fd5b5051919050565b600080600060608486031215614d4a57600080fd5b8351614d5581614a3d565b60208501516040860151919450925067ffffffffffffffff811115614d7957600080fd5b8401601f81018613614d8a57600080fd5b8051614d9861499982614952565b818152876020838501011115614dad57600080fd5b614dbe8260208301602086016145ad565b8093505050509250925092565b7f68747470733a2f2f6170692e73616e64626f782e67616d652f6c616e64732f00815260008251614e0381601f8501602087016145ad565b7f2f6d657461646174612e6a736f6e000000000000000000000000000000000000601f939091019283015250602d01919050565b634e487b7160e01b600052603260045260246000fd5b8082018082111561095057610950614cc5565b60006000198203614e7357614e73614cc5565b5060010190565b600082614e8957614e89614cf2565b500690565b8181038181111561095057610950614cc5565b6000608082016001600160a01b0380881684526020818816602086015260806040860152829150865180845260a08601925060208801935060005b81811015614ef857845184529382019392820192600101614edc565b5050508381036060850152614f0d81866145d1565b98975050505050505050565b600060208284031215614f2b57600080fd5b8151610a1481614561565b60006001600160a01b03808716835280861660208401525083604083015260806060830152614f6860808301846145d1565b969550505050505056fea2646970667358221220be5c74b0d6c8a811e704b53819ff9407a7130b48f9bfe0908ce77d47d472458564736f6c63430008170033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103365760003560e01c80638da5cb5b116101b2578063ab01b469116100f9578063ce1b815f116100a2578063e985e9c51161007c578063e985e9c514610701578063eaa5e06714610714578063eeb5a5d114610727578063f2fde38b1461073a57600080fd5b8063ce1b815f146106d3578063cf456ae7146106db578063da742228146106ee57600080fd5b8063b88d4fde116100d3578063b88d4fde1461069a578063c4d66de8146106ad578063c87b56dd146106c057600080fd5b8063ab01b4691461066c578063ac9fe4211461067f578063b0ccc31e1461069257600080fd5b80639a7ac3131161015b578063a22cb46511610135578063a22cb46514610624578063a574cea414610637578063aa271e1a1461065957600080fd5b80639a7ac313146106095780639d28fb86146106115780639ededf77146103f857600080fd5b806395c671d81161018c57806395c671d8146105b557806395d89b41146105c85780639a1b2fb41461060157600080fd5b80638da5cb5b146105875780638e5cb5f61461058f5780638f283970146105a257600080fd5b806338bb305a11610281578063572b6c051161022a5780636e1e3bbf116102045780636e1e3bbf146105465780636e9960c31461055957806370a0823114610561578063845a46971461057457600080fd5b8063572b6c051461050d5780636352211e14610520578063654b748a1461053357600080fd5b80634e6a0f441161025b5780634e6a0f44146104d457806350cf5a31146104e757806355064d85146104fa57600080fd5b806338bb305a1461049b57806342842e0e146104ae578063468ad0a6146104c157600080fd5b806315ddc535116102e35780632a55205a116102bd5780632a55205a146104435780632b26a407146104755780632b9917461461048857600080fd5b806315ddc5351461040a57806323b872dd1461041d57806328cfbd461461043057600080fd5b8063081812fc11610314578063081812fc146103b8578063095ea7b3146103e35780630ef26743146103f857600080fd5b806301ffc9a71461033b578063029bca781461036357806306fdde0314610376575b600080fd5b61034e610349366004614577565b61074d565b60405190151581526020015b60405180910390f35b61034e610371366004614594565b610956565b60408051808201909152600f81527f53616e64626f782773204c414e4473000000000000000000000000000000000060208201525b60405161035a91906145fd565b6103cb6103c6366004614594565b610a1b565b6040516001600160a01b03909116815260200161035a565b6103f66103f1366004614630565b610a7e565b005b6101985b60405190815260200161035a565b6103f66104183660046146e3565b610aa0565b6103f661042b366004614778565b610b1e565b6103f661043e3660046146e3565b610b5c565b6104566104513660046147b9565b610bcf565b604080516001600160a01b03909316835260208301919091520161035a565b6103fc610483366004614594565b610ca7565b6103f6610496366004614778565b610d65565b6103f66104a93660046147db565b610d7b565b6103f66104bc366004614778565b610e8f565b6103f66104cf366004614861565b610ed7565b6103f66104e236600461487e565b610f23565b6103f66104f5366004614861565b611057565b61034e6105083660046148df565b6110a0565b61034e61051b366004614861565b6110cd565b6103cb61052e366004614594565b6110d8565b61034e610541366004614861565b611114565b6103f66105543660046149d0565b61111f565b6103cb61117d565b6103fc61056f366004614861565b61118c565b6103fc610582366004614594565b6111c1565b6103cb6111cc565b6103fc61059d366004614594565b611201565b6103f66105b0366004614861565b61120c565b6103fc6105c3366004614594565b611255565b60408051808201909152600481527f4c414e440000000000000000000000000000000000000000000000000000000060208201526103ab565b6103cb611260565b6103cb611289565b6103f661061f366004614861565b6112b2565b6103f6610632366004614a4b565b6112fb565b61064a610645366004614594565b611318565b60405161035a93929190614a84565b61034e610667366004614861565b611427565b6103f661067a366004614a4b565b611432565b6103f661068d366004614a4b565b6114a7565b6103cb6114f1565b6103f66106a8366004614aa5565b6114fb565b6103f66106bb366004614861565b61153b565b6103ab6106ce366004614594565b6116d8565b6103cb61173e565b6103f66106e9366004614a4b565b611748565b6103f66106fc366004614861565b611792565b61034e61070f366004614b11565b6117db565b6103f6610722366004614b3f565b6117e7565b6103f6610735366004614c27565b611b06565b6103f6610748366004614861565b611b1c565b60006001600160e01b031982167f80ac58cd0000000000000000000000000000000000000000000000000000000014806107b057506001600160e01b031982167f3d12787300000000000000000000000000000000000000000000000000000000145b806107e457506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061081857506001600160e01b031982167f01ffc9a700000000000000000000000000000000000000000000000000000000145b8061084c57506001600160e01b031982167f7f5828d000000000000000000000000000000000000000000000000000000000145b8061088057506001600160e01b031982167f2a55205a00000000000000000000000000000000000000000000000000000000145b806108b457506001600160e01b031982167f3b18763a00000000000000000000000000000000000000000000000000000000145b806108e857506001600160e01b031982167fe906a60700000000000000000000000000000000000000000000000000000000145b8061091c57506001600160e01b031982167fd21ed03d00000000000000000000000000000000000000000000000000000000145b8061095057506001600160e01b031982167f519cd8d900000000000000000000000000000000000000000000000000000000145b92915050565b7f3899f13de39885dfce849839be8330453b5866928dd0e5933e36794349628400546000906001600160a01b0316806109925750600092915050565b6040517f029bca78000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b0382169063029bca7890602401602060405180830381865afa1580156109f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a149190614c72565b9392505050565b6000806000610a2984611b65565b90925090506001600160a01b038216610a5d57604051637e27328960e01b8152600481018590526024015b60405180910390fd5b8015610a7457610a6c84611c42565b949350505050565b5060009392505050565b81610a893082611c5f565b610a9b610a94611d78565b8484611d82565b505050565b85610aa9611d78565b6001600160a01b0316816001600160a01b031614610ad257610ad230610acd611d78565b611c5f565b610b158787878787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509250611eac915050565b50505050505050565b82610b27611d78565b6001600160a01b0316816001600160a01b031614610b4b57610b4b30610acd611d78565b610b5684848461211f565b50505050565b85610b65611d78565b6001600160a01b0316816001600160a01b031614610b8957610b8930610acd611d78565b610b158787878787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525060019250611eac915050565b7ff7bae505580fc5d233bb20f4fb93f39f43d44ecc81ed63dd6455097b4c4550008054604080517fa86a28d100000000000000000000000000000000000000000000000000000000815281516000948594909385936001600160a01b039092169263a86a28d19260048082019392918290030181865afa158015610c57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7b9190614c8f565b9094509050612710610c9161ffff831687614cdb565b610c9b9190614d08565b925050505b9250929050565b7f3899f13de39885dfce849839be8330453b5866928dd0e5933e36794349628400546000906001600160a01b031680610ce35750600092915050565b6040517f2b26a407000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b03821690632b26a40790602401602060405180830381865afa158015610d41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a149190614d1c565b81610d703082611c5f565b610b56848484611d82565b6000610d85611d78565b90506001600160a01b0388161580610da457506001600160a01b038716155b15610dc25760405163e6c4247b60e01b815260040160405180910390fd5b876001600160a01b0316816001600160a01b031614158015610deb5750610de98882612176565b155b15610e14576040516322718ad960e21b81526001600160a01b0382166004820152602401610a54565b610e1f868686612191565b610e2c88888888886122a3565b610e408888610e3b8980614cdb565b6123eb565b610e8581898989898989898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061241892505050565b5050505050505050565b82610e98611d78565b6001600160a01b0316816001600160a01b031614610ebc57610ebc30610acd611d78565b610b56848484604051806020016040528060008152506124de565b610edf612513565b6001600160a01b0316610ef0611d78565b6001600160a01b031614610f1757604051634755657960e01b815260040160405180910390fd5b610f2081612527565b50565b6000610f2d611d78565b9050610f38816125c4565b610f60576040516322718ad960e21b81526001600160a01b0382166004820152602401610a54565b6001600160a01b038716610f875760405163e6c4247b60e01b815260040160405180910390fd5b610f92868686612191565b6000610f9f8787876125e5565b6001600160a01b03161461101357610fba81888888886122a3565b610fc98188610e3b8980614cdb565b61100e81828989898989898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061241892505050565b610b15565b610b15818888888888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061267c92505050565b61105f612513565b6001600160a01b0316611070611d78565b6001600160a01b03161461109757604051634755657960e01b815260040160405180910390fd5b610f208161295a565b60006110ad848484612191565b60006110ba8585856125e5565b6001600160a01b03161415949350505050565b6000610950826129d0565b60006110e3826129f5565b90506001600160a01b03811661110f57604051637e27328960e01b815260048101839052602401610a54565b919050565b600061095082612a07565b6000611129611d78565b9050611134816125c4565b61115c576040516322718ad960e21b81526001600160a01b0382166004820152602401610a54565b611167858585612191565b611175818787878787612a28565b505050505050565b6000611187612513565b905090565b60006001600160a01b0382166111b8576040516322718ad960e21b815260006004820152602401610a54565b61095082612b47565b600061095082612b65565b6000807f1836e2fa424a35b79c13fd66f8e282cb3a31513f9610d6e7a99baf7ffe56ec005b546001600160a01b031692915050565b600061095082612b94565b611214612513565b6001600160a01b0316611225611d78565b6001600160a01b03161461124c57604051634755657960e01b815260040160405180910390fd5b610f2081612bc3565b600061095082612c31565b6000807ff7bae505580fc5d233bb20f4fb93f39f43d44ecc81ed63dd6455097b4c4550006111f1565b6000807f3899f13de39885dfce849839be8330453b5866928dd0e5933e367943496284006111f1565b6112ba612513565b6001600160a01b03166112cb611d78565b6001600160a01b0316146112f257604051634755657960e01b815260040160405180910390fd5b610f2081612c45565b816113063082611c5f565b610a9b611311611d78565b8484612cab565b6000806060817f3899f13de39885dfce849839be8330453b5866928dd0e5933e36794349628400546001600160a01b031690508061139257505060408051808201909152600781527f756e6b6e6f776e00000000000000000000000000000000000000000000000000602082015260009250829150611420565b6040517fa574cea4000000000000000000000000000000000000000000000000000000008152600481018690526001600160a01b0382169063a574cea490602401600060405180830381865afa1580156113f0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114189190810190614d35565b935093509350505b9193909250565b6000610950826125c4565b61143a612513565b6001600160a01b031661144b611d78565b6001600160a01b03161461147257604051634755657960e01b815260040160405180910390fd5b6001600160a01b0382166114995760405163e6c4247b60e01b815260040160405180910390fd5b6114a38282612e25565b5050565b6114af612513565b6001600160a01b03166114c0611d78565b6001600160a01b0316146114e757604051634755657960e01b815260040160405180910390fd5b6114a38282613067565b600061118761310e565b83611504611d78565b6001600160a01b0316816001600160a01b0316146115285761152830610acd611d78565b611534858585856124de565b5050505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff166000811580156115865750825b905060008267ffffffffffffffff1660011480156115a35750303b155b9050811580156115b1575080155b156115e8576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84547fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000166001178555831561163357845468ff00000000000000001916680100000000000000001785555b600061163d612513565b6001600160a01b03161461167d576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61168686613122565b831561117557845468ff000000000000000019168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a1505050505050565b606060006116e5836129f5565b6001600160a01b03160361170f57604051637e27328960e01b815260048101839052602401610a54565b611718826131c4565b6040516020016117289190614dcb565b6040516020818303038152906040529050919050565b6000611187613264565b611750612513565b6001600160a01b0316611761611d78565b6001600160a01b03161461178857604051634755657960e01b815260040160405180910390fd5b6114a38282613278565b61179a612513565b6001600160a01b03166117ab611d78565b6001600160a01b0316146117d257604051634755657960e01b815260040160405180910390fd5b610f2081613338565b6000610a148383612176565b6001600160a01b038a16158061180457506001600160a01b038916155b156118225760405163e6c4247b60e01b815260040160405180910390fd5b86851415806118315750848314155b15611868576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611872611d78565b90508a6001600160a01b0316816001600160a01b03161415801561189d575061189b8b82612176565b155b156118c6576040516322718ad960e21b81526001600160a01b0382166004820152602401610a54565b6000805b898110156119865760008b8b838181106118e6576118e6614e37565b90506020020135905061192a818b8b8581811061190557611905614e37565b905060200201358a8a8681811061191e5761191e614e37565b90506020020135612191565b6119678e8e838d8d8781811061194257611942614e37565b905060200201358c8c8881811061195b5761195b614e37565b905060200201356122a3565b6119718180614cdb565b61197b9084614e4d565b9250506001016118ca565b506119928c8c836123eb565b60008b6001600160a01b03163b1180156119b057506119b08b61339e565b15611af85760008167ffffffffffffffff8111156119d0576119d061490b565b6040519080825280602002602001820160405280156119f9578160200160208202803683370190505b5090506000805b8b811015611ab15760008d8d83818110611a1c57611a1c614e37565b90506020020135905060005b611a328280614cdb565b811015611aa757611a7581838f8f87818110611a5057611a50614e37565b905060200201358e8e88818110611a6957611a69614e37565b905060200201356133ca565b858581518110611a8757611a87614e37565b602090810291909101015283611a9c81614e60565b945050600101611a28565b5050600101611a00565b50611af5848f8f858a8a8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506133ff92505050565b50505b505050505050505050505050565b81611b113082611c5f565b610b56848484612cab565b611b24612513565b6001600160a01b0316611b35611d78565b6001600160a01b031614611b5c57604051634755657960e01b815260040160405180910390fd5b610f2081613535565b6000807fff00000000000000000000000000000000000000000000000000000000000000831615611bac57604051637e27328960e01b815260048101849052602401610a54565b6000611bba61019885614e7a565b90506000611bca61019886614d08565b90506000611bd786612c31565b90507401000000000000000000000000000000000000000080821603611c0e5760009450600160ff1b808216149350505050915091565b8015611c2757809450600160ff1b808216149350611c3a565b611c33600384846125e5565b9450600093505b505050915091565b6000818152603860205260408120546001600160a01b0316610950565b6000611c6961310e565b90506001600160a01b0381163b15610a9b576040517fc61711340000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152838116602483015282169063c617113490604401602060405180830381865afa925050508015611cfe575060408051601f3d908101601f19168201909252611cfb91810190614c72565b60015b611d38573d808015611d2c576040519150601f19603f3d011682016040523d82523d6000602084013e611d31565b606091505b5050611d46565b8015611d445750505050565b505b6040517f8a10919300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006111876135bc565b611d8c8382613609565b506000611d97611d78565b90506000846001600160a01b0316826001600160a01b03161480611dc05750611dc08583612176565b905080611e04576040517fa9fbf51f0000000000000000000000000000000000000000000000000000000081526001600160a01b0383166004820152602401610a54565b6001600160a01b038416611e2357611e1e838660006136ce565b611e64565b611e2f838660016136ce565b6000838152603860205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386161790555b82846001600160a01b0316866001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050505050565b6001600160a01b0386161580611ec957506001600160a01b038516155b15611ee75760405163e6c4247b60e01b815260040160405180910390fd5b6000611ef1611d78565b90506000876001600160a01b0316826001600160a01b03161480611f1a5750611f1a8883612176565b90508460005b81811015612064576000888883818110611f3c57611f3c614e37565b905060200201359050600080611f5183611b65565b91509150816001600160a01b03168d6001600160a01b031614611f92576040516322718ad960e21b81526001600160a01b038e166004820152602401610a54565b85158015611fc35750808015611fc15750866001600160a01b0316611fb684611c42565b6001600160a01b0316145b155b1561200c576040517f177e802f0000000000000000000000000000000000000000000000000000000081526001600160a01b038816600482015260248101849052604401610a54565b612018838d60006136ce565b828c6001600160a01b03168e6001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050600101611f20565b506120708989836123eb565b6001600160a01b0388163b15612114576120898861339e565b156120d4576120cf838a8a8a8a808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508c92506133ff915050565b612114565b83156121145760005b818110156121125761210a848b8b8b8b868181106120fd576120fd614e37565b905060200201358a613730565b6001016120dd565b505b505050505050505050565b6000612129611d78565b90506121378185858561381b565b6000836001600160a01b03163b11801561215557506121558361339e565b15610b5657610b568185858560405180602001604052806000815250613730565b60006121828383613954565b80610a145750610a1482612a07565b826001141580156121a3575082600314155b80156121b0575082600614155b80156121bd575082600c14155b80156121ca575082601814155b15612212576040517f699b5cb0000000000000000000000000000000000000000000000000000000008152600481018490526024810183905260448101829052606401610a54565b61221c8383614e7a565b151580612231575061222e8382614e7a565b15155b80612246575061224383610198614e8e565b82115b8061225b575061225883610198614e8e565b81115b15610a9b576040517f699b5cb0000000000000000000000000000000000000000000000000000000008152600481018490526024810183905260448101829052606401610a54565b8260010361234d576101988102820160006122bd826129f5565b90506001600160a01b0381166122f05760405163c1194ebf60e01b81526004810185905260248101849052604401610a54565b866001600160a01b0316816001600160a01b03161461232d576040516322718ad960e21b81526001600160a01b0388166004820152602401610a54565b5060009081526036602052604090206001600160a01b0385169055612383565b6123818585604051806060016040528086815260200185815260200187815250600160028861237c9190614d08565b613984565b505b60005b6123908480614cdb565b811015611175576123a3818585856133ca565b856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4600101612386565b816001600160a01b0316836001600160a01b031614610a9b5761240e8382613b93565b610a9b8282613bbf565b6000856001600160a01b03163b11801561243657506124368561339e565b15610b155760006124478580614cdb565b67ffffffffffffffff81111561245f5761245f61490b565b604051908082528060200260200182016040528015612488578160200160208202803683370190505b50905060005b6124988680614cdb565b8110156124d0576124ab818787876133ca565b8282815181106124bd576124bd614e37565b602090810291909101015260010161248e565b50610e8588888884866133ff565b60006124e8611d78565b90506124f68186868661381b565b6001600160a01b0384163b15611534576115348186868686613730565b60006111876033546001600160a01b031690565b6001600160a01b03811661254e5760405163e6c4247b60e01b815260040160405180910390fd5b7f3899f13de39885dfce849839be8330453b5866928dd0e5933e36794349628400805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831690811782556040517f03ce93da23cc307353ca8a7aac205697bd48963ee54982eacb40dd9d40a1d72990600090a25050565b6001600160a01b03811660009081526039602052604081205460ff16610950565b60008060006125f386613beb565b50909250905060006126366105c3848961260d818b614d08565b6126179190614cdb565b8a612622818b614d08565b61262c9190614cdb565b6101980291010190565b90506001600160a01b03811615612651579250610a14915050565b601887101561266f576126658287876125e5565b9350505050610a14565b5060009695505050505050565b600061268785613beb565b50509050600061269d8286866101980291010190565b604080518181526108208101825291925060009190816020015b6126db60405180606001604052806000815260200160008152602001600081525090565b8152602001906001900390816126b75790505090506000806003891115612736576127308b60405180606001604052808b81526020018a81526020018c81525085848660028f61272b9190614d08565b613d30565b90925090505b60005b6127438a80614cdb565b811015612904576000612758828c8c8c6133ca565b9050600061279286604051806060016040528061277486612b94565b815260200161278286612b65565b8152602001600181525087613ee6565b905080156127e057818d6001600160a01b03168f6001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46128fa565b8d6001600160a01b03166127f383611255565b6001600160a01b03160361289757600061280c83611c42565b6001600160a01b031614612844576000828152603860205260409020805473ffffffffffffffffffffffffffffffffffffffff191690555b61284f600185614e4d565b9350818d6001600160a01b03168f6001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46128fa565b6128a082612c31565b156128c1576040516314b27b7f60e31b815260048101839052602401610a54565b60405182906001600160a01b038f16906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45b5050600101612739565b506129168b8484848e8e8e8e8e613f9f565b60008481526036602052604090206001600160a01b038b1690556129438a61293e8b80614cdb565b613bbf565b61294d8b82613b93565b5050505050505050505050565b7ff7bae505580fc5d233bb20f4fb93f39f43d44ecc81ed63dd6455097b4c455000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831690811782556040517f1ad03d64d67ed9b2c90cfdf8dc8e54de3e41af88ae55e45a53dc27e476406de890600090a25050565b60006129da613264565b6001600160a01b0316826001600160a01b0316149050919050565b6000612a0082611b65565b5092915050565b6001600160a01b03811660009081526034602052604081205460ff16610950565b6001600160a01b038516612a4f5760405163e6c4247b60e01b815260040160405180910390fd5b6000612a5a85613beb565b505090506000612a708286866101980291010190565b9050612a7f86868660186141f0565b60005b612a8c8780614cdb565b811015612b0e576000612aa1828989896133ca565b9050612aac81612c31565b15612acd576040516314b27b7f60e31b815260048101829052602401610a54565b60405181906001600160a01b038b16906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a450600101612a82565b5060008181526036602052604090206001600160a01b0388169055612b378761293e8880614cdb565b610e858860008989898989612418565b6001600160a01b038116600090815260356020526040812054610950565b60006109506101987effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8416614d08565b60006109506101987effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8416614e7a565b6000612bcd612513565b90506001600160a01b038116612bf65760405163e6c4247b60e01b815260040160405180910390fd5b816001600160a01b0316816001600160a01b031603612c285760405163a9cb9e0d60e01b815260040160405180910390fd5b6114a382613122565b600081815260366020526040812054610950565b612c7481606c805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831617905550565b6040516001600160a01b038216907fc6df119c56c99171b170652a3c4750ba46dcaacbdb3b7ab4847a9fa339659bd490600090a250565b6001600160a01b038316612cf6576040517f73c6ac6e0000000000000000000000000000000000000000000000000000000081526001600160a01b0384166004820152602401610a54565b6000612d00611d78565b9050836001600160a01b0316816001600160a01b031614158015612d2a5750612d2881612a07565b155b15612d6c576040517fa9fbf51f0000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610a54565b612d7583612a07565b15612db7576040517f5b08ba180000000000000000000000000000000000000000000000000000000081526001600160a01b0384166004820152602401610a54565b6001600160a01b03848116600081815260376020908152604080832094881680845294825291829020805460ff191687151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a350505050565b6000612e2f61310e565b90506001600160a01b0381163b1561301d576040517fc3c5a5470000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0382169063c3c5a547906024016020604051808303816000875af1158015612ea0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ec49190614c72565b61301d578115612f4e576040517f7d3e3dbe0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038481166024830152821690637d3e3dbe906044015b600060405180830381600087803b158015612f3157600080fd5b505af1158015612f45573d6000803e3d6000fd5b5050505061301d565b6001600160a01b03831615612faa576040517fa0af29030000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03848116602483015282169063a0af290390604401612f17565b6040517f4420e4860000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03821690634420e48690602401600060405180830381600087803b15801561300457600080fd5b505af1158015613018573d6000803e3d6000fd5b505050505b826001600160a01b03167f3c7a9c847c035e45b84027e44ad55724873d5921b3a6abb8c0926b415d9241b18360405161305a911515815260200190565b60405180910390a2505050565b6001600160a01b03821661308e5760405163e6c4247b60e01b815260040160405180910390fd5b61309782612a07565b1515811515036130ba5760405163a9cb9e0d60e01b815260040160405180910390fd5b6001600160a01b038216600081815260346020526040808220805460ff191685151590811790915590519092917f44f92d27abdf4cfb6a7d712c3af68f3be086d4ca747ab802c36f67d6790060d891a35050565b6000611187606c546001600160a01b031690565b6001600160a01b0381166131495760405163e6c4247b60e01b815260040160405180910390fd5b6000613153612513565b9050816001600160a01b0316816001600160a01b03167f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f60405160405180910390a36114a3826033805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831617905550565b606060006131d18361430a565b600101905060008167ffffffffffffffff8111156131f1576131f161490b565b6040519080825280601f01601f19166020018201604052801561321b576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461322557509392505050565b6000611187606b546001600160a01b031690565b6001600160a01b03821661329f5760405163e6c4247b60e01b815260040160405180910390fd5b6132a8826125c4565b1515811515036132cb5760405163a9cb9e0d60e01b815260040160405180910390fd5b6001600160a01b0382166000908152603960205260409020805460ff1916821515179055816001600160a01b03167fff452b3b9159b024a9098f0058c63eccd90d36b3584608202800d662f962bb608260405161332c911515815260200190565b60405180910390a25050565b61336781606b805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831617905550565b6040516001600160a01b038216907fd91237492a9e30cd2faf361fc103998a382ff0ec2b1b07dc1cbebb76ae2f1ea290600090a250565b6000610950827f5e8bf644000000000000000000000000000000000000000000000000000000006143ec565b60006101988486816133de576133de614cf2565b048301028486816133f1576133f1614cf2565b068401019050949350505050565b6040517f4b808c460000000000000000000000000000000000000000000000000000000081526001600160a01b03841690634b808c469061344a908890889087908790600401614ea1565b6020604051808303816000875af1925050508015613485575060408051601f3d908101601f1916820190925261348291810190614f19565b60015b6134bf573d8080156134b3576040519150601f19603f3d011682016040523d82523d6000602084013e6134b8565b606091505b50506134f8565b7fb47f73ba000000000000000000000000000000000000000000000000000000006001600160e01b03198216016134f65750611534565b505b6040517f64a0ae920000000000000000000000000000000000000000000000000000000081526001600160a01b0384166004820152602401610a54565b7f1836e2fa424a35b79c13fd66f8e282cb3a31513f9610d6e7a99baf7ffe56ec0080546040516001600160a01b038481169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60006135c7336129d0565b80156135d4575060143610155b1561360457507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c90565b503390565b60006001600160a01b038316613656576040517f73c6ac6e0000000000000000000000000000000000000000000000000000000081526001600160a01b0384166004820152602401610a54565b60008061366284611b65565b90925090506001600160a01b03821661369157604051637e27328960e01b815260048101859052602401610a54565b816001600160a01b0316856001600160a01b031614610a6c576040516322718ad960e21b81526001600160a01b0386166004820152602401610a54565b60006001600160a01b0383166136e96001600160ff1b614e8e565b73ffffffffffffffffffffffffffffffffffffffff191661370986612c31565b16179050811561371a57600160ff1b175b6000848152603660205260409020819055610b56565b6040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0384169063150b7a029061377b908890889087908790600401614f36565b6020604051808303816000875af19250505080156137b6575060408051601f3d908101601f191682019092526137b391810190614f19565b60015b6137e4573d8080156134b3576040519150601f19603f3d011682016040523d82523d6000602084013e6134b8565b7feaf485fe000000000000000000000000000000000000000000000000000000006001600160e01b03198216016134f65750611534565b6001600160a01b0382166138425760405163e6c4247b60e01b815260040160405180910390fd5b600061384e8483613609565b90506000846001600160a01b0316866001600160a01b0316148061387757506138778587612176565b9050801580156138aa57508180156138a85750856001600160a01b031661389d84611c42565b6001600160a01b0316145b155b156138f3576040517f177e802f0000000000000000000000000000000000000000000000000000000081526001600160a01b038716600482015260248101849052604401610a54565b6138ff858560016123eb565b61390b838560006136ce565b82846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050505050565b6001600160a01b03808316600090815260376020908152604080832093851683529290529081205460ff16610a14565b60008060006139968660400151613beb565b925050915060006139b583886000015189602001516101980291010190565b87519091506001905b604089015189516139cf9190614e4d565b811015613af75760208901515b89604001518a602001516139f09190614e4d565b811015613ae55760008060038a1015613a1e57613a0e8e85856144a4565b8015613a175750845b9050613aba565b613a4d8e8e60405180606001604052808881526020018781526020018e815250600060028f61237c9190614d08565b9050610198830287850101613a6181612c31565b92508215613ab85781158015613a8057508e6001600160a01b03168314155b15613aa85760405163c1194ebf60e01b81526004810186905260248101859052604401610a54565b6000818152603660205260408120555b505b8080613ac557508115155b8015613ace5750845b945050508781613ade9190614e4d565b90506139dc565b50613af08782614e4d565b90506139be565b508615613b845780158015613b345750896001600160a01b0316613b2889604001518a600001518b602001516125e5565b6001600160a01b031614155b15613b5d576040516322718ad960e21b81526001600160a01b038b166004820152602401610a54565b60008281526036602052604090206001600160a01b038a1690556001945050505050613b8a565b93505050505b95945050505050565b6114a38282613ba185612b47565b036001600160a01b0391909116600090815260356020526040902055565b6114a38282613bcd85612b47565b016001600160a01b0391909116600090815260356020526040902055565b600080600083600103613c05576000925060039150611420565b83600303613c39577f0100000000000000000000000000000000000000000000000000000000000000925060069150611420565b83600603613c8f57507f02000000000000000000000000000000000000000000000000000000000000009150600c90507f0100000000000000000000000000000000000000000000000000000000000000611420565b83600c03613ce557507f03000000000000000000000000000000000000000000000000000000000000009150601890507f0200000000000000000000000000000000000000000000000000000000000000611420565b507f0400000000000000000000000000000000000000000000000000000000000000939092507f03000000000000000000000000000000000000000000000000000000000000009150565b6000806000613d3e84613beb565b50509050600088604001518960000151613d589190614e4d565b9050600089604001518a60200151613d709190614e4d565b8a519091505b82811015613eac5760208b01515b82811015613e9a576000613db38c60405180606001604052808681526020018581526020018c8152508c613ee6565b905080613e88576101988202868401016000613dce82611255565b90508f6001600160a01b0316816001600160a01b031603613e5a5760405180606001604052808681526020018581526020018c8152508e8d81518110613e1657613e16614e37565b60200260200101819052508b80613e2c90614e60565b9c50613e3a90508b80614cdb565b613e44908e614e4d565b6000838152603660205260408120559c50613e85565b6001600160a01b03811615613e85576040516314b27b7f60e31b815260048101839052602401610a54565b50505b50613e938882614e4d565b9050613d84565b50613ea58782614e4d565b9050613d76565b50613eb8600287614d08565b955060038610613ed557613ed08b8b8b8b8b8b613d30565b985096505b509499959850949650505050505050565b6000805b82811015613f94576000858281518110613f0657613f06614e37565b6020026020010151905084604001518160400151118015613f2957508051855110155b8015613f45575060408101518151613f419190614e4d565b8551105b8015613f5957508060200151856020015110155b8015613f7b575080604001518160200151613f749190614e4d565b8560200151105b15613f8b57600192505050610a14565b50600101613eea565b506000949350505050565b6000856001600160a01b03163b118015613fbd5750613fbd8561339e565b156141925760008667ffffffffffffffff811115613fdd57613fdd61490b565b604051908082528060200260200182016040528015614006578160200160208202803683370190505b509050600080886140178880614cdb565b6140219190614e8e565b67ffffffffffffffff8111156140395761403961490b565b604051908082528060200260200182016040528015614062578160200160208202803683370190505b5090506000805b6140738980614cdb565b81101561416d576000614088828b8b8b6133ca565b90506140c08e60405180606001604052806140a285612b94565b81526020016140b085612b65565b815260200160018152508f613ee6565b156140f557808686815181106140d8576140d8614e37565b6020908102919091010152846140ed81614e60565b955050614164565b8e6001600160a01b031661410882611255565b6001600160a01b03160361413857600081815260366020526040812055808686815181106140d8576140d8614e37565b8084848151811061414b5761414b614e37565b60209081029190910101528261416081614e60565b9350505b50600101614069565b5061417c8d60008b85896133ff565b6141898d8e8b87896133ff565b50505050612114565b60005b61419f8580614cdb565b8110156121125760006141b4828787876133ca565b90508a6001600160a01b03166141c982611255565b6001600160a01b0316036141e7576000818152603660205260408120555b50600101614195565b60006141fb82613beb565b5050905081851161425e57600061422c82846142178189614d08565b6142219190614cdb565b856126228189614d08565b905061423781612c31565b15614258576040516314b27b7f60e31b815260048101829052602401610a54565b506142e9565b600061426a8686614e4d565b905060006142788786614e4d565b9050855b828110156142e557855b828110156142d3576101988102858301016142a081612c31565b156142c1576040516314b27b7f60e31b815260048101829052602401610a54565b506142cc8682614e4d565b9050614286565b506142de8582614e4d565b905061427c565b5050505b6142f4600283614d08565b91506003821061153457611534858585856141f0565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310614353577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef8100000000831061437f576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061439d57662386f26fc10000830492506010015b6305f5e10083106143b5576305f5e100830492506008015b61271083106143c957612710830492506004015b606483106143db576064830492506002015b600a83106109505760010192915050565b6040516001600160e01b031982166024820152600090819060440160408051601f19818403018152919052602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01ffc9a700000000000000000000000000000000000000000000000000000000178152825192935060009283928392909183918a617530fa92503d9150600051905082801561448d575060208210155b80156144995750600081115b979650505050505050565b600061019882028301816144b782612c31565b905080156145555774010000000000000000000000000000000000000000808216036145005760405163c1194ebf60e01b81526004810186905260248101859052604401610a54565b856001600160a01b0316816001600160a01b03161461453d576040516322718ad960e21b81526001600160a01b0387166004820152602401610a54565b50600090815260366020526040812055506001610a14565b50600095945050505050565b6001600160e01b031981168114610f2057600080fd5b60006020828403121561458957600080fd5b8135610a1481614561565b6000602082840312156145a657600080fd5b5035919050565b60005b838110156145c85781810151838201526020016145b0565b50506000910152565b600081518084526145e98160208601602086016145ad565b601f01601f19169290920160200192915050565b602081526000610a1460208301846145d1565b6001600160a01b0381168114610f2057600080fd5b803561110f81614610565b6000806040838503121561464357600080fd5b823561464e81614610565b946020939093013593505050565b60008083601f84011261466e57600080fd5b50813567ffffffffffffffff81111561468657600080fd5b6020830191508360208260051b8501011115610ca057600080fd5b60008083601f8401126146b357600080fd5b50813567ffffffffffffffff8111156146cb57600080fd5b602083019150836020828501011115610ca057600080fd5b600080600080600080608087890312156146fc57600080fd5b863561470781614610565b9550602087013561471781614610565b9450604087013567ffffffffffffffff8082111561473457600080fd5b6147408a838b0161465c565b9096509450606089013591508082111561475957600080fd5b5061476689828a016146a1565b979a9699509497509295939492505050565b60008060006060848603121561478d57600080fd5b833561479881614610565b925060208401356147a881614610565b929592945050506040919091013590565b600080604083850312156147cc57600080fd5b50508035926020909101359150565b600080600080600080600060c0888a0312156147f657600080fd5b873561480181614610565b9650602088013561481181614610565b955060408801359450606088013593506080880135925060a088013567ffffffffffffffff81111561484257600080fd5b61484e8a828b016146a1565b989b979a50959850939692959293505050565b60006020828403121561487357600080fd5b8135610a1481614610565b60008060008060008060a0878903121561489757600080fd5b86356148a281614610565b9550602087013594506040870135935060608701359250608087013567ffffffffffffffff8111156148d357600080fd5b61476689828a016146a1565b6000806000606084860312156148f457600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561494a5761494a61490b565b604052919050565b600067ffffffffffffffff82111561496c5761496c61490b565b50601f01601f191660200190565b600082601f83011261498b57600080fd5b813561499e61499982614952565b614921565b8181528460208386010111156149b357600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312156149e857600080fd5b85356149f381614610565b9450602086013593506040860135925060608601359150608086013567ffffffffffffffff811115614a2457600080fd5b614a308882890161497a565b9150509295509295909350565b8015158114610f2057600080fd5b60008060408385031215614a5e57600080fd5b8235614a6981614610565b91506020830135614a7981614a3d565b809150509250929050565b8315158152826020820152606060408201526000613b8a60608301846145d1565b60008060008060808587031215614abb57600080fd5b8435614ac681614610565b93506020850135614ad681614610565b925060408501359150606085013567ffffffffffffffff811115614af957600080fd5b614b058782880161497a565b91505092959194509250565b60008060408385031215614b2457600080fd5b8235614b2f81614610565b91506020830135614a7981614610565b60008060008060008060008060008060c08b8d031215614b5e57600080fd5b614b678b614625565b9950614b7560208c01614625565b985060408b013567ffffffffffffffff80821115614b9257600080fd5b614b9e8e838f0161465c565b909a50985060608d0135915080821115614bb757600080fd5b614bc38e838f0161465c565b909850965060808d0135915080821115614bdc57600080fd5b614be88e838f0161465c565b909650945060a08d0135915080821115614c0157600080fd5b50614c0e8d828e016146a1565b915080935050809150509295989b9194979a5092959850565b600080600060608486031215614c3c57600080fd5b8335614c4781614610565b92506020840135614c5781614610565b91506040840135614c6781614a3d565b809150509250925092565b600060208284031215614c8457600080fd5b8151610a1481614a3d565b60008060408385031215614ca257600080fd5b8251614cad81614610565b602084015190925061ffff81168114614a7957600080fd5b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761095057610950614cc5565b634e487b7160e01b600052601260045260246000fd5b600082614d1757614d17614cf2565b500490565b600060208284031215614d2e57600080fd5b5051919050565b600080600060608486031215614d4a57600080fd5b8351614d5581614a3d565b60208501516040860151919450925067ffffffffffffffff811115614d7957600080fd5b8401601f81018613614d8a57600080fd5b8051614d9861499982614952565b818152876020838501011115614dad57600080fd5b614dbe8260208301602086016145ad565b8093505050509250925092565b7f68747470733a2f2f6170692e73616e64626f782e67616d652f6c616e64732f00815260008251614e0381601f8501602087016145ad565b7f2f6d657461646174612e6a736f6e000000000000000000000000000000000000601f939091019283015250602d01919050565b634e487b7160e01b600052603260045260246000fd5b8082018082111561095057610950614cc5565b60006000198203614e7357614e73614cc5565b5060010190565b600082614e8957614e89614cf2565b500690565b8181038181111561095057610950614cc5565b6000608082016001600160a01b0380881684526020818816602086015260806040860152829150865180845260a08601925060208801935060005b81811015614ef857845184529382019392820192600101614edc565b5050508381036060850152614f0d81866145d1565b98975050505050505050565b600060208284031215614f2b57600080fd5b8151610a1481614561565b60006001600160a01b03808716835280861660208401525083604083015260806060830152614f6860808301846145d1565b969550505050505056fea2646970667358221220be5c74b0d6c8a811e704b53819ff9407a7130b48f9bfe0908ce77d47d472458564736f6c63430008170033",
  "devdoc": {
    "author": "The Sandbox",
    "custom:security-contact": "contact-blockchain@sandbox.game",
    "details": "We use the storage mixing for historical reasons.There is a difference between L1 and L2 storage slots order and we want to upgrade the contract.This contract uses the exact storage slots configuration that we have in `core` package so we can upgradePolygonLandStorageMixin must be the first one in the inheritance chain for subclasses",
    "errors": {
      "AlreadyMinted(uint256)": [
        {
          "params": {
            "tokenId": "the id of land"
          }
        }
      ],
      "ERC721IncorrectOwner(address,uint256,address)": [
        {
          "details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
          "params": {
            "owner": "Address of the current owner of a token.",
            "sender": "Address whose tokens are being transferred.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC721InsufficientApproval(address,uint256)": [
        {
          "details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC721InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC721InvalidOperator(address)": [
        {
          "details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC721InvalidOwner(address)": [
        {
          "details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.",
          "params": {
            "owner": "Address of the current owner of a token."
          }
        }
      ],
      "ERC721InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC721InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC721NonexistentToken(uint256)": [
        {
          "details": "Indicates a `tokenId` whose `owner` is the zero address.",
          "params": {
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "InvalidCoordinates(uint256,uint256,uint256)": [
        {
          "params": {
            "size": "The size of the quad",
            "x": "The bottom left x coordinate of the quad",
            "y": "The bottom left y coordinate of the quad"
          }
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "NotOwner(uint256,uint256)": [
        {
          "params": {
            "x": "The bottom left x coordinate of the quad",
            "y": "The bottom left y coordinate of the quad"
          }
        }
      ]
    },
    "events": {
      "AdminChanged(address,address)": {
        "params": {
          "newAdmin": "The address of the new administrator.",
          "oldAdmin": "The address of the previous administrator."
        }
      },
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "ContractRegistered(address,bool)": {
        "params": {
          "subscribe": "should it subscribe",
          "subscriptionOrRegistrant": "address to subscribe or copy entries from"
        }
      },
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "MetadataRegistrySet(address)": {
        "params": {
          "metadataRegistry": "the address of the metadata registry"
        }
      },
      "Minter(address,bool)": {
        "params": {
          "enabled": "set whether the minter is enabled or disabled.",
          "minter": "address that will be given/removed minter right."
        }
      },
      "OperatorRegistrySet(address)": {
        "params": {
          "registry": "address of the registry to set"
        }
      },
      "OwnershipTransferred(address,address)": {
        "params": {
          "newOwner": "The new address of the owner.",
          "previousOwner": "The old address of the owner."
        }
      },
      "RoyaltyManagerSet(address)": {
        "params": {
          "royaltyManager": "the address of royalty manager contract."
        }
      },
      "SuperOperator(address,bool)": {
        "params": {
          "enabled": "set whether the superOperator is enabled or disabled.",
          "superOperator": "address that will be given/removed superOperator right."
        }
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      },
      "TrustedForwarderSet(address)": {
        "params": {
          "newForwarder": "the new trusted forwarder"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "params": {
          "operator": "The address receiving the approval",
          "tokenId": "The id of the token"
        }
      },
      "approveFor(address,address,uint256)": {
        "params": {
          "operator": "The address receiving the approval",
          "sender": "The address giving the approval",
          "tokenId": "The id of the token"
        }
      },
      "balanceOf(address)": {
        "params": {
          "owner": "The address to look for."
        },
        "returns": {
          "_0": "The number of tokens owned by the address."
        }
      },
      "batchTransferFrom(address,address,uint256[],bytes)": {
        "params": {
          "data": "Additional data.",
          "from": "The sender of the token.",
          "ids": "The ids of the tokens.",
          "to": "The recipient of the token."
        }
      },
      "batchTransferQuad(address,address,uint256[],uint256[],uint256[],bytes)": {
        "params": {
          "data": "additional data",
          "from": "current owner of the quad",
          "sizes": "list of sizes for each quad",
          "to": "destination",
          "xs": "list of bottom left x coordinates for each quad",
          "ys": "list of bottom left y coordinates for each quad"
        }
      },
      "changeAdmin(address)": {
        "details": "Change the administrator to be `newAdmin`.",
        "params": {
          "newAdmin": "The address of the new administrator."
        }
      },
      "exists(uint256,uint256,uint256)": {
        "params": {
          "size": "The size of the quad",
          "x": "The bottom left x coordinate of the quad",
          "y": "The bottom left y coordinate of the quad"
        },
        "returns": {
          "_0": "bool for if Land has been minted or not"
        }
      },
      "getAdmin()": {
        "details": "Get the current administrator of this contract.",
        "returns": {
          "_0": "The current administrator of this contract."
        }
      },
      "getApproved(uint256)": {
        "params": {
          "tokenId": "The id of the token."
        },
        "returns": {
          "_0": "The address of the operator."
        }
      },
      "getMetadata(uint256)": {
        "params": {
          "tokenId": "the token id"
        },
        "returns": {
          "_0": "premium true if the land is premium",
          "_1": "neighborhoodId the number that identifies the neighborhood",
          "_2": "neighborhoodName the neighborhood name"
        }
      },
      "getMetadataRegistry()": {
        "returns": {
          "_0": "The address of the Metadata Registry"
        }
      },
      "getNeighborhoodId(uint256)": {
        "params": {
          "tokenId": "the token id"
        }
      },
      "getOwnerData(uint256)": {
        "details": "for debugging purposes",
        "params": {
          "tokenId": "The id of the Land"
        },
        "returns": {
          "_0": "the owner data (address + burn flag + operatorEnabled)"
        }
      },
      "getRoyaltyManager()": {
        "returns": {
          "_0": "the address of royalty manager contract."
        }
      },
      "getTrustedForwarder()": {
        "returns": {
          "_0": "trustedForwarder address of the trusted forwarder"
        }
      },
      "getX(uint256)": {
        "params": {
          "tokenId": "the id of land"
        },
        "returns": {
          "_0": "the x coordinates"
        }
      },
      "getY(uint256)": {
        "params": {
          "tokenId": "the id of land"
        },
        "returns": {
          "_0": "the y coordinates"
        }
      },
      "height()": {
        "returns": {
          "_0": "height"
        }
      },
      "initialize(address)": {
        "params": {
          "admin": "Admin of the contract"
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "operator": "The address of the operator.",
          "owner": "The address of the owner."
        },
        "returns": {
          "_0": "isOperator The status of the approval."
        }
      },
      "isMinter(address)": {
        "params": {
          "who": "The address to query."
        },
        "returns": {
          "_0": "whether the address has minter rights."
        }
      },
      "isPremium(uint256)": {
        "params": {
          "tokenId": "the token id"
        }
      },
      "isSuperOperator(address)": {
        "params": {
          "superOperator": "the operator address to check"
        },
        "returns": {
          "_0": "true if an address is a super-operator"
        }
      },
      "isTrustedForwarder(address)": {
        "params": {
          "forwarder": "address to check"
        },
        "returns": {
          "_0": "is trusted"
        }
      },
      "mintAndTransferQuad(address,uint256,uint256,uint256,bytes)": {
        "params": {
          "data": "extra data to pass to the transfer",
          "size": "The size of the new quad",
          "to": "The recipient of the new quad",
          "x": "The bottom left x coordinate of the new quad",
          "y": "The bottom left y coordinate of the new quad"
        }
      },
      "mintQuad(address,uint256,uint256,uint256,bytes)": {
        "params": {
          "data": "extra data to pass to the transfer",
          "size": "The size of the new quad",
          "to": "The recipient of the new quad",
          "x": "The bottom left x coordinate of the new quad",
          "y": "The bottom left y coordinate of the new quad"
        }
      },
      "name()": {
        "returns": {
          "_0": "The name of the token contract"
        }
      },
      "operatorFilterRegistry()": {
        "returns": {
          "_0": "the address of  the operator filter registry"
        }
      },
      "owner()": {
        "returns": {
          "_0": "The address of the owner."
        }
      },
      "ownerOf(uint256)": {
        "params": {
          "tokenId": "The id of the token."
        },
        "returns": {
          "owner": "The address of the token owner."
        }
      },
      "register(address,bool)": {
        "params": {
          "subscribe": "bool to signify subscription 'true' or to copy the list 'false'.",
          "subscriptionOrRegistrantToCopy": "registration address of the list to subscribe."
        }
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "tokenId is one of the EIP2981 args for this function can't be removed",
        "params": {
          "salePrice": "the price of token on which the royalty is calculated"
        },
        "returns": {
          "receiver": "the receiver of royalty",
          "royaltyAmount": "the amount of royalty"
        }
      },
      "safeBatchTransferFrom(address,address,uint256[],bytes)": {
        "params": {
          "data": "Additional data.",
          "from": "The sender of the token.",
          "ids": "The ids of the tokens.",
          "to": "The recipient of the token."
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "params": {
          "from": "The sender of the token",
          "to": "The recipient of the token",
          "tokenId": "The id of the token"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "params": {
          "data": "Additional data",
          "from": "The sender of the token",
          "to": "The recipient of the token",
          "tokenId": "The id of the token"
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "approved": "The determination of the approval",
          "operator": "The address receiving the approval"
        }
      },
      "setApprovalForAllFor(address,address,bool)": {
        "params": {
          "approved": "The determination of the approval",
          "operator": "The address receiving the approval",
          "sender": "The address giving the approval"
        }
      },
      "setMetadataRegistry(address)": {
        "params": {
          "metadataRegistry": "The address of the Metadata Registry"
        }
      },
      "setMinter(address,bool)": {
        "params": {
          "enabled": "set whether the minter is enabled or disabled.",
          "minter": "address that will be given/removed minter right."
        }
      },
      "setOperatorRegistry(address)": {
        "params": {
          "registry": "the address of the registry"
        }
      },
      "setRoyaltyManager(address)": {
        "params": {
          "royaltyManager": "address of the manager contract for common royalty recipient"
        }
      },
      "setSuperOperator(address,bool)": {
        "params": {
          "enabled": "set whether the superOperator is enabled or disabled.",
          "superOperator": "address that will be given/removed superOperator right."
        }
      },
      "setTrustedForwarder(address)": {
        "params": {
          "trustedForwarder": "The new trustedForwarder"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "The id of the interface"
        },
        "returns": {
          "_0": "True if the interface is supported"
        }
      },
      "symbol()": {
        "returns": {
          "_0": "The symbol of the token contract"
        }
      },
      "tokenURI(uint256)": {
        "params": {
          "tokenId": "The id of the token"
        },
        "returns": {
          "_0": "The URI of the token"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "from": "The sender of the token",
          "to": "The recipient of the token",
          "tokenId": "The id of the token"
        }
      },
      "transferOwnership(address)": {
        "details": "This owner doesn't have any privileged role within this contractIt is set by the admin to comply with EIP173 which is needed by some marketplacesEven when set to address(0) ownership is never permanently renounced the admin can always set any value",
        "params": {
          "newOwner": "address of new owner"
        }
      },
      "transferQuad(address,address,uint256,uint256,uint256,bytes)": {
        "params": {
          "data": "additional data for transfer",
          "from": "current owner of the quad",
          "size": "The size of the quad",
          "to": "destination",
          "x": "The bottom left x coordinate of the quad",
          "y": "The bottom left y coordinate of the quad"
        }
      },
      "width()": {
        "returns": {
          "_0": "width"
        }
      }
    },
    "title": "LAND token on L2",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "AlreadyMinted(uint256)": [
        {
          "notice": "the token is already minted"
        }
      ],
      "InvalidAddress()": [
        {
          "notice": "an address passed as argument is invalid"
        }
      ],
      "InvalidArgument()": [
        {
          "notice": "an argument passed is invalid"
        }
      ],
      "InvalidCoordinates(uint256,uint256,uint256)": [
        {
          "notice": "the coordinates are invalid"
        }
      ],
      "InvalidLength()": [
        {
          "notice": "an array argument has an invalid length"
        }
      ],
      "NotOwner(uint256,uint256)": [
        {
          "notice": "is not the owner of the quad"
        }
      ],
      "OnlyAdmin()": [
        {
          "notice": "only admin can call this function"
        }
      ],
      "OperatorNotAllowed()": [
        {
          "notice": "the caller is not the operator"
        }
      ]
    },
    "events": {
      "AdminChanged(address,address)": {
        "notice": "Emits when the contract administrator is changed."
      },
      "ContractRegistered(address,bool)": {
        "notice": "emitted when the contract is registered into the registry"
      },
      "MetadataRegistrySet(address)": {
        "notice": "emitted when the metadata registry is set"
      },
      "Minter(address,bool)": {
        "notice": "emitted when a minter right is changed."
      },
      "OperatorRegistrySet(address)": {
        "notice": "emitted when a registry is set"
      },
      "OwnershipTransferred(address,address)": {
        "notice": "emitted when the ownership of the contract is changed"
      },
      "RoyaltyManagerSet(address)": {
        "notice": "emitted when the royalty manager is set"
      },
      "TrustedForwarderSet(address)": {
        "notice": "emitted when a new trusted forwarder is set"
      }
    },
    "kind": "user",
    "methods": {
      "approve(address,uint256)": {
        "notice": "Approve an operator to spend tokens on the sender behalf"
      },
      "approveFor(address,address,uint256)": {
        "notice": "Approve an operator to spend tokens on the sender behalf"
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens owned by an address."
      },
      "batchTransferFrom(address,address,uint256[],bytes)": {
        "notice": "Transfer many tokens between 2 addresses."
      },
      "batchTransferQuad(address,address,uint256[],uint256[],uint256[],bytes)": {
        "notice": "transfer multiple quad (aligned to a quad tree with size 3, 6, 12 or 24 only)"
      },
      "changeAdmin(address)": {
        "notice": "Change the admin of the contract"
      },
      "exists(uint256,uint256,uint256)": {
        "notice": "checks if Land has been minted or not"
      },
      "getAdmin()": {
        "notice": "Get the current admin"
      },
      "getApproved(uint256)": {
        "notice": "Get the approved operator for a specific token."
      },
      "getMetadata(uint256)": {
        "notice": "return the metadata for one land"
      },
      "getMetadataRegistry()": {
        "notice": "Get the address of the Metadata Registry"
      },
      "getNeighborhoodId(uint256)": {
        "notice": "return the id that identifies the neighborhood"
      },
      "getOwnerData(uint256)": {
        "notice": "Return the internal owner data of a Land"
      },
      "getRoyaltyManager()": {
        "notice": "returns the royalty manager"
      },
      "getTrustedForwarder()": {
        "notice": "Get the current trusted forwarder"
      },
      "getX(uint256)": {
        "notice": "x coordinate of Land token"
      },
      "getY(uint256)": {
        "notice": "y coordinate of Land token"
      },
      "height()": {
        "notice": "total height of the map"
      },
      "initialize(address)": {
        "notice": "Initializes the contract admin"
      },
      "isApprovedForAll(address,address)": {
        "notice": "Check if the sender approved the operator."
      },
      "isMinter(address)": {
        "notice": "check whether address `who` is given minter rights."
      },
      "isPremium(uint256)": {
        "notice": "return true if a land is premium"
      },
      "isSuperOperator(address)": {
        "notice": "check if an address is a super-operator"
      },
      "isTrustedForwarder(address)": {
        "notice": "Checks if an address is a trusted forwarder"
      },
      "mintAndTransferQuad(address,uint256,uint256,uint256,bytes)": {
        "notice": "Checks if a parent quad has child quads already minted.Then mints the rest child quads and transfers the parent quad.Should only be called by the tunnel."
      },
      "mintQuad(address,uint256,uint256,uint256,bytes)": {
        "notice": "Mint a new quad (aligned to a quad tree with size 1, 3, 6, 12 or 24 only)"
      },
      "name()": {
        "notice": "Return the name of the token contract"
      },
      "operatorFilterRegistry()": {
        "notice": "return the address of the operator filter registry"
      },
      "owner()": {
        "notice": "Get the address of the owner"
      },
      "ownerOf(uint256)": {
        "notice": "Get the owner of a token."
      },
      "register(address,bool)": {
        "notice": "This function is used to register Land contract on the Operator Filterer Registry of Opensea."
      },
      "royaltyInfo(uint256,uint256)": {
        "notice": "Returns how much royalty is owed and to whom based on ERC2981"
      },
      "safeBatchTransferFrom(address,address,uint256[],bytes)": {
        "notice": "Transfer many tokens between 2 addresses, while ensuring the receiving contract has a receiver method."
      },
      "safeTransferFrom(address,address,uint256)": {
        "notice": "Transfer a token between 2 addresses letting the receiver know of the transfer"
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "Transfer a token between 2 addresses letting the receiver know of the transfer"
      },
      "setApprovalForAll(address,bool)": {
        "notice": "Set the approval for an operator to manage all the tokens of the msgSender"
      },
      "setApprovalForAllFor(address,address,bool)": {
        "notice": "Set the approval for an operator to manage all the tokens of the sender (may differ from msgSender)"
      },
      "setMetadataRegistry(address)": {
        "notice": "sets address of the Metadata Registry"
      },
      "setMinter(address,bool)": {
        "notice": "Enable or disable the ability of `minter` to mint tokens"
      },
      "setOperatorRegistry(address)": {
        "notice": "sets filter registry address deployed in test"
      },
      "setRoyaltyManager(address)": {
        "notice": "set royalty manager"
      },
      "setSuperOperator(address,bool)": {
        "notice": "Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights)."
      },
      "setTrustedForwarder(address)": {
        "notice": "Change the address of the trusted forwarder for meta-TX"
      },
      "supportsInterface(bytes4)": {
        "notice": "Check if the contract supports an interface"
      },
      "symbol()": {
        "notice": "Return the symbol of the token contract"
      },
      "tokenURI(uint256)": {
        "notice": "Return the URI of a specific token"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer a token between 2 addresses"
      },
      "transferOwnership(address)": {
        "notice": "Set the address of the new owner of the contract"
      },
      "transferQuad(address,address,uint256,uint256,uint256,bytes)": {
        "notice": "transfer one quad (aligned to a quad tree with size 3, 6, 12 or 24 only)"
      },
      "width()": {
        "notice": "total width of the map"
      }
    },
    "notice": "LAND contract on L2",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11227,
        "contract": "@sandbox-smart-contracts/land/contracts/PolygonLand.sol:PolygonLand",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 11229,
        "contract": "@sandbox-smart-contracts/land/contracts/PolygonLand.sol:PolygonLand",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 11233,
        "contract": "@sandbox-smart-contracts/land/contracts/PolygonLand.sol:PolygonLand",
        "label": "___gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 11236,
        "contract": "@sandbox-smart-contracts/land/contracts/PolygonLand.sol:PolygonLand",
        "label": "_admin",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 11241,
        "contract": "@sandbox-smart-contracts/land/contracts/PolygonLand.sol:PolygonLand",
        "label": "_superOperators",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 11246,
        "contract": "@sandbox-smart-contracts/land/contracts/PolygonLand.sol:PolygonLand",
        "label": "_numNFTPerAddress",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11251,
        "contract": "@sandbox-smart-contracts/land/contracts/PolygonLand.sol:PolygonLand",
        "label": "_owners",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 11258,
        "contract": "@sandbox-smart-contracts/land/contracts/PolygonLand.sol:PolygonLand",
        "label": "_operatorsForAll",
        "offset": 0,
        "slot": "55",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 11263,
        "contract": "@sandbox-smart-contracts/land/contracts/PolygonLand.sol:PolygonLand",
        "label": "_operators",
        "offset": 0,
        "slot": "56",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 11268,
        "contract": "@sandbox-smart-contracts/land/contracts/PolygonLand.sol:PolygonLand",
        "label": "_minters",
        "offset": 0,
        "slot": "57",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 11272,
        "contract": "@sandbox-smart-contracts/land/contracts/PolygonLand.sol:PolygonLand",
        "label": "__gap",
        "offset": 0,
        "slot": "58",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11275,
        "contract": "@sandbox-smart-contracts/land/contracts/PolygonLand.sol:PolygonLand",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "107",
        "type": "t_address"
      },
      {
        "astId": 11279,
        "contract": "@sandbox-smart-contracts/land/contracts/PolygonLand.sol:PolygonLand",
        "label": "_operatorFilterRegistry",
        "offset": 0,
        "slot": "108",
        "type": "t_contract(IOperatorFilterRegistry)10806"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IOperatorFilterRegistry)10806": {
        "encoding": "inplace",
        "label": "contract IOperatorFilterRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}