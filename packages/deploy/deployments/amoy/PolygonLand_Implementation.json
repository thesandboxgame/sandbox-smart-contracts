{
  "address": "0x4a5E4E00958B0B6425B25b279c313E5492aB0020",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "AlreadyMinted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC721IncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC721InsufficientApproval",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidOperator",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC721NonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidArgument",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        }
      ],
      "name": "InvalidCoordinates",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        }
      ],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAdmin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OperatorNotAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "subscriptionOrRegistrant",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "subscribe",
          "type": "bool"
        }
      ],
      "name": "ContractRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "metadataRegistry",
          "type": "address"
        }
      ],
      "name": "MetadataRegistrySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "Minter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IOperatorFilterRegistry",
          "name": "registry",
          "type": "address"
        }
      ],
      "name": "OperatorRegistrySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "royaltyManager",
          "type": "address"
        }
      ],
      "name": "RoyaltyManagerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "superOperator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "SuperOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newForwarder",
          "type": "address"
        }
      ],
      "name": "TrustedForwarderSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "UNKNOWN_NEIGHBORHOOD",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approveFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "batchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "sizes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "xs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ys",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "batchTransferQuad",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "changeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getMetadata",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMetadataRegistry",
      "outputs": [
        {
          "internalType": "contract ILandMetadataRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getNeighborhoodId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getOwnerData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRoyaltyManager",
      "outputs": [
        {
          "internalType": "contract IRoyaltyManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "height",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "isMinter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isPremium",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "superOperator",
          "type": "address"
        }
      ],
      "name": "isSuperOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mintAndTransferQuad",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mintQuad",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operatorFilterRegistry",
      "outputs": [
        {
          "internalType": "contract IOperatorFilterRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "subscriptionOrRegistrantToCopy",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "subscribe",
          "type": "bool"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAllFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "metadataRegistry",
          "type": "address"
        }
      ],
      "name": "setMetadataRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOperatorFilterRegistry",
          "name": "registry",
          "type": "address"
        }
      ],
      "name": "setOperatorRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "royaltyManager",
          "type": "address"
        }
      ],
      "name": "setRoyaltyManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "superOperator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setSuperOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "transferQuad",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "width",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xd0903ae0caa45f9349c13c2047ac6f1c7734385fe0849648be700e2d2b4ba3eb",
  "receipt": {
    "to": null,
    "from": "0x5F890c9522dCE5670d741D4277BFCC2d9cA8Af02",
    "contractAddress": "0x4a5E4E00958B0B6425B25b279c313E5492aB0020",
    "transactionIndex": 2,
    "gasUsed": "4462065",
    "logsBloom": "0x
    "blockHash": "0x1b12f0444329da31492535f83e22ed83594c082673b93f65f6e673c2d063fe01",
    "transactionHash": "0xd0903ae0caa45f9349c13c2047ac6f1c7734385fe0849648be700e2d2b4ba3eb",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 7593583,
        "transactionHash": "0xd0903ae0caa45f9349c13c2047ac6f1c7734385fe0849648be700e2d2b4ba3eb",
        "address": "0x4a5E4E00958B0B6425B25b279c313E5492aB0020",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 8,
        "blockHash": "0x1b12f0444329da31492535f83e22ed83594c082673b93f65f6e673c2d063fe01"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 7593583,
        "transactionHash": "0xd0903ae0caa45f9349c13c2047ac6f1c7734385fe0849648be700e2d2b4ba3eb",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02",
          "0x0000000000000000000000006dc2dd54f24979ec26212794c71afefed722280c"
        ],
        "data": "0x000000000000000000000000000000000000000000000000002800041d233dbf000000000000000000000000000000000000000000000002483a0688e8ba98760000000000000000000000000000000000000000000001a5b07e880b0b4bde1400000000000000000000000000000000000000000000000248120684cb975ab70000000000000000000000000000000000000000000001a5b0a6880f286f1bd3",
        "logIndex": 9,
        "blockHash": "0x1b12f0444329da31492535f83e22ed83594c082673b93f65f6e673c2d063fe01"
      }
    ],
    "blockNumber": 7593583,
    "cumulativeGasUsed": "4708693",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "0427aef8316335f088e15ff39c71a720",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AlreadyMinted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArgument\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"InvalidCoordinates\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperatorNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriptionOrRegistrant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"subscribe\",\"type\":\"bool\"}],\"name\":\"ContractRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"metadataRegistry\",\"type\":\"address\"}],\"name\":\"MetadataRegistrySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"Minter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IOperatorFilterRegistry\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"OperatorRegistrySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"royaltyManager\",\"type\":\"address\"}],\"name\":\"RoyaltyManagerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"superOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SuperOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newForwarder\",\"type\":\"address\"}],\"name\":\"TrustedForwarderSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UNKNOWN_NEIGHBORHOOD\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approveFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"batchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"sizes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"xs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ys\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"batchTransferQuad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getMetadata\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMetadataRegistry\",\"outputs\":[{\"internalType\":\"contract ILandMetadataRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getNeighborhoodId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getOwnerData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRoyaltyManager\",\"outputs\":[{\"internalType\":\"contract IRoyaltyManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"height\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isPremium\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"superOperator\",\"type\":\"address\"}],\"name\":\"isSuperOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintAndTransferQuad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintQuad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorFilterRegistry\",\"outputs\":[{\"internalType\":\"contract IOperatorFilterRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"subscriptionOrRegistrantToCopy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"subscribe\",\"type\":\"bool\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAllFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"metadataRegistry\",\"type\":\"address\"}],\"name\":\"setMetadataRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOperatorFilterRegistry\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"setOperatorRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"royaltyManager\",\"type\":\"address\"}],\"name\":\"setRoyaltyManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"superOperator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setSuperOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferQuad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"width\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"The Sandbox\",\"custom:security-contact\":\"contact-blockchain@sandbox.game\",\"details\":\"We use the storage mixing for historical reasons.There is a difference between L1 and L2 storage slots order and we want to upgrade the contract.This contract uses the exact storage slots configuration that we have in `core` package so we can upgradePolygonLandStorageMixin must be the first one in the inheritance chain for subclasses\",\"errors\":{\"AlreadyMinted(uint256)\":[{\"params\":{\"tokenId\":\"the id of land\"}}],\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}],\"InvalidCoordinates(uint256,uint256,uint256)\":[{\"params\":{\"size\":\"The size of the quad\",\"x\":\"The bottom left x coordinate of the quad\",\"y\":\"The bottom left y coordinate of the quad\"}}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"NotOwner(uint256,uint256)\":[{\"params\":{\"x\":\"The bottom left x coordinate of the quad\",\"y\":\"The bottom left y coordinate of the quad\"}}]},\"events\":{\"AdminChanged(address,address)\":{\"params\":{\"newAdmin\":\"The address of the new administrator.\",\"oldAdmin\":\"The address of the previous administrator.\"}},\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"ContractRegistered(address,bool)\":{\"params\":{\"subscribe\":\"should it subscribe\",\"subscriptionOrRegistrant\":\"address to subscribe or copy entries from\"}},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"MetadataRegistrySet(address)\":{\"params\":{\"metadataRegistry\":\"the address of the metadata registry\"}},\"OperatorRegistrySet(address)\":{\"params\":{\"registry\":\"address of the registry to set\"}},\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"The new address of the owner.\",\"previousOwner\":\"The old address of the owner.\"}},\"RoyaltyManagerSet(address)\":{\"params\":{\"royaltyManager\":\"the address of royalty manager contract.\"}},\"SuperOperator(address,bool)\":{\"params\":{\"enabled\":\"set whether the superOperator is enabled or disabled.\",\"superOperator\":\"address that will be given/removed superOperator right.\"}},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"},\"TrustedForwarderSet(address)\":{\"params\":{\"newForwarder\":\"the new trusted forwarder\"}}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"params\":{\"operator\":\"The address receiving the approval\",\"tokenId\":\"The id of the token\"}},\"approveFor(address,address,uint256)\":{\"params\":{\"operator\":\"The address receiving the approval\",\"sender\":\"The address giving the approval\",\"tokenId\":\"The id of the token\"}},\"balanceOf(address)\":{\"params\":{\"owner\":\"The address to look for.\"},\"returns\":{\"_0\":\"The number of tokens owned by the address.\"}},\"batchTransferFrom(address,address,uint256[],bytes)\":{\"params\":{\"data\":\"Additional data.\",\"from\":\"The sender of the token.\",\"ids\":\"The ids of the tokens.\",\"to\":\"The recipient of the token.\"}},\"batchTransferQuad(address,address,uint256[],uint256[],uint256[],bytes)\":{\"params\":{\"data\":\"additional data\",\"from\":\"current owner of the quad\",\"sizes\":\"list of sizes for each quad\",\"to\":\"destination\",\"xs\":\"list of bottom left x coordinates for each quad\",\"ys\":\"list of bottom left y coordinates for each quad\"}},\"changeAdmin(address)\":{\"details\":\"Change the administrator to be `newAdmin`.\",\"params\":{\"newAdmin\":\"The address of the new administrator.\"}},\"exists(uint256,uint256,uint256)\":{\"params\":{\"size\":\"The size of the quad\",\"x\":\"The bottom left x coordinate of the quad\",\"y\":\"The bottom left y coordinate of the quad\"},\"returns\":{\"_0\":\"bool for if Land has been minted or not\"}},\"getAdmin()\":{\"details\":\"Get the current administrator of this contract.\",\"returns\":{\"_0\":\"The current administrator of this contract.\"}},\"getApproved(uint256)\":{\"params\":{\"tokenId\":\"The id of the token.\"},\"returns\":{\"_0\":\"The address of the operator.\"}},\"getMetadata(uint256)\":{\"params\":{\"tokenId\":\"the token id\"},\"returns\":{\"_0\":\"premium true if the land is premium\",\"_1\":\"neighborhoodId the number that identifies the neighborhood\",\"_2\":\"neighborhoodName the neighborhood name\"}},\"getMetadataRegistry()\":{\"returns\":{\"_0\":\"The address of the Metadata Registry\"}},\"getNeighborhoodId(uint256)\":{\"params\":{\"tokenId\":\"the token id\"}},\"getOwnerData(uint256)\":{\"details\":\"for debugging purposes\",\"params\":{\"tokenId\":\"The id of the Land\"},\"returns\":{\"_0\":\"the owner data (address + burn flag + operatorEnabled)\"}},\"getRoyaltyManager()\":{\"returns\":{\"_0\":\"the address of royalty manager contract.\"}},\"getTrustedForwarder()\":{\"returns\":{\"_0\":\"trustedForwarder address of the trusted forwarder\"}},\"getX(uint256)\":{\"params\":{\"tokenId\":\"the id of land\"},\"returns\":{\"_0\":\"the x coordinates\"}},\"getY(uint256)\":{\"params\":{\"tokenId\":\"the id of land\"},\"returns\":{\"_0\":\"the y coordinates\"}},\"height()\":{\"returns\":{\"_0\":\"height\"}},\"initialize(address)\":{\"params\":{\"admin\":\"Admin of the contract\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"operator\":\"The address of the operator.\",\"owner\":\"The address of the owner.\"},\"returns\":{\"_0\":\"isOperator The status of the approval.\"}},\"isMinter(address)\":{\"params\":{\"who\":\"The address to query.\"},\"returns\":{\"_0\":\"whether the address has minter rights.\"}},\"isPremium(uint256)\":{\"params\":{\"tokenId\":\"the token id\"}},\"isSuperOperator(address)\":{\"params\":{\"superOperator\":\"the operator address to check\"},\"returns\":{\"_0\":\"true if an address is a super-operator\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"address to check\"},\"returns\":{\"_0\":\"is trusted\"}},\"mintAndTransferQuad(address,uint256,uint256,uint256,bytes)\":{\"params\":{\"data\":\"extra data to pass to the transfer\",\"size\":\"The size of the new quad\",\"to\":\"The recipient of the new quad\",\"x\":\"The bottom left x coordinate of the new quad\",\"y\":\"The bottom left y coordinate of the new quad\"}},\"mintQuad(address,uint256,uint256,uint256,bytes)\":{\"params\":{\"data\":\"extra data to pass to the transfer\",\"size\":\"The size of the new quad\",\"to\":\"The recipient of the new quad\",\"x\":\"The bottom left x coordinate of the new quad\",\"y\":\"The bottom left y coordinate of the new quad\"}},\"name()\":{\"returns\":{\"_0\":\"The name of the token contract\"}},\"operatorFilterRegistry()\":{\"returns\":{\"_0\":\"the address of  the operator filter registry\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the owner.\"}},\"ownerOf(uint256)\":{\"params\":{\"tokenId\":\"The id of the token.\"},\"returns\":{\"owner\":\"The address of the token owner.\"}},\"register(address,bool)\":{\"params\":{\"subscribe\":\"bool to signify subscription 'true' or to copy the list 'false'.\",\"subscriptionOrRegistrantToCopy\":\"registration address of the list to subscribe.\"}},\"royaltyInfo(uint256,uint256)\":{\"details\":\"tokenId is one of the EIP2981 args for this function can't be removed\",\"params\":{\"salePrice\":\"the price of token on which the royalty is calculated\"},\"returns\":{\"receiver\":\"the receiver of royalty\",\"royaltyAmount\":\"the amount of royalty\"}},\"safeBatchTransferFrom(address,address,uint256[],bytes)\":{\"params\":{\"data\":\"Additional data.\",\"from\":\"The sender of the token.\",\"ids\":\"The ids of the tokens.\",\"to\":\"The recipient of the token.\"}},\"safeTransferFrom(address,address,uint256)\":{\"params\":{\"from\":\"The sender of the token\",\"to\":\"The recipient of the token\",\"tokenId\":\"The id of the token\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"params\":{\"data\":\"Additional data\",\"from\":\"The sender of the token\",\"to\":\"The recipient of the token\",\"tokenId\":\"The id of the token\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"approved\":\"The determination of the approval\",\"operator\":\"The address receiving the approval\"}},\"setApprovalForAllFor(address,address,bool)\":{\"params\":{\"approved\":\"The determination of the approval\",\"operator\":\"The address receiving the approval\",\"sender\":\"The address giving the approval\"}},\"setMetadataRegistry(address)\":{\"params\":{\"metadataRegistry\":\"The address of the Metadata Registry\"}},\"setMinter(address,bool)\":{\"params\":{\"enabled\":\"set whether the minter is enabled or disabled.\",\"minter\":\"address that will be given/removed minter right.\"}},\"setOperatorRegistry(address)\":{\"params\":{\"registry\":\"the address of the registry\"}},\"setRoyaltyManager(address)\":{\"params\":{\"royaltyManager\":\"address of the manager contract for common royalty recipient\"}},\"setSuperOperator(address,bool)\":{\"params\":{\"enabled\":\"set whether the superOperator is enabled or disabled.\",\"superOperator\":\"address that will be given/removed superOperator right.\"}},\"setTrustedForwarder(address)\":{\"params\":{\"trustedForwarder\":\"The new trustedForwarder\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"The id of the interface\"},\"returns\":{\"_0\":\"True if the interface is supported\"}},\"symbol()\":{\"returns\":{\"_0\":\"The symbol of the token contract\"}},\"tokenURI(uint256)\":{\"params\":{\"tokenId\":\"The id of the token\"},\"returns\":{\"_0\":\"The URI of the token\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"from\":\"The sender of the token\",\"to\":\"The recipient of the token\",\"tokenId\":\"The id of the token\"}},\"transferOwnership(address)\":{\"params\":{\"newOwner\":\"address of new owner\"}},\"transferQuad(address,address,uint256,uint256,uint256,bytes)\":{\"params\":{\"data\":\"additional data for transfer\",\"from\":\"current owner of the quad\",\"size\":\"The size of the quad\",\"to\":\"destination\",\"x\":\"The bottom left x coordinate of the quad\",\"y\":\"The bottom left y coordinate of the quad\"}},\"width()\":{\"returns\":{\"_0\":\"width\"}}},\"title\":\"LAND token on L2\",\"version\":1},\"userdoc\":{\"errors\":{\"AlreadyMinted(uint256)\":[{\"notice\":\"the token is already minted\"}],\"InvalidAddress()\":[{\"notice\":\"an address passed as argument is invalid\"}],\"InvalidArgument()\":[{\"notice\":\"an argument passed is invalid\"}],\"InvalidCoordinates(uint256,uint256,uint256)\":[{\"notice\":\"the coordinates are invalid\"}],\"InvalidLength()\":[{\"notice\":\"an array argument has an invalid length\"}],\"NotOwner(uint256,uint256)\":[{\"notice\":\"is not the owner of the quad\"}],\"OnlyAdmin()\":[{\"notice\":\"only admin can call this function\"}],\"OperatorNotAllowed()\":[{\"notice\":\"the caller is not the operator\"}]},\"events\":{\"AdminChanged(address,address)\":{\"notice\":\"Emits when the contract administrator is changed.\"},\"ContractRegistered(address,bool)\":{\"notice\":\"emitted when the contract is registered into the registry\"},\"MetadataRegistrySet(address)\":{\"notice\":\"emitted when the metadata registry is set\"},\"OperatorRegistrySet(address)\":{\"notice\":\"emitted when a registry is set\"},\"OwnershipTransferred(address,address)\":{\"notice\":\"emitted when the ownership of the contract is changed\"},\"RoyaltyManagerSet(address)\":{\"notice\":\"emitted when the royalty manager is set\"},\"TrustedForwarderSet(address)\":{\"notice\":\"emitted when a new trusted forwarder is set\"}},\"kind\":\"user\",\"methods\":{\"UNKNOWN_NEIGHBORHOOD()\":{\"notice\":\"value returned when the neighborhood is not set yet.\"},\"approve(address,uint256)\":{\"notice\":\"Approve an operator to spend tokens on the sender behalf\"},\"approveFor(address,address,uint256)\":{\"notice\":\"Approve an operator to spend tokens on the sender behalf\"},\"balanceOf(address)\":{\"notice\":\"Get the number of tokens owned by an address.\"},\"batchTransferFrom(address,address,uint256[],bytes)\":{\"notice\":\"Transfer many tokens between 2 addresses.\"},\"batchTransferQuad(address,address,uint256[],uint256[],uint256[],bytes)\":{\"notice\":\"transfer multiple quad (aligned to a quad tree with size 3, 6, 12 or 24 only)\"},\"changeAdmin(address)\":{\"notice\":\"Change the admin of the contract\"},\"exists(uint256,uint256,uint256)\":{\"notice\":\"checks if Land has been minted or not\"},\"getAdmin()\":{\"notice\":\"Get the current admin\"},\"getApproved(uint256)\":{\"notice\":\"Get the approved operator for a specific token.\"},\"getMetadata(uint256)\":{\"notice\":\"return the metadata for one land\"},\"getMetadataRegistry()\":{\"notice\":\"Get the address of the Metadata Registry\"},\"getNeighborhoodId(uint256)\":{\"notice\":\"return the id that identifies the neighborhood\"},\"getOwnerData(uint256)\":{\"notice\":\"Return the internal owner data of a Land\"},\"getRoyaltyManager()\":{\"notice\":\"returns the royalty manager\"},\"getTrustedForwarder()\":{\"notice\":\"Get the current trusted forwarder\"},\"getX(uint256)\":{\"notice\":\"x coordinate of Land token\"},\"getY(uint256)\":{\"notice\":\"y coordinate of Land token\"},\"height()\":{\"notice\":\"total height of the map\"},\"initialize(address)\":{\"notice\":\"Initializes the contract with the meta-transaction contract, admin & royalty-manager\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Check if the sender approved the operator.\"},\"isMinter(address)\":{\"notice\":\"check whether address `who` is given minter rights.\"},\"isPremium(uint256)\":{\"notice\":\"return true if a land is premium\"},\"isSuperOperator(address)\":{\"notice\":\"check if an address is a super-operator\"},\"isTrustedForwarder(address)\":{\"notice\":\"Checks if an address is a trusted forwarder\"},\"mintAndTransferQuad(address,uint256,uint256,uint256,bytes)\":{\"notice\":\"Checks if a parent quad has child quads already minted.Then mints the rest child quads and transfers the parent quad.Should only be called by the tunnel.\"},\"mintQuad(address,uint256,uint256,uint256,bytes)\":{\"notice\":\"Mint a new quad (aligned to a quad tree with size 1, 3, 6, 12 or 24 only)\"},\"name()\":{\"notice\":\"Return the name of the token contract\"},\"operatorFilterRegistry()\":{\"notice\":\"return the address of the operator filter registry\"},\"owner()\":{\"notice\":\"Get the address of the owner\"},\"ownerOf(uint256)\":{\"notice\":\"Get the owner of a token.\"},\"register(address,bool)\":{\"notice\":\"This function is used to register Land contract on the Operator Filterer Registry of Opensea.\"},\"royaltyInfo(uint256,uint256)\":{\"notice\":\"Returns how much royalty is owed and to whom based on ERC2981\"},\"safeBatchTransferFrom(address,address,uint256[],bytes)\":{\"notice\":\"Transfer many tokens between 2 addresses, while ensuring the receiving contract has a receiver method.\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"Transfer a token between 2 addresses letting the receiver knows of the transfer\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Transfer a token between 2 addresses letting the receiver knows of the transfer\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Set the approval for an operator to manage all the tokens of the sender\"},\"setApprovalForAllFor(address,address,bool)\":{\"notice\":\"Set the approval for an operator to manage all the tokens of the sender\"},\"setMetadataRegistry(address)\":{\"notice\":\"sets address of the Metadata Registry\"},\"setMinter(address,bool)\":{\"notice\":\"Enable or disable the ability of `minter` to mint tokens\"},\"setOperatorRegistry(address)\":{\"notice\":\"sets filter registry address deployed in test\"},\"setRoyaltyManager(address)\":{\"notice\":\"set royalty manager\"},\"setSuperOperator(address,bool)\":{\"notice\":\"Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights).\"},\"setTrustedForwarder(address)\":{\"notice\":\"Change the address of the trusted forwarder for meta-TX\"},\"supportsInterface(bytes4)\":{\"notice\":\"Check if the contract supports an interface\"},\"symbol()\":{\"notice\":\"Return the symbol of the token contract\"},\"tokenURI(uint256)\":{\"notice\":\"Return the URI of a specific token\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer a token between 2 addresses\"},\"transferOwnership(address)\":{\"notice\":\"Set the address of the new owner of the contract\"},\"transferQuad(address,address,uint256,uint256,uint256,bytes)\":{\"notice\":\"transfer one quad (aligned to a quad tree with size 3, 6, 12 or 24 only)\"},\"width()\":{\"notice\":\"total width of the map\"}},\"notice\":\"LAND contract on L2\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@sandbox-smart-contracts/land/contracts/PolygonLand.sol\":\"PolygonLand\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@manifoldxyz/royalty-registry-solidity/contracts/overrides/IRoyaltySplitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\nstruct Recipient {\\n    address payable recipient;\\n    uint16 bps;\\n}\\n\\ninterface IRoyaltySplitter is IERC165 {\\n    /**\\n     * @dev Set the splitter recipients. Total bps must total 10000.\\n     */\\n    function setRecipients(Recipient[] calldata recipients) external;\\n\\n    /**\\n     * @dev Get the splitter recipients;\\n     */\\n    function getRecipients() external view returns (Recipient[] memory);\\n}\\n\",\"keccak256\":\"0xc507963f66c4238d25e69d2d05ac5995c549aa89789e89e7a556403221547c6d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x89b84f7b1b2d6c294cd6b9a9f661c1cfb1b9b10ca7bac5b3445850a8ce96dcf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function getSupportedInterfaces(\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeCall(IERC165.supportsInterface, (interfaceId));\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xac3d50e321a48a40b4496970ce725900f13aeb2255b7c1203f5adbe98c4a911a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/dependency-royalty-management/contracts/interfaces/IRoyaltyManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Recipient} from \\\"@manifoldxyz/royalty-registry-solidity/contracts/overrides/IRoyaltySplitter.sol\\\";\\n\\n/// @title IRoyaltyManager\\n/// @notice interface for RoyaltyManager Contract\\ninterface IRoyaltyManager {\\n    event RecipientSet(address indexed commonRecipient);\\n\\n    event SplitSet(uint16 commonSplit);\\n\\n    event RoyaltySet(uint16 royaltyBps, address indexed contractAddress);\\n\\n    event TrustedForwarderSet(address indexed previousForwarder, address indexed newForwarder);\\n\\n    event SplitterDeployed(address indexed creator, address indexed recipient, address splitterAddress);\\n\\n    ///@notice sets the common recipient\\n    ///@param _commonRecipient is the common recipient for all the splitters\\n    function setRecipient(address payable _commonRecipient) external;\\n\\n    ///@notice sets the common split\\n    ///@param commonSplit split for the common recipient\\n    function setSplit(uint16 commonSplit) external;\\n\\n    ///@notice to be called by the splitters to get the common recipient and split\\n    ///@return recipient which has the common recipient and split\\n    function getCommonRecipient() external view returns (Recipient memory recipient);\\n\\n    ///@notice returns the amount of basis points allocated to the creator\\n    ///@return creatorSplit the share of creator in bps\\n    function getCreatorSplit() external view returns (uint16 creatorSplit);\\n\\n    ///@notice returns the commonRecipient and EIP2981 royalty split\\n    ///@return recipient address of common royalty recipient\\n    ///@return royaltySplit contract EIP2981 royalty bps\\n    function getRoyaltyInfo() external view returns (address payable recipient, uint16 royaltySplit);\\n\\n    ///@notice deploys splitter for creator\\n    ///@param creator the address of the creator\\n    ///@param recipient the wallet of the recipient where they would receive their royalty\\n    ///@return creatorSplitterAddress splitter's address deployed for creator\\n    function deploySplitter(address creator, address payable recipient)\\n        external\\n        returns (address payable creatorSplitterAddress);\\n\\n    ///@notice returns the address of splitter of a creator.\\n    ///@param creator the address of the creator\\n    ///@return creatorSplitterAddress splitter's address deployed for a creator\\n    function getCreatorRoyaltySplitter(address creator) external view returns (address payable creatorSplitterAddress);\\n\\n    ///@notice returns the EIP2981 royalty split\\n    ///@param _contractAddress the address of the contract for which the royalty is required\\n    ///@return royaltyBps royalty bps of the contract\\n    function getContractRoyalty(address _contractAddress) external view returns (uint16 royaltyBps);\\n\\n    ///@notice sets the trustedForwarder address to be used by the splitters\\n    ///@param _newForwarder is the new trusted forwarder address\\n    function setTrustedForwarder(address _newForwarder) external;\\n\\n    ///@notice get the current trustedForwarder address\\n    ///@return trustedForwarder address of current trusted Forwarder\\n    function getTrustedForwarder() external view returns (address trustedForwarder);\\n}\\n\",\"keccak256\":\"0x5e8e149845df288a5d0ddfa00407ebda15d024e8caf1057822670a5232fee93f\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/land/contracts/PolygonLand.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.23;\\n\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {IOperatorFilterRegistry} from \\\"./interfaces/IOperatorFilterRegistry.sol\\\";\\nimport {WithAdmin} from \\\"./common/WithAdmin.sol\\\";\\nimport {WithSuperOperators} from \\\"./common/WithSuperOperators.sol\\\";\\nimport {OperatorFiltererUpgradeable} from \\\"./common/OperatorFiltererUpgradeable.sol\\\";\\nimport {ERC721BaseToken} from \\\"./common/ERC721BaseToken.sol\\\";\\nimport {LandBaseToken} from \\\"./common/LandBaseToken.sol\\\";\\nimport {ERC2771Handler} from \\\"./polygon/ERC2771Handler.sol\\\";\\nimport {PolygonLandStorageMixin} from \\\"./polygon/PolygonLandStorageMixin.sol\\\";\\nimport {LandBase} from \\\"./common/LandBase.sol\\\";\\n\\n/// @title LAND token on L2\\n/// @author The Sandbox\\n/// @custom:security-contact contact-blockchain@sandbox.game\\n/// @notice LAND contract on L2\\n/// @dev We use the storage mixing for historical reasons.\\n/// @dev There is a difference between L1 and L2 storage slots order and we want to upgrade the contract.\\n/// @dev This contract uses the exact storage slots configuration that we have in `core` package so we can upgrade\\n/// @dev PolygonLandStorageMixin must be the first one in the inheritance chain for subclasses\\ncontract PolygonLand is PolygonLandStorageMixin, LandBase, ERC2771Handler {\\n    /// @notice Change the address of the trusted forwarder for meta-TX\\n    /// @param trustedForwarder The new trustedForwarder\\n    function setTrustedForwarder(address trustedForwarder) external onlyAdmin {\\n        _setTrustedForwarder(trustedForwarder);\\n    }\\n\\n    /// @notice Implements the Context msg sender\\n    /// @return the address of the message sender\\n    function _msgSender() internal view override(Context, ERC2771Handler) returns (address) {\\n        return ERC2771Handler._msgSender();\\n    }\\n\\n    /// @notice get the admin address\\n    /// @return the admin address\\n    function _readAdmin() internal view override(PolygonLandStorageMixin, WithAdmin) returns (address) {\\n        return PolygonLandStorageMixin._readAdmin();\\n    }\\n\\n    /// @notice set the admin address\\n    /// @param admin the admin address\\n    function _writeAdmin(address admin) internal override(PolygonLandStorageMixin, WithAdmin) {\\n        PolygonLandStorageMixin._writeAdmin(admin);\\n    }\\n\\n    /// @notice check if an address is a super-operator\\n    /// @param superOperator the operator address to check\\n    /// @return true if an address is a super-operator\\n    function _isSuperOperator(\\n        address superOperator\\n    ) internal view override(PolygonLandStorageMixin, WithSuperOperators) returns (bool) {\\n        return PolygonLandStorageMixin._isSuperOperator(superOperator);\\n    }\\n\\n    /// @notice enable an address to be super-operator\\n    /// @param superOperator the address to set\\n    /// @param enabled true enable the address, false disable it.\\n    function _writeSuperOperator(\\n        address superOperator,\\n        bool enabled\\n    ) internal override(PolygonLandStorageMixin, WithSuperOperators) {\\n        PolygonLandStorageMixin._writeSuperOperator(superOperator, enabled);\\n    }\\n\\n    /// @notice get the number of nft for an address\\n    /// @param owner address to check\\n    /// @return the number of nfts\\n    function _readNumNFTPerAddress(\\n        address owner\\n    ) internal view override(PolygonLandStorageMixin, ERC721BaseToken) returns (uint256) {\\n        return PolygonLandStorageMixin._readNumNFTPerAddress(owner);\\n    }\\n\\n    /// @notice set the number of nft for an address\\n    /// @param owner address to set\\n    /// @param quantity the number of nfts to set for the owner\\n    function _writeNumNFTPerAddress(\\n        address owner,\\n        uint256 quantity\\n    ) internal override(PolygonLandStorageMixin, ERC721BaseToken) {\\n        PolygonLandStorageMixin._writeNumNFTPerAddress(owner, quantity);\\n    }\\n\\n    /// @notice get the owner data, this includes: owner address, burn flag and operator flag (see: _owners declaration)\\n    /// @param tokenId the token Id\\n    /// @return the owner data\\n    function _readOwnerData(\\n        uint256 tokenId\\n    ) internal view override(PolygonLandStorageMixin, ERC721BaseToken) returns (uint256) {\\n        return PolygonLandStorageMixin._readOwnerData(tokenId);\\n    }\\n\\n    /// @notice set the owner data, this includes: owner address, burn flag and operator flag (see: _owners declaration)\\n    /// @param tokenId the token Id\\n    /// @param data the owner data\\n    function _writeOwnerData(\\n        uint256 tokenId,\\n        uint256 data\\n    ) internal override(PolygonLandStorageMixin, ERC721BaseToken) {\\n        PolygonLandStorageMixin._writeOwnerData(tokenId, data);\\n    }\\n\\n    /// @notice check if an operator was enabled by a given owner\\n    /// @param owner that enabled the operator\\n    /// @param operator address to check if it was enabled\\n    /// @return true if the operator has access\\n    function _isOperatorForAll(\\n        address owner,\\n        address operator\\n    ) internal view override(PolygonLandStorageMixin, ERC721BaseToken) returns (bool) {\\n        return PolygonLandStorageMixin._isOperatorForAll(owner, operator);\\n    }\\n\\n    /// @notice set an operator for a given owner\\n    /// @param owner that enabled the operator\\n    /// @param operator address to check if it was enabled\\n    /// @param enabled true enable the address, false disable it.\\n    function _writeOperatorForAll(\\n        address owner,\\n        address operator,\\n        bool enabled\\n    ) internal override(PolygonLandStorageMixin, ERC721BaseToken) {\\n        PolygonLandStorageMixin._writeOperatorForAll(owner, operator, enabled);\\n    }\\n\\n    /// @notice get the operator for a specific token, the operator can transfer on the owner behalf\\n    /// @param tokenId The id of the token.\\n    /// @return the operator address\\n    function _readOperator(\\n        uint256 tokenId\\n    ) internal view override(PolygonLandStorageMixin, ERC721BaseToken) returns (address) {\\n        return PolygonLandStorageMixin._readOperator(tokenId);\\n    }\\n\\n    /// @notice set the operator for a specific token, the operator can transfer on the owner behalf\\n    /// @param tokenId the id of the token.\\n    /// @param operator the operator address\\n    function _writeOperator(\\n        uint256 tokenId,\\n        address operator\\n    ) internal override(PolygonLandStorageMixin, ERC721BaseToken) {\\n        PolygonLandStorageMixin._writeOperator(tokenId, operator);\\n    }\\n\\n    /// @notice checks if an address is enabled as minter\\n    /// @param minter the address to check\\n    /// @return true if the address is a minter\\n    function _isMinter(address minter) internal view override(PolygonLandStorageMixin, LandBaseToken) returns (bool) {\\n        return PolygonLandStorageMixin._isMinter(minter);\\n    }\\n\\n    /// @notice set an address as minter\\n    /// @param minter the address to set\\n    /// @param enabled true enable the address, false disable it.\\n    function _writeMinter(address minter, bool enabled) internal override(PolygonLandStorageMixin, LandBaseToken) {\\n        PolygonLandStorageMixin._writeMinter(minter, enabled);\\n    }\\n\\n    /// @notice get the address of the ERC2771 trusted forwarder\\n    /// @return the address of the trusted forwarder\\n    function _readTrustedForwarder() internal view override(PolygonLandStorageMixin, ERC2771Handler) returns (address) {\\n        return PolygonLandStorageMixin._readTrustedForwarder();\\n    }\\n\\n    /// @notice set the address of the ERC2771 trusted forwarder\\n    /// @param trustedForwarder the address of the trusted forwarder\\n    function _writeTrustedForwarder(\\n        address trustedForwarder\\n    ) internal virtual override(PolygonLandStorageMixin, ERC2771Handler) {\\n        PolygonLandStorageMixin._writeTrustedForwarder(trustedForwarder);\\n    }\\n\\n    /// @notice get the OpenSea operator filter\\n    /// @return the address of the OpenSea operator filter registry\\n    function _readOperatorFilterRegistry()\\n        internal\\n        view\\n        override(PolygonLandStorageMixin, OperatorFiltererUpgradeable)\\n        returns (IOperatorFilterRegistry)\\n    {\\n        return PolygonLandStorageMixin._readOperatorFilterRegistry();\\n    }\\n\\n    /// @notice set the OpenSea operator filter\\n    /// @param registry the address of the OpenSea operator filter registry\\n    function _writeOperatorFilterRegistry(\\n        IOperatorFilterRegistry registry\\n    ) internal override(PolygonLandStorageMixin, OperatorFiltererUpgradeable) {\\n        PolygonLandStorageMixin._writeOperatorFilterRegistry(registry);\\n    }\\n}\\n\",\"keccak256\":\"0x9f4df3a08994d99c00efeb0ff4cc34738b14ebeccf95c6277c527d867f628a3b\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/land/contracts/common/ERC721BaseToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport {ERC165Checker} from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {IERC721Errors} from \\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\";\\nimport {IERC721MandatoryTokenReceiver} from \\\"../interfaces/IERC721MandatoryTokenReceiver.sol\\\";\\nimport {IErrors} from \\\"../interfaces/IErrors.sol\\\";\\nimport {IERC721BatchOps} from \\\"../interfaces/IERC721BatchOps.sol\\\";\\nimport {WithSuperOperators} from \\\"./WithSuperOperators.sol\\\";\\n\\n/// @title ERC721BaseTokenCommon\\n/// @author The Sandbox\\n/// @custom:security-contact contact-blockchain@sandbox.game\\n/// @notice Basic functionalities of a NFT\\n/// @dev ERC721 implementation that supports meta-transactions and super operators\\nabstract contract ERC721BaseToken is IERC721, IERC721BatchOps, IERC721Errors, IErrors, Context, WithSuperOperators {\\n    using Address for address;\\n\\n    uint256 internal constant NOT_ADDRESS = 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000;\\n    uint256 internal constant OPERATOR_FLAG = (2 ** 255);\\n    uint256 internal constant NOT_OPERATOR_FLAG = OPERATOR_FLAG - 1;\\n    uint256 internal constant BURNED_FLAG = (2 ** 160);\\n\\n    /// @notice Get the number of tokens owned by an address.\\n    /// @param owner The address to look for.\\n    /// @return The number of tokens owned by the address.\\n    function balanceOf(address owner) external view virtual override returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _readNumNFTPerAddress(owner);\\n    }\\n\\n    /// @notice Get the owner of a token.\\n    /// @param tokenId The id of the token.\\n    /// @return owner The address of the token owner.\\n    function ownerOf(uint256 tokenId) external view virtual override returns (address owner) {\\n        owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /// @notice Get the approved operator for a specific token.\\n    /// @param tokenId The id of the token.\\n    /// @return The address of the operator.\\n    function getApproved(uint256 tokenId) external view virtual override returns (address) {\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        if (operatorEnabled) {\\n            return _readOperator(tokenId);\\n        }\\n        return address(0);\\n    }\\n\\n    /// @notice Return the internal owner data of a Land\\n    /// @param tokenId The id of the Land\\n    /// @return the owner data (address + burn flag + operatorEnabled)\\n    /// @dev for debugging purposes\\n    function getOwnerData(uint256 tokenId) external view virtual returns (uint256) {\\n        return _readOwnerData(tokenId);\\n    }\\n\\n    /// @notice Check if the sender approved the operator.\\n    /// @param owner The address of the owner.\\n    /// @param operator The address of the operator.\\n    /// @return isOperator The status of the approval.\\n    function isApprovedForAll(address owner, address operator) external view virtual override returns (bool) {\\n        return _isApprovedForAllOrSuperOperator(owner, operator);\\n    }\\n\\n    /// @param from The address who initiated the transfer (may differ from msg.sender).\\n    /// @param to The address receiving the token.\\n    /// @param tokenId The token being transferred.\\n    function _transferFrom(address from, address to, uint256 tokenId) internal {\\n        address msgSender = _msgSender();\\n        _doTransfer(msgSender, from, to, tokenId);\\n        if (to.code.length > 0 && _checkIERC721MandatoryTokenReceiver(to)) {\\n            _checkOnERC721Received(msgSender, from, to, tokenId, \\\"\\\");\\n        }\\n    }\\n\\n    /// @notice Transfer a token between 2 addresses letting the receiver knows of the transfer.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param tokenId The id of the token.\\n    /// @param data Additional data.\\n    function _safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) internal {\\n        address msgSender = _msgSender();\\n        _doTransfer(msgSender, from, to, tokenId);\\n        if (to.code.length > 0) {\\n            _checkOnERC721Received(msgSender, from, to, tokenId, data);\\n        }\\n    }\\n\\n    /// @param msgSender The sender of the transaction\\n    /// @param from The address who initiated the transfer (may differ from msg.sender).\\n    /// @param to The address receiving the token.\\n    /// @param tokenId The token being transferred.\\n    function _doTransfer(address msgSender, address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert InvalidAddress();\\n        }\\n        bool operatorEnabled = _checkFromIsOwner(from, tokenId);\\n        bool authorized = msgSender == from || _isApprovedForAllOrSuperOperator(from, msgSender);\\n        if (!authorized && !(operatorEnabled && _readOperator(tokenId) == msgSender)) {\\n            revert ERC721InsufficientApproval(msgSender, tokenId);\\n        }\\n        _transferNumNFTPerAddress(from, to, 1);\\n        _updateOwnerData(tokenId, to, false);\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /// @param from The sender of the token\\n    /// @param to The recipient of the token\\n    /// @param ids The ids of the tokens\\n    /// @param data additional data\\n    /// @param safe checks the target contract\\n    function _batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes memory data,\\n        bool safe\\n    ) internal {\\n        if (from == address(0) || to == address(0)) {\\n            revert InvalidAddress();\\n        }\\n\\n        address msgSender = _msgSender();\\n        bool authorized = msgSender == from || _isApprovedForAllOrSuperOperator(from, msgSender);\\n        uint256 numTokens = ids.length;\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            uint256 tokenId = ids[i];\\n            (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(tokenId);\\n            if (from != owner) {\\n                revert ERC721InvalidOwner(from);\\n            }\\n            if (!authorized && !(operatorEnabled && _readOperator(tokenId) == msgSender)) {\\n                revert ERC721InsufficientApproval(msgSender, tokenId);\\n            }\\n            _updateOwnerData(tokenId, to, false);\\n            emit Transfer(from, to, tokenId);\\n        }\\n        _transferNumNFTPerAddress(from, to, numTokens);\\n\\n        if (to.code.length > 0) {\\n            if (_checkIERC721MandatoryTokenReceiver(to)) {\\n                _checkOnERC721BatchReceived(msgSender, from, to, ids, data);\\n            } else if (safe) {\\n                for (uint256 i = 0; i < numTokens; i++) {\\n                    _checkOnERC721Received(msgSender, from, to, ids[i], data);\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @param from The address who initiated the transfer (may differ from msg.sender).\\n    /// @param operator The address receiving the approval\\n    /// @param approved The determination of the approval\\n    function _setApprovalForAll(address from, address operator, bool approved) internal {\\n        if (from == address(0)) {\\n            revert ERC721InvalidSender(from);\\n        }\\n        address msgSender = _msgSender();\\n        if (msgSender != from && !_isSuperOperator(msgSender)) {\\n            revert ERC721InvalidApprover(msgSender);\\n        }\\n        if (_isSuperOperator(operator)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _writeOperatorForAll(from, operator, approved);\\n        emit ApprovalForAll(from, operator, approved);\\n    }\\n\\n    /// @param from The address who initiated the transfer (may differ from msg.sender).\\n    /// @param operator The address receiving the approval\\n    /// @param tokenId The id of the token\\n    function _approveFor(address from, address operator, uint256 tokenId) internal {\\n        _checkFromIsOwner(from, tokenId);\\n\\n        address msgSender = _msgSender();\\n        bool authorized = msgSender == from || _isApprovedForAllOrSuperOperator(from, msgSender);\\n        if (!authorized) {\\n            revert ERC721InvalidApprover(msgSender);\\n        }\\n        if (operator == address(0)) {\\n            _updateOwnerData(tokenId, from, false);\\n        } else {\\n            _updateOwnerData(tokenId, from, true);\\n            _writeOperator(tokenId, operator);\\n        }\\n        emit Approval(from, operator, tokenId);\\n    }\\n\\n    /// @param from The address who initiated the transfer (may differ from msg.sender).\\n    /// @param tokenId token id to burn\\n    function _burn(address from, uint256 tokenId) internal {\\n        bool operatorEnabled = _checkFromIsOwner(from, tokenId);\\n        address msgSender = _msgSender();\\n        bool authorized = msgSender == from || _isApprovedForAllOrSuperOperator(from, msgSender);\\n        if (!authorized && !(operatorEnabled && _readOperator(tokenId) == msgSender)) {\\n            revert ERC721InsufficientApproval(msgSender, tokenId);\\n        }\\n        _writeOwnerData(tokenId, (_readOwnerData(tokenId) & (NOT_ADDRESS & NOT_OPERATOR_FLAG)) | BURNED_FLAG);\\n        _subNumNFTPerAddress(from, 1);\\n        emit Transfer(from, address(0), tokenId);\\n    }\\n\\n    /// @notice checks that the token is taken from the owner after the call (from == owner)\\n    /// @param from sender address\\n    /// @param tokenId The id of the token\\n    /// @return operatorEnabled Whether or not operators are enabled for this token.\\n    function _checkFromIsOwner(address from, uint256 tokenId) internal view returns (bool) {\\n        if (from == address(0)) {\\n            revert ERC721InvalidSender(from);\\n        }\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(tokenId);\\n        // As from == owner, this is the same check as from == address(0) but we want a specific error for this one.\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        if (from != owner) {\\n            revert ERC721InvalidOwner(from);\\n        }\\n        return operatorEnabled;\\n    }\\n\\n    /// @param tokenId The id of the token\\n    /// @param newOwner The new owner of the token\\n    /// @param hasOperator if true the operator flag is set\\n    function _updateOwnerData(uint256 tokenId, address newOwner, bool hasOperator) internal {\\n        uint256 oldData = (_readOwnerData(tokenId) & (NOT_ADDRESS & NOT_OPERATOR_FLAG)) | uint256(uint160(newOwner));\\n        if (hasOperator) {\\n            oldData = oldData | OPERATOR_FLAG;\\n        }\\n        _writeOwnerData(tokenId, oldData);\\n    }\\n\\n    /// @param tokenId token id\\n    /// @return owner address of the owner\\n    function _ownerOf(uint256 tokenId) internal view returns (address owner) {\\n        (owner, ) = _ownerAndOperatorEnabledOf(tokenId);\\n    }\\n\\n    /// @notice Get the owner and operatorEnabled flag of a token.\\n    /// @param tokenId The token to query.\\n    /// @return owner The owner of the token.\\n    /// @return operatorEnabled Whether or not operators are enabled for this token.\\n    /// @dev must extract the owner, burn and operator flag from _readOwnerData(tokenId) if burned must return owner = address(0)\\n    function _ownerAndOperatorEnabledOf(\\n        uint256 tokenId\\n    ) internal view virtual returns (address owner, bool operatorEnabled);\\n\\n    /// @notice Check if receiving contract accepts erc721 transfers.\\n    /// @param operator The address of the operator.\\n    /// @param from The from address, may be different from msg.sender.\\n    /// @param to The address we want to transfer to.\\n    /// @param tokenId The id of the token we would like to transfer.\\n    /// @param data Any additional data to send with the transfer.\\n    function _checkOnERC721Received(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal {\\n        /* solhint-disable no-empty-blocks */\\n        try IERC721Receiver(to).onERC721Received(operator, from, tokenId, data) returns (bytes4 retval) {\\n            if (retval == IERC721Receiver.onERC721Received.selector) {\\n                return;\\n            }\\n        } catch (bytes memory) {}\\n        /* solhint-enable no-empty-blocks */\\n        revert ERC721InvalidReceiver(to);\\n    }\\n\\n    /// @notice Check if receiving contract accepts erc721 batch transfers.\\n    /// @param operator The address of the operator.\\n    /// @param from The from address, may be different from msg.sender.\\n    /// @param to The address we want to transfer to.\\n    /// @param ids The ids of the tokens we would like to transfer.\\n    /// @param _data Any additional data to send with the transfer.\\n    function _checkOnERC721BatchReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        bytes memory _data\\n    ) internal {\\n        /* solhint-disable no-empty-blocks */\\n        try IERC721MandatoryTokenReceiver(to).onERC721BatchReceived(operator, from, ids, _data) returns (\\n            bytes4 retval\\n        ) {\\n            if (retval == IERC721MandatoryTokenReceiver.onERC721BatchReceived.selector) {\\n                return;\\n            }\\n        } catch (bytes memory) {}\\n        /* solhint-enable no-empty-blocks */\\n        revert ERC721InvalidReceiver(to);\\n    }\\n\\n    /// @notice Check if there was enough gas.\\n    /// @param to The address of the contract to check.\\n    /// @return Whether or not this check succeeded.\\n    function _checkIERC721MandatoryTokenReceiver(address to) internal view returns (bool) {\\n        return ERC165Checker.supportsERC165InterfaceUnchecked(to, type(IERC721MandatoryTokenReceiver).interfaceId);\\n    }\\n\\n    /// @notice Check if the sender approved the operator.\\n    /// @param owner The address of the owner.\\n    /// @param operator The address of the operator.\\n    /// @return isOperator The status of the approval.\\n    function _isApprovedForAllOrSuperOperator(address owner, address operator) internal view returns (bool) {\\n        return _isOperatorForAll(owner, operator) || _isSuperOperator(operator);\\n    }\\n\\n    /// @notice Add tokens to the owner balance\\n    /// @param who the owner of the token\\n    /// @param val how must to add to the owner balance\\n    /// @dev we can use unchecked becase there is a limited number of lands 408x408\\n    function _addNumNFTPerAddress(address who, uint256 val) internal {\\n        unchecked {\\n            _writeNumNFTPerAddress(who, _readNumNFTPerAddress(who) + val);\\n        }\\n    }\\n\\n    /// @notice Subtract tokens to the owner balance\\n    /// @param who the owner of the token\\n    /// @param val how must to subtract to the owner balance\\n    /// @dev we can use unchecked becase there is a limited number of lands 408x408\\n    function _subNumNFTPerAddress(address who, uint256 val) internal {\\n        unchecked {\\n            _writeNumNFTPerAddress(who, _readNumNFTPerAddress(who) - val);\\n        }\\n    }\\n\\n    /// @notice Move balance between to users\\n    /// @param from address to subtract from\\n    /// @param to address to add from\\n    /// @param quantity how many tokens to move\\n    function _transferNumNFTPerAddress(address from, address to, uint256 quantity) internal virtual {\\n        if (from != to) {\\n            _subNumNFTPerAddress(from, quantity);\\n            _addNumNFTPerAddress(to, quantity);\\n        }\\n    }\\n\\n    /// @notice get the number of nft for an address\\n    /// @param owner address to check\\n    /// @return the number of nfts\\n    function _readNumNFTPerAddress(address owner) internal view virtual returns (uint256);\\n\\n    /// @notice set the number of nft for an address\\n    /// @param owner address to set\\n    /// @param quantity the number of nfts to set for the owner\\n    function _writeNumNFTPerAddress(address owner, uint256 quantity) internal virtual;\\n\\n    /// @notice Get the owner data of a token for a user\\n    /// @param tokenId The id of the token.\\n    /// @return the owner data\\n    /// @dev The owner data has three fields: owner address, operator flag and burn flag. See: _owners declaration.\\n    function _readOwnerData(uint256 tokenId) internal view virtual returns (uint256);\\n\\n    /// @notice Get the owner address of a token (included in the ownerData, see: _getOwnerData)\\n    /// @param tokenId The id of the token.\\n    /// @return the owner address\\n    function _getOwnerAddress(uint256 tokenId) internal view virtual returns (address) {\\n        return address(uint160(_readOwnerData(tokenId)));\\n    }\\n\\n    /// @notice Set the owner data of a token\\n    /// @param tokenId the token Id\\n    /// @param data the owner data\\n    /// @dev The owner data has three fields: owner address, operator flag and burn flag. See: _owners declaration.\\n    function _writeOwnerData(uint256 tokenId, uint256 data) internal virtual;\\n\\n    /// @notice check if an operator was enabled by a given owner\\n    /// @param owner that enabled the operator\\n    /// @param operator address to check if it was enabled\\n    /// @return true if the operator has access\\n    function _isOperatorForAll(address owner, address operator) internal view virtual returns (bool);\\n\\n    /// @notice Let an operator to access to all the tokens of a owner\\n    /// @param owner that enabled the operator\\n    /// @param operator address to check if it was enabled\\n    /// @param enabled if true give access to the operator, else disable it\\n    function _writeOperatorForAll(address owner, address operator, bool enabled) internal virtual;\\n\\n    /// @notice get the operator for a specific token, the operator can transfer on the owner behalf\\n    /// @param tokenId The id of the token.\\n    /// @return the operator address\\n    function _readOperator(uint256 tokenId) internal view virtual returns (address);\\n\\n    /// @notice set the operator for a specific token, the operator can transfer on the owner behalf\\n    /// @param tokenId the id of the token.\\n    /// @param operator the operator address\\n    function _writeOperator(uint256 tokenId, address operator) internal virtual;\\n}\\n\",\"keccak256\":\"0x27819ff22e77129ddb35d6f39cb5a72ea06e0caec4606748d081636e92c6c3dd\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/land/contracts/common/LandBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {IERC2981} from \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC721Metadata} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport {IOperatorFilterRegistry} from \\\"../interfaces/IOperatorFilterRegistry.sol\\\";\\nimport {IERC173} from \\\"../interfaces/IERC173.sol\\\";\\nimport {IERC721BatchOps} from \\\"../interfaces/IERC721BatchOps.sol\\\";\\nimport {WithAdmin} from \\\"./WithAdmin.sol\\\";\\nimport {OperatorFiltererUpgradeable} from \\\"../common/OperatorFiltererUpgradeable.sol\\\";\\nimport {WithMetadataRegistry} from \\\"../common/WithMetadataRegistry.sol\\\";\\nimport {WithRoyalties} from \\\"../common/WithRoyalties.sol\\\";\\nimport {WithOwner} from \\\"../common/WithOwner.sol\\\";\\nimport {LandBaseToken} from \\\"./LandBaseToken.sol\\\";\\n\\n/// @title Land Contract\\n/// @author The Sandbox\\n/// @custom:security-contact contact-blockchain@sandbox.game\\n/// @notice LAND contract\\n/// @dev LAND contract implements ERC721, quad and marketplace filtering functionalities\\nabstract contract LandBase is\\n    LandBaseToken,\\n    Initializable,\\n    OperatorFiltererUpgradeable,\\n    WithAdmin,\\n    WithMetadataRegistry,\\n    WithRoyalties,\\n    WithOwner\\n{\\n    /// @dev this protects the implementation contract from being initialized.\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Initializes the contract with the meta-transaction contract, admin & royalty-manager\\n    /// @param admin Admin of the contract\\n    function initialize(address admin) external initializer {\\n        // We must be able to initialize the admin if this is a fresh deploy, but we want to\\n        // be backward compatible with the current deployment\\n        if (_readAdmin() != address(0)) {\\n            revert InvalidInitialization();\\n        }\\n        _setAdmin(admin);\\n    }\\n\\n    /// @notice This function is used to register Land contract on the Operator Filterer Registry of Opensea.\\n    /// @param subscriptionOrRegistrantToCopy registration address of the list to subscribe.\\n    /// @param subscribe bool to signify subscription 'true' or to copy the list 'false'.\\n    function register(address subscriptionOrRegistrantToCopy, bool subscribe) external onlyAdmin {\\n        if (subscriptionOrRegistrantToCopy == address(0)) {\\n            revert InvalidAddress();\\n        }\\n        _register(subscriptionOrRegistrantToCopy, subscribe);\\n    }\\n\\n    /// @notice Change the admin of the contract\\n    /// @dev Change the administrator to be `newAdmin`.\\n    /// @param newAdmin The address of the new administrator.\\n    function changeAdmin(address newAdmin) external onlyAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /// @notice Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights).\\n    /// @param superOperator address that will be given/removed superOperator right.\\n    /// @param enabled set whether the superOperator is enabled or disabled.\\n    function setSuperOperator(address superOperator, bool enabled) external onlyAdmin {\\n        _setSuperOperator(superOperator, enabled);\\n    }\\n\\n    /// @notice Enable or disable the ability of `minter` to mint tokens\\n    /// @param minter address that will be given/removed minter right.\\n    /// @param enabled set whether the minter is enabled or disabled.\\n    function setMinter(address minter, bool enabled) external onlyAdmin {\\n        _setMinter(minter, enabled);\\n    }\\n\\n    /// @notice sets filter registry address deployed in test\\n    /// @param registry the address of the registry\\n    function setOperatorRegistry(IOperatorFilterRegistry registry) external virtual onlyAdmin {\\n        _setOperatorRegistry(registry);\\n    }\\n\\n    /// @notice set royalty manager\\n    /// @param royaltyManager address of the manager contract for common royalty recipient\\n    function setRoyaltyManager(address royaltyManager) external onlyAdmin {\\n        _setRoyaltyManager(royaltyManager);\\n    }\\n\\n    /// @notice sets address of the Metadata Registry\\n    /// @param metadataRegistry The address of the Metadata Registry\\n    function setMetadataRegistry(address metadataRegistry) external onlyAdmin {\\n        _setMetadataRegistry(metadataRegistry);\\n    }\\n\\n    /// @notice Set the address of the new owner of the contract\\n    /// @param newOwner address of new owner\\n    function transferOwnership(address newOwner) external onlyAdmin {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /// @notice Approve an operator to spend tokens on the sender behalf\\n    /// @param sender The address giving the approval\\n    /// @param operator The address receiving the approval\\n    /// @param tokenId The id of the token\\n    function approveFor(\\n        address sender,\\n        address operator,\\n        uint256 tokenId\\n    ) external onlyAllowedOperatorApproval(operator) {\\n        _approveFor(sender, operator, tokenId);\\n    }\\n\\n    /// @notice Set the approval for an operator to manage all the tokens of the sender\\n    /// @param operator The address receiving the approval\\n    /// @param approved The determination of the approval\\n    function setApprovalForAll(\\n        address operator,\\n        bool approved\\n    ) external override onlyAllowedOperatorApproval(operator) {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /// @notice Set the approval for an operator to manage all the tokens of the sender\\n    /// @param sender The address giving the approval\\n    /// @param operator The address receiving the approval\\n    /// @param approved The determination of the approval\\n    function setApprovalForAllFor(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) external onlyAllowedOperatorApproval(operator) {\\n        _setApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @notice Approve an operator to spend tokens on the sender behalf\\n    /// @param operator The address receiving the approval\\n    /// @param tokenId The id of the token\\n    function approve(address operator, uint256 tokenId) external override onlyAllowedOperatorApproval(operator) {\\n        _approveFor(_msgSender(), operator, tokenId);\\n    }\\n\\n    /// @notice Transfer a token between 2 addresses\\n    /// @param from The sender of the token\\n    /// @param to The recipient of the token\\n    /// @param tokenId The id of the token\\n    function transferFrom(address from, address to, uint256 tokenId) external override onlyAllowedOperator(from) {\\n        _transferFrom(from, to, tokenId);\\n    }\\n\\n    /// @notice Transfer many tokens between 2 addresses.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param ids The ids of the tokens.\\n    /// @param data Additional data.\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external virtual override onlyAllowedOperator(from) {\\n        _batchTransferFrom(from, to, ids, data, false);\\n    }\\n\\n    /// @notice Transfer a token between 2 addresses letting the receiver knows of the transfer\\n    /// @param from The sender of the token\\n    /// @param to The recipient of the token\\n    /// @param tokenId The id of the token\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external override onlyAllowedOperator(from) {\\n        _safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /// @notice Transfer a token between 2 addresses letting the receiver knows of the transfer\\n    /// @param from The sender of the token\\n    /// @param to The recipient of the token\\n    /// @param tokenId The id of the token\\n    /// @param data Additional data\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) external override onlyAllowedOperator(from) {\\n        _safeTransferFrom(from, to, tokenId, data);\\n    }\\n\\n    /// @notice Transfer many tokens between 2 addresses, while\\n    /// ensuring the receiving contract has a receiver method.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param ids The ids of the tokens.\\n    /// @param data Additional data.\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external virtual onlyAllowedOperator(from) {\\n        _batchTransferFrom(from, to, ids, data, true);\\n    }\\n\\n    /// @notice Check if the contract supports an interface\\n    /// @param interfaceId The id of the interface\\n    /// @return True if the interface is supported\\n    function supportsInterface(bytes4 interfaceId) public pure override returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721BatchOps).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            interfaceId == type(IERC165).interfaceId ||\\n            interfaceId == type(IERC173).interfaceId ||\\n            interfaceId == type(IERC2981).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x28ee961a5bca5b21baa518286f76e1dc5e57b0ccb3e24288e676c55bbf01207d\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/land/contracts/common/LandBaseToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {IErrors} from \\\"../interfaces/IErrors.sol\\\";\\nimport {ILandToken} from \\\"../interfaces/ILandToken.sol\\\";\\nimport {ERC721BaseToken} from \\\"../common/ERC721BaseToken.sol\\\";\\n\\n/// @title LandBaseToken\\n/// @author The Sandbox\\n/// @custom:security-contact contact-blockchain@sandbox.game\\n/// @notice Implement LAND and quad functionalities on top of an ERC721 token\\n/// @dev This contract implements a quad tree structure to handle groups of ERC721 tokens at once\\nabstract contract LandBaseToken is IErrors, ILandToken, ERC721BaseToken {\\n    using Address for address;\\n\\n    /// @notice the coordinates are invalid\\n    /// @param size The size of the quad\\n    /// @param x The bottom left x coordinate of the quad\\n    /// @param y The bottom left y coordinate of the quad\\n    error InvalidCoordinates(uint256 size, uint256 x, uint256 y);\\n\\n    /// @notice is not the owner of the quad\\n    /// @param x The bottom left x coordinate of the quad\\n    /// @param y The bottom left y coordinate of the quad\\n    error NotOwner(uint256 x, uint256 y);\\n\\n    /// @notice the token is already minted\\n    /// @param tokenId the id of land\\n    error AlreadyMinted(uint256 tokenId);\\n\\n    uint256 internal constant GRID_SIZE = 408;\\n\\n    /* solhint-disable const-name-snakecase */\\n    uint256 internal constant LAYER = 0xFF00000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_1x1 = 0x0000000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_3x3 = 0x0100000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_6x6 = 0x0200000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_12x12 = 0x0300000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_24x24 = 0x0400000000000000000000000000000000000000000000000000000000000000;\\n    /* solhint-enable const-name-snakecase */\\n\\n    event Minter(address indexed minter, bool enabled);\\n\\n    /// @dev helper struct to store arguments in memory instead of the stack.\\n    struct Land {\\n        uint256 x;\\n        uint256 y;\\n        uint256 size;\\n    }\\n\\n    /// @notice transfer multiple quad (aligned to a quad tree with size 3, 6, 12 or 24 only)\\n    /// @param from current owner of the quad\\n    /// @param to destination\\n    /// @param sizes list of sizes for each quad\\n    /// @param xs list of bottom left x coordinates for each quad\\n    /// @param ys list of bottom left y coordinates for each quad\\n    /// @param data additional data\\n    function batchTransferQuad(\\n        address from,\\n        address to,\\n        uint256[] calldata sizes,\\n        uint256[] calldata xs,\\n        uint256[] calldata ys,\\n        bytes calldata data\\n    ) external override {\\n        if (from == address(0) || to == address(0)) {\\n            revert InvalidAddress();\\n        }\\n        if (sizes.length != xs.length || xs.length != ys.length) {\\n            revert InvalidLength();\\n        }\\n        address msgSender = _msgSender();\\n        if (msgSender != from && !_isApprovedForAllOrSuperOperator(from, msgSender)) {\\n            revert ERC721InvalidOwner(msgSender);\\n        }\\n        uint256 numTokensTransferred = 0;\\n        for (uint256 i = 0; i < sizes.length; i++) {\\n            uint256 size = sizes[i];\\n            _isValidQuad(size, xs[i], ys[i]);\\n            _transferQuad(from, to, size, xs[i], ys[i]);\\n            numTokensTransferred += size * size;\\n        }\\n        _transferNumNFTPerAddress(from, to, numTokensTransferred);\\n\\n        if (to.code.length > 0 && _checkIERC721MandatoryTokenReceiver(to)) {\\n            uint256[] memory ids = new uint256[](numTokensTransferred);\\n            uint256 counter = 0;\\n            for (uint256 j = 0; j < sizes.length; j++) {\\n                uint256 size = sizes[j];\\n                for (uint256 i = 0; i < size * size; i++) {\\n                    ids[counter] = _idInPath(i, size, xs[j], ys[j]);\\n                    counter++;\\n                }\\n            }\\n            _checkOnERC721BatchReceived(msgSender, from, to, ids, data);\\n        }\\n    }\\n\\n    /// @notice transfer one quad (aligned to a quad tree with size 3, 6, 12 or 24 only)\\n    /// @param from current owner of the quad\\n    /// @param to destination\\n    /// @param size The size of the quad\\n    /// @param x The bottom left x coordinate of the quad\\n    /// @param y The bottom left y coordinate of the quad\\n    /// @param data additional data for transfer\\n    function transferQuad(\\n        address from,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes calldata data\\n    ) external override {\\n        address msgSender = _msgSender();\\n        if (from == address(0) || to == address(0)) {\\n            revert InvalidAddress();\\n        }\\n        if (msgSender != from && !_isApprovedForAllOrSuperOperator(from, msgSender)) {\\n            revert ERC721InvalidOwner(msgSender);\\n        }\\n        _isValidQuad(size, x, y);\\n        _transferQuad(from, to, size, x, y);\\n        _transferNumNFTPerAddress(from, to, size * size);\\n        _checkBatchReceiverAcceptQuad(msgSender, from, to, size, x, y, data);\\n    }\\n\\n    /// @notice Mint a new quad (aligned to a quad tree with size 1, 3, 6, 12 or 24 only)\\n    /// @param to The recipient of the new quad\\n    /// @param size The size of the new quad\\n    /// @param x The bottom left x coordinate of the new quad\\n    /// @param y The bottom left y coordinate of the new quad\\n    /// @param data extra data to pass to the transfer\\n    function mintQuad(address to, uint256 size, uint256 x, uint256 y, bytes memory data) external virtual override {\\n        address msgSender = _msgSender();\\n        if (!_isMinter(msgSender)) {\\n            revert ERC721InvalidOwner(msgSender);\\n        }\\n        _isValidQuad(size, x, y);\\n        _mintQuad(msgSender, to, size, x, y, data);\\n    }\\n\\n    /// @notice Checks if a parent quad has child quads already minted.\\n    /// @notice Then mints the rest child quads and transfers the parent quad.\\n    /// @notice Should only be called by the tunnel.\\n    /// @param to The recipient of the new quad\\n    /// @param size The size of the new quad\\n    /// @param x The bottom left x coordinate of the new quad\\n    /// @param y The bottom left y coordinate of the new quad\\n    /// @param data extra data to pass to the transfer\\n    function mintAndTransferQuad(address to, uint256 size, uint256 x, uint256 y, bytes calldata data) external virtual {\\n        address msgSender = _msgSender();\\n        if (!_isMinter(msgSender)) {\\n            revert ERC721InvalidOwner(msgSender);\\n        }\\n        if (to == address(0)) {\\n            revert InvalidAddress();\\n        }\\n\\n        _isValidQuad(size, x, y);\\n        if (_ownerOfQuad(size, x, y) != address(0)) {\\n            _transferQuad(msgSender, to, size, x, y);\\n            _transferNumNFTPerAddress(msgSender, to, size * size);\\n            _checkBatchReceiverAcceptQuad(msgSender, msgSender, to, size, x, y, data);\\n        } else {\\n            _mintAndTransferQuad(msgSender, to, size, x, y, data);\\n        }\\n    }\\n\\n    /// @notice x coordinate of Land token\\n    /// @param tokenId the id of land\\n    /// @return the x coordinates\\n    function getX(uint256 tokenId) external pure returns (uint256) {\\n        return _getX(tokenId);\\n    }\\n\\n    /// @notice y coordinate of Land token\\n    /// @param tokenId the id of land\\n    /// @return the y coordinates\\n    function getY(uint256 tokenId) external pure returns (uint256) {\\n        return _getY(tokenId);\\n    }\\n\\n    /// @notice Return the name of the token contract\\n    /// @return The name of the token contract\\n    function name() external pure virtual returns (string memory) {\\n        return \\\"Sandbox's LANDs\\\";\\n    }\\n\\n    /// @notice check whether address `who` is given minter rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has minter rights.\\n    function isMinter(address who) external view virtual returns (bool) {\\n        return _isMinter(who);\\n    }\\n\\n    /// @notice checks if Land has been minted or not\\n    /// @param size The size of the quad\\n    /// @param x The bottom left x coordinate of the quad\\n    /// @param y The bottom left y coordinate of the quad\\n    /// @return bool for if Land has been minted or not\\n    function exists(uint256 size, uint256 x, uint256 y) external view virtual override returns (bool) {\\n        _isValidQuad(size, x, y);\\n        return _ownerOfQuad(size, x, y) != address(0);\\n    }\\n\\n    /// @notice Return the symbol of the token contract\\n    /// @return The symbol of the token contract\\n    function symbol() external pure virtual returns (string memory) {\\n        return \\\"LAND\\\";\\n    }\\n\\n    /// @notice total width of the map\\n    /// @return width\\n    function width() external pure virtual returns (uint256) {\\n        return GRID_SIZE;\\n    }\\n\\n    /// @notice total height of the map\\n    /// @return height\\n    function height() public pure returns (uint256) {\\n        return GRID_SIZE;\\n    }\\n\\n    /// @notice Return the URI of a specific token\\n    /// @param tokenId The id of the token\\n    /// @return The URI of the token\\n    function tokenURI(uint256 tokenId) external view virtual returns (string memory) {\\n        if (_ownerOf(tokenId) == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return string(abi.encodePacked(\\\"https://api.sandbox.game/lands/\\\", Strings.toString(tokenId), \\\"/metadata.json\\\"));\\n    }\\n\\n    /// @notice Check size and coordinate of a quad\\n    /// @param size The size of the quad\\n    /// @param x The bottom left x coordinate of the quad\\n    /// @param y The bottom left y coordinate of the quad\\n    /// @dev after calling this function we can safely use unchecked math for x,y,size\\n    function _isValidQuad(uint256 size, uint256 x, uint256 y) internal pure {\\n        if (size != 1 && size != 3 && size != 6 && size != 12 && size != 24) {\\n            revert InvalidCoordinates(size, x, y);\\n        }\\n        if (x % size != 0 || y % size != 0 || x > GRID_SIZE - size || y > GRID_SIZE - size) {\\n            revert InvalidCoordinates(size, x, y);\\n        }\\n    }\\n\\n    /// @param from current owner of the quad\\n    /// @param to destination\\n    /// @param size The size of the quad\\n    /// @param x The bottom left x coordinate of the quad\\n    /// @param y The bottom left y coordinate of the quad\\n    function _transferQuad(address from, address to, uint256 size, uint256 x, uint256 y) internal {\\n        if (size == 1) {\\n            uint256 id1x1 = _getQuadId(LAYER_1x1, x, y);\\n            address owner = _ownerOf(id1x1);\\n            if (owner == address(0)) {\\n                revert InvalidCoordinates(size, x, y);\\n            }\\n            if (owner != from) {\\n                revert ERC721InvalidOwner(from);\\n            }\\n            _writeOwnerData(id1x1, uint160(to));\\n        } else {\\n            _regroupQuad(from, to, Land({x: x, y: y, size: size}), true, size / 2);\\n        }\\n        for (uint256 i = 0; i < size * size; i++) {\\n            emit Transfer(from, to, _idInPath(i, size, x, y));\\n        }\\n    }\\n\\n    /// @notice Mint a new quad\\n    /// @param msgSender The original sender of the transaction\\n    /// @param to The recipient of the new quad\\n    /// @param size The size of the new quad\\n    /// @param x The bottom left x coordinate of the new quad\\n    /// @param y The bottom left y coordinate of the new quad\\n    /// @param data extra data to pass to the transfer\\n    function _mintQuad(address msgSender, address to, uint256 size, uint256 x, uint256 y, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert InvalidAddress();\\n        }\\n\\n        (uint256 layer, , ) = _getQuadLayer(size);\\n        uint256 quadId = _getQuadId(layer, x, y);\\n\\n        _checkQuadIsNotMinted(size, x, y, 24);\\n        for (uint256 i = 0; i < size * size; i++) {\\n            uint256 _id = _idInPath(i, size, x, y);\\n            if (_readOwnerData(_id) != 0) {\\n                revert AlreadyMinted(_id);\\n            }\\n            emit Transfer(address(0), to, _id);\\n        }\\n\\n        _writeOwnerData(quadId, uint160(to));\\n        _addNumNFTPerAddress(to, size * size);\\n        _checkBatchReceiverAcceptQuad(msgSender, address(0), to, size, x, y, data);\\n    }\\n\\n    /// @notice checks if the child quads in the parent quad (size, x, y) are owned by msgSender.\\n    /// @param msgSender The original sender of the transaction\\n    /// @param to The address to which the ownership of the quad will be transferred\\n    /// @param size The size of the quad being minted and transferred\\n    /// @param x The x-coordinate of the top-left corner of the quad being minted.\\n    /// @param y The y-coordinate of the top-left corner of the quad being minted.\\n    /// @dev It recursively checks child quad of every size(excluding Lands of 1x1 size) are minted or not.\\n    /// @dev Quad which are minted are pushed into quadMinted to also check if every Land of size 1x1 in\\n    /// @dev the parent quad is minted or not. While checking if the every child Quad and Land is minted it\\n    /// @dev also checks and clear the owner for quads which are minted. Finally it checks if the new owner\\n    /// @dev if is a contract can handle ERC721 tokens or not and transfers the parent quad to new owner.\\n    function _mintAndTransferQuad(\\n        address msgSender,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes memory data\\n    ) internal {\\n        (uint256 layer, , ) = _getQuadLayer(size);\\n        uint256 quadId = _getQuadId(layer, x, y);\\n\\n        // Length of array is equal to number of 3x3 child quad a 24x24 quad can have. Would be used to push the minted Quads.\\n        Land[] memory quadMinted = new Land[](64);\\n        // index of last minted quad pushed on quadMinted Array\\n        uint256 index = 0;\\n        uint256 landMinted = 0;\\n\\n        // if size of the Quad in land struct to be transferred is greater than 3 we check recursively if the child quads are minted or not.\\n        if (size > 3) {\\n            (index, landMinted) = _checkQuadIsNotMintedAndClearOwner(\\n                msgSender,\\n                Land({x: x, y: y, size: size}),\\n                quadMinted,\\n                landMinted,\\n                index,\\n                size / 2\\n            );\\n        }\\n\\n        // Lopping around the Quad in land struct to generate ids of 1x1 land token and checking if they are owned by msg.sender\\n        for (uint256 i = 0; i < size * size; i++) {\\n            uint256 _id = _idInPath(i, size, x, y);\\n            // checking land with token id \\\"_id\\\" is in the quadMinted array.\\n            bool isAlreadyMinted = _isQuadMinted(quadMinted, Land({x: _getX(_id), y: _getY(_id), size: 1}), index);\\n            if (isAlreadyMinted) {\\n                // if land is in the quadMinted array there just emitting transfer event\\n                emit Transfer(msgSender, to, _id);\\n            } else {\\n                if (_getOwnerAddress(_id) == msgSender) {\\n                    if (_readOperator(_id) != address(0)) _writeOperator(_id, address(0));\\n                    landMinted += 1;\\n                    emit Transfer(msgSender, to, _id);\\n                } else {\\n                    // else is checked if owned by the msgSender or not. If it is not owned by msgSender it should not have an owner.\\n                    if (_readOwnerData(_id) != 0) {\\n                        revert AlreadyMinted(_id);\\n                    }\\n\\n                    emit Transfer(address(0), to, _id);\\n                }\\n            }\\n        }\\n\\n        // checking if the new owner \\\"to\\\" is a contract. If yes, checking if it could handle ERC721 tokens.\\n        _checkBatchReceiverAcceptQuadAndClearOwner(msgSender, quadMinted, index, landMinted, to, size, x, y, data);\\n\\n        _writeOwnerData(quadId, uint160(to));\\n        _addNumNFTPerAddress(to, size * size);\\n        _subNumNFTPerAddress(msgSender, landMinted);\\n    }\\n\\n    /// @notice recursively checks if the child quads are minted.\\n    /// @param size The size of the quad\\n    /// @param x The x-coordinate of the top-left corner of the quad being minted.\\n    /// @param y The y-coordinate of the top-left corner of the quad being minted.\\n    /// @param quadCompareSize the size of the child quads to be checked.\\n    function _checkQuadIsNotMinted(uint256 size, uint256 x, uint256 y, uint256 quadCompareSize) internal {\\n        (uint256 layer, , ) = _getQuadLayer(quadCompareSize);\\n\\n        if (size <= quadCompareSize) {\\n            // when the size of the quad is smaller than the quadCompareSize(size to be compared with),\\n            // then it is checked if the bigger quad which encapsulates the quad to be minted\\n            // of with size equals the quadCompareSize has been minted or not\\n            uint256 id = _getQuadId(\\n                layer,\\n                (x / quadCompareSize) * quadCompareSize,\\n                (y / quadCompareSize) * quadCompareSize\\n            );\\n            if (_readOwnerData(id) != 0) {\\n                revert AlreadyMinted(id);\\n            }\\n        } else {\\n            // when the size is smaller than the quadCompare size the owner of all the smaller quads with size\\n            // quadCompare size in the quad to be minted are checked if they are minted or not\\n            uint256 toX = x + size;\\n            uint256 toY = y + size;\\n            for (uint256 xi = x; xi < toX; xi += quadCompareSize) {\\n                for (uint256 yi = y; yi < toY; yi += quadCompareSize) {\\n                    uint256 id = _getQuadId(layer, xi, yi);\\n                    if (_readOwnerData(id) != 0) {\\n                        revert AlreadyMinted(id);\\n                    }\\n                }\\n            }\\n        }\\n\\n        quadCompareSize = quadCompareSize / 2;\\n        if (quadCompareSize >= 3) _checkQuadIsNotMinted(size, x, y, quadCompareSize);\\n    }\\n\\n    /// @notice recursively checks if the child quads are minted in land and push them to the quadMinted array.\\n    /// @param msgSender The original sender of the transaction\\n    /// @param land the struct which has the size x and y co-ordinate of Quad to be checked\\n    /// @param quadMinted array in which the minted child quad would be pushed\\n    /// @param landMinted total 1x1 land already minted\\n    /// @param index index of last element of quadMinted array\\n    /// @param quadCompareSize the size of the child quads to be checked.\\n    /// @return the index of last quad pushed in quadMinted array and the total land already minted\\n    /// @dev if a child quad is minted in land such quads child quads will be skipped such that there is no overlapping\\n    /// @dev in quads which are minted. it clears the minted child quads owners.\\n    function _checkQuadIsNotMintedAndClearOwner(\\n        address msgSender,\\n        Land memory land,\\n        Land[] memory quadMinted,\\n        uint256 landMinted,\\n        uint256 index,\\n        uint256 quadCompareSize\\n    ) internal returns (uint256, uint256) {\\n        (uint256 layer, , ) = _getQuadLayer(quadCompareSize);\\n        uint256 toX = land.x + land.size;\\n        uint256 toY = land.y + land.size;\\n\\n        //Lopping around the Quad in land struct to check if the child quad are minted or not\\n        for (uint256 xi = land.x; xi < toX; xi += quadCompareSize) {\\n            for (uint256 yi = land.y; yi < toY; yi += quadCompareSize) {\\n                //checking if the child Quad is minted or not. i.e Checks if the quad is in the quadMinted array.\\n                bool isQuadChecked = _isQuadMinted(quadMinted, Land({x: xi, y: yi, size: quadCompareSize}), index);\\n                // if child quad is not already in the quadMinted array.\\n                if (!isQuadChecked) {\\n                    uint256 id = _getQuadId(layer, xi, yi);\\n                    address owner = _getOwnerAddress(id);\\n                    // owner of the child quad is checked to be owned by msgSender else should not be owned by anyone.\\n                    if (owner == msgSender) {\\n                        // if child quad is minted it would be pushed in quadMinted array.\\n                        quadMinted[index] = Land({x: xi, y: yi, size: quadCompareSize});\\n                        // index of quadMinted is increased\\n                        index++;\\n                        // total land minted is increase by the number if land of 1x1 in child quad\\n                        landMinted += quadCompareSize * quadCompareSize;\\n                        //owner is cleared\\n                        _writeOwnerData(id, 0);\\n                    } else {\\n                        if (owner != address(0)) {\\n                            revert AlreadyMinted(id);\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n\\n        // size of the child quad is set to be the next smaller child quad size (12 => 6 => 3)\\n        quadCompareSize = quadCompareSize / 2;\\n        // if child quad size is greater than 3 _checkAndClearOwner is checked for new child quads in the  quad in land struct.\\n        if (quadCompareSize >= 3)\\n            (index, landMinted) = _checkQuadIsNotMintedAndClearOwner(\\n                msgSender,\\n                land,\\n                quadMinted,\\n                landMinted,\\n                index,\\n                quadCompareSize\\n            );\\n        return (index, landMinted);\\n    }\\n\\n    /// @dev checks the owner of land with 'tokenId' to be 'from' and clears it\\n    /// @param from the address to be checked against the owner of the land\\n    /// @param x The x-coordinate of the top-left corner of the quad being minted.\\n    /// @param y The y-coordinate of the top-left corner of the quad being minted.\\n    /// @return bool for if land is owned by 'from' or not.\\n    function _checkAndClearLandOwner(address from, uint256 x, uint256 y) internal returns (bool) {\\n        uint256 tokenId = _getQuadId(LAYER_1x1, x, y);\\n        uint256 currentOwner = _readOwnerData(tokenId);\\n        if (currentOwner != 0) {\\n            if ((currentOwner & BURNED_FLAG) == BURNED_FLAG) {\\n                revert NotOwner(x, y);\\n            }\\n            if (address(uint160(currentOwner)) != from) {\\n                revert ERC721InvalidOwner(from);\\n            }\\n            _writeOwnerData(tokenId, 0);\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function _checkBatchReceiverAcceptQuad(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length > 0 && _checkIERC721MandatoryTokenReceiver(to)) {\\n            uint256[] memory ids = new uint256[](size * size);\\n            for (uint256 i = 0; i < size * size; i++) {\\n                ids[i] = _idInPath(i, size, x, y);\\n            }\\n            _checkOnERC721BatchReceived(operator, from, to, ids, data);\\n        }\\n    }\\n\\n    /// @param msgSender The original sender of the transaction\\n    /// @param quadMinted - an array of Land structs in which the minted child quad or Quad to be transferred are.\\n    /// @param landMinted - the total amount of land that has been minted\\n    /// @param index - the index of the last element in the quadMinted array\\n    /// @param to the address of the new owner of Quad to be transferred\\n    /// @param size The size of the quad\\n    /// @param x The x-coordinate of the top-left corner of the quad being minted.\\n    /// @param y The y-coordinate of the top-left corner of the quad being minted.\\n    /// @dev checks if the receiver of the quad(size, x, y) is a contact. If yes can it handle ERC721 tokens. It also clears owner of 1x1 land's owned by msgSender.\\n    function _checkBatchReceiverAcceptQuadAndClearOwner(\\n        address msgSender,\\n        Land[] memory quadMinted,\\n        uint256 index,\\n        uint256 landMinted,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes memory data\\n    ) internal {\\n        // checks if to is a contract and supports ERC721_MANDATORY_RECEIVER interfaces. if it doesn't it just clears the owner of 1x1 lands in quad(size, x, y)\\n        if (to.code.length > 0 && _checkIERC721MandatoryTokenReceiver(to)) {\\n            // array to push minted 1x1 land\\n            uint256[] memory idsToTransfer = new uint256[](landMinted);\\n            // index of last land pushed in idsToTransfer array\\n            uint256 transferIndex = 0;\\n            // array to push ids to be minted\\n            uint256[] memory idsToMint = new uint256[]((size * size) - landMinted);\\n            // index of last land pushed in idsToMint array\\n            uint256 mintIndex = 0;\\n\\n            // iterating over every 1x1 land in the quad to be pushed in the above arrays\\n            for (uint256 i = 0; i < size * size; i++) {\\n                uint256 id = _idInPath(i, size, x, y);\\n\\n                if (_isQuadMinted(quadMinted, Land({x: _getX(id), y: _getY(id), size: 1}), index)) {\\n                    // if land is in the quads already minted it just pushed in to the idsToTransfer array\\n                    idsToTransfer[transferIndex] = id;\\n                    transferIndex++;\\n                } else if (_getOwnerAddress(id) == msgSender) {\\n                    // if it is owned by the msgSender owner data is removed and it is pushed in to idsToTransfer array\\n                    _writeOwnerData(id, 0);\\n                    idsToTransfer[transferIndex] = id;\\n                    transferIndex++;\\n                } else {\\n                    // else it is not owned by any one and and pushed in teh idsToMint array\\n                    idsToMint[mintIndex] = id;\\n                    mintIndex++;\\n                }\\n            }\\n\\n            // checking if \\\"to\\\" contact can handle ERC721 tokens\\n            _checkOnERC721BatchReceived(msgSender, address(0), to, idsToMint, data);\\n            _checkOnERC721BatchReceived(msgSender, msgSender, to, idsToTransfer, data);\\n        } else {\\n            for (uint256 i = 0; i < size * size; i++) {\\n                uint256 id = _idInPath(i, size, x, y);\\n                if (_getOwnerAddress(id) == msgSender) _writeOwnerData(id, 0);\\n            }\\n        }\\n    }\\n\\n    /// @notice x coordinate of Land token\\n    /// @param tokenId The token id\\n    /// @return the x coordinates\\n    function _getX(uint256 tokenId) internal pure returns (uint256) {\\n        return (tokenId & ~LAYER) % GRID_SIZE;\\n    }\\n\\n    /// @notice y coordinate of Land token\\n    /// @param tokenId The token id\\n    /// @return the y coordinates\\n    function _getY(uint256 tokenId) internal pure returns (uint256) {\\n        return (tokenId & ~LAYER) / GRID_SIZE;\\n    }\\n\\n    /// @notice check if a quad is in the array of minted lands\\n    /// @param quad the quad that will be searched through mintedLand\\n    /// @param quadMinted array of quads that are minted in the current transaction\\n    /// @param index the amount of entries in mintedQuad\\n    /// @return true if a quad is minted\\n    function _isQuadMinted(Land[] memory quadMinted, Land memory quad, uint256 index) internal pure returns (bool) {\\n        for (uint256 i = 0; i < index; i++) {\\n            Land memory land = quadMinted[i];\\n            if (\\n                land.size > quad.size &&\\n                quad.x >= land.x &&\\n                quad.x < land.x + land.size &&\\n                quad.y >= land.y &&\\n                quad.y < land.y + land.size\\n            ) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @notice get size related information (there is one-to-one relationship between layer and size)\\n    /// @param size The size of the quad\\n    /// @return layer the layers that corresponds to the size\\n    /// @return parentSize the size of the parent (bigger quad that contains the current one)\\n    /// @return childLayer the layer of the child (smaller quad contained by this one)\\n    function _getQuadLayer(uint256 size) internal pure returns (uint256 layer, uint256 parentSize, uint256 childLayer) {\\n        if (size == 1) {\\n            layer = LAYER_1x1;\\n            parentSize = 3;\\n        } else if (size == 3) {\\n            layer = LAYER_3x3;\\n            parentSize = 6;\\n        } else if (size == 6) {\\n            layer = LAYER_6x6;\\n            parentSize = 12;\\n            childLayer = LAYER_3x3;\\n        } else if (size == 12) {\\n            layer = LAYER_12x12;\\n            parentSize = 24;\\n            childLayer = LAYER_6x6;\\n        } else {\\n            layer = LAYER_24x24;\\n            childLayer = LAYER_12x12;\\n        }\\n    }\\n\\n    /// @notice get the quad id given the layer and coordinates.\\n    /// @param layer the layer of the quad see: _getQuadLayer\\n    /// @param x The bottom left x coordinate of the quad\\n    /// @param y The bottom left y coordinate of the quad\\n    /// @return the tokenId of the quad\\n    /// @dev this method is gas optimized, must be called with verified x,y and size, after a call to _isValidQuad\\n    function _getQuadId(uint256 layer, uint256 x, uint256 y) internal pure returns (uint256) {\\n        unchecked {\\n            return layer + x + y * GRID_SIZE;\\n        }\\n    }\\n\\n    /// @notice return the quadId given and index, size and coordinates\\n    /// @param i the index to be added to x,y to get row and column\\n    /// @param size The bottom left x coordinate of the quad\\n    /// @param x The bottom left x coordinate of the quad\\n    /// @param y The bottom left y coordinate of the quad\\n    /// @return the tokenId of the quad\\n    /// @dev this method is gas optimized, must be called with verified x,y and size, after a call to _isValidQuad\\n    function _idInPath(uint256 i, uint256 size, uint256 x, uint256 y) internal pure returns (uint256) {\\n        unchecked {\\n            // This is an inlined/optimized version of: _getQuadId(LAYER_1x1, x + (i % size), y + (i / size))\\n            return (x + (i % size)) + (y + (i / size)) * GRID_SIZE;\\n        }\\n    }\\n\\n    /// @notice checks if the Land's child quads are owned by the from address and clears all the previous owners\\n    /// @param from address of the previous owner\\n    /// @param to address of the new owner\\n    /// @param land the quad to be regrouped and transferred\\n    /// @param set for setting the new owner\\n    /// @param childQuadSize  size of the child quad to be checked for owner in the regrouping\\n    /// @dev if all the child quads are not owned by the \\\"from\\\" address then the owner of parent quad to the land\\n    /// @dev is checked if owned by the \\\"from\\\" address. If from is the owner then land owner is set to \\\"to\\\" address\\n    function _regroupQuad(\\n        address from,\\n        address to,\\n        Land memory land,\\n        bool set,\\n        uint256 childQuadSize\\n    ) internal returns (bool) {\\n        (uint256 layer, , uint256 childLayer) = _getQuadLayer(land.size);\\n        uint256 quadId = _getQuadId(layer, land.x, land.y);\\n        bool ownerOfAll = true;\\n\\n        // double for loop iterates and checks owner of all the smaller quads in land\\n        for (uint256 xi = land.x; xi < land.x + land.size; xi += childQuadSize) {\\n            for (uint256 yi = land.y; yi < land.y + land.size; yi += childQuadSize) {\\n                uint256 ownerChild = 0;\\n                bool ownAllIndividual = false;\\n                if (childQuadSize < 3) {\\n                    // case when the smaller quad is 1x1,\\n                    ownAllIndividual = _checkAndClearLandOwner(from, xi, yi) && ownerOfAll;\\n                } else {\\n                    // recursively calling the _regroupQuad function to check the owner of child quads.\\n                    ownAllIndividual = _regroupQuad(\\n                        from,\\n                        to,\\n                        Land({x: xi, y: yi, size: childQuadSize}),\\n                        false,\\n                        childQuadSize / 2\\n                    );\\n                    uint256 idChild = _getQuadId(childLayer, xi, yi);\\n                    ownerChild = _readOwnerData(idChild);\\n                    if (ownerChild != 0) {\\n                        // checking the owner of child quad\\n                        if (!ownAllIndividual && ownerChild != uint256(uint160(from))) {\\n                            revert NotOwner(xi, yi);\\n                        }\\n                        // clearing owner of child quad\\n                        _writeOwnerData(idChild, 0);\\n                    }\\n                }\\n                // ownerOfAll should be true if \\\"from\\\" is owner of all the child quads iterated over\\n                ownerOfAll = (ownAllIndividual || ownerChild != 0) && ownerOfAll;\\n            }\\n        }\\n\\n        // if set is true it check if the \\\"from\\\" is owner of all else checks for the owner of parent quad is\\n        // owned by \\\"from\\\" and sets the owner for the id of land to \\\"to\\\" address.\\n        if (set) {\\n            if (!ownerOfAll && _ownerOfQuad(land.size, land.x, land.y) != from) {\\n                revert ERC721InvalidOwner(from);\\n            }\\n            _writeOwnerData(quadId, uint160(to));\\n            return true;\\n        }\\n\\n        return ownerOfAll;\\n    }\\n\\n    /// @notice return the owner of a quad given his size and coordinates or zero if is not minted yet.\\n    /// @param size The size of the quad\\n    /// @param x The bottom left x coordinate of the quad\\n    /// @param y The bottom left y coordinate of the quad\\n    /// @return the address of the owner\\n    function _ownerOfQuad(uint256 size, uint256 x, uint256 y) internal view returns (address) {\\n        (uint256 layer, uint256 parentSize, ) = _getQuadLayer(size);\\n        address owner = _getOwnerAddress(_getQuadId(layer, (x / size) * size, (y / size) * size));\\n        if (owner != address(0)) {\\n            return owner;\\n        } else if (size < 24) {\\n            return _ownerOfQuad(parentSize, x, y);\\n        }\\n        return address(0);\\n    }\\n\\n    /// @notice Get the owner and operatorEnabled flag of a token.\\n    /// @param tokenId The token to query.\\n    /// @return owner The owner of the token.\\n    /// @return operatorEnabled Whether or not operators are enabled for this token.\\n    function _ownerAndOperatorEnabledOf(\\n        uint256 tokenId\\n    ) internal view override returns (address owner, bool operatorEnabled) {\\n        if (tokenId & LAYER != 0) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        uint256 x = tokenId % GRID_SIZE;\\n        uint256 y = tokenId / GRID_SIZE;\\n        uint256 owner1x1 = _readOwnerData(tokenId);\\n\\n        if ((owner1x1 & BURNED_FLAG) == BURNED_FLAG) {\\n            owner = address(0);\\n            operatorEnabled = (owner1x1 & OPERATOR_FLAG) == OPERATOR_FLAG;\\n            return (owner, operatorEnabled);\\n        }\\n\\n        if (owner1x1 != 0) {\\n            owner = address(uint160(owner1x1));\\n            operatorEnabled = (owner1x1 & OPERATOR_FLAG) == OPERATOR_FLAG;\\n        } else {\\n            owner = _ownerOfQuad(3, (x * 3) / 3, (y * 3) / 3);\\n            operatorEnabled = false;\\n        }\\n    }\\n\\n    /// @notice Enable or disable the ability of `minter` to mint tokens\\n    /// @param minter address that will be given/removed minter right.\\n    /// @param enabled set whether the minter is enabled or disabled.\\n    function _setMinter(address minter, bool enabled) internal {\\n        if (minter == address(0)) {\\n            revert InvalidAddress();\\n        }\\n        if (enabled == _isMinter(minter)) {\\n            revert InvalidArgument();\\n        }\\n        _writeMinter(minter, enabled);\\n        emit Minter(minter, enabled);\\n    }\\n\\n    /// @notice checks if an address is enabled as minter\\n    /// @param minter the address to check\\n    /// @return true if the address is a minter\\n    function _isMinter(address minter) internal view virtual returns (bool);\\n\\n    /// @notice set an address as minter\\n    /// @param minter the address to set\\n    /// @param enabled true enable the address, false disable it.\\n    function _writeMinter(address minter, bool enabled) internal virtual;\\n}\\n\",\"keccak256\":\"0xc354c0ca86d61c34a9e62ca840fcd6c02f45756b9338f2a16be7b494a6abd795\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/land/contracts/common/OperatorFiltererUpgradeable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.23;\\n\\nimport {IOperatorFilterRegistry} from \\\"../interfaces/IOperatorFilterRegistry.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n///@title OperatorFiltererUpgradeable\\n/// @author The Sandbox\\n/// @custom:security-contact contact-blockchain@sandbox.game\\n///@notice This contract would subscribe or copy or just to the subscription provided or just register to default subscription list\\n///@dev This contract is the upgradeable version of the OpenSea implementation https://github.com/ProjectOpenSea/operator-filter-registry/blob/main/src/OperatorFilterer.sol and adapted to the 0.5.9 solidity version\\nabstract contract OperatorFiltererUpgradeable is Context {\\n    /// @notice emitted when a registry is set\\n    /// @param registry address of the registry to set\\n    event OperatorRegistrySet(IOperatorFilterRegistry indexed registry);\\n\\n    /// @notice emitted when the contract is registered into the registry\\n    /// @param subscriptionOrRegistrant address to subscribe or copy entries from\\n    /// @param subscribe should it subscribe\\n    event ContractRegistered(address indexed subscriptionOrRegistrant, bool subscribe);\\n\\n    /// @notice the caller is not the operator\\n    error OperatorNotAllowed();\\n\\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\\n        _checkIsOperatorAllowed(address(this), operator);\\n        _;\\n    }\\n\\n    modifier onlyAllowedOperator(address from) virtual {\\n        IOperatorFilterRegistry registry = _readOperatorFilterRegistry();\\n        // Check registry code length to facilitate testing in environments without a deployed registry.\\n        // Allow spending tokens from addresses with balance\\n        // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\\n        // from an EOA.\\n        if (from != _msgSender()) {\\n            _checkIsOperatorAllowed(address(this), _msgSender());\\n        }\\n        _;\\n    }\\n\\n    /// @notice return the address of the operator filter registry\\n    /// @return the address of  the operator filter registry\\n    function operatorFilterRegistry() external view returns (IOperatorFilterRegistry) {\\n        return _readOperatorFilterRegistry();\\n    }\\n\\n    /// @notice Register this contract into the registry\\n    /// @param subscriptionOrRegistrantToCopy address to subscribe or copy entries from\\n    /// @param subscribe should it subscribe\\n    function _register(address subscriptionOrRegistrantToCopy, bool subscribe) internal {\\n        IOperatorFilterRegistry registry = _readOperatorFilterRegistry();\\n        if (address(registry).code.length > 0) {\\n            if (!registry.isRegistered(address(this))) {\\n                if (subscribe) {\\n                    registry.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\\n                } else {\\n                    if (subscriptionOrRegistrantToCopy != address(0)) {\\n                        registry.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\\n                    } else {\\n                        registry.register(address(this));\\n                    }\\n                }\\n            }\\n        }\\n        emit ContractRegistered(subscriptionOrRegistrantToCopy, subscribe);\\n    }\\n\\n    /// @notice sets filter registry address deployed in test\\n    /// @param registry the address of the registry\\n    function _setOperatorRegistry(IOperatorFilterRegistry registry) internal {\\n        _writeOperatorFilterRegistry(registry);\\n        emit OperatorRegistrySet(registry);\\n    }\\n\\n    /// @notice Check if the operator is allowed for the given registrant\\n    /// @param registrant address of the registrant\\n    /// @param operator operator address to check\\n    function _checkIsOperatorAllowed(address registrant, address operator) internal view {\\n        IOperatorFilterRegistry registry = _readOperatorFilterRegistry();\\n        // Check registry code length to facilitate testing in environments without a deployed registry.\\n        if (address(registry).code.length > 0) {\\n            /* solhint-disable no-empty-blocks */\\n            try registry.isOperatorAllowed(registrant, operator) returns (bool retval) {\\n                if (retval) {\\n                    return;\\n                }\\n            } catch (bytes memory) {}\\n            /* solhint-enable  no-empty-blocks */\\n            revert OperatorNotAllowed();\\n        }\\n    }\\n\\n    /// @notice get the OpenSea operator filter\\n    /// @return the address of the OpenSea operator filter registry\\n    function _readOperatorFilterRegistry() internal view virtual returns (IOperatorFilterRegistry);\\n\\n    /// @notice set the OpenSea operator filter\\n    /// @param registry the address of the OpenSea operator filter registry\\n    function _writeOperatorFilterRegistry(IOperatorFilterRegistry registry) internal virtual;\\n}\\n\",\"keccak256\":\"0x6a00238fc5251807f92c4b4cdb277c517b6bb5c677c26f05ceddc68fde630a8f\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/land/contracts/common/WithAdmin.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport {IErrors} from \\\"../interfaces/IErrors.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title WithAdmin\\n/// @author The Sandbox\\n/// @custom:security-contact contact-blockchain@sandbox.game\\n/// @notice Add an admin to the contract\\nabstract contract WithAdmin is IErrors, Context {\\n    /// @notice Emits when the contract administrator is changed.\\n    /// @param oldAdmin The address of the previous administrator.\\n    /// @param newAdmin The address of the new administrator.\\n    event AdminChanged(address indexed oldAdmin, address indexed newAdmin);\\n\\n    /// @notice checks if the sender is admin\\n    modifier onlyAdmin() {\\n        if (_msgSender() != _readAdmin()) {\\n            revert OnlyAdmin();\\n        }\\n        _;\\n    }\\n\\n    /// @notice Get the current admin\\n    /// @dev Get the current administrator of this contract.\\n    /// @return The current administrator of this contract.\\n    function getAdmin() external view returns (address) {\\n        return _readAdmin();\\n    }\\n\\n    /// @notice Change the admin of the contract\\n    /// @dev Change the administrator to be `newAdmin`.\\n    /// @param newAdmin The address of the new administrator.\\n    function _changeAdmin(address newAdmin) internal {\\n        address oldAdmin = _readAdmin();\\n        if (oldAdmin == address(0)) {\\n            revert InvalidAddress();\\n        }\\n        if (oldAdmin == newAdmin) {\\n            revert InvalidArgument();\\n        }\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /// @notice Change the admin of the contract\\n    /// @dev Change the administrator to be `newAdmin`.\\n    /// @param newAdmin The address of the new administrator.\\n    function _setAdmin(address newAdmin) internal {\\n        if (newAdmin == address(0)) {\\n            revert InvalidAddress();\\n        }\\n        address oldAdmin = _readAdmin();\\n        emit AdminChanged(oldAdmin, newAdmin);\\n        _writeAdmin(newAdmin);\\n    }\\n\\n    /// @notice get the admin address\\n    /// @return the admin address\\n    ///@dev Implement\\n    function _readAdmin() internal view virtual returns (address);\\n\\n    /// @notice set the admin address\\n    /// @param admin the admin address\\n    ///@dev Implement\\n    function _writeAdmin(address admin) internal virtual;\\n}\\n\",\"keccak256\":\"0x85d6e8308a9579db3ac406bdcb7226240a764f710344ed6c08314c36302f87da\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/land/contracts/common/WithMetadataRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.23;\\n\\nimport {IErrors} from \\\"../interfaces/IErrors.sol\\\";\\nimport {ILandMetadataRegistry} from \\\"../interfaces/ILandMetadataRegistry.sol\\\";\\n\\n/// @title WithMetadataRegistry\\n/// @author The Sandbox\\n/// @custom:security-contact contact-blockchain@sandbox.game\\n/// @notice Add support for the metadata registry\\nabstract contract WithMetadataRegistry is IErrors {\\n    /// @notice value returned when the neighborhood is not set yet.\\n    string public constant UNKNOWN_NEIGHBORHOOD = \\\"unknown\\\";\\n\\n    /// @notice emitted when the metadata registry is set\\n    /// @param metadataRegistry the address of the metadata registry\\n    event MetadataRegistrySet(address indexed metadataRegistry);\\n\\n    struct MetadataRegistryStorage {\\n        ILandMetadataRegistry _metadataRegistry;\\n    }\\n\\n    /// @custom:storage-location erc7201:thesandbox.storage.land.common.WithMetadataRegistry\\n    bytes32 internal constant METADATA_REGISTRY_STORAGE_LOCATION =\\n        0x3899f13de39885dfce849839be8330453b5866928dd0e5933e36794349628400;\\n\\n    function _getMetadataRegistryStorage() private pure returns (MetadataRegistryStorage storage $) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            $.slot := METADATA_REGISTRY_STORAGE_LOCATION\\n        }\\n    }\\n\\n    /// @notice Get the address of the Metadata Registry\\n    /// @return The address of the Metadata Registry\\n    function getMetadataRegistry() external view returns (ILandMetadataRegistry) {\\n        MetadataRegistryStorage storage $ = _getMetadataRegistryStorage();\\n        return $._metadataRegistry;\\n    }\\n\\n    /// @notice return the metadata for one land\\n    /// @param tokenId the token id\\n    /// @return premium true if the land is premium\\n    /// @return neighborhoodId the number that identifies the neighborhood\\n    /// @return neighborhoodName the neighborhood name\\n    function getMetadata(uint256 tokenId) external view returns (bool, uint256, string memory) {\\n        ILandMetadataRegistry registry = _getMetadataRegistryStorage()._metadataRegistry;\\n        if (registry == ILandMetadataRegistry(address(0))) {\\n            return (false, 0, UNKNOWN_NEIGHBORHOOD);\\n        }\\n        return registry.getMetadata(tokenId);\\n    }\\n\\n    /// @notice return true if a land is premium\\n    /// @param tokenId the token id\\n    function isPremium(uint256 tokenId) external view returns (bool) {\\n        ILandMetadataRegistry registry = _getMetadataRegistryStorage()._metadataRegistry;\\n        if (registry == ILandMetadataRegistry(address(0))) {\\n            return false;\\n        }\\n        return registry.isPremium(tokenId);\\n    }\\n\\n    /// @notice return the id that identifies the neighborhood\\n    /// @param tokenId the token id\\n    function getNeighborhoodId(uint256 tokenId) external view returns (uint256) {\\n        ILandMetadataRegistry registry = _getMetadataRegistryStorage()._metadataRegistry;\\n        if (registry == ILandMetadataRegistry(address(0))) {\\n            return 0;\\n        }\\n        return registry.getNeighborhoodId(tokenId);\\n    }\\n\\n    /// @notice set the address of the metadata registry\\n    /// @param metadataRegistry the address of the metadata registry\\n    function _setMetadataRegistry(address metadataRegistry) internal {\\n        if (metadataRegistry == address(0)) {\\n            revert InvalidAddress();\\n        }\\n        MetadataRegistryStorage storage $ = _getMetadataRegistryStorage();\\n        $._metadataRegistry = ILandMetadataRegistry(metadataRegistry);\\n        emit MetadataRegistrySet(metadataRegistry);\\n    }\\n}\\n\",\"keccak256\":\"0x44f2241012d6ae084c00ee6d5530ea4d9e2249917c0f81a60246997cc5c8f923\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/land/contracts/common/WithOwner.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.23;\\n\\n/// @title Owner support (EIP173)\\n/// @author The Sandbox\\n/// @custom:security-contact contact-blockchain@sandbox.game\\n/// @notice Add an owner for the stores that need it\\ncontract WithOwner {\\n    /// @notice emitted when the ownership of the contract is changed\\n    /// @param previousOwner The old address of the owner.\\n    /// @param newOwner The new address of the owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    struct OwnerStorage {\\n        address _owner;\\n    }\\n\\n    /// @custom:storage-location erc7201:thesandbox.storage.land.common.WithOwner\\n    bytes32 internal constant OWNER_STORAGE_LOCATION =\\n        0x1836e2fa424a35b79c13fd66f8e282cb3a31513f9610d6e7a99baf7ffe56ec00;\\n\\n    function _getOwnerStorage() private pure returns (OwnerStorage storage $) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            $.slot := OWNER_STORAGE_LOCATION\\n        }\\n    }\\n\\n    /// @notice Get the address of the owner\\n    /// @return The address of the owner.\\n    function owner() external view returns (address) {\\n        OwnerStorage storage $ = _getOwnerStorage();\\n        return $._owner;\\n    }\\n\\n    /// @notice change the ownership of the contract\\n    /// @param newOwner The new address of the owner.\\n    function _transferOwnership(address newOwner) internal {\\n        OwnerStorage storage $ = _getOwnerStorage();\\n        emit OwnershipTransferred($._owner, newOwner);\\n        $._owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0xb340d4e98bd4a0e921d3503a52d7944ed9f211248f47530cb0e8a599bcd59530\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/land/contracts/common/WithRoyalties.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.23;\\n\\nimport {IRoyaltyManager} from \\\"@sandbox-smart-contracts/dependency-royalty-management/contracts/interfaces/IRoyaltyManager.sol\\\";\\n\\n/// @title WithRoyalties\\n/// @author The Sandbox\\n/// @custom:security-contact contact-blockchain@sandbox.game\\n/// @notice Add royalty support to land contracts (EIP2981 implemented with our royalty manager)\\ncontract WithRoyalties {\\n    /// @notice emitted when the royalty manager is set\\n    /// @param royaltyManager the address of royalty manager contract.\\n    event RoyaltyManagerSet(address indexed royaltyManager);\\n\\n    uint16 internal constant TOTAL_BASIS_POINTS = 10000;\\n\\n    struct RoyaltiesStorage {\\n        IRoyaltyManager _royaltyManager;\\n    }\\n\\n    /// @custom:storage-location erc7201:thesandbox.storage.land.common.WithRoyalties\\n    bytes32 internal constant ROYALTIES_STORAGE_LOCATION =\\n        0xf7bae505580fc5d233bb20f4fb93f39f43d44ecc81ed63dd6455097b4c455000;\\n\\n    function _getRoyaltiesStorage() private pure returns (RoyaltiesStorage storage $) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            $.slot := ROYALTIES_STORAGE_LOCATION\\n        }\\n    }\\n\\n    /// @notice Returns how much royalty is owed and to whom based on ERC2981\\n    /// @dev tokenId is one of the EIP2981 args for this function can't be removed\\n    /// @param salePrice the price of token on which the royalty is calculated\\n    /// @return receiver the receiver of royalty\\n    /// @return royaltyAmount the amount of royalty\\n    function royaltyInfo(\\n        uint256 /*_tokenId */,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount) {\\n        RoyaltiesStorage storage $ = _getRoyaltiesStorage();\\n        uint16 royaltyBps;\\n        (receiver, royaltyBps) = $._royaltyManager.getRoyaltyInfo();\\n        royaltyAmount = (salePrice * royaltyBps) / TOTAL_BASIS_POINTS;\\n        return (receiver, royaltyAmount);\\n    }\\n\\n    /// @notice returns the royalty manager\\n    /// @return the address of royalty manager contract.\\n    function getRoyaltyManager() external view returns (IRoyaltyManager) {\\n        RoyaltiesStorage storage $ = _getRoyaltiesStorage();\\n        return $._royaltyManager;\\n    }\\n\\n    /// @notice set the address of the royalty manager\\n    /// @param royaltyManager the address of royalty manager contract.\\n    function _setRoyaltyManager(address royaltyManager) internal {\\n        RoyaltiesStorage storage $ = _getRoyaltiesStorage();\\n        $._royaltyManager = IRoyaltyManager(royaltyManager);\\n        emit RoyaltyManagerSet(royaltyManager);\\n    }\\n}\\n\",\"keccak256\":\"0x7fcb81c2705c59823b0c9d3e40d7c01495b0faa54f5d20c379b396b85bd4b17c\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/land/contracts/common/WithSuperOperators.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport {IErrors} from \\\"../interfaces/IErrors.sol\\\";\\n\\n/// @title WithSuperOperators\\n/// @author The Sandbox\\n/// @custom:security-contact contact-blockchain@sandbox.game\\n/// @notice Add super operators handled by an admin\\nabstract contract WithSuperOperators is IErrors {\\n    /// @param superOperator address that will be given/removed superOperator right.\\n    /// @param enabled set whether the superOperator is enabled or disabled.\\n    event SuperOperator(address indexed superOperator, bool indexed enabled);\\n\\n    /// @notice check if an address is a super-operator\\n    /// @param superOperator the operator address to check\\n    /// @return true if an address is a super-operator\\n    function isSuperOperator(address superOperator) external view returns (bool) {\\n        return _isSuperOperator(superOperator);\\n    }\\n\\n    /// @notice Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights).\\n    /// @param superOperator address that will be given/removed superOperator right.\\n    /// @param enabled set whether the superOperator is enabled or disabled.\\n    function _setSuperOperator(address superOperator, bool enabled) internal {\\n        if (superOperator == address(0)) {\\n            revert InvalidAddress();\\n        }\\n        if (enabled == _isSuperOperator(superOperator)) {\\n            revert InvalidArgument();\\n        }\\n        _writeSuperOperator(superOperator, enabled);\\n        emit SuperOperator(superOperator, enabled);\\n    }\\n\\n    /// @notice check if an address is a super-operator\\n    /// @param superOperator the operator address to check\\n    /// @return true if an address is a super-operator\\n    /// @dev Implement\\n    function _isSuperOperator(address superOperator) internal view virtual returns (bool);\\n\\n    /// @notice enable an address to be super-operator\\n    /// @param superOperator the address to set\\n    /// @param enabled true enable the address, false disable it.\\n    /// @dev Implement\\n    function _writeSuperOperator(address superOperator, bool enabled) internal virtual;\\n}\\n\",\"keccak256\":\"0x6c580d5fd2626a52f9f4bc9b3e9b98aead3f1da664a22212d2faaef343f735cc\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/land/contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-173.md\\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @dev This emits when ownership of a contract changes.\\n    event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner);\\n\\n    /// @notice Get the address of the owner\\n    /// @return The address of the owner.\\n    function owner() external view returns (address);\\n\\n    /// @notice Set the address of the new owner of the contract\\n    /// @param _newOwner The address of the new owner of the contract\\n    function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0x814b610eda973e02bf7411188e3218d427f6d885dc799d9292b1889d5b6ada9b\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/land/contracts/interfaces/IERC721BatchOps.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title IERC721BatchOps\\n/// @author The Sandbox\\n/// @custom:security-contact contact-blockchain@sandbox.game\\n/// @notice ERC721 Batch operations\\ninterface IERC721BatchOps {\\n    /// @notice Transfer many tokens between 2 addresses.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param ids The ids of the tokens.\\n    /// @param data Additional data.\\n    function batchTransferFrom(address from, address to, uint256[] calldata ids, bytes calldata data) external;\\n\\n    /// @notice Transfer many tokens between 2 addresses, while\\n    /// ensuring the receiving contract has a receiver method.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param ids The ids of the tokens.\\n    /// @param data Additional data.\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xd182981c8acbc97f124ecfe3f0831935fcb7b3a8eadd24d7690b34194581c089\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/land/contracts/interfaces/IERC721MandatoryTokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title ERC721MandatoryTokenReceiver\\n/// @author The Sandbox\\n/// @custom:security-contact contact-blockchain@sandbox.game\\n/// @notice Interface for any contract that wants to support safeBatchTransfers\\n/// @notice from ERC721 asset contracts.\\n/// @dev The ERC-165 identifier for this interface is 0x5e8bf644.\\ninterface IERC721MandatoryTokenReceiver {\\n    /// @notice Whenever tokens are transferred to this contract via {IERC721-safeBatchTransferFrom}\\n    /// @notice by `operator` from `from`, this function is called.\\n    /// @param operator sender\\n    /// @param from owner of the tokens\\n    /// @param ids token ids\\n    /// @param data extra data\\n    /// @return 0x4b808c46 if the transfer is a success\\n    function onERC721BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external returns (bytes4); // needs to return 0x4b808c46\\n\\n    /// @notice Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n    /// @notice by `operator` from `from`, this function is called.\\n    /// @param operator sender\\n    /// @param from owner of the token\\n    /// @param tokenId token id\\n    /// @param data extra data\\n    /// @return 0x150b7a02 if the transfer is a success\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4); // needs to return 0x150b7a02\\n}\\n\",\"keccak256\":\"0x3d48930020c38b87a572edf99cb8a93b9dca9d58642a78a160c05fdb9cf5d886\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/land/contracts/interfaces/IErrors.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.23;\\n\\n/// @title Errors\\n/// @author The Sandbox\\n/// @custom:security-contact contact-blockchain@sandbox.game\\n/// @notice Common errors\\ninterface IErrors {\\n    /// @notice an address passed as argument is invalid\\n    error InvalidAddress();\\n\\n    /// @notice an argument passed is invalid\\n    error InvalidArgument();\\n\\n    /// @notice an array argument has an invalid length\\n    error InvalidLength();\\n\\n    /// @notice only admin can call this function\\n    error OnlyAdmin();\\n}\\n\",\"keccak256\":\"0x303ca7609d4c5448ea00d7d1dda50d6638f251ae1f62c18215dcc139305e7cc4\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/land/contracts/interfaces/ILandMetadataRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title ILandMetadataRegistry\\n/// @author The Sandbox\\n/// @custom:security-contact contact-blockchain@sandbox.game\\n/// @notice Interface implemented by the LandMetadataRegistry\\ninterface ILandMetadataRegistry {\\n    /// @notice return the metadata for one land\\n    /// @param tokenId the token id\\n    /// @return premium true if the land is premium\\n    /// @return neighborhoodId the number that identifies the neighborhood\\n    /// @return neighborhoodName the neighborhood name\\n    function getMetadata(\\n        uint256 tokenId\\n    ) external view returns (bool premium, uint256 neighborhoodId, string memory neighborhoodName);\\n\\n    /// @notice return true if a land is premium\\n    /// @param tokenId the token id\\n    /// @return true if the land is premium\\n    function isPremium(uint256 tokenId) external view returns (bool);\\n\\n    /// @notice return the id that identifies the neighborhood\\n    /// @param tokenId the token id\\n    /// @return the neighborhoodId number\\n    function getNeighborhoodId(uint256 tokenId) external view returns (uint256);\\n\\n    /// @notice return the neighborhood name\\n    /// @param tokenId the token id\\n    /// @return the neighborhood name\\n    function getNeighborhoodName(uint256 tokenId) external view returns (string memory);\\n\\n    /// @notice return the neighborhood name using neighborhood id as the key\\n    /// @param neighborhoodId the number that identifies the neighborhood\\n    /// @return the neighborhood name\\n    function getNeighborhoodNameForId(uint256 neighborhoodId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x693b08c212d0ab9d853f588c1c83cbe82bd662b5f0906e25cf3e2a039093b1fa\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/land/contracts/interfaces/ILandToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title ILandToken\\n/// @author The Sandbox\\n/// @custom:security-contact contact-blockchain@sandbox.game\\n/// @notice Interface of the LAND token including quad methods\\ninterface ILandToken {\\n    /// @notice transfer multiple quad (aligned to a quad tree with size 3, 6, 12 or 24 only)\\n    /// @param from current owner of the quad\\n    /// @param to destination\\n    /// @param sizes list of sizes for each quad\\n    /// @param xs list of bottom left x coordinates for each quad\\n    /// @param ys list of bottom left y coordinates for each quad\\n    /// @param data additional data\\n    function batchTransferQuad(\\n        address from,\\n        address to,\\n        uint256[] calldata sizes,\\n        uint256[] calldata xs,\\n        uint256[] calldata ys,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice transfer one quad (aligned to a quad tree with size 3, 6, 12 or 24 only)\\n    /// @param from current owner of the quad\\n    /// @param to destination\\n    /// @param size size of the quad\\n    /// @param x The bottom left x coordinate of the quad\\n    /// @param y The bottom left y coordinate of the quad\\n    /// @param data additional data\\n    function transferQuad(address from, address to, uint256 size, uint256 x, uint256 y, bytes calldata data) external;\\n\\n    /// @notice Mint a new quad (aligned to a quad tree with size 1, 3, 6, 12 or 24 only)\\n    /// @param to The recipient of the new quad\\n    /// @param size The size of the new quad\\n    /// @param x The bottom left x coordinate of the new quad\\n    /// @param y The bottom left y coordinate of the new quad\\n    /// @param data extra data to pass to the transfer\\n    function mintQuad(address to, uint256 size, uint256 x, uint256 y, bytes memory data) external;\\n\\n    /// @notice Checks if a LAND exists by its coordinates\\n    /// @param size size of the quad\\n    /// @param x x coordinate\\n    /// @param y y coordinate\\n    /// @return does the LAND exist\\n    function exists(uint256 size, uint256 x, uint256 y) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd92835835e1ec2a9c11978fdc68e8afd9e41f38cb6aa7f78bca4e03af89d04fc\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/land/contracts/interfaces/IOperatorFilterRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title IOperatorFilterRegistry\\n/// @author The Sandbox\\n/// @custom:security-contact contact-blockchain@sandbox.game\\n/// @notice Interface of the operator filter registry\\n/// @dev This interface comes from OpenSea https://github.com/ProjectOpenSea/operator-filter-registry/blob/main/src/IOperatorFilterRegistry.sol and adapted to the 0.8.23 solidity version\\ninterface IOperatorFilterRegistry {\\n    /// @notice Check if the operator is allowed for the given registrant\\n    /// @param registrant address of the registrant\\n    /// @param operator operator address to check\\n    /// @return is the operator allowed\\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\\n\\n    /// @notice Register a new address\\n    /// @param registrant address to register\\n    function register(address registrant) external;\\n\\n    /// @notice Register a new address & subscribe to an address\\n    /// @param registrant address of the registrant\\n    /// @param subscription address where the registrant is subscribed to\\n    function registerAndSubscribe(address registrant, address subscription) external;\\n\\n    /// @notice Register and copy entries of another registrant\\n    /// @param registrant address of the registrant\\n    /// @param registrantToCopy address to copy from\\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\\n\\n    /// @notice update the operator for a registrant\\n    /// @param registrant address of the registrant\\n    /// @param operator operator to be updated\\n    /// @param filtered is it filtered\\n    function updateOperator(address registrant, address operator, bool filtered) external;\\n\\n    /// @notice Update operators for a registrant\\n    /// @param registrant address of the registrant\\n    /// @param operators addresses of the operators\\n    /// @param filtered is it filtered\\n    function updateOperators(address registrant, address[] calldata operators, bool filtered) external;\\n\\n    /// @notice Update code hash\\n    /// @param registrant address of the registrant\\n    /// @param codehash code hash\\n    /// @param filtered is it filtered\\n    function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;\\n\\n    /// @notice Update code hashes\\n    /// @param registrant address of the registrant\\n    /// @param codeHashes code hashes\\n    /// @param filtered is it filtered\\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external;\\n\\n    /// @notice Subscribe a registrant\\n    /// @param registrant address of the registrant\\n    /// @param registrantToSubscribe address to subscribe with\\n    function subscribe(address registrant, address registrantToSubscribe) external;\\n\\n    /// @notice Unsubscribe a registrant\\n    /// @param registrant address of the registrant\\n    /// @param copyExistingEntries copy existing entries\\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\\n\\n    /// @notice Get the subscription of an address\\n    /// @param addr address to check\\n    /// @return registrant the registrant address\\n    function subscriptionOf(address addr) external returns (address registrant);\\n\\n    /// @notice Get the subscribers of the registrant\\n    /// @param registrant address of the registrant\\n    /// @return the subscribers addresses\\n    function subscribers(address registrant) external returns (address[] memory);\\n\\n    /// @notice Get a specific subscriber\\n    /// @param registrant address of the registrant\\n    /// @param index index to check\\n    /// @return the ith subscriber of the registrant\\n    function subscriberAt(address registrant, uint256 index) external returns (address);\\n\\n    /// @notice Copy the entries of a registrant\\n    /// @param registrant address of the registrant\\n    /// @param registrantToCopy address to copy\\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\\n\\n    /// @notice Is a registrant filtered\\n    /// @param registrant address of the registrant\\n    /// @param operator operator address to check\\n    /// @return is it filtered\\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\\n\\n    /// @notice Is the code hash of an operator filtered\\n    /// @param registrant address of the registrant\\n    /// @param operatorWithCode operator address to check\\n    /// @return is it filtered\\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\\n\\n    /// @notice Is the code hash filtered\\n    /// @param registrant address of the registrant\\n    /// @param codeHash code hash\\n    /// @return is it filtered\\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\\n\\n    /// @notice Get the filtered operators\\n    /// @param addr address to check\\n    /// @return filtered operators\\n    function filteredOperators(address addr) external returns (address[] memory);\\n\\n    /// @notice Get the filtered code hashes\\n    /// @param addr address to check\\n    /// @return filtered code hashes\\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\\n\\n    /// @notice Get a specific operator\\n    /// @param registrant address of the registrant\\n    /// @param index index to check\\n    /// @return address of the operator\\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\\n\\n    /// @notice Get the ith filtered code hash\\n    /// @param registrant address of the registrant\\n    /// @param index index to check\\n    /// @return the code hash\\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\\n\\n    /// @notice Is the address registered\\n    /// @param addr address to check\\n    /// @return is it registered\\n    function isRegistered(address addr) external returns (bool);\\n\\n    /// @notice Get the code hash for this address\\n    /// @param addr address to check\\n    /// @return the code hash\\n    function codeHashOf(address addr) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6098ec161546d624787aa5fdc6e6aea57fb62e0667e822970df26b92d9cf54fa\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/land/contracts/polygon/ERC2771Handler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\n/// @title ERC2771Handler\\n/// @author The Sandbox\\n/// @custom:security-contact contact-blockchain@sandbox.game\\n/// @notice Handle meta-transactions\\n/// @dev minimal ERC2771 handler to keep bytecode-size down\\n/// @dev based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.6.0/contracts/metatx/ERC2771Context.sol\\n/// @dev with an initializer for proxies and a mutable forwarder\\nabstract contract ERC2771Handler {\\n    /// @notice emitted when a new trusted forwarder is set\\n    /// @param newForwarder the new trusted forwarder\\n    event TrustedForwarderSet(address indexed newForwarder);\\n\\n    /// @notice Checks if an address is a trusted forwarder\\n    /// @param forwarder address to check\\n    /// @return is trusted\\n    function isTrustedForwarder(address forwarder) external view returns (bool) {\\n        return _isTrustedForwarder(forwarder);\\n    }\\n\\n    /// @notice Change the address of the trusted forwarder for meta-TX\\n    /// @param trustedForwarder The new trustedForwarder\\n    function _setTrustedForwarder(address trustedForwarder) internal {\\n        _writeTrustedForwarder(trustedForwarder);\\n        emit TrustedForwarderSet(trustedForwarder);\\n    }\\n\\n    /// @notice Get the current trusted forwarder\\n    /// @return trustedForwarder address of the trusted forwarder\\n    function getTrustedForwarder() external view returns (address) {\\n        return _readTrustedForwarder();\\n    }\\n\\n    /// @dev if the call comes from the trusted forwarder, it gets the real sender by checking the encoded address in the data\\n    /// @return sender address of the real sender\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (_isTrustedForwarder(msg.sender) && msg.data.length >= 20) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            sender = msg.sender;\\n        }\\n    }\\n\\n    /// @notice Checks if an address is a trusted forwarder\\n    /// @param trustedForwarder address to check\\n    /// @return is trusted\\n    function _isTrustedForwarder(address trustedForwarder) internal view returns (bool) {\\n        return trustedForwarder == _readTrustedForwarder();\\n    }\\n\\n    /// @notice get the address of the ERC2771 trusted forwarder\\n    /// @return the address of the trusted forwarder\\n    function _readTrustedForwarder() internal view virtual returns (address);\\n\\n    /// @notice set the address of the ERC2771 trusted forwarder\\n    /// @param trustedForwarder the address of the trusted forwarder\\n    function _writeTrustedForwarder(address trustedForwarder) internal virtual;\\n}\\n\",\"keccak256\":\"0x0868810541b80cea8852ae704ae977f32532168c9d55ce2c0533ed77cd841e17\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/land/contracts/polygon/PolygonLandStorageMixin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport {IOperatorFilterRegistry} from \\\"../interfaces/IOperatorFilterRegistry.sol\\\";\\n\\n/// @title PolygonLandStorageMixin\\n/// @author The Sandbox\\n/// @custom:security-contact contact-blockchain@sandbox.game\\n/// @notice Storage structure of the Polygon implementation of Land contract\\n/// @dev According to hardhat-storage plugin run onto the latest deployed version (@core)\\n/// @dev |          contract           \\u2502      state_variable       \\u2502 storage_slot \\u2502 offset \\u2502                       type                       \\u2502 idx \\u2502                     artifact                      \\u2502 numberOfBytes \\u2502\\n/// @dev |         PolygonLand         \\u2502       _initialized        \\u2502      0       \\u2502   0    \\u2502                     t_uint8                      \\u2502  0  \\u2502 /build-info/3abb06944792151ded64cbcd19543bb1.json \\u2502       1       \\u2502\\n/// @dev |         PolygonLand         \\u2502       _initializing       \\u2502      0       \\u2502   1    \\u2502                      t_bool                      \\u2502  0  \\u2502 /build-info/3abb06944792151ded64cbcd19543bb1.json \\u2502       1       \\u2502\\n/// @dev |         PolygonLand         \\u2502           __gap           \\u2502      1       \\u2502   0    \\u2502           t_array(t_uint256)50_storage           \\u2502  0  \\u2502 /build-info/3abb06944792151ded64cbcd19543bb1.json \\u2502     1600      \\u2502\\n/// @dev |         PolygonLand         \\u2502          _admin           \\u2502      51      \\u2502   0    \\u2502                    t_address                     \\u2502  0  \\u2502 /build-info/3abb06944792151ded64cbcd19543bb1.json \\u2502      20       \\u2502\\n/// @dev |         PolygonLand         \\u2502      _superOperators      \\u2502      52      \\u2502   0    \\u2502           t_mapping(t_address,t_bool)            \\u2502  0  \\u2502 /build-info/3abb06944792151ded64cbcd19543bb1.json \\u2502      32       \\u2502\\n/// @dev |         PolygonLand         \\u2502     _numNFTPerAddress     \\u2502      53      \\u2502   0    \\u2502          t_mapping(t_address,t_uint256)          \\u2502  0  \\u2502 /build-info/3abb06944792151ded64cbcd19543bb1.json \\u2502      32       \\u2502\\n/// @dev |         PolygonLand         \\u2502          _owners          \\u2502      54      \\u2502   0    \\u2502          t_mapping(t_uint256,t_uint256)          \\u2502  0  \\u2502 /build-info/3abb06944792151ded64cbcd19543bb1.json \\u2502      32       \\u2502\\n/// @dev |         PolygonLand         \\u2502     _operatorsForAll      \\u2502      55      \\u2502   0    \\u2502 t_mapping(t_address,t_mapping(t_address,t_bool)) \\u2502  0  \\u2502 /build-info/3abb06944792151ded64cbcd19543bb1.json \\u2502      32       \\u2502\\n/// @dev |         PolygonLand         \\u2502        _operators         \\u2502      56      \\u2502   0    \\u2502          t_mapping(t_uint256,t_address)          \\u2502  0  \\u2502 /build-info/3abb06944792151ded64cbcd19543bb1.json \\u2502      32       \\u2502\\n/// @dev |         PolygonLand         \\u2502         _minters          \\u2502      57      \\u2502   0    \\u2502           t_mapping(t_address,t_bool)            \\u2502  0  \\u2502 /build-info/3abb06944792151ded64cbcd19543bb1.json \\u2502      32       \\u2502\\n/// @dev |         PolygonLand         \\u2502           __gap           \\u2502      58      \\u2502   0    \\u2502           t_array(t_uint256)49_storage           \\u2502  0  \\u2502 /build-info/3abb06944792151ded64cbcd19543bb1.json \\u2502     1568      \\u2502\\n/// @dev |         PolygonLand         \\u2502     _trustedForwarder     \\u2502     107      \\u2502   0    \\u2502                    t_address                     \\u2502  0  \\u2502 /build-info/3abb06944792151ded64cbcd19543bb1.json \\u2502      20       \\u2502\\n/// @dev |         PolygonLand         \\u2502  operatorFilterRegistry   \\u2502     108      \\u2502   0    \\u2502     t_contract(IOperatorFilterRegistry)3942      \\u2502  0  \\u2502 /build-info/3abb06944792151ded64cbcd19543bb1.json \\u2502      20       \\u2502\\ncontract PolygonLandStorageMixin {\\n    /// @dev Obsolete: This is the storage used by the OZ v4 Initializer, they are unused now.\\n    uint8 private _initialized; // unused\\n    bool private _initializing; // unused\\n    uint256[50] private ___gap; // unused\\n\\n    /// @dev The admin of the contract\\n    address internal _admin;\\n\\n    /// @dev super operators that can transfer tokens on behalf of all the users\\n    mapping(address superOperator => bool enabled) internal _superOperators;\\n\\n    /// @dev Number of NFT an address own\\n    mapping(address owner => uint256 numNFT) internal _numNFTPerAddress;\\n\\n    /// @dev mapping to store owner of lands and quads.\\n    /// @dev For 1x1 lands the 255 bit is a flag that land has operator approved.\\n    /// @dev For 1x1 lands the 160 bit is a flag that indicates if the token is burned.\\n    mapping(uint256 owner => uint256 ownerData) internal _owners;\\n\\n    /// @dev Operators by owner address for all tokens\\n    mapping(address owner => mapping(address operator => bool enabled)) internal _operatorsForAll;\\n\\n    /// @dev Operator by token id, the operator flag must be also true (see: _owners)\\n    mapping(uint256 tokenId => address operator) internal _operators;\\n\\n    /// @dev Addresses authorized to mint tokens\\n    mapping(address minter => bool enabled) internal _minters;\\n\\n    uint256[49] private __gap;\\n\\n    /// @dev meta transaction ERC2771 trusted forwarder\\n    address internal _trustedForwarder;\\n\\n    /// @dev OpenSea operator filter registry address\\n    IOperatorFilterRegistry internal _operatorFilterRegistry;\\n\\n    /// @notice get the admin address\\n    /// @return the admin address\\n    function _readAdmin() internal view virtual returns (address) {\\n        return _admin;\\n    }\\n\\n    /// @notice set the admin address\\n    /// @param admin the admin address\\n    function _writeAdmin(address admin) internal virtual {\\n        _admin = admin;\\n    }\\n\\n    /// @notice check if an address is a super-operator\\n    /// @param superOperator the operator address to check\\n    /// @return true if an address is a super-operator\\n    function _isSuperOperator(address superOperator) internal view virtual returns (bool) {\\n        return _superOperators[superOperator];\\n    }\\n\\n    /// @notice enable an address to be super-operator\\n    /// @param superOperator the address to set\\n    /// @param enabled true enable the address, false disable it.\\n    function _writeSuperOperator(address superOperator, bool enabled) internal virtual {\\n        _superOperators[superOperator] = enabled;\\n    }\\n\\n    /// @notice get the number of nft for an address\\n    /// @param owner address to check\\n    /// @return the number of nfts\\n    function _readNumNFTPerAddress(address owner) internal view virtual returns (uint256) {\\n        return _numNFTPerAddress[owner];\\n    }\\n\\n    /// @notice set the number of nft for an address\\n    /// @param owner address to set\\n    /// @param quantity the number of nfts to set for the owner\\n    function _writeNumNFTPerAddress(address owner, uint256 quantity) internal virtual {\\n        _numNFTPerAddress[owner] = quantity;\\n    }\\n\\n    /// @notice get the owner data, this includes: owner address, burn flag and operator flag (see: _owners declaration)\\n    /// @param tokenId the token Id\\n    /// @return the owner data\\n    function _readOwnerData(uint256 tokenId) internal view virtual returns (uint256) {\\n        return _owners[tokenId];\\n    }\\n\\n    /// @notice set the owner data, this includes: owner address, burn flag and operator flag (see: _owners declaration)\\n    /// @param tokenId the token Id\\n    /// @param data the owner data\\n    function _writeOwnerData(uint256 tokenId, uint256 data) internal virtual {\\n        _owners[tokenId] = data;\\n    }\\n\\n    /// @notice check if an operator was enabled by a given owner\\n    /// @param owner that enabled the operator\\n    /// @param operator address to check if it was enabled\\n    /// @return true if the operator has access\\n    function _isOperatorForAll(address owner, address operator) internal view virtual returns (bool) {\\n        return _operatorsForAll[owner][operator];\\n    }\\n\\n    /// @notice Let an operator to access to all the tokens of a owner\\n    /// @param owner that enabled the operator\\n    /// @param operator address to check if it was enabled\\n    /// @param enabled if true give access to the operator, else disable it\\n    function _writeOperatorForAll(address owner, address operator, bool enabled) internal virtual {\\n        _operatorsForAll[owner][operator] = enabled;\\n    }\\n\\n    /// @notice get the operator for a specific token, the operator can transfer on the owner behalf\\n    /// @param tokenId The id of the token.\\n    /// @return the operator address\\n    function _readOperator(uint256 tokenId) internal view virtual returns (address) {\\n        return _operators[tokenId];\\n    }\\n\\n    /// @notice set the operator for a specific token, the operator can transfer on the owner behalf\\n    /// @param tokenId the id of the token.\\n    /// @param operator the operator address\\n    function _writeOperator(uint256 tokenId, address operator) internal virtual {\\n        _operators[tokenId] = operator;\\n    }\\n\\n    /// @notice checks if an address is enabled as minter\\n    /// @param minter the address to check\\n    /// @return true if the address is a minter\\n    function _isMinter(address minter) internal view virtual returns (bool) {\\n        return _minters[minter];\\n    }\\n\\n    /// @notice set an address as minter\\n    /// @param minter the address to set\\n    /// @param enabled true enable the address, false disable it.\\n    function _writeMinter(address minter, bool enabled) internal virtual {\\n        _minters[minter] = enabled;\\n    }\\n\\n    /// @notice get the address of the ERC2771 trusted forwarder\\n    /// @return the address of the trusted forwarder\\n    function _readTrustedForwarder() internal view virtual returns (address) {\\n        return _trustedForwarder;\\n    }\\n\\n    /// @notice set the address of the ERC2771 trusted forwarder\\n    /// @param trustedForwarder the address of the trusted forwarder\\n    function _writeTrustedForwarder(address trustedForwarder) internal virtual {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    /// @notice get the OpenSea operator filter\\n    /// @return the address of the OpenSea operator filter registry\\n    function _readOperatorFilterRegistry() internal view virtual returns (IOperatorFilterRegistry) {\\n        return _operatorFilterRegistry;\\n    }\\n\\n    /// @notice set the OpenSea operator filter\\n    /// @param registry the address of the OpenSea operator filter registry\\n    function _writeOperatorFilterRegistry(IOperatorFilterRegistry registry) internal virtual {\\n        _operatorFilterRegistry = registry;\\n    }\\n}\\n\",\"keccak256\":\"0x5faca5d5e9258c988880d20e1f2dc0372bba1faa41cf9f749dcb432ee762be75\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000d6565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff1615620000735760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b0390811614620000d35780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b614f8b80620000e66000396000f3fe608060405234801561001057600080fd5b50600436106103415760003560e01c8063845a4697116101bd578063ab01b469116100f9578063ce1b815f116100a2578063e985e9c51161007c578063e985e9c514610748578063eaa5e0671461075b578063eeb5a5d11461076e578063f2fde38b1461078157600080fd5b8063ce1b815f1461071a578063cf456ae714610722578063da7422281461073557600080fd5b8063b88d4fde116100d3578063b88d4fde146106e1578063c4d66de8146106f4578063c87b56dd1461070757600080fd5b8063ab01b469146106b3578063ac9fe421146106c6578063b0ccc31e146106d957600080fd5b80639a1b2fb4116101665780639ededf77116101405780639ededf7714610403578063a22cb4651461066b578063a574cea41461067e578063aa271e1a146106a057600080fd5b80639a1b2fb4146106485780639a7ac313146106505780639d28fb861461065857600080fd5b80638f283970116101975780638f283970146105e957806395c671d8146105fc57806395d89b411461060f57600080fd5b8063845a4697146105bb5780638da5cb5b146105ce5780638e5cb5f6146105d657600080fd5b806338bb305a1161028c57806355064d8511610235578063654b748a1161020f578063654b748a1461057a5780636e1e3bbf1461058d5780636e9960c3146105a057806370a08231146105a857600080fd5b806355064d8514610541578063572b6c05146105545780636352211e1461056757600080fd5b80634e6a0f44116102665780634e6a0f44146104df57806350cf5a31146104f257806350d5e9f71461050557600080fd5b806338bb305a146104a657806342842e0e146104b9578063468ad0a6146104cc57600080fd5b806315ddc535116102ee5780632a55205a116102c85780632a55205a1461044e5780632b26a407146104805780632b9917461461049357600080fd5b806315ddc5351461041557806323b872dd1461042857806328cfbd461461043b57600080fd5b8063081812fc1161031f578063081812fc146103c3578063095ea7b3146103ee5780630ef267431461040357600080fd5b806301ffc9a714610346578063029bca781461036e57806306fdde0314610381575b600080fd5b61035961035436600461455a565b610794565b60405190151581526020015b60405180910390f35b61035961037c366004614577565b6108cd565b60408051808201909152600f81527f53616e64626f782773204c414e4473000000000000000000000000000000000060208201525b60405161036591906145e0565b6103d66103d1366004614577565b610992565b6040516001600160a01b039091168152602001610365565b6104016103fc366004614613565b6109f5565b005b6101985b604051908152602001610365565b6104016104233660046146c6565b610a17565b61040161043636600461475b565b610aa2565b6104016104493660046146c6565b610aed565b61046161045c36600461479c565b610b6c565b604080516001600160a01b039093168352602083019190915201610365565b61040761048e366004614577565b610c44565b6104016104a136600461475b565b610d02565b6104016104b43660046147be565b610d1e565b6104016104c736600461475b565b610e28565b6104016104da366004614844565b610e7c565b6104016104ed366004614861565b610ec8565b610401610500366004614844565b611005565b6103b66040518060400160405280600781526020017f756e6b6e6f776e0000000000000000000000000000000000000000000000000081525081565b61035961054f3660046148c2565b61104e565b610359610562366004614844565b61107b565b6103d6610575366004614577565b611086565b610359610588366004614844565b6110c2565b61040161059b3660046149b3565b6110cd565b6103d661112b565b6104076105b6366004614844565b61113a565b6104076105c9366004614577565b61116f565b6103d661117a565b6104076105e4366004614577565b6111af565b6104016105f7366004614844565b6111ba565b61040761060a366004614577565b611203565b60408051808201909152600481527f4c414e440000000000000000000000000000000000000000000000000000000060208201526103b6565b6103d661120e565b6103d6611237565b610401610666366004614844565b611260565b610401610679366004614a2e565b6112a9565b61069161068c366004614577565b6112c6565b60405161036593929190614a67565b6103596106ae366004614844565b6113d5565b6104016106c1366004614a2e565b6113e0565b6104016106d4366004614a2e565b611455565b6103d661149f565b6104016106ef366004614a88565b6114a9565b610401610702366004614844565b6114ee565b6103b6610715366004614577565b61168b565b6103d66116f1565b610401610730366004614a2e565b6116fb565b610401610743366004614844565b611745565b610359610756366004614af4565b61178e565b610401610769366004614b22565b61179a565b61040161077c366004614c0a565b611ab9565b61040161078f366004614844565b611acf565b60006001600160e01b031982167f80ac58cd0000000000000000000000000000000000000000000000000000000014806107f757506001600160e01b031982167f3d12787300000000000000000000000000000000000000000000000000000000145b8061082b57506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061085f57506001600160e01b031982167f01ffc9a700000000000000000000000000000000000000000000000000000000145b8061089357506001600160e01b031982167f7f5828d000000000000000000000000000000000000000000000000000000000145b806108c757506001600160e01b031982167f2a55205a00000000000000000000000000000000000000000000000000000000145b92915050565b7f3899f13de39885dfce849839be8330453b5866928dd0e5933e36794349628400546000906001600160a01b0316806109095750600092915050565b6040517f029bca78000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b0382169063029bca7890602401602060405180830381865afa158015610967573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098b9190614c55565b9392505050565b60008060006109a084611b18565b90925090506001600160a01b0382166109d457604051637e27328960e01b8152600481018590526024015b60405180910390fd5b80156109eb576109e384611c1e565b949350505050565b5060009392505050565b81610a003082611c3b565b610a12610a0b611d54565b8484611d5e565b505050565b856000610a22611e88565b9050610a2c611d54565b6001600160a01b0316826001600160a01b031614610a5557610a5530610a50611d54565b611c3b565b610a988888888888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509250611e9c915050565b5050505050505050565b826000610aad611e88565b9050610ab7611d54565b6001600160a01b0316826001600160a01b031614610adb57610adb30610a50611d54565b610ae685858561210f565b5050505050565b856000610af8611e88565b9050610b02611d54565b6001600160a01b0316826001600160a01b031614610b2657610b2630610a50611d54565b610a988888888888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525060019250611e9c915050565b7ff7bae505580fc5d233bb20f4fb93f39f43d44ecc81ed63dd6455097b4c4550008054604080517fa86a28d100000000000000000000000000000000000000000000000000000000815281516000948594909385936001600160a01b039092169263a86a28d19260048082019392918290030181865afa158015610bf4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c189190614c72565b9094509050612710610c2e61ffff831687614cbe565b610c389190614ceb565b925050505b9250929050565b7f3899f13de39885dfce849839be8330453b5866928dd0e5933e36794349628400546000906001600160a01b031680610c805750600092915050565b6040517f2b26a407000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b03821690632b26a40790602401602060405180830381865afa158015610cde573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098b9190614cff565b81610d0d3082611c3b565b610d18848484611d5e565b50505050565b6000610d28611d54565b90506001600160a01b0388161580610d4757506001600160a01b038716155b15610d655760405163e6c4247b60e01b815260040160405180910390fd5b876001600160a01b0316816001600160a01b031614158015610d8e5750610d8c8882612166565b155b15610db7576040516322718ad960e21b81526001600160a01b03821660048201526024016109cb565b610dc2868686612181565b610dcf8888888888612261565b610de38888610dde8980614cbe565b6123b0565b610a9881898989898989898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506123dd92505050565b826000610e33611e88565b9050610e3d611d54565b6001600160a01b0316826001600160a01b031614610e6157610e6130610a50611d54565b610ae6858585604051806020016040528060008152506124a3565b610e846124d8565b6001600160a01b0316610e95611d54565b6001600160a01b031614610ebc57604051634755657960e01b815260040160405180910390fd5b610ec5816124ec565b50565b6000610ed2611d54565b9050610edd81612589565b610f05576040516322718ad960e21b81526001600160a01b03821660048201526024016109cb565b6001600160a01b038716610f2c5760405163e6c4247b60e01b815260040160405180910390fd5b610f37868686612181565b6000610f448787876125aa565b6001600160a01b031614610fb857610f5f8188888888612261565b610f6e8188610dde8980614cbe565b610fb381828989898989898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506123dd92505050565b610ffc565b610ffc818888888888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061264192505050565b50505050505050565b61100d6124d8565b6001600160a01b031661101e611d54565b6001600160a01b03161461104557604051634755657960e01b815260040160405180910390fd5b610ec58161291f565b600061105b848484612181565b60006110688585856125aa565b6001600160a01b03161415949350505050565b60006108c782612995565b6000611091826129ba565b90506001600160a01b0381166110bd57604051637e27328960e01b8152600481018390526024016109cb565b919050565b60006108c7826129cc565b60006110d7611d54565b90506110e281612589565b61110a576040516322718ad960e21b81526001600160a01b03821660048201526024016109cb565b611115858585612181565b6111238187878787876129ed565b505050505050565b60006111356124d8565b905090565b60006001600160a01b038216611166576040516322718ad960e21b8152600060048201526024016109cb565b6108c782612b0c565b60006108c782612b2a565b6000807f1836e2fa424a35b79c13fd66f8e282cb3a31513f9610d6e7a99baf7ffe56ec005b546001600160a01b031692915050565b60006108c782612b59565b6111c26124d8565b6001600160a01b03166111d3611d54565b6001600160a01b0316146111fa57604051634755657960e01b815260040160405180910390fd5b610ec581612b88565b60006108c782612bf6565b6000807ff7bae505580fc5d233bb20f4fb93f39f43d44ecc81ed63dd6455097b4c45500061119f565b6000807f3899f13de39885dfce849839be8330453b5866928dd0e5933e3679434962840061119f565b6112686124d8565b6001600160a01b0316611279611d54565b6001600160a01b0316146112a057604051634755657960e01b815260040160405180910390fd5b610ec581612c0a565b816112b43082611c3b565b610a126112bf611d54565b8484612c70565b6000806060817f3899f13de39885dfce849839be8330453b5866928dd0e5933e36794349628400546001600160a01b031690508061134057505060408051808201909152600781527f756e6b6e6f776e000000000000000000000000000000000000000000000000006020820152600092508291506113ce565b6040517fa574cea4000000000000000000000000000000000000000000000000000000008152600481018690526001600160a01b0382169063a574cea490602401600060405180830381865afa15801561139e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113c69190810190614d18565b935093509350505b9193909250565b60006108c782612589565b6113e86124d8565b6001600160a01b03166113f9611d54565b6001600160a01b03161461142057604051634755657960e01b815260040160405180910390fd5b6001600160a01b0382166114475760405163e6c4247b60e01b815260040160405180910390fd5b6114518282612dea565b5050565b61145d6124d8565b6001600160a01b031661146e611d54565b6001600160a01b03161461149557604051634755657960e01b815260040160405180910390fd5b611451828261302c565b6000611135611e88565b8360006114b4611e88565b90506114be611d54565b6001600160a01b0316826001600160a01b0316146114e2576114e230610a50611d54565b611123868686866124a3565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff166000811580156115395750825b905060008267ffffffffffffffff1660011480156115565750303b155b905081158015611564575080155b1561159b576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84547fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000016600117855583156115e657845468ff00000000000000001916680100000000000000001785555b60006115f06124d8565b6001600160a01b031614611630576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611639866130d3565b831561112357845468ff000000000000000019168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a1505050505050565b60606000611698836129ba565b6001600160a01b0316036116c257604051637e27328960e01b8152600481018390526024016109cb565b6116cb82613175565b6040516020016116db9190614dae565b6040516020818303038152906040529050919050565b6000611135613215565b6117036124d8565b6001600160a01b0316611714611d54565b6001600160a01b03161461173b57604051634755657960e01b815260040160405180910390fd5b6114518282613229565b61174d6124d8565b6001600160a01b031661175e611d54565b6001600160a01b03161461178557604051634755657960e01b815260040160405180910390fd5b610ec5816132e9565b600061098b8383612166565b6001600160a01b038a1615806117b757506001600160a01b038916155b156117d55760405163e6c4247b60e01b815260040160405180910390fd5b86851415806117e45750848314155b1561181b576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611825611d54565b90508a6001600160a01b0316816001600160a01b031614158015611850575061184e8b82612166565b155b15611879576040516322718ad960e21b81526001600160a01b03821660048201526024016109cb565b6000805b898110156119395760008b8b8381811061189957611899614e1a565b9050602002013590506118dd818b8b858181106118b8576118b8614e1a565b905060200201358a8a868181106118d1576118d1614e1a565b90506020020135612181565b61191a8e8e838d8d878181106118f5576118f5614e1a565b905060200201358c8c8881811061190e5761190e614e1a565b90506020020135612261565b6119248180614cbe565b61192e9084614e30565b92505060010161187d565b506119458c8c836123b0565b60008b6001600160a01b03163b11801561196357506119638b61334f565b15611aab5760008167ffffffffffffffff811115611983576119836148ee565b6040519080825280602002602001820160405280156119ac578160200160208202803683370190505b5090506000805b8b811015611a645760008d8d838181106119cf576119cf614e1a565b90506020020135905060005b6119e58280614cbe565b811015611a5a57611a2881838f8f87818110611a0357611a03614e1a565b905060200201358e8e88818110611a1c57611a1c614e1a565b9050602002013561337b565b858581518110611a3a57611a3a614e1a565b602090810291909101015283611a4f81614e43565b9450506001016119db565b50506001016119b3565b50611aa8848f8f858a8a8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506133b092505050565b50505b505050505050505050505050565b81611ac43082611c3b565b610d18848484612c70565b611ad76124d8565b6001600160a01b0316611ae8611d54565b6001600160a01b031614611b0f57604051634755657960e01b815260040160405180910390fd5b610ec5816134e6565b6000807fff00000000000000000000000000000000000000000000000000000000000000831615611b5f57604051637e27328960e01b8152600481018490526024016109cb565b6000611b6d61019885614e5d565b90506000611b7d61019886614ceb565b90506000611b8a86612bf6565b90507401000000000000000000000000000000000000000080821603611bc15760009450600160ff1b808216149350505050915091565b8015611bda57809450600160ff1b808216149350611c16565b611c0f600380611bea8682614cbe565b611bf49190614ceb565b6003611c008682614cbe565b611c0a9190614ceb565b6125aa565b9450600093505b505050915091565b6000818152603860205260408120546001600160a01b03166108c7565b6000611c45611e88565b90506001600160a01b0381163b15610a12576040517fc61711340000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152838116602483015282169063c617113490604401602060405180830381865afa925050508015611cda575060408051601f3d908101601f19168201909252611cd791810190614c55565b60015b611d14573d808015611d08576040519150601f19603f3d011682016040523d82523d6000602084013e611d0d565b606091505b5050611d22565b8015611d205750505050565b505b6040517f8a10919300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061113561356d565b611d6883826135ba565b506000611d73611d54565b90506000846001600160a01b0316826001600160a01b03161480611d9c5750611d9c8583612166565b905080611de0576040517fa9fbf51f0000000000000000000000000000000000000000000000000000000081526001600160a01b03831660048201526024016109cb565b6001600160a01b038416611dff57611dfa8386600061367f565b611e40565b611e0b8386600161367f565b6000838152603860205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386161790555b82846001600160a01b0316866001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050505050565b6000611135606c546001600160a01b031690565b6001600160a01b0386161580611eb957506001600160a01b038516155b15611ed75760405163e6c4247b60e01b815260040160405180910390fd5b6000611ee1611d54565b90506000876001600160a01b0316826001600160a01b03161480611f0a5750611f0a8883612166565b90508460005b81811015612054576000888883818110611f2c57611f2c614e1a565b905060200201359050600080611f4183611b18565b91509150816001600160a01b03168d6001600160a01b031614611f82576040516322718ad960e21b81526001600160a01b038e1660048201526024016109cb565b85158015611fb35750808015611fb15750866001600160a01b0316611fa684611c1e565b6001600160a01b0316145b155b15611ffc576040517f177e802f0000000000000000000000000000000000000000000000000000000081526001600160a01b0388166004820152602481018490526044016109cb565b612008838d600061367f565b828c6001600160a01b03168e6001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050600101611f10565b506120608989836123b0565b6001600160a01b0388163b15612104576120798861334f565b156120c4576120bf838a8a8a8a808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508c92506133b0915050565b612104565b83156121045760005b81811015612102576120fa848b8b8b8b868181106120ed576120ed614e1a565b905060200201358a6136e1565b6001016120cd565b505b505050505050505050565b6000612119611d54565b9050612127818585856137cc565b6000836001600160a01b03163b11801561214557506121458361334f565b15610d1857610d1881858585604051806020016040528060008152506136e1565b60006121728383613905565b8061098b575061098b826129cc565b82600114158015612193575082600314155b80156121a0575082600614155b80156121ad575082600c14155b80156121ba575082601814155b156121e957604051630699b5cb60e41b81526004810184905260248101839052604481018290526064016109cb565b6121f38383614e5d565b15158061220857506122058382614e5d565b15155b8061221d575061221a83610198614e71565b82115b80612232575061222f83610198614e71565b81115b15610a1257604051630699b5cb60e41b81526004810184905260248101839052604481018290526064016109cb565b826001036123125761019881028201600061227b826129ba565b90506001600160a01b0381166122b557604051630699b5cb60e41b81526004810186905260248101859052604481018490526064016109cb565b866001600160a01b0316816001600160a01b0316146122f2576040516322718ad960e21b81526001600160a01b03881660048201526024016109cb565b5060009081526036602052604090206001600160a01b0385169055612348565b612346858560405180606001604052808681526020018581526020018781525060016002886123419190614ceb565b613935565b505b60005b6123558480614cbe565b811015611123576123688185858561337b565b856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a460010161234b565b816001600160a01b0316836001600160a01b031614610a12576123d38382613b5d565b610a128282613b89565b6000856001600160a01b03163b1180156123fb57506123fb8561334f565b15610ffc57600061240c8580614cbe565b67ffffffffffffffff811115612424576124246148ee565b60405190808252806020026020018201604052801561244d578160200160208202803683370190505b50905060005b61245d8680614cbe565b811015612495576124708187878761337b565b82828151811061248257612482614e1a565b6020908102919091010152600101612453565b50610a9888888884866133b0565b60006124ad611d54565b90506124bb818686866137cc565b6001600160a01b0384163b15610ae657610ae681868686866136e1565b60006111356033546001600160a01b031690565b6001600160a01b0381166125135760405163e6c4247b60e01b815260040160405180910390fd5b7f3899f13de39885dfce849839be8330453b5866928dd0e5933e36794349628400805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831690811782556040517f03ce93da23cc307353ca8a7aac205697bd48963ee54982eacb40dd9d40a1d72990600090a25050565b6001600160a01b03811660009081526039602052604081205460ff166108c7565b60008060006125b886613bb5565b50909250905060006125fb61060a84896125d2818b614ceb565b6125dc9190614cbe565b8a6125e7818b614ceb565b6125f19190614cbe565b6101980291010190565b90506001600160a01b0381161561261657925061098b915050565b60188710156126345761262a8287876125aa565b935050505061098b565b5060009695505050505050565b600061264c85613bb5565b5050905060006126628286866101980291010190565b604080518181526108208101825291925060009190816020015b6126a060405180606001604052806000815260200160008152602001600081525090565b81526020019060019003908161267c57905050905060008060038911156126fb576126f58b60405180606001604052808b81526020018a81526020018c81525085848660028f6126f09190614ceb565b613cfa565b90925090505b60005b6127088a80614cbe565b8110156128c957600061271d828c8c8c61337b565b9050600061275786604051806060016040528061273986612b59565b815260200161274786612b2a565b8152602001600181525087613eb0565b905080156127a557818d6001600160a01b03168f6001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46128bf565b8d6001600160a01b03166127b883611203565b6001600160a01b03160361285c5760006127d183611c1e565b6001600160a01b031614612809576000828152603860205260409020805473ffffffffffffffffffffffffffffffffffffffff191690555b612814600185614e30565b9350818d6001600160a01b03168f6001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46128bf565b61286582612bf6565b15612886576040516314b27b7f60e31b8152600481018390526024016109cb565b60405182906001600160a01b038f16906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45b50506001016126fe565b506128db8b8484848e8e8e8e8e613f69565b60008481526036602052604090206001600160a01b038b1690556129088a6129038b80614cbe565b613b89565b6129128b82613b5d565b5050505050505050505050565b7ff7bae505580fc5d233bb20f4fb93f39f43d44ecc81ed63dd6455097b4c455000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831690811782556040517f1ad03d64d67ed9b2c90cfdf8dc8e54de3e41af88ae55e45a53dc27e476406de890600090a25050565b600061299f613215565b6001600160a01b0316826001600160a01b0316149050919050565b60006129c582611b18565b5092915050565b6001600160a01b03811660009081526034602052604081205460ff166108c7565b6001600160a01b038516612a145760405163e6c4247b60e01b815260040160405180910390fd5b6000612a1f85613bb5565b505090506000612a358286866101980291010190565b9050612a4486868660186141ba565b60005b612a518780614cbe565b811015612ad3576000612a668289898961337b565b9050612a7181612bf6565b15612a92576040516314b27b7f60e31b8152600481018290526024016109cb565b60405181906001600160a01b038b16906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a450600101612a47565b5060008181526036602052604090206001600160a01b0388169055612afc876129038880614cbe565b610a9888600089898989896123dd565b6001600160a01b0381166000908152603560205260408120546108c7565b60006108c76101987effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8416614ceb565b60006108c76101987effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8416614e5d565b6000612b926124d8565b90506001600160a01b038116612bbb5760405163e6c4247b60e01b815260040160405180910390fd5b816001600160a01b0316816001600160a01b031603612bed5760405163a9cb9e0d60e01b815260040160405180910390fd5b611451826130d3565b6000818152603660205260408120546108c7565b612c3981606c805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831617905550565b6040516001600160a01b038216907fc6df119c56c99171b170652a3c4750ba46dcaacbdb3b7ab4847a9fa339659bd490600090a250565b6001600160a01b038316612cbb576040517f73c6ac6e0000000000000000000000000000000000000000000000000000000081526001600160a01b03841660048201526024016109cb565b6000612cc5611d54565b9050836001600160a01b0316816001600160a01b031614158015612cef5750612ced816129cc565b155b15612d31576040517fa9fbf51f0000000000000000000000000000000000000000000000000000000081526001600160a01b03821660048201526024016109cb565b612d3a836129cc565b15612d7c576040517f5b08ba180000000000000000000000000000000000000000000000000000000081526001600160a01b03841660048201526024016109cb565b6001600160a01b03848116600081815260376020908152604080832094881680845294825291829020805460ff191687151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a350505050565b6000612df4611e88565b90506001600160a01b0381163b15612fe2576040517fc3c5a5470000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0382169063c3c5a547906024016020604051808303816000875af1158015612e65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e899190614c55565b612fe2578115612f13576040517f7d3e3dbe0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038481166024830152821690637d3e3dbe906044015b600060405180830381600087803b158015612ef657600080fd5b505af1158015612f0a573d6000803e3d6000fd5b50505050612fe2565b6001600160a01b03831615612f6f576040517fa0af29030000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03848116602483015282169063a0af290390604401612edc565b6040517f4420e4860000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03821690634420e48690602401600060405180830381600087803b158015612fc957600080fd5b505af1158015612fdd573d6000803e3d6000fd5b505050505b826001600160a01b03167f3c7a9c847c035e45b84027e44ad55724873d5921b3a6abb8c0926b415d9241b18360405161301f911515815260200190565b60405180910390a2505050565b6001600160a01b0382166130535760405163e6c4247b60e01b815260040160405180910390fd5b61305c826129cc565b15158115150361307f5760405163a9cb9e0d60e01b815260040160405180910390fd5b6001600160a01b038216600081815260346020526040808220805460ff191685151590811790915590519092917f44f92d27abdf4cfb6a7d712c3af68f3be086d4ca747ab802c36f67d6790060d891a35050565b6001600160a01b0381166130fa5760405163e6c4247b60e01b815260040160405180910390fd5b60006131046124d8565b9050816001600160a01b0316816001600160a01b03167f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f60405160405180910390a3611451826033805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831617905550565b60606000613182836142d4565b600101905060008167ffffffffffffffff8111156131a2576131a26148ee565b6040519080825280601f01601f1916602001820160405280156131cc576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85049450846131d657509392505050565b6000611135606b546001600160a01b031690565b6001600160a01b0382166132505760405163e6c4247b60e01b815260040160405180910390fd5b61325982612589565b15158115150361327c5760405163a9cb9e0d60e01b815260040160405180910390fd5b6001600160a01b0382166000908152603960205260409020805460ff1916821515179055816001600160a01b03167fff452b3b9159b024a9098f0058c63eccd90d36b3584608202800d662f962bb60826040516132dd911515815260200190565b60405180910390a25050565b61331881606b805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831617905550565b6040516001600160a01b038216907fd91237492a9e30cd2faf361fc103998a382ff0ec2b1b07dc1cbebb76ae2f1ea290600090a250565b60006108c7827f5e8bf644000000000000000000000000000000000000000000000000000000006143b6565b600061019884868161338f5761338f614cd5565b048301028486816133a2576133a2614cd5565b068401019050949350505050565b6040517f4b808c460000000000000000000000000000000000000000000000000000000081526001600160a01b03841690634b808c46906133fb908890889087908790600401614e84565b6020604051808303816000875af1925050508015613436575060408051601f3d908101601f1916820190925261343391810190614efc565b60015b613470573d808015613464576040519150601f19603f3d011682016040523d82523d6000602084013e613469565b606091505b50506134a9565b7fb47f73ba000000000000000000000000000000000000000000000000000000006001600160e01b03198216016134a75750610ae6565b505b6040517f64a0ae920000000000000000000000000000000000000000000000000000000081526001600160a01b03841660048201526024016109cb565b7f1836e2fa424a35b79c13fd66f8e282cb3a31513f9610d6e7a99baf7ffe56ec0080546040516001600160a01b038481169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600061357833612995565b8015613585575060143610155b156135b557507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c90565b503390565b60006001600160a01b038316613607576040517f73c6ac6e0000000000000000000000000000000000000000000000000000000081526001600160a01b03841660048201526024016109cb565b60008061361384611b18565b90925090506001600160a01b03821661364257604051637e27328960e01b8152600481018590526024016109cb565b816001600160a01b0316856001600160a01b0316146109e3576040516322718ad960e21b81526001600160a01b03861660048201526024016109cb565b60006001600160a01b03831661369a6001600160ff1b614e71565b73ffffffffffffffffffffffffffffffffffffffff19166136ba86612bf6565b1617905081156136cb57600160ff1b175b6000848152603660205260409020819055610d18565b6040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0384169063150b7a029061372c908890889087908790600401614f19565b6020604051808303816000875af1925050508015613767575060408051601f3d908101601f1916820190925261376491810190614efc565b60015b613795573d808015613464576040519150601f19603f3d011682016040523d82523d6000602084013e613469565b7feaf485fe000000000000000000000000000000000000000000000000000000006001600160e01b03198216016134a75750610ae6565b6001600160a01b0382166137f35760405163e6c4247b60e01b815260040160405180910390fd5b60006137ff84836135ba565b90506000846001600160a01b0316866001600160a01b0316148061382857506138288587612166565b90508015801561385b57508180156138595750856001600160a01b031661384e84611c1e565b6001600160a01b0316145b155b156138a4576040517f177e802f0000000000000000000000000000000000000000000000000000000081526001600160a01b0387166004820152602481018490526044016109cb565b6138b0858560016123b0565b6138bc8385600061367f565b82846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050505050565b6001600160a01b03808316600090815260376020908152604080832093851683529290529081205460ff1661098b565b60008060006139478660400151613bb5565b9250509150600061396683886000015189602001516101980291010190565b87519091506001905b604089015189516139809190614e30565b811015613ac15760208901515b89604001518a602001516139a19190614e30565b811015613aaf5760008060038a10156139cf576139bf8e858561446e565b80156139c85750845b9050613a84565b6139fe8e8e60405180606001604052808881526020018781526020018e815250600060028f6123419190614ceb565b9050610198830287850101613a1281612bf6565b92508215613a825781158015613a3157508e6001600160a01b03168314155b15613a72576040517fc1194ebf00000000000000000000000000000000000000000000000000000000815260048101869052602481018590526044016109cb565b6000818152603660205260408120555b505b8080613a8f57508115155b8015613a985750845b945050508781613aa89190614e30565b905061398d565b50613aba8782614e30565b905061396f565b508615613b4e5780158015613afe5750896001600160a01b0316613af289604001518a600001518b602001516125aa565b6001600160a01b031614155b15613b27576040516322718ad960e21b81526001600160a01b038b1660048201526024016109cb565b60008281526036602052604090206001600160a01b038a1690556001945050505050613b54565b93505050505b95945050505050565b6114518282613b6b85612b0c565b036001600160a01b0391909116600090815260356020526040902055565b6114518282613b9785612b0c565b016001600160a01b0391909116600090815260356020526040902055565b600080600083600103613bcf5760009250600391506113ce565b83600303613c03577f01000000000000000000000000000000000000000000000000000000000000009250600691506113ce565b83600603613c5957507f02000000000000000000000000000000000000000000000000000000000000009150600c90507f01000000000000000000000000000000000000000000000000000000000000006113ce565b83600c03613caf57507f03000000000000000000000000000000000000000000000000000000000000009150601890507f02000000000000000000000000000000000000000000000000000000000000006113ce565b507f0400000000000000000000000000000000000000000000000000000000000000939092507f03000000000000000000000000000000000000000000000000000000000000009150565b6000806000613d0884613bb5565b50509050600088604001518960000151613d229190614e30565b9050600089604001518a60200151613d3a9190614e30565b8a519091505b82811015613e765760208b01515b82811015613e64576000613d7d8c60405180606001604052808681526020018581526020018c8152508c613eb0565b905080613e52576101988202868401016000613d9882611203565b90508f6001600160a01b0316816001600160a01b031603613e245760405180606001604052808681526020018581526020018c8152508e8d81518110613de057613de0614e1a565b60200260200101819052508b80613df690614e43565b9c50613e0490508b80614cbe565b613e0e908e614e30565b6000838152603660205260408120559c50613e4f565b6001600160a01b03811615613e4f576040516314b27b7f60e31b8152600481018390526024016109cb565b50505b50613e5d8882614e30565b9050613d4e565b50613e6f8782614e30565b9050613d40565b50613e82600287614ceb565b955060038610613e9f57613e9a8b8b8b8b8b8b613cfa565b985096505b509499959850949650505050505050565b6000805b82811015613f5e576000858281518110613ed057613ed0614e1a565b6020026020010151905084604001518160400151118015613ef357508051855110155b8015613f0f575060408101518151613f0b9190614e30565b8551105b8015613f2357508060200151856020015110155b8015613f45575080604001518160200151613f3e9190614e30565b8560200151105b15613f555760019250505061098b565b50600101613eb4565b506000949350505050565b6000856001600160a01b03163b118015613f875750613f878561334f565b1561415c5760008667ffffffffffffffff811115613fa757613fa76148ee565b604051908082528060200260200182016040528015613fd0578160200160208202803683370190505b50905060008088613fe18880614cbe565b613feb9190614e71565b67ffffffffffffffff811115614003576140036148ee565b60405190808252806020026020018201604052801561402c578160200160208202803683370190505b5090506000805b61403d8980614cbe565b811015614137576000614052828b8b8b61337b565b905061408a8e604051806060016040528061406c85612b59565b815260200161407a85612b2a565b815260200160018152508f613eb0565b156140bf57808686815181106140a2576140a2614e1a565b6020908102919091010152846140b781614e43565b95505061412e565b8e6001600160a01b03166140d282611203565b6001600160a01b03160361410257600081815260366020526040812055808686815181106140a2576140a2614e1a565b8084848151811061411557614115614e1a565b60209081029190910101528261412a81614e43565b9350505b50600101614033565b506141468d60008b85896133b0565b6141538d8e8b87896133b0565b50505050612104565b60005b6141698580614cbe565b81101561210257600061417e8287878761337b565b90508a6001600160a01b031661419382611203565b6001600160a01b0316036141b1576000818152603660205260408120555b5060010161415f565b60006141c582613bb5565b505090508185116142285760006141f682846141e18189614ceb565b6141eb9190614cbe565b856125e78189614ceb565b905061420181612bf6565b15614222576040516314b27b7f60e31b8152600481018290526024016109cb565b506142b3565b60006142348686614e30565b905060006142428786614e30565b9050855b828110156142af57855b8281101561429d5761019881028583010161426a81612bf6565b1561428b576040516314b27b7f60e31b8152600481018290526024016109cb565b506142968682614e30565b9050614250565b506142a88582614e30565b9050614246565b5050505b6142be600283614ceb565b915060038210610ae657610ae6858585856141ba565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831061431d577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310614349576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061436757662386f26fc10000830492506010015b6305f5e100831061437f576305f5e100830492506008015b612710831061439357612710830492506004015b606483106143a5576064830492506002015b600a83106108c75760010192915050565b6040516001600160e01b031982166024820152600090819060440160408051601f19818403018152919052602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01ffc9a700000000000000000000000000000000000000000000000000000000178152825192935060009283928392909183918a617530fa92503d91506000519050828015614457575060208210155b80156144635750600081115b979650505050505050565b6000610198820283018161448182612bf6565b905080156145385774010000000000000000000000000000000000000000808216036144e3576040517fc1194ebf00000000000000000000000000000000000000000000000000000000815260048101869052602481018590526044016109cb565b856001600160a01b0316816001600160a01b031614614520576040516322718ad960e21b81526001600160a01b03871660048201526024016109cb565b5060009081526036602052604081205550600161098b565b50600095945050505050565b6001600160e01b031981168114610ec557600080fd5b60006020828403121561456c57600080fd5b813561098b81614544565b60006020828403121561458957600080fd5b5035919050565b60005b838110156145ab578181015183820152602001614593565b50506000910152565b600081518084526145cc816020860160208601614590565b601f01601f19169290920160200192915050565b60208152600061098b60208301846145b4565b6001600160a01b0381168114610ec557600080fd5b80356110bd816145f3565b6000806040838503121561462657600080fd5b8235614631816145f3565b946020939093013593505050565b60008083601f84011261465157600080fd5b50813567ffffffffffffffff81111561466957600080fd5b6020830191508360208260051b8501011115610c3d57600080fd5b60008083601f84011261469657600080fd5b50813567ffffffffffffffff8111156146ae57600080fd5b602083019150836020828501011115610c3d57600080fd5b600080600080600080608087890312156146df57600080fd5b86356146ea816145f3565b955060208701356146fa816145f3565b9450604087013567ffffffffffffffff8082111561471757600080fd5b6147238a838b0161463f565b9096509450606089013591508082111561473c57600080fd5b5061474989828a01614684565b979a9699509497509295939492505050565b60008060006060848603121561477057600080fd5b833561477b816145f3565b9250602084013561478b816145f3565b929592945050506040919091013590565b600080604083850312156147af57600080fd5b50508035926020909101359150565b600080600080600080600060c0888a0312156147d957600080fd5b87356147e4816145f3565b965060208801356147f4816145f3565b955060408801359450606088013593506080880135925060a088013567ffffffffffffffff81111561482557600080fd5b6148318a828b01614684565b989b979a50959850939692959293505050565b60006020828403121561485657600080fd5b813561098b816145f3565b60008060008060008060a0878903121561487a57600080fd5b8635614885816145f3565b9550602087013594506040870135935060608701359250608087013567ffffffffffffffff8111156148b657600080fd5b61474989828a01614684565b6000806000606084860312156148d757600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561492d5761492d6148ee565b604052919050565b600067ffffffffffffffff82111561494f5761494f6148ee565b50601f01601f191660200190565b600082601f83011261496e57600080fd5b813561498161497c82614935565b614904565b81815284602083860101111561499657600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312156149cb57600080fd5b85356149d6816145f3565b9450602086013593506040860135925060608601359150608086013567ffffffffffffffff811115614a0757600080fd5b614a138882890161495d565b9150509295509295909350565b8015158114610ec557600080fd5b60008060408385031215614a4157600080fd5b8235614a4c816145f3565b91506020830135614a5c81614a20565b809150509250929050565b8315158152826020820152606060408201526000613b5460608301846145b4565b60008060008060808587031215614a9e57600080fd5b8435614aa9816145f3565b93506020850135614ab9816145f3565b925060408501359150606085013567ffffffffffffffff811115614adc57600080fd5b614ae88782880161495d565b91505092959194509250565b60008060408385031215614b0757600080fd5b8235614b12816145f3565b91506020830135614a5c816145f3565b60008060008060008060008060008060c08b8d031215614b4157600080fd5b614b4a8b614608565b9950614b5860208c01614608565b985060408b013567ffffffffffffffff80821115614b7557600080fd5b614b818e838f0161463f565b909a50985060608d0135915080821115614b9a57600080fd5b614ba68e838f0161463f565b909850965060808d0135915080821115614bbf57600080fd5b614bcb8e838f0161463f565b909650945060a08d0135915080821115614be457600080fd5b50614bf18d828e01614684565b915080935050809150509295989b9194979a5092959850565b600080600060608486031215614c1f57600080fd5b8335614c2a816145f3565b92506020840135614c3a816145f3565b91506040840135614c4a81614a20565b809150509250925092565b600060208284031215614c6757600080fd5b815161098b81614a20565b60008060408385031215614c8557600080fd5b8251614c90816145f3565b602084015190925061ffff81168114614a5c57600080fd5b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176108c7576108c7614ca8565b634e487b7160e01b600052601260045260246000fd5b600082614cfa57614cfa614cd5565b500490565b600060208284031215614d1157600080fd5b5051919050565b600080600060608486031215614d2d57600080fd5b8351614d3881614a20565b60208501516040860151919450925067ffffffffffffffff811115614d5c57600080fd5b8401601f81018613614d6d57600080fd5b8051614d7b61497c82614935565b818152876020838501011115614d9057600080fd5b614da1826020830160208601614590565b8093505050509250925092565b7f68747470733a2f2f6170692e73616e64626f782e67616d652f6c616e64732f00815260008251614de681601f850160208701614590565b7f2f6d657461646174612e6a736f6e000000000000000000000000000000000000601f939091019283015250602d01919050565b634e487b7160e01b600052603260045260246000fd5b808201808211156108c7576108c7614ca8565b60006000198203614e5657614e56614ca8565b5060010190565b600082614e6c57614e6c614cd5565b500690565b818103818111156108c7576108c7614ca8565b6000608082016001600160a01b0380881684526020818816602086015260806040860152829150865180845260a08601925060208801935060005b81811015614edb57845184529382019392820192600101614ebf565b5050508381036060850152614ef081866145b4565b98975050505050505050565b600060208284031215614f0e57600080fd5b815161098b81614544565b60006001600160a01b03808716835280861660208401525083604083015260806060830152614f4b60808301846145b4565b969550505050505056fea26469706673582212204a3b78739832b8af66fab98134773d03c3eed4dc07fc7e561f42c69168ca6f2964736f6c63430008170033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103415760003560e01c8063845a4697116101bd578063ab01b469116100f9578063ce1b815f116100a2578063e985e9c51161007c578063e985e9c514610748578063eaa5e0671461075b578063eeb5a5d11461076e578063f2fde38b1461078157600080fd5b8063ce1b815f1461071a578063cf456ae714610722578063da7422281461073557600080fd5b8063b88d4fde116100d3578063b88d4fde146106e1578063c4d66de8146106f4578063c87b56dd1461070757600080fd5b8063ab01b469146106b3578063ac9fe421146106c6578063b0ccc31e146106d957600080fd5b80639a1b2fb4116101665780639ededf77116101405780639ededf7714610403578063a22cb4651461066b578063a574cea41461067e578063aa271e1a146106a057600080fd5b80639a1b2fb4146106485780639a7ac313146106505780639d28fb861461065857600080fd5b80638f283970116101975780638f283970146105e957806395c671d8146105fc57806395d89b411461060f57600080fd5b8063845a4697146105bb5780638da5cb5b146105ce5780638e5cb5f6146105d657600080fd5b806338bb305a1161028c57806355064d8511610235578063654b748a1161020f578063654b748a1461057a5780636e1e3bbf1461058d5780636e9960c3146105a057806370a08231146105a857600080fd5b806355064d8514610541578063572b6c05146105545780636352211e1461056757600080fd5b80634e6a0f44116102665780634e6a0f44146104df57806350cf5a31146104f257806350d5e9f71461050557600080fd5b806338bb305a146104a657806342842e0e146104b9578063468ad0a6146104cc57600080fd5b806315ddc535116102ee5780632a55205a116102c85780632a55205a1461044e5780632b26a407146104805780632b9917461461049357600080fd5b806315ddc5351461041557806323b872dd1461042857806328cfbd461461043b57600080fd5b8063081812fc1161031f578063081812fc146103c3578063095ea7b3146103ee5780630ef267431461040357600080fd5b806301ffc9a714610346578063029bca781461036e57806306fdde0314610381575b600080fd5b61035961035436600461455a565b610794565b60405190151581526020015b60405180910390f35b61035961037c366004614577565b6108cd565b60408051808201909152600f81527f53616e64626f782773204c414e4473000000000000000000000000000000000060208201525b60405161036591906145e0565b6103d66103d1366004614577565b610992565b6040516001600160a01b039091168152602001610365565b6104016103fc366004614613565b6109f5565b005b6101985b604051908152602001610365565b6104016104233660046146c6565b610a17565b61040161043636600461475b565b610aa2565b6104016104493660046146c6565b610aed565b61046161045c36600461479c565b610b6c565b604080516001600160a01b039093168352602083019190915201610365565b61040761048e366004614577565b610c44565b6104016104a136600461475b565b610d02565b6104016104b43660046147be565b610d1e565b6104016104c736600461475b565b610e28565b6104016104da366004614844565b610e7c565b6104016104ed366004614861565b610ec8565b610401610500366004614844565b611005565b6103b66040518060400160405280600781526020017f756e6b6e6f776e0000000000000000000000000000000000000000000000000081525081565b61035961054f3660046148c2565b61104e565b610359610562366004614844565b61107b565b6103d6610575366004614577565b611086565b610359610588366004614844565b6110c2565b61040161059b3660046149b3565b6110cd565b6103d661112b565b6104076105b6366004614844565b61113a565b6104076105c9366004614577565b61116f565b6103d661117a565b6104076105e4366004614577565b6111af565b6104016105f7366004614844565b6111ba565b61040761060a366004614577565b611203565b60408051808201909152600481527f4c414e440000000000000000000000000000000000000000000000000000000060208201526103b6565b6103d661120e565b6103d6611237565b610401610666366004614844565b611260565b610401610679366004614a2e565b6112a9565b61069161068c366004614577565b6112c6565b60405161036593929190614a67565b6103596106ae366004614844565b6113d5565b6104016106c1366004614a2e565b6113e0565b6104016106d4366004614a2e565b611455565b6103d661149f565b6104016106ef366004614a88565b6114a9565b610401610702366004614844565b6114ee565b6103b6610715366004614577565b61168b565b6103d66116f1565b610401610730366004614a2e565b6116fb565b610401610743366004614844565b611745565b610359610756366004614af4565b61178e565b610401610769366004614b22565b61179a565b61040161077c366004614c0a565b611ab9565b61040161078f366004614844565b611acf565b60006001600160e01b031982167f80ac58cd0000000000000000000000000000000000000000000000000000000014806107f757506001600160e01b031982167f3d12787300000000000000000000000000000000000000000000000000000000145b8061082b57506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061085f57506001600160e01b031982167f01ffc9a700000000000000000000000000000000000000000000000000000000145b8061089357506001600160e01b031982167f7f5828d000000000000000000000000000000000000000000000000000000000145b806108c757506001600160e01b031982167f2a55205a00000000000000000000000000000000000000000000000000000000145b92915050565b7f3899f13de39885dfce849839be8330453b5866928dd0e5933e36794349628400546000906001600160a01b0316806109095750600092915050565b6040517f029bca78000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b0382169063029bca7890602401602060405180830381865afa158015610967573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098b9190614c55565b9392505050565b60008060006109a084611b18565b90925090506001600160a01b0382166109d457604051637e27328960e01b8152600481018590526024015b60405180910390fd5b80156109eb576109e384611c1e565b949350505050565b5060009392505050565b81610a003082611c3b565b610a12610a0b611d54565b8484611d5e565b505050565b856000610a22611e88565b9050610a2c611d54565b6001600160a01b0316826001600160a01b031614610a5557610a5530610a50611d54565b611c3b565b610a988888888888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509250611e9c915050565b5050505050505050565b826000610aad611e88565b9050610ab7611d54565b6001600160a01b0316826001600160a01b031614610adb57610adb30610a50611d54565b610ae685858561210f565b5050505050565b856000610af8611e88565b9050610b02611d54565b6001600160a01b0316826001600160a01b031614610b2657610b2630610a50611d54565b610a988888888888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525060019250611e9c915050565b7ff7bae505580fc5d233bb20f4fb93f39f43d44ecc81ed63dd6455097b4c4550008054604080517fa86a28d100000000000000000000000000000000000000000000000000000000815281516000948594909385936001600160a01b039092169263a86a28d19260048082019392918290030181865afa158015610bf4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c189190614c72565b9094509050612710610c2e61ffff831687614cbe565b610c389190614ceb565b925050505b9250929050565b7f3899f13de39885dfce849839be8330453b5866928dd0e5933e36794349628400546000906001600160a01b031680610c805750600092915050565b6040517f2b26a407000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b03821690632b26a40790602401602060405180830381865afa158015610cde573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098b9190614cff565b81610d0d3082611c3b565b610d18848484611d5e565b50505050565b6000610d28611d54565b90506001600160a01b0388161580610d4757506001600160a01b038716155b15610d655760405163e6c4247b60e01b815260040160405180910390fd5b876001600160a01b0316816001600160a01b031614158015610d8e5750610d8c8882612166565b155b15610db7576040516322718ad960e21b81526001600160a01b03821660048201526024016109cb565b610dc2868686612181565b610dcf8888888888612261565b610de38888610dde8980614cbe565b6123b0565b610a9881898989898989898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506123dd92505050565b826000610e33611e88565b9050610e3d611d54565b6001600160a01b0316826001600160a01b031614610e6157610e6130610a50611d54565b610ae6858585604051806020016040528060008152506124a3565b610e846124d8565b6001600160a01b0316610e95611d54565b6001600160a01b031614610ebc57604051634755657960e01b815260040160405180910390fd5b610ec5816124ec565b50565b6000610ed2611d54565b9050610edd81612589565b610f05576040516322718ad960e21b81526001600160a01b03821660048201526024016109cb565b6001600160a01b038716610f2c5760405163e6c4247b60e01b815260040160405180910390fd5b610f37868686612181565b6000610f448787876125aa565b6001600160a01b031614610fb857610f5f8188888888612261565b610f6e8188610dde8980614cbe565b610fb381828989898989898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506123dd92505050565b610ffc565b610ffc818888888888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061264192505050565b50505050505050565b61100d6124d8565b6001600160a01b031661101e611d54565b6001600160a01b03161461104557604051634755657960e01b815260040160405180910390fd5b610ec58161291f565b600061105b848484612181565b60006110688585856125aa565b6001600160a01b03161415949350505050565b60006108c782612995565b6000611091826129ba565b90506001600160a01b0381166110bd57604051637e27328960e01b8152600481018390526024016109cb565b919050565b60006108c7826129cc565b60006110d7611d54565b90506110e281612589565b61110a576040516322718ad960e21b81526001600160a01b03821660048201526024016109cb565b611115858585612181565b6111238187878787876129ed565b505050505050565b60006111356124d8565b905090565b60006001600160a01b038216611166576040516322718ad960e21b8152600060048201526024016109cb565b6108c782612b0c565b60006108c782612b2a565b6000807f1836e2fa424a35b79c13fd66f8e282cb3a31513f9610d6e7a99baf7ffe56ec005b546001600160a01b031692915050565b60006108c782612b59565b6111c26124d8565b6001600160a01b03166111d3611d54565b6001600160a01b0316146111fa57604051634755657960e01b815260040160405180910390fd5b610ec581612b88565b60006108c782612bf6565b6000807ff7bae505580fc5d233bb20f4fb93f39f43d44ecc81ed63dd6455097b4c45500061119f565b6000807f3899f13de39885dfce849839be8330453b5866928dd0e5933e3679434962840061119f565b6112686124d8565b6001600160a01b0316611279611d54565b6001600160a01b0316146112a057604051634755657960e01b815260040160405180910390fd5b610ec581612c0a565b816112b43082611c3b565b610a126112bf611d54565b8484612c70565b6000806060817f3899f13de39885dfce849839be8330453b5866928dd0e5933e36794349628400546001600160a01b031690508061134057505060408051808201909152600781527f756e6b6e6f776e000000000000000000000000000000000000000000000000006020820152600092508291506113ce565b6040517fa574cea4000000000000000000000000000000000000000000000000000000008152600481018690526001600160a01b0382169063a574cea490602401600060405180830381865afa15801561139e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113c69190810190614d18565b935093509350505b9193909250565b60006108c782612589565b6113e86124d8565b6001600160a01b03166113f9611d54565b6001600160a01b03161461142057604051634755657960e01b815260040160405180910390fd5b6001600160a01b0382166114475760405163e6c4247b60e01b815260040160405180910390fd5b6114518282612dea565b5050565b61145d6124d8565b6001600160a01b031661146e611d54565b6001600160a01b03161461149557604051634755657960e01b815260040160405180910390fd5b611451828261302c565b6000611135611e88565b8360006114b4611e88565b90506114be611d54565b6001600160a01b0316826001600160a01b0316146114e2576114e230610a50611d54565b611123868686866124a3565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff166000811580156115395750825b905060008267ffffffffffffffff1660011480156115565750303b155b905081158015611564575080155b1561159b576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84547fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000016600117855583156115e657845468ff00000000000000001916680100000000000000001785555b60006115f06124d8565b6001600160a01b031614611630576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611639866130d3565b831561112357845468ff000000000000000019168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a1505050505050565b60606000611698836129ba565b6001600160a01b0316036116c257604051637e27328960e01b8152600481018390526024016109cb565b6116cb82613175565b6040516020016116db9190614dae565b6040516020818303038152906040529050919050565b6000611135613215565b6117036124d8565b6001600160a01b0316611714611d54565b6001600160a01b03161461173b57604051634755657960e01b815260040160405180910390fd5b6114518282613229565b61174d6124d8565b6001600160a01b031661175e611d54565b6001600160a01b03161461178557604051634755657960e01b815260040160405180910390fd5b610ec5816132e9565b600061098b8383612166565b6001600160a01b038a1615806117b757506001600160a01b038916155b156117d55760405163e6c4247b60e01b815260040160405180910390fd5b86851415806117e45750848314155b1561181b576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611825611d54565b90508a6001600160a01b0316816001600160a01b031614158015611850575061184e8b82612166565b155b15611879576040516322718ad960e21b81526001600160a01b03821660048201526024016109cb565b6000805b898110156119395760008b8b8381811061189957611899614e1a565b9050602002013590506118dd818b8b858181106118b8576118b8614e1a565b905060200201358a8a868181106118d1576118d1614e1a565b90506020020135612181565b61191a8e8e838d8d878181106118f5576118f5614e1a565b905060200201358c8c8881811061190e5761190e614e1a565b90506020020135612261565b6119248180614cbe565b61192e9084614e30565b92505060010161187d565b506119458c8c836123b0565b60008b6001600160a01b03163b11801561196357506119638b61334f565b15611aab5760008167ffffffffffffffff811115611983576119836148ee565b6040519080825280602002602001820160405280156119ac578160200160208202803683370190505b5090506000805b8b811015611a645760008d8d838181106119cf576119cf614e1a565b90506020020135905060005b6119e58280614cbe565b811015611a5a57611a2881838f8f87818110611a0357611a03614e1a565b905060200201358e8e88818110611a1c57611a1c614e1a565b9050602002013561337b565b858581518110611a3a57611a3a614e1a565b602090810291909101015283611a4f81614e43565b9450506001016119db565b50506001016119b3565b50611aa8848f8f858a8a8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506133b092505050565b50505b505050505050505050505050565b81611ac43082611c3b565b610d18848484612c70565b611ad76124d8565b6001600160a01b0316611ae8611d54565b6001600160a01b031614611b0f57604051634755657960e01b815260040160405180910390fd5b610ec5816134e6565b6000807fff00000000000000000000000000000000000000000000000000000000000000831615611b5f57604051637e27328960e01b8152600481018490526024016109cb565b6000611b6d61019885614e5d565b90506000611b7d61019886614ceb565b90506000611b8a86612bf6565b90507401000000000000000000000000000000000000000080821603611bc15760009450600160ff1b808216149350505050915091565b8015611bda57809450600160ff1b808216149350611c16565b611c0f600380611bea8682614cbe565b611bf49190614ceb565b6003611c008682614cbe565b611c0a9190614ceb565b6125aa565b9450600093505b505050915091565b6000818152603860205260408120546001600160a01b03166108c7565b6000611c45611e88565b90506001600160a01b0381163b15610a12576040517fc61711340000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152838116602483015282169063c617113490604401602060405180830381865afa925050508015611cda575060408051601f3d908101601f19168201909252611cd791810190614c55565b60015b611d14573d808015611d08576040519150601f19603f3d011682016040523d82523d6000602084013e611d0d565b606091505b5050611d22565b8015611d205750505050565b505b6040517f8a10919300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061113561356d565b611d6883826135ba565b506000611d73611d54565b90506000846001600160a01b0316826001600160a01b03161480611d9c5750611d9c8583612166565b905080611de0576040517fa9fbf51f0000000000000000000000000000000000000000000000000000000081526001600160a01b03831660048201526024016109cb565b6001600160a01b038416611dff57611dfa8386600061367f565b611e40565b611e0b8386600161367f565b6000838152603860205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386161790555b82846001600160a01b0316866001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050505050565b6000611135606c546001600160a01b031690565b6001600160a01b0386161580611eb957506001600160a01b038516155b15611ed75760405163e6c4247b60e01b815260040160405180910390fd5b6000611ee1611d54565b90506000876001600160a01b0316826001600160a01b03161480611f0a5750611f0a8883612166565b90508460005b81811015612054576000888883818110611f2c57611f2c614e1a565b905060200201359050600080611f4183611b18565b91509150816001600160a01b03168d6001600160a01b031614611f82576040516322718ad960e21b81526001600160a01b038e1660048201526024016109cb565b85158015611fb35750808015611fb15750866001600160a01b0316611fa684611c1e565b6001600160a01b0316145b155b15611ffc576040517f177e802f0000000000000000000000000000000000000000000000000000000081526001600160a01b0388166004820152602481018490526044016109cb565b612008838d600061367f565b828c6001600160a01b03168e6001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050600101611f10565b506120608989836123b0565b6001600160a01b0388163b15612104576120798861334f565b156120c4576120bf838a8a8a8a808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508c92506133b0915050565b612104565b83156121045760005b81811015612102576120fa848b8b8b8b868181106120ed576120ed614e1a565b905060200201358a6136e1565b6001016120cd565b505b505050505050505050565b6000612119611d54565b9050612127818585856137cc565b6000836001600160a01b03163b11801561214557506121458361334f565b15610d1857610d1881858585604051806020016040528060008152506136e1565b60006121728383613905565b8061098b575061098b826129cc565b82600114158015612193575082600314155b80156121a0575082600614155b80156121ad575082600c14155b80156121ba575082601814155b156121e957604051630699b5cb60e41b81526004810184905260248101839052604481018290526064016109cb565b6121f38383614e5d565b15158061220857506122058382614e5d565b15155b8061221d575061221a83610198614e71565b82115b80612232575061222f83610198614e71565b81115b15610a1257604051630699b5cb60e41b81526004810184905260248101839052604481018290526064016109cb565b826001036123125761019881028201600061227b826129ba565b90506001600160a01b0381166122b557604051630699b5cb60e41b81526004810186905260248101859052604481018490526064016109cb565b866001600160a01b0316816001600160a01b0316146122f2576040516322718ad960e21b81526001600160a01b03881660048201526024016109cb565b5060009081526036602052604090206001600160a01b0385169055612348565b612346858560405180606001604052808681526020018581526020018781525060016002886123419190614ceb565b613935565b505b60005b6123558480614cbe565b811015611123576123688185858561337b565b856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a460010161234b565b816001600160a01b0316836001600160a01b031614610a12576123d38382613b5d565b610a128282613b89565b6000856001600160a01b03163b1180156123fb57506123fb8561334f565b15610ffc57600061240c8580614cbe565b67ffffffffffffffff811115612424576124246148ee565b60405190808252806020026020018201604052801561244d578160200160208202803683370190505b50905060005b61245d8680614cbe565b811015612495576124708187878761337b565b82828151811061248257612482614e1a565b6020908102919091010152600101612453565b50610a9888888884866133b0565b60006124ad611d54565b90506124bb818686866137cc565b6001600160a01b0384163b15610ae657610ae681868686866136e1565b60006111356033546001600160a01b031690565b6001600160a01b0381166125135760405163e6c4247b60e01b815260040160405180910390fd5b7f3899f13de39885dfce849839be8330453b5866928dd0e5933e36794349628400805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831690811782556040517f03ce93da23cc307353ca8a7aac205697bd48963ee54982eacb40dd9d40a1d72990600090a25050565b6001600160a01b03811660009081526039602052604081205460ff166108c7565b60008060006125b886613bb5565b50909250905060006125fb61060a84896125d2818b614ceb565b6125dc9190614cbe565b8a6125e7818b614ceb565b6125f19190614cbe565b6101980291010190565b90506001600160a01b0381161561261657925061098b915050565b60188710156126345761262a8287876125aa565b935050505061098b565b5060009695505050505050565b600061264c85613bb5565b5050905060006126628286866101980291010190565b604080518181526108208101825291925060009190816020015b6126a060405180606001604052806000815260200160008152602001600081525090565b81526020019060019003908161267c57905050905060008060038911156126fb576126f58b60405180606001604052808b81526020018a81526020018c81525085848660028f6126f09190614ceb565b613cfa565b90925090505b60005b6127088a80614cbe565b8110156128c957600061271d828c8c8c61337b565b9050600061275786604051806060016040528061273986612b59565b815260200161274786612b2a565b8152602001600181525087613eb0565b905080156127a557818d6001600160a01b03168f6001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46128bf565b8d6001600160a01b03166127b883611203565b6001600160a01b03160361285c5760006127d183611c1e565b6001600160a01b031614612809576000828152603860205260409020805473ffffffffffffffffffffffffffffffffffffffff191690555b612814600185614e30565b9350818d6001600160a01b03168f6001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46128bf565b61286582612bf6565b15612886576040516314b27b7f60e31b8152600481018390526024016109cb565b60405182906001600160a01b038f16906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45b50506001016126fe565b506128db8b8484848e8e8e8e8e613f69565b60008481526036602052604090206001600160a01b038b1690556129088a6129038b80614cbe565b613b89565b6129128b82613b5d565b5050505050505050505050565b7ff7bae505580fc5d233bb20f4fb93f39f43d44ecc81ed63dd6455097b4c455000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831690811782556040517f1ad03d64d67ed9b2c90cfdf8dc8e54de3e41af88ae55e45a53dc27e476406de890600090a25050565b600061299f613215565b6001600160a01b0316826001600160a01b0316149050919050565b60006129c582611b18565b5092915050565b6001600160a01b03811660009081526034602052604081205460ff166108c7565b6001600160a01b038516612a145760405163e6c4247b60e01b815260040160405180910390fd5b6000612a1f85613bb5565b505090506000612a358286866101980291010190565b9050612a4486868660186141ba565b60005b612a518780614cbe565b811015612ad3576000612a668289898961337b565b9050612a7181612bf6565b15612a92576040516314b27b7f60e31b8152600481018290526024016109cb565b60405181906001600160a01b038b16906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a450600101612a47565b5060008181526036602052604090206001600160a01b0388169055612afc876129038880614cbe565b610a9888600089898989896123dd565b6001600160a01b0381166000908152603560205260408120546108c7565b60006108c76101987effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8416614ceb565b60006108c76101987effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8416614e5d565b6000612b926124d8565b90506001600160a01b038116612bbb5760405163e6c4247b60e01b815260040160405180910390fd5b816001600160a01b0316816001600160a01b031603612bed5760405163a9cb9e0d60e01b815260040160405180910390fd5b611451826130d3565b6000818152603660205260408120546108c7565b612c3981606c805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831617905550565b6040516001600160a01b038216907fc6df119c56c99171b170652a3c4750ba46dcaacbdb3b7ab4847a9fa339659bd490600090a250565b6001600160a01b038316612cbb576040517f73c6ac6e0000000000000000000000000000000000000000000000000000000081526001600160a01b03841660048201526024016109cb565b6000612cc5611d54565b9050836001600160a01b0316816001600160a01b031614158015612cef5750612ced816129cc565b155b15612d31576040517fa9fbf51f0000000000000000000000000000000000000000000000000000000081526001600160a01b03821660048201526024016109cb565b612d3a836129cc565b15612d7c576040517f5b08ba180000000000000000000000000000000000000000000000000000000081526001600160a01b03841660048201526024016109cb565b6001600160a01b03848116600081815260376020908152604080832094881680845294825291829020805460ff191687151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a350505050565b6000612df4611e88565b90506001600160a01b0381163b15612fe2576040517fc3c5a5470000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0382169063c3c5a547906024016020604051808303816000875af1158015612e65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e899190614c55565b612fe2578115612f13576040517f7d3e3dbe0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038481166024830152821690637d3e3dbe906044015b600060405180830381600087803b158015612ef657600080fd5b505af1158015612f0a573d6000803e3d6000fd5b50505050612fe2565b6001600160a01b03831615612f6f576040517fa0af29030000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03848116602483015282169063a0af290390604401612edc565b6040517f4420e4860000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03821690634420e48690602401600060405180830381600087803b158015612fc957600080fd5b505af1158015612fdd573d6000803e3d6000fd5b505050505b826001600160a01b03167f3c7a9c847c035e45b84027e44ad55724873d5921b3a6abb8c0926b415d9241b18360405161301f911515815260200190565b60405180910390a2505050565b6001600160a01b0382166130535760405163e6c4247b60e01b815260040160405180910390fd5b61305c826129cc565b15158115150361307f5760405163a9cb9e0d60e01b815260040160405180910390fd5b6001600160a01b038216600081815260346020526040808220805460ff191685151590811790915590519092917f44f92d27abdf4cfb6a7d712c3af68f3be086d4ca747ab802c36f67d6790060d891a35050565b6001600160a01b0381166130fa5760405163e6c4247b60e01b815260040160405180910390fd5b60006131046124d8565b9050816001600160a01b0316816001600160a01b03167f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f60405160405180910390a3611451826033805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831617905550565b60606000613182836142d4565b600101905060008167ffffffffffffffff8111156131a2576131a26148ee565b6040519080825280601f01601f1916602001820160405280156131cc576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85049450846131d657509392505050565b6000611135606b546001600160a01b031690565b6001600160a01b0382166132505760405163e6c4247b60e01b815260040160405180910390fd5b61325982612589565b15158115150361327c5760405163a9cb9e0d60e01b815260040160405180910390fd5b6001600160a01b0382166000908152603960205260409020805460ff1916821515179055816001600160a01b03167fff452b3b9159b024a9098f0058c63eccd90d36b3584608202800d662f962bb60826040516132dd911515815260200190565b60405180910390a25050565b61331881606b805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831617905550565b6040516001600160a01b038216907fd91237492a9e30cd2faf361fc103998a382ff0ec2b1b07dc1cbebb76ae2f1ea290600090a250565b60006108c7827f5e8bf644000000000000000000000000000000000000000000000000000000006143b6565b600061019884868161338f5761338f614cd5565b048301028486816133a2576133a2614cd5565b068401019050949350505050565b6040517f4b808c460000000000000000000000000000000000000000000000000000000081526001600160a01b03841690634b808c46906133fb908890889087908790600401614e84565b6020604051808303816000875af1925050508015613436575060408051601f3d908101601f1916820190925261343391810190614efc565b60015b613470573d808015613464576040519150601f19603f3d011682016040523d82523d6000602084013e613469565b606091505b50506134a9565b7fb47f73ba000000000000000000000000000000000000000000000000000000006001600160e01b03198216016134a75750610ae6565b505b6040517f64a0ae920000000000000000000000000000000000000000000000000000000081526001600160a01b03841660048201526024016109cb565b7f1836e2fa424a35b79c13fd66f8e282cb3a31513f9610d6e7a99baf7ffe56ec0080546040516001600160a01b038481169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600061357833612995565b8015613585575060143610155b156135b557507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c90565b503390565b60006001600160a01b038316613607576040517f73c6ac6e0000000000000000000000000000000000000000000000000000000081526001600160a01b03841660048201526024016109cb565b60008061361384611b18565b90925090506001600160a01b03821661364257604051637e27328960e01b8152600481018590526024016109cb565b816001600160a01b0316856001600160a01b0316146109e3576040516322718ad960e21b81526001600160a01b03861660048201526024016109cb565b60006001600160a01b03831661369a6001600160ff1b614e71565b73ffffffffffffffffffffffffffffffffffffffff19166136ba86612bf6565b1617905081156136cb57600160ff1b175b6000848152603660205260409020819055610d18565b6040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0384169063150b7a029061372c908890889087908790600401614f19565b6020604051808303816000875af1925050508015613767575060408051601f3d908101601f1916820190925261376491810190614efc565b60015b613795573d808015613464576040519150601f19603f3d011682016040523d82523d6000602084013e613469565b7feaf485fe000000000000000000000000000000000000000000000000000000006001600160e01b03198216016134a75750610ae6565b6001600160a01b0382166137f35760405163e6c4247b60e01b815260040160405180910390fd5b60006137ff84836135ba565b90506000846001600160a01b0316866001600160a01b0316148061382857506138288587612166565b90508015801561385b57508180156138595750856001600160a01b031661384e84611c1e565b6001600160a01b0316145b155b156138a4576040517f177e802f0000000000000000000000000000000000000000000000000000000081526001600160a01b0387166004820152602481018490526044016109cb565b6138b0858560016123b0565b6138bc8385600061367f565b82846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050505050565b6001600160a01b03808316600090815260376020908152604080832093851683529290529081205460ff1661098b565b60008060006139478660400151613bb5565b9250509150600061396683886000015189602001516101980291010190565b87519091506001905b604089015189516139809190614e30565b811015613ac15760208901515b89604001518a602001516139a19190614e30565b811015613aaf5760008060038a10156139cf576139bf8e858561446e565b80156139c85750845b9050613a84565b6139fe8e8e60405180606001604052808881526020018781526020018e815250600060028f6123419190614ceb565b9050610198830287850101613a1281612bf6565b92508215613a825781158015613a3157508e6001600160a01b03168314155b15613a72576040517fc1194ebf00000000000000000000000000000000000000000000000000000000815260048101869052602481018590526044016109cb565b6000818152603660205260408120555b505b8080613a8f57508115155b8015613a985750845b945050508781613aa89190614e30565b905061398d565b50613aba8782614e30565b905061396f565b508615613b4e5780158015613afe5750896001600160a01b0316613af289604001518a600001518b602001516125aa565b6001600160a01b031614155b15613b27576040516322718ad960e21b81526001600160a01b038b1660048201526024016109cb565b60008281526036602052604090206001600160a01b038a1690556001945050505050613b54565b93505050505b95945050505050565b6114518282613b6b85612b0c565b036001600160a01b0391909116600090815260356020526040902055565b6114518282613b9785612b0c565b016001600160a01b0391909116600090815260356020526040902055565b600080600083600103613bcf5760009250600391506113ce565b83600303613c03577f01000000000000000000000000000000000000000000000000000000000000009250600691506113ce565b83600603613c5957507f02000000000000000000000000000000000000000000000000000000000000009150600c90507f01000000000000000000000000000000000000000000000000000000000000006113ce565b83600c03613caf57507f03000000000000000000000000000000000000000000000000000000000000009150601890507f02000000000000000000000000000000000000000000000000000000000000006113ce565b507f0400000000000000000000000000000000000000000000000000000000000000939092507f03000000000000000000000000000000000000000000000000000000000000009150565b6000806000613d0884613bb5565b50509050600088604001518960000151613d229190614e30565b9050600089604001518a60200151613d3a9190614e30565b8a519091505b82811015613e765760208b01515b82811015613e64576000613d7d8c60405180606001604052808681526020018581526020018c8152508c613eb0565b905080613e52576101988202868401016000613d9882611203565b90508f6001600160a01b0316816001600160a01b031603613e245760405180606001604052808681526020018581526020018c8152508e8d81518110613de057613de0614e1a565b60200260200101819052508b80613df690614e43565b9c50613e0490508b80614cbe565b613e0e908e614e30565b6000838152603660205260408120559c50613e4f565b6001600160a01b03811615613e4f576040516314b27b7f60e31b8152600481018390526024016109cb565b50505b50613e5d8882614e30565b9050613d4e565b50613e6f8782614e30565b9050613d40565b50613e82600287614ceb565b955060038610613e9f57613e9a8b8b8b8b8b8b613cfa565b985096505b509499959850949650505050505050565b6000805b82811015613f5e576000858281518110613ed057613ed0614e1a565b6020026020010151905084604001518160400151118015613ef357508051855110155b8015613f0f575060408101518151613f0b9190614e30565b8551105b8015613f2357508060200151856020015110155b8015613f45575080604001518160200151613f3e9190614e30565b8560200151105b15613f555760019250505061098b565b50600101613eb4565b506000949350505050565b6000856001600160a01b03163b118015613f875750613f878561334f565b1561415c5760008667ffffffffffffffff811115613fa757613fa76148ee565b604051908082528060200260200182016040528015613fd0578160200160208202803683370190505b50905060008088613fe18880614cbe565b613feb9190614e71565b67ffffffffffffffff811115614003576140036148ee565b60405190808252806020026020018201604052801561402c578160200160208202803683370190505b5090506000805b61403d8980614cbe565b811015614137576000614052828b8b8b61337b565b905061408a8e604051806060016040528061406c85612b59565b815260200161407a85612b2a565b815260200160018152508f613eb0565b156140bf57808686815181106140a2576140a2614e1a565b6020908102919091010152846140b781614e43565b95505061412e565b8e6001600160a01b03166140d282611203565b6001600160a01b03160361410257600081815260366020526040812055808686815181106140a2576140a2614e1a565b8084848151811061411557614115614e1a565b60209081029190910101528261412a81614e43565b9350505b50600101614033565b506141468d60008b85896133b0565b6141538d8e8b87896133b0565b50505050612104565b60005b6141698580614cbe565b81101561210257600061417e8287878761337b565b90508a6001600160a01b031661419382611203565b6001600160a01b0316036141b1576000818152603660205260408120555b5060010161415f565b60006141c582613bb5565b505090508185116142285760006141f682846141e18189614ceb565b6141eb9190614cbe565b856125e78189614ceb565b905061420181612bf6565b15614222576040516314b27b7f60e31b8152600481018290526024016109cb565b506142b3565b60006142348686614e30565b905060006142428786614e30565b9050855b828110156142af57855b8281101561429d5761019881028583010161426a81612bf6565b1561428b576040516314b27b7f60e31b8152600481018290526024016109cb565b506142968682614e30565b9050614250565b506142a88582614e30565b9050614246565b5050505b6142be600283614ceb565b915060038210610ae657610ae6858585856141ba565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831061431d577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310614349576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061436757662386f26fc10000830492506010015b6305f5e100831061437f576305f5e100830492506008015b612710831061439357612710830492506004015b606483106143a5576064830492506002015b600a83106108c75760010192915050565b6040516001600160e01b031982166024820152600090819060440160408051601f19818403018152919052602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01ffc9a700000000000000000000000000000000000000000000000000000000178152825192935060009283928392909183918a617530fa92503d91506000519050828015614457575060208210155b80156144635750600081115b979650505050505050565b6000610198820283018161448182612bf6565b905080156145385774010000000000000000000000000000000000000000808216036144e3576040517fc1194ebf00000000000000000000000000000000000000000000000000000000815260048101869052602481018590526044016109cb565b856001600160a01b0316816001600160a01b031614614520576040516322718ad960e21b81526001600160a01b03871660048201526024016109cb565b5060009081526036602052604081205550600161098b565b50600095945050505050565b6001600160e01b031981168114610ec557600080fd5b60006020828403121561456c57600080fd5b813561098b81614544565b60006020828403121561458957600080fd5b5035919050565b60005b838110156145ab578181015183820152602001614593565b50506000910152565b600081518084526145cc816020860160208601614590565b601f01601f19169290920160200192915050565b60208152600061098b60208301846145b4565b6001600160a01b0381168114610ec557600080fd5b80356110bd816145f3565b6000806040838503121561462657600080fd5b8235614631816145f3565b946020939093013593505050565b60008083601f84011261465157600080fd5b50813567ffffffffffffffff81111561466957600080fd5b6020830191508360208260051b8501011115610c3d57600080fd5b60008083601f84011261469657600080fd5b50813567ffffffffffffffff8111156146ae57600080fd5b602083019150836020828501011115610c3d57600080fd5b600080600080600080608087890312156146df57600080fd5b86356146ea816145f3565b955060208701356146fa816145f3565b9450604087013567ffffffffffffffff8082111561471757600080fd5b6147238a838b0161463f565b9096509450606089013591508082111561473c57600080fd5b5061474989828a01614684565b979a9699509497509295939492505050565b60008060006060848603121561477057600080fd5b833561477b816145f3565b9250602084013561478b816145f3565b929592945050506040919091013590565b600080604083850312156147af57600080fd5b50508035926020909101359150565b600080600080600080600060c0888a0312156147d957600080fd5b87356147e4816145f3565b965060208801356147f4816145f3565b955060408801359450606088013593506080880135925060a088013567ffffffffffffffff81111561482557600080fd5b6148318a828b01614684565b989b979a50959850939692959293505050565b60006020828403121561485657600080fd5b813561098b816145f3565b60008060008060008060a0878903121561487a57600080fd5b8635614885816145f3565b9550602087013594506040870135935060608701359250608087013567ffffffffffffffff8111156148b657600080fd5b61474989828a01614684565b6000806000606084860312156148d757600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561492d5761492d6148ee565b604052919050565b600067ffffffffffffffff82111561494f5761494f6148ee565b50601f01601f191660200190565b600082601f83011261496e57600080fd5b813561498161497c82614935565b614904565b81815284602083860101111561499657600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312156149cb57600080fd5b85356149d6816145f3565b9450602086013593506040860135925060608601359150608086013567ffffffffffffffff811115614a0757600080fd5b614a138882890161495d565b9150509295509295909350565b8015158114610ec557600080fd5b60008060408385031215614a4157600080fd5b8235614a4c816145f3565b91506020830135614a5c81614a20565b809150509250929050565b8315158152826020820152606060408201526000613b5460608301846145b4565b60008060008060808587031215614a9e57600080fd5b8435614aa9816145f3565b93506020850135614ab9816145f3565b925060408501359150606085013567ffffffffffffffff811115614adc57600080fd5b614ae88782880161495d565b91505092959194509250565b60008060408385031215614b0757600080fd5b8235614b12816145f3565b91506020830135614a5c816145f3565b60008060008060008060008060008060c08b8d031215614b4157600080fd5b614b4a8b614608565b9950614b5860208c01614608565b985060408b013567ffffffffffffffff80821115614b7557600080fd5b614b818e838f0161463f565b909a50985060608d0135915080821115614b9a57600080fd5b614ba68e838f0161463f565b909850965060808d0135915080821115614bbf57600080fd5b614bcb8e838f0161463f565b909650945060a08d0135915080821115614be457600080fd5b50614bf18d828e01614684565b915080935050809150509295989b9194979a5092959850565b600080600060608486031215614c1f57600080fd5b8335614c2a816145f3565b92506020840135614c3a816145f3565b91506040840135614c4a81614a20565b809150509250925092565b600060208284031215614c6757600080fd5b815161098b81614a20565b60008060408385031215614c8557600080fd5b8251614c90816145f3565b602084015190925061ffff81168114614a5c57600080fd5b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176108c7576108c7614ca8565b634e487b7160e01b600052601260045260246000fd5b600082614cfa57614cfa614cd5565b500490565b600060208284031215614d1157600080fd5b5051919050565b600080600060608486031215614d2d57600080fd5b8351614d3881614a20565b60208501516040860151919450925067ffffffffffffffff811115614d5c57600080fd5b8401601f81018613614d6d57600080fd5b8051614d7b61497c82614935565b818152876020838501011115614d9057600080fd5b614da1826020830160208601614590565b8093505050509250925092565b7f68747470733a2f2f6170692e73616e64626f782e67616d652f6c616e64732f00815260008251614de681601f850160208701614590565b7f2f6d657461646174612e6a736f6e000000000000000000000000000000000000601f939091019283015250602d01919050565b634e487b7160e01b600052603260045260246000fd5b808201808211156108c7576108c7614ca8565b60006000198203614e5657614e56614ca8565b5060010190565b600082614e6c57614e6c614cd5565b500690565b818103818111156108c7576108c7614ca8565b6000608082016001600160a01b0380881684526020818816602086015260806040860152829150865180845260a08601925060208801935060005b81811015614edb57845184529382019392820192600101614ebf565b5050508381036060850152614ef081866145b4565b98975050505050505050565b600060208284031215614f0e57600080fd5b815161098b81614544565b60006001600160a01b03808716835280861660208401525083604083015260806060830152614f4b60808301846145b4565b969550505050505056fea26469706673582212204a3b78739832b8af66fab98134773d03c3eed4dc07fc7e561f42c69168ca6f2964736f6c63430008170033",
  "devdoc": {
    "author": "The Sandbox",
    "custom:security-contact": "contact-blockchain@sandbox.game",
    "details": "We use the storage mixing for historical reasons.There is a difference between L1 and L2 storage slots order and we want to upgrade the contract.This contract uses the exact storage slots configuration that we have in `core` package so we can upgradePolygonLandStorageMixin must be the first one in the inheritance chain for subclasses",
    "errors": {
      "AlreadyMinted(uint256)": [
        {
          "params": {
            "tokenId": "the id of land"
          }
        }
      ],
      "ERC721IncorrectOwner(address,uint256,address)": [
        {
          "details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
          "params": {
            "owner": "Address of the current owner of a token.",
            "sender": "Address whose tokens are being transferred.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC721InsufficientApproval(address,uint256)": [
        {
          "details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC721InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC721InvalidOperator(address)": [
        {
          "details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC721InvalidOwner(address)": [
        {
          "details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.",
          "params": {
            "owner": "Address of the current owner of a token."
          }
        }
      ],
      "ERC721InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC721InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC721NonexistentToken(uint256)": [
        {
          "details": "Indicates a `tokenId` whose `owner` is the zero address.",
          "params": {
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "InvalidCoordinates(uint256,uint256,uint256)": [
        {
          "params": {
            "size": "The size of the quad",
            "x": "The bottom left x coordinate of the quad",
            "y": "The bottom left y coordinate of the quad"
          }
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "NotOwner(uint256,uint256)": [
        {
          "params": {
            "x": "The bottom left x coordinate of the quad",
            "y": "The bottom left y coordinate of the quad"
          }
        }
      ]
    },
    "events": {
      "AdminChanged(address,address)": {
        "params": {
          "newAdmin": "The address of the new administrator.",
          "oldAdmin": "The address of the previous administrator."
        }
      },
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "ContractRegistered(address,bool)": {
        "params": {
          "subscribe": "should it subscribe",
          "subscriptionOrRegistrant": "address to subscribe or copy entries from"
        }
      },
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "MetadataRegistrySet(address)": {
        "params": {
          "metadataRegistry": "the address of the metadata registry"
        }
      },
      "OperatorRegistrySet(address)": {
        "params": {
          "registry": "address of the registry to set"
        }
      },
      "OwnershipTransferred(address,address)": {
        "params": {
          "newOwner": "The new address of the owner.",
          "previousOwner": "The old address of the owner."
        }
      },
      "RoyaltyManagerSet(address)": {
        "params": {
          "royaltyManager": "the address of royalty manager contract."
        }
      },
      "SuperOperator(address,bool)": {
        "params": {
          "enabled": "set whether the superOperator is enabled or disabled.",
          "superOperator": "address that will be given/removed superOperator right."
        }
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      },
      "TrustedForwarderSet(address)": {
        "params": {
          "newForwarder": "the new trusted forwarder"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "params": {
          "operator": "The address receiving the approval",
          "tokenId": "The id of the token"
        }
      },
      "approveFor(address,address,uint256)": {
        "params": {
          "operator": "The address receiving the approval",
          "sender": "The address giving the approval",
          "tokenId": "The id of the token"
        }
      },
      "balanceOf(address)": {
        "params": {
          "owner": "The address to look for."
        },
        "returns": {
          "_0": "The number of tokens owned by the address."
        }
      },
      "batchTransferFrom(address,address,uint256[],bytes)": {
        "params": {
          "data": "Additional data.",
          "from": "The sender of the token.",
          "ids": "The ids of the tokens.",
          "to": "The recipient of the token."
        }
      },
      "batchTransferQuad(address,address,uint256[],uint256[],uint256[],bytes)": {
        "params": {
          "data": "additional data",
          "from": "current owner of the quad",
          "sizes": "list of sizes for each quad",
          "to": "destination",
          "xs": "list of bottom left x coordinates for each quad",
          "ys": "list of bottom left y coordinates for each quad"
        }
      },
      "changeAdmin(address)": {
        "details": "Change the administrator to be `newAdmin`.",
        "params": {
          "newAdmin": "The address of the new administrator."
        }
      },
      "exists(uint256,uint256,uint256)": {
        "params": {
          "size": "The size of the quad",
          "x": "The bottom left x coordinate of the quad",
          "y": "The bottom left y coordinate of the quad"
        },
        "returns": {
          "_0": "bool for if Land has been minted or not"
        }
      },
      "getAdmin()": {
        "details": "Get the current administrator of this contract.",
        "returns": {
          "_0": "The current administrator of this contract."
        }
      },
      "getApproved(uint256)": {
        "params": {
          "tokenId": "The id of the token."
        },
        "returns": {
          "_0": "The address of the operator."
        }
      },
      "getMetadata(uint256)": {
        "params": {
          "tokenId": "the token id"
        },
        "returns": {
          "_0": "premium true if the land is premium",
          "_1": "neighborhoodId the number that identifies the neighborhood",
          "_2": "neighborhoodName the neighborhood name"
        }
      },
      "getMetadataRegistry()": {
        "returns": {
          "_0": "The address of the Metadata Registry"
        }
      },
      "getNeighborhoodId(uint256)": {
        "params": {
          "tokenId": "the token id"
        }
      },
      "getOwnerData(uint256)": {
        "details": "for debugging purposes",
        "params": {
          "tokenId": "The id of the Land"
        },
        "returns": {
          "_0": "the owner data (address + burn flag + operatorEnabled)"
        }
      },
      "getRoyaltyManager()": {
        "returns": {
          "_0": "the address of royalty manager contract."
        }
      },
      "getTrustedForwarder()": {
        "returns": {
          "_0": "trustedForwarder address of the trusted forwarder"
        }
      },
      "getX(uint256)": {
        "params": {
          "tokenId": "the id of land"
        },
        "returns": {
          "_0": "the x coordinates"
        }
      },
      "getY(uint256)": {
        "params": {
          "tokenId": "the id of land"
        },
        "returns": {
          "_0": "the y coordinates"
        }
      },
      "height()": {
        "returns": {
          "_0": "height"
        }
      },
      "initialize(address)": {
        "params": {
          "admin": "Admin of the contract"
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "operator": "The address of the operator.",
          "owner": "The address of the owner."
        },
        "returns": {
          "_0": "isOperator The status of the approval."
        }
      },
      "isMinter(address)": {
        "params": {
          "who": "The address to query."
        },
        "returns": {
          "_0": "whether the address has minter rights."
        }
      },
      "isPremium(uint256)": {
        "params": {
          "tokenId": "the token id"
        }
      },
      "isSuperOperator(address)": {
        "params": {
          "superOperator": "the operator address to check"
        },
        "returns": {
          "_0": "true if an address is a super-operator"
        }
      },
      "isTrustedForwarder(address)": {
        "params": {
          "forwarder": "address to check"
        },
        "returns": {
          "_0": "is trusted"
        }
      },
      "mintAndTransferQuad(address,uint256,uint256,uint256,bytes)": {
        "params": {
          "data": "extra data to pass to the transfer",
          "size": "The size of the new quad",
          "to": "The recipient of the new quad",
          "x": "The bottom left x coordinate of the new quad",
          "y": "The bottom left y coordinate of the new quad"
        }
      },
      "mintQuad(address,uint256,uint256,uint256,bytes)": {
        "params": {
          "data": "extra data to pass to the transfer",
          "size": "The size of the new quad",
          "to": "The recipient of the new quad",
          "x": "The bottom left x coordinate of the new quad",
          "y": "The bottom left y coordinate of the new quad"
        }
      },
      "name()": {
        "returns": {
          "_0": "The name of the token contract"
        }
      },
      "operatorFilterRegistry()": {
        "returns": {
          "_0": "the address of  the operator filter registry"
        }
      },
      "owner()": {
        "returns": {
          "_0": "The address of the owner."
        }
      },
      "ownerOf(uint256)": {
        "params": {
          "tokenId": "The id of the token."
        },
        "returns": {
          "owner": "The address of the token owner."
        }
      },
      "register(address,bool)": {
        "params": {
          "subscribe": "bool to signify subscription 'true' or to copy the list 'false'.",
          "subscriptionOrRegistrantToCopy": "registration address of the list to subscribe."
        }
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "tokenId is one of the EIP2981 args for this function can't be removed",
        "params": {
          "salePrice": "the price of token on which the royalty is calculated"
        },
        "returns": {
          "receiver": "the receiver of royalty",
          "royaltyAmount": "the amount of royalty"
        }
      },
      "safeBatchTransferFrom(address,address,uint256[],bytes)": {
        "params": {
          "data": "Additional data.",
          "from": "The sender of the token.",
          "ids": "The ids of the tokens.",
          "to": "The recipient of the token."
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "params": {
          "from": "The sender of the token",
          "to": "The recipient of the token",
          "tokenId": "The id of the token"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "params": {
          "data": "Additional data",
          "from": "The sender of the token",
          "to": "The recipient of the token",
          "tokenId": "The id of the token"
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "approved": "The determination of the approval",
          "operator": "The address receiving the approval"
        }
      },
      "setApprovalForAllFor(address,address,bool)": {
        "params": {
          "approved": "The determination of the approval",
          "operator": "The address receiving the approval",
          "sender": "The address giving the approval"
        }
      },
      "setMetadataRegistry(address)": {
        "params": {
          "metadataRegistry": "The address of the Metadata Registry"
        }
      },
      "setMinter(address,bool)": {
        "params": {
          "enabled": "set whether the minter is enabled or disabled.",
          "minter": "address that will be given/removed minter right."
        }
      },
      "setOperatorRegistry(address)": {
        "params": {
          "registry": "the address of the registry"
        }
      },
      "setRoyaltyManager(address)": {
        "params": {
          "royaltyManager": "address of the manager contract for common royalty recipient"
        }
      },
      "setSuperOperator(address,bool)": {
        "params": {
          "enabled": "set whether the superOperator is enabled or disabled.",
          "superOperator": "address that will be given/removed superOperator right."
        }
      },
      "setTrustedForwarder(address)": {
        "params": {
          "trustedForwarder": "The new trustedForwarder"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "The id of the interface"
        },
        "returns": {
          "_0": "True if the interface is supported"
        }
      },
      "symbol()": {
        "returns": {
          "_0": "The symbol of the token contract"
        }
      },
      "tokenURI(uint256)": {
        "params": {
          "tokenId": "The id of the token"
        },
        "returns": {
          "_0": "The URI of the token"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "from": "The sender of the token",
          "to": "The recipient of the token",
          "tokenId": "The id of the token"
        }
      },
      "transferOwnership(address)": {
        "params": {
          "newOwner": "address of new owner"
        }
      },
      "transferQuad(address,address,uint256,uint256,uint256,bytes)": {
        "params": {
          "data": "additional data for transfer",
          "from": "current owner of the quad",
          "size": "The size of the quad",
          "to": "destination",
          "x": "The bottom left x coordinate of the quad",
          "y": "The bottom left y coordinate of the quad"
        }
      },
      "width()": {
        "returns": {
          "_0": "width"
        }
      }
    },
    "title": "LAND token on L2",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "AlreadyMinted(uint256)": [
        {
          "notice": "the token is already minted"
        }
      ],
      "InvalidAddress()": [
        {
          "notice": "an address passed as argument is invalid"
        }
      ],
      "InvalidArgument()": [
        {
          "notice": "an argument passed is invalid"
        }
      ],
      "InvalidCoordinates(uint256,uint256,uint256)": [
        {
          "notice": "the coordinates are invalid"
        }
      ],
      "InvalidLength()": [
        {
          "notice": "an array argument has an invalid length"
        }
      ],
      "NotOwner(uint256,uint256)": [
        {
          "notice": "is not the owner of the quad"
        }
      ],
      "OnlyAdmin()": [
        {
          "notice": "only admin can call this function"
        }
      ],
      "OperatorNotAllowed()": [
        {
          "notice": "the caller is not the operator"
        }
      ]
    },
    "events": {
      "AdminChanged(address,address)": {
        "notice": "Emits when the contract administrator is changed."
      },
      "ContractRegistered(address,bool)": {
        "notice": "emitted when the contract is registered into the registry"
      },
      "MetadataRegistrySet(address)": {
        "notice": "emitted when the metadata registry is set"
      },
      "OperatorRegistrySet(address)": {
        "notice": "emitted when a registry is set"
      },
      "OwnershipTransferred(address,address)": {
        "notice": "emitted when the ownership of the contract is changed"
      },
      "RoyaltyManagerSet(address)": {
        "notice": "emitted when the royalty manager is set"
      },
      "TrustedForwarderSet(address)": {
        "notice": "emitted when a new trusted forwarder is set"
      }
    },
    "kind": "user",
    "methods": {
      "UNKNOWN_NEIGHBORHOOD()": {
        "notice": "value returned when the neighborhood is not set yet."
      },
      "approve(address,uint256)": {
        "notice": "Approve an operator to spend tokens on the sender behalf"
      },
      "approveFor(address,address,uint256)": {
        "notice": "Approve an operator to spend tokens on the sender behalf"
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens owned by an address."
      },
      "batchTransferFrom(address,address,uint256[],bytes)": {
        "notice": "Transfer many tokens between 2 addresses."
      },
      "batchTransferQuad(address,address,uint256[],uint256[],uint256[],bytes)": {
        "notice": "transfer multiple quad (aligned to a quad tree with size 3, 6, 12 or 24 only)"
      },
      "changeAdmin(address)": {
        "notice": "Change the admin of the contract"
      },
      "exists(uint256,uint256,uint256)": {
        "notice": "checks if Land has been minted or not"
      },
      "getAdmin()": {
        "notice": "Get the current admin"
      },
      "getApproved(uint256)": {
        "notice": "Get the approved operator for a specific token."
      },
      "getMetadata(uint256)": {
        "notice": "return the metadata for one land"
      },
      "getMetadataRegistry()": {
        "notice": "Get the address of the Metadata Registry"
      },
      "getNeighborhoodId(uint256)": {
        "notice": "return the id that identifies the neighborhood"
      },
      "getOwnerData(uint256)": {
        "notice": "Return the internal owner data of a Land"
      },
      "getRoyaltyManager()": {
        "notice": "returns the royalty manager"
      },
      "getTrustedForwarder()": {
        "notice": "Get the current trusted forwarder"
      },
      "getX(uint256)": {
        "notice": "x coordinate of Land token"
      },
      "getY(uint256)": {
        "notice": "y coordinate of Land token"
      },
      "height()": {
        "notice": "total height of the map"
      },
      "initialize(address)": {
        "notice": "Initializes the contract with the meta-transaction contract, admin & royalty-manager"
      },
      "isApprovedForAll(address,address)": {
        "notice": "Check if the sender approved the operator."
      },
      "isMinter(address)": {
        "notice": "check whether address `who` is given minter rights."
      },
      "isPremium(uint256)": {
        "notice": "return true if a land is premium"
      },
      "isSuperOperator(address)": {
        "notice": "check if an address is a super-operator"
      },
      "isTrustedForwarder(address)": {
        "notice": "Checks if an address is a trusted forwarder"
      },
      "mintAndTransferQuad(address,uint256,uint256,uint256,bytes)": {
        "notice": "Checks if a parent quad has child quads already minted.Then mints the rest child quads and transfers the parent quad.Should only be called by the tunnel."
      },
      "mintQuad(address,uint256,uint256,uint256,bytes)": {
        "notice": "Mint a new quad (aligned to a quad tree with size 1, 3, 6, 12 or 24 only)"
      },
      "name()": {
        "notice": "Return the name of the token contract"
      },
      "operatorFilterRegistry()": {
        "notice": "return the address of the operator filter registry"
      },
      "owner()": {
        "notice": "Get the address of the owner"
      },
      "ownerOf(uint256)": {
        "notice": "Get the owner of a token."
      },
      "register(address,bool)": {
        "notice": "This function is used to register Land contract on the Operator Filterer Registry of Opensea."
      },
      "royaltyInfo(uint256,uint256)": {
        "notice": "Returns how much royalty is owed and to whom based on ERC2981"
      },
      "safeBatchTransferFrom(address,address,uint256[],bytes)": {
        "notice": "Transfer many tokens between 2 addresses, while ensuring the receiving contract has a receiver method."
      },
      "safeTransferFrom(address,address,uint256)": {
        "notice": "Transfer a token between 2 addresses letting the receiver knows of the transfer"
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "Transfer a token between 2 addresses letting the receiver knows of the transfer"
      },
      "setApprovalForAll(address,bool)": {
        "notice": "Set the approval for an operator to manage all the tokens of the sender"
      },
      "setApprovalForAllFor(address,address,bool)": {
        "notice": "Set the approval for an operator to manage all the tokens of the sender"
      },
      "setMetadataRegistry(address)": {
        "notice": "sets address of the Metadata Registry"
      },
      "setMinter(address,bool)": {
        "notice": "Enable or disable the ability of `minter` to mint tokens"
      },
      "setOperatorRegistry(address)": {
        "notice": "sets filter registry address deployed in test"
      },
      "setRoyaltyManager(address)": {
        "notice": "set royalty manager"
      },
      "setSuperOperator(address,bool)": {
        "notice": "Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights)."
      },
      "setTrustedForwarder(address)": {
        "notice": "Change the address of the trusted forwarder for meta-TX"
      },
      "supportsInterface(bytes4)": {
        "notice": "Check if the contract supports an interface"
      },
      "symbol()": {
        "notice": "Return the symbol of the token contract"
      },
      "tokenURI(uint256)": {
        "notice": "Return the URI of a specific token"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer a token between 2 addresses"
      },
      "transferOwnership(address)": {
        "notice": "Set the address of the new owner of the contract"
      },
      "transferQuad(address,address,uint256,uint256,uint256,bytes)": {
        "notice": "transfer one quad (aligned to a quad tree with size 3, 6, 12 or 24 only)"
      },
      "width()": {
        "notice": "total width of the map"
      }
    },
    "notice": "LAND contract on L2",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11194,
        "contract": "@sandbox-smart-contracts/land/contracts/PolygonLand.sol:PolygonLand",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 11196,
        "contract": "@sandbox-smart-contracts/land/contracts/PolygonLand.sol:PolygonLand",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 11200,
        "contract": "@sandbox-smart-contracts/land/contracts/PolygonLand.sol:PolygonLand",
        "label": "___gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 11203,
        "contract": "@sandbox-smart-contracts/land/contracts/PolygonLand.sol:PolygonLand",
        "label": "_admin",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 11208,
        "contract": "@sandbox-smart-contracts/land/contracts/PolygonLand.sol:PolygonLand",
        "label": "_superOperators",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 11213,
        "contract": "@sandbox-smart-contracts/land/contracts/PolygonLand.sol:PolygonLand",
        "label": "_numNFTPerAddress",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11218,
        "contract": "@sandbox-smart-contracts/land/contracts/PolygonLand.sol:PolygonLand",
        "label": "_owners",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 11225,
        "contract": "@sandbox-smart-contracts/land/contracts/PolygonLand.sol:PolygonLand",
        "label": "_operatorsForAll",
        "offset": 0,
        "slot": "55",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 11230,
        "contract": "@sandbox-smart-contracts/land/contracts/PolygonLand.sol:PolygonLand",
        "label": "_operators",
        "offset": 0,
        "slot": "56",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 11235,
        "contract": "@sandbox-smart-contracts/land/contracts/PolygonLand.sol:PolygonLand",
        "label": "_minters",
        "offset": 0,
        "slot": "57",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 11239,
        "contract": "@sandbox-smart-contracts/land/contracts/PolygonLand.sol:PolygonLand",
        "label": "__gap",
        "offset": 0,
        "slot": "58",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11242,
        "contract": "@sandbox-smart-contracts/land/contracts/PolygonLand.sol:PolygonLand",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "107",
        "type": "t_address"
      },
      {
        "astId": 11246,
        "contract": "@sandbox-smart-contracts/land/contracts/PolygonLand.sol:PolygonLand",
        "label": "_operatorFilterRegistry",
        "offset": 0,
        "slot": "108",
        "type": "t_contract(IOperatorFilterRegistry)10812"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IOperatorFilterRegistry)10812": {
        "encoding": "inplace",
        "label": "contract IOperatorFilterRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}