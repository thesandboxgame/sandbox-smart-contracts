{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] calldata accounts,\n        uint256[] calldata ids\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155Receiver.sol\";\n\n/**\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\n *\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\n * stuck.\n *\n * @dev _Available since v3.1._\n */\ncontract ERC1155Holder is ERC1155Receiver {\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Receiver.sol\";\nimport \"../../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@sandbox-smart-contracts/faucets/contracts/FaucetsERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport {IERC1155} from \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport {ERC1155Holder} from \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\";\n\n/**\n * @title FaucetsERC1155\n * @dev A smart contract for distributing ERC1155 tokens from various faucets.\n * This contract allows the owner to set up multiple faucets, each with their\n * own distribution settings.\n */\ncontract FaucetsERC1155 is Ownable, ERC1155Holder, ReentrancyGuard {\n    // Events\n    event FaucetAdded(address indexed faucet, uint256 period, uint256 limit, uint256[] tokenIds);\n    event TokenAdded(address indexed faucet, uint256 tokenId);\n    event FaucetStatusChanged(address indexed faucet, bool enabled);\n    event PeriodUpdated(address indexed faucet, uint256 period);\n    event LimitUpdated(address indexed faucet, uint256 limit);\n    event Claimed(address indexed faucet, address indexed receiver, uint256 tokenId, uint256 amount);\n    event Withdrawn(address indexed faucet, address indexed receiver, uint256[] tokenIds, uint256[] amounts);\n\n    /**\n     * @dev Struct representing information about a faucet.\n     * - isFaucet: indicates if the given address is a faucet.\n     * - isEnabled: indicates if the faucet is currently active.\n     * - period: time interval a user needs to wait between claims.\n     * - limit: maximum amount of tokens a user can claim at once.\n     * - tokenIds: list of token IDs supported by this faucet.\n     * - tokenIdExists: mapping of token IDs to their existence in this faucet.\n     * - lastTimestamps: mapping of last claim times for each user.\n     */\n    struct FaucetInfo {\n        bool isFaucet;\n        bool isEnabled;\n        uint256 period;\n        uint256 limit;\n        uint256[] tokenIds;\n        mapping(uint256 => bool) tokenIdExists;\n        mapping(uint256 => mapping(address => uint256)) lastTimestamps;\n    }\n\n    // Mapping from faucet address to its information.\n    mapping(address => FaucetInfo) private faucets;\n\n    constructor(address owner) Ownable() {\n        _transferOwnership(owner);\n    }\n\n    /**\n     * @dev Gets the period of a given faucet.\n     * @param faucet The address of the faucet.\n     * @return The waiting period between claims for users.\n     */\n    function getPeriod(address faucet) external view exists(faucet) returns (uint256) {\n        return faucets[faucet].period;\n    }\n\n    /**\n     * @dev Sets the period of a given faucet.\n     * @param faucet The address of the faucet.\n     * @param newPeriod The new waiting period between claims for users.\n     */\n    function setPeriod(address faucet, uint256 newPeriod) external onlyOwner exists(faucet) {\n        faucets[faucet].period = newPeriod;\n        emit PeriodUpdated(faucet, newPeriod);\n    }\n\n    /**\n     * @dev Gets the limit of a given faucet.\n     * @param faucet The address of the faucet.\n     * @return The maximum amount of tokens a user can claim at once.\n     */\n    function getLimit(address faucet) external view exists(faucet) returns (uint256) {\n        return faucets[faucet].limit;\n    }\n\n    /**\n     * @dev Sets the limit of a given faucet.\n     * @param faucet The address of the faucet.\n     * @param newLimit The new maximum amount of tokens a user can claim at once.\n     */\n    function setLimit(address faucet, uint256 newLimit) external onlyOwner exists(faucet) {\n        require(newLimit > 0, \"Faucets: LIMIT_ZERO\");\n        faucets[faucet].limit = newLimit;\n        emit LimitUpdated(faucet, newLimit);\n    }\n\n    /**\n     * @dev Internal function to check the existence of a given faucet.\n     * @param faucet The address of the faucet.\n     */\n    function _exists(address faucet) internal view returns (bool) {\n        return faucets[faucet].isFaucet;\n    }\n\n    /**\n     * @dev External function to check the existence of a given faucet.\n     * @param faucet The address of the faucet.\n     */\n    function faucetExists(address faucet) public view returns (bool) {\n        return _exists(faucet);\n    }\n\n    /**\n     * @dev Modifier to check if the faucet exists.\n     * @param faucet The address of the faucet.\n     */\n    modifier exists(address faucet) {\n        require(_exists(faucet), \"Faucets: FAUCET_DOES_NOT_EXIST\");\n        _;\n    }\n\n    /**\n     * @dev External function to check the existence of a given faucet and token.\n     * @param faucet The address of the faucet.\n     * @param tokenId The id of the token.\n     */\n    function tokenExistsInFaucet(address faucet, uint256 tokenId) public view exists(faucet) returns (bool) {\n        return faucets[faucet].tokenIdExists[tokenId];\n    }\n\n    /**\n     * @dev Add a new faucet to the system.\n     * @param faucet The address of the ERC1155 token contract to be used as faucet.\n     * @param period The waiting period between claims for users.\n     * @param limit The maximum amount of tokens a user can claim at once.\n     * @param tokenIds List of token IDs that this faucet will distribute.\n     */\n    function addFaucet(address faucet, uint256 period, uint256 limit, uint256[] memory tokenIds) public onlyOwner {\n        require(!_exists(faucet), \"Faucets: FAUCET_ALREADY_EXISTS\");\n        require(limit > 0, \"Faucets: LIMIT_ZERO\");\n        require(tokenIds.length > 0, \"Faucets: TOKENS_CANNOT_BE_EMPTY\");\n\n        FaucetInfo storage faucetInfo = faucets[faucet];\n        faucetInfo.isFaucet = true;\n        faucetInfo.isEnabled = true;\n        faucetInfo.period = period;\n        faucetInfo.limit = limit;\n        faucetInfo.tokenIds = tokenIds;\n\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            require(!faucetInfo.tokenIdExists[tokenIds[i]], \"TOKEN_ALREADY_EXISTS\");\n            faucetInfo.tokenIdExists[tokenIds[i]] = true;\n            emit TokenAdded(faucet, tokenIds[i]);\n        }\n\n        emit FaucetAdded(faucet, period, limit, tokenIds);\n    }\n\n    /**\n     * @dev Removes a faucet and transfers any remaining tokens back to the owner.\n     * @param faucet Address of the faucet to be removed.\n     */\n    function removeFaucet(address faucet) external onlyOwner exists(faucet) nonReentrant {\n        FaucetInfo storage faucetInfo = faucets[faucet];\n\n        _withdraw(faucet, owner(), faucetInfo.tokenIds);\n        delete faucets[faucet];\n    }\n\n    /**\n     * @dev Enable a faucet, allowing users to make claims.\n     * @param faucet Address of the faucet to be enabled.\n     */\n    function enableFaucet(address faucet) external onlyOwner exists(faucet) {\n        FaucetInfo storage faucetInfo = faucets[faucet];\n\n        faucetInfo.isEnabled = true;\n        emit FaucetStatusChanged(faucet, true);\n    }\n\n    /**\n     * @dev Disable a faucet, stopping users from making claims.\n     * @param faucet Address of the faucet to be disabled.\n     */\n    function disableFaucet(address faucet) external onlyOwner exists(faucet) {\n        FaucetInfo storage faucetInfo = faucets[faucet];\n\n        faucetInfo.isEnabled = false;\n        emit FaucetStatusChanged(faucet, false);\n    }\n\n    /**\n     * @dev Determines whether a faucet is enabled.\n     * @param faucet Address of the faucet.\n     */\n    function isFaucetEnabled(address faucet) public view exists(faucet) returns (bool) {\n        FaucetInfo storage faucetInfo = faucets[faucet];\n        return faucetInfo.isEnabled;\n    }\n\n    /**\n     * @dev Remove specific tokens from a faucet.\n     * @param faucet Address of the faucet.\n     * @param tokenIds List of token IDs to remove.\n     */\n    function removeTokens(address faucet, uint256[] memory tokenIds) external onlyOwner exists(faucet) nonReentrant {\n        FaucetInfo storage faucetInfo = faucets[faucet];\n\n        _withdraw(faucet, owner(), tokenIds);\n\n        uint256[] storage currentTokenIds = faucetInfo.tokenIds;\n        uint256[] memory newTokenIds = new uint256[](currentTokenIds.length - tokenIds.length);\n        uint256 newIndex = 0;\n\n        for (uint256 i = 0; i < currentTokenIds.length; i++) {\n            bool shouldSkip = false;\n            for (uint256 j = 0; j < tokenIds.length; j++) {\n                if (currentTokenIds[i] == tokenIds[j]) {\n                    faucetInfo.tokenIdExists[currentTokenIds[i]] = false;\n                    shouldSkip = true;\n                    break;\n                }\n            }\n            if (!shouldSkip) {\n                newTokenIds[newIndex] = currentTokenIds[i];\n                newIndex++;\n            }\n        }\n\n        faucetInfo.tokenIds = newTokenIds;\n    }\n\n    /**\n     * @notice (Internal) Checks if the wallet address is eligible to claim the token from the faucet.\n     * @dev Calculates based on the lastTimestamp and the period in the faucetInfo, whether the walletAddress can currently claim the tokenId from the faucet.\n     * @param faucet The address of the faucet contract.\n     * @param tokenId The ID of the token being claimed.\n     * @param walletAddress The address of the wallet attempting to claim.\n     * @return bool Returns true if the wallet address can claim the token, false otherwise.\n     */\n    function _canClaim(address faucet, uint256 tokenId, address walletAddress) internal view returns (bool) {\n        FaucetInfo storage faucetInfo = faucets[faucet];\n        uint256 lastTimestamp = faucetInfo.lastTimestamps[tokenId][walletAddress];\n        return block.timestamp >= (lastTimestamp + faucetInfo.period);\n    }\n\n    /**\n     * @notice Determines whether a wallet address can claim a token from a specific faucet.\n     * @dev Calls the internal function _canClaim to get the result.\n     * @param faucet The address of the faucet contract.\n     * @param tokenId The ID of the token being claimed.\n     * @param walletAddress The address of the wallet attempting to claim.\n     * @return bool Returns true if the wallet address can claim the token, false otherwise.\n     */\n    function canClaim(\n        address faucet,\n        uint256 tokenId,\n        address walletAddress\n    ) external view exists(faucet) returns (bool) {\n        return _canClaim(faucet, tokenId, walletAddress);\n    }\n\n    /**\n     * @dev Claim tokens from a faucet.\n     * @param faucet Address of the faucet to claim from.\n     * @param tokenId ID of the token to be claimed.\n     * @param amount Amount of tokens to be claimed.\n     */\n    function claim(address faucet, uint256 tokenId, uint256 amount) external exists(faucet) nonReentrant {\n        FaucetInfo storage faucetInfo = faucets[faucet];\n        require(faucetInfo.isEnabled, \"Faucets: FAUCET_DISABLED\");\n        require(faucetInfo.tokenIdExists[tokenId], \"Faucets: TOKEN_DOES_NOT_EXIST\");\n        require(amount > 0 && amount <= faucetInfo.limit, \"Faucets: AMOUNT_TOO_HIGH\");\n        require(_canClaim(faucet, tokenId, msg.sender), \"Faucets: CLAIM_PERIOD_NOT_PASSED\");\n\n        uint256 balance = IERC1155(faucet).balanceOf(address(this), tokenId);\n        require(balance >= amount, \"Faucets: BALANCE_IS_NOT_ENOUGH\");\n\n        faucetInfo.lastTimestamps[tokenId][msg.sender] = block.timestamp;\n        IERC1155(faucet).safeTransferFrom(address(this), msg.sender, tokenId, amount, \"\");\n        emit Claimed(faucet, msg.sender, tokenId, amount);\n    }\n\n    /**\n     * @notice Function to claim multiple tokens from a single faucet.\n     * @param faucet - The address of the ERC1155 contract (faucet) to claim from.\n     * @param tokenIds - An array of token IDs to be claimed from the faucet.\n     * @param amounts - An array of amounts of tokens to be claimed for respective token IDs.\n     *\n     * Emits multiple {Claimed} events for each claim.\n     *\n     * Requirements:\n     * - The lengths of `tokenIds` and `amounts` arrays should be the same.\n     * - Each tokenId must exist in the faucet.\n     */\n    function claimBatch(address faucet, uint256[] memory tokenIds, uint256[] memory amounts) external nonReentrant {\n        require(tokenIds.length == amounts.length, \"Faucets: ARRAY_LENGTH_MISMATCH\");\n\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            uint256 tokenId = tokenIds[i];\n            uint256 amount = amounts[i];\n\n            FaucetInfo storage faucetInfo = faucets[faucet];\n            require(faucetInfo.isEnabled, \"Faucets: FAUCET_DISABLED\");\n            require(faucetInfo.tokenIdExists[tokenId], \"Faucets: TOKEN_DOES_NOT_EXIST\");\n            require(amount > 0 && amount <= faucetInfo.limit, \"Faucets: AMOUNT_TOO_HIGH\");\n            require(_canClaim(faucet, tokenId, msg.sender), \"Faucets: CLAIM_PERIOD_NOT_PASSED\");\n\n            uint256 balance = IERC1155(faucet).balanceOf(address(this), tokenId);\n            require(balance >= amount, \"Faucets: BALANCE_IS_NOT_ENOUGH\");\n\n            faucetInfo.lastTimestamps[tokenId][msg.sender] = block.timestamp;\n            IERC1155(faucet).safeTransferFrom(address(this), msg.sender, tokenId, amount, \"\");\n            emit Claimed(faucet, msg.sender, tokenId, amount);\n        }\n    }\n\n    /**\n     * @notice Function to withdraw the total balance of tokens from the contract to a specified address.\n     * @param faucet - The address of the ERC1155 contract (faucet) containing the tokens to be withdrawn.\n     * @param receiver - The address to which the tokens will be sent.\n     * @param tokenIds - An array of token IDs to be withdrawn.\n     *\n     * Emits a {Withdrawn} event.\n     *\n     * Requirements:\n     * - The `tokenIds` must exist in the faucet.\n     */\n    function withdraw(\n        address faucet,\n        address receiver,\n        uint256[] memory tokenIds\n    ) external onlyOwner exists(faucet) nonReentrant {\n        _withdraw(faucet, receiver, tokenIds);\n    }\n\n    /**\n     * @notice Internal function to withdraw multiple tokens from the contract to a specified address.\n     * This function is used to transfer out tokens from the faucet to either the owner or to another specified address.\n     *\n     * @param faucet - The address of the ERC1155 contract (faucet) containing the tokens to be withdrawn.\n     * @param receiver - The address to which the tokens will be sent.\n     * @param tokenIds - An array of token IDs to be withdrawn.\n     *\n     * Emits a {Withdrawn} event.\n     *\n     * Requirements:\n     * - The `tokenIds` must exist in the faucet.\n     */\n    function _withdraw(address faucet, address receiver, uint256[] memory tokenIds) internal {\n        FaucetInfo storage faucetInfo = faucets[faucet];\n        uint256[] memory balances = new uint256[](tokenIds.length);\n\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            require(faucetInfo.tokenIdExists[tokenIds[i]], \"Faucets: TOKEN_DOES_NOT_EXIST\");\n            uint256 balance = IERC1155(faucet).balanceOf(address(this), tokenIds[i]);\n            balances[i] = balance;\n        }\n\n        IERC1155(faucet).safeBatchTransferFrom(address(this), receiver, tokenIds, balances, \"\");\n        emit Withdrawn(faucet, receiver, tokenIds, balances);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 2000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}