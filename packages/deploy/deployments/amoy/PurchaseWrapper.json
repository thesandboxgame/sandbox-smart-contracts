{
  "address": "0x802dc7Ad1d402a99138c3B7676701faCe7Ca0D3D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sandToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_authorizedCaller",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "PurchaseWrapperCallerNotAuthorized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "expected",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "actual",
          "type": "address"
        }
      ],
      "name": "PurchaseWrapperFromAddressIsNotOriginalRecipient",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "localTokenId",
          "type": "uint256"
        }
      ],
      "name": "PurchaseWrapperInvalidLocalTokenIdOrPurchaseNotCompleted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PurchaseWrapperInvalidRecipientAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "localTokenId",
          "type": "uint256"
        }
      ],
      "name": "PurchaseWrapperLocalTokenIdAlreadyInUse",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PurchaseWrapperNftCollectionAddressCannotBeZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftCollection",
          "type": "address"
        }
      ],
      "name": "PurchaseWrapperNftCollectionNotAuthorized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "localTokenId",
          "type": "uint256"
        }
      ],
      "name": "PurchaseWrapperNftCollectionNotRecorded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "localTokenId",
          "type": "uint256"
        }
      ],
      "name": "PurchaseWrapperNftNotYetMintedOrRecorded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PurchaseWrapperNftPurchaseFailedViaApproveAndCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PurchaseWrapperNoSandTokensToRecover",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PurchaseWrapperRandomTempTokenIdCannotBeZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PurchaseWrapperSandTokenAddressCannotBeZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PurchaseWrapperTransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftCollection",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isAuthorized",
          "type": "bool"
        }
      ],
      "name": "NftCollectionAuthorized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "localTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nftTokenId",
          "type": "uint256"
        }
      ],
      "name": "NftTransferredViaWrapper",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "originalSender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftCollection",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "localTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nftTokenId",
          "type": "uint256"
        }
      ],
      "name": "PurchaseConfirmed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AUTHORIZED_CALLER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "nftCollection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "waveIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "signatureId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "randomTempTokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "confirmPurchase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "localTokenId",
          "type": "uint256"
        }
      ],
      "name": "getPurchaseInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "caller",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "nftCollection",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nftTokenId",
              "type": "uint256"
            }
          ],
          "internalType": "struct PurchaseWrapper.PurchaseInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "recoverSand",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "localTokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sandToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftCollection",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isAuthorized",
          "type": "bool"
        }
      ],
      "name": "setNftCollectionAuthorization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8c7b2724e7c3a122e1dcc33e1915e21b6afa64a09428130d1fc58418dd0ac4a0",
  "receipt": {
    "to": null,
    "from": "0x5F890c9522dCE5670d741D4277BFCC2d9cA8Af02",
    "contractAddress": "0x802dc7Ad1d402a99138c3B7676701faCe7Ca0D3D",
    "transactionIndex": 6,
    "gasUsed": "1228220",
    "logsBloom": "0x
    "blockHash": "0xfac303d5b7eeb2653e57d303e2206756866a77e15bffea6d9e8a5713d2e3b90d",
    "transactionHash": "0x8c7b2724e7c3a122e1dcc33e1915e21b6afa64a09428130d1fc58418dd0ac4a0",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 23491760,
        "transactionHash": "0x8c7b2724e7c3a122e1dcc33e1915e21b6afa64a09428130d1fc58418dd0ac4a0",
        "address": "0x802dc7Ad1d402a99138c3B7676701faCe7Ca0D3D",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000049c4d4c94829b9c44052c5f5cb164fc612181165",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02"
        ],
        "data": "0x",
        "logIndex": 29,
        "blockHash": "0xfac303d5b7eeb2653e57d303e2206756866a77e15bffea6d9e8a5713d2e3b90d"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 23491760,
        "transactionHash": "0x8c7b2724e7c3a122e1dcc33e1915e21b6afa64a09428130d1fc58418dd0ac4a0",
        "address": "0x802dc7Ad1d402a99138c3B7676701faCe7Ca0D3D",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xf12fb6eaf1f045883c82d7d192627f7a36a50ce00c45e305919895908135a8a8",
          "0x000000000000000000000000cb9bd5acd627e8fccf9eb8d4ba72aeb1cd8ff5ef",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02"
        ],
        "data": "0x",
        "logIndex": 30,
        "blockHash": "0xfac303d5b7eeb2653e57d303e2206756866a77e15bffea6d9e8a5713d2e3b90d"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 23491760,
        "transactionHash": "0x8c7b2724e7c3a122e1dcc33e1915e21b6afa64a09428130d1fc58418dd0ac4a0",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02",
          "0x000000000000000000000000ba60fe9f3372f53397bee44e2a4d3087aa5f281f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000082e7c9982e5000000000000000000000000000000000000000000000000001927c9d61c34bceeb0000000000000000000000000000000000000000000000b98e218d19b5a7d0c100000000000000000000000000000000000000000000000191f9b5982b1d7eeb0000000000000000000000000000000000000000000000b98ea474e34dd620c1",
        "logIndex": 31,
        "blockHash": "0xfac303d5b7eeb2653e57d303e2206756866a77e15bffea6d9e8a5713d2e3b90d"
      }
    ],
    "blockNumber": 23491760,
    "cumulativeGasUsed": "3153222",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x49c4D4C94829B9c44052C5f5Cb164Fc612181165",
    "0xD20fbd836e80DabFb777E6AaBbe52e96c07eCD1B",
    "0xcb9bd5acd627e8fccf9eb8d4ba72aeb1cd8ff5ef"
  ],
  "numDeployments": 1,
  "solcInputHash": "9c17b2177a2b52fc929e3fb63a2ae40f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sandToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_authorizedCaller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"PurchaseWrapperCallerNotAuthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"expected\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"actual\",\"type\":\"address\"}],\"name\":\"PurchaseWrapperFromAddressIsNotOriginalRecipient\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"localTokenId\",\"type\":\"uint256\"}],\"name\":\"PurchaseWrapperInvalidLocalTokenIdOrPurchaseNotCompleted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PurchaseWrapperInvalidRecipientAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"localTokenId\",\"type\":\"uint256\"}],\"name\":\"PurchaseWrapperLocalTokenIdAlreadyInUse\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PurchaseWrapperNftCollectionAddressCannotBeZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftCollection\",\"type\":\"address\"}],\"name\":\"PurchaseWrapperNftCollectionNotAuthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"localTokenId\",\"type\":\"uint256\"}],\"name\":\"PurchaseWrapperNftCollectionNotRecorded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"localTokenId\",\"type\":\"uint256\"}],\"name\":\"PurchaseWrapperNftNotYetMintedOrRecorded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PurchaseWrapperNftPurchaseFailedViaApproveAndCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PurchaseWrapperNoSandTokensToRecover\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PurchaseWrapperRandomTempTokenIdCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PurchaseWrapperSandTokenAddressCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PurchaseWrapperTransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftCollection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAuthorized\",\"type\":\"bool\"}],\"name\":\"NftCollectionAuthorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"localTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"}],\"name\":\"NftTransferredViaWrapper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"originalSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftCollection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"localTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"}],\"name\":\"PurchaseConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AUTHORIZED_CALLER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftCollection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"waveIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"signatureId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"randomTempTokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"confirmPurchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"localTokenId\",\"type\":\"uint256\"}],\"name\":\"getPurchaseInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftCollection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct PurchaseWrapper.PurchaseInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"recoverSand\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"localTokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sandToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftCollection\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isAuthorized\",\"type\":\"bool\"}],\"name\":\"setNftCollectionAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"The Sandbox\",\"custom:security-contact\":\"contact-blockchain@sandbox.game\",\"details\":\"Implements IERC721Receiver to handle NFT receipts. Uses Ownable for admin functions.\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"NftTransferredViaWrapper(uint256,address,address,uint256)\":{\"params\":{\"from\":\"The address from which the NFT is transferred.\",\"localTokenId\":\"The local token ID representing the NFT.\",\"nftTokenId\":\"The actual ID of the transferred NFT.\",\"to\":\"The address to which the NFT is transferred.\"}},\"PurchaseConfirmed(address,address,uint256,uint256)\":{\"params\":{\"localTokenId\":\"The temporary local token ID for this purchase.\",\"nftCollection\":\"The address of the NFT collection.\",\"nftTokenId\":\"The actual ID of the minted NFT.\",\"originalSender\":\"The address that initiated the purchase.\"}},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"confirmPurchase(address,address,uint256,uint256,uint256,bytes)\":{\"details\":\"The `randomTempTokenId` must be unique for each purchase attempt and is used to track      the purchase through to NFT delivery. This function sets transaction-scoped context      variables (`_txContext_...`) that are used by `onERC721Received`.\",\"params\":{\"nftCollection\":\"Address of the target NFT Collection contract for minting.\",\"randomTempTokenId\":\"A unique temporary ID chosen by the caller to identify this purchase.                          This ID will be associated with the minted NFT.\",\"sender\":\"The original EOA initiating the purchase and who will receive the NFT.\",\"signature\":\"The signature data for verification by the NFT Collection.\",\"signatureId\":\"The signature ID for verification by the NFT Collection.\",\"waveIndex\":\"The wave index for minting on the NFT Collection.\"}},\"constructor\":{\"params\":{\"_admin\":\"The initial owner of this contract.\",\"_sandToken\":\"Address of the Sand (ERC20) token contract.\"}},\"getPurchaseInfo(uint256)\":{\"params\":{\"localTokenId\":\"The local temporary token ID of the purchase.\"},\"returns\":{\"_0\":\"A `PurchaseInfo` struct containing the details of the purchase.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"This function is a simple pass-through to conform to the IERC721Receiver interface.      The core logic has been moved into `confirmPurchase`.\",\"returns\":{\"_0\":\"bytes4 The selector `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\"}},\"recoverSand(address)\":{\"details\":\"Only callable by the contract owner.\",\"params\":{\"recipient\":\"Address to receive the recovered ERC20 tokens.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Similar to `transferFrom` but uses `safeTransferFrom` for the actual NFT transfer.      The `msg.sender` must be the `from` address.\",\"params\":{\"from\":\"The current owner of the NFT.\",\"localTokenId\":\"The local temporary token ID.\",\"to\":\"The new address to receive the NFT.\"}},\"setNftCollectionAuthorization(address,bool)\":{\"details\":\"Only callable by the contract owner.\",\"params\":{\"isAuthorized\":\"Whether the NFT collection is authorized.\",\"nftCollection\":\"The address of the NFT collection to authorize.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"stateVariables\":{\"_purchaseInfo\":{\"details\":\"This `localTokenId` is provided by the caller during `confirmPurchase` and is used      to uniquely identify a purchase transaction and later to reference the minted NFT      in the wrapper's transfer functions.\"}},\"title\":\"PurchaseWrapper\",\"version\":1},\"userdoc\":{\"events\":{\"NftCollectionAuthorized(address,bool)\":{\"notice\":\"Emitted when an NFT collection is authorized.\"},\"NftTransferredViaWrapper(uint256,address,address,uint256)\":{\"notice\":\"Emitted when an NFT is transferred using the wrapper's transfer functions.\"},\"PurchaseConfirmed(address,address,uint256,uint256)\":{\"notice\":\"Emitted when an NFT purchase is confirmed and the minting process is initiated.\"}},\"kind\":\"user\",\"methods\":{\"AUTHORIZED_CALLER_ROLE()\":{\"notice\":\"The role that is authorized to call this contract's functions.\"},\"confirmPurchase(address,address,uint256,uint256,uint256,bytes)\":{\"notice\":\"Confirms a purchase request, takes payment, and initiates the NFT minting process         by calling `approveAndCall` on the `sandToken` contract, which in turn calls         the `waveMint` (or similar) function on the `nftCollection` contract.\"},\"constructor\":{\"notice\":\"Constructor to set the SAND token contract address.\"},\"getPurchaseInfo(uint256)\":{\"notice\":\"Retrieves the purchase information for a given local token ID.\"},\"onERC721Received(address,address,uint256,bytes)\":{\"notice\":\"Handles the receipt of an ERC721 token, expected to be called by an NFT collection         contract after a successful mint initiated by `confirmPurchase`.\"},\"recoverSand(address)\":{\"notice\":\"Recovers SAND tokens (or other ERC20 specified in `sandToken`)         that were accidentally sent or accumulated in this contract.\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"Safely transfers an NFT associated with a `localTokenId` using `safeTransferFrom`.\"},\"sandToken()\":{\"notice\":\"Address of the SAND token used for purchases.\"},\"setNftCollectionAuthorization(address,bool)\":{\"notice\":\"Sets the authorization status for an NFT collection to be used with this contract.\"}},\"notice\":\"Contract that facilitates NFT purchases using SAND.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@sandbox-smart-contracts/avatar/contracts/nft-collection/PurchaseWrapper.sol\":\"PurchaseWrapper\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-5.0.2/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5.0.2/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/avatar/contracts/nft-collection/INFTCollection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.26;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts-5.0.2/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts-5.0.2/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @title INFTCollection\\n * @author The Sandbox\\n * @custom:security-contact contact-blockchain@sandbox.game\\n * @notice Events emitted and Error raised by the NFTCollection\\n */\\ninterface INFTCollection {\\n    /**\\n     * @notice minting can be denied because of the following reasons\\n     **/\\n    enum MintDenialReason {\\n        None,\\n        NotConfigured,\\n        InvalidAmount,\\n        GlobalMaxTokensPerWalletExceeded,\\n        WaveMaxTokensOverallExceeded,\\n        WaveMaxTokensPerWalletExceeded,\\n        MaxSupplyExceeded\\n    }\\n\\n    /**\\n     * @notice Structure to hold initialization parameters\\n     * @param _collectionOwner the address that will be set as the owner of the collection\\n     * @param _initialBaseURI an URI that will be used as the base for token URI\\n     * @param _name name of the ERC721 token\\n     * @param _symbol token symbol of the ERC721 token\\n     * @param _mintTreasury collection treasury address (where the payments are sent)\\n     * @param _signAddress signer address that is allowed to create mint signatures\\n     * @param _initialTrustedForwarder trusted forwarder address\\n     * @param _allowedToExecuteMint token address that is used for payments and that is allowed to execute mint\\n     * @param _maxSupply max supply of tokens to be allowed to be minted per contract\\n     * @param _maxTokensPerWallet max tokens per wallet\\n     */\\n    struct InitializationParams {\\n        address collectionOwner;\\n        string initialBaseURI;\\n        string name;\\n        string symbol;\\n        address payable mintTreasury;\\n        address signAddress;\\n        address initialTrustedForwarder;\\n        IERC20Metadata allowedToExecuteMint;\\n        uint256 maxSupply;\\n        uint256 maxTokensPerWallet;\\n    }\\n\\n    /**\\n     * @notice Structure used to mint in batch\\n     * @param wallet destination address that will receive the tokens\\n     * @param amount of tokens to mint\\n     */\\n    struct BatchMintingData {\\n        address wallet;\\n        uint256 amount;\\n    }\\n\\n    /**\\n     * @notice Structure used save minting wave information\\n     * @param waveMaxTokensOverall max tokens to buy per wave, cumulating all addresses\\n     * @param waveMaxTokensPerWallet max tokens to buy, per wallet in a given wave\\n     * @param waveSingleTokenPrice price of one token mint (in the token denoted by the allowedToExecuteMint contract)\\n     * @param waveTotalMinted number of total minted tokens in the current running wave\\n     * @param waveOwnerToClaimedCounts mapping of [owner -> minted count]\\n     */\\n    struct WaveData {\\n        uint256 waveMaxTokensOverall;\\n        uint256 waveMaxTokensPerWallet;\\n        uint256 waveSingleTokenPrice;\\n        uint256 waveTotalMinted;\\n        mapping(address owner => uint256 count) waveOwnerToClaimedCounts;\\n    }\\n\\n    /**\\n     * @notice Event emitted when the contract was initialized.\\n     * @dev emitted at proxy startup, only once\\n     * @param baseURI an URI that will be used as the base for token URI\\n     * @param name name of the ERC721 token\\n     * @param symbol token symbol of the ERC721 token\\n     * @param mintTreasury collection treasury address (where the payments are sent)\\n     * @param signAddress signer address that is allowed to create mint signatures\\n     * @param allowedToExecuteMint token address that is used for payments and that is allowed to execute mint\\n     * @param maxSupply max supply of tokens to be allowed to be minted per contract\\n     * @param maxTokensPerWallet maximum amount of tokens that can be minted per wallet across all waves\\n     */\\n    event ContractInitialized(\\n        string indexed baseURI,\\n        string indexed name,\\n        string indexed symbol,\\n        address mintTreasury,\\n        address signAddress,\\n        IERC20Metadata allowedToExecuteMint,\\n        uint256 maxSupply,\\n        uint256 maxTokensPerWallet\\n    );\\n\\n    /**\\n     * @notice Event emitted when a wave was set up\\n     * @dev emitted when setupWave is called\\n     * @param operator the sender of the transaction\\n     * @param waveMaxTokens the allowed number of tokens to be minted in this wave (cumulative by all minting wallets)\\n     * @param waveMaxTokensToBuy max tokens to buy, per wallet in a given wave\\n     * @param waveSingleTokenPrice the price to mint a token in a given wave, in wei\\n     * @param waveIndex the current wave index\\n     */\\n    event WaveSetup(\\n        address indexed operator,\\n        uint256 waveMaxTokens,\\n        uint256 waveMaxTokensToBuy,\\n        uint256 waveSingleTokenPrice,\\n        uint256 waveIndex\\n    );\\n\\n    /**\\n     * @notice Event emitted when a wave mint is completed\\n     * @param tokenId the token id\\n     * @param wallet the wallet address of the receiver\\n     * @param waveIndex the wave index\\n     */\\n    event WaveMint(uint256 tokenId, address indexed wallet, uint256 waveIndex);\\n\\n    /**\\n     * @notice Event emitted when an address was set as allowed to mint\\n     * @dev emitted when setAllowedExecuteMint is called\\n     * @param operator the sender of the transaction\\n     * @param oldToken old address that is used for payments and that is allowed to execute mint\\n     * @param newToken new address that is used for payments and that is allowed to execute mint\\n     */\\n    event AllowedExecuteMintSet(address indexed operator, IERC20 indexed oldToken, IERC20 indexed newToken);\\n\\n    /**\\n     * @notice Event emitted when the treasury address was saved\\n     * @dev emitted when setTreasury is called\\n     * @param operator the sender of the transaction\\n     * @param oldTreasury old collection treasury address (where the payments are sent)\\n     * @param newTreasury new collection treasury address (where the payments are sent)\\n     */\\n    event TreasurySet(address indexed operator, address indexed oldTreasury, address indexed newTreasury);\\n\\n    /**\\n     * @notice Event emitted when the base token URI for the contract was set or changed\\n     * @dev emitted when setBaseURI is called\\n     * @param operator the sender of the transaction\\n     * @param oldBaseURI old URI that will be used as the base for token metadata URI\\n     * @param newBaseURI new URI that will be used as the base for token metadata URI\\n     */\\n    event BaseURISet(address indexed operator, string oldBaseURI, string newBaseURI);\\n\\n    /**\\n     * @notice Event emitted when the max supply is set or changed\\n     * @dev emitted when setSignAddress is called\\n     * @param operator the sender of the transaction\\n     * @param oldMaxSupply old maximum amount of tokens that can be minted\\n     * @param newMaxSupply new maximum amount of tokens that can be minted\\n     */\\n    event MaxSupplySet(address indexed operator, uint256 oldMaxSupply, uint256 newMaxSupply);\\n\\n    /**\\n     * @notice Event emitted when a token personalization was made.\\n     * @dev emitted when personalize is called\\n     * @param operator the sender of the transaction\\n     * @param tokenId id of the token which had the personalization done\\n     * @param personalizationMask the exact personalization that was done, as a custom meaning bit-mask\\n     */\\n    event Personalized(address indexed operator, uint256 indexed tokenId, uint256 indexed personalizationMask);\\n\\n    /**\\n     * @notice Event emitted when a token personalization was made.\\n     * @param operator the sender of the transaction\\n     * @param receiver the receiver of the royalties\\n     * @param feeNumerator percentage of the royalties in feeDenominator units\\n     */\\n    event DefaultRoyaltySet(address indexed operator, address indexed receiver, uint96 feeNumerator);\\n\\n    /**\\n     * @notice Event emitted when default royalties are reset\\n     * @param operator the sender of the transaction\\n     */\\n    event DefaultRoyaltyReset(address indexed operator);\\n\\n    /**\\n     * @notice Event emitted when a token personalization was made.\\n     * @param operator the sender of the transaction\\n     * @param tokenId the token id\\n     * @param receiver the receiver of the royalties\\n     * @param feeNumerator percentage of the royalties in feeDenominator units\\n     */\\n    event TokenRoyaltySet(\\n        address indexed operator,\\n        uint256 indexed tokenId,\\n        address indexed receiver,\\n        uint96 feeNumerator\\n    );\\n\\n    /**\\n     * @notice Event emitted when default royalties are reset\\n     * @param operator the sender of the transaction\\n     * @param tokenId the token id\\n     */\\n    event TokenRoyaltyReset(address indexed operator, uint256 indexed tokenId);\\n\\n    /**\\n     * @notice Event emitted when the max tokens per wallet is set\\n     * @param operator the sender of the transaction\\n     * @param oldMaxTokensPerWallet old maximum tokens per wallet\\n     * @param newMaxTokensPerWallet new maximum tokens per wallet\\n     */\\n    event MaxTokensPerWalletSet(address indexed operator, uint256 oldMaxTokensPerWallet, uint256 newMaxTokensPerWallet);\\n\\n    /**\\n     * @notice event emitted when a token was burned\\n     * @param operator the sender of the transaction\\n     * @param tokenId the id of the token that was burned\\n     * @param burner the owner that burned the token\\n     */\\n    event TokenBurned(address indexed operator, uint256 indexed tokenId, address indexed burner);\\n\\n    /**\\n     * @notice event emitted when token burning was enabled\\n     * @param operator the sender of the transaction\\n     */\\n    event TokenBurningEnabled(address indexed operator);\\n\\n    /**\\n     * @notice event emitted when token burning was disabled\\n     * @param operator the sender of the transaction\\n     */\\n    event TokenBurningDisabled(address indexed operator);\\n\\n    /**\\n     * @notice The operation failed because the base token uri is empty.\\n     * @param baseURI an URI that will be used as the base for token URI\\n     */\\n    error InvalidBaseTokenURI(string baseURI);\\n\\n    /**\\n     * @notice The operation failed the wave index is zero, no wave was ever configured\\n     */\\n    error ContractNotConfigured();\\n\\n    /**\\n     * @notice The operation failed because the token name is invalid\\n     * @param name name of the ERC721 token\\n     */\\n    error InvalidName(string name);\\n\\n    /**\\n     * @notice The operation failed because the token symbol is invalid\\n     * @param symbol token symbol of the ERC721 token\\n     */\\n    error InvalidSymbol(string symbol);\\n\\n    /**\\n     * @notice The operation failed because the treasury is wrong\\n     * @param mintTreasury collection treasury address (where the payments are sent)\\n     */\\n    error InvalidTreasury(address mintTreasury);\\n\\n    /**\\n     * @notice The operation failed because the allowedToExecuteMint is not a contract or wrong\\n     * @param allowedToExecuteMint token address that is used for payments and that is allowed to execute mint\\n     */\\n    error InvalidAllowedToExecuteMint(IERC20Metadata allowedToExecuteMint);\\n\\n    /**\\n     * @notice The operation failed because the maxSupply is lower than totalSupply\\n     * @param maxSupply max supply of tokens to be allowed to be minted per contract\\n     * @param totalSupply amount of tokens minted till now\\n     */\\n    error LowMaxSupply(uint256 maxSupply, uint256 totalSupply);\\n\\n    /**\\n     * @notice The operation failed because the batch data len is zero\\n     */\\n    error InvalidBatchData();\\n\\n    /**\\n     * @notice The operation failed because the wave arguments are wrong\\n     * @param waveMaxTokensOverall the allowed number of tokens to be minted in this wave (cumulative by all minting wallets)\\n     * @param waveMaxTokensPerWallet max tokens to buy, per wallet in a given wave\\n     */\\n    error InvalidWaveData(uint256 waveMaxTokensOverall, uint256 waveMaxTokensPerWallet);\\n\\n    /**\\n     * @notice The operation failed because the wave is completed\\n     * @param reason the reason for the denial\\n     * @param wallet wallet to be checked if it can mint\\n     * @param amount amount to be checked if can be minted\\n     * @param waveIndex the current wave index\\n     */\\n    error CannotMint(MintDenialReason reason, address wallet, uint256 amount, uint256 waveIndex);\\n\\n    /**\\n     * @notice The operation failed because the max tokens per wallet is invalid\\n     * @param maxTokensPerWallet max tokens per wallet\\n     */\\n    error InvalidMaxTokensPerWallet(uint256 maxTokensPerWallet, uint256 maxSupply);\\n\\n    /**\\n     * @notice The operation failed because the wave max tokens per wallet is higher than the global max tokens per wallet\\n     * @param waveMaxTokensPerWallet wave max tokens per wallet\\n     * @param maxTokensPerWallet global max tokens per wallet\\n     */\\n    error WaveMaxTokensHigherThanGlobalMax(uint256 waveMaxTokensPerWallet, uint256 maxTokensPerWallet);\\n\\n    /**\\n     * @notice The operation failed because burning is enabled.\\n     */\\n    error EnforcedBurn();\\n\\n    /**\\n     * @notice The operation failed because burning is disabled.\\n     */\\n    error ExpectedBurn();\\n\\n    /**\\n     * @notice Event emitted when the purchase agent is set\\n     * @param operator the sender of the transaction\\n     * @param purchaseAgent the address of the purchase agent\\n     */\\n    event PurchaseAgentSet(address indexed operator, address indexed purchaseAgent);\\n\\n    /**\\n     * @notice Event emitted when a wallet is marked as agent-controlled\\n     * @param operator the sender of the transaction\\n     * @param wallet the wallet address\\n     * @param isAgentControlled true if the wallet is agent-controlled\\n     */\\n    event AgentControlledSet(address indexed operator, address indexed wallet, bool isAgentControlled);\\n\\n    /**\\n     * @notice Mints a token for a specific wave.\\n     * @param to The address to mint the token to.\\n     * @param amount The amount of tokens to mint.\\n     * @param waveIndex The wave index.\\n     * @param signatureId The signature ID.\\n     * @param signature The signature.\\n     */\\n    function waveMint(\\n        address to,\\n        uint256 amount,\\n        uint256 waveIndex,\\n        uint256 signatureId,\\n        bytes calldata signature\\n    ) external returns (uint256[] memory);\\n\\n    /**\\n     * @notice Returns the token price for a specific wave.\\n     * @param waveIndex Wave configuration index.\\n     * @return Price per token in the wave's payment token.\\n     */\\n    function waveSingleTokenPrice(uint256 waveIndex) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x59cc8fb429dd246690ee26509bd78ce72e30e71f1472c4cd5b20365ee7c6662f\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/avatar/contracts/nft-collection/ISandboxSand.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\n/**\\n * @dev Minimal interface for the SAND token contract.\\n */\\ninterface ISandboxSand {\\n    function approveAndCall(\\n        address target,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external payable returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x6c9dc2fb1c2b1f9f09b666e9dcabac5fc3635c14242614b50b9159f546fa6396\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/avatar/contracts/nft-collection/PurchaseWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {INFTCollection} from \\\"./INFTCollection.sol\\\";\\nimport {ISandboxSand} from \\\"./ISandboxSand.sol\\\";\\n\\n/**\\n * @title PurchaseWrapper\\n * @author The Sandbox\\n * @notice Contract that facilitates NFT purchases using SAND.\\n * @custom:security-contact contact-blockchain@sandbox.game\\n * @dev Implements IERC721Receiver to handle NFT receipts. Uses Ownable for admin functions.\\n */\\ncontract PurchaseWrapper is AccessControl, IERC721Receiver, ReentrancyGuard {\\n    /**\\n     * @dev Stores information about a purchase linked to a local temporary token ID.\\n     * @param caller The EOA who called the `confirmPurchase` function.\\n     * @param nftCollection The address of the NFT collection contract from which the NFT was/will be minted.\\n     * @param nftTokenId The actual token ID of the minted NFT. It is 0 until the NFT is minted and received by this contract.\\n     */\\n    struct PurchaseInfo {\\n        address caller;\\n        address nftCollection;\\n        uint256 nftTokenId;\\n    }\\n\\n    /**\\n     * @notice The role that is authorized to call this contract's functions.\\n     */\\n    bytes32 public constant AUTHORIZED_CALLER_ROLE = keccak256(\\\"AUTHORIZED_CALLER_ROLE\\\");\\n\\n    /**\\n     * @notice Address of the SAND token used for purchases.\\n     */\\n    IERC20 public sandToken;\\n\\n    /**\\n     * @notice Mapping from a local temporary token ID to the details of the purchase.\\n     * @dev This `localTokenId` is provided by the caller during `confirmPurchase` and is used\\n     *      to uniquely identify a purchase transaction and later to reference the minted NFT\\n     *      in the wrapper's transfer functions.\\n     */\\n    mapping(uint256 localTokenId => PurchaseInfo purchaseInfo) private _purchaseInfo;\\n\\n    /**\\n     * @notice Mapping from an NFT collection address to a boolean indicating if it is authorized.\\n     */\\n    mapping(address nftCollection => bool isAuthorized) private _authorizedNftCollections;\\n\\n    /**\\n     * @notice Emitted when an NFT collection is authorized.\\n     */\\n    event NftCollectionAuthorized(address indexed nftCollection, bool isAuthorized);\\n\\n    /**\\n     * @notice Emitted when an NFT purchase is confirmed and the minting process is initiated.\\n     * @param originalSender The address that initiated the purchase.\\n     * @param nftCollection The address of the NFT collection.\\n     * @param localTokenId The temporary local token ID for this purchase.\\n     * @param nftTokenId The actual ID of the minted NFT.\\n     */\\n    event PurchaseConfirmed(\\n        address indexed originalSender,\\n        address indexed nftCollection,\\n        uint256 localTokenId,\\n        uint256 indexed nftTokenId\\n    );\\n\\n    /**\\n     * @notice Emitted when an NFT is transferred using the wrapper's transfer functions.\\n     * @param localTokenId The local token ID representing the NFT.\\n     * @param from The address from which the NFT is transferred.\\n     * @param to The address to which the NFT is transferred.\\n     * @param nftTokenId The actual ID of the transferred NFT.\\n     */\\n    event NftTransferredViaWrapper(\\n        uint256 localTokenId,\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed nftTokenId\\n    );\\n\\n    // Custom Errors\\n    error PurchaseWrapperSandTokenAddressCannotBeZero();\\n    error PurchaseWrapperNftCollectionAddressCannotBeZero();\\n    error PurchaseWrapperLocalTokenIdAlreadyInUse(uint256 localTokenId);\\n    error PurchaseWrapperNftPurchaseFailedViaApproveAndCall();\\n    error PurchaseWrapperInvalidRecipientAddress();\\n    error PurchaseWrapperNoSandTokensToRecover();\\n    error PurchaseWrapperTransferToZeroAddress();\\n    error PurchaseWrapperInvalidLocalTokenIdOrPurchaseNotCompleted(uint256 localTokenId);\\n    error PurchaseWrapperNftNotYetMintedOrRecorded(uint256 localTokenId);\\n    error PurchaseWrapperNftCollectionNotRecorded(uint256 localTokenId);\\n    error PurchaseWrapperFromAddressIsNotOriginalRecipient(address expected, address actual);\\n    error PurchaseWrapperCallerNotAuthorized(address caller);\\n    error PurchaseWrapperRandomTempTokenIdCannotBeZero();\\n    error PurchaseWrapperNftCollectionNotAuthorized(address nftCollection);\\n\\n    /**\\n     * @notice Constructor to set the SAND token contract address.\\n     * @param _admin The initial owner of this contract.\\n     * @param _sandToken Address of the Sand (ERC20) token contract.\\n     */\\n    constructor(address _admin, address _sandToken, address _authorizedCaller) {\\n        if (_sandToken == address(0)) revert PurchaseWrapperSandTokenAddressCannotBeZero();\\n        sandToken = IERC20(_sandToken);\\n        _grantRole(DEFAULT_ADMIN_ROLE, _admin);\\n        _grantRole(AUTHORIZED_CALLER_ROLE, _authorizedCaller);\\n    }\\n\\n    /**\\n     * @notice Confirms a purchase request, takes payment, and initiates the NFT minting process\\n     *         by calling `approveAndCall` on the `sandToken` contract, which in turn calls\\n     *         the `waveMint` (or similar) function on the `nftCollection` contract.\\n     * @dev The `randomTempTokenId` must be unique for each purchase attempt and is used to track\\n     *      the purchase through to NFT delivery. This function sets transaction-scoped context\\n     *      variables (`_txContext_...`) that are used by `onERC721Received`.\\n     * @param sender The original EOA initiating the purchase and who will receive the NFT.\\n     * @param nftCollection Address of the target NFT Collection contract for minting.\\n     * @param waveIndex The wave index for minting on the NFT Collection.\\n     * @param signatureId The signature ID for verification by the NFT Collection.\\n     * @param randomTempTokenId A unique temporary ID chosen by the caller to identify this purchase.\\n     *                          This ID will be associated with the minted NFT.\\n     * @param signature The signature data for verification by the NFT Collection.\\n     */\\n    function confirmPurchase(\\n        address sender,\\n        address nftCollection,\\n        uint256 waveIndex,\\n        uint256 signatureId,\\n        uint256 randomTempTokenId,\\n        bytes calldata signature\\n    ) external nonReentrant {\\n        _validateAndAuthorizePurchase(sender, nftCollection, randomTempTokenId);\\n\\n        uint256 sandAmount = INFTCollection(nftCollection).waveSingleTokenPrice(waveIndex);\\n\\n        PurchaseInfo storage info = _purchaseInfo[randomTempTokenId];\\n        info.caller = sender;\\n        info.nftCollection = nftCollection;\\n\\n        IERC20 sandTokenCached = sandToken;\\n        SafeERC20.safeTransferFrom(sandTokenCached, sender, address(this), sandAmount);\\n\\n        uint256 nftTokenId = _initiateMintViaApproveAndCall(\\n            nftCollection,\\n            sandAmount,\\n            waveIndex,\\n            signatureId,\\n            signature\\n        );\\n\\n        info.nftTokenId = nftTokenId;\\n\\n        IERC721(nftCollection).transferFrom(address(this), sender, nftTokenId);\\n\\n        emit PurchaseConfirmed(sender, nftCollection, randomTempTokenId, nftTokenId);\\n    }\\n\\n    /**\\n     * @notice Safely transfers an NFT associated with a `localTokenId` using `safeTransferFrom`.\\n     * @dev Similar to `transferFrom` but uses `safeTransferFrom` for the actual NFT transfer.\\n     *      The `msg.sender` must be the `from` address.\\n     * @param from The current owner of the NFT.\\n     * @param to The new address to receive the NFT.\\n     * @param localTokenId The local temporary token ID.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 localTokenId) external {\\n        if (!hasRole(AUTHORIZED_CALLER_ROLE, msg.sender)) {\\n            revert PurchaseWrapperCallerNotAuthorized(msg.sender);\\n        }\\n        if (to == address(0)) revert PurchaseWrapperTransferToZeroAddress();\\n        PurchaseInfo memory info = _purchaseInfo[localTokenId];\\n\\n        if (info.caller == address(0)) revert PurchaseWrapperInvalidLocalTokenIdOrPurchaseNotCompleted(localTokenId);\\n        if (info.nftTokenId == 0) revert PurchaseWrapperNftNotYetMintedOrRecorded(localTokenId);\\n        if (info.nftCollection == address(0)) revert PurchaseWrapperNftCollectionNotRecorded(localTokenId);\\n        if (info.caller != from) revert PurchaseWrapperFromAddressIsNotOriginalRecipient(from, info.caller);\\n\\n        IERC721(info.nftCollection).safeTransferFrom(from, to, info.nftTokenId);\\n\\n        emit NftTransferredViaWrapper(localTokenId, from, to, info.nftTokenId);\\n    }\\n\\n    /**\\n     * @notice Recovers SAND tokens (or other ERC20 specified in `sandToken`)\\n     *         that were accidentally sent or accumulated in this contract.\\n     * @dev Only callable by the contract owner.\\n     * @param recipient Address to receive the recovered ERC20 tokens.\\n     */\\n    function recoverSand(address recipient) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (recipient == address(0)) revert PurchaseWrapperInvalidRecipientAddress();\\n        IERC20 sandTokenCached = sandToken;\\n        uint256 balance = sandTokenCached.balanceOf(address(this));\\n        if (balance == 0) revert PurchaseWrapperNoSandTokensToRecover();\\n\\n        SafeERC20.safeTransfer(sandTokenCached, recipient, balance);\\n    }\\n\\n    /**\\n     * @notice Sets the authorization status for an NFT collection to be used with this contract.\\n     * @dev Only callable by the contract owner.\\n     * @param nftCollection The address of the NFT collection to authorize.\\n     * @param isAuthorized Whether the NFT collection is authorized.\\n     */\\n    function setNftCollectionAuthorization(\\n        address nftCollection,\\n        bool isAuthorized\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (nftCollection == address(0)) revert PurchaseWrapperNftCollectionAddressCannotBeZero();\\n        _authorizedNftCollections[nftCollection] = isAuthorized;\\n        emit NftCollectionAuthorized(nftCollection, isAuthorized);\\n    }\\n\\n    /**\\n     * @notice Retrieves the purchase information for a given local token ID.\\n     * @param localTokenId The local temporary token ID of the purchase.\\n     * @return A `PurchaseInfo` struct containing the details of the purchase.\\n     */\\n    function getPurchaseInfo(uint256 localTokenId) external view returns (PurchaseInfo memory) {\\n        return _purchaseInfo[localTokenId];\\n    }\\n\\n    /**\\n     * @notice Handles the receipt of an ERC721 token, expected to be called by an NFT collection\\n     *         contract after a successful mint initiated by `confirmPurchase`.\\n     * @dev This function is a simple pass-through to conform to the IERC721Receiver interface.\\n     *      The core logic has been moved into `confirmPurchase`.\\n     * @return bytes4 The selector `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes calldata) external pure override returns (bytes4) {\\n        return IERC721Receiver.onERC721Received.selector;\\n    }\\n\\n    function _initiateMintViaApproveAndCall(\\n        address nftCollection,\\n        uint256 sandAmount,\\n        uint256 waveIndex,\\n        uint256 signatureId,\\n        bytes calldata signature\\n    ) private returns (uint256) {\\n        bytes memory data = abi.encodeCall(\\n            INFTCollection.waveMint,\\n            (\\n                address(this), // NFTs will be minted to this contract first\\n                1,\\n                waveIndex,\\n                signatureId,\\n                signature\\n            )\\n        );\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory result) = address(sandToken).call(\\n            abi.encodeCall(ISandboxSand.approveAndCall, (nftCollection, sandAmount, data))\\n        );\\n\\n        if (!success) {\\n            revert PurchaseWrapperNftPurchaseFailedViaApproveAndCall();\\n        }\\n        uint256[] memory tokenIds = new uint256[](1);\\n        // The return data from `approveAndCall` is a `bytes` type, which means the actual return data from `waveMint` (an abi-encoded uint256[])\\n        // is itself abi-encoded. We need to go deeper.\\n        // `result` raw data layout:\\n        // - 0x00: offset to bytes data (0x20)\\n        // - 0x20: length of bytes data (e.g., 96 for a single uint256 in an array)\\n        // - 0x40: start of the `waveMint` return data\\n        //   - 0x40: offset to array data (0x20)\\n        //   - 0x60: array length (1)\\n        //   - 0x80: the token ID\\n        if (result.length < 160) {\\n            revert PurchaseWrapperNftPurchaseFailedViaApproveAndCall();\\n        }\\n        bytes32 tokenIdWord;\\n        assembly {\\n            // We read the word at offset 0x80 in the raw return data.\\n            // The `result` variable is a memory pointer, and its data starts at an offset of 0x20.\\n            // So we read from result + 0x20 (start of data) + 0x80 (offset to tokenId) = result + 0xa0\\n            tokenIdWord := mload(add(result, 0xa0))\\n        }\\n        tokenIds[0] = uint256(tokenIdWord);\\n        return tokenIds[0];\\n    }\\n\\n    function _validateAndAuthorizePurchase(\\n        address sender,\\n        address nftCollection,\\n        uint256 randomTempTokenId\\n    ) private view {\\n        if (msg.sender != address(sandToken) || !hasRole(AUTHORIZED_CALLER_ROLE, sender)) {\\n            revert PurchaseWrapperCallerNotAuthorized(sender);\\n        }\\n        if (!_authorizedNftCollections[nftCollection]) {\\n            revert PurchaseWrapperNftCollectionNotAuthorized(nftCollection);\\n        }\\n\\n        if (randomTempTokenId == 0) revert PurchaseWrapperRandomTempTokenIdCannotBeZero();\\n        if (_purchaseInfo[randomTempTokenId].nftTokenId != 0) {\\n            revert PurchaseWrapperLocalTokenIdAlreadyInUse(randomTempTokenId);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc9810cf2e84dc57bc233269ffa1d7648755ac63cbbd6b429dea7ec8f3d9482cf\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161153638038061153683398101604081905261002f9161017c565b600180556001600160a01b03821661005a57604051631a68d6ad60e21b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0384161790556100806000846100b4565b506100ab7ff12fb6eaf1f045883c82d7d192627f7a36a50ce00c45e305919895908135a8a8826100b4565b505050506101bf565b6000828152602081815260408083206001600160a01b038516845290915281205460ff16610156576000838152602081815260408083206001600160a01b03861684529091529020805460ff1916600117905561010e3390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a450600161015a565b5060005b92915050565b80516001600160a01b038116811461017757600080fd5b919050565b60008060006060848603121561019157600080fd5b61019a84610160565b92506101a860208501610160565b91506101b660408501610160565b90509250925092565b611368806101ce6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063588750491161009757806391d148541161006657806391d14854146102bf578063a217fddf146102d2578063d547741f146102da578063f573388e146102ed57600080fd5b806358875049146101d957806366e1560c1461026e5780637dcb118e14610281578063818a304b1461029457600080fd5b80632f2ff15d116100d35780632f2ff15d1461018b57806336568abe146101a057806342842e0e146101b357806345ff2ae4146101c657600080fd5b806301ffc9a7146100fa578063150b7a0214610122578063248a9ca31461015a575b600080fd5b61010d610108366004610fa8565b610314565b60405190151581526020015b60405180910390f35b610141610130366004611037565b630a85bd0160e11b95945050505050565b6040516001600160e01b03199091168152602001610119565b61017d6101683660046110a6565b60009081526020819052604090206001015490565b604051908152602001610119565b61019e6101993660046110bf565b61034b565b005b61019e6101ae3660046110bf565b610376565b61019e6101c13660046110eb565b6103ae565b61019e6101d4366004611128565b6105f8565b61023e6101e73660046110a6565b60408051606080820183526000808352602080840182905292840181905293845260038252928290208251938401835280546001600160a01b03908116855260018201541691840191909152600201549082015290565b6040805182516001600160a01b039081168252602080850151909116908201529181015190820152606001610119565b61019e61027c3660046111aa565b6107af565b61019e61028f3660046111d3565b610880565b6002546102a7906001600160a01b031681565b6040516001600160a01b039091168152602001610119565b61010d6102cd3660046110bf565b610912565b61017d600081565b61019e6102e83660046110bf565b61093b565b61017d7ff12fb6eaf1f045883c82d7d192627f7a36a50ce00c45e305919895908135a8a881565b60006001600160e01b03198216637965db0b60e01b148061034557506301ffc9a760e01b6001600160e01b03198316145b92915050565b60008281526020819052604090206001015461036681610960565b610370838361096d565b50505050565b6001600160a01b038116331461039f5760405163334bd91960e11b815260040160405180910390fd5b6103a982826109ff565b505050565b6103d87ff12fb6eaf1f045883c82d7d192627f7a36a50ce00c45e305919895908135a8a833610912565b6103fc57604051632be0ab4160e01b81523360048201526024015b60405180910390fd5b6001600160a01b03821661042357604051635fa08a6760e11b815260040160405180910390fd5b600081815260036020908152604091829020825160608101845281546001600160a01b03908116808352600184015490911693820193909352600290910154928101929092526104895760405163676e488b60e01b8152600481018390526024016103f3565b80604001516000036104b157604051630bf7b11560e21b8152600481018390526024016103f3565b60208101516001600160a01b03166104df57604051636bf870f560e01b8152600481018390526024016103f3565b836001600160a01b031681600001516001600160a01b03161461052b57805160405163318886e560e01b81526001600160a01b03808716600483015290911660248201526044016103f3565b60208101516040808301519051632142170760e11b81526001600160a01b038781166004830152868116602483015260448201929092529116906342842e0e90606401600060405180830381600087803b15801561058857600080fd5b505af115801561059c573d6000803e3d6000fd5b505050508060400151836001600160a01b0316856001600160a01b03167f8bc02676f507d67b3f04dc51f7d4f4143058e46f919bdbc0a13ef2cdd3b4ceae856040516105ea91815260200190565b60405180910390a450505050565b610600610a6a565b61060b878785610a94565b60405163179573d360e01b8152600481018690526000906001600160a01b0388169063179573d390602401602060405180830381865afa158015610653573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610677919061120a565b600085815260036020526040902080546001600160a01b03808c166001600160a01b03199283161783556001830180548c83169316929092179091556002549293509091166106c8818b3086610b96565b60006106d88a858b8b8a8a610bfd565b600284018190556040516323b872dd60e01b81523060048201526001600160a01b038d8116602483015260448201839052919250908b16906323b872dd90606401600060405180830381600087803b15801561073357600080fd5b505af1158015610747573d6000803e3d6000fd5b50505050808a6001600160a01b03168c6001600160a01b03167ff398f99f7ce820e5b296b9b0268ea3419fa937a85bc2b57b9068e21753449f668a60405161079191815260200190565b60405180910390a4505050506107a660018055565b50505050505050565b60006107ba81610960565b6001600160a01b0382166107e15760405163be66a61760e01b815260040160405180910390fd5b6002546040516370a0823160e01b81523060048201526001600160a01b039091169060009082906370a0823190602401602060405180830381865afa15801561082e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610852919061120a565b9050806000036108755760405163036cc52160e11b815260040160405180910390fd5b610370828583610da0565b600061088b81610960565b6001600160a01b0383166108b2576040516320a2414760e21b815260040160405180910390fd5b6001600160a01b038316600081815260046020908152604091829020805460ff191686151590811790915591519182527fa45086e331c44fd4e113c083683172fe7dda281d026009f67f10df2ae69188c9910160405180910390a2505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60008281526020819052604090206001015461095681610960565b61037083836109ff565b61096a8133610dd1565b50565b60006109798383610912565b6109f7576000838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556109af3390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4506001610345565b506000610345565b6000610a0b8383610912565b156109f7576000838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4506001610345565b600260015403610a8d57604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b6002546001600160a01b031633141580610ad55750610ad37ff12fb6eaf1f045883c82d7d192627f7a36a50ce00c45e305919895908135a8a884610912565b155b15610afe57604051632be0ab4160e01b81526001600160a01b03841660048201526024016103f3565b6001600160a01b03821660009081526004602052604090205460ff16610b425760405163e93b448360e01b81526001600160a01b03831660048201526024016103f3565b80600003610b63576040516315e2f8f360e31b815260040160405180910390fd5b600081815260036020526040902060020154156103a9576040516307e8e46760e01b8152600481018290526024016103f3565b6040516001600160a01b0384811660248301528381166044830152606482018390526103709186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050610e0e565b60008030600187878787604051602401610c1c96959493929190611223565b60408051601f198184030181529181526020820180516001600160e01b03166309acebd960e21b179052600254905191925060009182916001600160a01b031690610c6f908c908c90879060240161129a565b60408051601f198184030181529181526020820180516001600160e01b031663cae9ca5160e01b17905251610ca491906112e3565b6000604051808303816000865af19150503d8060008114610ce1576040519150601f19603f3d011682016040523d82523d6000602084013e610ce6565b606091505b509150915081610d095760405163933d37dd60e01b815260040160405180910390fd5b6040805160018082528183019092526000916020808301908036833701905050905060a082511015610d4e5760405163933d37dd60e01b815260040160405180910390fd5b60a0820151815181908390600090610d6857610d686112ff565b60200260200101818152505081600081518110610d8757610d876112ff565b6020026020010151955050505050509695505050505050565b6040516001600160a01b038381166024830152604482018390526103a991859182169063a9059cbb90606401610bcb565b610ddb8282610912565b610e0a5760405163e2517d3f60e01b81526001600160a01b0382166004820152602481018390526044016103f3565b5050565b6000610e236001600160a01b03841683610e71565b90508051600014158015610e48575080806020019051810190610e469190611315565b155b156103a957604051635274afe760e01b81526001600160a01b03841660048201526024016103f3565b6060610e7f83836000610e86565b9392505050565b606081471015610eab5760405163cd78605960e01b81523060048201526024016103f3565b600080856001600160a01b03168486604051610ec791906112e3565b60006040518083038185875af1925050503d8060008114610f04576040519150601f19603f3d011682016040523d82523d6000602084013e610f09565b606091505b5091509150610f19868383610f23565b9695505050505050565b606082610f3857610f3382610f7f565b610e7f565b8151158015610f4f57506001600160a01b0384163b155b15610f7857604051639996b31560e01b81526001600160a01b03851660048201526024016103f3565b5080610e7f565b805115610f8f5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b600060208284031215610fba57600080fd5b81356001600160e01b031981168114610e7f57600080fd5b80356001600160a01b0381168114610fe957600080fd5b919050565b60008083601f84011261100057600080fd5b50813567ffffffffffffffff81111561101857600080fd5b60208301915083602082850101111561103057600080fd5b9250929050565b60008060008060006080868803121561104f57600080fd5b61105886610fd2565b945061106660208701610fd2565b935060408601359250606086013567ffffffffffffffff81111561108957600080fd5b61109588828901610fee565b969995985093965092949392505050565b6000602082840312156110b857600080fd5b5035919050565b600080604083850312156110d257600080fd5b823591506110e260208401610fd2565b90509250929050565b60008060006060848603121561110057600080fd5b61110984610fd2565b925061111760208501610fd2565b929592945050506040919091013590565b600080600080600080600060c0888a03121561114357600080fd5b61114c88610fd2565b965061115a60208901610fd2565b955060408801359450606088013593506080880135925060a088013567ffffffffffffffff81111561118b57600080fd5b6111978a828b01610fee565b989b979a50959850939692959293505050565b6000602082840312156111bc57600080fd5b610e7f82610fd2565b801515811461096a57600080fd5b600080604083850312156111e657600080fd5b6111ef83610fd2565b915060208301356111ff816111c5565b809150509250929050565b60006020828403121561121c57600080fd5b5051919050565b60018060a01b038716815285602082015284604082015283606082015260a060808201528160a0820152818360c0830137600081830160c090810191909152601f909201601f1916010195945050505050565b60005b83811015611291578181015183820152602001611279565b50506000910152565b60018060a01b038416815282602082015260606040820152600082518060608401526112cd816080850160208701611276565b601f01601f191691909101608001949350505050565b600082516112f5818460208701611276565b9190910192915050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561132757600080fd5b8151610e7f816111c556fea26469706673582212200fbfeb22f4faa43c0b9e236a1ec13fb36e3bbad21773e3020162939bd15226b164736f6c634300081a0033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "The Sandbox",
    "custom:security-contact": "contact-blockchain@sandbox.game",
    "details": "Implements IERC721Receiver to handle NFT receipts. Uses Ownable for admin functions.",
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "events": {
      "NftTransferredViaWrapper(uint256,address,address,uint256)": {
        "params": {
          "from": "The address from which the NFT is transferred.",
          "localTokenId": "The local token ID representing the NFT.",
          "nftTokenId": "The actual ID of the transferred NFT.",
          "to": "The address to which the NFT is transferred."
        }
      },
      "PurchaseConfirmed(address,address,uint256,uint256)": {
        "params": {
          "localTokenId": "The temporary local token ID for this purchase.",
          "nftCollection": "The address of the NFT collection.",
          "nftTokenId": "The actual ID of the minted NFT.",
          "originalSender": "The address that initiated the purchase."
        }
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "confirmPurchase(address,address,uint256,uint256,uint256,bytes)": {
        "details": "The `randomTempTokenId` must be unique for each purchase attempt and is used to track      the purchase through to NFT delivery. This function sets transaction-scoped context      variables (`_txContext_...`) that are used by `onERC721Received`.",
        "params": {
          "nftCollection": "Address of the target NFT Collection contract for minting.",
          "randomTempTokenId": "A unique temporary ID chosen by the caller to identify this purchase.                          This ID will be associated with the minted NFT.",
          "sender": "The original EOA initiating the purchase and who will receive the NFT.",
          "signature": "The signature data for verification by the NFT Collection.",
          "signatureId": "The signature ID for verification by the NFT Collection.",
          "waveIndex": "The wave index for minting on the NFT Collection."
        }
      },
      "constructor": {
        "params": {
          "_admin": "The initial owner of this contract.",
          "_sandToken": "Address of the Sand (ERC20) token contract."
        }
      },
      "getPurchaseInfo(uint256)": {
        "params": {
          "localTokenId": "The local temporary token ID of the purchase."
        },
        "returns": {
          "_0": "A `PurchaseInfo` struct containing the details of the purchase."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "This function is a simple pass-through to conform to the IERC721Receiver interface.      The core logic has been moved into `confirmPurchase`.",
        "returns": {
          "_0": "bytes4 The selector `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`."
        }
      },
      "recoverSand(address)": {
        "details": "Only callable by the contract owner.",
        "params": {
          "recipient": "Address to receive the recovered ERC20 tokens."
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Similar to `transferFrom` but uses `safeTransferFrom` for the actual NFT transfer.      The `msg.sender` must be the `from` address.",
        "params": {
          "from": "The current owner of the NFT.",
          "localTokenId": "The local temporary token ID.",
          "to": "The new address to receive the NFT."
        }
      },
      "setNftCollectionAuthorization(address,bool)": {
        "details": "Only callable by the contract owner.",
        "params": {
          "isAuthorized": "Whether the NFT collection is authorized.",
          "nftCollection": "The address of the NFT collection to authorize."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "stateVariables": {
      "_purchaseInfo": {
        "details": "This `localTokenId` is provided by the caller during `confirmPurchase` and is used      to uniquely identify a purchase transaction and later to reference the minted NFT      in the wrapper's transfer functions."
      }
    },
    "title": "PurchaseWrapper",
    "version": 1
  },
  "userdoc": {
    "events": {
      "NftCollectionAuthorized(address,bool)": {
        "notice": "Emitted when an NFT collection is authorized."
      },
      "NftTransferredViaWrapper(uint256,address,address,uint256)": {
        "notice": "Emitted when an NFT is transferred using the wrapper's transfer functions."
      },
      "PurchaseConfirmed(address,address,uint256,uint256)": {
        "notice": "Emitted when an NFT purchase is confirmed and the minting process is initiated."
      }
    },
    "kind": "user",
    "methods": {
      "AUTHORIZED_CALLER_ROLE()": {
        "notice": "The role that is authorized to call this contract's functions."
      },
      "confirmPurchase(address,address,uint256,uint256,uint256,bytes)": {
        "notice": "Confirms a purchase request, takes payment, and initiates the NFT minting process         by calling `approveAndCall` on the `sandToken` contract, which in turn calls         the `waveMint` (or similar) function on the `nftCollection` contract."
      },
      "constructor": {
        "notice": "Constructor to set the SAND token contract address."
      },
      "getPurchaseInfo(uint256)": {
        "notice": "Retrieves the purchase information for a given local token ID."
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "notice": "Handles the receipt of an ERC721 token, expected to be called by an NFT collection         contract after a successful mint initiated by `confirmPurchase`."
      },
      "recoverSand(address)": {
        "notice": "Recovers SAND tokens (or other ERC20 specified in `sandToken`)         that were accidentally sent or accumulated in this contract."
      },
      "safeTransferFrom(address,address,uint256)": {
        "notice": "Safely transfers an NFT associated with a `localTokenId` using `safeTransferFrom`."
      },
      "sandToken()": {
        "notice": "Address of the SAND token used for purchases."
      },
      "setNftCollectionAuthorization(address,bool)": {
        "notice": "Sets the authorization status for an NFT collection to be used with this contract."
      }
    },
    "notice": "Contract that facilitates NFT purchases using SAND.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3488,
        "contract": "@sandbox-smart-contracts/avatar/contracts/nft-collection/PurchaseWrapper.sol:PurchaseWrapper",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)3483_storage)"
      },
      {
        "astId": 4858,
        "contract": "@sandbox-smart-contracts/avatar/contracts/nft-collection/PurchaseWrapper.sol:PurchaseWrapper",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 10112,
        "contract": "@sandbox-smart-contracts/avatar/contracts/nft-collection/PurchaseWrapper.sol:PurchaseWrapper",
        "label": "sandToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)4075"
      },
      {
        "astId": 10118,
        "contract": "@sandbox-smart-contracts/avatar/contracts/nft-collection/PurchaseWrapper.sol:PurchaseWrapper",
        "label": "_purchaseInfo",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(PurchaseInfo)10102_storage)"
      },
      {
        "astId": 10123,
        "contract": "@sandbox-smart-contracts/avatar/contracts/nft-collection/PurchaseWrapper.sol:PurchaseWrapper",
        "label": "_authorizedNftCollections",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)4075": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)3483_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)3483_storage"
      },
      "t_mapping(t_uint256,t_struct(PurchaseInfo)10102_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PurchaseWrapper.PurchaseInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PurchaseInfo)10102_storage"
      },
      "t_struct(PurchaseInfo)10102_storage": {
        "encoding": "inplace",
        "label": "struct PurchaseWrapper.PurchaseInfo",
        "members": [
          {
            "astId": 10097,
            "contract": "@sandbox-smart-contracts/avatar/contracts/nft-collection/PurchaseWrapper.sol:PurchaseWrapper",
            "label": "caller",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 10099,
            "contract": "@sandbox-smart-contracts/avatar/contracts/nft-collection/PurchaseWrapper.sol:PurchaseWrapper",
            "label": "nftCollection",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 10101,
            "contract": "@sandbox-smart-contracts/avatar/contracts/nft-collection/PurchaseWrapper.sol:PurchaseWrapper",
            "label": "nftTokenId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RoleData)3483_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 3480,
            "contract": "@sandbox-smart-contracts/avatar/contracts/nft-collection/PurchaseWrapper.sol:PurchaseWrapper",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 3482,
            "contract": "@sandbox-smart-contracts/avatar/contracts/nft-collection/PurchaseWrapper.sol:PurchaseWrapper",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
