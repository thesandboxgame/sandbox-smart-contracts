{
  "address": "0x9933784282B40DF46a72a4406bF23a47976d305d",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "basisPoints",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IRoyaltiesProvider.Part[]",
          "name": "royalties",
          "type": "tuple[]"
        }
      ],
      "name": "RoyaltiesSetForContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "enum RoyaltiesRegistry.RoyaltiesType",
          "name": "royaltiesType",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "royaltiesProvider",
          "type": "address"
        }
      ],
      "name": "RoyaltiesTypeSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "WEIGHT_VALUE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "clearRoyaltiesType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "enum RoyaltiesRegistry.RoyaltiesType",
          "name": "royaltiesType",
          "type": "uint8"
        }
      ],
      "name": "forceSetRoyaltiesType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getProvider",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRoyalties",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "basisPoints",
              "type": "uint256"
            }
          ],
          "internalType": "struct IRoyaltiesProvider.Part[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getRoyaltiesType",
      "outputs": [
        {
          "internalType": "enum RoyaltiesRegistry.RoyaltiesType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "royaltiesByToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "initialized",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "royaltiesProviders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "provider",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "setProviderByToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "basisPoints",
              "type": "uint256"
            }
          ],
          "internalType": "struct IRoyaltiesProvider.Part[]",
          "name": "royalties",
          "type": "tuple[]"
        }
      ],
      "name": "setRoyaltiesByToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3e4b602bd532c4d4c2cf9483063c6b19a2ab0d6e614691475649fdae3f1b025e",
  "receipt": {
    "to": null,
    "from": "0x5F890c9522dCE5670d741D4277BFCC2d9cA8Af02",
    "contractAddress": "0x9933784282B40DF46a72a4406bF23a47976d305d",
    "transactionIndex": 1,
    "gasUsed": "1574467",
    "logsBloom": "0x
    "blockHash": "0x8eaa33d0c04e19b73ced9485623c0bd4fe54e00248c2c231e68a94819df07b3d",
    "transactionHash": "0x3e4b602bd532c4d4c2cf9483063c6b19a2ab0d6e614691475649fdae3f1b025e",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 5667553,
        "transactionHash": "0x3e4b602bd532c4d4c2cf9483063c6b19a2ab0d6e614691475649fdae3f1b025e",
        "address": "0x9933784282B40DF46a72a4406bF23a47976d305d",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 2,
        "blockHash": "0x8eaa33d0c04e19b73ced9485623c0bd4fe54e00248c2c231e68a94819df07b3d"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 5667553,
        "transactionHash": "0x3e4b602bd532c4d4c2cf9483063c6b19a2ab0d6e614691475649fdae3f1b025e",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02",
          "0x0000000000000000000000004631753190f2f5a15a7ba172bbac102b7d95fa22"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000010c7e87ebc9a00000000000000000000000000000000000000000000000004140f248a604399ab00000000000000000000000000000000000000000000001935d514577a4fd33b00000000000000000000000000000000000000000000000413fe5ca1e186ffab00000000000000000000000000000000000000000000001935e5dc3ff90c6d3b",
        "logIndex": 3,
        "blockHash": "0x8eaa33d0c04e19b73ced9485623c0bd4fe54e00248c2c231e68a94819df07b3d"
      }
    ],
    "blockNumber": 5667553,
    "cumulativeGasUsed": "1621714",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "717a660df2bfa471d1011e81e6c90d87",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"basisPoints\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IRoyaltiesProvider.Part[]\",\"name\":\"royalties\",\"type\":\"tuple[]\"}],\"name\":\"RoyaltiesSetForContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum RoyaltiesRegistry.RoyaltiesType\",\"name\":\"royaltiesType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"royaltiesProvider\",\"type\":\"address\"}],\"name\":\"RoyaltiesTypeSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WEIGHT_VALUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"clearRoyaltiesType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"enum RoyaltiesRegistry.RoyaltiesType\",\"name\":\"royaltiesType\",\"type\":\"uint8\"}],\"name\":\"forceSetRoyaltiesType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRoyalties\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"basisPoints\",\"type\":\"uint256\"}],\"internalType\":\"struct IRoyaltiesProvider.Part[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getRoyaltiesType\",\"outputs\":[{\"internalType\":\"enum RoyaltiesRegistry.RoyaltiesType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"royaltiesByToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"royaltiesProviders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"provider\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"setProviderByToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"basisPoints\",\"type\":\"uint256\"}],\"internalType\":\"struct IRoyaltiesProvider.Part[]\",\"name\":\"royalties\",\"type\":\"tuple[]\"}],\"name\":\"setRoyaltiesByToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"The Sandbox\",\"details\":\"Contract managing the registry of royalties.\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"RoyaltiesSetForContract(address,(address,uint256)[])\":{\"params\":{\"royalties\":\"An array of royalties set for the token.\",\"token\":\"The token address for which royalties are set.\"}},\"RoyaltiesTypeSet(address,uint8,address)\":{\"params\":{\"royaltiesProvider\":\"The address of the royalties provider.\",\"royaltiesType\":\"The type of royalties set.\",\"token\":\"The token address.\"}}},\"kind\":\"dev\",\"methods\":{\"clearRoyaltiesType(address)\":{\"params\":{\"token\":\"Address of the token.\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\",\"details\":\"This protects the implementation contract from being initialized.\"},\"forceSetRoyaltiesType(address,uint8)\":{\"params\":{\"royaltiesType\":\"The new royalty type to be set.\",\"token\":\"Address of the token.\"}},\"getProvider(address)\":{\"params\":{\"token\":\"token address\"},\"returns\":{\"_0\":\"address of provider\"}},\"getRoyalties(address,uint256)\":{\"params\":{\"token\":\"Address of the token.\",\"tokenId\":\"ID of the token.\"},\"returns\":{\"_0\":\"An array containing royalty parts.\"}},\"getRoyaltiesType(address)\":{\"params\":{\"token\":\"Address of the token.\"},\"returns\":{\"_0\":\"The type of royalty associated with the token.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setProviderByToken(address,address)\":{\"params\":{\"provider\":\"Address of the external royalties provider.\",\"token\":\"Address of the token.\"}},\"setRoyaltiesByToken(address,(address,uint256)[])\":{\"params\":{\"royalties\":\"Array of royalty parts to be set for the token.\",\"token\":\"Address of the token.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"WEIGHT_VALUE\":{\"details\":\"Used to call EIP2981 royaltyInfo to calculate the royalties percentage\"}},\"title\":\"RoyaltiesRegistry\",\"version\":1},\"userdoc\":{\"events\":{\"RoyaltiesSetForContract(address,(address,uint256)[])\":{\"notice\":\"Emitted when royalties are set for a token.\"},\"RoyaltiesTypeSet(address,uint8,address)\":{\"notice\":\"Emitted when the royalties type and provider are defined for a token.\"}},\"kind\":\"user\",\"methods\":{\"clearRoyaltiesType(address)\":{\"notice\":\"Resets the royalty type for a token to 'UNSET'.\"},\"forceSetRoyaltiesType(address,uint8)\":{\"notice\":\"Overwrites the royalty type for a given token.\"},\"getProvider(address)\":{\"notice\":\"Returns provider address for token contract from royaltiesProviders mapping\"},\"getRoyalties(address,uint256)\":{\"notice\":\"Fetches royalties for a given token and token ID.\"},\"getRoyaltiesType(address)\":{\"notice\":\"Fetches the royalty type for a given token.\"},\"initialize()\":{\"notice\":\"Royalties registry initializer\"},\"royaltiesByToken(address)\":{\"notice\":\"Stores royalties for token contract, set in setRoyaltiesByToken() method\"},\"royaltiesProviders(address)\":{\"notice\":\"Stores external provider and royalties type for token contract\"},\"setProviderByToken(address,address)\":{\"notice\":\"Assigns an external provider for a token's royalties and sets the royalty type as 'EXTERNAL_PROVIDER' (2).\"},\"setRoyaltiesByToken(address,(address,uint256)[])\":{\"notice\":\"Defines royalties for a token and sets the royalty type as 'BY_TOKEN'.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@sandbox-smart-contracts/marketplace/contracts/RoyaltiesRegistry.sol\":\"RoyaltiesRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@manifoldxyz/royalty-registry-solidity/contracts/overrides/IRoyaltySplitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\nstruct Recipient {\\n    address payable recipient;\\n    uint16 bps;\\n}\\n\\ninterface IRoyaltySplitter is IERC165 {\\n    /**\\n     * @dev Set the splitter recipients. Total bps must total 10000.\\n     */\\n    function setRecipients(Recipient[] calldata recipients) external;\\n\\n    /**\\n     * @dev Get the splitter recipients;\\n     */\\n    function getRecipients() external view returns (Recipient[] memory);\\n}\\n\",\"keccak256\":\"0xc507963f66c4238d25e69d2d05ac5995c549aa89789e89e7a556403221547c6d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165CheckerUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165CheckerUpgradeable {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165Upgradeable).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165Upgradeable.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x94edef8687cf1335a114f7e7267fa92cb0d9e61afde8d62589aceede6c245caf\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x3976825a61df20457730b79ad0ac9c8908e3c7978ed9bf090c67137c91256b5c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/dependency-royalty-management/contracts/interfaces/IMultiRoyaltyRecipients.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Recipient} from \\\"@manifoldxyz/royalty-registry-solidity/contracts/overrides/IRoyaltySplitter.sol\\\";\\n\\n/// Multi-receiver EIP2981 implementation\\ninterface IMultiRoyaltyRecipients is IERC165 {\\n    /// @dev Helper function to get all recipients\\n    function getRecipients(uint256 tokenId) external view returns (Recipient[] memory);\\n}\\n\",\"keccak256\":\"0x2c6e5455253182472f0c7ef21c46279581e281d542b511b96cb693baa0863f33\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/marketplace/contracts/RoyaltiesRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport {IMultiRoyaltyRecipients} from \\\"@sandbox-smart-contracts/dependency-royalty-management/contracts/interfaces/IMultiRoyaltyRecipients.sol\\\";\\nimport {IERC2981} from \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\nimport {ERC165CheckerUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165CheckerUpgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {Recipient} from \\\"@manifoldxyz/royalty-registry-solidity/contracts/overrides/IRoyaltySplitter.sol\\\";\\nimport {IRoyaltiesProvider, TOTAL_BASIS_POINTS} from \\\"./interfaces/IRoyaltiesProvider.sol\\\";\\n\\n/// @author The Sandbox\\n/// @title RoyaltiesRegistry\\n/// @dev Contract managing the registry of royalties.\\ncontract RoyaltiesRegistry is OwnableUpgradeable, IRoyaltiesProvider {\\n    using ERC165CheckerUpgradeable for address;\\n    /// @notice Emitted when royalties are set for a token.\\n    /// @param token The token address for which royalties are set.\\n    /// @param royalties An array of royalties set for the token.\\n    event RoyaltiesSetForContract(address indexed token, Part[] royalties);\\n\\n    /// @notice Emitted when the royalties type and provider are defined for a token.\\n    /// @param token The token address.\\n    /// @param royaltiesType The type of royalties set.\\n    /// @param royaltiesProvider The address of the royalties provider.\\n    event RoyaltiesTypeSet(\\n        address indexed token,\\n        RoyaltiesType indexed royaltiesType,\\n        address indexed royaltiesProvider\\n    );\\n\\n    /// @dev Stores royalty information for tokens.\\n    struct RoyaltiesSet {\\n        bool initialized;\\n        Part[] royalties;\\n    }\\n\\n    /// @dev Represents a type of royalties.\\n    enum RoyaltiesType {\\n        UNSET,\\n        BY_TOKEN,\\n        EXTERNAL_PROVIDER,\\n        EIP2981,\\n        UNSUPPORTED_NONEXISTENT\\n    }\\n\\n    /// @dev Used to call EIP2981 royaltyInfo to calculate the royalties percentage\\n    uint256 public constant WEIGHT_VALUE = 1e6;\\n\\n    /// @notice Stores royalties for token contract, set in setRoyaltiesByToken() method\\n    mapping(address token => RoyaltiesSet royalties) public royaltiesByToken;\\n\\n    /// @notice Stores external provider and royalties type for token contract\\n    mapping(address token => uint256 provider) public royaltiesProviders;\\n\\n    /// @dev This protects the implementation contract from being initialized.\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Royalties registry initializer\\n    function initialize() external initializer {\\n        __Ownable_init();\\n    }\\n\\n    /// @notice Assigns an external provider for a token's royalties and sets the royalty type as 'EXTERNAL_PROVIDER' (2).\\n    /// @param token Address of the token.\\n    /// @param provider Address of the external royalties provider.\\n    function setProviderByToken(address token, address provider) external {\\n        _checkOwner(token);\\n        _setRoyaltiesType(token, RoyaltiesType.EXTERNAL_PROVIDER, provider);\\n    }\\n\\n    /// @notice Fetches the royalty type for a given token.\\n    /// @param token Address of the token.\\n    /// @return The type of royalty associated with the token.\\n    function getRoyaltiesType(address token) external view returns (RoyaltiesType) {\\n        return _getRoyaltiesType(royaltiesProviders[token]);\\n    }\\n\\n    /// @notice Overwrites the royalty type for a given token.\\n    /// @param token Address of the token.\\n    /// @param royaltiesType The new royalty type to be set.\\n    function forceSetRoyaltiesType(address token, RoyaltiesType royaltiesType) external {\\n        _checkOwner(token);\\n        _setRoyaltiesType(token, royaltiesType, getProvider(token));\\n    }\\n\\n    /// @notice Resets the royalty type for a token to 'UNSET'.\\n    /// @param token Address of the token.\\n    function clearRoyaltiesType(address token) external {\\n        _checkOwner(token);\\n        royaltiesProviders[token] = uint256(uint160(getProvider(token)));\\n\\n        emit RoyaltiesTypeSet(token, RoyaltiesType.UNSET, getProvider(token));\\n    }\\n\\n    /// @notice Defines royalties for a token and sets the royalty type as 'BY_TOKEN'.\\n    /// @param token Address of the token.\\n    /// @param royalties Array of royalty parts to be set for the token.\\n    function setRoyaltiesByToken(address token, Part[] memory royalties) external {\\n        _checkOwner(token);\\n        //clearing royaltiesProviders value for the token\\n        delete royaltiesProviders[token];\\n        // setting royaltiesType = 1 for the token\\n        _setRoyaltiesType(token, RoyaltiesType.BY_TOKEN, address(0));\\n        uint256 sumRoyalties = 0;\\n        delete royaltiesByToken[token];\\n        for (uint256 i = 0; i < royalties.length; ++i) {\\n            require(royalties[i].account != address(0x0), \\\"recipient should be present\\\");\\n            require(royalties[i].basisPoints != 0, \\\"basisPoints should be > 0\\\");\\n            royaltiesByToken[token].royalties.push(royalties[i]);\\n            sumRoyalties += royalties[i].basisPoints;\\n        }\\n        require(sumRoyalties < TOTAL_BASIS_POINTS, \\\"royalties sum is more than 100%\\\");\\n        royaltiesByToken[token].initialized = true;\\n        emit RoyaltiesSetForContract(token, royalties);\\n    }\\n\\n    /// @notice Fetches royalties for a given token and token ID.\\n    /// @param token Address of the token.\\n    /// @param tokenId ID of the token.\\n    /// @return An array containing royalty parts.\\n    function getRoyalties(address token, uint256 tokenId) external returns (Part[] memory) {\\n        uint256 royaltiesProviderData = royaltiesProviders[token];\\n\\n        address royaltiesProvider = address(uint160(royaltiesProviderData));\\n        RoyaltiesType royaltiesType = _getRoyaltiesType(royaltiesProviderData);\\n\\n        // case when royaltiesType is not set\\n        if (royaltiesType == RoyaltiesType.UNSET) {\\n            // calculating royalties type for token\\n            royaltiesType = _calculateRoyaltiesType(token, royaltiesProvider);\\n\\n            //saving royalties type\\n            _setRoyaltiesType(token, royaltiesType, royaltiesProvider);\\n        }\\n\\n        //case royaltiesType = 1, royalties are set in royaltiesByToken\\n        if (royaltiesType == RoyaltiesType.BY_TOKEN) {\\n            return royaltiesByToken[token].royalties;\\n        }\\n\\n        //case royaltiesType = 2, royalties from external provider\\n        if (royaltiesType == RoyaltiesType.EXTERNAL_PROVIDER) {\\n            return _providerExtractor(token, tokenId, royaltiesProvider);\\n        }\\n\\n        //case royaltiesType = 3, royalties EIP-2981\\n        if (royaltiesType == RoyaltiesType.EIP2981) {\\n            return _getRoyaltiesEIP2981(token, tokenId);\\n        }\\n\\n        // case royaltiesType = 4, unknown/empty royalties\\n        return new Part[](0);\\n    }\\n\\n    /// @notice Returns provider address for token contract from royaltiesProviders mapping\\n    /// @param token token address\\n    /// @return address of provider\\n    function getProvider(address token) public view returns (address) {\\n        return address(uint160(royaltiesProviders[token]));\\n    }\\n\\n    /// @notice Returns the royalties type for a given raw data value.\\n    /// @param data The raw data (uint256).\\n    /// @return The derived royalties type.\\n    function _getRoyaltiesType(uint256 data) internal pure returns (RoyaltiesType) {\\n        for (uint256 i = 1; i <= uint256(type(RoyaltiesType).max); ++i) {\\n            if (data / 2 ** (256 - i) == 1) {\\n                return RoyaltiesType(i);\\n            }\\n        }\\n        return RoyaltiesType.UNSET;\\n    }\\n\\n    /// @notice Sets the royalties type and provider for a given token contract.\\n    /// @param token The address of the token.\\n    /// @param royaltiesType The type of royalties to be set.\\n    /// @param royaltiesProvider The address of the royalties provider.\\n    function _setRoyaltiesType(address token, RoyaltiesType royaltiesType, address royaltiesProvider) internal {\\n        require(royaltiesType != RoyaltiesType.UNSET, \\\"wrong royaltiesType\\\");\\n        royaltiesProviders[token] = uint256(uint160(royaltiesProvider)) + 2 ** (256 - uint256(royaltiesType));\\n        emit RoyaltiesTypeSet(token, royaltiesType, royaltiesProvider);\\n    }\\n\\n    /// @notice Validates if the message sender is the owner of the contract or the given token.\\n    /// @param token Address of the token to check against.\\n    function _checkOwner(address token) internal view {\\n        if ((owner() != _msgSender()) && (OwnableUpgradeable(token).owner() != _msgSender())) {\\n            revert(\\\"token owner not detected\\\");\\n        }\\n    }\\n\\n    /// @notice Determines the royalties type for a given token.\\n    /// @param token Address of the token.\\n    /// @param royaltiesProvider Address of the royalties provider.\\n    /// @return The determined royalties type.\\n    function _calculateRoyaltiesType(address token, address royaltiesProvider) internal view returns (RoyaltiesType) {\\n        if (token.supportsInterface(type(IERC2981).interfaceId)) {\\n            return RoyaltiesType.EIP2981;\\n        }\\n\\n        if (royaltiesProvider != address(0)) {\\n            return RoyaltiesType.EXTERNAL_PROVIDER;\\n        }\\n\\n        return RoyaltiesType.UNSUPPORTED_NONEXISTENT;\\n    }\\n\\n    /// @notice Fetches EIP-2981 royalties for a given token ID.\\n    /// @param token Address of the token.\\n    /// @param tokenId ID of the token for which royalties are to be fetched.\\n    /// @return An array of parts representing the royalties.\\n    function _getRoyaltiesEIP2981(address token, uint256 tokenId) internal view returns (Part[] memory) {\\n        try IERC2981(token).royaltyInfo(tokenId, WEIGHT_VALUE) returns (address receiver, uint256 royaltyAmount) {\\n            if (token.supportsInterface(type(IMultiRoyaltyRecipients).interfaceId)) {\\n                return _getRecipients(token, tokenId, receiver, royaltyAmount);\\n            } else {\\n                return _calculateRoyalties(receiver, royaltyAmount);\\n            }\\n        } catch {\\n            return new Part[](0);\\n        }\\n    }\\n\\n    /// @notice Fetches the recipients and calculates the royalties.\\n    /// @param token Address of the token.\\n    /// @param tokenId ID of the token.\\n    /// @param receiver Address of the royalty receiver.\\n    /// @param royaltyAmount The total royalty amount.\\n    /// @return An array of parts representing the royalties.\\n    function _getRecipients(\\n        address token,\\n        uint256 tokenId,\\n        address receiver,\\n        uint256 royaltyAmount\\n    ) internal view returns (Part[] memory) {\\n        try IMultiRoyaltyRecipients(token).getRecipients(tokenId) returns (Recipient[] memory multiRecipients) {\\n            uint256 multiRecipientsLength = multiRecipients.length;\\n            Part[] memory royalties = new Part[](multiRecipientsLength);\\n            uint256 sum = 0;\\n            for (uint256 i; i < multiRecipientsLength; i++) {\\n                Recipient memory splitRecipient = multiRecipients[i];\\n                royalties[i].account = splitRecipient.recipient;\\n                uint256 splitAmount = (splitRecipient.bps * royaltyAmount) / WEIGHT_VALUE;\\n                royalties[i].basisPoints = splitAmount;\\n                sum += splitAmount;\\n            }\\n            // sum can be less than amount, otherwise small-value listings can break\\n            require(sum <= royaltyAmount, \\\"RoyaltiesRegistry: Invalid split\\\");\\n            return royalties;\\n            // solhint-disable-next-line no-empty-blocks\\n        } catch {}\\n\\n        return _calculateRoyalties(receiver, royaltyAmount);\\n    }\\n\\n    /// @notice Fetches royalties for a given token ID from an external provider.\\n    /// @param token Address of the token.\\n    /// @param tokenId ID of the token for which royalties are to be fetched.\\n    /// @param providerAddress Address of the external provider.\\n    /// @return An array of parts representing the royalties.\\n    function _providerExtractor(\\n        address token,\\n        uint256 tokenId,\\n        address providerAddress\\n    ) internal returns (Part[] memory) {\\n        try IRoyaltiesProvider(providerAddress).getRoyalties(token, tokenId) returns (Part[] memory result) {\\n            return result;\\n        } catch {\\n            return new Part[](0);\\n        }\\n    }\\n\\n    /// @notice Converts a given amount to its percentage representation and forms a royalty part.\\n    /// @param to Address of the royalty recipient.\\n    /// @param amount Amount of the royalty.\\n    /// @return An array containing the formed royalty part.\\n    function _calculateRoyalties(address to, uint256 amount) internal pure returns (Part[] memory) {\\n        Part[] memory result;\\n        if (amount == 0) {\\n            return result;\\n        }\\n        uint256 percent = (amount * TOTAL_BASIS_POINTS) / WEIGHT_VALUE;\\n        require(percent < TOTAL_BASIS_POINTS, \\\"royalties 2981 exceeds 100%\\\");\\n        result = new Part[](1);\\n        result[0].account = to;\\n        result[0].basisPoints = percent;\\n        return result;\\n    }\\n\\n    // slither-disable-next-line unused-state\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xaffd2883d02c94de5f738012e63743392d5045da22a64166bc5c0c503ea8a67e\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/marketplace/contracts/interfaces/IRoyaltiesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n// The IRoyaltiesProvider.Part.basisPoints represents percentages in base points: 2.5 % == 0.025 * 10000 == 250.\\n// We expect external contracts to return the values with this precision.\\nuint256 constant TOTAL_BASIS_POINTS = 10000;\\n\\n/// @author The Sandbox\\n/// @title RoyaltiesProvider contract interface\\n/// @notice Contains the signature for the getRoyalties function\\ninterface IRoyaltiesProvider {\\n    struct Part {\\n        address account;\\n        uint256 basisPoints;\\n    }\\n\\n    /// @notice Calculates all royalties in token for tokenId\\n    /// @param token Address of token\\n    /// @param tokenId of the token we want to calculate royalties\\n    /// @return A part with all royalties for token\\n    function getRoyalties(address token, uint256 tokenId) external returns (Part[] memory);\\n}\\n\",\"keccak256\":\"0xdb67e9a7128c33290b9cb64ade84bfac064e0936933b7385a4c1238df098aa41\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001961001e565b6100dd565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff908116146100db576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b611b1b806100ec6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80639ca7dc7a1161008c578063d836f01311610066578063d836f01314610209578063f2fde38b1461021c578063f39cc7061461022f578063fc73be001461024f57600080fd5b80639ca7dc7a146101be578063c3c52f18146101de578063c730dde2146101f157600080fd5b80638129fc1c116100c85780638129fc1c1461017257806382b19f121461017a5780638da5cb5b1461019a57806390f2b936146101ab57600080fd5b806305df952f146100ef57806355f21eb714610127578063715018a614610168575b600080fd5b6101126100fd3660046114d5565b60656020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b6101506101353660046114d5565b6001600160a01b031660009081526066602052604090205490565b6040516001600160a01b03909116815260200161011e565b610170610262565b005b610170610276565b61018d6101883660046114d5565b61039b565b60405161011e9190611508565b6033546001600160a01b0316610150565b6101706101b93660046115c4565b6103c3565b6101d16101cc36600461169c565b61069c565b60405161011e91906116c8565b6101706101ec366004611720565b610833565b6101fb620f424081565b60405190815260200161011e565b61017061021736600461175d565b610869565b61017061022a3660046114d5565b61087e565b6101fb61023d3660046114d5565b60666020526000908152604090205481565b61017061025d3660046114d5565b61090b565b61026a610963565b61027460006109bd565b565b600054610100900460ff16158080156102965750600054600160ff909116105b806102b05750303b1580156102b0575060005460ff166001145b6103275760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b6000805460ff19166001179055801561034a576000805461ff0019166101001790555b610352610a1c565b8015610398576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b6001600160a01b0381166000908152606660205260408120546103bd90610aa1565b92915050565b6103cc82610b08565b6001600160a01b03821660009081526066602052604081208190556103f5908390600190610be3565b6001600160a01b0382166000908152606560205260408120805460ff1916815581610423600183018261146d565b505060005b82518110156105ea5760006001600160a01b031683828151811061044e5761044e61178b565b6020026020010151600001516001600160a01b0316036104b05760405162461bcd60e51b815260206004820152601b60248201527f726563697069656e742073686f756c642062652070726573656e740000000000604482015260640161031e565b8281815181106104c2576104c261178b565b60200260200101516020015160000361051d5760405162461bcd60e51b815260206004820152601960248201527f6261736973506f696e74732073686f756c64206265203e203000000000000000604482015260640161031e565b60656000856001600160a01b03166001600160a01b031681526020019081526020016000206001018382815181106105575761055761178b565b6020908102919091018101518254600180820185556000948552938390208251600290920201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390921691909117815591015191015582518390829081106105c1576105c161178b565b602002602001015160200151826105d891906117b7565b91506105e3816117ca565b9050610428565b50612710811061063c5760405162461bcd60e51b815260206004820152601f60248201527f726f79616c746965732073756d206973206d6f7265207468616e203130302500604482015260640161031e565b6001600160a01b03831660008181526065602052604090819020805460ff19166001179055517fa3d16188597005d2eca1790984d22f379505b31a88766996ca6a3f7b5817d32c9061068f9085906116c8565b60405180910390a2505050565b6001600160a01b03821660009081526066602052604081205460609181906106c382610aa1565b905060008160048111156106d9576106d96114f2565b036106f5576106e88683610cea565b90506106f5868284610be3565b6001816004811115610709576107096114f2565b0361079a576001600160a01b038616600090815260656020908152604080832060010180548251818502810185019093528083529193909284015b8282101561078c576000848152602090819020604080518082019091526002850290910180546001600160a01b03168252600190810154828401529083529092019101610744565b5050505093505050506103bd565b60028160048111156107ae576107ae6114f2565b036107c8576107be868684610d4c565b93505050506103bd565b60038160048111156107dc576107dc6114f2565b036107eb576107be8686610e2a565b6040805160008082526020820190925290610828565b60408051808201909152600080825260208201528152602001906001900390816108015790505b509695505050505050565b61083c82610b08565b6108658282610860856001600160a01b031660009081526066602052604090205490565b610be3565b5050565b61087282610b08565b61086582600283610be3565b610886610963565b6001600160a01b0381166109025760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161031e565b610398816109bd565b61091481610b08565b6001600160a01b03818116600081815260666020526040808220805490941693849055519091907fade6cdab0cf92bd1976a7a2324ee3c1eac398f98a9500a0c8ee8d58e79b39d2f908390a450565b6033546001600160a01b031633146102745760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161031e565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16610a995760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161031e565b610274610f4f565b600060015b60048111610aff57610aba816101006117e4565b610ac59060026118db565b610acf90846118e7565b600103610aef57806004811115610ae857610ae86114f2565b9392505050565b610af8816117ca565b9050610aa6565b50600092915050565b6033546001600160a01b03163314801590610b965750336001600160a01b0316816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8a9190611909565b6001600160a01b031614155b156103985760405162461bcd60e51b815260206004820152601860248201527f746f6b656e206f776e6572206e6f742064657465637465640000000000000000604482015260640161031e565b6000826004811115610bf757610bf76114f2565b03610c445760405162461bcd60e51b815260206004820152601360248201527f77726f6e6720726f79616c746965735479706500000000000000000000000000604482015260640161031e565b816004811115610c5657610c566114f2565b610c62906101006117e4565b610c6d9060026118db565b610c80906001600160a01b0383166117b7565b6001600160a01b038085166000908152606660205260409020919091558116826004811115610cb157610cb16114f2565b6040516001600160a01b038616907fade6cdab0cf92bd1976a7a2324ee3c1eac398f98a9500a0c8ee8d58e79b39d2f90600090a4505050565b6000610d1f6001600160a01b0384167f2a55205a00000000000000000000000000000000000000000000000000000000610fd5565b15610d2c575060036103bd565b6001600160a01b03821615610d43575060026103bd565b50600492915050565b6040517f9ca7dc7a0000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301526024820184905260609190831690639ca7dc7a906044016000604051808303816000875af1925050508015610dd957506040513d6000823e601f3d908101601f19168201604052610dd69190810190611926565b60015b610e22576040805160008082526020820190925290610e1a565b6040805180820190915260008082526020820152815260200190600190039081610df35790505b509050610ae8565b949350505050565b6040517f2a55205a00000000000000000000000000000000000000000000000000000000815260048101829052620f424060248201526060906001600160a01b03841690632a55205a906044016040805180830381865afa925050508015610eaf575060408051601f3d908101601f19168201909252610eac918101906119da565b60015b610ef8576040805160008082526020820190925290610ef0565b6040805180820190915260008082526020820152815260200190600190039081610ec95790505b5090506103bd565b610f2b6001600160a01b0386167ffd90e89700000000000000000000000000000000000000000000000000000000610fd5565b15610f4557610f3c85858484610ff1565b925050506103bd565b610f3c8282611219565b600054610100900460ff16610fcc5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161031e565b610274336109bd565b6000610fe08361133a565b8015610ae85750610ae8838361139e565b6040517ffd90e897000000000000000000000000000000000000000000000000000000008152600481018490526060906001600160a01b0386169063fd90e89790602401600060405180830381865afa92505050801561107357506040513d6000823e601f3d908101601f191682016040526110709190810190611a08565b60015b1561120657805160008167ffffffffffffffff81111561109557611095611530565b6040519080825280602002602001820160405280156110da57816020015b60408051808201909152600080825260208201528152602001906001900390816110b35790505b5090506000805b838110156111aa5760008582815181106110fd576110fd61178b565b60200260200101519050806000015184838151811061111e5761111e61178b565b6020026020010151600001906001600160a01b031690816001600160a01b0316815250506000620f424089836020015161ffff1661115c9190611ace565b61116691906118e7565b90508085848151811061117b5761117b61178b565b602090810291909101810151015261119381856117b7565b9350505080806111a2906117ca565b9150506110e1565b50858111156111fb5760405162461bcd60e51b815260206004820181905260248201527f526f79616c7469657352656769737472793a20496e76616c69642073706c6974604482015260640161031e565b509250610e22915050565b6112108383611219565b95945050505050565b6060808260000361122b5790506103bd565b6000620f424061123d61271086611ace565b61124791906118e7565b9050612710811061129a5760405162461bcd60e51b815260206004820152601b60248201527f726f79616c746965732032393831206578636565647320313030250000000000604482015260640161031e565b60408051600180825281830190925290816020015b60408051808201909152600080825260208201528152602001906001900390816112af57905050915084826000815181106112ec576112ec61178b565b6020026020010151600001906001600160a01b031690816001600160a01b03168152505080826000815181106113245761132461178b565b6020908102919091018101510152509392505050565b6000611366827f01ffc9a70000000000000000000000000000000000000000000000000000000061139e565b80156103bd5750611397827fffffffff0000000000000000000000000000000000000000000000000000000061139e565b1592915050565b604080517fffffffff000000000000000000000000000000000000000000000000000000008316602480830191909152825180830390910181526044909101909152602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01ffc9a700000000000000000000000000000000000000000000000000000000178152825160009392849283928392918391908a617530fa92503d91506000519050828015611456575060208210155b80156114625750600081115b979650505050505050565b508054600082556002029060005260206000209081019061039891905b808211156114bc57805473ffffffffffffffffffffffffffffffffffffffff191681556000600182015560020161148a565b5090565b6001600160a01b038116811461039857600080fd5b6000602082840312156114e757600080fd5b8135610ae8816114c0565b634e487b7160e01b600052602160045260246000fd5b602081016005831061152a57634e487b7160e01b600052602160045260246000fd5b91905290565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561156957611569611530565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561159857611598611530565b604052919050565b600067ffffffffffffffff8211156115ba576115ba611530565b5060051b60200190565b60008060408084860312156115d857600080fd5b83356115e3816114c0565b925060208481013567ffffffffffffffff81111561160057600080fd5b8501601f8101871361161157600080fd5b803561162461161f826115a0565b61156f565b81815260069190911b8201830190838101908983111561164357600080fd5b928401925b8284101561168c5785848b0312156116605760008081fd5b611668611546565b8435611673816114c0565b8152848601358682015282529285019290840190611648565b8096505050505050509250929050565b600080604083850312156116af57600080fd5b82356116ba816114c0565b946020939093013593505050565b602080825282518282018190526000919060409081850190868401855b8281101561171357815180516001600160a01b031685528601518685015292840192908501906001016116e5565b5091979650505050505050565b6000806040838503121561173357600080fd5b823561173e816114c0565b915060208301356005811061175257600080fd5b809150509250929050565b6000806040838503121561177057600080fd5b823561177b816114c0565b91506020830135611752816114c0565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156103bd576103bd6117a1565b600060001982036117dd576117dd6117a1565b5060010190565b818103818111156103bd576103bd6117a1565b600181815b80851115611832578160001904821115611818576118186117a1565b8085161561182557918102915b93841c93908002906117fc565b509250929050565b600082611849575060016103bd565b81611856575060006103bd565b816001811461186c576002811461187657611892565b60019150506103bd565b60ff841115611887576118876117a1565b50506001821b6103bd565b5060208310610133831016604e8410600b84101617156118b5575081810a6103bd565b6118bf83836117f7565b80600019048211156118d3576118d36117a1565b029392505050565b6000610ae8838361183a565b60008261190457634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561191b57600080fd5b8151610ae8816114c0565b6000602080838503121561193957600080fd5b825167ffffffffffffffff81111561195057600080fd5b8301601f8101851361196157600080fd5b805161196f61161f826115a0565b81815260069190911b8201830190838101908783111561198e57600080fd5b928401925b8284101561146257604084890312156119ac5760008081fd5b6119b4611546565b84516119bf816114c0565b81528486015186820152825260409093019290840190611993565b600080604083850312156119ed57600080fd5b82516119f8816114c0565b6020939093015192949293505050565b60006020808385031215611a1b57600080fd5b825167ffffffffffffffff811115611a3257600080fd5b8301601f81018513611a4357600080fd5b8051611a5161161f826115a0565b81815260069190911b82018301908381019087831115611a7057600080fd5b928401925b828410156114625760408489031215611a8e5760008081fd5b611a96611546565b8451611aa1816114c0565b81528486015161ffff81168114611ab85760008081fd5b8187015282526040939093019290840190611a75565b80820281158282048414176103bd576103bd6117a156fea2646970667358221220cd3b913f53be2c8f2b1ea421bfe8073d6f23da17e061822f9f367a8150520b9e64736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c80639ca7dc7a1161008c578063d836f01311610066578063d836f01314610209578063f2fde38b1461021c578063f39cc7061461022f578063fc73be001461024f57600080fd5b80639ca7dc7a146101be578063c3c52f18146101de578063c730dde2146101f157600080fd5b80638129fc1c116100c85780638129fc1c1461017257806382b19f121461017a5780638da5cb5b1461019a57806390f2b936146101ab57600080fd5b806305df952f146100ef57806355f21eb714610127578063715018a614610168575b600080fd5b6101126100fd3660046114d5565b60656020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b6101506101353660046114d5565b6001600160a01b031660009081526066602052604090205490565b6040516001600160a01b03909116815260200161011e565b610170610262565b005b610170610276565b61018d6101883660046114d5565b61039b565b60405161011e9190611508565b6033546001600160a01b0316610150565b6101706101b93660046115c4565b6103c3565b6101d16101cc36600461169c565b61069c565b60405161011e91906116c8565b6101706101ec366004611720565b610833565b6101fb620f424081565b60405190815260200161011e565b61017061021736600461175d565b610869565b61017061022a3660046114d5565b61087e565b6101fb61023d3660046114d5565b60666020526000908152604090205481565b61017061025d3660046114d5565b61090b565b61026a610963565b61027460006109bd565b565b600054610100900460ff16158080156102965750600054600160ff909116105b806102b05750303b1580156102b0575060005460ff166001145b6103275760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b6000805460ff19166001179055801561034a576000805461ff0019166101001790555b610352610a1c565b8015610398576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b6001600160a01b0381166000908152606660205260408120546103bd90610aa1565b92915050565b6103cc82610b08565b6001600160a01b03821660009081526066602052604081208190556103f5908390600190610be3565b6001600160a01b0382166000908152606560205260408120805460ff1916815581610423600183018261146d565b505060005b82518110156105ea5760006001600160a01b031683828151811061044e5761044e61178b565b6020026020010151600001516001600160a01b0316036104b05760405162461bcd60e51b815260206004820152601b60248201527f726563697069656e742073686f756c642062652070726573656e740000000000604482015260640161031e565b8281815181106104c2576104c261178b565b60200260200101516020015160000361051d5760405162461bcd60e51b815260206004820152601960248201527f6261736973506f696e74732073686f756c64206265203e203000000000000000604482015260640161031e565b60656000856001600160a01b03166001600160a01b031681526020019081526020016000206001018382815181106105575761055761178b565b6020908102919091018101518254600180820185556000948552938390208251600290920201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390921691909117815591015191015582518390829081106105c1576105c161178b565b602002602001015160200151826105d891906117b7565b91506105e3816117ca565b9050610428565b50612710811061063c5760405162461bcd60e51b815260206004820152601f60248201527f726f79616c746965732073756d206973206d6f7265207468616e203130302500604482015260640161031e565b6001600160a01b03831660008181526065602052604090819020805460ff19166001179055517fa3d16188597005d2eca1790984d22f379505b31a88766996ca6a3f7b5817d32c9061068f9085906116c8565b60405180910390a2505050565b6001600160a01b03821660009081526066602052604081205460609181906106c382610aa1565b905060008160048111156106d9576106d96114f2565b036106f5576106e88683610cea565b90506106f5868284610be3565b6001816004811115610709576107096114f2565b0361079a576001600160a01b038616600090815260656020908152604080832060010180548251818502810185019093528083529193909284015b8282101561078c576000848152602090819020604080518082019091526002850290910180546001600160a01b03168252600190810154828401529083529092019101610744565b5050505093505050506103bd565b60028160048111156107ae576107ae6114f2565b036107c8576107be868684610d4c565b93505050506103bd565b60038160048111156107dc576107dc6114f2565b036107eb576107be8686610e2a565b6040805160008082526020820190925290610828565b60408051808201909152600080825260208201528152602001906001900390816108015790505b509695505050505050565b61083c82610b08565b6108658282610860856001600160a01b031660009081526066602052604090205490565b610be3565b5050565b61087282610b08565b61086582600283610be3565b610886610963565b6001600160a01b0381166109025760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161031e565b610398816109bd565b61091481610b08565b6001600160a01b03818116600081815260666020526040808220805490941693849055519091907fade6cdab0cf92bd1976a7a2324ee3c1eac398f98a9500a0c8ee8d58e79b39d2f908390a450565b6033546001600160a01b031633146102745760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161031e565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16610a995760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161031e565b610274610f4f565b600060015b60048111610aff57610aba816101006117e4565b610ac59060026118db565b610acf90846118e7565b600103610aef57806004811115610ae857610ae86114f2565b9392505050565b610af8816117ca565b9050610aa6565b50600092915050565b6033546001600160a01b03163314801590610b965750336001600160a01b0316816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8a9190611909565b6001600160a01b031614155b156103985760405162461bcd60e51b815260206004820152601860248201527f746f6b656e206f776e6572206e6f742064657465637465640000000000000000604482015260640161031e565b6000826004811115610bf757610bf76114f2565b03610c445760405162461bcd60e51b815260206004820152601360248201527f77726f6e6720726f79616c746965735479706500000000000000000000000000604482015260640161031e565b816004811115610c5657610c566114f2565b610c62906101006117e4565b610c6d9060026118db565b610c80906001600160a01b0383166117b7565b6001600160a01b038085166000908152606660205260409020919091558116826004811115610cb157610cb16114f2565b6040516001600160a01b038616907fade6cdab0cf92bd1976a7a2324ee3c1eac398f98a9500a0c8ee8d58e79b39d2f90600090a4505050565b6000610d1f6001600160a01b0384167f2a55205a00000000000000000000000000000000000000000000000000000000610fd5565b15610d2c575060036103bd565b6001600160a01b03821615610d43575060026103bd565b50600492915050565b6040517f9ca7dc7a0000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301526024820184905260609190831690639ca7dc7a906044016000604051808303816000875af1925050508015610dd957506040513d6000823e601f3d908101601f19168201604052610dd69190810190611926565b60015b610e22576040805160008082526020820190925290610e1a565b6040805180820190915260008082526020820152815260200190600190039081610df35790505b509050610ae8565b949350505050565b6040517f2a55205a00000000000000000000000000000000000000000000000000000000815260048101829052620f424060248201526060906001600160a01b03841690632a55205a906044016040805180830381865afa925050508015610eaf575060408051601f3d908101601f19168201909252610eac918101906119da565b60015b610ef8576040805160008082526020820190925290610ef0565b6040805180820190915260008082526020820152815260200190600190039081610ec95790505b5090506103bd565b610f2b6001600160a01b0386167ffd90e89700000000000000000000000000000000000000000000000000000000610fd5565b15610f4557610f3c85858484610ff1565b925050506103bd565b610f3c8282611219565b600054610100900460ff16610fcc5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161031e565b610274336109bd565b6000610fe08361133a565b8015610ae85750610ae8838361139e565b6040517ffd90e897000000000000000000000000000000000000000000000000000000008152600481018490526060906001600160a01b0386169063fd90e89790602401600060405180830381865afa92505050801561107357506040513d6000823e601f3d908101601f191682016040526110709190810190611a08565b60015b1561120657805160008167ffffffffffffffff81111561109557611095611530565b6040519080825280602002602001820160405280156110da57816020015b60408051808201909152600080825260208201528152602001906001900390816110b35790505b5090506000805b838110156111aa5760008582815181106110fd576110fd61178b565b60200260200101519050806000015184838151811061111e5761111e61178b565b6020026020010151600001906001600160a01b031690816001600160a01b0316815250506000620f424089836020015161ffff1661115c9190611ace565b61116691906118e7565b90508085848151811061117b5761117b61178b565b602090810291909101810151015261119381856117b7565b9350505080806111a2906117ca565b9150506110e1565b50858111156111fb5760405162461bcd60e51b815260206004820181905260248201527f526f79616c7469657352656769737472793a20496e76616c69642073706c6974604482015260640161031e565b509250610e22915050565b6112108383611219565b95945050505050565b6060808260000361122b5790506103bd565b6000620f424061123d61271086611ace565b61124791906118e7565b9050612710811061129a5760405162461bcd60e51b815260206004820152601b60248201527f726f79616c746965732032393831206578636565647320313030250000000000604482015260640161031e565b60408051600180825281830190925290816020015b60408051808201909152600080825260208201528152602001906001900390816112af57905050915084826000815181106112ec576112ec61178b565b6020026020010151600001906001600160a01b031690816001600160a01b03168152505080826000815181106113245761132461178b565b6020908102919091018101510152509392505050565b6000611366827f01ffc9a70000000000000000000000000000000000000000000000000000000061139e565b80156103bd5750611397827fffffffff0000000000000000000000000000000000000000000000000000000061139e565b1592915050565b604080517fffffffff000000000000000000000000000000000000000000000000000000008316602480830191909152825180830390910181526044909101909152602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01ffc9a700000000000000000000000000000000000000000000000000000000178152825160009392849283928392918391908a617530fa92503d91506000519050828015611456575060208210155b80156114625750600081115b979650505050505050565b508054600082556002029060005260206000209081019061039891905b808211156114bc57805473ffffffffffffffffffffffffffffffffffffffff191681556000600182015560020161148a565b5090565b6001600160a01b038116811461039857600080fd5b6000602082840312156114e757600080fd5b8135610ae8816114c0565b634e487b7160e01b600052602160045260246000fd5b602081016005831061152a57634e487b7160e01b600052602160045260246000fd5b91905290565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561156957611569611530565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561159857611598611530565b604052919050565b600067ffffffffffffffff8211156115ba576115ba611530565b5060051b60200190565b60008060408084860312156115d857600080fd5b83356115e3816114c0565b925060208481013567ffffffffffffffff81111561160057600080fd5b8501601f8101871361161157600080fd5b803561162461161f826115a0565b61156f565b81815260069190911b8201830190838101908983111561164357600080fd5b928401925b8284101561168c5785848b0312156116605760008081fd5b611668611546565b8435611673816114c0565b8152848601358682015282529285019290840190611648565b8096505050505050509250929050565b600080604083850312156116af57600080fd5b82356116ba816114c0565b946020939093013593505050565b602080825282518282018190526000919060409081850190868401855b8281101561171357815180516001600160a01b031685528601518685015292840192908501906001016116e5565b5091979650505050505050565b6000806040838503121561173357600080fd5b823561173e816114c0565b915060208301356005811061175257600080fd5b809150509250929050565b6000806040838503121561177057600080fd5b823561177b816114c0565b91506020830135611752816114c0565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156103bd576103bd6117a1565b600060001982036117dd576117dd6117a1565b5060010190565b818103818111156103bd576103bd6117a1565b600181815b80851115611832578160001904821115611818576118186117a1565b8085161561182557918102915b93841c93908002906117fc565b509250929050565b600082611849575060016103bd565b81611856575060006103bd565b816001811461186c576002811461187657611892565b60019150506103bd565b60ff841115611887576118876117a1565b50506001821b6103bd565b5060208310610133831016604e8410600b84101617156118b5575081810a6103bd565b6118bf83836117f7565b80600019048211156118d3576118d36117a1565b029392505050565b6000610ae8838361183a565b60008261190457634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561191b57600080fd5b8151610ae8816114c0565b6000602080838503121561193957600080fd5b825167ffffffffffffffff81111561195057600080fd5b8301601f8101851361196157600080fd5b805161196f61161f826115a0565b81815260069190911b8201830190838101908783111561198e57600080fd5b928401925b8284101561146257604084890312156119ac5760008081fd5b6119b4611546565b84516119bf816114c0565b81528486015186820152825260409093019290840190611993565b600080604083850312156119ed57600080fd5b82516119f8816114c0565b6020939093015192949293505050565b60006020808385031215611a1b57600080fd5b825167ffffffffffffffff811115611a3257600080fd5b8301601f81018513611a4357600080fd5b8051611a5161161f826115a0565b81815260069190911b82018301908381019087831115611a7057600080fd5b928401925b828410156114625760408489031215611a8e5760008081fd5b611a96611546565b8451611aa1816114c0565b81528486015161ffff81168114611ab85760008081fd5b8187015282526040939093019290840190611a75565b80820281158282048414176103bd576103bd6117a156fea2646970667358221220cd3b913f53be2c8f2b1ea421bfe8073d6f23da17e061822f9f367a8150520b9e64736f6c63430008130033",
  "devdoc": {
    "author": "The Sandbox",
    "details": "Contract managing the registry of royalties.",
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "RoyaltiesSetForContract(address,(address,uint256)[])": {
        "params": {
          "royalties": "An array of royalties set for the token.",
          "token": "The token address for which royalties are set."
        }
      },
      "RoyaltiesTypeSet(address,uint8,address)": {
        "params": {
          "royaltiesProvider": "The address of the royalties provider.",
          "royaltiesType": "The type of royalties set.",
          "token": "The token address."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "clearRoyaltiesType(address)": {
        "params": {
          "token": "Address of the token."
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor",
        "details": "This protects the implementation contract from being initialized."
      },
      "forceSetRoyaltiesType(address,uint8)": {
        "params": {
          "royaltiesType": "The new royalty type to be set.",
          "token": "Address of the token."
        }
      },
      "getProvider(address)": {
        "params": {
          "token": "token address"
        },
        "returns": {
          "_0": "address of provider"
        }
      },
      "getRoyalties(address,uint256)": {
        "params": {
          "token": "Address of the token.",
          "tokenId": "ID of the token."
        },
        "returns": {
          "_0": "An array containing royalty parts."
        }
      },
      "getRoyaltiesType(address)": {
        "params": {
          "token": "Address of the token."
        },
        "returns": {
          "_0": "The type of royalty associated with the token."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setProviderByToken(address,address)": {
        "params": {
          "provider": "Address of the external royalties provider.",
          "token": "Address of the token."
        }
      },
      "setRoyaltiesByToken(address,(address,uint256)[])": {
        "params": {
          "royalties": "Array of royalty parts to be set for the token.",
          "token": "Address of the token."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "WEIGHT_VALUE": {
        "details": "Used to call EIP2981 royaltyInfo to calculate the royalties percentage"
      }
    },
    "title": "RoyaltiesRegistry",
    "version": 1
  },
  "userdoc": {
    "events": {
      "RoyaltiesSetForContract(address,(address,uint256)[])": {
        "notice": "Emitted when royalties are set for a token."
      },
      "RoyaltiesTypeSet(address,uint8,address)": {
        "notice": "Emitted when the royalties type and provider are defined for a token."
      }
    },
    "kind": "user",
    "methods": {
      "clearRoyaltiesType(address)": {
        "notice": "Resets the royalty type for a token to 'UNSET'."
      },
      "forceSetRoyaltiesType(address,uint8)": {
        "notice": "Overwrites the royalty type for a given token."
      },
      "getProvider(address)": {
        "notice": "Returns provider address for token contract from royaltiesProviders mapping"
      },
      "getRoyalties(address,uint256)": {
        "notice": "Fetches royalties for a given token and token ID."
      },
      "getRoyaltiesType(address)": {
        "notice": "Fetches the royalty type for a given token."
      },
      "initialize()": {
        "notice": "Royalties registry initializer"
      },
      "royaltiesByToken(address)": {
        "notice": "Stores royalties for token contract, set in setRoyaltiesByToken() method"
      },
      "royaltiesProviders(address)": {
        "notice": "Stores external provider and royalties type for token contract"
      },
      "setProviderByToken(address,address)": {
        "notice": "Assigns an external provider for a token's royalties and sets the royalty type as 'EXTERNAL_PROVIDER' (2)."
      },
      "setRoyaltiesByToken(address,(address,uint256)[])": {
        "notice": "Defines royalties for a token and sets the royalty type as 'BY_TOKEN'."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 786,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/RoyaltiesRegistry.sol:RoyaltiesRegistry",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 789,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/RoyaltiesRegistry.sol:RoyaltiesRegistry",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2184,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/RoyaltiesRegistry.sol:RoyaltiesRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 619,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/RoyaltiesRegistry.sol:RoyaltiesRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 739,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/RoyaltiesRegistry.sol:RoyaltiesRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6484,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/RoyaltiesRegistry.sol:RoyaltiesRegistry",
        "label": "royaltiesByToken",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_address,t_struct(RoyaltiesSet)6468_storage)"
      },
      {
        "astId": 6489,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/RoyaltiesRegistry.sol:RoyaltiesRegistry",
        "label": "royaltiesProviders",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7273,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/RoyaltiesRegistry.sol:RoyaltiesRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "103",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Part)8369_storage)dyn_storage": {
        "base": "t_struct(Part)8369_storage",
        "encoding": "dynamic_array",
        "label": "struct IRoyaltiesProvider.Part[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(RoyaltiesSet)6468_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RoyaltiesRegistry.RoyaltiesSet)",
        "numberOfBytes": "32",
        "value": "t_struct(RoyaltiesSet)6468_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Part)8369_storage": {
        "encoding": "inplace",
        "label": "struct IRoyaltiesProvider.Part",
        "members": [
          {
            "astId": 8366,
            "contract": "@sandbox-smart-contracts/marketplace/contracts/RoyaltiesRegistry.sol:RoyaltiesRegistry",
            "label": "account",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8368,
            "contract": "@sandbox-smart-contracts/marketplace/contracts/RoyaltiesRegistry.sol:RoyaltiesRegistry",
            "label": "basisPoints",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoyaltiesSet)6468_storage": {
        "encoding": "inplace",
        "label": "struct RoyaltiesRegistry.RoyaltiesSet",
        "members": [
          {
            "astId": 6463,
            "contract": "@sandbox-smart-contracts/marketplace/contracts/RoyaltiesRegistry.sol:RoyaltiesRegistry",
            "label": "initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 6467,
            "contract": "@sandbox-smart-contracts/marketplace/contracts/RoyaltiesRegistry.sol:RoyaltiesRegistry",
            "label": "royalties",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(Part)8369_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}