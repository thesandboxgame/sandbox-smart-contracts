{
  "address": "0xD31Df483b1dDfb5670370E09Bcd411Aa668ad386",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "AlreadyRegistered",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "enum INFTCollection.MintDenialReason",
          "name": "reason",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "waveIndex",
          "type": "uint256"
        }
      ],
      "name": "CannotMint",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ContractNotConfigured",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ECDSAInvalidSignature",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "ECDSAInvalidSignatureLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "ECDSAInvalidSignatureS",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "ERC2981InvalidDefaultRoyalty",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC2981InvalidDefaultRoyaltyReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "ERC2981InvalidTokenRoyalty",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC2981InvalidTokenRoyaltyReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC721IncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC721InsufficientApproval",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidOperator",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC721NonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedBurn",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedBurn",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "allowedToExecuteMint",
          "type": "address"
        }
      ],
      "name": "InvalidAllowedToExecuteMint",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "InvalidBaseTokenURI",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidBatchData",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxTokensPerWallet",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxSupply",
          "type": "uint256"
        }
      ],
      "name": "InvalidMaxTokensPerWallet",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "InvalidName",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signAddress",
          "type": "address"
        }
      ],
      "name": "InvalidSignAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "signatureId",
          "type": "uint256"
        }
      ],
      "name": "InvalidSignature",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "InvalidSymbol",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "mintTreasury",
          "type": "address"
        }
      ],
      "name": "InvalidTreasury",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "waveMaxTokensOverall",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "waveMaxTokensPerWallet",
          "type": "uint256"
        }
      ],
      "name": "InvalidWaveData",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        }
      ],
      "name": "LowMaxSupply",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "OperatorNotAllowed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "RegistryNotSet",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "waveMaxTokensPerWallet",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTokensPerWallet",
          "type": "uint256"
        }
      ],
      "name": "WaveMaxTokensHigherThanGlobalMax",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "oldToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "newToken",
          "type": "address"
        }
      ],
      "name": "AllowedExecuteMintSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "oldBaseURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newBaseURI",
          "type": "string"
        }
      ],
      "name": "BaseURISet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_toTokenId",
          "type": "uint256"
        }
      ],
      "name": "BatchMetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "mintTreasury",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "signAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20Metadata",
          "name": "allowedToExecuteMint",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxTokensPerWallet",
          "type": "uint256"
        }
      ],
      "name": "ContractInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IOperatorFilterRegistry",
          "name": "registry",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "subscriptionOrRegistrant",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "subscribe",
          "type": "bool"
        }
      ],
      "name": "ContractRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "DefaultRoyaltyReset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "feeNumerator",
          "type": "uint96"
        }
      ],
      "name": "DefaultRoyaltySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaxSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxSupply",
          "type": "uint256"
        }
      ],
      "name": "MaxSupplySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaxTokensPerWallet",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxTokensPerWallet",
          "type": "uint256"
        }
      ],
      "name": "MaxTokensPerWalletSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "MetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IOperatorFilterRegistry",
          "name": "oldRegistry",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newRegistry",
          "type": "address"
        }
      ],
      "name": "OperatorRegistrySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "personalizationMask",
          "type": "uint256"
        }
      ],
      "name": "Personalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldSignAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newSignAddress",
          "type": "address"
        }
      ],
      "name": "SignAddressSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "burner",
          "type": "address"
        }
      ],
      "name": "TokenBurned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "TokenBurningDisabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "TokenBurningEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "TokenRoyaltyReset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "feeNumerator",
          "type": "uint96"
        }
      ],
      "name": "TokenRoyaltySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldTreasury",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newTreasury",
          "type": "address"
        }
      ],
      "name": "TreasurySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldForwarder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newForwarder",
          "type": "address"
        }
      ],
      "name": "TrustedForwarderSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "waveIndex",
          "type": "uint256"
        }
      ],
      "name": "WaveMint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "waveMaxTokens",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "waveMaxTokensToBuy",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "waveSingleTokenPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "waveIndex",
          "type": "uint256"
        }
      ],
      "name": "WaveSetup",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowedToExecuteMint",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "waveIndex",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "wallet",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct INFTCollection.BatchMintingData[]",
          "name": "wallets",
          "type": "tuple[]"
        }
      ],
      "name": "batchMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "batchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "waveIndex",
          "type": "uint256"
        }
      ],
      "name": "cancelWave",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chain",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableBurning",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableBurning",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeDenominator",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "signatureId",
          "type": "uint256"
        }
      ],
      "name": "getSignatureType",
      "outputs": [
        {
          "internalType": "enum NFTCollectionSignature.SignatureType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "collectionOwner",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "initialBaseURI",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "address payable",
              "name": "mintTreasury",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "signAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "initialTrustedForwarder",
              "type": "address"
            },
            {
              "internalType": "contract IERC20Metadata",
              "name": "allowedToExecuteMint",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "maxSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxTokensPerWallet",
              "type": "uint256"
            }
          ],
          "internalType": "struct INFTCollection.InitializationParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isBurnEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "waveIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "isMintDenied",
      "outputs": [
        {
          "internalType": "enum INFTCollection.MintDenialReason",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTokensPerWallet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "signatureId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintTreasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "mintedCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operatorFilterRegistry",
      "outputs": [
        {
          "internalType": "contract IOperatorFilterRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "personalizationMask",
          "type": "uint256"
        }
      ],
      "name": "operatorPersonalize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "personalizationOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "personalizationMask",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "signatureId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "personalize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "subscriptionOrRegistrantToCopy",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "subscribe",
          "type": "bool"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resetDefaultRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "resetTokenRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "signatureId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "reveal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "minterToken",
          "type": "address"
        }
      ],
      "name": "setAllowedExecuteMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "feeNumerator",
          "type": "uint96"
        }
      ],
      "name": "setDefaultRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxSupply",
          "type": "uint256"
        }
      ],
      "name": "setMaxSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxTokensPerWallet",
          "type": "uint256"
        }
      ],
      "name": "setMaxTokensPerWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "registry",
          "type": "address"
        }
      ],
      "name": "setOperatorRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_signAddress",
          "type": "address"
        }
      ],
      "name": "setSignAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "feeNumerator",
          "type": "uint96"
        }
      ],
      "name": "setTokenRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_waveMaxTokensOverall",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_waveMaxTokensPerWallet",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_waveSingleTokenPrice",
          "type": "uint256"
        }
      ],
      "name": "setupWave",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "signAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "waveCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "waveIndex",
          "type": "uint256"
        }
      ],
      "name": "waveMaxTokensOverall",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "waveIndex",
          "type": "uint256"
        }
      ],
      "name": "waveMaxTokensPerWallet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "waveIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "signatureId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "waveMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "waveIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "waveOwnerToClaimedCounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "waveIndex",
          "type": "uint256"
        }
      ],
      "name": "waveSingleTokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "waveIndex",
          "type": "uint256"
        }
      ],
      "name": "waveTotalMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9c6d2d70a22e4041950d25f82561720dd5229e8ea5121d2a59b70e55861df906",
  "receipt": {
    "to": null,
    "from": "0x5F890c9522dCE5670d741D4277BFCC2d9cA8Af02",
    "contractAddress": "0xD31Df483b1dDfb5670370E09Bcd411Aa668ad386",
    "transactionIndex": 2,
    "gasUsed": "4672164",
    "logsBloom": "0x
    "blockHash": "0x643ff4739df169e262fad13e3140717c0a251a1e3da73ff8d8f723449daedf75",
    "transactionHash": "0x9c6d2d70a22e4041950d25f82561720dd5229e8ea5121d2a59b70e55861df906",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 17783627,
        "transactionHash": "0x9c6d2d70a22e4041950d25f82561720dd5229e8ea5121d2a59b70e55861df906",
        "address": "0xD31Df483b1dDfb5670370E09Bcd411Aa668ad386",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 4,
        "blockHash": "0x643ff4739df169e262fad13e3140717c0a251a1e3da73ff8d8f723449daedf75"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 17783627,
        "transactionHash": "0x9c6d2d70a22e4041950d25f82561720dd5229e8ea5121d2a59b70e55861df906",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02",
          "0x00000000000000000000000009207a6efee346cb3e4a54ac18523e3715d38b3f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000003250b75201cd4640000000000000000000000000000000000000000000000011d1e78e3c91215160000000000000000000000000000000000000000000005a86e913b95b9823caf00000000000000000000000000000000000000000000000119f96d6ea8f540b20000000000000000000000000000000000000000000005a871b6470ad99f1113",
        "logIndex": 5,
        "blockHash": "0x643ff4739df169e262fad13e3140717c0a251a1e3da73ff8d8f723449daedf75"
      }
    ],
    "blockNumber": 17783627,
    "cumulativeGasUsed": "4792172",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f7d8c28213b6d829c97ead91b2f55813",
  "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"AlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum INFTCollection.MintDenialReason\",\"name\":\"reason\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"waveIndex\",\"type\":\"uint256\"}],\"name\":\"CannotMint\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractNotConfigured\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"ERC2981InvalidDefaultRoyalty\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC2981InvalidDefaultRoyaltyReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"ERC2981InvalidTokenRoyalty\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC2981InvalidTokenRoyaltyReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedBurn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedBurn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"allowedToExecuteMint\",\"type\":\"address\"}],\"name\":\"InvalidAllowedToExecuteMint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"InvalidBaseTokenURI\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBatchData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTokensPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"}],\"name\":\"InvalidMaxTokensPerWallet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"InvalidName\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signAddress\",\"type\":\"address\"}],\"name\":\"InvalidSignAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"signatureId\",\"type\":\"uint256\"}],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"InvalidSymbol\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mintTreasury\",\"type\":\"address\"}],\"name\":\"InvalidTreasury\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"waveMaxTokensOverall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"waveMaxTokensPerWallet\",\"type\":\"uint256\"}],\"name\":\"InvalidWaveData\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"LowMaxSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RegistryNotSet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"waveMaxTokensPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTokensPerWallet\",\"type\":\"uint256\"}],\"name\":\"WaveMaxTokensHigherThanGlobalMax\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"oldToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"AllowedExecuteMintSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"oldBaseURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newBaseURI\",\"type\":\"string\"}],\"name\":\"BaseURISet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mintTreasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20Metadata\",\"name\":\"allowedToExecuteMint\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTokensPerWallet\",\"type\":\"uint256\"}],\"name\":\"ContractInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IOperatorFilterRegistry\",\"name\":\"registry\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriptionOrRegistrant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"subscribe\",\"type\":\"bool\"}],\"name\":\"ContractRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"DefaultRoyaltyReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"DefaultRoyaltySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxSupply\",\"type\":\"uint256\"}],\"name\":\"MaxSupplySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxTokensPerWallet\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxTokensPerWallet\",\"type\":\"uint256\"}],\"name\":\"MaxTokensPerWalletSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IOperatorFilterRegistry\",\"name\":\"oldRegistry\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRegistry\",\"type\":\"address\"}],\"name\":\"OperatorRegistrySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"personalizationMask\",\"type\":\"uint256\"}],\"name\":\"Personalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldSignAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSignAddress\",\"type\":\"address\"}],\"name\":\"SignAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"}],\"name\":\"TokenBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"TokenBurningDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"TokenBurningEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenRoyaltyReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"TokenRoyaltySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldTreasury\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"TreasurySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldForwarder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newForwarder\",\"type\":\"address\"}],\"name\":\"TrustedForwarderSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"waveIndex\",\"type\":\"uint256\"}],\"name\":\"WaveMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"waveMaxTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"waveMaxTokensToBuy\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"waveSingleTokenPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"waveIndex\",\"type\":\"uint256\"}],\"name\":\"WaveSetup\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowedToExecuteMint\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"waveIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct INFTCollection.BatchMintingData[]\",\"name\":\"wallets\",\"type\":\"tuple[]\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"waveIndex\",\"type\":\"uint256\"}],\"name\":\"cancelWave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableBurning\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableBurning\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"signatureId\",\"type\":\"uint256\"}],\"name\":\"getSignatureType\",\"outputs\":[{\"internalType\":\"enum NFTCollectionSignature.SignatureType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collectionOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"initialBaseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"mintTreasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialTrustedForwarder\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"allowedToExecuteMint\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTokensPerWallet\",\"type\":\"uint256\"}],\"internalType\":\"struct INFTCollection.InitializationParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBurnEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"waveIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"isMintDenied\",\"outputs\":[{\"internalType\":\"enum INFTCollection.MintDenialReason\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokensPerWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"signatureId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"mintedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorFilterRegistry\",\"outputs\":[{\"internalType\":\"contract IOperatorFilterRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"personalizationMask\",\"type\":\"uint256\"}],\"name\":\"operatorPersonalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"personalizationOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"personalizationMask\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"signatureId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"personalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"subscriptionOrRegistrantToCopy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"subscribe\",\"type\":\"bool\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"resetTokenRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"signatureId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"reveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"minterToken\",\"type\":\"address\"}],\"name\":\"setAllowedExecuteMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTokensPerWallet\",\"type\":\"uint256\"}],\"name\":\"setMaxTokensPerWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"setOperatorRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signAddress\",\"type\":\"address\"}],\"name\":\"setSignAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setTokenRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_waveMaxTokensOverall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_waveMaxTokensPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_waveSingleTokenPrice\",\"type\":\"uint256\"}],\"name\":\"setupWave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"waveCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"waveIndex\",\"type\":\"uint256\"}],\"name\":\"waveMaxTokensOverall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"waveIndex\",\"type\":\"uint256\"}],\"name\":\"waveMaxTokensPerWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"waveIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"signatureId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"waveMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"waveIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"waveOwnerToClaimedCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"waveIndex\",\"type\":\"uint256\"}],\"name\":\"waveSingleTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"waveIndex\",\"type\":\"uint256\"}],\"name\":\"waveTotalMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"The Sandbox\",\"custom:security-contact\":\"contact-blockchain@sandbox.game\",\"details\":\"Implements the following features: - Upgradeable proxy pattern - Two-step ownership transfer - OpenSea and ERC2981 royalty standards - ERC4906 metadata update notifications - ERC165 interface detection - ERC2771 meta-transaction support - Burn tracking for game access control - ERC20-based minting with approveAndCall pattern - Batch minting and transfer operations\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"AlreadyRegistered(address)\":[{\"params\":{\"operator\":\"that does the call\"}}],\"CannotMint(uint8,address,uint256,uint256)\":[{\"params\":{\"amount\":\"amount to be checked if can be minted\",\"reason\":\"the reason for the denial\",\"wallet\":\"wallet to be checked if it can mint\",\"waveIndex\":\"the current wave index\"}}],\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}],\"ERC2981InvalidDefaultRoyalty(uint256,uint256)\":[{\"details\":\"The default royalty set is invalid (eg. (numerator / denominator) >= 1).\"}],\"ERC2981InvalidDefaultRoyaltyReceiver(address)\":[{\"details\":\"The default royalty receiver is invalid.\"}],\"ERC2981InvalidTokenRoyalty(uint256,uint256,uint256)\":[{\"details\":\"The royalty set for an specific `tokenId` is invalid (eg. (numerator / denominator) >= 1).\"}],\"ERC2981InvalidTokenRoyaltyReceiver(uint256,address)\":[{\"details\":\"The royalty receiver for `tokenId` is invalid.\"}],\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidAllowedToExecuteMint(address)\":[{\"params\":{\"allowedToExecuteMint\":\"token address that is used for payments and that is allowed to execute mint\"}}],\"InvalidBaseTokenURI(string)\":[{\"params\":{\"baseURI\":\"an URI that will be used as the base for token URI\"}}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"InvalidMaxTokensPerWallet(uint256,uint256)\":[{\"params\":{\"maxTokensPerWallet\":\"max tokens per wallet\"}}],\"InvalidName(string)\":[{\"params\":{\"name\":\"name of the ERC721 token\"}}],\"InvalidSignAddress(address)\":[{\"params\":{\"signAddress\":\"signer address that is allowed to create mint signatures\"}}],\"InvalidSignature(uint256)\":[{\"params\":{\"signatureId\":\"the ID of the provided signature\"}}],\"InvalidSymbol(string)\":[{\"params\":{\"symbol\":\"token symbol of the ERC721 token\"}}],\"InvalidTreasury(address)\":[{\"params\":{\"mintTreasury\":\"collection treasury address (where the payments are sent)\"}}],\"InvalidWaveData(uint256,uint256)\":[{\"params\":{\"waveMaxTokensOverall\":\"the allowed number of tokens to be minted in this wave (cumulative by all minting wallets)\",\"waveMaxTokensPerWallet\":\"max tokens to buy, per wallet in a given wave\"}}],\"LowMaxSupply(uint256,uint256)\":[{\"params\":{\"maxSupply\":\"max supply of tokens to be allowed to be minted per contract\",\"totalSupply\":\"amount of tokens minted till now\"}}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OperatorNotAllowed(address)\":[{\"params\":{\"operator\":\"that does the call\"}}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"RegistryNotSet(address)\":[{\"params\":{\"operator\":\"that does the call\"}}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}],\"WaveMaxTokensHigherThanGlobalMax(uint256,uint256)\":[{\"params\":{\"maxTokensPerWallet\":\"global max tokens per wallet\",\"waveMaxTokensPerWallet\":\"wave max tokens per wallet\"}}]},\"events\":{\"AllowedExecuteMintSet(address,address,address)\":{\"details\":\"emitted when setAllowedExecuteMint is called\",\"params\":{\"newToken\":\"new address that is used for payments and that is allowed to execute mint\",\"oldToken\":\"old address that is used for payments and that is allowed to execute mint\",\"operator\":\"the sender of the transaction\"}},\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"BaseURISet(address,string,string)\":{\"details\":\"emitted when setBaseURI is called\",\"params\":{\"newBaseURI\":\"new URI that will be used as the base for token metadata URI\",\"oldBaseURI\":\"old URI that will be used as the base for token metadata URI\",\"operator\":\"the sender of the transaction\"}},\"BatchMetadataUpdate(uint256,uint256)\":{\"details\":\"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs.\"},\"ContractInitialized(string,string,string,address,address,address,uint256,uint256)\":{\"details\":\"emitted at proxy startup, only once\",\"params\":{\"allowedToExecuteMint\":\"token address that is used for payments and that is allowed to execute mint\",\"baseURI\":\"an URI that will be used as the base for token URI\",\"maxSupply\":\"max supply of tokens to be allowed to be minted per contract\",\"maxTokensPerWallet\":\"maximum amount of tokens that can be minted per wallet across all waves\",\"mintTreasury\":\"collection treasury address (where the payments are sent)\",\"name\":\"name of the ERC721 token\",\"signAddress\":\"signer address that is allowed to create mint signatures\",\"symbol\":\"token symbol of the ERC721 token\"}},\"ContractRegistered(address,address,address,bool)\":{\"params\":{\"operator\":\"the sender of the transaction\",\"registry\":\"address of the registry to set\",\"subscribe\":\"should it subscribe\",\"subscriptionOrRegistrant\":\"address to subscribe or copy entries from\"}},\"DefaultRoyaltyReset(address)\":{\"params\":{\"operator\":\"the sender of the transaction\"}},\"DefaultRoyaltySet(address,address,uint96)\":{\"params\":{\"feeNumerator\":\"percentage of the royalties in feeDenominator units\",\"operator\":\"the sender of the transaction\",\"receiver\":\"the receiver of the royalties\"}},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"MaxSupplySet(address,uint256,uint256)\":{\"details\":\"emitted when setSignAddress is called\",\"params\":{\"newMaxSupply\":\"new maximum amount of tokens that can be minted\",\"oldMaxSupply\":\"old maximum amount of tokens that can be minted\",\"operator\":\"the sender of the transaction\"}},\"MaxTokensPerWalletSet(address,uint256,uint256)\":{\"params\":{\"newMaxTokensPerWallet\":\"new maximum tokens per wallet\",\"oldMaxTokensPerWallet\":\"old maximum tokens per wallet\",\"operator\":\"the sender of the transaction\"}},\"MetadataUpdate(uint256)\":{\"details\":\"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT.\"},\"OperatorRegistrySet(address,address,address)\":{\"params\":{\"newRegistry\":\"address of the new registry to set\",\"oldRegistry\":\"address of the old registry\",\"operator\":\"the sender of the transaction\"}},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Personalized(address,uint256,uint256)\":{\"details\":\"emitted when personalize is called\",\"params\":{\"operator\":\"the sender of the transaction\",\"personalizationMask\":\"the exact personalization that was done, as a custom meaning bit-mask\",\"tokenId\":\"id of the token which had the personalization done\"}},\"SignAddressSet(address,address,address)\":{\"details\":\"emitted when setSignAddress is called\",\"params\":{\"newSignAddress\":\"new signer address that is allowed to create mint signatures\",\"oldSignAddress\":\"old signer address that is allowed to create mint signatures\",\"operator\":\"the sender of the transaction\"}},\"TokenBurned(address,uint256,address)\":{\"params\":{\"burner\":\"the owner that burned the token\",\"operator\":\"the sender of the transaction\",\"tokenId\":\"the id of the token that was burned\"}},\"TokenBurningDisabled(address)\":{\"params\":{\"operator\":\"the sender of the transaction\"}},\"TokenBurningEnabled(address)\":{\"params\":{\"operator\":\"the sender of the transaction\"}},\"TokenRoyaltyReset(address,uint256)\":{\"params\":{\"operator\":\"the sender of the transaction\",\"tokenId\":\"the token id\"}},\"TokenRoyaltySet(address,uint256,address,uint96)\":{\"params\":{\"feeNumerator\":\"percentage of the royalties in feeDenominator units\",\"operator\":\"the sender of the transaction\",\"receiver\":\"the receiver of the royalties\",\"tokenId\":\"the token id\"}},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"},\"TreasurySet(address,address,address)\":{\"details\":\"emitted when setTreasury is called\",\"params\":{\"newTreasury\":\"new collection treasury address (where the payments are sent)\",\"oldTreasury\":\"old collection treasury address (where the payments are sent)\",\"operator\":\"the sender of the transaction\"}},\"TrustedForwarderSet(address,address,address)\":{\"params\":{\"newForwarder\":\"the new trusted forwarder address\",\"oldForwarder\":\"the old trusted forwarder address\",\"operator\":\"the sender of the transaction\"}},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"},\"WaveMint(uint256,address,uint256)\":{\"params\":{\"tokenId\":\"the token id\",\"wallet\":\"the wallet address of the receiver\",\"waveIndex\":\"the wave index\"}},\"WaveSetup(address,uint256,uint256,uint256,uint256)\":{\"details\":\"emitted when setupWave is called\",\"params\":{\"operator\":\"the sender of the transaction\",\"waveIndex\":\"the current wave index\",\"waveMaxTokens\":\"the allowed number of tokens to be minted in this wave (cumulative by all minting wallets)\",\"waveMaxTokensToBuy\":\"max tokens to buy, per wallet in a given wave\",\"waveSingleTokenPrice\":\"the price to mint a token in a given wave, in wei\"}}},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"allowedToExecuteMint()\":{\"returns\":{\"_0\":\"Address of the payment token contract.\"}},\"approve(address,uint256)\":{\"details\":\"Overrides ERC721 implementation to add operator filtering.\",\"params\":{\"operator\":\"Address to grant approval to.\",\"tokenId\":\"ID of token to approve.\"}},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"baseTokenURI()\":{\"returns\":{\"_0\":\"Base URI string.\"}},\"batchMint(uint256,(address,uint256)[])\":{\"details\":\"Owner-only function for airdrops. Bypasses wave restrictions but respects maxSupply.\",\"params\":{\"wallets\":\"Array of recipient addresses and mint amounts.\",\"waveIndex\":\"Index of the wave configuration to use.\"}},\"batchTransferFrom(address,address,uint256[])\":{\"details\":\"Requires approval or ownership. Does not verify receiver compatibility.\",\"params\":{\"from\":\"Source address.\",\"ids\":\"Array of token IDs to transfer.\",\"to\":\"Destination address.\"}},\"burn(uint256)\":{\"details\":\"Requires burning to be enabled. Caller must own or be approved for token.\",\"params\":{\"tokenId\":\"ID of the token to burn.\"}},\"cancelWave(uint256)\":{\"details\":\"Cannot cancel the most recent wave to prevent disruption of mint function.\",\"params\":{\"waveIndex\":\"Index of the wave to cancel.\"}},\"chain()\":{\"returns\":{\"_0\":\"Current blockchain network ID.\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"disableBurning()\":{\"details\":\"Reverts if burning is already disabled. Only callable by owner.\"},\"enableBurning()\":{\"details\":\"Reverts if burning is already enabled. Only callable by owner.\"},\"feeDenominator()\":{\"details\":\"Used in conjunction with royalty fee numerator.\",\"returns\":{\"_0\":\"Fee denominator value (10000 for basis points).\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getSignatureType(uint256)\":{\"params\":{\"signatureId\":\"signing signature ID\"},\"returns\":{\"_0\":\"the type of signature used\"}},\"initialize((address,string,string,string,address,address,address,address,uint256,uint256))\":{\"details\":\"External initialization entry point following the upgradeable pattern.\",\"params\":{\"params\":\"Struct containing all initialization parameters, see InitializationParams for details.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"isBurnEnabled()\":{\"returns\":{\"_0\":\"True if token burning is enabled.\"}},\"isMintDenied(uint256,address,uint256)\":{\"params\":{\"amount\":\"Number of tokens to check.\",\"wallet\":\"Address to check.\",\"waveIndex\":\"Wave configuration index.\"},\"returns\":{\"_0\":\"Reason code indicating mint permission status.\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"the address ot the trusted forwarder to check\"},\"returns\":{\"_0\":\"true if forwarder is the trusted forwarder address\"}},\"maxSupply()\":{\"returns\":{\"_0\":\"Maximum number of tokens that can be minted.\"}},\"maxTokensPerWallet()\":{\"returns\":{\"_0\":\"Maximum tokens allowed per wallet across all waves.\"}},\"mint(address,uint256,uint256,bytes)\":{\"details\":\"Only callable by allowedToExecuteMint contract. Uses the most recent wave configuration.\",\"params\":{\"amount\":\"Number of tokens to mint.\",\"signature\":\"Cryptographic signature authorizing the mint.\",\"signatureId\":\"Unique identifier for the minting signature.\",\"wallet\":\"Address receiving the minted tokens.\"}},\"mintTreasury()\":{\"returns\":{\"_0\":\"Address receiving minting payments.\"}},\"mintedCount(address)\":{\"params\":{\"wallet\":\"Address to query.\"},\"returns\":{\"_0\":\"Number of tokens minted by the address.\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"operatorFilterRegistry()\":{\"returns\":{\"_0\":\"the operatorFilterRegistry address\"}},\"operatorPersonalize(uint256,uint256)\":{\"details\":\"Owner-only function for game-driven trait updates.\",\"params\":{\"personalizationMask\":\"Bit mask encoding trait configurations.\",\"tokenId\":\"ID of the token to personalize.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"pause()\":{\"details\":\"Reverts if contract is already paused. Only callable by owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"personalizationOf(uint256)\":{\"params\":{\"tokenId\":\"Token ID to query.\"},\"returns\":{\"_0\":\"Bit mask of token's personalization traits.\"}},\"personalize(uint256,uint256,uint256,bytes)\":{\"details\":\"Caller must be token owner. Emits MetadataUpdate event.\",\"params\":{\"personalizationMask\":\"Bit mask encoding trait configurations.\",\"signature\":\"Cryptographic signature authorizing the personalization.\",\"signatureId\":\"Unique identifier for the personalization signature.\",\"tokenId\":\"ID of the token to personalize.\"}},\"register(address,bool)\":{\"details\":\"Pass address(0) to register without subscription. Only callable by owner.\",\"params\":{\"subscribe\":\"True to subscribe, false to copy the list.\",\"subscriptionOrRegistrantToCopy\":\"Address to copy or subscribe to.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"resetDefaultRoyalty()\":{\"details\":\"Only callable by owner.\"},\"resetTokenRoyalty(uint256)\":{\"details\":\"Returns token to default royalty configuration. Only callable by owner.\",\"params\":{\"tokenId\":\"Token ID to reset.\"}},\"reveal(uint256,uint256,bytes)\":{\"details\":\"Emits MetadataUpdate for marketplace integration. Caller must be token owner.\",\"params\":{\"signature\":\"Cryptographic signature authorizing the reveal.\",\"signatureId\":\"Unique identifier for the reveal signature.\",\"tokenId\":\"ID of the token to refresh.\"}},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\"},\"safeBatchTransferFrom(address,address,uint256[],bytes)\":{\"details\":\"Verifies receiver contract compatibility. Requires approval or ownership.\",\"params\":{\"data\":\"Additional data for receiver callback.\",\"from\":\"Source address.\",\"ids\":\"Array of token IDs to transfer.\",\"to\":\"Destination address.\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Overrides ERC721 implementation to add operator filtering.\",\"params\":{\"data\":\"Additional data for receiver callback.\",\"from\":\"Source address.\",\"to\":\"Destination address.\",\"tokenId\":\"ID of token to transfer.\"}},\"setAllowedExecuteMint(address)\":{\"details\":\"Must be a valid contract address. Only callable by owner.\",\"params\":{\"minterToken\":\"Address of the ERC20 token contract.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Overrides ERC721 implementation to add operator filtering.\",\"params\":{\"approved\":\"True to approve, false to revoke.\",\"operator\":\"Address to grant approval to.\"}},\"setBaseURI(string)\":{\"details\":\"Emits BatchMetadataUpdate for the entire collection. Only callable by owner.\",\"params\":{\"baseURI\":\"New base URI string.\"}},\"setDefaultRoyalty(address,uint96)\":{\"details\":\"Only callable by owner.\",\"params\":{\"feeNumerator\":\"Royalty fee in basis points.\",\"receiver\":\"Royalty recipient address.\"}},\"setMaxSupply(uint256)\":{\"details\":\"Must be greater than current supply. Only callable by owner.\",\"params\":{\"_maxSupply\":\"New maximum token supply.\"}},\"setMaxTokensPerWallet(uint256)\":{\"details\":\"Must be greater than zero and less than maxSupply. Only callable by owner.\",\"params\":{\"_maxTokensPerWallet\":\"New maximum tokens per wallet.\"}},\"setOperatorRegistry(address)\":{\"details\":\"Used for marketplace filtering. Only callable by owner.\",\"params\":{\"registry\":\"Address of the registry contract.\"}},\"setSignAddress(address)\":{\"details\":\"Only callable by owner.\",\"params\":{\"_signAddress\":\"New signer address.\"}},\"setTokenRoyalty(uint256,address,uint96)\":{\"details\":\"Overrides default royalty for the specified token. Only callable by owner.\",\"params\":{\"feeNumerator\":\"Royalty fee in basis points.\",\"receiver\":\"Royalty recipient address.\",\"tokenId\":\"Token ID to configure.\"}},\"setTreasury(address)\":{\"details\":\"Reverts if treasury address is zero. Only callable by owner.\",\"params\":{\"treasury\":\"New treasury address.\"}},\"setTrustedForwarder(address)\":{\"details\":\"Set to address(0) to disable meta-transactions. Only callable by owner.\",\"params\":{\"forwarder\":\"New forwarder address.\"}},\"setupWave(uint256,uint256,uint256)\":{\"details\":\"Validates wave parameters against global limits and current supply.\",\"params\":{\"_waveMaxTokensOverall\":\"Maximum tokens that can be minted in this wave.\",\"_waveMaxTokensPerWallet\":\"Maximum tokens per wallet for this wave.\",\"_waveSingleTokenPrice\":\"Price per token in wave, denominated in allowedToExecuteMint token.\"}},\"signAddress()\":{\"returns\":{\"_0\":\"the signer address\"}},\"supportsInterface(bytes4)\":{\"details\":\"Adds support for ERC4906 interface.\",\"params\":{\"interfaceId\":\"Interface identifier to check.\"},\"returns\":{\"_0\":\"True if interface is supported.\"}},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"returns\":{\"_0\":\"Current number of minted tokens.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Overrides ERC721 implementation to add operator filtering.\",\"params\":{\"from\":\"Source address.\",\"to\":\"Destination address.\",\"tokenId\":\"ID of token to transfer.\"}},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"},\"trustedForwarder()\":{\"returns\":{\"_0\":\"the trusted forwarder address\"}},\"unpause()\":{\"details\":\"Reverts if contract is not paused. Only callable by owner.\"},\"waveCount()\":{\"returns\":{\"_0\":\"Number of minting waves configured.\"}},\"waveMaxTokensOverall(uint256)\":{\"params\":{\"waveIndex\":\"Wave configuration index.\"},\"returns\":{\"_0\":\"Maximum tokens allowed in the wave.\"}},\"waveMaxTokensPerWallet(uint256)\":{\"params\":{\"waveIndex\":\"Wave configuration index.\"},\"returns\":{\"_0\":\"Maximum tokens allowed per wallet in the wave.\"}},\"waveMint(address,uint256,uint256,uint256,bytes)\":{\"details\":\"Only callable by allowedToExecuteMint contract.\",\"params\":{\"amount\":\"Number of tokens to mint.\",\"signature\":\"Cryptographic signature authorizing the mint.\",\"signatureId\":\"Unique identifier for the minting signature.\",\"wallet\":\"Address receiving the minted tokens.\",\"waveIndex\":\"Index of the wave configuration to use.\"}},\"waveOwnerToClaimedCounts(uint256,address)\":{\"params\":{\"owner\":\"Address to query.\",\"waveIndex\":\"Wave configuration index.\"},\"returns\":{\"_0\":\"Number of tokens minted by the address in the wave.\"}},\"waveSingleTokenPrice(uint256)\":{\"params\":{\"waveIndex\":\"Wave configuration index.\"},\"returns\":{\"_0\":\"Price per token in the wave's payment token.\"}},\"waveTotalMinted(uint256)\":{\"params\":{\"waveIndex\":\"Wave configuration index.\"},\"returns\":{\"_0\":\"Total tokens minted in the wave.\"}}},\"title\":\"NFTCollection\",\"version\":1},\"userdoc\":{\"errors\":{\"AlreadyRegistered(address)\":[{\"notice\":\"this contract is already registered\"}],\"CannotMint(uint8,address,uint256,uint256)\":[{\"notice\":\"The operation failed because the wave is completed\"}],\"ContractNotConfigured()\":[{\"notice\":\"The operation failed the wave index is zero, no wave was ever configured\"}],\"EnforcedBurn()\":[{\"notice\":\"The operation failed because burning is enabled.\"}],\"ExpectedBurn()\":[{\"notice\":\"The operation failed because burning is disabled.\"}],\"InvalidAllowedToExecuteMint(address)\":[{\"notice\":\"The operation failed because the allowedToExecuteMint is not a contract or wrong\"}],\"InvalidBaseTokenURI(string)\":[{\"notice\":\"The operation failed because the base token uri is empty.\"}],\"InvalidBatchData()\":[{\"notice\":\"The operation failed because the batch data len is zero\"}],\"InvalidMaxTokensPerWallet(uint256,uint256)\":[{\"notice\":\"The operation failed because the max tokens per wallet is invalid\"}],\"InvalidName(string)\":[{\"notice\":\"The operation failed because the token name is invalid\"}],\"InvalidSignAddress(address)\":[{\"notice\":\"The operation failed because the signAddress is wrong\"}],\"InvalidSignature(uint256)\":[{\"notice\":\"The operation failed because signature is invalid or it was already used\"}],\"InvalidSymbol(string)\":[{\"notice\":\"The operation failed because the token symbol is invalid\"}],\"InvalidTreasury(address)\":[{\"notice\":\"The operation failed because the treasury is wrong\"}],\"InvalidWaveData(uint256,uint256)\":[{\"notice\":\"The operation failed because the wave arguments are wrong\"}],\"LowMaxSupply(uint256,uint256)\":[{\"notice\":\"The operation failed because the maxSupply is lower than totalSupply\"}],\"OperatorNotAllowed(address)\":[{\"notice\":\"the caller is not the operator\"}],\"RegistryNotSet(address)\":[{\"notice\":\"the registry is not configured\"}],\"WaveMaxTokensHigherThanGlobalMax(uint256,uint256)\":[{\"notice\":\"The operation failed because the wave max tokens per wallet is higher than the global max tokens per wallet\"}]},\"events\":{\"AllowedExecuteMintSet(address,address,address)\":{\"notice\":\"Event emitted when an address was set as allowed to mint\"},\"BaseURISet(address,string,string)\":{\"notice\":\"Event emitted when the base token URI for the contract was set or changed\"},\"ContractInitialized(string,string,string,address,address,address,uint256,uint256)\":{\"notice\":\"Event emitted when the contract was initialized.\"},\"ContractRegistered(address,address,address,bool)\":{\"notice\":\"emitted when the contract is registered into the registry\"},\"DefaultRoyaltyReset(address)\":{\"notice\":\"Event emitted when default royalties are reset\"},\"DefaultRoyaltySet(address,address,uint96)\":{\"notice\":\"Event emitted when a token personalization was made.\"},\"MaxSupplySet(address,uint256,uint256)\":{\"notice\":\"Event emitted when the max supply is set or changed\"},\"MaxTokensPerWalletSet(address,uint256,uint256)\":{\"notice\":\"Event emitted when the max tokens per wallet is set\"},\"OperatorRegistrySet(address,address,address)\":{\"notice\":\"emitted when a registry is set\"},\"Personalized(address,uint256,uint256)\":{\"notice\":\"Event emitted when a token personalization was made.\"},\"SignAddressSet(address,address,address)\":{\"notice\":\"Event emitted when the signer address was set or changed\"},\"TokenBurned(address,uint256,address)\":{\"notice\":\"event emitted when a token was burned\"},\"TokenBurningDisabled(address)\":{\"notice\":\"event emitted when token burning was disabled\"},\"TokenBurningEnabled(address)\":{\"notice\":\"event emitted when token burning was enabled\"},\"TokenRoyaltyReset(address,uint256)\":{\"notice\":\"Event emitted when default royalties are reset\"},\"TokenRoyaltySet(address,uint256,address,uint96)\":{\"notice\":\"Event emitted when a token personalization was made.\"},\"TreasurySet(address,address,address)\":{\"notice\":\"Event emitted when the treasury address was saved\"},\"TrustedForwarderSet(address,address,address)\":{\"notice\":\"emitted when the trusted forwarder is set\"},\"WaveMint(uint256,address,uint256)\":{\"notice\":\"Event emitted when a wave mint is completed\"},\"WaveSetup(address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when a wave was set up\"}},\"kind\":\"user\",\"methods\":{\"allowedToExecuteMint()\":{\"notice\":\"Returns the ERC20 token used for minting payments.\"},\"approve(address,uint256)\":{\"notice\":\"Approves an operator to transfer a specific token.\"},\"baseTokenURI()\":{\"notice\":\"Returns the base URI for token metadata.\"},\"batchMint(uint256,(address,uint256)[])\":{\"notice\":\"Performs batch minting for multiple addresses.\"},\"batchTransferFrom(address,address,uint256[])\":{\"notice\":\"Transfers multiple tokens between addresses.\"},\"burn(uint256)\":{\"notice\":\"Burns a token.\"},\"cancelWave(uint256)\":{\"notice\":\"Deactivates a minting wave by setting its maximum tokens to zero.\"},\"chain()\":{\"notice\":\"Returns the current chain ID.\"},\"disableBurning()\":{\"notice\":\"Disables token burning functionality.\"},\"enableBurning()\":{\"notice\":\"Enables token burning functionality.\"},\"feeDenominator()\":{\"notice\":\"Returns the fee denominator for royalty calculations.\"},\"getSignatureType(uint256)\":{\"notice\":\"returns the type of signature used for a specific Id\"},\"initialize((address,string,string,string,address,address,address,address,uint256,uint256))\":{\"notice\":\"Initializes the NFT collection with configuration parameters.\"},\"isBurnEnabled()\":{\"notice\":\"Returns the burn functionality status.\"},\"isMintDenied(uint256,address,uint256)\":{\"notice\":\"Checks if an address can mint tokens in a specific wave.\"},\"isTrustedForwarder(address)\":{\"notice\":\"Indicates whether any particular address is the trusted forwarder.\"},\"maxSupply()\":{\"notice\":\"Returns the maximum token supply cap.\"},\"maxTokensPerWallet()\":{\"notice\":\"Returns the global maximum tokens per wallet limit.\"},\"mint(address,uint256,uint256,bytes)\":{\"notice\":\"Mints tokens using the latest wave configuration.\"},\"mintTreasury()\":{\"notice\":\"Returns the treasury address for minting payments.\"},\"mintedCount(address)\":{\"notice\":\"Returns the number of tokens minted by an address.\"},\"operatorFilterRegistry()\":{\"notice\":\"return the operatorFilterRegistry address\"},\"operatorPersonalize(uint256,uint256)\":{\"notice\":\"Updates token traits with privileged access.\"},\"pause()\":{\"notice\":\"Pauses all token operations.\"},\"personalizationOf(uint256)\":{\"notice\":\"Retrieves personalization traits for a token.\"},\"personalize(uint256,uint256,uint256,bytes)\":{\"notice\":\"Updates token traits using a bit mask.\"},\"register(address,bool)\":{\"notice\":\"Registers the contract with OpenSea's operator filter registry.\"},\"resetDefaultRoyalty()\":{\"notice\":\"Removes default royalty configuration.\"},\"resetTokenRoyalty(uint256)\":{\"notice\":\"Resets token-specific royalty configuration.\"},\"reveal(uint256,uint256,bytes)\":{\"notice\":\"Triggers metadata refresh for a specific token.\"},\"safeBatchTransferFrom(address,address,uint256[],bytes)\":{\"notice\":\"Safely transfers multiple tokens between addresses.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Safely transfers a token between addresses.\"},\"setAllowedExecuteMint(address)\":{\"notice\":\"Updates the ERC20 token contract used for minting payments.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Sets approval for an operator to manage caller's tokens.\"},\"setBaseURI(string)\":{\"notice\":\"Updates the base URI for token metadata.\"},\"setDefaultRoyalty(address,uint96)\":{\"notice\":\"Sets default royalty information for all tokens.\"},\"setMaxSupply(uint256)\":{\"notice\":\"Updates the maximum supply cap.\"},\"setMaxTokensPerWallet(uint256)\":{\"notice\":\"Updates the maximum tokens per wallet limit.\"},\"setOperatorRegistry(address)\":{\"notice\":\"Sets the operator filter registry address.\"},\"setSignAddress(address)\":{\"notice\":\"Updates the signing address for validating operations.\"},\"setTokenRoyalty(uint256,address,uint96)\":{\"notice\":\"Sets royalty information for a specific token.\"},\"setTreasury(address)\":{\"notice\":\"Updates the treasury address for minting payments.\"},\"setTrustedForwarder(address)\":{\"notice\":\"Updates the trusted forwarder for meta-transactions.\"},\"setupWave(uint256,uint256,uint256)\":{\"notice\":\"Creates a new minting wave.\"},\"signAddress()\":{\"notice\":\"return the address from which all signatures must come from this specific address, otherwise they are invalid\"},\"supportsInterface(bytes4)\":{\"notice\":\"Checks interface support using ERC165.\"},\"totalSupply()\":{\"notice\":\"Returns the current total supply of minted tokens.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfers a token between addresses.\"},\"trustedForwarder()\":{\"notice\":\"Returns the address of the trusted forwarder.\"},\"unpause()\":{\"notice\":\"Unpauses all token operations.\"},\"waveCount()\":{\"notice\":\"Returns the total number of configured waves.\"},\"waveMaxTokensOverall(uint256)\":{\"notice\":\"Returns the maximum tokens allowed for a specific wave.\"},\"waveMaxTokensPerWallet(uint256)\":{\"notice\":\"Returns the maximum tokens per wallet for a specific wave.\"},\"waveMint(address,uint256,uint256,uint256,bytes)\":{\"notice\":\"Mints tokens using a specific wave configuration.\"},\"waveOwnerToClaimedCounts(uint256,address)\":{\"notice\":\"Returns the number of tokens minted by an address in a specific wave.\"},\"waveSingleTokenPrice(uint256)\":{\"notice\":\"Returns the token price for a specific wave.\"},\"waveTotalMinted(uint256)\":{\"notice\":\"Returns the total tokens minted in a specific wave.\"}},\"notice\":\"Implements an upgradeable ERC721 contract for Avatar NFT collections.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@sandbox-smart-contracts/avatar/contracts/nft-collection/NFTCollection.sol\":\"NFTCollection\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-5.0.2/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5.0.2/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5.0.2/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5.0.2/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5.0.2/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5.0.2/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-5.0.2/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {OwnableUpgradeable} from \\\"./OwnableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable2Step\\n    struct Ownable2StepStorage {\\n        address _pendingOwner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable2Step\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant Ownable2StepStorageLocation = 0x237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00;\\n\\n    function _getOwnable2StepStorage() private pure returns (Ownable2StepStorage storage $) {\\n        assembly {\\n            $.slot := Ownable2StepStorageLocation\\n        }\\n    }\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    function __Ownable2Step_init() internal onlyInitializing {\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\\n        return $._pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\\n        $._pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\\n        delete $._pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        if (pendingOwner() != sender) {\\n            revert OwnableUnauthorizedAccount(sender);\\n        }\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"keccak256\":\"0xbca4a4f66d98028293dba695851d1b20d3e0ba2fff7453fb241f192fa3fc6b6f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-5.0.2/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-5.0.2/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-5.0.2/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport {ContextUpgradeable} from \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {IERC721Errors} from \\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC721\\n    struct ERC721Storage {\\n        // Token name\\n        string _name;\\n\\n        // Token symbol\\n        string _symbol;\\n\\n        mapping(uint256 tokenId => address) _owners;\\n\\n        mapping(address owner => uint256) _balances;\\n\\n        mapping(uint256 tokenId => address) _tokenApprovals;\\n\\n        mapping(address owner => mapping(address operator => bool)) _operatorApprovals;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ERC721\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ERC721StorageLocation = 0x80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab0079300;\\n\\n    function _getERC721Storage() private pure returns (ERC721Storage storage $) {\\n        assembly {\\n            $.slot := ERC721StorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        $._name = name_;\\n        $._symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return $._balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        return $._name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        return $._symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        return $._operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        return $._owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        return $._tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        unchecked {\\n            $._balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                $._balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                $._balances[to] += 1;\\n            }\\n        }\\n\\n        $._owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        $._tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        $._operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x48efca78ce4e1a9f74d3ca8539bb53d04b116e507c10cd9e0df6105b8a6ae420\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-5.0.2/token/common/ERC2981Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC2981} from \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n */\\nabstract contract ERC2981Upgradeable is Initializable, IERC2981, ERC165Upgradeable {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC2981\\n    struct ERC2981Storage {\\n        RoyaltyInfo _defaultRoyaltyInfo;\\n        mapping(uint256 tokenId => RoyaltyInfo) _tokenRoyaltyInfo;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ERC2981\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ERC2981StorageLocation = 0xdaedc9ab023613a7caf35e703657e986ccfad7e3eb0af93a2853f8d65dd86b00;\\n\\n    function _getERC2981Storage() private pure returns (ERC2981Storage storage $) {\\n        assembly {\\n            $.slot := ERC2981StorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The default royalty set is invalid (eg. (numerator / denominator) >= 1).\\n     */\\n    error ERC2981InvalidDefaultRoyalty(uint256 numerator, uint256 denominator);\\n\\n    /**\\n     * @dev The default royalty receiver is invalid.\\n     */\\n    error ERC2981InvalidDefaultRoyaltyReceiver(address receiver);\\n\\n    /**\\n     * @dev The royalty set for an specific `tokenId` is invalid (eg. (numerator / denominator) >= 1).\\n     */\\n    error ERC2981InvalidTokenRoyalty(uint256 tokenId, uint256 numerator, uint256 denominator);\\n\\n    /**\\n     * @dev The royalty receiver for `tokenId` is invalid.\\n     */\\n    error ERC2981InvalidTokenRoyaltyReceiver(uint256 tokenId, address receiver);\\n\\n    function __ERC2981_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC2981_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) public view virtual returns (address, uint256) {\\n        ERC2981Storage storage $ = _getERC2981Storage();\\n        RoyaltyInfo memory royalty = $._tokenRoyaltyInfo[tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = $._defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        ERC2981Storage storage $ = _getERC2981Storage();\\n        uint256 denominator = _feeDenominator();\\n        if (feeNumerator > denominator) {\\n            // Royalty fee will exceed the sale price\\n            revert ERC2981InvalidDefaultRoyalty(feeNumerator, denominator);\\n        }\\n        if (receiver == address(0)) {\\n            revert ERC2981InvalidDefaultRoyaltyReceiver(address(0));\\n        }\\n\\n        $._defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        ERC2981Storage storage $ = _getERC2981Storage();\\n        delete $._defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual {\\n        ERC2981Storage storage $ = _getERC2981Storage();\\n        uint256 denominator = _feeDenominator();\\n        if (feeNumerator > denominator) {\\n            // Royalty fee will exceed the sale price\\n            revert ERC2981InvalidTokenRoyalty(tokenId, feeNumerator, denominator);\\n        }\\n        if (receiver == address(0)) {\\n            revert ERC2981InvalidTokenRoyaltyReceiver(tokenId, address(0));\\n        }\\n\\n        $._tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        ERC2981Storage storage $ = _getERC2981Storage();\\n        delete $._tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0xfe76de11ddbe79ce1483cf66bc821ad6c29c5dda215a5bffb36421bd943a90fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-5.0.2/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-5.0.2/utils/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\\n    struct PausableStorage {\\n        bool _paused;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Pausable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\\n\\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\\n        assembly {\\n            $.slot := PausableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        PausableStorage storage $ = _getPausableStorage();\\n        return $._paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x92915b7f7f642c6be3f65bfd1522feb5d5b6ef25f755f4dbb51df32c868f2f97\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-5.0.2/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xb44e086e941292cdc7f440de51478493894ef0b1aeccb0c4047445919f667f74\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-5.0.2/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xdaba3f7c42c55b2896353f32bd27d4d5f8bae741b3b05d4c53f67abc4dc47ce8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x89b84f7b1b2d6c294cd6b9a9f661c1cfb1b9b10ca7bac5b3445850a8ce96dcf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/avatar/contracts/common/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 indexed _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 indexed _fromTokenId, uint256 indexed _toTokenId);\\n}\\n\",\"keccak256\":\"0x5c1466be79926fdb22b403c0816ad503cb4995817ecfb287c283735580b35851\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/avatar/contracts/nft-collection/ERC2771HandlerUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\nimport {ContextUpgradeable} from \\\"@openzeppelin/contracts-upgradeable-5.0.2/utils/ContextUpgradeable.sol\\\";\\n\\n/**\\n * @title ERC2771HandlerUpgradeable\\n * @author The Sandbox\\n * @custom:security-contact contact-blockchain@sandbox.game\\n * @notice minimal ERC2771 handler to keep bytecode-size down\\n * @dev based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.6.0/contracts/metatx/ERC2771Context.sol\\n *      with an initializer for proxies and a mutable forwarder\\n */\\nabstract contract ERC2771HandlerUpgradeable is ContextUpgradeable {\\n    /// @custom:storage-location erc7201:thesandbox.storage.avatar.nft-collection.ERC2771HandlerUpgradeable\\n    struct ERC2771HandlerUpgradeableStorage {\\n        address trustedForwarder;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"thesandbox.storage.avatar.nft-collection.ERC2771HandlerUpgradeable\\\")) - 1)) & ~bytes32(uint256(0xff));\\n    bytes32 internal constant ERC2771_HANDLER_UPGRADABLE_STORAGE_LOCATION =\\n    0x269c7d123624135714769792dd28ef6db020f837bcb105cea22203ad17aa7000;\\n\\n    function _getERC2771HandlerUpgradableStorage() private pure returns (ERC2771HandlerUpgradeableStorage storage $) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            $.slot := ERC2771_HANDLER_UPGRADABLE_STORAGE_LOCATION\\n        }\\n    }\\n\\n    /**\\n     * @notice emitted when the trusted forwarder is set\\n     * @param operator the sender of the transaction\\n     * @param oldForwarder the old trusted forwarder address\\n     * @param newForwarder the new trusted forwarder address\\n     */\\n    event TrustedForwarderSet(address indexed operator, address indexed oldForwarder, address indexed newForwarder);\\n\\n\\n    /**\\n     * @notice set the trusted forwarder\\n     * @param forwarder the new trusted forwarder address\\n     * @dev address(0) disables the forwarder\\n     */\\n    function _setTrustedForwarder(address forwarder) internal {\\n        ERC2771HandlerUpgradeableStorage storage $ = _getERC2771HandlerUpgradableStorage();\\n        emit TrustedForwarderSet(_msgSender(), $.trustedForwarder, forwarder);\\n        $.trustedForwarder = forwarder;\\n    }\\n\\n    /**\\n     * @notice Returns the address of the trusted forwarder.\\n     * @return the trusted forwarder address\\n     */\\n    function trustedForwarder() external view virtual returns (address) {\\n        ERC2771HandlerUpgradeableStorage storage $ = _getERC2771HandlerUpgradableStorage();\\n        return $.trustedForwarder;\\n    }\\n\\n    /**\\n     * @notice Indicates whether any particular address is the trusted forwarder.\\n     * @param forwarder the address ot the trusted forwarder to check\\n     * @return true if forwarder is the trusted forwarder address\\n     */\\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\\n        return _isTrustedForwarder(forwarder);\\n    }\\n\\n    /**\\n     * @notice Override for `msg.sender`.\\n     * @return the address of the sender\\n     * @dev Defaults to the original `msg.sender` whenever a call is not performed by the trusted forwarder\\n     * or the calldata length is less than 20 bytes (an address length).\\n     */\\n    function _msgSender() internal view virtual override returns (address) {\\n        uint256 calldataLength = msg.data.length;\\n        uint256 contextSuffixLength = _contextSuffixLength();\\n        if (_isTrustedForwarder(msg.sender) && calldataLength >= contextSuffixLength) {\\n            return address(bytes20(msg.data[calldataLength - contextSuffixLength :]));\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    /**\\n     * @notice Override for `msg.data`.\\n     * @return the message data with the address of the sender removed\\n     * @dev Defaults to the original `msg.data` whenever a call is not performed by the trusted forwarder\\n     * or the calldata length is less than 20 bytes (an address length).\\n     */\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        uint256 calldataLength = msg.data.length;\\n        uint256 contextSuffixLength = _contextSuffixLength();\\n        if (_isTrustedForwarder(msg.sender) && calldataLength >= contextSuffixLength) {\\n            return msg.data[: calldataLength - contextSuffixLength];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n\\n    /**\\n     * @notice Indicates whether any particular address is the trusted forwarder.\\n     * @param forwarder the address ot the trusted forwarder to check\\n     * @return true if forwarder is the trusted forwarder address\\n     */\\n    function _isTrustedForwarder(address forwarder) internal view virtual returns (bool) {\\n        ERC2771HandlerUpgradeableStorage storage $ = _getERC2771HandlerUpgradableStorage();\\n        return forwarder == $.trustedForwarder;\\n    }\\n\\n    /**\\n     * @notice ERC-2771 specifies the context as being a single address (20 bytes).\\n     */\\n    function _contextSuffixLength() internal view virtual override returns (uint256) {\\n        return 20;\\n    }\\n}\\n\",\"keccak256\":\"0xa14f99f7b92895cb6343f314d7e500c764ec18fccb32cf8d46e0166758af285d\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/avatar/contracts/nft-collection/INFTCollection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.26;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts-5.0.2/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts-5.0.2/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @title INFTCollection\\n * @author The Sandbox\\n * @custom:security-contact contact-blockchain@sandbox.game\\n * @notice Events emitted and Error raised by the NFTCollection\\n */\\ninterface INFTCollection {\\n\\n    /**\\n     * @notice minting can be denied because of the following reasons\\n    **/\\n    enum MintDenialReason {\\n        None,\\n        NotConfigured,\\n        InvalidAmount,\\n        GlobalMaxTokensPerWalletExceeded,\\n        WaveMaxTokensOverallExceeded,\\n        WaveMaxTokensPerWalletExceeded,\\n        MaxSupplyExceeded\\n    }\\n\\n    /**\\n     * @notice Structure to hold initialization parameters\\n     * @param _collectionOwner the address that will be set as the owner of the collection\\n     * @param _initialBaseURI an URI that will be used as the base for token URI\\n     * @param _name name of the ERC721 token\\n     * @param _symbol token symbol of the ERC721 token\\n     * @param _mintTreasury collection treasury address (where the payments are sent)\\n     * @param _signAddress signer address that is allowed to create mint signatures\\n     * @param _initialTrustedForwarder trusted forwarder address\\n     * @param _allowedToExecuteMint token address that is used for payments and that is allowed to execute mint\\n     * @param _maxSupply max supply of tokens to be allowed to be minted per contract\\n     * @param _maxTokensPerWallet max tokens per wallet\\n     */\\n    struct InitializationParams {\\n        address collectionOwner;\\n        string initialBaseURI;\\n        string name;\\n        string symbol;\\n        address payable mintTreasury;\\n        address signAddress;\\n        address initialTrustedForwarder;\\n        IERC20Metadata allowedToExecuteMint;\\n        uint256 maxSupply;\\n        uint256 maxTokensPerWallet;\\n    }\\n\\n    /**\\n     * @notice Structure used to mint in batch\\n     * @param wallet destination address that will receive the tokens\\n     * @param amount of tokens to mint\\n     */\\n    struct BatchMintingData {\\n        address wallet;\\n        uint256 amount;\\n    }\\n\\n    /**\\n     * @notice Structure used save minting wave information\\n     * @param waveMaxTokensOverall max tokens to buy per wave, cumulating all addresses\\n     * @param waveMaxTokensPerWallet max tokens to buy, per wallet in a given wave\\n     * @param waveSingleTokenPrice price of one token mint (in the token denoted by the allowedToExecuteMint contract)\\n     * @param waveTotalMinted number of total minted tokens in the current running wave\\n     * @param waveOwnerToClaimedCounts mapping of [owner -> minted count]\\n     */\\n    struct WaveData {\\n        uint256 waveMaxTokensOverall;\\n        uint256 waveMaxTokensPerWallet;\\n        uint256 waveSingleTokenPrice;\\n        uint256 waveTotalMinted;\\n        mapping(address owner => uint256 count) waveOwnerToClaimedCounts;\\n    }\\n\\n    /**\\n     * @notice Event emitted when the contract was initialized.\\n     * @dev emitted at proxy startup, only once\\n     * @param baseURI an URI that will be used as the base for token URI\\n     * @param name name of the ERC721 token\\n     * @param symbol token symbol of the ERC721 token\\n     * @param mintTreasury collection treasury address (where the payments are sent)\\n     * @param signAddress signer address that is allowed to create mint signatures\\n     * @param allowedToExecuteMint token address that is used for payments and that is allowed to execute mint\\n     * @param maxSupply max supply of tokens to be allowed to be minted per contract\\n     * @param maxTokensPerWallet maximum amount of tokens that can be minted per wallet across all waves\\n     */\\n    event ContractInitialized(\\n        string indexed baseURI,\\n        string indexed name,\\n        string indexed symbol,\\n        address mintTreasury,\\n        address signAddress,\\n        IERC20Metadata allowedToExecuteMint,\\n        uint256 maxSupply,\\n        uint256 maxTokensPerWallet\\n    );\\n\\n    /**\\n     * @notice Event emitted when a wave was set up\\n     * @dev emitted when setupWave is called\\n     * @param operator the sender of the transaction\\n     * @param waveMaxTokens the allowed number of tokens to be minted in this wave (cumulative by all minting wallets)\\n     * @param waveMaxTokensToBuy max tokens to buy, per wallet in a given wave\\n     * @param waveSingleTokenPrice the price to mint a token in a given wave, in wei\\n     * @param waveIndex the current wave index\\n     */\\n    event WaveSetup(\\n        address indexed operator,\\n        uint256 waveMaxTokens,\\n        uint256 waveMaxTokensToBuy,\\n        uint256 waveSingleTokenPrice,\\n        uint256 waveIndex\\n    );\\n\\n    /**\\n     * @notice Event emitted when a wave mint is completed\\n     * @param tokenId the token id\\n     * @param wallet the wallet address of the receiver\\n     * @param waveIndex the wave index\\n     */\\n    event WaveMint(uint256 tokenId, address indexed wallet, uint256 waveIndex);\\n\\n    /**\\n     * @notice Event emitted when an address was set as allowed to mint\\n     * @dev emitted when setAllowedExecuteMint is called\\n     * @param operator the sender of the transaction\\n     * @param oldToken old address that is used for payments and that is allowed to execute mint\\n     * @param newToken new address that is used for payments and that is allowed to execute mint\\n     */\\n    event AllowedExecuteMintSet(address indexed operator, IERC20 indexed oldToken, IERC20 indexed newToken);\\n\\n    /**\\n     * @notice Event emitted when the treasury address was saved\\n     * @dev emitted when setTreasury is called\\n     * @param operator the sender of the transaction\\n     * @param oldTreasury old collection treasury address (where the payments are sent)\\n     * @param newTreasury new collection treasury address (where the payments are sent)\\n     */\\n    event TreasurySet(address indexed operator, address indexed oldTreasury, address indexed newTreasury);\\n\\n    /**\\n     * @notice Event emitted when the base token URI for the contract was set or changed\\n     * @dev emitted when setBaseURI is called\\n     * @param operator the sender of the transaction\\n     * @param oldBaseURI old URI that will be used as the base for token metadata URI\\n     * @param newBaseURI new URI that will be used as the base for token metadata URI\\n     */\\n    event BaseURISet(address indexed operator, string oldBaseURI, string newBaseURI);\\n\\n    /**\\n     * @notice Event emitted when the max supply is set or changed\\n     * @dev emitted when setSignAddress is called\\n     * @param operator the sender of the transaction\\n     * @param oldMaxSupply old maximum amount of tokens that can be minted\\n     * @param newMaxSupply new maximum amount of tokens that can be minted\\n     */\\n    event MaxSupplySet(address indexed operator, uint256 oldMaxSupply, uint256 newMaxSupply);\\n\\n    /**\\n     * @notice Event emitted when a token personalization was made.\\n     * @dev emitted when personalize is called\\n     * @param operator the sender of the transaction\\n     * @param tokenId id of the token which had the personalization done\\n     * @param personalizationMask the exact personalization that was done, as a custom meaning bit-mask\\n     */\\n    event Personalized(address indexed operator, uint256 indexed tokenId, uint256 indexed personalizationMask);\\n\\n    /**\\n     * @notice Event emitted when a token personalization was made.\\n     * @param operator the sender of the transaction\\n     * @param receiver the receiver of the royalties\\n     * @param feeNumerator percentage of the royalties in feeDenominator units\\n     */\\n    event DefaultRoyaltySet(address indexed operator, address indexed receiver, uint96 feeNumerator);\\n\\n    /**\\n     * @notice Event emitted when default royalties are reset\\n     * @param operator the sender of the transaction\\n     */\\n    event DefaultRoyaltyReset(address indexed operator);\\n\\n    /**\\n     * @notice Event emitted when a token personalization was made.\\n     * @param operator the sender of the transaction\\n     * @param tokenId the token id\\n     * @param receiver the receiver of the royalties\\n     * @param feeNumerator percentage of the royalties in feeDenominator units\\n     */\\n    event TokenRoyaltySet(\\n        address indexed operator,\\n        uint256 indexed tokenId,\\n        address indexed receiver,\\n        uint96 feeNumerator\\n    );\\n\\n    /**\\n     * @notice Event emitted when default royalties are reset\\n     * @param operator the sender of the transaction\\n     * @param tokenId the token id\\n     */\\n    event TokenRoyaltyReset(address indexed operator, uint256 indexed tokenId);\\n\\n    /**\\n     * @notice Event emitted when the max tokens per wallet is set\\n     * @param operator the sender of the transaction\\n     * @param oldMaxTokensPerWallet old maximum tokens per wallet\\n     * @param newMaxTokensPerWallet new maximum tokens per wallet\\n     */\\n    event MaxTokensPerWalletSet(address indexed operator, uint256 oldMaxTokensPerWallet, uint256 newMaxTokensPerWallet);\\n\\n    /**\\n      * @notice event emitted when a token was burned\\n     * @param operator the sender of the transaction\\n     * @param tokenId the id of the token that was burned\\n     * @param burner the owner that burned the token\\n     */\\n    event TokenBurned(address indexed operator, uint256 indexed tokenId, address indexed burner);\\n\\n    /**\\n     * @notice event emitted when token burning was enabled\\n     * @param operator the sender of the transaction\\n     */\\n    event TokenBurningEnabled(address indexed operator);\\n\\n    /**\\n     * @notice event emitted when token burning was disabled\\n     * @param operator the sender of the transaction\\n     */\\n    event TokenBurningDisabled(address indexed operator);\\n\\n    /**\\n     * @notice The operation failed because the base token uri is empty.\\n     * @param baseURI an URI that will be used as the base for token URI\\n     */\\n    error InvalidBaseTokenURI(string baseURI);\\n\\n    /**\\n     * @notice The operation failed the wave index is zero, no wave was ever configured\\n     */\\n    error ContractNotConfigured();\\n\\n    /**\\n     * @notice The operation failed because the token name is invalid\\n     * @param name name of the ERC721 token\\n     */\\n    error InvalidName(string name);\\n\\n    /**\\n     * @notice The operation failed because the token symbol is invalid\\n     * @param symbol token symbol of the ERC721 token\\n     */\\n    error InvalidSymbol(string symbol);\\n\\n    /**\\n     * @notice The operation failed because the treasury is wrong\\n     * @param mintTreasury collection treasury address (where the payments are sent)\\n     */\\n    error InvalidTreasury(address mintTreasury);\\n\\n    /**\\n     * @notice The operation failed because the allowedToExecuteMint is not a contract or wrong\\n     * @param allowedToExecuteMint token address that is used for payments and that is allowed to execute mint\\n     */\\n    error InvalidAllowedToExecuteMint(IERC20Metadata allowedToExecuteMint);\\n\\n    /**\\n     * @notice The operation failed because the maxSupply is lower than totalSupply\\n     * @param maxSupply max supply of tokens to be allowed to be minted per contract\\n     * @param totalSupply amount of tokens minted till now\\n     */\\n    error LowMaxSupply(uint256 maxSupply, uint256 totalSupply);\\n\\n    /**\\n     * @notice The operation failed because the batch data len is zero\\n     */\\n    error InvalidBatchData();\\n\\n    /**\\n     * @notice The operation failed because the wave arguments are wrong\\n     * @param waveMaxTokensOverall the allowed number of tokens to be minted in this wave (cumulative by all minting wallets)\\n     * @param waveMaxTokensPerWallet max tokens to buy, per wallet in a given wave\\n     */\\n    error InvalidWaveData(uint256 waveMaxTokensOverall, uint256 waveMaxTokensPerWallet);\\n\\n    /**\\n     * @notice The operation failed because the wave is completed\\n     * @param reason the reason for the denial\\n     * @param wallet wallet to be checked if it can mint\\n     * @param amount amount to be checked if can be minted\\n     * @param waveIndex the current wave index\\n     */\\n    error CannotMint(MintDenialReason reason, address wallet, uint256 amount, uint256 waveIndex);\\n\\n    /**\\n     * @notice The operation failed because the max tokens per wallet is invalid\\n     * @param maxTokensPerWallet max tokens per wallet\\n     */\\n    error InvalidMaxTokensPerWallet(uint256 maxTokensPerWallet, uint256 maxSupply);\\n\\n    /**\\n     * @notice The operation failed because the wave max tokens per wallet is higher than the global max tokens per wallet\\n     * @param waveMaxTokensPerWallet wave max tokens per wallet\\n     * @param maxTokensPerWallet global max tokens per wallet\\n     */\\n    error WaveMaxTokensHigherThanGlobalMax(uint256 waveMaxTokensPerWallet, uint256 maxTokensPerWallet);\\n\\n    /**\\n     * @notice The operation failed because burning is enabled.\\n     */\\n    error EnforcedBurn();\\n\\n    /**\\n     * @notice The operation failed because burning is disabled.\\n     */\\n    error ExpectedBurn();\\n}\\n\",\"keccak256\":\"0x080cba95adc77c84781b339c33b49d617abe5afd4c52372b67cfeb55359eeaa3\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/avatar/contracts/nft-collection/NFTCollection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.26;\\n\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable-5.0.2/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport {Ownable2StepUpgradeable} from \\\"@openzeppelin/contracts-upgradeable-5.0.2/access/Ownable2StepUpgradeable.sol\\\";\\nimport {ContextUpgradeable} from \\\"@openzeppelin/contracts-upgradeable-5.0.2/utils/ContextUpgradeable.sol\\\";\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable-5.0.2/utils/PausableUpgradeable.sol\\\";\\nimport {ERC2981Upgradeable} from \\\"@openzeppelin/contracts-upgradeable-5.0.2/token/common/ERC2981Upgradeable.sol\\\";\\nimport {ERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable-5.0.2/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts-5.0.2/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts-5.0.2/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts-5.0.2/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport {IERC4906} from \\\"../common/IERC4906.sol\\\";\\nimport {UpdatableOperatorFiltererUpgradeable} from \\\"./UpdatableOperatorFiltererUpgradeable.sol\\\";\\nimport {ERC2771HandlerUpgradeable} from \\\"./ERC2771HandlerUpgradeable.sol\\\";\\nimport {NFTCollectionSignature} from \\\"./NFTCollectionSignature.sol\\\";\\nimport {INFTCollection} from \\\"./INFTCollection.sol\\\";\\n\\n/**\\n * @title NFTCollection\\n * @author The Sandbox\\n * @custom:security-contact contact-blockchain@sandbox.game\\n * @notice Implements an upgradeable ERC721 contract for Avatar NFT collections.\\n * @dev Implements the following features:\\n * - Upgradeable proxy pattern\\n * - Two-step ownership transfer\\n * - OpenSea and ERC2981 royalty standards\\n * - ERC4906 metadata update notifications\\n * - ERC165 interface detection\\n * - ERC2771 meta-transaction support\\n * - Burn tracking for game access control\\n * - ERC20-based minting with approveAndCall pattern\\n * - Batch minting and transfer operations\\n */\\ncontract NFTCollection is\\n    ReentrancyGuardUpgradeable,\\n    Ownable2StepUpgradeable,\\n    ERC721Upgradeable,\\n    ERC2981Upgradeable,\\n    ERC2771HandlerUpgradeable,\\n    UpdatableOperatorFiltererUpgradeable,\\n    PausableUpgradeable,\\n    NFTCollectionSignature,\\n    IERC4906,\\n    INFTCollection\\n{\\n    /// @custom:storage-location erc7201:thesandbox.storage.avatar.nft-collection.NFTCollection\\n    struct NFTCollectionStorage {\\n        /**\\n         * @notice Maximum supply cap for the collection.\\n         */\\n        uint256 maxSupply;\\n        /**\\n         * @notice Maximum tokens that can be minted per wallet across all waves.\\n         */\\n        uint256 maxTokensPerWallet;\\n        /**\\n         * @notice Treasury address receiving minting payments.\\n         */\\n        address mintTreasury;\\n        /**\\n         * @notice Base URI for token metadata.\\n         */\\n        string baseTokenURI;\\n        /**\\n         * @notice Array of minting wave configurations.\\n         */\\n        WaveData[] waveData;\\n        /**\\n         * @notice ERC20 token contract used for minting payments.\\n         */\\n        IERC20 allowedToExecuteMint;\\n        /**\\n         * @notice Mapping of token personalization traits.\\n         */\\n        mapping(uint256 tokenId => uint256 mask) personalizationTraits;\\n        /**\\n         * @notice Mapping of tokens minted per address.\\n         */\\n        mapping(address wallet => uint256 count) mintedCount;\\n        /**\\n         * @notice Current total supply of minted tokens.\\n         */\\n        uint256 totalSupply;\\n        /**\\n         * @notice Flag controlling token burn functionality.\\n         */\\n        bool isBurnEnabled;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"thesandbox.storage.avatar.nft-collection.NFTCollection\\\")) - 1)) & ~bytes32(uint256(0xff));\\n    bytes32 internal constant NFT_COLLECTION_STORAGE_LOCATION =\\n        0x54137d560768c3c24834e09621a4fafd063f4a5812823197e84bcd3fbaff7d00;\\n\\n    function _getNFTCollectionStorage() private pure returns (NFTCollectionStorage storage $) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            $.slot := NFT_COLLECTION_STORAGE_LOCATION\\n        }\\n    }\\n\\n    /**\\n     * @notice Mitigates a possible Implementation contract takeover, as indicated by\\n     *         https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#initializing_the_implementation_contract\\n     */\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @notice Initializes the NFT collection with configuration parameters.\\n     * @param params Struct containing all initialization parameters, see InitializationParams for details.\\n     * @dev External initialization entry point following the upgradeable pattern.\\n     */\\n    function initialize(InitializationParams calldata params) external virtual initializer {\\n        __NFTCollection_init(params);\\n    }\\n\\n    /**\\n     * @notice Internal initialization logic for the NFT collection.\\n     * @param params Struct containing all initialization parameters, see InitializationParams for details.\\n     * @dev Initializes all inherited contracts and sets initial configuration values.\\n     */\\n    function __NFTCollection_init(InitializationParams calldata params) internal onlyInitializing {\\n        if (bytes(params.name).length == 0) {\\n            revert InvalidName(params.name);\\n        }\\n        if (bytes(params.symbol).length == 0) {\\n            revert InvalidSymbol(params.symbol);\\n        }\\n        __ReentrancyGuard_init();\\n        __Ownable_init(params.collectionOwner);\\n        __ERC2981_init();\\n        _setTrustedForwarder(params.initialTrustedForwarder);\\n        __ERC721_init(params.name, params.symbol);\\n        __Pausable_init();\\n        _setBaseURI(params.initialBaseURI);\\n        _setTreasury(params.mintTreasury);\\n        _setSignAddress(params.signAddress);\\n        _setAllowedExecuteMint(params.allowedToExecuteMint);\\n        _setMaxSupply(params.maxSupply);\\n        _setMaxTokensPerWallet(params.maxTokensPerWallet);\\n\\n        emit ContractInitialized(\\n            params.initialBaseURI,\\n            params.name,\\n            params.symbol,\\n            params.mintTreasury,\\n            params.signAddress,\\n            params.allowedToExecuteMint,\\n            params.maxSupply,\\n            params.maxTokensPerWallet\\n        );\\n    }\\n\\n    /**\\n     * @notice Creates a new minting wave.\\n     * @param _waveMaxTokensOverall Maximum tokens that can be minted in this wave.\\n     * @param _waveMaxTokensPerWallet Maximum tokens per wallet for this wave.\\n     * @param _waveSingleTokenPrice Price per token in wave, denominated in allowedToExecuteMint token.\\n     * @dev Validates wave parameters against global limits and current supply.\\n     */\\n    function setupWave(\\n        uint256 _waveMaxTokensOverall,\\n        uint256 _waveMaxTokensPerWallet,\\n        uint256 _waveSingleTokenPrice\\n    ) external onlyOwner {\\n        NFTCollectionStorage storage $ = _getNFTCollectionStorage();\\n        if (\\n            _waveMaxTokensOverall > $.maxSupply ||\\n            _waveMaxTokensOverall == 0 ||\\n            _waveMaxTokensPerWallet == 0 ||\\n            _waveMaxTokensPerWallet > _waveMaxTokensOverall\\n        ) {\\n            revert InvalidWaveData(_waveMaxTokensOverall, _waveMaxTokensPerWallet);\\n        }\\n        if (_waveMaxTokensPerWallet > $.maxTokensPerWallet) {\\n            revert WaveMaxTokensHigherThanGlobalMax(_waveMaxTokensPerWallet, $.maxTokensPerWallet);\\n        }\\n        uint256 waveIndex = $.waveData.length;\\n        emit WaveSetup(_msgSender(), _waveMaxTokensOverall, _waveMaxTokensPerWallet, _waveSingleTokenPrice, waveIndex);\\n        $.waveData.push();\\n        $.waveData[waveIndex].waveMaxTokensOverall = _waveMaxTokensOverall;\\n        $.waveData[waveIndex].waveMaxTokensPerWallet = _waveMaxTokensPerWallet;\\n        $.waveData[waveIndex].waveSingleTokenPrice = _waveSingleTokenPrice;\\n    }\\n\\n    /**\\n     * @notice Mints tokens using the latest wave configuration.\\n     * @param wallet Address receiving the minted tokens.\\n     * @param amount Number of tokens to mint.\\n     * @param signatureId Unique identifier for the minting signature.\\n     * @param signature Cryptographic signature authorizing the mint.\\n     * @dev Only callable by allowedToExecuteMint contract. Uses the most recent wave configuration.\\n     */\\n    function mint(\\n        address wallet,\\n        uint256 amount,\\n        uint256 signatureId,\\n        bytes calldata signature\\n    ) external whenNotPaused nonReentrant {\\n        NFTCollectionStorage storage $ = _getNFTCollectionStorage();\\n        uint256 wavesLength = $.waveData.length;\\n        if (wavesLength == 0) {\\n            revert ContractNotConfigured();\\n        }\\n        if (_msgSender() != address($.allowedToExecuteMint)) {\\n            revert ERC721InvalidSender(_msgSender());\\n        }\\n        _checkAndSetMintSignature(wallet, signatureId, signature);\\n        // pick the last wave\\n        uint256 waveIndex = wavesLength - 1;\\n        WaveData storage waveData = $.waveData[waveIndex];\\n        _doMint(waveData, wallet, amount, waveIndex);\\n    }\\n\\n    /**\\n     * @notice Mints tokens using a specific wave configuration.\\n     * @param wallet Address receiving the minted tokens.\\n     * @param amount Number of tokens to mint.\\n     * @param waveIndex Index of the wave configuration to use.\\n     * @param signatureId Unique identifier for the minting signature.\\n     * @param signature Cryptographic signature authorizing the mint.\\n     * @dev Only callable by allowedToExecuteMint contract.\\n     */\\n    function waveMint(\\n        address wallet,\\n        uint256 amount,\\n        uint256 waveIndex,\\n        uint256 signatureId,\\n        bytes calldata signature\\n    ) external whenNotPaused nonReentrant {\\n        NFTCollectionStorage storage $ = _getNFTCollectionStorage();\\n        if ($.waveData.length == 0) {\\n            revert ContractNotConfigured();\\n        }\\n        if (_msgSender() != address($.allowedToExecuteMint)) {\\n            revert ERC721InvalidSender(_msgSender());\\n        }\\n        _checkAndSetWaveMintSignature(wallet, waveIndex, signatureId, signature);\\n        WaveData storage waveData = _getWaveData(waveIndex);\\n        _doMint(waveData, wallet, amount, waveIndex);\\n    }\\n\\n    /**\\n     * @notice Deactivates a minting wave by setting its maximum tokens to zero.\\n     * @param waveIndex Index of the wave to cancel.\\n     * @dev Cannot cancel the most recent wave to prevent disruption of mint function.\\n     */\\n    function cancelWave(uint256 waveIndex) external onlyOwner {\\n        NFTCollectionStorage storage $ = _getNFTCollectionStorage();\\n        /// @dev don't use _getWaveData, we don't want to cancel the last wave by mistake\\n        if (waveIndex >= $.waveData.length) {\\n            revert ContractNotConfigured();\\n        }\\n        $.waveData[waveIndex].waveMaxTokensOverall = 0;\\n    }\\n\\n    /**\\n     * @notice Performs batch minting for multiple addresses.\\n     * @param waveIndex Index of the wave configuration to use.\\n     * @param wallets Array of recipient addresses and mint amounts.\\n     * @dev Owner-only function for airdrops. Bypasses wave restrictions but respects maxSupply.\\n     */\\n    function batchMint(uint256 waveIndex, BatchMintingData[] calldata wallets) external whenNotPaused onlyOwner {\\n        NFTCollectionStorage storage $ = _getNFTCollectionStorage();\\n        uint256 len = wallets.length;\\n        if (len == 0) {\\n            revert InvalidBatchData();\\n        }\\n        if ($.waveData.length == 0) {\\n            revert ContractNotConfigured();\\n        }\\n        for (uint256 i; i < len; i++) {\\n            uint256 _totalSupply = $.totalSupply;\\n            address wallet = wallets[i].wallet;\\n            uint256 amount = wallets[i].amount;\\n            if (amount == 0) {\\n                revert CannotMint(MintDenialReason.InvalidAmount, wallet, amount, waveIndex);\\n            }\\n            if ($.totalSupply + amount > $.maxSupply) {\\n                revert CannotMint(MintDenialReason.MaxSupplyExceeded, wallet, amount, waveIndex);\\n            }\\n            for (uint256 j; j < amount; j++) {\\n                // @dev _mint already checks the destination wallet\\n                // @dev start with tokenId = 1\\n                _mint(wallet, _totalSupply + j + 1);\\n                emit WaveMint(_totalSupply + j + 1, wallet, waveIndex);\\n            }\\n            $.totalSupply += amount;\\n        }\\n    }\\n\\n    /**\\n     * @notice Triggers metadata refresh for a specific token.\\n     * @param tokenId ID of the token to refresh.\\n     * @param signatureId Unique identifier for the reveal signature.\\n     * @param signature Cryptographic signature authorizing the reveal.\\n     * @dev Emits MetadataUpdate for marketplace integration. Caller must be token owner.\\n     */\\n    function reveal(uint256 tokenId, uint256 signatureId, bytes calldata signature) external whenNotPaused {\\n        address sender = _msgSender();\\n        address owner = ownerOf(tokenId);\\n        if (owner != sender) {\\n            revert ERC721IncorrectOwner(sender, tokenId, owner);\\n        }\\n        _checkAndSetRevealSignature(sender, signatureId, signature);\\n        emit MetadataUpdate(tokenId);\\n    }\\n\\n    /**\\n     * @notice Updates token traits using a bit mask.\\n     * @param tokenId ID of the token to personalize.\\n     * @param personalizationMask Bit mask encoding trait configurations.\\n     * @param signatureId Unique identifier for the personalization signature.\\n     * @param signature Cryptographic signature authorizing the personalization.\\n     * @dev Caller must be token owner. Emits MetadataUpdate event.\\n     */\\n    function personalize(\\n        uint256 tokenId,\\n        uint256 personalizationMask,\\n        uint256 signatureId,\\n        bytes calldata signature\\n    ) external whenNotPaused {\\n        address sender = _msgSender();\\n        address owner = ownerOf(tokenId);\\n        if (owner != sender) {\\n            revert ERC721IncorrectOwner(sender, tokenId, owner);\\n        }\\n        _checkAndSetPersonalizationSignature(sender, tokenId, personalizationMask, signatureId, signature);\\n        _updateTokenTraits(tokenId, personalizationMask);\\n    }\\n\\n    /**\\n     * @notice Updates token traits with privileged access.\\n     * @param tokenId ID of the token to personalize.\\n     * @param personalizationMask Bit mask encoding trait configurations.\\n     * @dev Owner-only function for game-driven trait updates.\\n     */\\n    function operatorPersonalize(uint256 tokenId, uint256 personalizationMask) external onlyOwner {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        _updateTokenTraits(tokenId, personalizationMask);\\n    }\\n\\n    /**\\n     * @notice Burns a token.\\n     * @param tokenId ID of the token to burn.\\n     * @dev Requires burning to be enabled. Caller must own or be approved for token.\\n     */\\n    function burn(uint256 tokenId) external whenNotPaused {\\n        _burnWithCheck(tokenId);\\n    }\\n\\n    /**\\n     * @notice Enables token burning functionality.\\n     * @dev Reverts if burning is already enabled. Only callable by owner.\\n     */\\n    function enableBurning() external onlyOwner {\\n        NFTCollectionStorage storage $ = _getNFTCollectionStorage();\\n        if ($.isBurnEnabled) {\\n            revert EnforcedBurn();\\n        }\\n        $.isBurnEnabled = true;\\n        emit TokenBurningEnabled(_msgSender());\\n    }\\n\\n    /**\\n     * @notice Disables token burning functionality.\\n     * @dev Reverts if burning is already disabled. Only callable by owner.\\n     */\\n    function disableBurning() external onlyOwner {\\n        NFTCollectionStorage storage $ = _getNFTCollectionStorage();\\n        if (!$.isBurnEnabled) {\\n            revert ExpectedBurn();\\n        }\\n        $.isBurnEnabled = false;\\n        emit TokenBurningDisabled(_msgSender());\\n    }\\n\\n    /**\\n     * @notice Pauses all token operations.\\n     * @dev Reverts if contract is already paused. Only callable by owner.\\n     */\\n    function pause() external onlyOwner {\\n        _requireNotPaused();\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpauses all token operations.\\n     * @dev Reverts if contract is not paused. Only callable by owner.\\n     */\\n    function unpause() external onlyOwner {\\n        _requirePaused();\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Updates the treasury address for minting payments.\\n     * @param treasury New treasury address.\\n     * @dev Reverts if treasury address is zero. Only callable by owner.\\n     */\\n    function setTreasury(address treasury) external onlyOwner {\\n        _setTreasury(treasury);\\n    }\\n\\n    /**\\n     * @notice Updates the signing address for validating operations.\\n     * @param _signAddress New signer address.\\n     * @dev Only callable by owner.\\n     */\\n    function setSignAddress(address _signAddress) external onlyOwner {\\n        _setSignAddress(_signAddress);\\n    }\\n\\n    /**\\n     * @notice Updates the maximum supply cap.\\n     * @param _maxSupply New maximum token supply.\\n     * @dev Must be greater than current supply. Only callable by owner.\\n     */\\n    function setMaxSupply(uint256 _maxSupply) external onlyOwner {\\n        _setMaxSupply(_maxSupply);\\n    }\\n\\n    /**\\n     * @notice Updates the maximum tokens per wallet limit.\\n     * @param _maxTokensPerWallet New maximum tokens per wallet.\\n     * @dev Must be greater than zero and less than maxSupply. Only callable by owner.\\n     */\\n    function setMaxTokensPerWallet(uint256 _maxTokensPerWallet) external onlyOwner {\\n        _setMaxTokensPerWallet(_maxTokensPerWallet);\\n    }\\n\\n    /**\\n     * @notice Updates the ERC20 token contract used for minting payments.\\n     * @param minterToken Address of the ERC20 token contract.\\n     * @dev Must be a valid contract address. Only callable by owner.\\n     */\\n    function setAllowedExecuteMint(IERC20Metadata minterToken) external onlyOwner {\\n        _setAllowedExecuteMint(minterToken);\\n    }\\n\\n    /**\\n     * @notice Updates the base URI for token metadata.\\n     * @param baseURI New base URI string.\\n     * @dev Emits BatchMetadataUpdate for the entire collection. Only callable by owner.\\n     */\\n    function setBaseURI(string calldata baseURI) external onlyOwner {\\n        _setBaseURI(baseURI);\\n        // Refreshes the whole collection (https://docs.opensea.io/docs/metadata-standards#metadata-updates)\\n        emit BatchMetadataUpdate(0, type(uint256).max);\\n    }\\n\\n    /**\\n     * @notice Sets the operator filter registry address.\\n     * @param registry Address of the registry contract.\\n     * @dev Used for marketplace filtering. Only callable by owner.\\n     */\\n    function setOperatorRegistry(address registry) external virtual onlyOwner {\\n        _setOperatorRegistry(registry);\\n    }\\n\\n    /**\\n     * @notice Updates the trusted forwarder for meta-transactions.\\n     * @param forwarder New forwarder address.\\n     * @dev Set to address(0) to disable meta-transactions. Only callable by owner.\\n     */\\n    function setTrustedForwarder(address forwarder) external virtual onlyOwner {\\n        _setTrustedForwarder(forwarder);\\n    }\\n\\n    /**\\n     * @notice Registers the contract with OpenSea's operator filter registry.\\n     * @param subscriptionOrRegistrantToCopy Address to copy or subscribe to.\\n     * @param subscribe True to subscribe, false to copy the list.\\n     * @dev Pass address(0) to register without subscription. Only callable by owner.\\n     */\\n    function register(address subscriptionOrRegistrantToCopy, bool subscribe) external onlyOwner {\\n        _register(subscriptionOrRegistrantToCopy, subscribe);\\n    }\\n\\n    /**\\n     * @notice Safely transfers multiple tokens between addresses.\\n     * @param from Source address.\\n     * @param to Destination address.\\n     * @param ids Array of token IDs to transfer.\\n     * @param data Additional data for receiver callback.\\n     * @dev Verifies receiver contract compatibility. Requires approval or ownership.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external virtual whenNotPaused onlyAllowedOperator(from) {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address msgSender = _msgSender();\\n        uint256 numTokens = ids.length;\\n        for (uint256 i; i < numTokens; i++) {\\n            uint256 tokenId = ids[i];\\n            // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n            // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n            address previousOwner = _update(to, tokenId, msgSender);\\n            if (previousOwner != from) {\\n                revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n            }\\n            _checkOnERC721ReceivedImpl(from, to, tokenId, data);\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfers multiple tokens between addresses.\\n     * @param from Source address.\\n     * @param to Destination address.\\n     * @param ids Array of token IDs to transfer.\\n     * @dev Requires approval or ownership. Does not verify receiver compatibility.\\n     */\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids\\n    ) external virtual whenNotPaused onlyAllowedOperator(from) {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address msgSender = _msgSender();\\n        uint256 numTokens = ids.length;\\n        for (uint256 i; i < numTokens; i++) {\\n            uint256 tokenId = ids[i];\\n            // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n            // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n            address previousOwner = _update(to, tokenId, msgSender);\\n            if (previousOwner != from) {\\n                revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets default royalty information for all tokens.\\n     * @param receiver Royalty recipient address.\\n     * @param feeNumerator Royalty fee in basis points.\\n     * @dev Only callable by owner.\\n     */\\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external onlyOwner {\\n        /// @dev ERC2981Upgradeable don't emit and don't give access to the old value\\n        emit DefaultRoyaltySet(_msgSender(), receiver, feeNumerator);\\n        _setDefaultRoyalty(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @notice Removes default royalty configuration.\\n     * @dev Only callable by owner.\\n     */\\n    function resetDefaultRoyalty() external onlyOwner {\\n        /// @dev ERC2981Upgradeable don't emit and don't give access to the old value\\n        emit DefaultRoyaltyReset(_msgSender());\\n        _deleteDefaultRoyalty();\\n    }\\n\\n    /**\\n     * @notice Sets royalty information for a specific token.\\n     * @param tokenId Token ID to configure.\\n     * @param receiver Royalty recipient address.\\n     * @param feeNumerator Royalty fee in basis points.\\n     * @dev Overrides default royalty for the specified token. Only callable by owner.\\n     */\\n    function setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) external onlyOwner {\\n        /// @dev ERC2981Upgradeable don't emit and don't give access to the old value\\n        emit TokenRoyaltySet(_msgSender(), tokenId, receiver, feeNumerator);\\n        _setTokenRoyalty(tokenId, receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @notice Resets token-specific royalty configuration.\\n     * @param tokenId Token ID to reset.\\n     * @dev Returns token to default royalty configuration. Only callable by owner.\\n     */\\n    function resetTokenRoyalty(uint256 tokenId) external onlyOwner {\\n        /// @dev ERC2981Upgradeable don't emit and don't give access to the old value\\n        emit TokenRoyaltyReset(_msgSender(), tokenId);\\n        _resetTokenRoyalty(tokenId);\\n    }\\n\\n    /**\\n     * @notice Sets approval for an operator to manage caller's tokens.\\n     * @param operator Address to grant approval to.\\n     * @param approved True to approve, false to revoke.\\n     * @dev Overrides ERC721 implementation to add operator filtering.\\n     */\\n    function setApprovalForAll(\\n        address operator,\\n        bool approved\\n    ) public override whenNotPaused onlyAllowedOperatorApproval(operator) {\\n        super.setApprovalForAll(operator, approved);\\n    }\\n\\n    /**\\n     * @notice Approves an operator to transfer a specific token.\\n     * @param operator Address to grant approval to.\\n     * @param tokenId ID of token to approve.\\n     * @dev Overrides ERC721 implementation to add operator filtering.\\n     */\\n    function approve(\\n        address operator,\\n        uint256 tokenId\\n    ) public override whenNotPaused onlyAllowedOperatorApproval(operator) {\\n        super.approve(operator, tokenId);\\n    }\\n\\n    /**\\n     * @notice Transfers a token between addresses.\\n     * @param from Source address.\\n     * @param to Destination address.\\n     * @param tokenId ID of token to transfer.\\n     * @dev Overrides ERC721 implementation to add operator filtering.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public override whenNotPaused onlyAllowedOperator(from) {\\n        super.transferFrom(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @notice Safely transfers a token between addresses.\\n     * @param from Source address.\\n     * @param to Destination address.\\n     * @param tokenId ID of token to transfer.\\n     * @param data Additional data for receiver callback.\\n     * @dev Overrides ERC721 implementation to add operator filtering.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public override whenNotPaused onlyAllowedOperator(from) {\\n        super.safeTransferFrom(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @notice Retrieves personalization traits for a token.\\n     * @param tokenId Token ID to query.\\n     * @return Bit mask of token's personalization traits.\\n     */\\n    function personalizationOf(uint256 tokenId) external view returns (uint256) {\\n        NFTCollectionStorage storage $ = _getNFTCollectionStorage();\\n        return $.personalizationTraits[tokenId];\\n    }\\n\\n    /**\\n     * @notice Returns the number of tokens minted by an address.\\n     * @param wallet Address to query.\\n     * @return Number of tokens minted by the address.\\n     */\\n    function mintedCount(address wallet) external view returns (uint256) {\\n        NFTCollectionStorage storage $ = _getNFTCollectionStorage();\\n        return $.mintedCount[wallet];\\n    }\\n\\n    /**\\n     * @notice Checks if an address can mint tokens in a specific wave.\\n     * @param waveIndex Wave configuration index.\\n     * @param wallet Address to check.\\n     * @param amount Number of tokens to check.\\n     * @return Reason code indicating mint permission status.\\n     */\\n    function isMintDenied(uint256 waveIndex, address wallet, uint256 amount) external view returns (MintDenialReason) {\\n        NFTCollectionStorage storage $ = _getNFTCollectionStorage();\\n        if (waveIndex >= $.waveData.length) {\\n            return MintDenialReason.NotConfigured;\\n        }\\n        WaveData storage waveData = $.waveData[waveIndex];\\n        return _isMintDenied($, waveData, wallet, amount);\\n    }\\n\\n    /**\\n     * @notice Returns the fee denominator for royalty calculations.\\n     * @return Fee denominator value (10000 for basis points).\\n     * @dev Used in conjunction with royalty fee numerator.\\n     */\\n    function feeDenominator() external pure virtual returns (uint96) {\\n        return _feeDenominator();\\n    }\\n\\n    /**\\n     * @notice Returns the current chain ID.\\n     * @return Current blockchain network ID.\\n     */\\n    function chain() external view returns (uint256) {\\n        return block.chainid;\\n    }\\n\\n    /**\\n     * @notice Returns the maximum token supply cap.\\n     * @return Maximum number of tokens that can be minted.\\n     */\\n    function maxSupply() external view returns (uint256) {\\n        NFTCollectionStorage storage $ = _getNFTCollectionStorage();\\n        return $.maxSupply;\\n    }\\n\\n    /**\\n     * @notice Returns the treasury address for minting payments.\\n     * @return Address receiving minting payments.\\n     */\\n    function mintTreasury() external view returns (address) {\\n        NFTCollectionStorage storage $ = _getNFTCollectionStorage();\\n        return $.mintTreasury;\\n    }\\n\\n    /**\\n     * @notice Returns the base URI for token metadata.\\n     * @return Base URI string.\\n     */\\n    function baseTokenURI() external view returns (string memory) {\\n        NFTCollectionStorage storage $ = _getNFTCollectionStorage();\\n        return $.baseTokenURI;\\n    }\\n\\n    /**\\n     * @notice Returns the maximum tokens allowed for a specific wave.\\n     * @param waveIndex Wave configuration index.\\n     * @return Maximum tokens allowed in the wave.\\n     */\\n    function waveMaxTokensOverall(uint256 waveIndex) external view returns (uint256) {\\n        WaveData storage waveData = _getWaveData(waveIndex);\\n        return waveData.waveMaxTokensOverall;\\n    }\\n\\n    /**\\n     * @notice Returns the maximum tokens per wallet for a specific wave.\\n     * @param waveIndex Wave configuration index.\\n     * @return Maximum tokens allowed per wallet in the wave.\\n     */\\n    function waveMaxTokensPerWallet(uint256 waveIndex) external view returns (uint256) {\\n        WaveData storage waveData = _getWaveData(waveIndex);\\n        return waveData.waveMaxTokensPerWallet;\\n    }\\n\\n    /**\\n     * @notice Returns the token price for a specific wave.\\n     * @param waveIndex Wave configuration index.\\n     * @return Price per token in the wave's payment token.\\n     */\\n    function waveSingleTokenPrice(uint256 waveIndex) external view returns (uint256) {\\n        WaveData storage waveData = _getWaveData(waveIndex);\\n        return waveData.waveSingleTokenPrice;\\n    }\\n\\n    /**\\n     * @notice Returns the total tokens minted in a specific wave.\\n     * @param waveIndex Wave configuration index.\\n     * @return Total tokens minted in the wave.\\n     */\\n    function waveTotalMinted(uint256 waveIndex) external view returns (uint256) {\\n        WaveData storage waveData = _getWaveData(waveIndex);\\n        return waveData.waveTotalMinted;\\n    }\\n\\n    /**\\n     * @notice Returns the number of tokens minted by an address in a specific wave.\\n     * @param waveIndex Wave configuration index.\\n     * @param owner Address to query.\\n     * @return Number of tokens minted by the address in the wave.\\n     */\\n    function waveOwnerToClaimedCounts(uint256 waveIndex, address owner) external view returns (uint256) {\\n        WaveData storage waveData = _getWaveData(waveIndex);\\n        return waveData.waveOwnerToClaimedCounts[owner];\\n    }\\n\\n    /**\\n     * @notice Returns the total number of configured waves.\\n     * @return Number of minting waves configured.\\n     */\\n    function waveCount() external view returns (uint256) {\\n        NFTCollectionStorage storage $ = _getNFTCollectionStorage();\\n        return $.waveData.length;\\n    }\\n\\n    /**\\n     * @notice Returns the ERC20 token used for minting payments.\\n     * @return Address of the payment token contract.\\n     */\\n    function allowedToExecuteMint() external view returns (IERC20) {\\n        NFTCollectionStorage storage $ = _getNFTCollectionStorage();\\n        return $.allowedToExecuteMint;\\n    }\\n\\n    /**\\n     * @notice Returns the global maximum tokens per wallet limit.\\n     * @return Maximum tokens allowed per wallet across all waves.\\n     */\\n    function maxTokensPerWallet() external view returns (uint256) {\\n        NFTCollectionStorage storage $ = _getNFTCollectionStorage();\\n        return $.maxTokensPerWallet;\\n    }\\n\\n    /**\\n     * @notice Returns the current total supply of minted tokens.\\n     * @return Current number of minted tokens.\\n     */\\n    function totalSupply() external view returns (uint256) {\\n        NFTCollectionStorage storage $ = _getNFTCollectionStorage();\\n        return $.totalSupply;\\n    }\\n\\n    /**\\n     * @notice Returns the burn functionality status.\\n     * @return True if token burning is enabled.\\n     */\\n    function isBurnEnabled() external view returns (bool) {\\n        NFTCollectionStorage storage $ = _getNFTCollectionStorage();\\n        return $.isBurnEnabled;\\n    }\\n\\n    /**\\n     * @notice Checks interface support using ERC165.\\n     * @param interfaceId Interface identifier to check.\\n     * @return True if interface is supported.\\n     * @dev Adds support for ERC4906 interface.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC2981Upgradeable, ERC721Upgradeable) returns (bool) {\\n        return interfaceId == bytes4(0x49064906) || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @notice Internal function to perform minting operations.\\n     * @param waveData Wave configuration data.\\n     * @param wallet Address receiving tokens.\\n     * @param amount Number of tokens to mint.\\n     * @param waveIndex Wave configuration index.\\n     * @dev Handles payment processing and token minting.\\n     */\\n    function _doMint(WaveData storage waveData, address wallet, uint256 amount, uint256 waveIndex) internal {\\n        NFTCollectionStorage storage $ = _getNFTCollectionStorage();\\n        MintDenialReason reason = _isMintDenied($, waveData, wallet, amount);\\n        if (reason != MintDenialReason.None) {\\n            revert CannotMint(reason, wallet, amount, waveIndex);\\n        }\\n        uint256 _price = waveData.waveSingleTokenPrice * amount;\\n        if (_price > 0) {\\n            SafeERC20.safeTransferFrom($.allowedToExecuteMint, wallet, $.mintTreasury, _price);\\n        }\\n        uint256 _totalSupply = $.totalSupply;\\n        waveData.waveOwnerToClaimedCounts[wallet] += amount;\\n        waveData.waveTotalMinted += amount;\\n        $.totalSupply += amount;\\n        $.mintedCount[wallet] += amount;\\n        for (uint256 i; i < amount; i++) {\\n            // @dev _safeMint already checks the destination _wallet\\n            // @dev start with tokenId = 1\\n            _safeMint(wallet, _totalSupply + i + 1);\\n            emit WaveMint(_totalSupply + i + 1, wallet, waveIndex);\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal function to check minting permissions.\\n     * @param $ Storage pointer.\\n     * @param waveData Wave configuration data.\\n     * @param wallet Address attempting to mint.\\n     * @param amount Number of tokens requested.\\n     * @return Reason code indicating mint permission status.\\n     */\\n    function _isMintDenied(\\n        NFTCollectionStorage storage $,\\n        WaveData storage waveData,\\n        address wallet,\\n        uint256 amount\\n    ) internal view returns (MintDenialReason) {\\n        if ($.mintedCount[wallet] + amount > $.maxTokensPerWallet) {\\n            return MintDenialReason.GlobalMaxTokensPerWalletExceeded;\\n        }\\n        if (amount == 0) {\\n            return MintDenialReason.InvalidAmount;\\n        }\\n        if (waveData.waveTotalMinted + amount > waveData.waveMaxTokensOverall) {\\n            return MintDenialReason.WaveMaxTokensOverallExceeded;\\n        }\\n        if (waveData.waveOwnerToClaimedCounts[wallet] + amount > waveData.waveMaxTokensPerWallet) {\\n            return MintDenialReason.WaveMaxTokensPerWalletExceeded;\\n        }\\n        if ($.totalSupply + amount > $.maxSupply) {\\n            return MintDenialReason.MaxSupplyExceeded;\\n        }\\n        return MintDenialReason.None;\\n    }\\n\\n    /**\\n     * @notice Helper function to retrieve wave data by index.\\n     * @param waveIndex Index of the wave configuration.\\n     * @return waveData Storage pointer to the wave configuration.\\n     * @dev Accepts indices >= waveData.length to access the latest wave.\\n     */\\n    function _getWaveData(uint256 waveIndex) internal view returns (WaveData storage) {\\n        NFTCollectionStorage storage $ = _getNFTCollectionStorage();\\n        uint256 waveDataLen = $.waveData.length;\\n        if (waveIndex >= waveDataLen) {\\n            waveIndex = waveDataLen - 1;\\n        }\\n        return $.waveData[waveIndex];\\n    }\\n\\n    /**\\n     * @notice Returns the base URI for token metadata.\\n     * @return Base URI string for token metadata.\\n     * @dev Internal implementation of ERC721 _baseURI.\\n     */\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        NFTCollectionStorage storage $ = _getNFTCollectionStorage();\\n        return $.baseTokenURI;\\n    }\\n\\n    /**\\n     * @notice Returns the message data for meta-transactions.\\n     * @return Message data with meta-transaction context.\\n     * @dev ERC2771 compatible msg.data getter.\\n     */\\n    function _msgData() internal view override(ContextUpgradeable, ERC2771HandlerUpgradeable) returns (bytes calldata) {\\n        return ERC2771HandlerUpgradeable._msgData();\\n    }\\n\\n    /**\\n     * @notice Returns the message sender for meta-transactions.\\n     * @return sender Effective message sender accounting for meta-transactions.\\n     * @dev ERC2771 compatible msg.sender getter.\\n     */\\n    function _msgSender()\\n        internal\\n        view\\n        override(\\n            ContextUpgradeable,\\n            ERC2771HandlerUpgradeable,\\n            UpdatableOperatorFiltererUpgradeable,\\n            NFTCollectionSignature\\n        )\\n        returns (address sender)\\n    {\\n        sender = ERC2771HandlerUpgradeable._msgSender();\\n    }\\n\\n    /**\\n     * @notice Returns the context suffix length for meta-transactions.\\n     * @return Length of the meta-transaction context (20 bytes for address).\\n     * @dev ERC2771 specification implementation.\\n     */\\n    function _contextSuffixLength()\\n        internal\\n        view\\n        override(ContextUpgradeable, ERC2771HandlerUpgradeable)\\n        returns (uint256)\\n    {\\n        return ERC2771HandlerUpgradeable._contextSuffixLength();\\n    }\\n\\n    /**\\n     * @notice Updates token personalization traits.\\n     * @param tokenId Token ID to update.\\n     * @param personalizationMask New trait configuration.\\n     * @dev No input validation - calling functions must perform checks.\\n     */\\n    function _updateTokenTraits(uint256 tokenId, uint256 personalizationMask) internal {\\n        NFTCollectionStorage storage $ = _getNFTCollectionStorage();\\n        $.personalizationTraits[tokenId] = personalizationMask;\\n        emit Personalized(_msgSender(), tokenId, personalizationMask);\\n        emit MetadataUpdate(tokenId);\\n    }\\n\\n    /**\\n     * @notice Checks if an address is a contract.\\n     * @param account Address to check.\\n     * @return True if the address contains code.\\n     * @dev Can be bypassed if called during contract construction.\\n     */\\n    function _isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @notice Updates the base token URI.\\n     * @param baseURI New base URI for token metadata.\\n     * @dev Validates URI length and emits update event.\\n     */\\n    function _setBaseURI(string calldata baseURI) internal {\\n        NFTCollectionStorage storage $ = _getNFTCollectionStorage();\\n        if (bytes(baseURI).length == 0) {\\n            revert InvalidBaseTokenURI(baseURI);\\n        }\\n        emit BaseURISet(_msgSender(), $.baseTokenURI, baseURI);\\n        $.baseTokenURI = baseURI;\\n    }\\n\\n    /**\\n     * @notice Updates the treasury address.\\n     * @param _treasury New treasury address.\\n     * @dev Validates address is non-zero and emits update event.\\n     */\\n    function _setTreasury(address _treasury) internal {\\n        NFTCollectionStorage storage $ = _getNFTCollectionStorage();\\n        if (_treasury == address(0)) {\\n            revert InvalidTreasury(_treasury);\\n        }\\n        emit TreasurySet(_msgSender(), $.mintTreasury, _treasury);\\n        $.mintTreasury = _treasury;\\n    }\\n\\n    /**\\n     * @notice Updates the allowed minting token.\\n     * @param _minterToken New ERC20 token for minting payments.\\n     * @dev Validates contract address and emits update event.\\n     */\\n    function _setAllowedExecuteMint(IERC20Metadata _minterToken) internal {\\n        NFTCollectionStorage storage $ = _getNFTCollectionStorage();\\n        if (!_isContract(address(_minterToken))) {\\n            revert InvalidAllowedToExecuteMint(_minterToken);\\n        }\\n        emit AllowedExecuteMintSet(_msgSender(), $.allowedToExecuteMint, _minterToken);\\n        $.allowedToExecuteMint = _minterToken;\\n    }\\n\\n    /**\\n     * @notice Updates the maximum supply cap.\\n     * @param _maxSupply New maximum token supply.\\n     * @dev Validates against current supply and emits update event.\\n     */\\n    function _setMaxSupply(uint256 _maxSupply) internal {\\n        NFTCollectionStorage storage $ = _getNFTCollectionStorage();\\n        if (_maxSupply == 0) {\\n            revert LowMaxSupply(0, $.totalSupply);\\n        }\\n        if (_maxSupply < $.totalSupply) {\\n            revert LowMaxSupply(_maxSupply, $.totalSupply);\\n        }\\n        emit MaxSupplySet(_msgSender(), $.maxSupply, _maxSupply);\\n        $.maxSupply = _maxSupply;\\n    }\\n\\n    /**\\n     * @notice Updates the maximum tokens per wallet.\\n     * @param _maxTokensPerWallet New maximum tokens per wallet.\\n     * @dev Validates against maxSupply and emits update event.\\n     */\\n    function _setMaxTokensPerWallet(uint256 _maxTokensPerWallet) internal {\\n        NFTCollectionStorage storage $ = _getNFTCollectionStorage();\\n        if (_maxTokensPerWallet == 0 || _maxTokensPerWallet > $.maxSupply) {\\n            revert InvalidMaxTokensPerWallet(_maxTokensPerWallet, $.maxSupply);\\n        }\\n        emit MaxTokensPerWalletSet(_msgSender(), $.maxTokensPerWallet, _maxTokensPerWallet);\\n        $.maxTokensPerWallet = _maxTokensPerWallet;\\n    }\\n\\n    /**\\n     * @notice Burns a token with validation checks.\\n     * @param tokenId Token ID to burn.\\n     * @dev Verifies burn is enabled and caller is authorized.\\n     */\\n    function _burnWithCheck(uint256 tokenId) internal virtual {\\n        NFTCollectionStorage storage $ = _getNFTCollectionStorage();\\n        if (!$.isBurnEnabled) {\\n            revert ExpectedBurn();\\n        }\\n        address sender = _msgSender();\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(address(0), tokenId, sender);\\n        emit TokenBurned(sender, tokenId, previousOwner);\\n    }\\n\\n    /**\\n     * @notice Validates ERC721 receiver implementation.\\n     * @param from Source address.\\n     * @param to Destination address.\\n     * @param tokenId Token ID being transferred.\\n     * @param data Additional transfer data.\\n     * @dev Reverts if receiver contract does not implement IERC721Receiver.\\n     */\\n    function _checkOnERC721ReceivedImpl(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5ab681dd807b0501c0470110042a5a2588ee0167e88bf81c3a59b1483624c651\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/avatar/contracts/nft-collection/NFTCollectionSignature.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.26;\\n\\nimport {ECDSA} from \\\"@openzeppelin/contracts-5.0.2/utils/cryptography/ECDSA.sol\\\";\\n\\n/**\\n * @title NFTCollectionSignature\\n * @author The Sandbox\\n * @custom:security-contact contact-blockchain@sandbox.game\\n * @notice Signatures accepted by the NFTCollection\\n * @dev We have a set of different signatures to be backward compatible with previous collections\\n * @dev We must be sure that all the signatures are different and cannot be reused by different methods, so,\\n * @dev we added an extra constant string to reveal to distinguish it from the mint signature.\\n * @dev mint:           ['address', 'uint256', 'address', 'uint256']\\n * @dev reveal:         ['address', 'uint256', 'address', 'uint256', 'string']\\n * @dev personalize:    ['address', 'uint256', 'address', 'uint256', 'uint256', 'uint256']\\n * @dev waveMint:       ['address', 'uint256', 'uint256', 'address', 'uint256']\\n */\\nabstract contract NFTCollectionSignature {\\n    enum SignatureType {\\n        Unused,\\n        Mint,\\n        Personalization,\\n        Reveal,\\n        WaveMint\\n    }\\n\\n    /// @custom:storage-location erc7201:thesandbox.storage.avatar.nft-collection.NFTCollectionSignature\\n    struct NFTCollectionSignatureStorage {\\n\\n        /**\\n          * @notice all signatures must come from this specific address, otherwise they are invalid\\n          */\\n        address signAddress;\\n\\n        /**\\n         * @notice map used to mark if a specific signatureId was used\\n         *      values are 0 (default, unused) and 1 (used)\\n         *      Used to avoid a signature reuse\\n         */\\n        mapping(uint256 signatureId => SignatureType signatureType) signatureIds;\\n    }\\n\\n    /**\\n     * @notice Event emitted when the signer address was set or changed\\n     * @dev emitted when setSignAddress is called\\n     * @param operator the sender of the transaction\\n     * @param oldSignAddress old signer address that is allowed to create mint signatures\\n     * @param newSignAddress new signer address that is allowed to create mint signatures\\n     */\\n    event SignAddressSet(address indexed operator, address indexed oldSignAddress, address indexed newSignAddress);\\n\\n    /**\\n     * @notice The operation failed because signature is invalid or it was already used\\n     * @param signatureId the ID of the provided signature\\n     */\\n    error InvalidSignature(uint256 signatureId);\\n\\n    /**\\n     * @notice The operation failed because the signAddress is wrong\\n     * @param signAddress signer address that is allowed to create mint signatures\\n     */\\n    error InvalidSignAddress(address signAddress);\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"thesandbox.storage.avatar.nft-collection.NFTCollectionSignature\\\")) - 1)) & ~bytes32(uint256(0xff));\\n    bytes32 internal constant NFT_COLLECTION_SIGNATURE_STORAGE_LOCATION =\\n    0x40778db7ee4c29e622e04906f2c4ade86f805ca9734a7b64bb0f84f333357900;\\n\\n    function _getNFTCollectionSignatureStorage() private pure returns (NFTCollectionSignatureStorage storage $) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            $.slot := NFT_COLLECTION_SIGNATURE_STORAGE_LOCATION\\n        }\\n    }\\n\\n    /**\\n      * @notice return the address from which all signatures must come from this specific address, otherwise they are invalid\\n      * @return the signer address\\n      */\\n    function signAddress() external view returns (address) {\\n        NFTCollectionSignatureStorage storage $ = _getNFTCollectionSignatureStorage();\\n        return $.signAddress;\\n    }\\n\\n    /**\\n     * @notice returns the type of signature used for a specific Id\\n     * @param signatureId signing signature ID\\n     * @return the type of signature used\\n     */\\n    function getSignatureType(uint256 signatureId) external view returns (SignatureType) {\\n        NFTCollectionSignatureStorage storage $ = _getNFTCollectionSignatureStorage();\\n        return $.signatureIds[signatureId];\\n    }\\n\\n    /**\\n     * @notice updates the sign address.\\n     * @param _signAddress new signer address to be set\\n     */\\n    function _setSignAddress(address _signAddress) internal {\\n        NFTCollectionSignatureStorage storage $ = _getNFTCollectionSignatureStorage();\\n        if (_signAddress == address(0)) {\\n            revert InvalidSignAddress(_signAddress);\\n        }\\n        emit SignAddressSet(_msgSender(), $.signAddress, _signAddress);\\n        $.signAddress = _signAddress;\\n    }\\n\\n    /**\\n     * @notice checks that the provided signature is valid, while also taking into\\n     *         consideration the provided address and signatureId.\\n     * @param wallet address to be used in validating the signature\\n     * @param signatureId signing signature ID\\n     * @param signature signing signature value\\n     */\\n    function _checkAndSetMintSignature(\\n        address wallet,\\n        uint256 signatureId,\\n        bytes calldata signature\\n    ) internal {\\n        NFTCollectionSignatureStorage storage $ = _getNFTCollectionSignatureStorage();\\n        if ($.signatureIds[signatureId] != SignatureType.Unused\\n            || _getMintSignature(wallet, signatureId, address(this), block.chainid, signature) != $.signAddress) {\\n            revert InvalidSignature(signatureId);\\n        }\\n        $.signatureIds[signatureId] = SignatureType.Mint;\\n    }\\n\\n    /**\\n     * @notice checks that the provided signature is valid, while also taking into\\n     *         consideration the provided address and signatureId.\\n     * @param wallet address to be used in validating the signature\\n     * @param waveIndex the index of the wave that is used to mint\\n     * @param signatureId signing signature ID\\n     * @param signature signing signature value\\n     */\\n    function _checkAndSetWaveMintSignature(\\n        address wallet,\\n        uint256 waveIndex,\\n        uint256 signatureId,\\n        bytes calldata signature\\n    ) internal {\\n        NFTCollectionSignatureStorage storage $ = _getNFTCollectionSignatureStorage();\\n        if ($.signatureIds[signatureId] != SignatureType.Unused\\n            || _getWaveMintSignature(wallet, waveIndex, signatureId, address(this), block.chainid, signature) != $.signAddress) {\\n            revert InvalidSignature(signatureId);\\n        }\\n        $.signatureIds[signatureId] = SignatureType.WaveMint;\\n    }\\n\\n    /**\\n     * @notice checks that the provided signature is valid, while also taking into\\n     *         consideration the provided address and signatureId.\\n     * @param wallet address to be used in validating the signature\\n     * @param signatureId signing signature ID\\n     * @param signature signing signature value\\n     */\\n    function _checkAndSetRevealSignature(\\n        address wallet,\\n        uint256 signatureId,\\n        bytes calldata signature\\n    ) internal {\\n        NFTCollectionSignatureStorage storage $ = _getNFTCollectionSignatureStorage();\\n        if ($.signatureIds[signatureId] != SignatureType.Unused\\n            || _getRevealSignature(wallet, signatureId, address(this), block.chainid, signature) != $.signAddress) {\\n            revert InvalidSignature(signatureId);\\n        }\\n        $.signatureIds[signatureId] = SignatureType.Reveal;\\n    }\\n\\n\\n    /**\\n     * @notice checks that the provided personalization signature is valid, while also taking into\\n     *         consideration the provided address and signatureId.\\n     * @param wallet address to be used in validating the signature\\n     * @param signatureId signing signature ID\\n     * @param signature signing signature value\\n     * @param tokenId what token to personalize\\n     * @param personalizationMask a mask where each bit has a custom meaning in-game\\n     */\\n    function _checkAndSetPersonalizationSignature(\\n        address wallet,\\n        uint256 tokenId,\\n        uint256 personalizationMask,\\n        uint256 signatureId,\\n        bytes calldata signature\\n    ) internal {\\n        NFTCollectionSignatureStorage storage $ = _getNFTCollectionSignatureStorage();\\n        if ($.signatureIds[signatureId] != SignatureType.Unused ||\\n            _getPersonalizationSignature(\\n                wallet,\\n                signatureId,\\n                address(this),\\n                block.chainid,\\n                tokenId,\\n                personalizationMask,\\n                signature\\n            ) != $.signAddress) {\\n            revert InvalidSignature(signatureId);\\n        }\\n        $.signatureIds[signatureId] = SignatureType.Personalization;\\n    }\\n\\n\\n    /**\\n     * @notice get the address related to mint the signature\\n     * @param wallet wallet that was used in signature generation\\n     * @param signatureId id of signature\\n     * @param contractAddress contract address that was used in signature generation\\n     * @param chainId chain ID for which the signature was generated\\n     * @param signature signature\\n     * @return address that validates the provided signature\\n     */\\n    function _getMintSignature(\\n        address wallet,\\n        uint256 signatureId,\\n        address contractAddress,\\n        uint256 chainId,\\n        bytes calldata signature\\n    ) internal pure returns (address) {\\n        return\\n        ECDSA.recover(\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                    keccak256(abi.encode(wallet, signatureId, contractAddress, chainId))\\n                )\\n            ),\\n            signature\\n        );\\n    }\\n\\n    /**\\n     * @notice get the address related to the reveal signature\\n     * @param wallet wallet that was used in signature generation\\n     * @param signatureId id of signature\\n     * @param contractAddress contract address that was used in signature generation\\n     * @param chainId chain ID for which the signature was generated\\n     * @param signature signature\\n     * @return address that validates the provided signature\\n     */\\n    function _getRevealSignature(\\n        address wallet,\\n        uint256 signatureId,\\n        address contractAddress,\\n        uint256 chainId,\\n        bytes calldata signature\\n    ) internal pure returns (address) {\\n        /// @dev the string \\\"reveal\\\" is to distinguish it from the minting signature.\\n        return\\n        ECDSA.recover(\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                    keccak256(abi.encode(wallet, signatureId, contractAddress, chainId, \\\"reveal\\\"))\\n                )\\n            ),\\n            signature\\n        );\\n    }\\n\\n    /**\\n     * @notice get the address related to the personalization signature\\n     * @param wallet wallet that was used in signature generation\\n     * @param signatureId id of signature\\n     * @param contractAddress contract address that was used in signature generation\\n     * @param chainId chain ID for which the signature was generated\\n     * @param tokenId token ID for which the signature was generated\\n     * @param personalizationMask a mask where each bit has a custom meaning in-game\\n     * @param signature signature\\n     * @return address that validates the provided signature\\n     */\\n    function _getPersonalizationSignature(\\n        address wallet,\\n        uint256 signatureId,\\n        address contractAddress,\\n        uint256 chainId,\\n        uint256 tokenId,\\n        uint256 personalizationMask,\\n        bytes calldata signature\\n    ) internal pure returns (address) {\\n        return\\n        ECDSA.recover(\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                    keccak256(\\n                        abi.encode(\\n                            wallet,\\n                            signatureId,\\n                            contractAddress,\\n                            chainId,\\n                            tokenId,\\n                            personalizationMask\\n                        )\\n                    )\\n                )\\n            ),\\n            signature\\n        );\\n    }\\n\\n    /**\\n     * @notice get the address related to the wave mint signature\\n     * @param wallet wallet that was used in signature generation\\n     * @param waveIndex the index of the wave that is used to mint\\n     * @param signatureId id of signature\\n     * @param contractAddress contract address that was used in signature generation\\n     * @param chainId chain ID for which the signature was generated\\n     * @param signature signature\\n     * @return address that validates the provided signature\\n     */\\n    function _getWaveMintSignature(\\n        address wallet,\\n        uint256 waveIndex,\\n        uint256 signatureId,\\n        address contractAddress,\\n        uint256 chainId,\\n        bytes calldata signature\\n    ) internal pure returns (address) {\\n        return\\n        ECDSA.recover(\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                    keccak256(\\n                        abi.encode(\\n                            wallet,\\n                            waveIndex,\\n                            signatureId,\\n                            contractAddress,\\n                            chainId\\n                        )\\n                    )\\n                )\\n            ),\\n            signature\\n        );\\n    }\\n\\n    /**\\n     * @notice ERC2771 compatible msg.sender getter\\n     * @return sender msg.sender\\n     */\\n    function _msgSender() internal view virtual returns (address);\\n}\\n\",\"keccak256\":\"0xe843d077d78c4a50e28d99b2197b1dd5fae63aba02883827b39db5335c24f82d\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/avatar/contracts/nft-collection/UpdatableOperatorFiltererUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable one-contract-per-file\\npragma solidity 0.8.26;\\n\\n/**\\n * @title UpdatableOperatorFiltererUpgradeable\\n * @author The Sandbox\\n * @custom:security-contact contact-blockchain@sandbox.game\\n * @notice This contract would subscribe or copy or just to the subscription provided or just register to\\n *          default subscription list\\n * @dev This contract is the upgradeable version of the OpenSea implementation\\n *      https://github.com/ProjectOpenSea/operator-filter-registry/blob/main/src/OperatorFilterer.sol\\n *      and adapted to the 0.5.9 solidity version\\n *      To avoid an extra IOperatorFilterRegistry file for a code that is deprecated the interface is added below\\n */\\nabstract contract UpdatableOperatorFiltererUpgradeable {\\n    /// @custom:storage-location erc7201:thesandbox.storage.avatar.nft-collection.UpdatableOperatorFiltererUpgradeable\\n    struct UpdatableOperatorFiltererUpgradeableStorage {\\n        /**\\n         * @notice the registry filter\\n         */\\n        IOperatorFilterRegistry operatorFilterRegistry;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"thesandbox.storage.avatar.nft-collection.UpdatableOperatorFiltererUpgradeable\\\")) - 1)) & ~bytes32(uint256(0xff));\\n    bytes32 internal constant UPDATABLE_OPERATOR_FILTERER_UPGRADABLE_STORAGE_LOCATION =\\n    0x71a93d37b91262fe5ff5f64b534078b04fa3ca1f04b63abeac7b60ede712e800;\\n\\n    function _getUpdatableOperatorFiltererUpgradeableStorage() private pure returns (UpdatableOperatorFiltererUpgradeableStorage storage $) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            $.slot := UPDATABLE_OPERATOR_FILTERER_UPGRADABLE_STORAGE_LOCATION\\n        }\\n    }\\n\\n    /**\\n     * @notice emitted when a registry is set\\n     * @param operator the sender of the transaction\\n     * @param oldRegistry address of the old registry\\n     * @param newRegistry address of the new registry to set\\n     */\\n    event OperatorRegistrySet(address indexed operator, IOperatorFilterRegistry indexed oldRegistry, address indexed newRegistry);\\n\\n    /**\\n     * @notice emitted when the contract is registered into the registry\\n     * @param operator the sender of the transaction\\n     * @param registry address of the registry to set\\n     * @param subscriptionOrRegistrant address to subscribe or copy entries from\\n     * @param subscribe should it subscribe\\n     */\\n    event ContractRegistered(\\n        address indexed operator,\\n        IOperatorFilterRegistry indexed registry,\\n        address indexed subscriptionOrRegistrant,\\n        bool subscribe\\n    );\\n\\n    /**\\n     * @notice the caller is not the operator\\n     * @param operator that does the call\\n     */\\n    error OperatorNotAllowed(address operator);\\n\\n    /**\\n     * @notice the registry is not configured\\n     * @param operator that does the call\\n     */\\n    error RegistryNotSet(address operator);\\n\\n    /**\\n     * @notice this contract is already registered\\n     * @param operator that does the call\\n     */\\n    error AlreadyRegistered(address operator);\\n\\n    /**\\n     * @notice Used in approval operations to check if the operator is allowed to call this contract\\n     * @param operator The address receiving the approval\\n     */\\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\\n        _checkIsOperatorAllowed(address(this), operator);\\n        _;\\n    }\\n\\n    /**\\n     * @notice Used in transfer from operations to check if the sender of the token is allowed to call this contract\\n     * @param from the sender of the token\\n     */\\n    modifier onlyAllowedOperator(address from) virtual {\\n        // Allow spending tokens from addresses with balance (from == _msgSender())\\n        // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\\n        // from an EOA.\\n        if (from != _msgSender()) {\\n            _checkIsOperatorAllowed(address(this), _msgSender());\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice return the operatorFilterRegistry address\\n     * @return the operatorFilterRegistry address\\n     */\\n    function operatorFilterRegistry() external view returns (IOperatorFilterRegistry) {\\n        UpdatableOperatorFiltererUpgradeableStorage storage $ = _getUpdatableOperatorFiltererUpgradeableStorage();\\n        return $.operatorFilterRegistry;\\n    }\\n\\n    /**\\n     * @notice Register this contract into the registry\\n     * @param subscriptionOrRegistrantToCopy address to subscribe or copy entries from\\n     * @param subscribe should it subscribe\\n     */\\n    function _register(address subscriptionOrRegistrantToCopy, bool subscribe) internal {\\n        UpdatableOperatorFiltererUpgradeableStorage storage $ = _getUpdatableOperatorFiltererUpgradeableStorage();\\n        IOperatorFilterRegistry registry = $.operatorFilterRegistry;\\n        bool isContract = address(registry).code.length > 0;\\n        if (!isContract) {\\n            revert RegistryNotSet(_msgSender());\\n        }\\n        if (registry.isRegistered(address(this))) {\\n            revert AlreadyRegistered(_msgSender());\\n        }\\n\\n        if (subscribe) {\\n            registry.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\\n        } else if (subscriptionOrRegistrantToCopy != address(0)) {\\n            registry.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\\n        } else {\\n            registry.register(address(this));\\n        }\\n        emit ContractRegistered(_msgSender(), registry, subscriptionOrRegistrantToCopy, subscribe);\\n    }\\n\\n    /**\\n     * @notice sets filter registry address deployed in test\\n     * @param registry the address of the registry\\n     * @dev address(0) disables the registry\\n     */\\n    function _setOperatorRegistry(address registry) internal {\\n        UpdatableOperatorFiltererUpgradeableStorage storage $ = _getUpdatableOperatorFiltererUpgradeableStorage();\\n        emit OperatorRegistrySet(_msgSender(), $.operatorFilterRegistry, registry);\\n        $.operatorFilterRegistry = IOperatorFilterRegistry(registry);\\n    }\\n\\n    /**\\n     * @notice Check if the operator is allowed for the given registrant\\n     * @param registrant address of the registrant\\n     * @param operator operator address to check\\n     */\\n    function _checkIsOperatorAllowed(address registrant, address operator) internal view {\\n        UpdatableOperatorFiltererUpgradeableStorage storage $ = _getUpdatableOperatorFiltererUpgradeableStorage();\\n        // Check registry code length to facilitate testing in environments without a deployed registry.\\n        IOperatorFilterRegistry registry = $.operatorFilterRegistry;\\n        if (address(registry).code.length > 0) {\\n            /* solhint-disable no-empty-blocks */\\n            try registry.isOperatorAllowed(registrant, operator) returns (bool retval) {\\n                if (retval) {\\n                    return;\\n                }\\n            } catch (bytes memory) {}\\n            /* solhint-enable  no-empty-blocks */\\n            revert OperatorNotAllowed(operator);\\n        }\\n    }\\n\\n    /**\\n     * @notice ERC2771 compatible msg.sender getter\\n     * @return sender msg.sender\\n     */\\n    function _msgSender() internal view virtual returns (address);\\n}\\n\\n/**\\n * @title IOperatorFilterRegistry\\n * @author Opensea\\n * @custom:security-contact contact-blockchain@sandbox.game\\n * @notice Based on the opensea registry implementation, added here to be used specifically and\\n * @notice just once in UpdatableOperatorFiltererUpgradeable\\n * @dev see: https://github.com/ProjectOpenSea/operator-filter-registry/tree/main\\n */\\ninterface IOperatorFilterRegistry {\\n    /**\\n     * @notice Returns true if an address has registered\\n     * @param addr the address to check if it is registered\\n     * @return true if an address has registered\\n     */\\n    function isRegistered(address addr) external returns (bool);\\n\\n    /**\\n     * @notice Returns true if operator is not filtered for a given token, either by address or codeHash. Also returns\\n     *         true if supplied registrant address is not registered.\\n     * @param registrant the address of the contract to check for (usually address(this))\\n     * @param operator the operator to check if it is registered for this registrant\\n     * @return true if operator is not filtered for a given token\\n     */\\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\\n\\n\\n    /**\\n     * @notice Registers an address with the registry and \\\"subscribes\\\" to another address's filtered operators and codeHashes.\\n     * @param registrant the address of the contract to check for (usually address(this))\\n     * @param subscription address to subscribe to\\n     */\\n    function registerAndSubscribe(address registrant, address subscription) external;\\n\\n    /**\\n     * @notice Registers an address with the registry and copies the filtered operators and codeHashes from another\\n     *         address without subscribing.\\n     * @param registrant the address of the contract to check for (usually address(this))\\n     * @param registrantToCopy address to copy entries from\\n     */\\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\\n\\n    /**\\n     * @notice Registers an address with the registry. May be called by address itself or by EIP-173 owner.\\n     * @param registrant the address of the contract to check for (usually address(this))\\n     */\\n    function register(address registrant) external;\\n}\\n\\n\",\"keccak256\":\"0xe777cd4ca5ffcb02609d894da7aa31a105e5b55e34ac2560e36c68cde9bc4a10\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b506016601a565b60ca565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff161560695760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b039081161460c75780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b61530b806100d96000396000f3fe608060405234801561001057600080fd5b50600436106104275760003560e01c8063731133e91161022b578063ac3149e311610130578063da742228116100b8578063ee437dae11610087578063ee437dae146108d3578063f0f44260146108db578063f2fde38b146108ee578063f3993d1114610901578063fddcb5ea1461091457600080fd5b8063da7422281461089d578063e30c3978146108b0578063e3e35062146108b8578063e985e9c5146108c057600080fd5b8063c763e5a1116100ff578063c763e5a11461086c578063c87b56dd14610872578063d266919914610885578063d547cfb71461088d578063d5abeb011461089557600080fd5b8063ac3149e314610836578063b0ccc31e1461083e578063b88d4fde14610846578063c5a2824e1461085957600080fd5b806397944ba2116101b3578063a22cb46511610182578063a22cb465146107d7578063a6e3ec26146107ea578063a90fe861146107fd578063aac5d69f14610810578063ab01b4691461082357600080fd5b806397944ba21461078957806398603cca1461079c5780639d28fb86146107a4578063a0f9b839146107b757600080fd5b806382bc7877116101fa57806382bc78771461074b5780638456cb591461075e5780638a616bc0146107665780638da5cb5b1461077957806395d89b411461078157600080fd5b8063731133e9146107205780637581a8e61461073357806379ba50971461073b5780637da0a8771461074357600080fd5b806328cfbd46116103315780635375e898116102b95780635c975abb116102885780635c975abb146106c75780636352211e146106df5780636f8b44b0146106f257806370a0823114610705578063715018a61461071857600080fd5b80635375e8981461067b57806355f804b31461068e578063572b6c05146106a15780635944c753146106b457600080fd5b806342842e0e1161030057806342842e0e1461062757806342966c681461063a578063469132ce1461064d57806349c55c5e1461065557806349c95a311461066857600080fd5b806328cfbd46146105c75780632a55205a146105da5780633ee462c21461060c5780633f4ba83a1461061f57600080fd5b80630f0a3e6d116103b457806318160ddd1161038357806318160ddd146105735780631992c3f31461057b5780631c00ff5b1461058e57806323b872dd146105a157806326b3af64146105b457600080fd5b80630f0a3e6d1461052a578063151370451461053d578063179573d314610550578063180b0d7e1461056357600080fd5b806306fdde03116103fb57806306fdde03146104aa57806307ebec27146104bf578063081812fc146104c7578063095ea7b3146104da57806309b45097146104ed57600080fd5b80626cddce1461042c57806301ffc9a71461045257806304634d8d146104755780630682bdbc1461048a575b600080fd5b61043f61043a3660046144a3565b610927565b6040519081526020015b60405180910390f35b6104656104603660046144d2565b61093e565b6040519015158152602001610449565b610488610483366004614520565b610969565b005b6104926109da565b6040516001600160a01b039091168152602001610449565b6104b26109fd565b60405161044991906145a5565b610465610aa1565b6104926104d53660046144a3565b610ab9565b6104886104e83660046145b8565b610ace565b61051d6104fb3660046144a3565b6000908152600080516020615236833981519152602052604090205460ff1690565b60405161044991906145fa565b610488610538366004614614565b610af0565b61048861054b366004614693565b610cd5565b61043f61055e3660046144a3565b610ce9565b6040516127108152602001610449565b61043f610d05565b6104886105893660046146b0565b610d1a565b61048861059c36600461471d565b610ea4565b6104886105af36600461477d565b610f1e565b6104886105c23660046147be565b610f69565b6104886105d5366004614874565b61103a565b6105ed6105e83660046148ee565b61116d565b604080516001600160a01b039093168352602083019190915201610449565b61043f61061a3660046144a3565b61124b565b610488611262565b61048861063536600461477d565b61127c565b6104886106483660046144a3565b611297565b61043f6112a8565b6104886106633660046144a3565b6112bd565b61043f610676366004614910565b611321565b61043f6106893660046144a3565b611352565b61048861069c366004614940565b611366565b6104656106af366004614693565b6113ab565b6104886106c2366004614981565b6113d1565b6000805160206152568339815191525460ff16610465565b6104926106ed3660046144a3565b611440565b6104886107003660046144a3565b61144b565b61043f610713366004614693565b61145c565b6104886114b8565b61048861072e3660046149bf565b6114ca565b6104886115a9565b610488611633565b61049261168c565b610488610759366004614693565b6116a3565b6104886116b4565b6104886107743660046144a3565b6116cc565b610492611742565b6104b261176b565b61043f6107973660046144a3565b6117aa565b6104886117ca565b6104886107b2366004614693565b611850565b6107ca6107c5366004614a0b565b611861565b6040516104499190614a46565b6104886107e5366004614a62565b6118c3565b6104886107f83660046148ee565b6118e0565b61048861080b366004614a90565b611929565b61048861081e3660046144a3565b6119c1565b610488610831366004614a62565b6119d2565b6104926119e4565b610492611a02565b610488610854366004614af8565b611a19565b610488610867366004614bdd565b611a5a565b4661043f565b6104b26108803660046144a3565b611b67565b61043f611bce565b6104b2611be3565b61043f611c00565b6104886108ab366004614693565b611c12565b610492611c23565b610492611c4c565b6104656108ce366004614c18565b611c6a565b610488611cb7565b6104886108e9366004614693565b611d13565b6104886108fc366004614693565b611d24565b61048861090f366004614c46565b611da9565b61043f610922366004614693565b611e98565b60008061093383611ec5565b600101549392505050565b60006001600160e01b03198216632483248360e11b1480610963575061096382611f19565b92915050565b610971611f3e565b816001600160a01b0316610983611f92565b6040516001600160601b03841681526001600160a01b0391909116907f1266dd9a36c3109e9494da97febae6bb0a79426e9c9aaa8763387454373e1f529060200160405180910390a36109d68282611f9c565b5050565b6000806000805160206151d68339815191525b546001600160a01b031692915050565b6000805160206151f68339815191528054606091908190610a1d90614c9e565b80601f0160208091040260200160405190810160405280929190818152602001828054610a4990614c9e565b8015610a965780601f10610a6b57610100808354040283529160200191610a96565b820191906000526020600020905b815481529060010190602001808311610a7957829003601f168201915b505050505091505090565b600080610aac61204d565b6009015460ff1692915050565b6000610ac482612071565b50610963826120a9565b610ad66120e3565b81610ae13082612114565b610aeb838361220c565b505050565b610af86120e3565b610b00611f3e565b6000610b0a61204d565b9050816000819003610b2f57604051631949fde760e01b815260040160405180910390fd5b6004820154600003610b5357604051622dc1c960e71b815260040160405180910390fd5b60005b81811015610ccd5760088301546000868684818110610b7757610b77614cd8565b610b8d9260206040909202019081019150614693565b90506000878785818110610ba357610ba3614cd8565b90506040020160200135905080600003610be257600282828b60405163f75947bd60e01b8152600401610bd99493929190614cee565b60405180910390fd5b85546008870154610bf4908390614d36565b1115610c1c57600682828b60405163f75947bd60e01b8152600401610bd99493929190614cee565b60005b81811015610ca457610c4583610c358387614d36565b610c40906001614d36565b61221e565b6001600160a01b0383167fedfe61821f246e642ef4a67939984404b1f429fe98452fe84992ec60c5b42777610c7a8387614d36565b610c85906001614d36565b60408051918252602082018e90520160405180910390a2600101610c1f565b5080866008016000828254610cb99190614d36565b909155505060019093019250610b56915050565b505050505050565b610cdd611f3e565b610ce681612283565b50565b600080610cf583611ec5565b600201549392505050565b905090565b600080610d1061204d565b6008015492915050565b610d22611f3e565b6000610d2c61204d565b8054909150841180610d3c575083155b80610d45575082155b80610d4f57508383115b15610d77576040516379e57de160e11b81526004810185905260248101849052604401610bd9565b8060010154831115610dac5760018101546040516313adb2a960e11b8152610bd9918591600401918252602082015260400190565b6004810154610db9611f92565b6040805187815260208101879052908101859052606081018390526001600160a01b0391909116907f21e1aa7f400a90a7e77ab0176b81222f0f927b289ef67fabcb30a56da2c506b19060800160405180910390a2600482018054600101808255600082905286919083908110610e3257610e32614cd8565b90600052602060002090600502016000018190555083826004018281548110610e5d57610e5d614cd8565b90600052602060002090600502016001018190555082826004018281548110610e8857610e88614cd8565b9060005260206000209060050201600201819055505050505050565b610eac6120e3565b6000610eb6611f92565b90506000610ec387611440565b9050816001600160a01b0316816001600160a01b031614610efd578187826040516364283d7b60e01b8152600401610bd993929190614d49565b610f0b828888888888612330565b610f1587876123e2565b50505050505050565b610f266120e3565b82610f2f611f92565b6001600160a01b0316816001600160a01b031614610f5857610f5830610f53611f92565b612114565b610f63848484612470565b50505050565b610f716120e3565b610f796124e8565b6000610f8361204d565b6004810154909150600003610faa57604051622dc1c960e71b815260040160405180910390fd5b60058101546001600160a01b0316610fc0611f92565b6001600160a01b031614610ffb57610fd6611f92565b6040516339e3563760e11b81526001600160a01b039091166004820152602401610bd9565b6110088786868686612520565b600061101386611ec5565b9050611021818989896125d0565b5050610ccd600160008051602061527683398151915255565b6110426120e3565b8561104b611f92565b6001600160a01b0316816001600160a01b03161461106f5761106f30610f53611f92565b6001600160a01b03861661109957604051633250574960e11b815260006004820152602401610bd9565b60006110a3611f92565b90508460005b818110156111615760008888838181106110c5576110c5614cd8565b90506020020135905060006110db8b83876127a4565b90508b6001600160a01b0316816001600160a01b031614611115578b82826040516364283d7b60e01b8152600401610bd993929190614d49565b6111578c8c848b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506128ae92505050565b50506001016110a9565b50505050505050505050565b60008281527fdaedc9ab023613a7caf35e703657e986ccfad7e3eb0af93a2853f8d65dd86b01602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b03169282019290925282916000805160206152b6833981519152919061121157506040805180820190915281546001600160a01b0381168252600160a01b90046001600160601b031660208201525b602081015160009061271090611230906001600160601b031688614d6c565b61123a9190614d83565b9151945090925050505b9250929050565b60008061125783611ec5565b600301549392505050565b61126a611f3e565b6112726129d7565b61127a612a07565b565b610aeb83838360405180602001604052806000815250611a19565b61129f6120e3565b610ce681612a6d565b6000806112b361204d565b6001015492915050565b6112c5611f3e565b60006112cf61204d565b600481015490915082106112f557604051622dc1c960e71b815260040160405180910390fd5b600081600401838154811061130c5761130c614cd8565b60009182526020909120600590910201555050565b60008061132d84611ec5565b6001600160a01b03841660009081526004909101602052604090205491505092915050565b60008061135e83611ec5565b549392505050565b61136e611f3e565b6113788282612b02565b604051600019906000907f6bd5c950a8d8df17f772f5af37cb3655737899cbf903264b9795592da439661c908290a35050565b600080516020615216833981519152546000906001600160a01b03808416911614610963565b6113d9611f3e565b816001600160a01b0316836113ec611f92565b6040516001600160601b03851681526001600160a01b0391909116907f80398053543636fe8ebda0b83661b13671543aa7c4ff209b9989e22df937c93f9060200160405180910390a4610aeb838383612b92565b600061096382612071565b611453611f3e565b610ce681612c65565b60006000805160206151f68339815191526001600160a01b038316611497576040516322718ad960e21b815260006004820152602401610bd9565b6001600160a01b039092166000908152600390920160205250604090205490565b6114c0611f3e565b61127a6000612d31565b6114d26120e3565b6114da6124e8565b60006114e461204d565b6004810154909150600081900361150d57604051622dc1c960e71b815260040160405180910390fd5b60058201546001600160a01b0316611523611f92565b6001600160a01b03161461153957610fd6611f92565b61154587868686612d69565b6000611552600183614da5565b9050600083600401828154811061156b5761156b614cd8565b90600052602060002090600502019050611587818a8a856125d0565b505050506115a2600160008051602061527683398151915255565b5050505050565b6115b1611f3e565b60006115bb61204d565b600981015490915060ff16156115e4576040516309877f3560e31b815260040160405180910390fd5b60098101805460ff191660011790556115fb611f92565b6001600160a01b03167f87c17d0e9338ee3c159be69a99891df1590dd083a3777b03bfdb241d41e9d30460405160405180910390a250565b600061163d611f92565b9050806001600160a01b0316611651611c23565b6001600160a01b0316146116835760405163118cdaa760e01b81526001600160a01b0382166004820152602401610bd9565b610ce681612d31565b6000806000805160206152168339815191526109ed565b6116ab611f3e565b610ce681612e1f565b6116bc611f3e565b6116c46120e3565b61127a612ed0565b6116d4611f3e565b806116dd611f92565b6001600160a01b03167fdf2990aaa44e731e41ae9d23d42384a4b75061aa55d335606115b3deb765944c60405160405180910390a360009081527fdaedc9ab023613a7caf35e703657e986ccfad7e3eb0af93a2853f8d65dd86b016020526040812055565b6000807f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c1993006109ed565b7f80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab007930180546060916000805160206151f683398151915291610a1d90614c9e565b6000806117b561204d565b60009384526006016020525050604090205490565b6117d2611f3e565b60006117dc61204d565b600981015490915060ff1661180457604051633f77cf0b60e21b815260040160405180910390fd5b60098101805460ff19169055611818611f92565b6001600160a01b03167fc1258e2781f6fca80c30c40200f57fd8171a2737a63ef1375dea6fae520ede6060405160405180910390a250565b611858611f3e565b610ce681612f1b565b60008061186c61204d565b600481015490915085106118845760019150506118bc565b600081600401868154811061189b5761189b614cd8565b906000526020600020906005020190506118b782828787612f96565b925050505b9392505050565b6118cb6120e3565b816118d63082612114565b610aeb8383613067565b6118e8611f3e565b60006118f383613079565b90506001600160a01b03811661191f57604051637e27328960e01b815260048101849052602401610bd9565b610aeb83836123e2565b6119316120e3565b600061193b611f92565b9050600061194886611440565b9050816001600160a01b0316816001600160a01b031614611982578186826040516364283d7b60e01b8152600401610bd993929190614d49565b61198e828686866130b3565b60405186907ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce790600090a2505050505050565b6119c9611f3e565b610ce681613166565b6119da611f3e565b6109d68282613207565b6000806119ef61204d565b600501546001600160a01b031692915050565b6000806000805160206152968339815191526109ed565b611a216120e3565b83611a2a611f92565b6001600160a01b0316816001600160a01b031614611a4e57611a4e30610f53611f92565b6115a285858585613464565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b0316600081158015611a9f5750825b90506000826001600160401b03166001148015611abb5750303b155b905081158015611ac9575080155b15611ae75760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff191660011785558315611b1157845460ff60401b1916600160401b1785555b611b1a8661347b565b8315610ccd57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a1505050505050565b6060611b7282612071565b506000611b7d611be3565b90506000815111611b9d57604051806020016040528060008152506118bc565b80611ba78461374d565b604051602001611bb8929190614db8565b6040516020818303038152906040529392505050565b600080611bd961204d565b6004015492915050565b60606000611bef61204d565b9050806003018054610a1d90614c9e565b600080611c0b61204d565b5492915050565b611c1a611f3e565b610ce6816137df565b6000807f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c006109ed565b600080611c5761204d565b600201546001600160a01b031692915050565b6001600160a01b0391821660009081527f80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab00793056020908152604080832093909416825291909152205460ff1690565b611cbf611f3e565b611cc7611f92565b6001600160a01b03167f2dfe49916b7d76a5f1ebe1ab9a2618777c34ea6e0ba6c52d9369929a43a4a6de60405160405180910390a261127a60006000805160206152b683398151915255565b611d1b611f3e565b610ce68161385a565b611d2c611f3e565b7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c0080546001600160a01b0319166001600160a01b0383169081178255611d70611742565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a35050565b611db16120e3565b83611dba611f92565b6001600160a01b0316816001600160a01b031614611dde57611dde30610f53611f92565b6001600160a01b038416611e0857604051633250574960e11b815260006004820152602401610bd9565b6000611e12611f92565b90508260005b81811015611e8e576000868683818110611e3457611e34614cd8565b9050602002013590506000611e4a8983876127a4565b9050896001600160a01b0316816001600160a01b031614611e84578982826040516364283d7b60e01b8152600401610bd993929190614d49565b5050600101611e18565b5050505050505050565b600080611ea361204d565b6001600160a01b03909316600090815260079093016020525050604090205490565b600080611ed061204d565b6004810154909150808410611eed57611eea600182614da5565b93505b816004018481548110611f0257611f02614cd8565b906000526020600020906005020192505050919050565b60006001600160e01b0319821663152a902d60e11b148061096357506109638261390a565b611f46611f92565b6001600160a01b0316611f57611742565b6001600160a01b03161461127a57611f6d611f92565b60405163118cdaa760e01b81526001600160a01b039091166004820152602401610bd9565b6000610d0061395a565b6000805160206152b68339815191526127106001600160601b038316811015611fea57604051636f483d0960e01b81526001600160601b038416600482015260248101829052604401610bd9565b6001600160a01b03841661201457604051635b6cc80560e11b815260006004820152602401610bd9565b50604080518082019091526001600160a01b039093168084526001600160601b039092166020909301839052600160a01b909202179055565b7f54137d560768c3c24834e09621a4fafd063f4a5812823197e84bcd3fbaff7d0090565b60008061207d83613079565b90506001600160a01b03811661096357604051637e27328960e01b815260048101849052602401610bd9565b60009081527f80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab007930460205260409020546001600160a01b031690565b6000805160206152568339815191525460ff161561127a5760405163d93c066560e01b815260040160405180910390fd5b60008051602061529683398151915280546001600160a01b0316803b15610f6357604051633185c44d60e21b81526001600160a01b038581166004830152848116602483015282169063c617113490604401602060405180830381865afa92505050801561219f575060408051601f3d908101601f1916820190925261219c91810190614de7565b60015b6121d9573d8080156121cd576040519150601f19603f3d011682016040523d82523d6000602084013e6121d2565b606091505b50506121e8565b80156121e6575050505050565b505b604051633b79c77360e21b81526001600160a01b0384166004820152602401610bd9565b6109d68282612219611f92565b6139c2565b6001600160a01b03821661224857604051633250574960e11b815260006004820152602401610bd9565b6000612256838360006127a4565b90506001600160a01b03811615610aeb576040516339e3563760e11b815260006004820152602401610bd9565b6000805160206151d68339815191526001600160a01b0382166122c45760405163a6ff6cd160e01b81526001600160a01b0383166004820152602401610bd9565b80546001600160a01b0380841691166122db611f92565b6001600160a01b03167f827b059b420f2ae50bebd7002ab386062a31770f2e54269507162880bfb793b960405160405180910390a480546001600160a01b0319166001600160a01b0392909216919091179055565b600083815260008051602061523683398151915260205260408120546000805160206151d6833981519152919060ff166004811115612371576123716145e4565b1415806123a0575080546001600160a01b0316612394888630468b8b8a8a6139cf565b6001600160a01b031614155b156123c157604051630a57f30960e31b815260048101859052602401610bd9565b6000938452600101602052505060409020805460ff19166002179055505050565b60006123ec61204d565b600084815260068201602052604090208390559050818361240b611f92565b6001600160a01b03167f8f5bc4e4444be2e737fe62ea6160f37981fd2ecfcda061928373d882eceaf3fa60405160405180910390a460405183907ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce790600090a2505050565b6001600160a01b03821661249a57604051633250574960e11b815260006004820152602401610bd9565b60006124ae83836124a9611f92565b6127a4565b9050836001600160a01b0316816001600160a01b031614610f63578382826040516364283d7b60e01b8152600401610bd993929190614d49565b60008051602061527683398151915280546001190161251a57604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b600083815260008051602061523683398151915260205260408120546000805160206151d6833981519152919060ff166004811115612561576125616145e4565b14158061258f575080546001600160a01b031661258387878730468989613ab9565b6001600160a01b031614155b156125b057604051630a57f30960e31b815260048101859052602401610bd9565b6000938452600101602052505060409020805460ff191660041790555050565b60006125da61204d565b905060006125ea82878787612f96565b90506000816006811115612600576126006145e4565b14612626578085858560405163f75947bd60e01b8152600401610bd99493929190614cee565b60008487600201546126389190614d6c565b905080156126635760058301546002840154612663916001600160a01b039081169189911684613b04565b60088301546001600160a01b038716600090815260048901602052604081208054889290612692908490614d36565b92505081905550858860030160008282546126ad9190614d36565b92505081905550858460080160008282546126c89190614d36565b90915550506001600160a01b0387166000908152600785016020526040812080548892906126f7908490614d36565b90915550600090505b8681101561278557612726886127168385614d36565b612721906001614d36565b613b5e565b6001600160a01b0388167fedfe61821f246e642ef4a67939984404b1f429fe98452fe84992ec60c5b4277761275b8385614d36565b612766906001614d36565b60408051918252602082018a90520160405180910390a2600101612700565b505050505050505050565b600160008051602061527683398151915255565b60006000805160206151f6833981519152816127bf85613079565b90506001600160a01b038416156127db576127db818587613b78565b6001600160a01b0381161561281b576127f8600086600080613bdc565b6001600160a01b0381166000908152600383016020526040902080546000190190555b6001600160a01b0386161561284c576001600160a01b03861660009081526003830160205260409020805460010190555b600085815260028301602052604080822080546001600160a01b0319166001600160a01b038a811691821790925591518893918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a495945050505050565b6001600160a01b0383163b15610f6357826001600160a01b031663150b7a026128d5611f92565b8685856040518563ffffffff1660e01b81526004016128f79493929190614e04565b6020604051808303816000875af1925050508015612932575060408051601f3d908101601f1916820190925261292f91810190614e41565b60015b61299b573d808015612960576040519150601f19603f3d011682016040523d82523d6000602084013e612965565b606091505b50805160000361299357604051633250574960e11b81526001600160a01b0385166004820152602401610bd9565b805181602001fd5b6001600160e01b03198116630a85bd0160e11b146115a257604051633250574960e11b81526001600160a01b0385166004820152602401610bd9565b6000805160206152568339815191525460ff1661127a57604051638dfc202b60e01b815260040160405180910390fd5b612a0f6129d7565b600080516020615256833981519152805460ff191681557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612a4f611f92565b6040516001600160a01b03909116815260200160405180910390a150565b6000612a7761204d565b600981015490915060ff16612a9f57604051633f77cf0b60e21b815260040160405180910390fd5b6000612aa9611f92565b90506000612ab9600085846127a4565b9050806001600160a01b031684836001600160a01b03167f0fb81ee2634a482264d8193cc9e1703d814cb3f5a1e239dc2580496bf571df7760405160405180910390a450505050565b6000612b0c61204d565b90506000829003612b3457828260405163293f95fd60e21b8152600401610bd9929190614e87565b612b3c611f92565b6001600160a01b03167f0589f6de204c3ac121129f5111ee5b702672a7e80758887b289d4b23a17b743a826003018585604051612b7b93929190614e9b565b60405180910390a260038101610f63838583614f79565b6000805160206152b68339815191526127106001600160601b038316811015612be75760405163dfd1fc1b60e01b8152600481018690526001600160601b038416602482015260448101829052606401610bd9565b6001600160a01b038416612c1857604051634b4f842960e11b81526004810186905260006024820152604401610bd9565b506040805180820182526001600160a01b0394851681526001600160601b03938416602080830191825260009788526001909401909352942093519051909116600160a01b029116179055565b6000612c6f61204d565b905081600003612ca2576008810154604051637c26552b60e01b8152600060048201526024810191909152604401610bd9565b8060080154821015612cd7576008810154604051637c26552b60e01b8152610bd9918491600401918252602082015260400190565b612cdf611f92565b6001600160a01b03167fccc3b7560f9d81f26c619129ba9fa74ded9a6edb555a04655baaeca673e0a809826000015484604051612d26929190918252602082015260400190565b60405180910390a255565b7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c0080546001600160a01b03191681556109d682613cf2565b600083815260008051602061523683398151915260205260408120546000805160206151d6833981519152919060ff166004811115612daa57612daa6145e4565b141580612dd7575080546001600160a01b0316612dcb868630468888613d63565b6001600160a01b031614155b15612df857604051630a57f30960e31b815260048101859052602401610bd9565b600084815260018281016020526040909120805460ff191682805b02179055505050505050565b6000612e2961204d565b90506001600160a01b0382163b612e5e5760405163e5f21c1160e01b81526001600160a01b0383166004820152602401610bd9565b60058101546001600160a01b038084169116612e78611f92565b6001600160a01b03167f5d3eb288d70f5778687463132ce6b9fbf9196273269c75cf04deec982da5b6ef60405160405180910390a460050180546001600160a01b0319166001600160a01b0392909216919091179055565b612ed86120e3565b600080516020615256833981519152805460ff191660011781557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612a4f611f92565b60008051602061529683398151915280546001600160a01b038381169116612f41611f92565b6001600160a01b03167f843ddfc5ccee52d319111d9be8a67a9f91517b207a5242a2faa1cbb10b621fee60405160405180910390a480546001600160a01b0319166001600160a01b0392909216919091179055565b60018401546001600160a01b0383166000908152600786016020526040812054909190612fc4908490614d36565b1115612fd25750600361305f565b81600003612fe25750600261305f565b83546003850154612ff4908490614d36565b11156130025750600461305f565b60018401546001600160a01b038416600090815260048601602052604090205461302d908490614d36565b111561303b5750600561305f565b8454600886015461304d908490614d36565b111561305b5750600661305f565b5060005b949350505050565b6109d6613072611f92565b8383613da6565b60009081527f80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab007930260205260409020546001600160a01b031690565b600083815260008051602061523683398151915260205260408120546000805160206151d6833981519152919060ff1660048111156130f4576130f46145e4565b141580613121575080546001600160a01b0316613115868630468888613e57565b6001600160a01b031614155b1561314257604051630a57f30960e31b815260048101859052602401610bd9565b600084815260018083016020526040909120805460039260ff199091169083612e13565b600061317061204d565b905081158061317f5750805482115b156131aa578054604051632318a67f60e01b8152610bd9918491600401918252602082015260400190565b6131b2611f92565b6001600160a01b03167fed69b973701d6149c56f9e20d02a3f2b5664904a87de656aceb500894a2f04f58260010154846040516131f9929190918252602082015260400190565b60405180910390a260010155565b60008051602061529683398151915280546001600160a01b0316803b15158061325757613232611f92565b60405163f5d5226760e01b81526001600160a01b039091166004820152602401610bd9565b60405163c3c5a54760e01b81523060048201526001600160a01b0383169063c3c5a547906024016020604051808303816000875af115801561329d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132c19190614de7565b156132f3576132ce611f92565b6040516345ed80e960e01b81526001600160a01b039091166004820152602401610bd9565b831561336057604051633e9f1edf60e11b81523060048201526001600160a01b038681166024830152831690637d3e3dbe906044015b600060405180830381600087803b15801561334357600080fd5b505af1158015613357573d6000803e3d6000fd5b505050506133fd565b6001600160a01b038516156133a35760405163a0af290360e01b81523060048201526001600160a01b03868116602483015283169063a0af290390604401613329565b604051632210724360e11b81523060048201526001600160a01b03831690634420e48690602401600060405180830381600087803b1580156133e457600080fd5b505af11580156133f8573d6000803e3d6000fd5b505050505b846001600160a01b0316826001600160a01b0316613419611f92565b6001600160a01b03167f3ff6751845562342150f01f256e77e1a7f0a5c3e49cd1307c5f142062fb2f10587604051613455911515815260200190565b60405180910390a45050505050565b61346f848484610f1e565b610f63848484846128ae565b613483613eac565b6134906040820182615038565b90506000036134c1576134a66040820182615038565b604051637f19f48d60e01b8152600401610bd9929190614e87565b6134ce6060820182615038565b90506000036134ff576134e46060820182615038565b60405163bc7e3f5560e01b8152600401610bd9929190614e87565b613507613ef5565b61351c6135176020830183614693565b613f05565b613524613f16565b61353c61353760e0830160c08401614693565b6137df565b6135c861354c6040830183615038565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061358e925050506060840184615038565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250613f1e92505050565b6135d0613f30565b6135e56135e06020830183615038565b612b02565b6135fd6135f860a0830160808401614693565b61385a565b61361561361060c0830160a08401614693565b612283565b61362e613629610100830160e08401614693565b612e1f565b61363c816101000135612c65565b61364a816101200135613166565b6136576060820182615038565b60405161366592919061507e565b604051809103902081806040019061367d9190615038565b60405161368b92919061507e565b6040519081900390206136a16020840184615038565b6040516136af92919061507e565b6040519081900390207f5d35db76f96b892d6ad10744ed938e685ef7da161e34e163fc21a97feca5b8b76136e960a0860160808701614693565b6136f960c0870160a08801614693565b61370a610100880160e08901614693565b604080516001600160a01b03948516815292841660208401529216818301526101008701356060820152610120870135608082015290519081900360a00190a450565b6060600061375a83613f40565b60010190506000816001600160401b0381111561377957613779614ae2565b6040519080825280601f01601f1916602001820160405280156137a3576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846137ad57509392505050565b60008051602061521683398151915280546001600160a01b038381169116613805611f92565b6001600160a01b03167f8ca022029d8ff7ad974913f8970aeed6c5e0e7eaf494a0c5b262249f6b5759e560405160405180910390a480546001600160a01b0319166001600160a01b0392909216919091179055565b600061386461204d565b90506001600160a01b038216613898576040516312b31bfd60e11b81526001600160a01b0383166004820152602401610bd9565b60028101546001600160a01b0380841691166138b2611f92565b6001600160a01b03167fdaeb4cc3125e2ffb3c047d15e86dbcaac1e656b8d615dcbe28767cd8aac289ad60405160405180910390a460020180546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160e01b031982166380ac58cd60e01b148061393b57506001600160e01b03198216635b5e139f60e01b145b8061096357506301ffc9a760e01b6001600160e01b0319831614610963565b600036816014600080516020615216833981519152549091506001600160a01b03163314801561398a5750808210155b156139ba5760003661399c8385614da5565b6139a792829061508e565b6139b0916150b8565b60601c9250505090565b339250505090565b610aeb8383836001613bdc565b604080516001600160a01b03808b16602083015291810189905290871660608201526080810186905260a0810185905260c08101849052600090613aac9060e0015b60408051601f198184030181529082905280516020918201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000091830191909152603c820152605c016040516020818303038152906040528051906020012084848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061401892505050565b9998505050505050505050565b604080516001600160a01b03808a16602083015291810188905260608101879052908516608082015260a08101849052600090613af89060c001613a11565b98975050505050505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610f63908590614042565b6109d68282604051806020016040528060008152506140a5565b613b838383836140bc565b610aeb576001600160a01b038316613bb157604051637e27328960e01b815260048101829052602401610bd9565b60405163177e802f60e01b81526001600160a01b038316600482015260248101829052604401610bd9565b6000805160206151f68339815191528180613bff57506001600160a01b03831615155b15613cc1576000613c0f85612071565b90506001600160a01b03841615801590613c3b5750836001600160a01b0316816001600160a01b031614155b8015613c4e5750613c4c8185611c6a565b155b15613c775760405163a9fbf51f60e01b81526001600160a01b0385166004820152602401610bd9565b8215613cbf5784866001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b600093845260040160205250506040902080546001600160a01b0319166001600160a01b0392909216919091179055565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b604080516001600160a01b038089166020830152918101879052908516606082015260808101849052600090613d9b9060a001613a11565b979650505050505050565b6000805160206151f68339815191526001600160a01b038316613de757604051630b61174360e31b81526001600160a01b0384166004820152602401610bd9565b6001600160a01b038481166000818152600584016020908152604080832094881680845294825291829020805460ff191687151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a350505050565b604080516001600160a01b03808916602083015291810187905290851660608201526080810184905260a080820152600660c0820152651c995d99585b60d21b60e0820152600090613d9b9061010001613a11565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff1661127a57604051631afcd79f60e31b815260040160405180910390fd5b613efd613eac565b61127a614121565b613f0d613eac565b610ce681614129565b61127a613eac565b613f26613eac565b6109d6828261415b565b613f38613eac565b61127a61418c565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310613f7f5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310613fab576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310613fc957662386f26fc10000830492506010015b6305f5e1008310613fe1576305f5e100830492506008015b6127108310613ff557612710830492506004015b60648310614007576064830492506002015b600a83106109635760010192915050565b60008060008061402886866141ad565b92509250925061403882826141fa565b5090949350505050565b60006140576001600160a01b038416836142b3565b9050805160001415801561407c57508080602001905181019061407a9190614de7565b155b15610aeb57604051635274afe760e01b81526001600160a01b0384166004820152602401610bd9565b6140af838361221e565b610aeb60008484846128ae565b60006001600160a01b0383161580159061305f5750826001600160a01b0316846001600160a01b031614806140f657506140f68484611c6a565b8061305f5750826001600160a01b031661410f836120a9565b6001600160a01b031614949350505050565b612790613eac565b614131613eac565b6001600160a01b03811661168357604051631e4fbdf760e01b815260006004820152602401610bd9565b614163613eac565b6000805160206151f68339815191528061417d84826150fb565b5060018101610f6383826150fb565b614194613eac565b600080516020615256833981519152805460ff19169055565b600080600083516041036141e75760208401516040850151606086015160001a6141d9888285856142c1565b9550955095505050506141f3565b50508151600091506002905b9250925092565b600082600381111561420e5761420e6145e4565b03614217575050565b600182600381111561422b5761422b6145e4565b036142495760405163f645eedf60e01b815260040160405180910390fd5b600282600381111561425d5761425d6145e4565b0361427e5760405163fce698f760e01b815260048101829052602401610bd9565b6003826003811115614292576142926145e4565b036109d6576040516335e2f38360e21b815260048101829052602401610bd9565b60606118bc83836000614390565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08411156142fc5750600091506003905082614386565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015614350573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661437c57506000925060019150829050614386565b9250600091508190505b9450945094915050565b6060814710156143b55760405163cd78605960e01b8152306004820152602401610bd9565b600080856001600160a01b031684866040516143d191906151b9565b60006040518083038185875af1925050503d806000811461440e576040519150601f19603f3d011682016040523d82523d6000602084013e614413565b606091505b50915091506118b78683836060826144335761442e8261447a565b6118bc565b815115801561444a57506001600160a01b0384163b155b1561447357604051639996b31560e01b81526001600160a01b0385166004820152602401610bd9565b50806118bc565b80511561448a5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6000602082840312156144b557600080fd5b5035919050565b6001600160e01b031981168114610ce657600080fd5b6000602082840312156144e457600080fd5b81356118bc816144bc565b6001600160a01b0381168114610ce657600080fd5b80356001600160601b038116811461451b57600080fd5b919050565b6000806040838503121561453357600080fd5b823561453e816144ef565b915061454c60208401614504565b90509250929050565b60005b83811015614570578181015183820152602001614558565b50506000910152565b60008151808452614591816020860160208601614555565b601f01601f19169290920160200192915050565b6020815260006118bc6020830184614579565b600080604083850312156145cb57600080fd5b82356145d6816144ef565b946020939093013593505050565b634e487b7160e01b600052602160045260246000fd5b602081016005831061460e5761460e6145e4565b91905290565b60008060006040848603121561462957600080fd5b8335925060208401356001600160401b0381111561464657600080fd5b8401601f8101861361465757600080fd5b80356001600160401b0381111561466d57600080fd5b8660208260061b840101111561468257600080fd5b939660209190910195509293505050565b6000602082840312156146a557600080fd5b81356118bc816144ef565b6000806000606084860312156146c557600080fd5b505081359360208301359350604090920135919050565b60008083601f8401126146ee57600080fd5b5081356001600160401b0381111561470557600080fd5b60208301915083602082850101111561124457600080fd5b60008060008060006080868803121561473557600080fd5b85359450602086013593506040860135925060608601356001600160401b0381111561476057600080fd5b61476c888289016146dc565b969995985093965092949392505050565b60008060006060848603121561479257600080fd5b833561479d816144ef565b925060208401356147ad816144ef565b929592945050506040919091013590565b60008060008060008060a087890312156147d757600080fd5b86356147e2816144ef565b955060208701359450604087013593506060870135925060808701356001600160401b0381111561481257600080fd5b61481e89828a016146dc565b979a9699509497509295939492505050565b60008083601f84011261484257600080fd5b5081356001600160401b0381111561485957600080fd5b6020830191508360208260051b850101111561124457600080fd5b6000806000806000806080878903121561488d57600080fd5b8635614898816144ef565b955060208701356148a8816144ef565b945060408701356001600160401b038111156148c357600080fd5b6148cf89828a01614830565b90955093505060608701356001600160401b0381111561481257600080fd5b6000806040838503121561490157600080fd5b50508035926020909101359150565b6000806040838503121561492357600080fd5b823591506020830135614935816144ef565b809150509250929050565b6000806020838503121561495357600080fd5b82356001600160401b0381111561496957600080fd5b614975858286016146dc565b90969095509350505050565b60008060006060848603121561499657600080fd5b8335925060208401356149a8816144ef565b91506149b660408501614504565b90509250925092565b6000806000806000608086880312156149d757600080fd5b85356149e2816144ef565b9450602086013593506040860135925060608601356001600160401b0381111561476057600080fd5b600080600060608486031215614a2057600080fd5b8335925060208401356147ad816144ef565b60078110614a4257614a426145e4565b9052565b602081016109638284614a32565b8015158114610ce657600080fd5b60008060408385031215614a7557600080fd5b8235614a80816144ef565b9150602083013561493581614a54565b60008060008060608587031215614aa657600080fd5b843593506020850135925060408501356001600160401b03811115614aca57600080fd5b614ad6878288016146dc565b95989497509550505050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215614b0e57600080fd5b8435614b19816144ef565b93506020850135614b29816144ef565b92506040850135915060608501356001600160401b03811115614b4b57600080fd5b8501601f81018713614b5c57600080fd5b80356001600160401b03811115614b7557614b75614ae2565b604051601f8201601f19908116603f011681016001600160401b0381118282101715614ba357614ba3614ae2565b604052818152828201602001891015614bbb57600080fd5b8160208401602083013760006020838301015280935050505092959194509250565b600060208284031215614bef57600080fd5b81356001600160401b03811115614c0557600080fd5b820161014081850312156118bc57600080fd5b60008060408385031215614c2b57600080fd5b8235614c36816144ef565b91506020830135614935816144ef565b60008060008060608587031215614c5c57600080fd5b8435614c67816144ef565b93506020850135614c77816144ef565b925060408501356001600160401b03811115614c9257600080fd5b614ad687828801614830565b600181811c90821680614cb257607f821691505b602082108103614cd257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b60808101614cfc8287614a32565b6001600160a01b039490941660208201526040810192909252606090910152919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561096357610963614d20565b6001600160a01b0393841681526020810192909252909116604082015260600190565b808202811582820484141761096357610963614d20565b600082614da057634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561096357610963614d20565b60008351614dca818460208801614555565b835190830190614dde818360208801614555565b01949350505050565b600060208284031215614df957600080fd5b81516118bc81614a54565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090614e3790830184614579565b9695505050505050565b600060208284031215614e5357600080fd5b81516118bc816144bc565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60208152600061305f602083018486614e5e565b604081526000808554614ead81614c9e565b8060408601526001821660008114614ecc5760018114614ee857614f1c565b60ff1983166060870152606082151560051b8701019350614f1c565b88600052602060002060005b83811015614f1357815488820160600152600190910190602001614ef4565b87016060019450505b5050508281036020840152614e37818587614e5e565b601f821115610aeb57806000526020600020601f840160051c81016020851015614f595750805b601f840160051c820191505b818110156115a25760008155600101614f65565b6001600160401b03831115614f9057614f90614ae2565b614fa483614f9e8354614c9e565b83614f32565b6000601f841160018114614fd85760008515614fc05750838201355b600019600387901b1c1916600186901b1783556115a2565b600083815260209020601f19861690835b828110156150095786850135825560209485019460019092019101614fe9565b50868210156150265760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b6000808335601e1984360301811261504f57600080fd5b8301803591506001600160401b0382111561506957600080fd5b60200191503681900382131561124457600080fd5b8183823760009101908152919050565b6000808585111561509e57600080fd5b838611156150ab57600080fd5b5050820193919092039150565b80356bffffffffffffffffffffffff1981169060148410156150f4576001600160601b03196001600160601b03198560140360031b1b82161691505b5092915050565b81516001600160401b0381111561511457615114614ae2565b615128816151228454614c9e565b84614f32565b6020601f82116001811461515c57600083156151445750848201515b600019600385901b1c1916600184901b1784556115a2565b600084815260208120601f198516915b8281101561518c578785015182556020948501946001909201910161516c565b50848210156151aa5786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b600082516151cb818460208701614555565b919091019291505056fe40778db7ee4c29e622e04906f2c4ade86f805ca9734a7b64bb0f84f33335790080bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab0079300269c7d123624135714769792dd28ef6db020f837bcb105cea22203ad17aa700040778db7ee4c29e622e04906f2c4ade86f805ca9734a7b64bb0f84f333357901cd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f033009b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0071a93d37b91262fe5ff5f64b534078b04fa3ca1f04b63abeac7b60ede712e800daedc9ab023613a7caf35e703657e986ccfad7e3eb0af93a2853f8d65dd86b00a2646970667358221220680f17a700a1f8c02a8cae266b002963c0b28352ac1f019f6a89857d9dc56cad64736f6c634300081a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106104275760003560e01c8063731133e91161022b578063ac3149e311610130578063da742228116100b8578063ee437dae11610087578063ee437dae146108d3578063f0f44260146108db578063f2fde38b146108ee578063f3993d1114610901578063fddcb5ea1461091457600080fd5b8063da7422281461089d578063e30c3978146108b0578063e3e35062146108b8578063e985e9c5146108c057600080fd5b8063c763e5a1116100ff578063c763e5a11461086c578063c87b56dd14610872578063d266919914610885578063d547cfb71461088d578063d5abeb011461089557600080fd5b8063ac3149e314610836578063b0ccc31e1461083e578063b88d4fde14610846578063c5a2824e1461085957600080fd5b806397944ba2116101b3578063a22cb46511610182578063a22cb465146107d7578063a6e3ec26146107ea578063a90fe861146107fd578063aac5d69f14610810578063ab01b4691461082357600080fd5b806397944ba21461078957806398603cca1461079c5780639d28fb86146107a4578063a0f9b839146107b757600080fd5b806382bc7877116101fa57806382bc78771461074b5780638456cb591461075e5780638a616bc0146107665780638da5cb5b1461077957806395d89b411461078157600080fd5b8063731133e9146107205780637581a8e61461073357806379ba50971461073b5780637da0a8771461074357600080fd5b806328cfbd46116103315780635375e898116102b95780635c975abb116102885780635c975abb146106c75780636352211e146106df5780636f8b44b0146106f257806370a0823114610705578063715018a61461071857600080fd5b80635375e8981461067b57806355f804b31461068e578063572b6c05146106a15780635944c753146106b457600080fd5b806342842e0e1161030057806342842e0e1461062757806342966c681461063a578063469132ce1461064d57806349c55c5e1461065557806349c95a311461066857600080fd5b806328cfbd46146105c75780632a55205a146105da5780633ee462c21461060c5780633f4ba83a1461061f57600080fd5b80630f0a3e6d116103b457806318160ddd1161038357806318160ddd146105735780631992c3f31461057b5780631c00ff5b1461058e57806323b872dd146105a157806326b3af64146105b457600080fd5b80630f0a3e6d1461052a578063151370451461053d578063179573d314610550578063180b0d7e1461056357600080fd5b806306fdde03116103fb57806306fdde03146104aa57806307ebec27146104bf578063081812fc146104c7578063095ea7b3146104da57806309b45097146104ed57600080fd5b80626cddce1461042c57806301ffc9a71461045257806304634d8d146104755780630682bdbc1461048a575b600080fd5b61043f61043a3660046144a3565b610927565b6040519081526020015b60405180910390f35b6104656104603660046144d2565b61093e565b6040519015158152602001610449565b610488610483366004614520565b610969565b005b6104926109da565b6040516001600160a01b039091168152602001610449565b6104b26109fd565b60405161044991906145a5565b610465610aa1565b6104926104d53660046144a3565b610ab9565b6104886104e83660046145b8565b610ace565b61051d6104fb3660046144a3565b6000908152600080516020615236833981519152602052604090205460ff1690565b60405161044991906145fa565b610488610538366004614614565b610af0565b61048861054b366004614693565b610cd5565b61043f61055e3660046144a3565b610ce9565b6040516127108152602001610449565b61043f610d05565b6104886105893660046146b0565b610d1a565b61048861059c36600461471d565b610ea4565b6104886105af36600461477d565b610f1e565b6104886105c23660046147be565b610f69565b6104886105d5366004614874565b61103a565b6105ed6105e83660046148ee565b61116d565b604080516001600160a01b039093168352602083019190915201610449565b61043f61061a3660046144a3565b61124b565b610488611262565b61048861063536600461477d565b61127c565b6104886106483660046144a3565b611297565b61043f6112a8565b6104886106633660046144a3565b6112bd565b61043f610676366004614910565b611321565b61043f6106893660046144a3565b611352565b61048861069c366004614940565b611366565b6104656106af366004614693565b6113ab565b6104886106c2366004614981565b6113d1565b6000805160206152568339815191525460ff16610465565b6104926106ed3660046144a3565b611440565b6104886107003660046144a3565b61144b565b61043f610713366004614693565b61145c565b6104886114b8565b61048861072e3660046149bf565b6114ca565b6104886115a9565b610488611633565b61049261168c565b610488610759366004614693565b6116a3565b6104886116b4565b6104886107743660046144a3565b6116cc565b610492611742565b6104b261176b565b61043f6107973660046144a3565b6117aa565b6104886117ca565b6104886107b2366004614693565b611850565b6107ca6107c5366004614a0b565b611861565b6040516104499190614a46565b6104886107e5366004614a62565b6118c3565b6104886107f83660046148ee565b6118e0565b61048861080b366004614a90565b611929565b61048861081e3660046144a3565b6119c1565b610488610831366004614a62565b6119d2565b6104926119e4565b610492611a02565b610488610854366004614af8565b611a19565b610488610867366004614bdd565b611a5a565b4661043f565b6104b26108803660046144a3565b611b67565b61043f611bce565b6104b2611be3565b61043f611c00565b6104886108ab366004614693565b611c12565b610492611c23565b610492611c4c565b6104656108ce366004614c18565b611c6a565b610488611cb7565b6104886108e9366004614693565b611d13565b6104886108fc366004614693565b611d24565b61048861090f366004614c46565b611da9565b61043f610922366004614693565b611e98565b60008061093383611ec5565b600101549392505050565b60006001600160e01b03198216632483248360e11b1480610963575061096382611f19565b92915050565b610971611f3e565b816001600160a01b0316610983611f92565b6040516001600160601b03841681526001600160a01b0391909116907f1266dd9a36c3109e9494da97febae6bb0a79426e9c9aaa8763387454373e1f529060200160405180910390a36109d68282611f9c565b5050565b6000806000805160206151d68339815191525b546001600160a01b031692915050565b6000805160206151f68339815191528054606091908190610a1d90614c9e565b80601f0160208091040260200160405190810160405280929190818152602001828054610a4990614c9e565b8015610a965780601f10610a6b57610100808354040283529160200191610a96565b820191906000526020600020905b815481529060010190602001808311610a7957829003601f168201915b505050505091505090565b600080610aac61204d565b6009015460ff1692915050565b6000610ac482612071565b50610963826120a9565b610ad66120e3565b81610ae13082612114565b610aeb838361220c565b505050565b610af86120e3565b610b00611f3e565b6000610b0a61204d565b9050816000819003610b2f57604051631949fde760e01b815260040160405180910390fd5b6004820154600003610b5357604051622dc1c960e71b815260040160405180910390fd5b60005b81811015610ccd5760088301546000868684818110610b7757610b77614cd8565b610b8d9260206040909202019081019150614693565b90506000878785818110610ba357610ba3614cd8565b90506040020160200135905080600003610be257600282828b60405163f75947bd60e01b8152600401610bd99493929190614cee565b60405180910390fd5b85546008870154610bf4908390614d36565b1115610c1c57600682828b60405163f75947bd60e01b8152600401610bd99493929190614cee565b60005b81811015610ca457610c4583610c358387614d36565b610c40906001614d36565b61221e565b6001600160a01b0383167fedfe61821f246e642ef4a67939984404b1f429fe98452fe84992ec60c5b42777610c7a8387614d36565b610c85906001614d36565b60408051918252602082018e90520160405180910390a2600101610c1f565b5080866008016000828254610cb99190614d36565b909155505060019093019250610b56915050565b505050505050565b610cdd611f3e565b610ce681612283565b50565b600080610cf583611ec5565b600201549392505050565b905090565b600080610d1061204d565b6008015492915050565b610d22611f3e565b6000610d2c61204d565b8054909150841180610d3c575083155b80610d45575082155b80610d4f57508383115b15610d77576040516379e57de160e11b81526004810185905260248101849052604401610bd9565b8060010154831115610dac5760018101546040516313adb2a960e11b8152610bd9918591600401918252602082015260400190565b6004810154610db9611f92565b6040805187815260208101879052908101859052606081018390526001600160a01b0391909116907f21e1aa7f400a90a7e77ab0176b81222f0f927b289ef67fabcb30a56da2c506b19060800160405180910390a2600482018054600101808255600082905286919083908110610e3257610e32614cd8565b90600052602060002090600502016000018190555083826004018281548110610e5d57610e5d614cd8565b90600052602060002090600502016001018190555082826004018281548110610e8857610e88614cd8565b9060005260206000209060050201600201819055505050505050565b610eac6120e3565b6000610eb6611f92565b90506000610ec387611440565b9050816001600160a01b0316816001600160a01b031614610efd578187826040516364283d7b60e01b8152600401610bd993929190614d49565b610f0b828888888888612330565b610f1587876123e2565b50505050505050565b610f266120e3565b82610f2f611f92565b6001600160a01b0316816001600160a01b031614610f5857610f5830610f53611f92565b612114565b610f63848484612470565b50505050565b610f716120e3565b610f796124e8565b6000610f8361204d565b6004810154909150600003610faa57604051622dc1c960e71b815260040160405180910390fd5b60058101546001600160a01b0316610fc0611f92565b6001600160a01b031614610ffb57610fd6611f92565b6040516339e3563760e11b81526001600160a01b039091166004820152602401610bd9565b6110088786868686612520565b600061101386611ec5565b9050611021818989896125d0565b5050610ccd600160008051602061527683398151915255565b6110426120e3565b8561104b611f92565b6001600160a01b0316816001600160a01b03161461106f5761106f30610f53611f92565b6001600160a01b03861661109957604051633250574960e11b815260006004820152602401610bd9565b60006110a3611f92565b90508460005b818110156111615760008888838181106110c5576110c5614cd8565b90506020020135905060006110db8b83876127a4565b90508b6001600160a01b0316816001600160a01b031614611115578b82826040516364283d7b60e01b8152600401610bd993929190614d49565b6111578c8c848b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506128ae92505050565b50506001016110a9565b50505050505050505050565b60008281527fdaedc9ab023613a7caf35e703657e986ccfad7e3eb0af93a2853f8d65dd86b01602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b03169282019290925282916000805160206152b6833981519152919061121157506040805180820190915281546001600160a01b0381168252600160a01b90046001600160601b031660208201525b602081015160009061271090611230906001600160601b031688614d6c565b61123a9190614d83565b9151945090925050505b9250929050565b60008061125783611ec5565b600301549392505050565b61126a611f3e565b6112726129d7565b61127a612a07565b565b610aeb83838360405180602001604052806000815250611a19565b61129f6120e3565b610ce681612a6d565b6000806112b361204d565b6001015492915050565b6112c5611f3e565b60006112cf61204d565b600481015490915082106112f557604051622dc1c960e71b815260040160405180910390fd5b600081600401838154811061130c5761130c614cd8565b60009182526020909120600590910201555050565b60008061132d84611ec5565b6001600160a01b03841660009081526004909101602052604090205491505092915050565b60008061135e83611ec5565b549392505050565b61136e611f3e565b6113788282612b02565b604051600019906000907f6bd5c950a8d8df17f772f5af37cb3655737899cbf903264b9795592da439661c908290a35050565b600080516020615216833981519152546000906001600160a01b03808416911614610963565b6113d9611f3e565b816001600160a01b0316836113ec611f92565b6040516001600160601b03851681526001600160a01b0391909116907f80398053543636fe8ebda0b83661b13671543aa7c4ff209b9989e22df937c93f9060200160405180910390a4610aeb838383612b92565b600061096382612071565b611453611f3e565b610ce681612c65565b60006000805160206151f68339815191526001600160a01b038316611497576040516322718ad960e21b815260006004820152602401610bd9565b6001600160a01b039092166000908152600390920160205250604090205490565b6114c0611f3e565b61127a6000612d31565b6114d26120e3565b6114da6124e8565b60006114e461204d565b6004810154909150600081900361150d57604051622dc1c960e71b815260040160405180910390fd5b60058201546001600160a01b0316611523611f92565b6001600160a01b03161461153957610fd6611f92565b61154587868686612d69565b6000611552600183614da5565b9050600083600401828154811061156b5761156b614cd8565b90600052602060002090600502019050611587818a8a856125d0565b505050506115a2600160008051602061527683398151915255565b5050505050565b6115b1611f3e565b60006115bb61204d565b600981015490915060ff16156115e4576040516309877f3560e31b815260040160405180910390fd5b60098101805460ff191660011790556115fb611f92565b6001600160a01b03167f87c17d0e9338ee3c159be69a99891df1590dd083a3777b03bfdb241d41e9d30460405160405180910390a250565b600061163d611f92565b9050806001600160a01b0316611651611c23565b6001600160a01b0316146116835760405163118cdaa760e01b81526001600160a01b0382166004820152602401610bd9565b610ce681612d31565b6000806000805160206152168339815191526109ed565b6116ab611f3e565b610ce681612e1f565b6116bc611f3e565b6116c46120e3565b61127a612ed0565b6116d4611f3e565b806116dd611f92565b6001600160a01b03167fdf2990aaa44e731e41ae9d23d42384a4b75061aa55d335606115b3deb765944c60405160405180910390a360009081527fdaedc9ab023613a7caf35e703657e986ccfad7e3eb0af93a2853f8d65dd86b016020526040812055565b6000807f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c1993006109ed565b7f80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab007930180546060916000805160206151f683398151915291610a1d90614c9e565b6000806117b561204d565b60009384526006016020525050604090205490565b6117d2611f3e565b60006117dc61204d565b600981015490915060ff1661180457604051633f77cf0b60e21b815260040160405180910390fd5b60098101805460ff19169055611818611f92565b6001600160a01b03167fc1258e2781f6fca80c30c40200f57fd8171a2737a63ef1375dea6fae520ede6060405160405180910390a250565b611858611f3e565b610ce681612f1b565b60008061186c61204d565b600481015490915085106118845760019150506118bc565b600081600401868154811061189b5761189b614cd8565b906000526020600020906005020190506118b782828787612f96565b925050505b9392505050565b6118cb6120e3565b816118d63082612114565b610aeb8383613067565b6118e8611f3e565b60006118f383613079565b90506001600160a01b03811661191f57604051637e27328960e01b815260048101849052602401610bd9565b610aeb83836123e2565b6119316120e3565b600061193b611f92565b9050600061194886611440565b9050816001600160a01b0316816001600160a01b031614611982578186826040516364283d7b60e01b8152600401610bd993929190614d49565b61198e828686866130b3565b60405186907ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce790600090a2505050505050565b6119c9611f3e565b610ce681613166565b6119da611f3e565b6109d68282613207565b6000806119ef61204d565b600501546001600160a01b031692915050565b6000806000805160206152968339815191526109ed565b611a216120e3565b83611a2a611f92565b6001600160a01b0316816001600160a01b031614611a4e57611a4e30610f53611f92565b6115a285858585613464565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b0316600081158015611a9f5750825b90506000826001600160401b03166001148015611abb5750303b155b905081158015611ac9575080155b15611ae75760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff191660011785558315611b1157845460ff60401b1916600160401b1785555b611b1a8661347b565b8315610ccd57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a1505050505050565b6060611b7282612071565b506000611b7d611be3565b90506000815111611b9d57604051806020016040528060008152506118bc565b80611ba78461374d565b604051602001611bb8929190614db8565b6040516020818303038152906040529392505050565b600080611bd961204d565b6004015492915050565b60606000611bef61204d565b9050806003018054610a1d90614c9e565b600080611c0b61204d565b5492915050565b611c1a611f3e565b610ce6816137df565b6000807f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c006109ed565b600080611c5761204d565b600201546001600160a01b031692915050565b6001600160a01b0391821660009081527f80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab00793056020908152604080832093909416825291909152205460ff1690565b611cbf611f3e565b611cc7611f92565b6001600160a01b03167f2dfe49916b7d76a5f1ebe1ab9a2618777c34ea6e0ba6c52d9369929a43a4a6de60405160405180910390a261127a60006000805160206152b683398151915255565b611d1b611f3e565b610ce68161385a565b611d2c611f3e565b7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c0080546001600160a01b0319166001600160a01b0383169081178255611d70611742565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a35050565b611db16120e3565b83611dba611f92565b6001600160a01b0316816001600160a01b031614611dde57611dde30610f53611f92565b6001600160a01b038416611e0857604051633250574960e11b815260006004820152602401610bd9565b6000611e12611f92565b90508260005b81811015611e8e576000868683818110611e3457611e34614cd8565b9050602002013590506000611e4a8983876127a4565b9050896001600160a01b0316816001600160a01b031614611e84578982826040516364283d7b60e01b8152600401610bd993929190614d49565b5050600101611e18565b5050505050505050565b600080611ea361204d565b6001600160a01b03909316600090815260079093016020525050604090205490565b600080611ed061204d565b6004810154909150808410611eed57611eea600182614da5565b93505b816004018481548110611f0257611f02614cd8565b906000526020600020906005020192505050919050565b60006001600160e01b0319821663152a902d60e11b148061096357506109638261390a565b611f46611f92565b6001600160a01b0316611f57611742565b6001600160a01b03161461127a57611f6d611f92565b60405163118cdaa760e01b81526001600160a01b039091166004820152602401610bd9565b6000610d0061395a565b6000805160206152b68339815191526127106001600160601b038316811015611fea57604051636f483d0960e01b81526001600160601b038416600482015260248101829052604401610bd9565b6001600160a01b03841661201457604051635b6cc80560e11b815260006004820152602401610bd9565b50604080518082019091526001600160a01b039093168084526001600160601b039092166020909301839052600160a01b909202179055565b7f54137d560768c3c24834e09621a4fafd063f4a5812823197e84bcd3fbaff7d0090565b60008061207d83613079565b90506001600160a01b03811661096357604051637e27328960e01b815260048101849052602401610bd9565b60009081527f80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab007930460205260409020546001600160a01b031690565b6000805160206152568339815191525460ff161561127a5760405163d93c066560e01b815260040160405180910390fd5b60008051602061529683398151915280546001600160a01b0316803b15610f6357604051633185c44d60e21b81526001600160a01b038581166004830152848116602483015282169063c617113490604401602060405180830381865afa92505050801561219f575060408051601f3d908101601f1916820190925261219c91810190614de7565b60015b6121d9573d8080156121cd576040519150601f19603f3d011682016040523d82523d6000602084013e6121d2565b606091505b50506121e8565b80156121e6575050505050565b505b604051633b79c77360e21b81526001600160a01b0384166004820152602401610bd9565b6109d68282612219611f92565b6139c2565b6001600160a01b03821661224857604051633250574960e11b815260006004820152602401610bd9565b6000612256838360006127a4565b90506001600160a01b03811615610aeb576040516339e3563760e11b815260006004820152602401610bd9565b6000805160206151d68339815191526001600160a01b0382166122c45760405163a6ff6cd160e01b81526001600160a01b0383166004820152602401610bd9565b80546001600160a01b0380841691166122db611f92565b6001600160a01b03167f827b059b420f2ae50bebd7002ab386062a31770f2e54269507162880bfb793b960405160405180910390a480546001600160a01b0319166001600160a01b0392909216919091179055565b600083815260008051602061523683398151915260205260408120546000805160206151d6833981519152919060ff166004811115612371576123716145e4565b1415806123a0575080546001600160a01b0316612394888630468b8b8a8a6139cf565b6001600160a01b031614155b156123c157604051630a57f30960e31b815260048101859052602401610bd9565b6000938452600101602052505060409020805460ff19166002179055505050565b60006123ec61204d565b600084815260068201602052604090208390559050818361240b611f92565b6001600160a01b03167f8f5bc4e4444be2e737fe62ea6160f37981fd2ecfcda061928373d882eceaf3fa60405160405180910390a460405183907ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce790600090a2505050565b6001600160a01b03821661249a57604051633250574960e11b815260006004820152602401610bd9565b60006124ae83836124a9611f92565b6127a4565b9050836001600160a01b0316816001600160a01b031614610f63578382826040516364283d7b60e01b8152600401610bd993929190614d49565b60008051602061527683398151915280546001190161251a57604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b600083815260008051602061523683398151915260205260408120546000805160206151d6833981519152919060ff166004811115612561576125616145e4565b14158061258f575080546001600160a01b031661258387878730468989613ab9565b6001600160a01b031614155b156125b057604051630a57f30960e31b815260048101859052602401610bd9565b6000938452600101602052505060409020805460ff191660041790555050565b60006125da61204d565b905060006125ea82878787612f96565b90506000816006811115612600576126006145e4565b14612626578085858560405163f75947bd60e01b8152600401610bd99493929190614cee565b60008487600201546126389190614d6c565b905080156126635760058301546002840154612663916001600160a01b039081169189911684613b04565b60088301546001600160a01b038716600090815260048901602052604081208054889290612692908490614d36565b92505081905550858860030160008282546126ad9190614d36565b92505081905550858460080160008282546126c89190614d36565b90915550506001600160a01b0387166000908152600785016020526040812080548892906126f7908490614d36565b90915550600090505b8681101561278557612726886127168385614d36565b612721906001614d36565b613b5e565b6001600160a01b0388167fedfe61821f246e642ef4a67939984404b1f429fe98452fe84992ec60c5b4277761275b8385614d36565b612766906001614d36565b60408051918252602082018a90520160405180910390a2600101612700565b505050505050505050565b600160008051602061527683398151915255565b60006000805160206151f6833981519152816127bf85613079565b90506001600160a01b038416156127db576127db818587613b78565b6001600160a01b0381161561281b576127f8600086600080613bdc565b6001600160a01b0381166000908152600383016020526040902080546000190190555b6001600160a01b0386161561284c576001600160a01b03861660009081526003830160205260409020805460010190555b600085815260028301602052604080822080546001600160a01b0319166001600160a01b038a811691821790925591518893918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a495945050505050565b6001600160a01b0383163b15610f6357826001600160a01b031663150b7a026128d5611f92565b8685856040518563ffffffff1660e01b81526004016128f79493929190614e04565b6020604051808303816000875af1925050508015612932575060408051601f3d908101601f1916820190925261292f91810190614e41565b60015b61299b573d808015612960576040519150601f19603f3d011682016040523d82523d6000602084013e612965565b606091505b50805160000361299357604051633250574960e11b81526001600160a01b0385166004820152602401610bd9565b805181602001fd5b6001600160e01b03198116630a85bd0160e11b146115a257604051633250574960e11b81526001600160a01b0385166004820152602401610bd9565b6000805160206152568339815191525460ff1661127a57604051638dfc202b60e01b815260040160405180910390fd5b612a0f6129d7565b600080516020615256833981519152805460ff191681557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612a4f611f92565b6040516001600160a01b03909116815260200160405180910390a150565b6000612a7761204d565b600981015490915060ff16612a9f57604051633f77cf0b60e21b815260040160405180910390fd5b6000612aa9611f92565b90506000612ab9600085846127a4565b9050806001600160a01b031684836001600160a01b03167f0fb81ee2634a482264d8193cc9e1703d814cb3f5a1e239dc2580496bf571df7760405160405180910390a450505050565b6000612b0c61204d565b90506000829003612b3457828260405163293f95fd60e21b8152600401610bd9929190614e87565b612b3c611f92565b6001600160a01b03167f0589f6de204c3ac121129f5111ee5b702672a7e80758887b289d4b23a17b743a826003018585604051612b7b93929190614e9b565b60405180910390a260038101610f63838583614f79565b6000805160206152b68339815191526127106001600160601b038316811015612be75760405163dfd1fc1b60e01b8152600481018690526001600160601b038416602482015260448101829052606401610bd9565b6001600160a01b038416612c1857604051634b4f842960e11b81526004810186905260006024820152604401610bd9565b506040805180820182526001600160a01b0394851681526001600160601b03938416602080830191825260009788526001909401909352942093519051909116600160a01b029116179055565b6000612c6f61204d565b905081600003612ca2576008810154604051637c26552b60e01b8152600060048201526024810191909152604401610bd9565b8060080154821015612cd7576008810154604051637c26552b60e01b8152610bd9918491600401918252602082015260400190565b612cdf611f92565b6001600160a01b03167fccc3b7560f9d81f26c619129ba9fa74ded9a6edb555a04655baaeca673e0a809826000015484604051612d26929190918252602082015260400190565b60405180910390a255565b7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c0080546001600160a01b03191681556109d682613cf2565b600083815260008051602061523683398151915260205260408120546000805160206151d6833981519152919060ff166004811115612daa57612daa6145e4565b141580612dd7575080546001600160a01b0316612dcb868630468888613d63565b6001600160a01b031614155b15612df857604051630a57f30960e31b815260048101859052602401610bd9565b600084815260018281016020526040909120805460ff191682805b02179055505050505050565b6000612e2961204d565b90506001600160a01b0382163b612e5e5760405163e5f21c1160e01b81526001600160a01b0383166004820152602401610bd9565b60058101546001600160a01b038084169116612e78611f92565b6001600160a01b03167f5d3eb288d70f5778687463132ce6b9fbf9196273269c75cf04deec982da5b6ef60405160405180910390a460050180546001600160a01b0319166001600160a01b0392909216919091179055565b612ed86120e3565b600080516020615256833981519152805460ff191660011781557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612a4f611f92565b60008051602061529683398151915280546001600160a01b038381169116612f41611f92565b6001600160a01b03167f843ddfc5ccee52d319111d9be8a67a9f91517b207a5242a2faa1cbb10b621fee60405160405180910390a480546001600160a01b0319166001600160a01b0392909216919091179055565b60018401546001600160a01b0383166000908152600786016020526040812054909190612fc4908490614d36565b1115612fd25750600361305f565b81600003612fe25750600261305f565b83546003850154612ff4908490614d36565b11156130025750600461305f565b60018401546001600160a01b038416600090815260048601602052604090205461302d908490614d36565b111561303b5750600561305f565b8454600886015461304d908490614d36565b111561305b5750600661305f565b5060005b949350505050565b6109d6613072611f92565b8383613da6565b60009081527f80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab007930260205260409020546001600160a01b031690565b600083815260008051602061523683398151915260205260408120546000805160206151d6833981519152919060ff1660048111156130f4576130f46145e4565b141580613121575080546001600160a01b0316613115868630468888613e57565b6001600160a01b031614155b1561314257604051630a57f30960e31b815260048101859052602401610bd9565b600084815260018083016020526040909120805460039260ff199091169083612e13565b600061317061204d565b905081158061317f5750805482115b156131aa578054604051632318a67f60e01b8152610bd9918491600401918252602082015260400190565b6131b2611f92565b6001600160a01b03167fed69b973701d6149c56f9e20d02a3f2b5664904a87de656aceb500894a2f04f58260010154846040516131f9929190918252602082015260400190565b60405180910390a260010155565b60008051602061529683398151915280546001600160a01b0316803b15158061325757613232611f92565b60405163f5d5226760e01b81526001600160a01b039091166004820152602401610bd9565b60405163c3c5a54760e01b81523060048201526001600160a01b0383169063c3c5a547906024016020604051808303816000875af115801561329d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132c19190614de7565b156132f3576132ce611f92565b6040516345ed80e960e01b81526001600160a01b039091166004820152602401610bd9565b831561336057604051633e9f1edf60e11b81523060048201526001600160a01b038681166024830152831690637d3e3dbe906044015b600060405180830381600087803b15801561334357600080fd5b505af1158015613357573d6000803e3d6000fd5b505050506133fd565b6001600160a01b038516156133a35760405163a0af290360e01b81523060048201526001600160a01b03868116602483015283169063a0af290390604401613329565b604051632210724360e11b81523060048201526001600160a01b03831690634420e48690602401600060405180830381600087803b1580156133e457600080fd5b505af11580156133f8573d6000803e3d6000fd5b505050505b846001600160a01b0316826001600160a01b0316613419611f92565b6001600160a01b03167f3ff6751845562342150f01f256e77e1a7f0a5c3e49cd1307c5f142062fb2f10587604051613455911515815260200190565b60405180910390a45050505050565b61346f848484610f1e565b610f63848484846128ae565b613483613eac565b6134906040820182615038565b90506000036134c1576134a66040820182615038565b604051637f19f48d60e01b8152600401610bd9929190614e87565b6134ce6060820182615038565b90506000036134ff576134e46060820182615038565b60405163bc7e3f5560e01b8152600401610bd9929190614e87565b613507613ef5565b61351c6135176020830183614693565b613f05565b613524613f16565b61353c61353760e0830160c08401614693565b6137df565b6135c861354c6040830183615038565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061358e925050506060840184615038565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250613f1e92505050565b6135d0613f30565b6135e56135e06020830183615038565b612b02565b6135fd6135f860a0830160808401614693565b61385a565b61361561361060c0830160a08401614693565b612283565b61362e613629610100830160e08401614693565b612e1f565b61363c816101000135612c65565b61364a816101200135613166565b6136576060820182615038565b60405161366592919061507e565b604051809103902081806040019061367d9190615038565b60405161368b92919061507e565b6040519081900390206136a16020840184615038565b6040516136af92919061507e565b6040519081900390207f5d35db76f96b892d6ad10744ed938e685ef7da161e34e163fc21a97feca5b8b76136e960a0860160808701614693565b6136f960c0870160a08801614693565b61370a610100880160e08901614693565b604080516001600160a01b03948516815292841660208401529216818301526101008701356060820152610120870135608082015290519081900360a00190a450565b6060600061375a83613f40565b60010190506000816001600160401b0381111561377957613779614ae2565b6040519080825280601f01601f1916602001820160405280156137a3576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846137ad57509392505050565b60008051602061521683398151915280546001600160a01b038381169116613805611f92565b6001600160a01b03167f8ca022029d8ff7ad974913f8970aeed6c5e0e7eaf494a0c5b262249f6b5759e560405160405180910390a480546001600160a01b0319166001600160a01b0392909216919091179055565b600061386461204d565b90506001600160a01b038216613898576040516312b31bfd60e11b81526001600160a01b0383166004820152602401610bd9565b60028101546001600160a01b0380841691166138b2611f92565b6001600160a01b03167fdaeb4cc3125e2ffb3c047d15e86dbcaac1e656b8d615dcbe28767cd8aac289ad60405160405180910390a460020180546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160e01b031982166380ac58cd60e01b148061393b57506001600160e01b03198216635b5e139f60e01b145b8061096357506301ffc9a760e01b6001600160e01b0319831614610963565b600036816014600080516020615216833981519152549091506001600160a01b03163314801561398a5750808210155b156139ba5760003661399c8385614da5565b6139a792829061508e565b6139b0916150b8565b60601c9250505090565b339250505090565b610aeb8383836001613bdc565b604080516001600160a01b03808b16602083015291810189905290871660608201526080810186905260a0810185905260c08101849052600090613aac9060e0015b60408051601f198184030181529082905280516020918201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000091830191909152603c820152605c016040516020818303038152906040528051906020012084848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061401892505050565b9998505050505050505050565b604080516001600160a01b03808a16602083015291810188905260608101879052908516608082015260a08101849052600090613af89060c001613a11565b98975050505050505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610f63908590614042565b6109d68282604051806020016040528060008152506140a5565b613b838383836140bc565b610aeb576001600160a01b038316613bb157604051637e27328960e01b815260048101829052602401610bd9565b60405163177e802f60e01b81526001600160a01b038316600482015260248101829052604401610bd9565b6000805160206151f68339815191528180613bff57506001600160a01b03831615155b15613cc1576000613c0f85612071565b90506001600160a01b03841615801590613c3b5750836001600160a01b0316816001600160a01b031614155b8015613c4e5750613c4c8185611c6a565b155b15613c775760405163a9fbf51f60e01b81526001600160a01b0385166004820152602401610bd9565b8215613cbf5784866001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b600093845260040160205250506040902080546001600160a01b0319166001600160a01b0392909216919091179055565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b604080516001600160a01b038089166020830152918101879052908516606082015260808101849052600090613d9b9060a001613a11565b979650505050505050565b6000805160206151f68339815191526001600160a01b038316613de757604051630b61174360e31b81526001600160a01b0384166004820152602401610bd9565b6001600160a01b038481166000818152600584016020908152604080832094881680845294825291829020805460ff191687151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a350505050565b604080516001600160a01b03808916602083015291810187905290851660608201526080810184905260a080820152600660c0820152651c995d99585b60d21b60e0820152600090613d9b9061010001613a11565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff1661127a57604051631afcd79f60e31b815260040160405180910390fd5b613efd613eac565b61127a614121565b613f0d613eac565b610ce681614129565b61127a613eac565b613f26613eac565b6109d6828261415b565b613f38613eac565b61127a61418c565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310613f7f5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310613fab576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310613fc957662386f26fc10000830492506010015b6305f5e1008310613fe1576305f5e100830492506008015b6127108310613ff557612710830492506004015b60648310614007576064830492506002015b600a83106109635760010192915050565b60008060008061402886866141ad565b92509250925061403882826141fa565b5090949350505050565b60006140576001600160a01b038416836142b3565b9050805160001415801561407c57508080602001905181019061407a9190614de7565b155b15610aeb57604051635274afe760e01b81526001600160a01b0384166004820152602401610bd9565b6140af838361221e565b610aeb60008484846128ae565b60006001600160a01b0383161580159061305f5750826001600160a01b0316846001600160a01b031614806140f657506140f68484611c6a565b8061305f5750826001600160a01b031661410f836120a9565b6001600160a01b031614949350505050565b612790613eac565b614131613eac565b6001600160a01b03811661168357604051631e4fbdf760e01b815260006004820152602401610bd9565b614163613eac565b6000805160206151f68339815191528061417d84826150fb565b5060018101610f6383826150fb565b614194613eac565b600080516020615256833981519152805460ff19169055565b600080600083516041036141e75760208401516040850151606086015160001a6141d9888285856142c1565b9550955095505050506141f3565b50508151600091506002905b9250925092565b600082600381111561420e5761420e6145e4565b03614217575050565b600182600381111561422b5761422b6145e4565b036142495760405163f645eedf60e01b815260040160405180910390fd5b600282600381111561425d5761425d6145e4565b0361427e5760405163fce698f760e01b815260048101829052602401610bd9565b6003826003811115614292576142926145e4565b036109d6576040516335e2f38360e21b815260048101829052602401610bd9565b60606118bc83836000614390565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08411156142fc5750600091506003905082614386565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015614350573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661437c57506000925060019150829050614386565b9250600091508190505b9450945094915050565b6060814710156143b55760405163cd78605960e01b8152306004820152602401610bd9565b600080856001600160a01b031684866040516143d191906151b9565b60006040518083038185875af1925050503d806000811461440e576040519150601f19603f3d011682016040523d82523d6000602084013e614413565b606091505b50915091506118b78683836060826144335761442e8261447a565b6118bc565b815115801561444a57506001600160a01b0384163b155b1561447357604051639996b31560e01b81526001600160a01b0385166004820152602401610bd9565b50806118bc565b80511561448a5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6000602082840312156144b557600080fd5b5035919050565b6001600160e01b031981168114610ce657600080fd5b6000602082840312156144e457600080fd5b81356118bc816144bc565b6001600160a01b0381168114610ce657600080fd5b80356001600160601b038116811461451b57600080fd5b919050565b6000806040838503121561453357600080fd5b823561453e816144ef565b915061454c60208401614504565b90509250929050565b60005b83811015614570578181015183820152602001614558565b50506000910152565b60008151808452614591816020860160208601614555565b601f01601f19169290920160200192915050565b6020815260006118bc6020830184614579565b600080604083850312156145cb57600080fd5b82356145d6816144ef565b946020939093013593505050565b634e487b7160e01b600052602160045260246000fd5b602081016005831061460e5761460e6145e4565b91905290565b60008060006040848603121561462957600080fd5b8335925060208401356001600160401b0381111561464657600080fd5b8401601f8101861361465757600080fd5b80356001600160401b0381111561466d57600080fd5b8660208260061b840101111561468257600080fd5b939660209190910195509293505050565b6000602082840312156146a557600080fd5b81356118bc816144ef565b6000806000606084860312156146c557600080fd5b505081359360208301359350604090920135919050565b60008083601f8401126146ee57600080fd5b5081356001600160401b0381111561470557600080fd5b60208301915083602082850101111561124457600080fd5b60008060008060006080868803121561473557600080fd5b85359450602086013593506040860135925060608601356001600160401b0381111561476057600080fd5b61476c888289016146dc565b969995985093965092949392505050565b60008060006060848603121561479257600080fd5b833561479d816144ef565b925060208401356147ad816144ef565b929592945050506040919091013590565b60008060008060008060a087890312156147d757600080fd5b86356147e2816144ef565b955060208701359450604087013593506060870135925060808701356001600160401b0381111561481257600080fd5b61481e89828a016146dc565b979a9699509497509295939492505050565b60008083601f84011261484257600080fd5b5081356001600160401b0381111561485957600080fd5b6020830191508360208260051b850101111561124457600080fd5b6000806000806000806080878903121561488d57600080fd5b8635614898816144ef565b955060208701356148a8816144ef565b945060408701356001600160401b038111156148c357600080fd5b6148cf89828a01614830565b90955093505060608701356001600160401b0381111561481257600080fd5b6000806040838503121561490157600080fd5b50508035926020909101359150565b6000806040838503121561492357600080fd5b823591506020830135614935816144ef565b809150509250929050565b6000806020838503121561495357600080fd5b82356001600160401b0381111561496957600080fd5b614975858286016146dc565b90969095509350505050565b60008060006060848603121561499657600080fd5b8335925060208401356149a8816144ef565b91506149b660408501614504565b90509250925092565b6000806000806000608086880312156149d757600080fd5b85356149e2816144ef565b9450602086013593506040860135925060608601356001600160401b0381111561476057600080fd5b600080600060608486031215614a2057600080fd5b8335925060208401356147ad816144ef565b60078110614a4257614a426145e4565b9052565b602081016109638284614a32565b8015158114610ce657600080fd5b60008060408385031215614a7557600080fd5b8235614a80816144ef565b9150602083013561493581614a54565b60008060008060608587031215614aa657600080fd5b843593506020850135925060408501356001600160401b03811115614aca57600080fd5b614ad6878288016146dc565b95989497509550505050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215614b0e57600080fd5b8435614b19816144ef565b93506020850135614b29816144ef565b92506040850135915060608501356001600160401b03811115614b4b57600080fd5b8501601f81018713614b5c57600080fd5b80356001600160401b03811115614b7557614b75614ae2565b604051601f8201601f19908116603f011681016001600160401b0381118282101715614ba357614ba3614ae2565b604052818152828201602001891015614bbb57600080fd5b8160208401602083013760006020838301015280935050505092959194509250565b600060208284031215614bef57600080fd5b81356001600160401b03811115614c0557600080fd5b820161014081850312156118bc57600080fd5b60008060408385031215614c2b57600080fd5b8235614c36816144ef565b91506020830135614935816144ef565b60008060008060608587031215614c5c57600080fd5b8435614c67816144ef565b93506020850135614c77816144ef565b925060408501356001600160401b03811115614c9257600080fd5b614ad687828801614830565b600181811c90821680614cb257607f821691505b602082108103614cd257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b60808101614cfc8287614a32565b6001600160a01b039490941660208201526040810192909252606090910152919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561096357610963614d20565b6001600160a01b0393841681526020810192909252909116604082015260600190565b808202811582820484141761096357610963614d20565b600082614da057634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561096357610963614d20565b60008351614dca818460208801614555565b835190830190614dde818360208801614555565b01949350505050565b600060208284031215614df957600080fd5b81516118bc81614a54565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090614e3790830184614579565b9695505050505050565b600060208284031215614e5357600080fd5b81516118bc816144bc565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60208152600061305f602083018486614e5e565b604081526000808554614ead81614c9e565b8060408601526001821660008114614ecc5760018114614ee857614f1c565b60ff1983166060870152606082151560051b8701019350614f1c565b88600052602060002060005b83811015614f1357815488820160600152600190910190602001614ef4565b87016060019450505b5050508281036020840152614e37818587614e5e565b601f821115610aeb57806000526020600020601f840160051c81016020851015614f595750805b601f840160051c820191505b818110156115a25760008155600101614f65565b6001600160401b03831115614f9057614f90614ae2565b614fa483614f9e8354614c9e565b83614f32565b6000601f841160018114614fd85760008515614fc05750838201355b600019600387901b1c1916600186901b1783556115a2565b600083815260209020601f19861690835b828110156150095786850135825560209485019460019092019101614fe9565b50868210156150265760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b6000808335601e1984360301811261504f57600080fd5b8301803591506001600160401b0382111561506957600080fd5b60200191503681900382131561124457600080fd5b8183823760009101908152919050565b6000808585111561509e57600080fd5b838611156150ab57600080fd5b5050820193919092039150565b80356bffffffffffffffffffffffff1981169060148410156150f4576001600160601b03196001600160601b03198560140360031b1b82161691505b5092915050565b81516001600160401b0381111561511457615114614ae2565b615128816151228454614c9e565b84614f32565b6020601f82116001811461515c57600083156151445750848201515b600019600385901b1c1916600184901b1784556115a2565b600084815260208120601f198516915b8281101561518c578785015182556020948501946001909201910161516c565b50848210156151aa5786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b600082516151cb818460208701614555565b919091019291505056fe40778db7ee4c29e622e04906f2c4ade86f805ca9734a7b64bb0f84f33335790080bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab0079300269c7d123624135714769792dd28ef6db020f837bcb105cea22203ad17aa700040778db7ee4c29e622e04906f2c4ade86f805ca9734a7b64bb0f84f333357901cd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f033009b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0071a93d37b91262fe5ff5f64b534078b04fa3ca1f04b63abeac7b60ede712e800daedc9ab023613a7caf35e703657e986ccfad7e3eb0af93a2853f8d65dd86b00a2646970667358221220680f17a700a1f8c02a8cae266b002963c0b28352ac1f019f6a89857d9dc56cad64736f6c634300081a0033",
  "devdoc": {
    "author": "The Sandbox",
    "custom:security-contact": "contact-blockchain@sandbox.game",
    "details": "Implements the following features: - Upgradeable proxy pattern - Two-step ownership transfer - OpenSea and ERC2981 royalty standards - ERC4906 metadata update notifications - ERC165 interface detection - ERC2771 meta-transaction support - Burn tracking for game access control - ERC20-based minting with approveAndCall pattern - Batch minting and transfer operations",
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "AlreadyRegistered(address)": [
        {
          "params": {
            "operator": "that does the call"
          }
        }
      ],
      "CannotMint(uint8,address,uint256,uint256)": [
        {
          "params": {
            "amount": "amount to be checked if can be minted",
            "reason": "the reason for the denial",
            "wallet": "wallet to be checked if it can mint",
            "waveIndex": "the current wave index"
          }
        }
      ],
      "ECDSAInvalidSignature()": [
        {
          "details": "The signature derives the `address(0)`."
        }
      ],
      "ECDSAInvalidSignatureLength(uint256)": [
        {
          "details": "The signature has an invalid length."
        }
      ],
      "ECDSAInvalidSignatureS(bytes32)": [
        {
          "details": "The signature has an S value that is in the upper half order."
        }
      ],
      "ERC2981InvalidDefaultRoyalty(uint256,uint256)": [
        {
          "details": "The default royalty set is invalid (eg. (numerator / denominator) >= 1)."
        }
      ],
      "ERC2981InvalidDefaultRoyaltyReceiver(address)": [
        {
          "details": "The default royalty receiver is invalid."
        }
      ],
      "ERC2981InvalidTokenRoyalty(uint256,uint256,uint256)": [
        {
          "details": "The royalty set for an specific `tokenId` is invalid (eg. (numerator / denominator) >= 1)."
        }
      ],
      "ERC2981InvalidTokenRoyaltyReceiver(uint256,address)": [
        {
          "details": "The royalty receiver for `tokenId` is invalid."
        }
      ],
      "ERC721IncorrectOwner(address,uint256,address)": [
        {
          "details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
          "params": {
            "owner": "Address of the current owner of a token.",
            "sender": "Address whose tokens are being transferred.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC721InsufficientApproval(address,uint256)": [
        {
          "details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC721InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC721InvalidOperator(address)": [
        {
          "details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC721InvalidOwner(address)": [
        {
          "details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.",
          "params": {
            "owner": "Address of the current owner of a token."
          }
        }
      ],
      "ERC721InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC721InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC721NonexistentToken(uint256)": [
        {
          "details": "Indicates a `tokenId` whose `owner` is the zero address.",
          "params": {
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidAllowedToExecuteMint(address)": [
        {
          "params": {
            "allowedToExecuteMint": "token address that is used for payments and that is allowed to execute mint"
          }
        }
      ],
      "InvalidBaseTokenURI(string)": [
        {
          "params": {
            "baseURI": "an URI that will be used as the base for token URI"
          }
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "InvalidMaxTokensPerWallet(uint256,uint256)": [
        {
          "params": {
            "maxTokensPerWallet": "max tokens per wallet"
          }
        }
      ],
      "InvalidName(string)": [
        {
          "params": {
            "name": "name of the ERC721 token"
          }
        }
      ],
      "InvalidSignAddress(address)": [
        {
          "params": {
            "signAddress": "signer address that is allowed to create mint signatures"
          }
        }
      ],
      "InvalidSignature(uint256)": [
        {
          "params": {
            "signatureId": "the ID of the provided signature"
          }
        }
      ],
      "InvalidSymbol(string)": [
        {
          "params": {
            "symbol": "token symbol of the ERC721 token"
          }
        }
      ],
      "InvalidTreasury(address)": [
        {
          "params": {
            "mintTreasury": "collection treasury address (where the payments are sent)"
          }
        }
      ],
      "InvalidWaveData(uint256,uint256)": [
        {
          "params": {
            "waveMaxTokensOverall": "the allowed number of tokens to be minted in this wave (cumulative by all minting wallets)",
            "waveMaxTokensPerWallet": "max tokens to buy, per wallet in a given wave"
          }
        }
      ],
      "LowMaxSupply(uint256,uint256)": [
        {
          "params": {
            "maxSupply": "max supply of tokens to be allowed to be minted per contract",
            "totalSupply": "amount of tokens minted till now"
          }
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OperatorNotAllowed(address)": [
        {
          "params": {
            "operator": "that does the call"
          }
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "RegistryNotSet(address)": [
        {
          "params": {
            "operator": "that does the call"
          }
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ],
      "WaveMaxTokensHigherThanGlobalMax(uint256,uint256)": [
        {
          "params": {
            "maxTokensPerWallet": "global max tokens per wallet",
            "waveMaxTokensPerWallet": "wave max tokens per wallet"
          }
        }
      ]
    },
    "events": {
      "AllowedExecuteMintSet(address,address,address)": {
        "details": "emitted when setAllowedExecuteMint is called",
        "params": {
          "newToken": "new address that is used for payments and that is allowed to execute mint",
          "oldToken": "old address that is used for payments and that is allowed to execute mint",
          "operator": "the sender of the transaction"
        }
      },
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "BaseURISet(address,string,string)": {
        "details": "emitted when setBaseURI is called",
        "params": {
          "newBaseURI": "new URI that will be used as the base for token metadata URI",
          "oldBaseURI": "old URI that will be used as the base for token metadata URI",
          "operator": "the sender of the transaction"
        }
      },
      "BatchMetadataUpdate(uint256,uint256)": {
        "details": "This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs."
      },
      "ContractInitialized(string,string,string,address,address,address,uint256,uint256)": {
        "details": "emitted at proxy startup, only once",
        "params": {
          "allowedToExecuteMint": "token address that is used for payments and that is allowed to execute mint",
          "baseURI": "an URI that will be used as the base for token URI",
          "maxSupply": "max supply of tokens to be allowed to be minted per contract",
          "maxTokensPerWallet": "maximum amount of tokens that can be minted per wallet across all waves",
          "mintTreasury": "collection treasury address (where the payments are sent)",
          "name": "name of the ERC721 token",
          "signAddress": "signer address that is allowed to create mint signatures",
          "symbol": "token symbol of the ERC721 token"
        }
      },
      "ContractRegistered(address,address,address,bool)": {
        "params": {
          "operator": "the sender of the transaction",
          "registry": "address of the registry to set",
          "subscribe": "should it subscribe",
          "subscriptionOrRegistrant": "address to subscribe or copy entries from"
        }
      },
      "DefaultRoyaltyReset(address)": {
        "params": {
          "operator": "the sender of the transaction"
        }
      },
      "DefaultRoyaltySet(address,address,uint96)": {
        "params": {
          "feeNumerator": "percentage of the royalties in feeDenominator units",
          "operator": "the sender of the transaction",
          "receiver": "the receiver of the royalties"
        }
      },
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "MaxSupplySet(address,uint256,uint256)": {
        "details": "emitted when setSignAddress is called",
        "params": {
          "newMaxSupply": "new maximum amount of tokens that can be minted",
          "oldMaxSupply": "old maximum amount of tokens that can be minted",
          "operator": "the sender of the transaction"
        }
      },
      "MaxTokensPerWalletSet(address,uint256,uint256)": {
        "params": {
          "newMaxTokensPerWallet": "new maximum tokens per wallet",
          "oldMaxTokensPerWallet": "old maximum tokens per wallet",
          "operator": "the sender of the transaction"
        }
      },
      "MetadataUpdate(uint256)": {
        "details": "This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT."
      },
      "OperatorRegistrySet(address,address,address)": {
        "params": {
          "newRegistry": "address of the new registry to set",
          "oldRegistry": "address of the old registry",
          "operator": "the sender of the transaction"
        }
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Personalized(address,uint256,uint256)": {
        "details": "emitted when personalize is called",
        "params": {
          "operator": "the sender of the transaction",
          "personalizationMask": "the exact personalization that was done, as a custom meaning bit-mask",
          "tokenId": "id of the token which had the personalization done"
        }
      },
      "SignAddressSet(address,address,address)": {
        "details": "emitted when setSignAddress is called",
        "params": {
          "newSignAddress": "new signer address that is allowed to create mint signatures",
          "oldSignAddress": "old signer address that is allowed to create mint signatures",
          "operator": "the sender of the transaction"
        }
      },
      "TokenBurned(address,uint256,address)": {
        "params": {
          "burner": "the owner that burned the token",
          "operator": "the sender of the transaction",
          "tokenId": "the id of the token that was burned"
        }
      },
      "TokenBurningDisabled(address)": {
        "params": {
          "operator": "the sender of the transaction"
        }
      },
      "TokenBurningEnabled(address)": {
        "params": {
          "operator": "the sender of the transaction"
        }
      },
      "TokenRoyaltyReset(address,uint256)": {
        "params": {
          "operator": "the sender of the transaction",
          "tokenId": "the token id"
        }
      },
      "TokenRoyaltySet(address,uint256,address,uint96)": {
        "params": {
          "feeNumerator": "percentage of the royalties in feeDenominator units",
          "operator": "the sender of the transaction",
          "receiver": "the receiver of the royalties",
          "tokenId": "the token id"
        }
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      },
      "TreasurySet(address,address,address)": {
        "details": "emitted when setTreasury is called",
        "params": {
          "newTreasury": "new collection treasury address (where the payments are sent)",
          "oldTreasury": "old collection treasury address (where the payments are sent)",
          "operator": "the sender of the transaction"
        }
      },
      "TrustedForwarderSet(address,address,address)": {
        "params": {
          "newForwarder": "the new trusted forwarder address",
          "oldForwarder": "the old trusted forwarder address",
          "operator": "the sender of the transaction"
        }
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      },
      "WaveMint(uint256,address,uint256)": {
        "params": {
          "tokenId": "the token id",
          "wallet": "the wallet address of the receiver",
          "waveIndex": "the wave index"
        }
      },
      "WaveSetup(address,uint256,uint256,uint256,uint256)": {
        "details": "emitted when setupWave is called",
        "params": {
          "operator": "the sender of the transaction",
          "waveIndex": "the current wave index",
          "waveMaxTokens": "the allowed number of tokens to be minted in this wave (cumulative by all minting wallets)",
          "waveMaxTokensToBuy": "max tokens to buy, per wallet in a given wave",
          "waveSingleTokenPrice": "the price to mint a token in a given wave, in wei"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "allowedToExecuteMint()": {
        "returns": {
          "_0": "Address of the payment token contract."
        }
      },
      "approve(address,uint256)": {
        "details": "Overrides ERC721 implementation to add operator filtering.",
        "params": {
          "operator": "Address to grant approval to.",
          "tokenId": "ID of token to approve."
        }
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "baseTokenURI()": {
        "returns": {
          "_0": "Base URI string."
        }
      },
      "batchMint(uint256,(address,uint256)[])": {
        "details": "Owner-only function for airdrops. Bypasses wave restrictions but respects maxSupply.",
        "params": {
          "wallets": "Array of recipient addresses and mint amounts.",
          "waveIndex": "Index of the wave configuration to use."
        }
      },
      "batchTransferFrom(address,address,uint256[])": {
        "details": "Requires approval or ownership. Does not verify receiver compatibility.",
        "params": {
          "from": "Source address.",
          "ids": "Array of token IDs to transfer.",
          "to": "Destination address."
        }
      },
      "burn(uint256)": {
        "details": "Requires burning to be enabled. Caller must own or be approved for token.",
        "params": {
          "tokenId": "ID of the token to burn."
        }
      },
      "cancelWave(uint256)": {
        "details": "Cannot cancel the most recent wave to prevent disruption of mint function.",
        "params": {
          "waveIndex": "Index of the wave to cancel."
        }
      },
      "chain()": {
        "returns": {
          "_0": "Current blockchain network ID."
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "disableBurning()": {
        "details": "Reverts if burning is already disabled. Only callable by owner."
      },
      "enableBurning()": {
        "details": "Reverts if burning is already enabled. Only callable by owner."
      },
      "feeDenominator()": {
        "details": "Used in conjunction with royalty fee numerator.",
        "returns": {
          "_0": "Fee denominator value (10000 for basis points)."
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getSignatureType(uint256)": {
        "params": {
          "signatureId": "signing signature ID"
        },
        "returns": {
          "_0": "the type of signature used"
        }
      },
      "initialize((address,string,string,string,address,address,address,address,uint256,uint256))": {
        "details": "External initialization entry point following the upgradeable pattern.",
        "params": {
          "params": "Struct containing all initialization parameters, see InitializationParams for details."
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "isBurnEnabled()": {
        "returns": {
          "_0": "True if token burning is enabled."
        }
      },
      "isMintDenied(uint256,address,uint256)": {
        "params": {
          "amount": "Number of tokens to check.",
          "wallet": "Address to check.",
          "waveIndex": "Wave configuration index."
        },
        "returns": {
          "_0": "Reason code indicating mint permission status."
        }
      },
      "isTrustedForwarder(address)": {
        "params": {
          "forwarder": "the address ot the trusted forwarder to check"
        },
        "returns": {
          "_0": "true if forwarder is the trusted forwarder address"
        }
      },
      "maxSupply()": {
        "returns": {
          "_0": "Maximum number of tokens that can be minted."
        }
      },
      "maxTokensPerWallet()": {
        "returns": {
          "_0": "Maximum tokens allowed per wallet across all waves."
        }
      },
      "mint(address,uint256,uint256,bytes)": {
        "details": "Only callable by allowedToExecuteMint contract. Uses the most recent wave configuration.",
        "params": {
          "amount": "Number of tokens to mint.",
          "signature": "Cryptographic signature authorizing the mint.",
          "signatureId": "Unique identifier for the minting signature.",
          "wallet": "Address receiving the minted tokens."
        }
      },
      "mintTreasury()": {
        "returns": {
          "_0": "Address receiving minting payments."
        }
      },
      "mintedCount(address)": {
        "params": {
          "wallet": "Address to query."
        },
        "returns": {
          "_0": "Number of tokens minted by the address."
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "operatorFilterRegistry()": {
        "returns": {
          "_0": "the operatorFilterRegistry address"
        }
      },
      "operatorPersonalize(uint256,uint256)": {
        "details": "Owner-only function for game-driven trait updates.",
        "params": {
          "personalizationMask": "Bit mask encoding trait configurations.",
          "tokenId": "ID of the token to personalize."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "pause()": {
        "details": "Reverts if contract is already paused. Only callable by owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "personalizationOf(uint256)": {
        "params": {
          "tokenId": "Token ID to query."
        },
        "returns": {
          "_0": "Bit mask of token's personalization traits."
        }
      },
      "personalize(uint256,uint256,uint256,bytes)": {
        "details": "Caller must be token owner. Emits MetadataUpdate event.",
        "params": {
          "personalizationMask": "Bit mask encoding trait configurations.",
          "signature": "Cryptographic signature authorizing the personalization.",
          "signatureId": "Unique identifier for the personalization signature.",
          "tokenId": "ID of the token to personalize."
        }
      },
      "register(address,bool)": {
        "details": "Pass address(0) to register without subscription. Only callable by owner.",
        "params": {
          "subscribe": "True to subscribe, false to copy the list.",
          "subscriptionOrRegistrantToCopy": "Address to copy or subscribe to."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "resetDefaultRoyalty()": {
        "details": "Only callable by owner."
      },
      "resetTokenRoyalty(uint256)": {
        "details": "Returns token to default royalty configuration. Only callable by owner.",
        "params": {
          "tokenId": "Token ID to reset."
        }
      },
      "reveal(uint256,uint256,bytes)": {
        "details": "Emits MetadataUpdate for marketplace integration. Caller must be token owner.",
        "params": {
          "signature": "Cryptographic signature authorizing the reveal.",
          "signatureId": "Unique identifier for the reveal signature.",
          "tokenId": "ID of the token to refresh."
        }
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."
      },
      "safeBatchTransferFrom(address,address,uint256[],bytes)": {
        "details": "Verifies receiver contract compatibility. Requires approval or ownership.",
        "params": {
          "data": "Additional data for receiver callback.",
          "from": "Source address.",
          "ids": "Array of token IDs to transfer.",
          "to": "Destination address."
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Overrides ERC721 implementation to add operator filtering.",
        "params": {
          "data": "Additional data for receiver callback.",
          "from": "Source address.",
          "to": "Destination address.",
          "tokenId": "ID of token to transfer."
        }
      },
      "setAllowedExecuteMint(address)": {
        "details": "Must be a valid contract address. Only callable by owner.",
        "params": {
          "minterToken": "Address of the ERC20 token contract."
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Overrides ERC721 implementation to add operator filtering.",
        "params": {
          "approved": "True to approve, false to revoke.",
          "operator": "Address to grant approval to."
        }
      },
      "setBaseURI(string)": {
        "details": "Emits BatchMetadataUpdate for the entire collection. Only callable by owner.",
        "params": {
          "baseURI": "New base URI string."
        }
      },
      "setDefaultRoyalty(address,uint96)": {
        "details": "Only callable by owner.",
        "params": {
          "feeNumerator": "Royalty fee in basis points.",
          "receiver": "Royalty recipient address."
        }
      },
      "setMaxSupply(uint256)": {
        "details": "Must be greater than current supply. Only callable by owner.",
        "params": {
          "_maxSupply": "New maximum token supply."
        }
      },
      "setMaxTokensPerWallet(uint256)": {
        "details": "Must be greater than zero and less than maxSupply. Only callable by owner.",
        "params": {
          "_maxTokensPerWallet": "New maximum tokens per wallet."
        }
      },
      "setOperatorRegistry(address)": {
        "details": "Used for marketplace filtering. Only callable by owner.",
        "params": {
          "registry": "Address of the registry contract."
        }
      },
      "setSignAddress(address)": {
        "details": "Only callable by owner.",
        "params": {
          "_signAddress": "New signer address."
        }
      },
      "setTokenRoyalty(uint256,address,uint96)": {
        "details": "Overrides default royalty for the specified token. Only callable by owner.",
        "params": {
          "feeNumerator": "Royalty fee in basis points.",
          "receiver": "Royalty recipient address.",
          "tokenId": "Token ID to configure."
        }
      },
      "setTreasury(address)": {
        "details": "Reverts if treasury address is zero. Only callable by owner.",
        "params": {
          "treasury": "New treasury address."
        }
      },
      "setTrustedForwarder(address)": {
        "details": "Set to address(0) to disable meta-transactions. Only callable by owner.",
        "params": {
          "forwarder": "New forwarder address."
        }
      },
      "setupWave(uint256,uint256,uint256)": {
        "details": "Validates wave parameters against global limits and current supply.",
        "params": {
          "_waveMaxTokensOverall": "Maximum tokens that can be minted in this wave.",
          "_waveMaxTokensPerWallet": "Maximum tokens per wallet for this wave.",
          "_waveSingleTokenPrice": "Price per token in wave, denominated in allowedToExecuteMint token."
        }
      },
      "signAddress()": {
        "returns": {
          "_0": "the signer address"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Adds support for ERC4906 interface.",
        "params": {
          "interfaceId": "Interface identifier to check."
        },
        "returns": {
          "_0": "True if interface is supported."
        }
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "returns": {
          "_0": "Current number of minted tokens."
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Overrides ERC721 implementation to add operator filtering.",
        "params": {
          "from": "Source address.",
          "to": "Destination address.",
          "tokenId": "ID of token to transfer."
        }
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      },
      "trustedForwarder()": {
        "returns": {
          "_0": "the trusted forwarder address"
        }
      },
      "unpause()": {
        "details": "Reverts if contract is not paused. Only callable by owner."
      },
      "waveCount()": {
        "returns": {
          "_0": "Number of minting waves configured."
        }
      },
      "waveMaxTokensOverall(uint256)": {
        "params": {
          "waveIndex": "Wave configuration index."
        },
        "returns": {
          "_0": "Maximum tokens allowed in the wave."
        }
      },
      "waveMaxTokensPerWallet(uint256)": {
        "params": {
          "waveIndex": "Wave configuration index."
        },
        "returns": {
          "_0": "Maximum tokens allowed per wallet in the wave."
        }
      },
      "waveMint(address,uint256,uint256,uint256,bytes)": {
        "details": "Only callable by allowedToExecuteMint contract.",
        "params": {
          "amount": "Number of tokens to mint.",
          "signature": "Cryptographic signature authorizing the mint.",
          "signatureId": "Unique identifier for the minting signature.",
          "wallet": "Address receiving the minted tokens.",
          "waveIndex": "Index of the wave configuration to use."
        }
      },
      "waveOwnerToClaimedCounts(uint256,address)": {
        "params": {
          "owner": "Address to query.",
          "waveIndex": "Wave configuration index."
        },
        "returns": {
          "_0": "Number of tokens minted by the address in the wave."
        }
      },
      "waveSingleTokenPrice(uint256)": {
        "params": {
          "waveIndex": "Wave configuration index."
        },
        "returns": {
          "_0": "Price per token in the wave's payment token."
        }
      },
      "waveTotalMinted(uint256)": {
        "params": {
          "waveIndex": "Wave configuration index."
        },
        "returns": {
          "_0": "Total tokens minted in the wave."
        }
      }
    },
    "title": "NFTCollection",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "AlreadyRegistered(address)": [
        {
          "notice": "this contract is already registered"
        }
      ],
      "CannotMint(uint8,address,uint256,uint256)": [
        {
          "notice": "The operation failed because the wave is completed"
        }
      ],
      "ContractNotConfigured()": [
        {
          "notice": "The operation failed the wave index is zero, no wave was ever configured"
        }
      ],
      "EnforcedBurn()": [
        {
          "notice": "The operation failed because burning is enabled."
        }
      ],
      "ExpectedBurn()": [
        {
          "notice": "The operation failed because burning is disabled."
        }
      ],
      "InvalidAllowedToExecuteMint(address)": [
        {
          "notice": "The operation failed because the allowedToExecuteMint is not a contract or wrong"
        }
      ],
      "InvalidBaseTokenURI(string)": [
        {
          "notice": "The operation failed because the base token uri is empty."
        }
      ],
      "InvalidBatchData()": [
        {
          "notice": "The operation failed because the batch data len is zero"
        }
      ],
      "InvalidMaxTokensPerWallet(uint256,uint256)": [
        {
          "notice": "The operation failed because the max tokens per wallet is invalid"
        }
      ],
      "InvalidName(string)": [
        {
          "notice": "The operation failed because the token name is invalid"
        }
      ],
      "InvalidSignAddress(address)": [
        {
          "notice": "The operation failed because the signAddress is wrong"
        }
      ],
      "InvalidSignature(uint256)": [
        {
          "notice": "The operation failed because signature is invalid or it was already used"
        }
      ],
      "InvalidSymbol(string)": [
        {
          "notice": "The operation failed because the token symbol is invalid"
        }
      ],
      "InvalidTreasury(address)": [
        {
          "notice": "The operation failed because the treasury is wrong"
        }
      ],
      "InvalidWaveData(uint256,uint256)": [
        {
          "notice": "The operation failed because the wave arguments are wrong"
        }
      ],
      "LowMaxSupply(uint256,uint256)": [
        {
          "notice": "The operation failed because the maxSupply is lower than totalSupply"
        }
      ],
      "OperatorNotAllowed(address)": [
        {
          "notice": "the caller is not the operator"
        }
      ],
      "RegistryNotSet(address)": [
        {
          "notice": "the registry is not configured"
        }
      ],
      "WaveMaxTokensHigherThanGlobalMax(uint256,uint256)": [
        {
          "notice": "The operation failed because the wave max tokens per wallet is higher than the global max tokens per wallet"
        }
      ]
    },
    "events": {
      "AllowedExecuteMintSet(address,address,address)": {
        "notice": "Event emitted when an address was set as allowed to mint"
      },
      "BaseURISet(address,string,string)": {
        "notice": "Event emitted when the base token URI for the contract was set or changed"
      },
      "ContractInitialized(string,string,string,address,address,address,uint256,uint256)": {
        "notice": "Event emitted when the contract was initialized."
      },
      "ContractRegistered(address,address,address,bool)": {
        "notice": "emitted when the contract is registered into the registry"
      },
      "DefaultRoyaltyReset(address)": {
        "notice": "Event emitted when default royalties are reset"
      },
      "DefaultRoyaltySet(address,address,uint96)": {
        "notice": "Event emitted when a token personalization was made."
      },
      "MaxSupplySet(address,uint256,uint256)": {
        "notice": "Event emitted when the max supply is set or changed"
      },
      "MaxTokensPerWalletSet(address,uint256,uint256)": {
        "notice": "Event emitted when the max tokens per wallet is set"
      },
      "OperatorRegistrySet(address,address,address)": {
        "notice": "emitted when a registry is set"
      },
      "Personalized(address,uint256,uint256)": {
        "notice": "Event emitted when a token personalization was made."
      },
      "SignAddressSet(address,address,address)": {
        "notice": "Event emitted when the signer address was set or changed"
      },
      "TokenBurned(address,uint256,address)": {
        "notice": "event emitted when a token was burned"
      },
      "TokenBurningDisabled(address)": {
        "notice": "event emitted when token burning was disabled"
      },
      "TokenBurningEnabled(address)": {
        "notice": "event emitted when token burning was enabled"
      },
      "TokenRoyaltyReset(address,uint256)": {
        "notice": "Event emitted when default royalties are reset"
      },
      "TokenRoyaltySet(address,uint256,address,uint96)": {
        "notice": "Event emitted when a token personalization was made."
      },
      "TreasurySet(address,address,address)": {
        "notice": "Event emitted when the treasury address was saved"
      },
      "TrustedForwarderSet(address,address,address)": {
        "notice": "emitted when the trusted forwarder is set"
      },
      "WaveMint(uint256,address,uint256)": {
        "notice": "Event emitted when a wave mint is completed"
      },
      "WaveSetup(address,uint256,uint256,uint256,uint256)": {
        "notice": "Event emitted when a wave was set up"
      }
    },
    "kind": "user",
    "methods": {
      "allowedToExecuteMint()": {
        "notice": "Returns the ERC20 token used for minting payments."
      },
      "approve(address,uint256)": {
        "notice": "Approves an operator to transfer a specific token."
      },
      "baseTokenURI()": {
        "notice": "Returns the base URI for token metadata."
      },
      "batchMint(uint256,(address,uint256)[])": {
        "notice": "Performs batch minting for multiple addresses."
      },
      "batchTransferFrom(address,address,uint256[])": {
        "notice": "Transfers multiple tokens between addresses."
      },
      "burn(uint256)": {
        "notice": "Burns a token."
      },
      "cancelWave(uint256)": {
        "notice": "Deactivates a minting wave by setting its maximum tokens to zero."
      },
      "chain()": {
        "notice": "Returns the current chain ID."
      },
      "disableBurning()": {
        "notice": "Disables token burning functionality."
      },
      "enableBurning()": {
        "notice": "Enables token burning functionality."
      },
      "feeDenominator()": {
        "notice": "Returns the fee denominator for royalty calculations."
      },
      "getSignatureType(uint256)": {
        "notice": "returns the type of signature used for a specific Id"
      },
      "initialize((address,string,string,string,address,address,address,address,uint256,uint256))": {
        "notice": "Initializes the NFT collection with configuration parameters."
      },
      "isBurnEnabled()": {
        "notice": "Returns the burn functionality status."
      },
      "isMintDenied(uint256,address,uint256)": {
        "notice": "Checks if an address can mint tokens in a specific wave."
      },
      "isTrustedForwarder(address)": {
        "notice": "Indicates whether any particular address is the trusted forwarder."
      },
      "maxSupply()": {
        "notice": "Returns the maximum token supply cap."
      },
      "maxTokensPerWallet()": {
        "notice": "Returns the global maximum tokens per wallet limit."
      },
      "mint(address,uint256,uint256,bytes)": {
        "notice": "Mints tokens using the latest wave configuration."
      },
      "mintTreasury()": {
        "notice": "Returns the treasury address for minting payments."
      },
      "mintedCount(address)": {
        "notice": "Returns the number of tokens minted by an address."
      },
      "operatorFilterRegistry()": {
        "notice": "return the operatorFilterRegistry address"
      },
      "operatorPersonalize(uint256,uint256)": {
        "notice": "Updates token traits with privileged access."
      },
      "pause()": {
        "notice": "Pauses all token operations."
      },
      "personalizationOf(uint256)": {
        "notice": "Retrieves personalization traits for a token."
      },
      "personalize(uint256,uint256,uint256,bytes)": {
        "notice": "Updates token traits using a bit mask."
      },
      "register(address,bool)": {
        "notice": "Registers the contract with OpenSea's operator filter registry."
      },
      "resetDefaultRoyalty()": {
        "notice": "Removes default royalty configuration."
      },
      "resetTokenRoyalty(uint256)": {
        "notice": "Resets token-specific royalty configuration."
      },
      "reveal(uint256,uint256,bytes)": {
        "notice": "Triggers metadata refresh for a specific token."
      },
      "safeBatchTransferFrom(address,address,uint256[],bytes)": {
        "notice": "Safely transfers multiple tokens between addresses."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "Safely transfers a token between addresses."
      },
      "setAllowedExecuteMint(address)": {
        "notice": "Updates the ERC20 token contract used for minting payments."
      },
      "setApprovalForAll(address,bool)": {
        "notice": "Sets approval for an operator to manage caller's tokens."
      },
      "setBaseURI(string)": {
        "notice": "Updates the base URI for token metadata."
      },
      "setDefaultRoyalty(address,uint96)": {
        "notice": "Sets default royalty information for all tokens."
      },
      "setMaxSupply(uint256)": {
        "notice": "Updates the maximum supply cap."
      },
      "setMaxTokensPerWallet(uint256)": {
        "notice": "Updates the maximum tokens per wallet limit."
      },
      "setOperatorRegistry(address)": {
        "notice": "Sets the operator filter registry address."
      },
      "setSignAddress(address)": {
        "notice": "Updates the signing address for validating operations."
      },
      "setTokenRoyalty(uint256,address,uint96)": {
        "notice": "Sets royalty information for a specific token."
      },
      "setTreasury(address)": {
        "notice": "Updates the treasury address for minting payments."
      },
      "setTrustedForwarder(address)": {
        "notice": "Updates the trusted forwarder for meta-transactions."
      },
      "setupWave(uint256,uint256,uint256)": {
        "notice": "Creates a new minting wave."
      },
      "signAddress()": {
        "notice": "return the address from which all signatures must come from this specific address, otherwise they are invalid"
      },
      "supportsInterface(bytes4)": {
        "notice": "Checks interface support using ERC165."
      },
      "totalSupply()": {
        "notice": "Returns the current total supply of minted tokens."
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfers a token between addresses."
      },
      "trustedForwarder()": {
        "notice": "Returns the address of the trusted forwarder."
      },
      "unpause()": {
        "notice": "Unpauses all token operations."
      },
      "waveCount()": {
        "notice": "Returns the total number of configured waves."
      },
      "waveMaxTokensOverall(uint256)": {
        "notice": "Returns the maximum tokens allowed for a specific wave."
      },
      "waveMaxTokensPerWallet(uint256)": {
        "notice": "Returns the maximum tokens per wallet for a specific wave."
      },
      "waveMint(address,uint256,uint256,uint256,bytes)": {
        "notice": "Mints tokens using a specific wave configuration."
      },
      "waveOwnerToClaimedCounts(uint256,address)": {
        "notice": "Returns the number of tokens minted by an address in a specific wave."
      },
      "waveSingleTokenPrice(uint256)": {
        "notice": "Returns the token price for a specific wave."
      },
      "waveTotalMinted(uint256)": {
        "notice": "Returns the total tokens minted in a specific wave."
      }
    },
    "notice": "Implements an upgradeable ERC721 contract for Avatar NFT collections.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}