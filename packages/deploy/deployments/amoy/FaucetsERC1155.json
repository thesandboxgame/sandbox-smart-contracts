{
  "address": "0x735A0DC4BBa3a4f1Dc50DbaC1575E62225e5d10a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "faucet",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "faucet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "FaucetAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "faucet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "FaucetStatusChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "faucet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "LimitUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "faucet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        }
      ],
      "name": "PeriodUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "faucet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "TokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "faucet",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "faucet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "addFaucet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "faucet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        }
      ],
      "name": "canClaim",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "faucet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "faucet",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "claimBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "faucet",
          "type": "address"
        }
      ],
      "name": "disableFaucet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "faucet",
          "type": "address"
        }
      ],
      "name": "enableFaucet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "faucet",
          "type": "address"
        }
      ],
      "name": "faucetExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "faucet",
          "type": "address"
        }
      ],
      "name": "getLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "faucet",
          "type": "address"
        }
      ],
      "name": "getPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "faucet",
          "type": "address"
        }
      ],
      "name": "isFaucetEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "faucet",
          "type": "address"
        }
      ],
      "name": "removeFaucet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "faucet",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "removeTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "faucet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newLimit",
          "type": "uint256"
        }
      ],
      "name": "setLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "faucet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newPeriod",
          "type": "uint256"
        }
      ],
      "name": "setPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "faucet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenExistsInFaucet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "faucet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe413425cff7d2ca2c237df0cecd8a2f58d7e151d70ea30df32e2a958d8efedae",
  "receipt": {
    "to": null,
    "from": "0x5F890c9522dCE5670d741D4277BFCC2d9cA8Af02",
    "contractAddress": "0x735A0DC4BBa3a4f1Dc50DbaC1575E62225e5d10a",
    "transactionIndex": 0,
    "gasUsed": "2178608",
    "logsBloom": "0x
    "blockHash": "0xfe02e50ea82881ccacc342b45007c85f5a42672373f054e9d095c3ec0a511af7",
    "transactionHash": "0xe413425cff7d2ca2c237df0cecd8a2f58d7e151d70ea30df32e2a958d8efedae",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5667276,
        "transactionHash": "0xe413425cff7d2ca2c237df0cecd8a2f58d7e151d70ea30df32e2a958d8efedae",
        "address": "0x735A0DC4BBa3a4f1Dc50DbaC1575E62225e5d10a",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xfe02e50ea82881ccacc342b45007c85f5a42672373f054e9d095c3ec0a511af7"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 5667276,
        "transactionHash": "0xe413425cff7d2ca2c237df0cecd8a2f58d7e151d70ea30df32e2a958d8efedae",
        "address": "0x735A0DC4BBa3a4f1Dc50DbaC1575E62225e5d10a",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02",
          "0x00000000000000000000000049c4d4c94829b9c44052c5f5cb164fc612181165"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xfe02e50ea82881ccacc342b45007c85f5a42672373f054e9d095c3ec0a511af7"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 5667276,
        "transactionHash": "0xe413425cff7d2ca2c237df0cecd8a2f58d7e151d70ea30df32e2a958d8efedae",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02",
          "0x000000000000000000000000bb583a9dde59ca64aaa14807f37a4c665c0d72c7"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000110726bbd50d500000000000000000000000000000000000000000000000041453e87b76ec838000000000000000000000000000000000000000000000000f46626c533777b97d0000000000000000000000000000000000000000000000041442e154bb17763000000000000000000000000000000000000000000000000f46737379f34cc6cd",
        "logIndex": 2,
        "blockHash": "0xfe02e50ea82881ccacc342b45007c85f5a42672373f054e9d095c3ec0a511af7"
      }
    ],
    "blockNumber": 5667276,
    "cumulativeGasUsed": "2178608",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x49c4D4C94829B9c44052C5f5Cb164Fc612181165"
  ],
  "numDeployments": 1,
  "solcInputHash": "ae8741dee84a5741e8712c11a0044005",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"faucet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"faucet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"FaucetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"faucet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"FaucetStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"faucet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"LimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"faucet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"PeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"faucet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"faucet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"faucet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"addFaucet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"faucet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"canClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"faucet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"faucet\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"claimBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"faucet\",\"type\":\"address\"}],\"name\":\"disableFaucet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"faucet\",\"type\":\"address\"}],\"name\":\"enableFaucet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"faucet\",\"type\":\"address\"}],\"name\":\"faucetExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"faucet\",\"type\":\"address\"}],\"name\":\"getLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"faucet\",\"type\":\"address\"}],\"name\":\"getPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"faucet\",\"type\":\"address\"}],\"name\":\"isFaucetEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"faucet\",\"type\":\"address\"}],\"name\":\"removeFaucet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"faucet\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"removeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"faucet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"setLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"faucet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"}],\"name\":\"setPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"faucet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenExistsInFaucet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"faucet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A smart contract for distributing ERC1155 tokens from various faucets. This contract allows the owner to set up multiple faucets, each with their own distribution settings.\",\"kind\":\"dev\",\"methods\":{\"addFaucet(address,uint256,uint256,uint256[])\":{\"details\":\"Add a new faucet to the system.\",\"params\":{\"faucet\":\"The address of the ERC1155 token contract to be used as faucet.\",\"limit\":\"The maximum amount of tokens a user can claim at once.\",\"period\":\"The waiting period between claims for users.\",\"tokenIds\":\"List of token IDs that this faucet will distribute.\"}},\"canClaim(address,uint256,address)\":{\"details\":\"Calls the internal function _canClaim to get the result.\",\"params\":{\"faucet\":\"The address of the faucet contract.\",\"tokenId\":\"The ID of the token being claimed.\",\"walletAddress\":\"The address of the wallet attempting to claim.\"},\"returns\":{\"_0\":\"bool Returns true if the wallet address can claim the token, false otherwise.\"}},\"claim(address,uint256,uint256)\":{\"details\":\"Claim tokens from a faucet.\",\"params\":{\"amount\":\"Amount of tokens to be claimed.\",\"faucet\":\"Address of the faucet to claim from.\",\"tokenId\":\"ID of the token to be claimed.\"}},\"claimBatch(address,uint256[],uint256[])\":{\"params\":{\"amounts\":\"- An array of amounts of tokens to be claimed for respective token IDs. Emits multiple {Claimed} events for each claim. Requirements: - The lengths of `tokenIds` and `amounts` arrays should be the same. - Each tokenId must exist in the faucet.\",\"faucet\":\"- The address of the ERC1155 contract (faucet) to claim from.\",\"tokenIds\":\"- An array of token IDs to be claimed from the faucet.\"}},\"disableFaucet(address)\":{\"details\":\"Disable a faucet, stopping users from making claims.\",\"params\":{\"faucet\":\"Address of the faucet to be disabled.\"}},\"enableFaucet(address)\":{\"details\":\"Enable a faucet, allowing users to make claims.\",\"params\":{\"faucet\":\"Address of the faucet to be enabled.\"}},\"faucetExists(address)\":{\"details\":\"External function to check the existence of a given faucet.\",\"params\":{\"faucet\":\"The address of the faucet.\"}},\"getLimit(address)\":{\"details\":\"Gets the limit of a given faucet.\",\"params\":{\"faucet\":\"The address of the faucet.\"},\"returns\":{\"_0\":\"The maximum amount of tokens a user can claim at once.\"}},\"getPeriod(address)\":{\"details\":\"Gets the period of a given faucet.\",\"params\":{\"faucet\":\"The address of the faucet.\"},\"returns\":{\"_0\":\"The waiting period between claims for users.\"}},\"isFaucetEnabled(address)\":{\"details\":\"Determines whether a faucet is enabled.\",\"params\":{\"faucet\":\"Address of the faucet.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeFaucet(address)\":{\"details\":\"Removes a faucet and transfers any remaining tokens back to the owner.\",\"params\":{\"faucet\":\"Address of the faucet to be removed.\"}},\"removeTokens(address,uint256[])\":{\"details\":\"Remove specific tokens from a faucet.\",\"params\":{\"faucet\":\"Address of the faucet.\",\"tokenIds\":\"List of token IDs to remove.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setLimit(address,uint256)\":{\"details\":\"Sets the limit of a given faucet.\",\"params\":{\"faucet\":\"The address of the faucet.\",\"newLimit\":\"The new maximum amount of tokens a user can claim at once.\"}},\"setPeriod(address,uint256)\":{\"details\":\"Sets the period of a given faucet.\",\"params\":{\"faucet\":\"The address of the faucet.\",\"newPeriod\":\"The new waiting period between claims for users.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"tokenExistsInFaucet(address,uint256)\":{\"details\":\"External function to check the existence of a given faucet and token.\",\"params\":{\"faucet\":\"The address of the faucet.\",\"tokenId\":\"The id of the token.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(address,address,uint256[])\":{\"params\":{\"faucet\":\"- The address of the ERC1155 contract (faucet) containing the tokens to be withdrawn.\",\"receiver\":\"- The address to which the tokens will be sent.\",\"tokenIds\":\"- An array of token IDs to be withdrawn. Emits a {Withdrawn} event. Requirements: - The `tokenIds` must exist in the faucet.\"}}},\"title\":\"FaucetsERC1155\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"canClaim(address,uint256,address)\":{\"notice\":\"Determines whether a wallet address can claim a token from a specific faucet.\"},\"claimBatch(address,uint256[],uint256[])\":{\"notice\":\"Function to claim multiple tokens from a single faucet.\"},\"withdraw(address,address,uint256[])\":{\"notice\":\"Function to withdraw the total balance of tokens from the contract to a specified address.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@sandbox-smart-contracts/faucets/contracts/FaucetsERC1155.sol\":\"FaucetsERC1155\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2e024ca51ce5abe16c0d34e6992a1104f356e2244eb4ccbec970435e8b3405e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/faucets/contracts/FaucetsERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {ERC1155Holder} from \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\n\\n/**\\n * @title FaucetsERC1155\\n * @dev A smart contract for distributing ERC1155 tokens from various faucets.\\n * This contract allows the owner to set up multiple faucets, each with their\\n * own distribution settings.\\n */\\ncontract FaucetsERC1155 is Ownable, ERC1155Holder, ReentrancyGuard {\\n    // Events\\n    event FaucetAdded(address indexed faucet, uint256 period, uint256 limit, uint256[] tokenIds);\\n    event TokenAdded(address indexed faucet, uint256 tokenId);\\n    event FaucetStatusChanged(address indexed faucet, bool enabled);\\n    event PeriodUpdated(address indexed faucet, uint256 period);\\n    event LimitUpdated(address indexed faucet, uint256 limit);\\n    event Claimed(address indexed faucet, address indexed receiver, uint256 tokenId, uint256 amount);\\n    event Withdrawn(address indexed faucet, address indexed receiver, uint256[] tokenIds, uint256[] amounts);\\n\\n    /**\\n     * @dev Struct representing information about a faucet.\\n     * - isFaucet: indicates if the given address is a faucet.\\n     * - isEnabled: indicates if the faucet is currently active.\\n     * - period: time interval a user needs to wait between claims.\\n     * - limit: maximum amount of tokens a user can claim at once.\\n     * - tokenIds: list of token IDs supported by this faucet.\\n     * - tokenIdExists: mapping of token IDs to their existence in this faucet.\\n     * - lastTimestamps: mapping of last claim times for each user.\\n     */\\n    struct FaucetInfo {\\n        bool isFaucet;\\n        bool isEnabled;\\n        uint256 period;\\n        uint256 limit;\\n        uint256[] tokenIds;\\n        mapping(uint256 => bool) tokenIdExists;\\n        mapping(uint256 => mapping(address => uint256)) lastTimestamps;\\n    }\\n\\n    // Mapping from faucet address to its information.\\n    mapping(address => FaucetInfo) private faucets;\\n\\n    constructor(address owner) Ownable() {\\n        _transferOwnership(owner);\\n    }\\n\\n    /**\\n     * @dev Gets the period of a given faucet.\\n     * @param faucet The address of the faucet.\\n     * @return The waiting period between claims for users.\\n     */\\n    function getPeriod(address faucet) external view exists(faucet) returns (uint256) {\\n        return faucets[faucet].period;\\n    }\\n\\n    /**\\n     * @dev Sets the period of a given faucet.\\n     * @param faucet The address of the faucet.\\n     * @param newPeriod The new waiting period between claims for users.\\n     */\\n    function setPeriod(address faucet, uint256 newPeriod) external onlyOwner exists(faucet) {\\n        faucets[faucet].period = newPeriod;\\n        emit PeriodUpdated(faucet, newPeriod);\\n    }\\n\\n    /**\\n     * @dev Gets the limit of a given faucet.\\n     * @param faucet The address of the faucet.\\n     * @return The maximum amount of tokens a user can claim at once.\\n     */\\n    function getLimit(address faucet) external view exists(faucet) returns (uint256) {\\n        return faucets[faucet].limit;\\n    }\\n\\n    /**\\n     * @dev Sets the limit of a given faucet.\\n     * @param faucet The address of the faucet.\\n     * @param newLimit The new maximum amount of tokens a user can claim at once.\\n     */\\n    function setLimit(address faucet, uint256 newLimit) external onlyOwner exists(faucet) {\\n        require(newLimit > 0, \\\"Faucets: LIMIT_ZERO\\\");\\n        faucets[faucet].limit = newLimit;\\n        emit LimitUpdated(faucet, newLimit);\\n    }\\n\\n    /**\\n     * @dev Internal function to check the existence of a given faucet.\\n     * @param faucet The address of the faucet.\\n     */\\n    function _exists(address faucet) internal view returns (bool) {\\n        return faucets[faucet].isFaucet;\\n    }\\n\\n    /**\\n     * @dev External function to check the existence of a given faucet.\\n     * @param faucet The address of the faucet.\\n     */\\n    function faucetExists(address faucet) public view returns (bool) {\\n        return _exists(faucet);\\n    }\\n\\n    /**\\n     * @dev Modifier to check if the faucet exists.\\n     * @param faucet The address of the faucet.\\n     */\\n    modifier exists(address faucet) {\\n        require(_exists(faucet), \\\"Faucets: FAUCET_DOES_NOT_EXIST\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev External function to check the existence of a given faucet and token.\\n     * @param faucet The address of the faucet.\\n     * @param tokenId The id of the token.\\n     */\\n    function tokenExistsInFaucet(address faucet, uint256 tokenId) public view exists(faucet) returns (bool) {\\n        return faucets[faucet].tokenIdExists[tokenId];\\n    }\\n\\n    /**\\n     * @dev Add a new faucet to the system.\\n     * @param faucet The address of the ERC1155 token contract to be used as faucet.\\n     * @param period The waiting period between claims for users.\\n     * @param limit The maximum amount of tokens a user can claim at once.\\n     * @param tokenIds List of token IDs that this faucet will distribute.\\n     */\\n    function addFaucet(address faucet, uint256 period, uint256 limit, uint256[] memory tokenIds) public onlyOwner {\\n        require(!_exists(faucet), \\\"Faucets: FAUCET_ALREADY_EXISTS\\\");\\n        require(limit > 0, \\\"Faucets: LIMIT_ZERO\\\");\\n        require(tokenIds.length > 0, \\\"Faucets: TOKENS_CANNOT_BE_EMPTY\\\");\\n\\n        FaucetInfo storage faucetInfo = faucets[faucet];\\n        faucetInfo.isFaucet = true;\\n        faucetInfo.isEnabled = true;\\n        faucetInfo.period = period;\\n        faucetInfo.limit = limit;\\n        faucetInfo.tokenIds = tokenIds;\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            require(!faucetInfo.tokenIdExists[tokenIds[i]], \\\"TOKEN_ALREADY_EXISTS\\\");\\n            faucetInfo.tokenIdExists[tokenIds[i]] = true;\\n            emit TokenAdded(faucet, tokenIds[i]);\\n        }\\n\\n        emit FaucetAdded(faucet, period, limit, tokenIds);\\n    }\\n\\n    /**\\n     * @dev Removes a faucet and transfers any remaining tokens back to the owner.\\n     * @param faucet Address of the faucet to be removed.\\n     */\\n    function removeFaucet(address faucet) external onlyOwner exists(faucet) nonReentrant {\\n        FaucetInfo storage faucetInfo = faucets[faucet];\\n\\n        _withdraw(faucet, owner(), faucetInfo.tokenIds);\\n        delete faucets[faucet];\\n    }\\n\\n    /**\\n     * @dev Enable a faucet, allowing users to make claims.\\n     * @param faucet Address of the faucet to be enabled.\\n     */\\n    function enableFaucet(address faucet) external onlyOwner exists(faucet) {\\n        FaucetInfo storage faucetInfo = faucets[faucet];\\n\\n        faucetInfo.isEnabled = true;\\n        emit FaucetStatusChanged(faucet, true);\\n    }\\n\\n    /**\\n     * @dev Disable a faucet, stopping users from making claims.\\n     * @param faucet Address of the faucet to be disabled.\\n     */\\n    function disableFaucet(address faucet) external onlyOwner exists(faucet) {\\n        FaucetInfo storage faucetInfo = faucets[faucet];\\n\\n        faucetInfo.isEnabled = false;\\n        emit FaucetStatusChanged(faucet, false);\\n    }\\n\\n    /**\\n     * @dev Determines whether a faucet is enabled.\\n     * @param faucet Address of the faucet.\\n     */\\n    function isFaucetEnabled(address faucet) public view exists(faucet) returns (bool) {\\n        FaucetInfo storage faucetInfo = faucets[faucet];\\n        return faucetInfo.isEnabled;\\n    }\\n\\n    /**\\n     * @dev Remove specific tokens from a faucet.\\n     * @param faucet Address of the faucet.\\n     * @param tokenIds List of token IDs to remove.\\n     */\\n    function removeTokens(address faucet, uint256[] memory tokenIds) external onlyOwner exists(faucet) nonReentrant {\\n        FaucetInfo storage faucetInfo = faucets[faucet];\\n\\n        _withdraw(faucet, owner(), tokenIds);\\n\\n        uint256[] storage currentTokenIds = faucetInfo.tokenIds;\\n        uint256[] memory newTokenIds = new uint256[](currentTokenIds.length - tokenIds.length);\\n        uint256 newIndex = 0;\\n\\n        for (uint256 i = 0; i < currentTokenIds.length; i++) {\\n            bool shouldSkip = false;\\n            for (uint256 j = 0; j < tokenIds.length; j++) {\\n                if (currentTokenIds[i] == tokenIds[j]) {\\n                    faucetInfo.tokenIdExists[currentTokenIds[i]] = false;\\n                    shouldSkip = true;\\n                    break;\\n                }\\n            }\\n            if (!shouldSkip) {\\n                newTokenIds[newIndex] = currentTokenIds[i];\\n                newIndex++;\\n            }\\n        }\\n\\n        faucetInfo.tokenIds = newTokenIds;\\n    }\\n\\n    /**\\n     * @notice (Internal) Checks if the wallet address is eligible to claim the token from the faucet.\\n     * @dev Calculates based on the lastTimestamp and the period in the faucetInfo, whether the walletAddress can currently claim the tokenId from the faucet.\\n     * @param faucet The address of the faucet contract.\\n     * @param tokenId The ID of the token being claimed.\\n     * @param walletAddress The address of the wallet attempting to claim.\\n     * @return bool Returns true if the wallet address can claim the token, false otherwise.\\n     */\\n    function _canClaim(address faucet, uint256 tokenId, address walletAddress) internal view returns (bool) {\\n        FaucetInfo storage faucetInfo = faucets[faucet];\\n        uint256 lastTimestamp = faucetInfo.lastTimestamps[tokenId][walletAddress];\\n        return block.timestamp >= (lastTimestamp + faucetInfo.period);\\n    }\\n\\n    /**\\n     * @notice Determines whether a wallet address can claim a token from a specific faucet.\\n     * @dev Calls the internal function _canClaim to get the result.\\n     * @param faucet The address of the faucet contract.\\n     * @param tokenId The ID of the token being claimed.\\n     * @param walletAddress The address of the wallet attempting to claim.\\n     * @return bool Returns true if the wallet address can claim the token, false otherwise.\\n     */\\n    function canClaim(\\n        address faucet,\\n        uint256 tokenId,\\n        address walletAddress\\n    ) external view exists(faucet) returns (bool) {\\n        return _canClaim(faucet, tokenId, walletAddress);\\n    }\\n\\n    /**\\n     * @dev Claim tokens from a faucet.\\n     * @param faucet Address of the faucet to claim from.\\n     * @param tokenId ID of the token to be claimed.\\n     * @param amount Amount of tokens to be claimed.\\n     */\\n    function claim(address faucet, uint256 tokenId, uint256 amount) external exists(faucet) nonReentrant {\\n        FaucetInfo storage faucetInfo = faucets[faucet];\\n        require(faucetInfo.isEnabled, \\\"Faucets: FAUCET_DISABLED\\\");\\n        require(faucetInfo.tokenIdExists[tokenId], \\\"Faucets: TOKEN_DOES_NOT_EXIST\\\");\\n        require(amount > 0 && amount <= faucetInfo.limit, \\\"Faucets: AMOUNT_TOO_HIGH\\\");\\n        require(_canClaim(faucet, tokenId, msg.sender), \\\"Faucets: CLAIM_PERIOD_NOT_PASSED\\\");\\n\\n        uint256 balance = IERC1155(faucet).balanceOf(address(this), tokenId);\\n        require(balance >= amount, \\\"Faucets: BALANCE_IS_NOT_ENOUGH\\\");\\n\\n        faucetInfo.lastTimestamps[tokenId][msg.sender] = block.timestamp;\\n        IERC1155(faucet).safeTransferFrom(address(this), msg.sender, tokenId, amount, \\\"\\\");\\n        emit Claimed(faucet, msg.sender, tokenId, amount);\\n    }\\n\\n    /**\\n     * @notice Function to claim multiple tokens from a single faucet.\\n     * @param faucet - The address of the ERC1155 contract (faucet) to claim from.\\n     * @param tokenIds - An array of token IDs to be claimed from the faucet.\\n     * @param amounts - An array of amounts of tokens to be claimed for respective token IDs.\\n     *\\n     * Emits multiple {Claimed} events for each claim.\\n     *\\n     * Requirements:\\n     * - The lengths of `tokenIds` and `amounts` arrays should be the same.\\n     * - Each tokenId must exist in the faucet.\\n     */\\n    function claimBatch(address faucet, uint256[] memory tokenIds, uint256[] memory amounts) external nonReentrant {\\n        require(tokenIds.length == amounts.length, \\\"Faucets: ARRAY_LENGTH_MISMATCH\\\");\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 amount = amounts[i];\\n\\n            FaucetInfo storage faucetInfo = faucets[faucet];\\n            require(faucetInfo.isEnabled, \\\"Faucets: FAUCET_DISABLED\\\");\\n            require(faucetInfo.tokenIdExists[tokenId], \\\"Faucets: TOKEN_DOES_NOT_EXIST\\\");\\n            require(amount > 0 && amount <= faucetInfo.limit, \\\"Faucets: AMOUNT_TOO_HIGH\\\");\\n            require(_canClaim(faucet, tokenId, msg.sender), \\\"Faucets: CLAIM_PERIOD_NOT_PASSED\\\");\\n\\n            uint256 balance = IERC1155(faucet).balanceOf(address(this), tokenId);\\n            require(balance >= amount, \\\"Faucets: BALANCE_IS_NOT_ENOUGH\\\");\\n\\n            faucetInfo.lastTimestamps[tokenId][msg.sender] = block.timestamp;\\n            IERC1155(faucet).safeTransferFrom(address(this), msg.sender, tokenId, amount, \\\"\\\");\\n            emit Claimed(faucet, msg.sender, tokenId, amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Function to withdraw the total balance of tokens from the contract to a specified address.\\n     * @param faucet - The address of the ERC1155 contract (faucet) containing the tokens to be withdrawn.\\n     * @param receiver - The address to which the tokens will be sent.\\n     * @param tokenIds - An array of token IDs to be withdrawn.\\n     *\\n     * Emits a {Withdrawn} event.\\n     *\\n     * Requirements:\\n     * - The `tokenIds` must exist in the faucet.\\n     */\\n    function withdraw(\\n        address faucet,\\n        address receiver,\\n        uint256[] memory tokenIds\\n    ) external onlyOwner exists(faucet) nonReentrant {\\n        _withdraw(faucet, receiver, tokenIds);\\n    }\\n\\n    /**\\n     * @notice Internal function to withdraw multiple tokens from the contract to a specified address.\\n     * This function is used to transfer out tokens from the faucet to either the owner or to another specified address.\\n     *\\n     * @param faucet - The address of the ERC1155 contract (faucet) containing the tokens to be withdrawn.\\n     * @param receiver - The address to which the tokens will be sent.\\n     * @param tokenIds - An array of token IDs to be withdrawn.\\n     *\\n     * Emits a {Withdrawn} event.\\n     *\\n     * Requirements:\\n     * - The `tokenIds` must exist in the faucet.\\n     */\\n    function _withdraw(address faucet, address receiver, uint256[] memory tokenIds) internal {\\n        FaucetInfo storage faucetInfo = faucets[faucet];\\n        uint256[] memory balances = new uint256[](tokenIds.length);\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            require(faucetInfo.tokenIdExists[tokenIds[i]], \\\"Faucets: TOKEN_DOES_NOT_EXIST\\\");\\n            uint256 balance = IERC1155(faucet).balanceOf(address(this), tokenIds[i]);\\n            balances[i] = balance;\\n        }\\n\\n        IERC1155(faucet).safeBatchTransferFrom(address(this), receiver, tokenIds, balances, \\\"\\\");\\n        emit Withdrawn(faucet, receiver, tokenIds, balances);\\n    }\\n}\\n\",\"keccak256\":\"0x7359b466009eda9bbc5fa2e80c2335b06afc1ae3a592578a24cd59dc0513e867\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002685380380620026858339810160408190526200003491620000a5565b6200003f3362000055565b600180556200004e8162000055565b50620000d7565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215620000b857600080fd5b81516001600160a01b0381168114620000d057600080fd5b9392505050565b61259e80620000e76000396000f3fe608060405234801561001057600080fd5b50600436106101825760003560e01c80638da5cb5b116100d8578063e4596dc41161008c578063f23a6e6111610066578063f23a6e6114610368578063f2fde38b146103a0578063fc490550146103b357600080fd5b8063e4596dc41461032f578063e59e53c214610342578063ecae53831461035557600080fd5b8063b178e559116100bd578063b178e559146102a0578063bc197c81146102b3578063e2337fa81461031c57600080fd5b80638da5cb5b14610272578063ab9a7f861461028d57600080fd5b80636da2147b1161013a578063860ddec011610114578063860ddec01461023957806387a8af4e1461024c578063893bd7c81461025f57600080fd5b80636da2147b1461020b578063715018a61461021e578063725402611461022657600080fd5b80631ce28e721161016b5780631ce28e72146101c45780632bc43fd9146101e557806336db43b5146101f857600080fd5b806301ffc9a71461018757806307229f14146101af575b600080fd5b61019a610195366004611f15565b6103c6565b60405190151581526020015b60405180910390f35b6101c26101bd366004611f7a565b61045f565b005b6101d76101d2366004611f7a565b6105b7565b6040519081526020016101a6565b6101c26101f3366004611f95565b610642565b6101c2610206366004611fc8565b610a24565b6101d7610219366004611f7a565b610b48565b6101c2610bd2565b6101c2610234366004611fc8565b610be6565b61019a610247366004611f7a565b610cad565b6101c261025a366004611f7a565b610cce565b6101c261026d3660046120b9565b610d98565b6000546040516001600160a01b0390911681526020016101a6565b61019a61029b366004611fc8565b610e2b565b61019a6102ae366004612117565b610ec6565b6102eb6102c13660046121c3565b7fbc197c810000000000000000000000000000000000000000000000000000000095945050505050565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016101a6565b6101c261032a36600461226d565b610f44565b6101c261033d366004611f7a565b611232565b6101c26103503660046122ce565b611303565b6101c2610363366004612338565b61172b565b6102eb610376366004612386565b7ff23a6e610000000000000000000000000000000000000000000000000000000095945050505050565b6101c26103ae366004611f7a565b611979565b61019a6103c1366004611f7a565b611a09565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f4e2312e000000000000000000000000000000000000000000000000000000000148061045957507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b610467611a98565b8061048a816001600160a01b031660009081526002602052604090205460ff1690565b6104db5760405162461bcd60e51b815260206004820152601e60248201527f466175636574733a204641554345545f444f45535f4e4f545f4558495354000060448201526064015b60405180910390fd5b6104e3611af2565b6001600160a01b0382166000908152600260205260409020610569836105116000546001600160a01b031690565b8360030180548060200260200160405190810160405280929190818152602001828054801561055f57602002820191906000526020600020905b81548152602001906001019080831161054b575b5050505050611b4b565b6001600160a01b03831660009081526002602081905260408220805461ffff1916815560018101839055908101829055906105a76003830182611e97565b5050506105b360018055565b5050565b6001600160a01b038116600090815260026020526040812054829060ff166106215760405162461bcd60e51b815260206004820152601e60248201527f466175636574733a204641554345545f444f45535f4e4f545f4558495354000060448201526064016104d2565b50506001600160a01b03166000908152600260208190526040909120015490565b82610665816001600160a01b031660009081526002602052604090205460ff1690565b6106b15760405162461bcd60e51b815260206004820152601e60248201527f466175636574733a204641554345545f444f45535f4e4f545f4558495354000060448201526064016104d2565b6106b9611af2565b6001600160a01b03841660009081526002602052604090208054610100900460ff166107275760405162461bcd60e51b815260206004820152601860248201527f466175636574733a204641554345545f44495341424c4544000000000000000060448201526064016104d2565b600084815260048201602052604090205460ff166107875760405162461bcd60e51b815260206004820152601d60248201527f466175636574733a20544f4b454e5f444f45535f4e4f545f455849535400000060448201526064016104d2565b60008311801561079b575080600201548311155b6107e75760405162461bcd60e51b815260206004820152601860248201527f466175636574733a20414d4f554e545f544f4f5f48494748000000000000000060448201526064016104d2565b6107f2858533611ddc565b61083e5760405162461bcd60e51b815260206004820181905260248201527f466175636574733a20434c41494d5f504552494f445f4e4f545f50415353454460448201526064016104d2565b6040517efdd58e000000000000000000000000000000000000000000000000000000008152306004820152602481018590526000906001600160a01b0387169062fdd58e90604401602060405180830381865afa1580156108a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c791906123eb565b9050838110156109195760405162461bcd60e51b815260206004820152601e60248201527f466175636574733a2042414c414e43455f49535f4e4f545f454e4f554748000060448201526064016104d2565b60008581526005830160209081526040808320338085529252808320429055517ff242432a0000000000000000000000000000000000000000000000000000000081523060048201526024810191909152604481018790526064810186905260a0608482015260a48101919091526001600160a01b0387169063f242432a9060c401600060405180830381600087803b1580156109b557600080fd5b505af11580156109c9573d6000803e3d6000fd5b505060408051888152602081018890523393506001600160a01b038a1692507f2f6639d24651730c7bf57c95ddbf96d66d11477e4ec626876f92c22e5f365e68910160405180910390a35050610a1e60018055565b50505050565b610a2c611a98565b81610a4f816001600160a01b031660009081526002602052604090205460ff1690565b610a9b5760405162461bcd60e51b815260206004820152601e60248201527f466175636574733a204641554345545f444f45535f4e4f545f4558495354000060448201526064016104d2565b60008211610aeb5760405162461bcd60e51b815260206004820152601360248201527f466175636574733a204c494d49545f5a45524f0000000000000000000000000060448201526064016104d2565b6001600160a01b03831660008181526002602081905260409182902001849055517fe1da0d200f1c237767b2a71e6538c013078a9202955cf600248e8d9115a0205b90610b3b9085815260200190565b60405180910390a2505050565b6001600160a01b038116600090815260026020526040812054829060ff16610bb25760405162461bcd60e51b815260206004820152601e60248201527f466175636574733a204641554345545f444f45535f4e4f545f4558495354000060448201526064016104d2565b50506001600160a01b031660009081526002602052604090206001015490565b610bda611a98565b610be46000611e2f565b565b610bee611a98565b81610c11816001600160a01b031660009081526002602052604090205460ff1690565b610c5d5760405162461bcd60e51b815260206004820152601e60248201527f466175636574733a204641554345545f444f45535f4e4f545f4558495354000060448201526064016104d2565b6001600160a01b03831660008181526002602052604090819020600101849055517f3deba6de6587a94f1f66437b217865977cbabea52c279cf57ba99363d8aaa49190610b3b9085815260200190565b6001600160a01b03811660009081526002602052604081205460ff16610459565b610cd6611a98565b80610cf9816001600160a01b031660009081526002602052604090205460ff1690565b610d455760405162461bcd60e51b815260206004820152601e60248201527f466175636574733a204641554345545f444f45535f4e4f545f4558495354000060448201526064016104d2565b6001600160a01b0382166000818152600260209081526040808320805461ff0019168155905192835292917fe8a5a4edd53ddfc61f563722d6c005f78d6a5d8cd9bce177573c8379887d440b9101610b3b565b610da0611a98565b82610dc3816001600160a01b031660009081526002602052604090205460ff1690565b610e0f5760405162461bcd60e51b815260206004820152601e60248201527f466175636574733a204641554345545f444f45535f4e4f545f4558495354000060448201526064016104d2565b610e17611af2565b610e22848484611b4b565b610a1e60018055565b6001600160a01b038216600090815260026020526040812054839060ff16610e955760405162461bcd60e51b815260206004820152601e60248201527f466175636574733a204641554345545f444f45535f4e4f545f4558495354000060448201526064016104d2565b50506001600160a01b0391909116600090815260026020908152604080832093835260049093019052205460ff1690565b6001600160a01b038316600090815260026020526040812054849060ff16610f305760405162461bcd60e51b815260206004820152601e60248201527f466175636574733a204641554345545f444f45535f4e4f545f4558495354000060448201526064016104d2565b610f3b858585611ddc565b95945050505050565b610f4c611a98565b6001600160a01b03841660009081526002602052604090205460ff1615610fb55760405162461bcd60e51b815260206004820152601e60248201527f466175636574733a204641554345545f414c52454144595f455849535453000060448201526064016104d2565b600082116110055760405162461bcd60e51b815260206004820152601360248201527f466175636574733a204c494d49545f5a45524f0000000000000000000000000060448201526064016104d2565b60008151116110565760405162461bcd60e51b815260206004820152601f60248201527f466175636574733a20544f4b454e535f43414e4e4f545f42455f454d5054590060448201526064016104d2565b6001600160a01b0384166000908152600260208181526040909220805461ffff191661010117815560018101869055908101849055825190916110a0916003840191850190611eb5565b5060005b82518110156111e5578160040160008483815181106110c5576110c5612404565b60209081029190910181015182528101919091526040016000205460ff16156111305760405162461bcd60e51b815260206004820152601460248201527f544f4b454e5f414c52454144595f45584953545300000000000000000000000060448201526064016104d2565b600182600401600085848151811061114a5761114a612404565b6020026020010151815260200190815260200160002060006101000a81548160ff021916908315150217905550856001600160a01b03167ff4c563a3ea86ff1f4275e8c207df0375a51963f2b831b7bf4da8be938d92876c8483815181106111b4576111b4612404565b60200260200101516040516111cb91815260200190565b60405180910390a2806111dd81612430565b9150506110a4565b50846001600160a01b03167fdba7f4401a2e1a27cac7278e130c0a7222fe50388c31a4c3ef33d171312f5369858585604051611223939291906124a3565b60405180910390a25050505050565b61123a611a98565b8061125d816001600160a01b031660009081526002602052604090205460ff1690565b6112a95760405162461bcd60e51b815260206004820152601e60248201527f466175636574733a204641554345545f444f45535f4e4f545f4558495354000060448201526064016104d2565b6001600160a01b038216600081815260026020908152604091829020805461ff0019166101001781559151600181529192917fe8a5a4edd53ddfc61f563722d6c005f78d6a5d8cd9bce177573c8379887d440b9101610b3b565b61130b611af2565b805182511461135c5760405162461bcd60e51b815260206004820152601e60248201527f466175636574733a2041525241595f4c454e4754485f4d49534d41544348000060448201526064016104d2565b60005b825181101561171c57600083828151811061137c5761137c612404565b60200260200101519050600083838151811061139a5761139a612404565b6020908102919091018101516001600160a01b038816600090815260029092526040909120805491925090610100900460ff166114195760405162461bcd60e51b815260206004820152601860248201527f466175636574733a204641554345545f44495341424c4544000000000000000060448201526064016104d2565b600083815260048201602052604090205460ff166114795760405162461bcd60e51b815260206004820152601d60248201527f466175636574733a20544f4b454e5f444f45535f4e4f545f455849535400000060448201526064016104d2565b60008211801561148d575080600201548211155b6114d95760405162461bcd60e51b815260206004820152601860248201527f466175636574733a20414d4f554e545f544f4f5f48494748000000000000000060448201526064016104d2565b6114e4878433611ddc565b6115305760405162461bcd60e51b815260206004820181905260248201527f466175636574733a20434c41494d5f504552494f445f4e4f545f50415353454460448201526064016104d2565b6040517efdd58e000000000000000000000000000000000000000000000000000000008152306004820152602481018490526000906001600160a01b0389169062fdd58e90604401602060405180830381865afa158015611595573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b991906123eb565b90508281101561160b5760405162461bcd60e51b815260206004820152601e60248201527f466175636574733a2042414c414e43455f49535f4e4f545f454e4f554748000060448201526064016104d2565b60008481526005830160209081526040808320338085529252808320429055517ff242432a0000000000000000000000000000000000000000000000000000000081523060048201526024810191909152604481018690526064810185905260a0608482015260a48101919091526001600160a01b0389169063f242432a9060c401600060405180830381600087803b1580156116a757600080fd5b505af11580156116bb573d6000803e3d6000fd5b505060408051878152602081018790523393506001600160a01b038c1692507f2f6639d24651730c7bf57c95ddbf96d66d11477e4ec626876f92c22e5f365e68910160405180910390a350505050808061171490612430565b91505061135f565b5061172660018055565b505050565b611733611a98565b81611756816001600160a01b031660009081526002602052604090205460ff1690565b6117a25760405162461bcd60e51b815260206004820152601e60248201527f466175636574733a204641554345545f444f45535f4e4f545f4558495354000060448201526064016104d2565b6117aa611af2565b6001600160a01b03831660009081526002602052604090206117de846117d86000546001600160a01b031690565b85611b4b565b825160038201805490916000916117f591906124c2565b67ffffffffffffffff81111561180d5761180d611ff2565b604051908082528060200260200182016040528015611836578160200160208202803683370190505b5090506000805b8354811015611955576000805b88518110156118f45788818151811061186557611865612404565b602002602001015186848154811061187f5761187f612404565b9060005260206000200154036118e25760008760040160008886815481106118a9576118a9612404565b9060005260206000200154815260200190815260200160002060006101000a81548160ff021916908315150217905550600191506118f4565b806118ec81612430565b91505061184a565b50806119425784828154811061190c5761190c612404565b906000526020600020015484848151811061192957611929612404565b60209081029190910101528261193e81612430565b9350505b508061194d81612430565b91505061183d565b50815161196b9060038601906020850190611eb5565b505050505061172660018055565b611981611a98565b6001600160a01b0381166119fd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016104d2565b611a0681611e2f565b50565b6001600160a01b038116600090815260026020526040812054829060ff16611a735760405162461bcd60e51b815260206004820152601e60248201527f466175636574733a204641554345545f444f45535f4e4f545f4558495354000060448201526064016104d2565b50506001600160a01b0316600090815260026020526040902054610100900460ff1690565b6000546001600160a01b03163314610be45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104d2565b600260015403611b445760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104d2565b6002600155565b6001600160a01b0383166000908152600260205260408120825190919067ffffffffffffffff811115611b8057611b80611ff2565b604051908082528060200260200182016040528015611ba9578160200160208202803683370190505b50905060005b8351811015611d0a57826004016000858381518110611bd057611bd0612404565b60209081029190910181015182528101919091526040016000205460ff16611c3a5760405162461bcd60e51b815260206004820152601d60248201527f466175636574733a20544f4b454e5f444f45535f4e4f545f455849535400000060448201526064016104d2565b6000866001600160a01b031662fdd58e30878581518110611c5d57611c5d612404565b60200260200101516040518363ffffffff1660e01b8152600401611c969291906001600160a01b03929092168252602082015260400190565b602060405180830381865afa158015611cb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd791906123eb565b905080838381518110611cec57611cec612404565b60209081029190910101525080611d0281612430565b915050611baf565b506040517f2eb2c2d60000000000000000000000000000000000000000000000000000000081526001600160a01b03861690632eb2c2d690611d569030908890889087906004016124d5565b600060405180830381600087803b158015611d7057600080fd5b505af1158015611d84573d6000803e3d6000fd5b50505050836001600160a01b0316856001600160a01b03167fbec6ab7d2615a83d554f4509340266f2def348f98b08cd83c094bafb91964e6c8584604051611dcd929190612530565b60405180910390a35050505050565b6001600160a01b0380841660009081526002602090815260408083208684526005810183528184209486168452939091528120546001830154919291611e229082612555565b4210159695505050505050565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5080546000825590600052602060002090810190611a069190611f00565b828054828255906000526020600020908101928215611ef0579160200282015b82811115611ef0578251825591602001919060010190611ed5565b50611efc929150611f00565b5090565b5b80821115611efc5760008155600101611f01565b600060208284031215611f2757600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114611f5757600080fd5b9392505050565b80356001600160a01b0381168114611f7557600080fd5b919050565b600060208284031215611f8c57600080fd5b611f5782611f5e565b600080600060608486031215611faa57600080fd5b611fb384611f5e565b95602085013595506040909401359392505050565b60008060408385031215611fdb57600080fd5b611fe483611f5e565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561203157612031611ff2565b604052919050565b600082601f83011261204a57600080fd5b8135602067ffffffffffffffff82111561206657612066611ff2565b8160051b612075828201612008565b928352848101820192828101908785111561208f57600080fd5b83870192505b848310156120ae57823582529183019190830190612095565b979650505050505050565b6000806000606084860312156120ce57600080fd5b6120d784611f5e565b92506120e560208501611f5e565b9150604084013567ffffffffffffffff81111561210157600080fd5b61210d86828701612039565b9150509250925092565b60008060006060848603121561212c57600080fd5b61213584611f5e565b92506020840135915061214a60408501611f5e565b90509250925092565b600082601f83011261216457600080fd5b813567ffffffffffffffff81111561217e5761217e611ff2565b6121916020601f19601f84011601612008565b8181528460208386010111156121a657600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312156121db57600080fd5b6121e486611f5e565b94506121f260208701611f5e565b9350604086013567ffffffffffffffff8082111561220f57600080fd5b61221b89838a01612039565b9450606088013591508082111561223157600080fd5b61223d89838a01612039565b9350608088013591508082111561225357600080fd5b5061226088828901612153565b9150509295509295909350565b6000806000806080858703121561228357600080fd5b61228c85611f5e565b93506020850135925060408501359150606085013567ffffffffffffffff8111156122b657600080fd5b6122c287828801612039565b91505092959194509250565b6000806000606084860312156122e357600080fd5b6122ec84611f5e565b9250602084013567ffffffffffffffff8082111561230957600080fd5b61231587838801612039565b9350604086013591508082111561232b57600080fd5b5061210d86828701612039565b6000806040838503121561234b57600080fd5b61235483611f5e565b9150602083013567ffffffffffffffff81111561237057600080fd5b61237c85828601612039565b9150509250929050565b600080600080600060a0868803121561239e57600080fd5b6123a786611f5e565b94506123b560208701611f5e565b93506040860135925060608601359150608086013567ffffffffffffffff8111156123df57600080fd5b61226088828901612153565b6000602082840312156123fd57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036124615761246161241a565b5060010190565b600081518084526020808501945080840160005b838110156124985781518752958201959082019060010161247c565b509495945050505050565b838152826020820152606060408201526000610f3b6060830184612468565b818103818111156104595761045961241a565b60006001600160a01b03808716835280861660208401525060a0604083015261250160a0830185612468565b82810360608401526125138185612468565b838103608090940193909352505060008152602001949350505050565b6040815260006125436040830185612468565b8281036020840152610f3b8185612468565b808201808211156104595761045961241a56fea2646970667358221220dfdfab92a6a0caaa36abd496f0acca8bad1da3dc8c16d1ab05ffb7c69f47dcb564736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101825760003560e01c80638da5cb5b116100d8578063e4596dc41161008c578063f23a6e6111610066578063f23a6e6114610368578063f2fde38b146103a0578063fc490550146103b357600080fd5b8063e4596dc41461032f578063e59e53c214610342578063ecae53831461035557600080fd5b8063b178e559116100bd578063b178e559146102a0578063bc197c81146102b3578063e2337fa81461031c57600080fd5b80638da5cb5b14610272578063ab9a7f861461028d57600080fd5b80636da2147b1161013a578063860ddec011610114578063860ddec01461023957806387a8af4e1461024c578063893bd7c81461025f57600080fd5b80636da2147b1461020b578063715018a61461021e578063725402611461022657600080fd5b80631ce28e721161016b5780631ce28e72146101c45780632bc43fd9146101e557806336db43b5146101f857600080fd5b806301ffc9a71461018757806307229f14146101af575b600080fd5b61019a610195366004611f15565b6103c6565b60405190151581526020015b60405180910390f35b6101c26101bd366004611f7a565b61045f565b005b6101d76101d2366004611f7a565b6105b7565b6040519081526020016101a6565b6101c26101f3366004611f95565b610642565b6101c2610206366004611fc8565b610a24565b6101d7610219366004611f7a565b610b48565b6101c2610bd2565b6101c2610234366004611fc8565b610be6565b61019a610247366004611f7a565b610cad565b6101c261025a366004611f7a565b610cce565b6101c261026d3660046120b9565b610d98565b6000546040516001600160a01b0390911681526020016101a6565b61019a61029b366004611fc8565b610e2b565b61019a6102ae366004612117565b610ec6565b6102eb6102c13660046121c3565b7fbc197c810000000000000000000000000000000000000000000000000000000095945050505050565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016101a6565b6101c261032a36600461226d565b610f44565b6101c261033d366004611f7a565b611232565b6101c26103503660046122ce565b611303565b6101c2610363366004612338565b61172b565b6102eb610376366004612386565b7ff23a6e610000000000000000000000000000000000000000000000000000000095945050505050565b6101c26103ae366004611f7a565b611979565b61019a6103c1366004611f7a565b611a09565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f4e2312e000000000000000000000000000000000000000000000000000000000148061045957507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b610467611a98565b8061048a816001600160a01b031660009081526002602052604090205460ff1690565b6104db5760405162461bcd60e51b815260206004820152601e60248201527f466175636574733a204641554345545f444f45535f4e4f545f4558495354000060448201526064015b60405180910390fd5b6104e3611af2565b6001600160a01b0382166000908152600260205260409020610569836105116000546001600160a01b031690565b8360030180548060200260200160405190810160405280929190818152602001828054801561055f57602002820191906000526020600020905b81548152602001906001019080831161054b575b5050505050611b4b565b6001600160a01b03831660009081526002602081905260408220805461ffff1916815560018101839055908101829055906105a76003830182611e97565b5050506105b360018055565b5050565b6001600160a01b038116600090815260026020526040812054829060ff166106215760405162461bcd60e51b815260206004820152601e60248201527f466175636574733a204641554345545f444f45535f4e4f545f4558495354000060448201526064016104d2565b50506001600160a01b03166000908152600260208190526040909120015490565b82610665816001600160a01b031660009081526002602052604090205460ff1690565b6106b15760405162461bcd60e51b815260206004820152601e60248201527f466175636574733a204641554345545f444f45535f4e4f545f4558495354000060448201526064016104d2565b6106b9611af2565b6001600160a01b03841660009081526002602052604090208054610100900460ff166107275760405162461bcd60e51b815260206004820152601860248201527f466175636574733a204641554345545f44495341424c4544000000000000000060448201526064016104d2565b600084815260048201602052604090205460ff166107875760405162461bcd60e51b815260206004820152601d60248201527f466175636574733a20544f4b454e5f444f45535f4e4f545f455849535400000060448201526064016104d2565b60008311801561079b575080600201548311155b6107e75760405162461bcd60e51b815260206004820152601860248201527f466175636574733a20414d4f554e545f544f4f5f48494748000000000000000060448201526064016104d2565b6107f2858533611ddc565b61083e5760405162461bcd60e51b815260206004820181905260248201527f466175636574733a20434c41494d5f504552494f445f4e4f545f50415353454460448201526064016104d2565b6040517efdd58e000000000000000000000000000000000000000000000000000000008152306004820152602481018590526000906001600160a01b0387169062fdd58e90604401602060405180830381865afa1580156108a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c791906123eb565b9050838110156109195760405162461bcd60e51b815260206004820152601e60248201527f466175636574733a2042414c414e43455f49535f4e4f545f454e4f554748000060448201526064016104d2565b60008581526005830160209081526040808320338085529252808320429055517ff242432a0000000000000000000000000000000000000000000000000000000081523060048201526024810191909152604481018790526064810186905260a0608482015260a48101919091526001600160a01b0387169063f242432a9060c401600060405180830381600087803b1580156109b557600080fd5b505af11580156109c9573d6000803e3d6000fd5b505060408051888152602081018890523393506001600160a01b038a1692507f2f6639d24651730c7bf57c95ddbf96d66d11477e4ec626876f92c22e5f365e68910160405180910390a35050610a1e60018055565b50505050565b610a2c611a98565b81610a4f816001600160a01b031660009081526002602052604090205460ff1690565b610a9b5760405162461bcd60e51b815260206004820152601e60248201527f466175636574733a204641554345545f444f45535f4e4f545f4558495354000060448201526064016104d2565b60008211610aeb5760405162461bcd60e51b815260206004820152601360248201527f466175636574733a204c494d49545f5a45524f0000000000000000000000000060448201526064016104d2565b6001600160a01b03831660008181526002602081905260409182902001849055517fe1da0d200f1c237767b2a71e6538c013078a9202955cf600248e8d9115a0205b90610b3b9085815260200190565b60405180910390a2505050565b6001600160a01b038116600090815260026020526040812054829060ff16610bb25760405162461bcd60e51b815260206004820152601e60248201527f466175636574733a204641554345545f444f45535f4e4f545f4558495354000060448201526064016104d2565b50506001600160a01b031660009081526002602052604090206001015490565b610bda611a98565b610be46000611e2f565b565b610bee611a98565b81610c11816001600160a01b031660009081526002602052604090205460ff1690565b610c5d5760405162461bcd60e51b815260206004820152601e60248201527f466175636574733a204641554345545f444f45535f4e4f545f4558495354000060448201526064016104d2565b6001600160a01b03831660008181526002602052604090819020600101849055517f3deba6de6587a94f1f66437b217865977cbabea52c279cf57ba99363d8aaa49190610b3b9085815260200190565b6001600160a01b03811660009081526002602052604081205460ff16610459565b610cd6611a98565b80610cf9816001600160a01b031660009081526002602052604090205460ff1690565b610d455760405162461bcd60e51b815260206004820152601e60248201527f466175636574733a204641554345545f444f45535f4e4f545f4558495354000060448201526064016104d2565b6001600160a01b0382166000818152600260209081526040808320805461ff0019168155905192835292917fe8a5a4edd53ddfc61f563722d6c005f78d6a5d8cd9bce177573c8379887d440b9101610b3b565b610da0611a98565b82610dc3816001600160a01b031660009081526002602052604090205460ff1690565b610e0f5760405162461bcd60e51b815260206004820152601e60248201527f466175636574733a204641554345545f444f45535f4e4f545f4558495354000060448201526064016104d2565b610e17611af2565b610e22848484611b4b565b610a1e60018055565b6001600160a01b038216600090815260026020526040812054839060ff16610e955760405162461bcd60e51b815260206004820152601e60248201527f466175636574733a204641554345545f444f45535f4e4f545f4558495354000060448201526064016104d2565b50506001600160a01b0391909116600090815260026020908152604080832093835260049093019052205460ff1690565b6001600160a01b038316600090815260026020526040812054849060ff16610f305760405162461bcd60e51b815260206004820152601e60248201527f466175636574733a204641554345545f444f45535f4e4f545f4558495354000060448201526064016104d2565b610f3b858585611ddc565b95945050505050565b610f4c611a98565b6001600160a01b03841660009081526002602052604090205460ff1615610fb55760405162461bcd60e51b815260206004820152601e60248201527f466175636574733a204641554345545f414c52454144595f455849535453000060448201526064016104d2565b600082116110055760405162461bcd60e51b815260206004820152601360248201527f466175636574733a204c494d49545f5a45524f0000000000000000000000000060448201526064016104d2565b60008151116110565760405162461bcd60e51b815260206004820152601f60248201527f466175636574733a20544f4b454e535f43414e4e4f545f42455f454d5054590060448201526064016104d2565b6001600160a01b0384166000908152600260208181526040909220805461ffff191661010117815560018101869055908101849055825190916110a0916003840191850190611eb5565b5060005b82518110156111e5578160040160008483815181106110c5576110c5612404565b60209081029190910181015182528101919091526040016000205460ff16156111305760405162461bcd60e51b815260206004820152601460248201527f544f4b454e5f414c52454144595f45584953545300000000000000000000000060448201526064016104d2565b600182600401600085848151811061114a5761114a612404565b6020026020010151815260200190815260200160002060006101000a81548160ff021916908315150217905550856001600160a01b03167ff4c563a3ea86ff1f4275e8c207df0375a51963f2b831b7bf4da8be938d92876c8483815181106111b4576111b4612404565b60200260200101516040516111cb91815260200190565b60405180910390a2806111dd81612430565b9150506110a4565b50846001600160a01b03167fdba7f4401a2e1a27cac7278e130c0a7222fe50388c31a4c3ef33d171312f5369858585604051611223939291906124a3565b60405180910390a25050505050565b61123a611a98565b8061125d816001600160a01b031660009081526002602052604090205460ff1690565b6112a95760405162461bcd60e51b815260206004820152601e60248201527f466175636574733a204641554345545f444f45535f4e4f545f4558495354000060448201526064016104d2565b6001600160a01b038216600081815260026020908152604091829020805461ff0019166101001781559151600181529192917fe8a5a4edd53ddfc61f563722d6c005f78d6a5d8cd9bce177573c8379887d440b9101610b3b565b61130b611af2565b805182511461135c5760405162461bcd60e51b815260206004820152601e60248201527f466175636574733a2041525241595f4c454e4754485f4d49534d41544348000060448201526064016104d2565b60005b825181101561171c57600083828151811061137c5761137c612404565b60200260200101519050600083838151811061139a5761139a612404565b6020908102919091018101516001600160a01b038816600090815260029092526040909120805491925090610100900460ff166114195760405162461bcd60e51b815260206004820152601860248201527f466175636574733a204641554345545f44495341424c4544000000000000000060448201526064016104d2565b600083815260048201602052604090205460ff166114795760405162461bcd60e51b815260206004820152601d60248201527f466175636574733a20544f4b454e5f444f45535f4e4f545f455849535400000060448201526064016104d2565b60008211801561148d575080600201548211155b6114d95760405162461bcd60e51b815260206004820152601860248201527f466175636574733a20414d4f554e545f544f4f5f48494748000000000000000060448201526064016104d2565b6114e4878433611ddc565b6115305760405162461bcd60e51b815260206004820181905260248201527f466175636574733a20434c41494d5f504552494f445f4e4f545f50415353454460448201526064016104d2565b6040517efdd58e000000000000000000000000000000000000000000000000000000008152306004820152602481018490526000906001600160a01b0389169062fdd58e90604401602060405180830381865afa158015611595573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b991906123eb565b90508281101561160b5760405162461bcd60e51b815260206004820152601e60248201527f466175636574733a2042414c414e43455f49535f4e4f545f454e4f554748000060448201526064016104d2565b60008481526005830160209081526040808320338085529252808320429055517ff242432a0000000000000000000000000000000000000000000000000000000081523060048201526024810191909152604481018690526064810185905260a0608482015260a48101919091526001600160a01b0389169063f242432a9060c401600060405180830381600087803b1580156116a757600080fd5b505af11580156116bb573d6000803e3d6000fd5b505060408051878152602081018790523393506001600160a01b038c1692507f2f6639d24651730c7bf57c95ddbf96d66d11477e4ec626876f92c22e5f365e68910160405180910390a350505050808061171490612430565b91505061135f565b5061172660018055565b505050565b611733611a98565b81611756816001600160a01b031660009081526002602052604090205460ff1690565b6117a25760405162461bcd60e51b815260206004820152601e60248201527f466175636574733a204641554345545f444f45535f4e4f545f4558495354000060448201526064016104d2565b6117aa611af2565b6001600160a01b03831660009081526002602052604090206117de846117d86000546001600160a01b031690565b85611b4b565b825160038201805490916000916117f591906124c2565b67ffffffffffffffff81111561180d5761180d611ff2565b604051908082528060200260200182016040528015611836578160200160208202803683370190505b5090506000805b8354811015611955576000805b88518110156118f45788818151811061186557611865612404565b602002602001015186848154811061187f5761187f612404565b9060005260206000200154036118e25760008760040160008886815481106118a9576118a9612404565b9060005260206000200154815260200190815260200160002060006101000a81548160ff021916908315150217905550600191506118f4565b806118ec81612430565b91505061184a565b50806119425784828154811061190c5761190c612404565b906000526020600020015484848151811061192957611929612404565b60209081029190910101528261193e81612430565b9350505b508061194d81612430565b91505061183d565b50815161196b9060038601906020850190611eb5565b505050505061172660018055565b611981611a98565b6001600160a01b0381166119fd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016104d2565b611a0681611e2f565b50565b6001600160a01b038116600090815260026020526040812054829060ff16611a735760405162461bcd60e51b815260206004820152601e60248201527f466175636574733a204641554345545f444f45535f4e4f545f4558495354000060448201526064016104d2565b50506001600160a01b0316600090815260026020526040902054610100900460ff1690565b6000546001600160a01b03163314610be45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104d2565b600260015403611b445760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104d2565b6002600155565b6001600160a01b0383166000908152600260205260408120825190919067ffffffffffffffff811115611b8057611b80611ff2565b604051908082528060200260200182016040528015611ba9578160200160208202803683370190505b50905060005b8351811015611d0a57826004016000858381518110611bd057611bd0612404565b60209081029190910181015182528101919091526040016000205460ff16611c3a5760405162461bcd60e51b815260206004820152601d60248201527f466175636574733a20544f4b454e5f444f45535f4e4f545f455849535400000060448201526064016104d2565b6000866001600160a01b031662fdd58e30878581518110611c5d57611c5d612404565b60200260200101516040518363ffffffff1660e01b8152600401611c969291906001600160a01b03929092168252602082015260400190565b602060405180830381865afa158015611cb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd791906123eb565b905080838381518110611cec57611cec612404565b60209081029190910101525080611d0281612430565b915050611baf565b506040517f2eb2c2d60000000000000000000000000000000000000000000000000000000081526001600160a01b03861690632eb2c2d690611d569030908890889087906004016124d5565b600060405180830381600087803b158015611d7057600080fd5b505af1158015611d84573d6000803e3d6000fd5b50505050836001600160a01b0316856001600160a01b03167fbec6ab7d2615a83d554f4509340266f2def348f98b08cd83c094bafb91964e6c8584604051611dcd929190612530565b60405180910390a35050505050565b6001600160a01b0380841660009081526002602090815260408083208684526005810183528184209486168452939091528120546001830154919291611e229082612555565b4210159695505050505050565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5080546000825590600052602060002090810190611a069190611f00565b828054828255906000526020600020908101928215611ef0579160200282015b82811115611ef0578251825591602001919060010190611ed5565b50611efc929150611f00565b5090565b5b80821115611efc5760008155600101611f01565b600060208284031215611f2757600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114611f5757600080fd5b9392505050565b80356001600160a01b0381168114611f7557600080fd5b919050565b600060208284031215611f8c57600080fd5b611f5782611f5e565b600080600060608486031215611faa57600080fd5b611fb384611f5e565b95602085013595506040909401359392505050565b60008060408385031215611fdb57600080fd5b611fe483611f5e565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561203157612031611ff2565b604052919050565b600082601f83011261204a57600080fd5b8135602067ffffffffffffffff82111561206657612066611ff2565b8160051b612075828201612008565b928352848101820192828101908785111561208f57600080fd5b83870192505b848310156120ae57823582529183019190830190612095565b979650505050505050565b6000806000606084860312156120ce57600080fd5b6120d784611f5e565b92506120e560208501611f5e565b9150604084013567ffffffffffffffff81111561210157600080fd5b61210d86828701612039565b9150509250925092565b60008060006060848603121561212c57600080fd5b61213584611f5e565b92506020840135915061214a60408501611f5e565b90509250925092565b600082601f83011261216457600080fd5b813567ffffffffffffffff81111561217e5761217e611ff2565b6121916020601f19601f84011601612008565b8181528460208386010111156121a657600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312156121db57600080fd5b6121e486611f5e565b94506121f260208701611f5e565b9350604086013567ffffffffffffffff8082111561220f57600080fd5b61221b89838a01612039565b9450606088013591508082111561223157600080fd5b61223d89838a01612039565b9350608088013591508082111561225357600080fd5b5061226088828901612153565b9150509295509295909350565b6000806000806080858703121561228357600080fd5b61228c85611f5e565b93506020850135925060408501359150606085013567ffffffffffffffff8111156122b657600080fd5b6122c287828801612039565b91505092959194509250565b6000806000606084860312156122e357600080fd5b6122ec84611f5e565b9250602084013567ffffffffffffffff8082111561230957600080fd5b61231587838801612039565b9350604086013591508082111561232b57600080fd5b5061210d86828701612039565b6000806040838503121561234b57600080fd5b61235483611f5e565b9150602083013567ffffffffffffffff81111561237057600080fd5b61237c85828601612039565b9150509250929050565b600080600080600060a0868803121561239e57600080fd5b6123a786611f5e565b94506123b560208701611f5e565b93506040860135925060608601359150608086013567ffffffffffffffff8111156123df57600080fd5b61226088828901612153565b6000602082840312156123fd57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036124615761246161241a565b5060010190565b600081518084526020808501945080840160005b838110156124985781518752958201959082019060010161247c565b509495945050505050565b838152826020820152606060408201526000610f3b6060830184612468565b818103818111156104595761045961241a565b60006001600160a01b03808716835280861660208401525060a0604083015261250160a0830185612468565b82810360608401526125138185612468565b838103608090940193909352505060008152602001949350505050565b6040815260006125436040830185612468565b8281036020840152610f3b8185612468565b808201808211156104595761045961241a56fea2646970667358221220dfdfab92a6a0caaa36abd496f0acca8bad1da3dc8c16d1ab05ffb7c69f47dcb564736f6c63430008120033",
  "devdoc": {
    "details": "A smart contract for distributing ERC1155 tokens from various faucets. This contract allows the owner to set up multiple faucets, each with their own distribution settings.",
    "kind": "dev",
    "methods": {
      "addFaucet(address,uint256,uint256,uint256[])": {
        "details": "Add a new faucet to the system.",
        "params": {
          "faucet": "The address of the ERC1155 token contract to be used as faucet.",
          "limit": "The maximum amount of tokens a user can claim at once.",
          "period": "The waiting period between claims for users.",
          "tokenIds": "List of token IDs that this faucet will distribute."
        }
      },
      "canClaim(address,uint256,address)": {
        "details": "Calls the internal function _canClaim to get the result.",
        "params": {
          "faucet": "The address of the faucet contract.",
          "tokenId": "The ID of the token being claimed.",
          "walletAddress": "The address of the wallet attempting to claim."
        },
        "returns": {
          "_0": "bool Returns true if the wallet address can claim the token, false otherwise."
        }
      },
      "claim(address,uint256,uint256)": {
        "details": "Claim tokens from a faucet.",
        "params": {
          "amount": "Amount of tokens to be claimed.",
          "faucet": "Address of the faucet to claim from.",
          "tokenId": "ID of the token to be claimed."
        }
      },
      "claimBatch(address,uint256[],uint256[])": {
        "params": {
          "amounts": "- An array of amounts of tokens to be claimed for respective token IDs. Emits multiple {Claimed} events for each claim. Requirements: - The lengths of `tokenIds` and `amounts` arrays should be the same. - Each tokenId must exist in the faucet.",
          "faucet": "- The address of the ERC1155 contract (faucet) to claim from.",
          "tokenIds": "- An array of token IDs to be claimed from the faucet."
        }
      },
      "disableFaucet(address)": {
        "details": "Disable a faucet, stopping users from making claims.",
        "params": {
          "faucet": "Address of the faucet to be disabled."
        }
      },
      "enableFaucet(address)": {
        "details": "Enable a faucet, allowing users to make claims.",
        "params": {
          "faucet": "Address of the faucet to be enabled."
        }
      },
      "faucetExists(address)": {
        "details": "External function to check the existence of a given faucet.",
        "params": {
          "faucet": "The address of the faucet."
        }
      },
      "getLimit(address)": {
        "details": "Gets the limit of a given faucet.",
        "params": {
          "faucet": "The address of the faucet."
        },
        "returns": {
          "_0": "The maximum amount of tokens a user can claim at once."
        }
      },
      "getPeriod(address)": {
        "details": "Gets the period of a given faucet.",
        "params": {
          "faucet": "The address of the faucet."
        },
        "returns": {
          "_0": "The waiting period between claims for users."
        }
      },
      "isFaucetEnabled(address)": {
        "details": "Determines whether a faucet is enabled.",
        "params": {
          "faucet": "Address of the faucet."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeFaucet(address)": {
        "details": "Removes a faucet and transfers any remaining tokens back to the owner.",
        "params": {
          "faucet": "Address of the faucet to be removed."
        }
      },
      "removeTokens(address,uint256[])": {
        "details": "Remove specific tokens from a faucet.",
        "params": {
          "faucet": "Address of the faucet.",
          "tokenIds": "List of token IDs to remove."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setLimit(address,uint256)": {
        "details": "Sets the limit of a given faucet.",
        "params": {
          "faucet": "The address of the faucet.",
          "newLimit": "The new maximum amount of tokens a user can claim at once."
        }
      },
      "setPeriod(address,uint256)": {
        "details": "Sets the period of a given faucet.",
        "params": {
          "faucet": "The address of the faucet.",
          "newPeriod": "The new waiting period between claims for users."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "tokenExistsInFaucet(address,uint256)": {
        "details": "External function to check the existence of a given faucet and token.",
        "params": {
          "faucet": "The address of the faucet.",
          "tokenId": "The id of the token."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(address,address,uint256[])": {
        "params": {
          "faucet": "- The address of the ERC1155 contract (faucet) containing the tokens to be withdrawn.",
          "receiver": "- The address to which the tokens will be sent.",
          "tokenIds": "- An array of token IDs to be withdrawn. Emits a {Withdrawn} event. Requirements: - The `tokenIds` must exist in the faucet."
        }
      }
    },
    "title": "FaucetsERC1155",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "canClaim(address,uint256,address)": {
        "notice": "Determines whether a wallet address can claim a token from a specific faucet."
      },
      "claimBatch(address,uint256[],uint256[])": {
        "notice": "Function to claim multiple tokens from a single faucet."
      },
      "withdraw(address,address,uint256[])": {
        "notice": "Function to withdraw the total balance of tokens from the contract to a specified address."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "@sandbox-smart-contracts/faucets/contracts/FaucetsERC1155.sol:FaucetsERC1155",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "@sandbox-smart-contracts/faucets/contracts/FaucetsERC1155.sol:FaucetsERC1155",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 592,
        "contract": "@sandbox-smart-contracts/faucets/contracts/FaucetsERC1155.sol:FaucetsERC1155",
        "label": "faucets",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(FaucetInfo)587_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(FaucetInfo)587_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct FaucetsERC1155.FaucetInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(FaucetInfo)587_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_struct(FaucetInfo)587_storage": {
        "encoding": "inplace",
        "label": "struct FaucetsERC1155.FaucetInfo",
        "members": [
          {
            "astId": 567,
            "contract": "@sandbox-smart-contracts/faucets/contracts/FaucetsERC1155.sol:FaucetsERC1155",
            "label": "isFaucet",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 569,
            "contract": "@sandbox-smart-contracts/faucets/contracts/FaucetsERC1155.sol:FaucetsERC1155",
            "label": "isEnabled",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 571,
            "contract": "@sandbox-smart-contracts/faucets/contracts/FaucetsERC1155.sol:FaucetsERC1155",
            "label": "period",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 573,
            "contract": "@sandbox-smart-contracts/faucets/contracts/FaucetsERC1155.sol:FaucetsERC1155",
            "label": "limit",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 576,
            "contract": "@sandbox-smart-contracts/faucets/contracts/FaucetsERC1155.sol:FaucetsERC1155",
            "label": "tokenIds",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 580,
            "contract": "@sandbox-smart-contracts/faucets/contracts/FaucetsERC1155.sol:FaucetsERC1155",
            "label": "tokenIdExists",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_bool)"
          },
          {
            "astId": 586,
            "contract": "@sandbox-smart-contracts/faucets/contracts/FaucetsERC1155.sol:FaucetsERC1155",
            "label": "lastTimestamps",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}