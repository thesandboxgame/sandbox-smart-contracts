{
  "language": "Solidity",
  "sources": {
    "@manifoldxyz/royalty-registry-solidity/contracts/overrides/IRoyaltySplitter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @author: manifold.xyz\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\nstruct Recipient {\n    address payable recipient;\n    uint16 bps;\n}\n\ninterface IRoyaltySplitter is IERC165 {\n    /**\n     * @dev Set the splitter recipients. Total bps must total 10000.\n     */\n    function setRecipients(Recipient[] calldata recipients) external;\n\n    /**\n     * @dev Get the splitter recipients;\n     */\n    function getRecipients() external view returns (Recipient[] memory);\n}\n"
    },
    "@manifoldxyz/royalty-registry-solidity/contracts/specs/IEIP2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * EIP-2981\n */\ninterface IEIP2981 {\n    /**\n     * bytes4(keccak256(\"royaltyInfo(uint256,uint256)\")) == 0x2a55205a\n     *\n     * => 0x2a55205a = 0x2a55205a\n     */\n    function royaltyInfo(uint256 tokenId, uint256 value) external view returns (address, uint256);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(account),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(\n        uint256 tokenId,\n        uint256 salePrice\n    ) external view returns (address receiver, uint256 royaltyAmount);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\n\npragma solidity ^0.8.0;\n\ninterface IERC5267Upgradeable {\n    /**\n     * @dev MAY be emitted to signal that the domain could have changed.\n     */\n    event EIP712DomainChanged();\n\n    /**\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n     * signature.\n     */\n    function eip712Domain()\n        external\n        view\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        );\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155Upgradeable.sol\";\nimport \"./IERC1155ReceiverUpgradeable.sol\";\nimport \"./extensions/IERC1155MetadataURIUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\n    using AddressUpgradeable for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\n        __ERC1155_init_unchained(uri_);\n    }\n\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: address zero is not a valid owner\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] memory accounts,\n        uint256[] memory ids\n    ) public view virtual override returns (uint256[] memory) {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[47] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/extensions/ERC1155Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1155Upgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\n * own tokens and those that they have been approved to use.\n *\n * _Available since v3.1._\n */\nabstract contract ERC1155BurnableUpgradeable is Initializable, ERC1155Upgradeable {\n    function __ERC1155Burnable_init() internal onlyInitializing {\n    }\n\n    function __ERC1155Burnable_init_unchained() internal onlyInitializing {\n    }\n    function burn(address account, uint256 id, uint256 value) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n\n        _burn(account, id, value);\n    }\n\n    function burnBatch(address account, uint256[] memory ids, uint256[] memory values) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155Supply.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1155Upgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\n *\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\n * clearly identified. Note: While a totalSupply of 1 might mean the\n * corresponding is an NFT, there is no guarantees that no other token with the\n * same id are not going to be minted.\n */\nabstract contract ERC1155SupplyUpgradeable is Initializable, ERC1155Upgradeable {\n    function __ERC1155Supply_init() internal onlyInitializing {\n    }\n\n    function __ERC1155Supply_init_unchained() internal onlyInitializing {\n    }\n    mapping(uint256 => uint256) private _totalSupply;\n\n    /**\n     * @dev Total amount of tokens in with a given id.\n     */\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\n        return _totalSupply[id];\n    }\n\n    /**\n     * @dev Indicates whether any token exist with a given id, or not.\n     */\n    function exists(uint256 id) public view virtual returns (bool) {\n        return ERC1155SupplyUpgradeable.totalSupply(id) > 0;\n    }\n\n    /**\n     * @dev See {ERC1155-_beforeTokenTransfer}.\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual override {\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        if (from == address(0)) {\n            for (uint256 i = 0; i < ids.length; ++i) {\n                _totalSupply[ids[i]] += amounts[i];\n            }\n        }\n\n        if (to == address(0)) {\n            for (uint256 i = 0; i < ids.length; ++i) {\n                uint256 id = ids[i];\n                uint256 amount = amounts[i];\n                uint256 supply = _totalSupply[id];\n                require(supply >= amount, \"ERC1155: burn amount exceeds totalSupply\");\n                unchecked {\n                    _totalSupply[id] = supply - amount;\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155URIStorageUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155URIStorage.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../../utils/StringsUpgradeable.sol\";\nimport \"../ERC1155Upgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev ERC1155 token with storage based token URI management.\n * Inspired by the ERC721URIStorage extension\n *\n * _Available since v4.6._\n */\nabstract contract ERC1155URIStorageUpgradeable is Initializable, ERC1155Upgradeable {\n    function __ERC1155URIStorage_init() internal onlyInitializing {\n        __ERC1155URIStorage_init_unchained();\n    }\n\n    function __ERC1155URIStorage_init_unchained() internal onlyInitializing {\n        _baseURI = \"\";\n    }\n    using StringsUpgradeable for uint256;\n\n    // Optional base URI\n    string private _baseURI;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the concatenation of the `_baseURI`\n     * and the token-specific uri if the latter is set\n     *\n     * This enables the following behaviors:\n     *\n     * - if `_tokenURIs[tokenId]` is set, then the result is the concatenation\n     *   of `_baseURI` and `_tokenURIs[tokenId]` (keep in mind that `_baseURI`\n     *   is empty per default);\n     *\n     * - if `_tokenURIs[tokenId]` is NOT set then we fallback to `super.uri()`\n     *   which in most cases will contain `ERC1155._uri`;\n     *\n     * - if `_tokenURIs[tokenId]` is NOT set, and if the parents do not have a\n     *   uri value set, then the result is empty.\n     */\n    function uri(uint256 tokenId) public view virtual override returns (string memory) {\n        string memory tokenURI = _tokenURIs[tokenId];\n\n        // If token URI is set, concatenate base URI and tokenURI (via abi.encodePacked).\n        return bytes(tokenURI).length > 0 ? string(abi.encodePacked(_baseURI, tokenURI)) : super.uri(tokenId);\n    }\n\n    /**\n     * @dev Sets `tokenURI` as the tokenURI of `tokenId`.\n     */\n    function _setURI(uint256 tokenId, string memory tokenURI) internal virtual {\n        _tokenURIs[tokenId] = tokenURI;\n        emit URI(uri(tokenId), tokenId);\n    }\n\n    /**\n     * @dev Sets `baseURI` as the `_baseURI` for all tokens\n     */\n    function _setBaseURI(string memory baseURI) internal virtual {\n        _baseURI = baseURI;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[48] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Upgradeable.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] calldata accounts,\n        uint256[] calldata ids\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../StringsUpgradeable.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSAUpgradeable {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", StringsUpgradeable.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.8;\n\nimport \"./ECDSAUpgradeable.sol\";\nimport \"../../interfaces/IERC5267Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n *\n * _Available since v3.4._\n *\n * @custom:storage-size 52\n */\nabstract contract EIP712Upgradeable is Initializable, IERC5267Upgradeable {\n    bytes32 private constant _TYPE_HASH =\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    /// @custom:oz-renamed-from _HASHED_NAME\n    bytes32 private _hashedName;\n    /// @custom:oz-renamed-from _HASHED_VERSION\n    bytes32 private _hashedVersion;\n\n    string private _name;\n    string private _version;\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\n        __EIP712_init_unchained(name, version);\n    }\n\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\n        _name = name;\n        _version = version;\n\n        // Reset prior values in storage if upgrading\n        _hashedName = 0;\n        _hashedVersion = 0;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        return _buildDomainSeparator();\n    }\n\n    function _buildDomainSeparator() private view returns (bytes32) {\n        return keccak256(abi.encode(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash(), block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev See {EIP-5267}.\n     *\n     * _Available since v4.9._\n     */\n    function eip712Domain()\n        public\n        view\n        virtual\n        override\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        )\n    {\n        // If the hashed name and version in storage are non-zero, the contract hasn't been properly initialized\n        // and the EIP712 domain is not reliable, as it will be missing name and version.\n        require(_hashedName == 0 && _hashedVersion == 0, \"EIP712: Uninitialized\");\n\n        return (\n            hex\"0f\", // 01111\n            _EIP712Name(),\n            _EIP712Version(),\n            block.chainid,\n            address(this),\n            bytes32(0),\n            new uint256[](0)\n        );\n    }\n\n    /**\n     * @dev The name parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712Name() internal virtual view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev The version parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712Version() internal virtual view returns (string memory) {\n        return _version;\n    }\n\n    /**\n     * @dev The hash of the name parameter for the EIP712 domain.\n     *\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Name` instead.\n     */\n    function _EIP712NameHash() internal view returns (bytes32) {\n        string memory name = _EIP712Name();\n        if (bytes(name).length > 0) {\n            return keccak256(bytes(name));\n        } else {\n            // If the name is empty, the contract may have been upgraded without initializing the new storage.\n            // We return the name hash in storage if non-zero, otherwise we assume the name is empty by design.\n            bytes32 hashedName = _hashedName;\n            if (hashedName != 0) {\n                return hashedName;\n            } else {\n                return keccak256(\"\");\n            }\n        }\n    }\n\n    /**\n     * @dev The hash of the version parameter for the EIP712 domain.\n     *\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Version` instead.\n     */\n    function _EIP712VersionHash() internal view returns (bytes32) {\n        string memory version = _EIP712Version();\n        if (bytes(version).length > 0) {\n            return keccak256(bytes(version));\n        } else {\n            // If the version is empty, the contract may have been upgraded without initializing the new storage.\n            // We return the version hash in storage if non-zero, otherwise we assume the version is empty by design.\n            bytes32 hashedVersion = _hashedVersion;\n            if (hashedVersion != 0) {\n                return hashedVersion;\n            } else {\n                return keccak256(\"\");\n            }\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[48] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMathUpgradeable {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\nimport \"./math/SignedMathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMathUpgradeable.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "@sandbox-smart-contracts/asset/contracts/Asset.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport {\n    AccessControlUpgradeable,\n    ContextUpgradeable\n} from \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {\n    ERC1155BurnableUpgradeable,\n    ERC1155Upgradeable\n} from \"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol\";\nimport {\n    ERC1155SupplyUpgradeable\n} from \"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol\";\nimport {\n    ERC1155URIStorageUpgradeable\n} from \"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155URIStorageUpgradeable.sol\";\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {\n    ERC2771HandlerUpgradeable\n} from \"@sandbox-smart-contracts/dependency-metatx/contracts/ERC2771HandlerUpgradeable.sol\";\nimport {\n    MultiRoyaltyDistributor\n} from \"@sandbox-smart-contracts/dependency-royalty-management/contracts/MultiRoyaltyDistributor.sol\";\nimport {\n    OperatorFiltererUpgradeable\n} from \"@sandbox-smart-contracts/dependency-operator-filter/contracts/OperatorFiltererUpgradeable.sol\";\nimport {TokenIdUtils} from \"./libraries/TokenIdUtils.sol\";\nimport {IAsset} from \"./interfaces/IAsset.sol\";\nimport {ITokenUtils, IRoyaltyUGC} from \"./interfaces/ITokenUtils.sol\";\n\n/// @title Asset\n/// @author The Sandbox\n/// @notice ERC1155 asset token contract\n/// @notice Minting and burning tokens is only allowed through separate authorized contracts\n/// @dev This contract is final and should not be inherited\ncontract Asset is\n    IAsset,\n    Initializable,\n    ERC2771HandlerUpgradeable,\n    ERC1155BurnableUpgradeable,\n    AccessControlUpgradeable,\n    ERC1155SupplyUpgradeable,\n    ERC1155URIStorageUpgradeable,\n    OperatorFiltererUpgradeable,\n    MultiRoyaltyDistributor,\n    ITokenUtils\n{\n    using TokenIdUtils for uint256;\n    using Address for address;\n\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant BURNER_ROLE = keccak256(\"BURNER_ROLE\");\n    bytes32 public constant MODERATOR_ROLE = keccak256(\"MODERATOR_ROLE\");\n\n    // mapping of ipfs metadata token hash to token id\n    mapping(string => uint256) public hashUsed;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    /// @notice Initialize the contract\n    /// @param forwarder The address of the trusted forwarder\n    /// @param assetAdmin The address of the asset admin\n    /// @param baseUri The base URI for the token metadata\n    /// @param commonSubscription The address of the operator filter subscription\n    /// @param manager The address of the royalty manager\n    function initialize(\n        address forwarder,\n        address assetAdmin,\n        string memory baseUri,\n        address commonSubscription,\n        address manager\n    ) external initializer {\n        __ERC2771Handler_init(forwarder);\n        _grantRole(DEFAULT_ADMIN_ROLE, assetAdmin);\n        _setBaseURI(baseUri);\n        __OperatorFilterer_init(commonSubscription, true);\n        __MultiRoyaltyDistributor_init(manager);\n        __AccessControl_init();\n        __ERC1155Supply_init();\n        __ERC1155Burnable_init();\n    }\n\n    /// @notice Mint new tokens\n    /// @dev Only callable by the minter role\n    /// @param to The address of the recipient\n    /// @param id The id of the token to mint\n    /// @param amount The amount of the token to mint\n    /// @param metadataHash The metadata hash of the token to mint\n    function mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        string memory metadataHash\n    ) external onlyRole(MINTER_ROLE) {\n        _setMetadataHash(id, metadataHash);\n        _mint(to, id, amount, \"\");\n        address creator = id.getCreatorAddress();\n        _setTokenRoyalties(id, payable(creator), creator);\n    }\n\n    /// @notice Mint new tokens with catalyst tier chosen by the creator\n    /// @dev Only callable by the minter role\n    /// @param to The address of the recipient\n    /// @param ids The ids of the tokens to mint\n    /// @param amounts The amounts of the tokens to mint\n    /// @param metadataHashes The metadata hashes of the tokens to mint\n    function mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        string[] memory metadataHashes\n    ) external onlyRole(MINTER_ROLE) {\n        require(ids.length == metadataHashes.length, \"Asset: 1-Array mismatch\");\n        require(ids.length == amounts.length, \"Asset: 2-Array mismatch\");\n        for (uint256 i = 0; i < ids.length; i++) {\n            _setMetadataHash(ids[i], metadataHashes[i]);\n        }\n        _mintBatch(to, ids, amounts, \"\");\n        for (uint256 i; i < ids.length; i++) {\n            address creator = ids[i].getCreatorAddress();\n            _setTokenRoyalties(ids[i], payable(creator), creator);\n        }\n    }\n\n    /// @notice Burn a token from a given account\n    /// @dev Only the minter role can burn tokens\n    /// @dev This function was added with token recycling and bridging in mind but may have other use cases\n    /// @param account The account to burn tokens from\n    /// @param id The token id to burn\n    /// @param amount The amount of tokens to burn\n    function burnFrom(\n        address account,\n        uint256 id,\n        uint256 amount\n    ) external onlyRole(BURNER_ROLE) {\n        _burn(account, id, amount);\n    }\n\n    /// @notice Burn a batch of tokens from a given account\n    /// @dev Only the minter role can burn tokens\n    /// @dev This function was added with token recycling and bridging in mind but may have other use cases\n    /// @dev The length of the ids and amounts arrays must be the same\n    /// @param account The account to burn tokens from\n    /// @param ids An array of token ids to burn\n    /// @param amounts An array of amounts of tokens to burn\n    function burnBatchFrom(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) external onlyRole(BURNER_ROLE) {\n        _burnBatch(account, ids, amounts);\n    }\n\n    /// @notice Set a new URI for specific tokenid\n    /// @dev The metadata hash should be the IPFS CIDv1 base32 encoded hash\n    /// @param tokenId The token id to set URI for\n    /// @param metadata The new URI for asset's metadata\n    function setTokenURI(uint256 tokenId, string memory metadata) external onlyRole(MODERATOR_ROLE) {\n        _setURI(tokenId, metadata);\n    }\n\n    /// @notice Set a new base URI\n    /// @param baseURI The new base URI\n    function setBaseURI(string memory baseURI) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        _setBaseURI(baseURI);\n    }\n\n    /// @notice returns full token URI, including baseURI and token metadata URI\n    /// @param tokenId The token id to get URI for\n    /// @return tokenURI the URI of the token\n    function uri(uint256 tokenId)\n        public\n        view\n        override(ERC1155Upgradeable, ERC1155URIStorageUpgradeable)\n        returns (string memory tokenURI)\n    {\n        return ERC1155URIStorageUpgradeable.uri(tokenId);\n    }\n\n    /// @notice returns the tokenId associated with provided metadata hash\n    /// @param metadataHash The metadata hash to get tokenId for\n    /// @return tokenId the tokenId associated with the metadata hash\n    function getTokenIdByMetadataHash(string memory metadataHash) public view returns (uint256 tokenId) {\n        return hashUsed[metadataHash];\n    }\n\n    /// @notice sets the metadata hash for a given tokenId\n    /// @param tokenId The tokenId to set metadata hash for\n    /// @param metadataHash The metadata hash to set\n    function _setMetadataHash(uint256 tokenId, string memory metadataHash) internal {\n        if (hashUsed[metadataHash] != 0) {\n            require(hashUsed[metadataHash] == tokenId, \"Asset: Hash already used\");\n        } else {\n            hashUsed[metadataHash] = tokenId;\n            _setURI(tokenId, metadataHash);\n        }\n    }\n\n    /// @notice Set a new trusted forwarder address, limited to DEFAULT_ADMIN_ROLE only\n    /// @dev Change the address of the trusted forwarder for meta-TX\n    /// @param trustedForwarder The new trustedForwarder\n    function setTrustedForwarder(address trustedForwarder) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(trustedForwarder.isContract(), \"Asset: Bad forwarder address\");\n        _setTrustedForwarder(trustedForwarder);\n    }\n\n    /// @notice Query if a contract implements interface `id`.\n    /// @param id the interface identifier, as specified in ERC-165.\n    /// @return supported `true` if the contract implements `id`.\n    function supportsInterface(bytes4 id)\n        public\n        view\n        virtual\n        override(ERC1155Upgradeable, AccessControlUpgradeable, MultiRoyaltyDistributor)\n        returns (bool supported)\n    {\n        return id == type(IRoyaltyUGC).interfaceId || super.supportsInterface(id);\n    }\n\n    function _msgSender()\n        internal\n        view\n        virtual\n        override(ContextUpgradeable, ERC2771HandlerUpgradeable)\n        returns (address sender)\n    {\n        return ERC2771HandlerUpgradeable._msgSender();\n    }\n\n    function _msgData()\n        internal\n        view\n        virtual\n        override(ContextUpgradeable, ERC2771HandlerUpgradeable)\n        returns (bytes calldata msgData)\n    {\n        return ERC2771HandlerUpgradeable._msgData();\n    }\n\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal override(ERC1155Upgradeable, ERC1155SupplyUpgradeable) {\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n    }\n\n    /// @notice Transfers `values` tokens of type `ids` from  `from` to `to` (with safety call).\n    /// @dev call data should be optimized to order ids so packedBalance can be used efficiently.\n    /// @param from address from which tokens are transfered.\n    /// @param to address to which the token will be transfered.\n    /// @param ids ids of each token type transfered.\n    /// @param amounts amount of each token type transfered.\n    /// @param data additional data accompanying the transfer.\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override onlyAllowedOperator(from) {\n        super.safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /// @notice Enable or disable approval for `operator` to manage all of the caller's tokens.\n    /// @param operator address which will be granted rights to transfer all tokens of the caller.\n    /// @param approved whether to approve or revoke\n    function setApprovalForAll(address operator, bool approved)\n        public\n        virtual\n        override\n        onlyAllowedOperatorApproval(operator)\n    {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /// @notice Transfers `value` tokens of type `id` from  `from` to `to`  (with safety call).\n    /// @param from address from which tokens are transfered.\n    /// @param to address to which the token will be transfered.\n    /// @param id the token type transfered.\n    /// @param amount amount of token transfered.\n    /// @param data additional data accompanying the transfer.\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override onlyAllowedOperator(from) {\n        require(from == _msgSender() || isApprovedForAll(from, _msgSender()), \"Asset: Transfer error\");\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /// @notice could be used to deploy splitter and set tokens royalties\n    /// @param tokenId the id of the token for which the EIP2981 royalty is set for.\n    /// @param recipient the royalty recipient for the splitter of the creator.\n    /// @param creator the creator of the tokens.\n    function setTokenRoyalties(\n        uint256 tokenId,\n        address payable recipient,\n        address creator\n    ) external override onlyRole(DEFAULT_ADMIN_ROLE) {\n        _setTokenRoyalties(tokenId, recipient, creator);\n    }\n\n    /// @notice Extracts the creator address from a given token id\n    /// @param tokenId The token id to extract the creator address from\n    /// @return creator The asset creator address\n    function getCreatorAddress(uint256 tokenId) external pure returns (address creator) {\n        return TokenIdUtils.getCreatorAddress(tokenId);\n    }\n\n    /// @notice Extracts the tier from a given token id\n    /// @param tokenId The token id to extract the tier from\n    /// @return tier The asset tier, determined by the catalyst used to create it\n    function getTier(uint256 tokenId) external pure returns (uint8 tier) {\n        return TokenIdUtils.getTier(tokenId);\n    }\n\n    /// @notice Extracts the revealed flag from a given token id\n    /// @param tokenId The token id to extract the revealed flag from\n    /// @return revealed Whether the asset is revealed or not\n    function isRevealed(uint256 tokenId) external pure returns (bool revealed) {\n        return TokenIdUtils.isRevealed(tokenId);\n    }\n\n    /// @notice Extracts the asset nonce from a given token id\n    /// @param tokenId The token id to extract the asset nonce from\n    /// @return creatorNonce The asset creator nonce\n    function getCreatorNonce(uint256 tokenId) external pure returns (uint16 creatorNonce) {\n        return TokenIdUtils.getCreatorNonce(tokenId);\n    }\n\n    /// @notice Extracts the abilities and enhancements hash from a given token id\n    /// @param tokenId The token id to extract reveal nonce from\n    /// @return revealNonce The reveal nonce of the asset\n    function getRevealNonce(uint256 tokenId) external pure returns (uint16 revealNonce) {\n        return TokenIdUtils.getRevealNonce(tokenId);\n    }\n\n    /// @notice Extracts the bridged flag from a given token id\n    /// @param tokenId The token id to extract the bridged flag from\n    /// @return bridged Whether the asset is bridged or not\n    function isBridged(uint256 tokenId) external pure returns (bool bridged) {\n        return TokenIdUtils.isBridged(tokenId);\n    }\n\n    /// @notice This function is used to register Asset contract on the Operator Filterer Registry of OpenSea. Can only be called by admin.\n    /// @dev used to register contract and subscribe to the subscriptionOrRegistrantToCopy's black list.\n    /// @param subscriptionOrRegistrantToCopy registration address of the list to subscribe.\n    /// @param subscribe bool to signify subscription \"true\"\" or to copy the list \"false\".\n    function registerAndSubscribe(address subscriptionOrRegistrantToCopy, bool subscribe)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        require(subscriptionOrRegistrantToCopy.isContract(), \"Asset: Bad subscription address\");\n        _registerAndSubscribe(subscriptionOrRegistrantToCopy, subscribe);\n    }\n\n    /// @notice sets the operator filter registry address\n    /// @param registry the address of the registry\n    function setOperatorRegistry(address registry) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(registry.isContract(), \"Asset: Bad registry address\");\n        OperatorFiltererUpgradeable._setOperatorFilterRegistry(registry);\n    }\n\n    /// @notice A descriptive name for the collection of tokens in this contract.\n    /// @return _name the name of the tokens.\n    function name() external pure returns (string memory _name) {\n        return \"The Sandbox's ASSETs\";\n    }\n\n    /// @notice An abbreviated name for the collection of tokens in this contract.\n    /// @return _symbol the symbol of the tokens.\n    function symbol() external pure returns (string memory _symbol) {\n        return \"ASSET\";\n    }\n\n    uint256[49] private __gap;\n}\n"
    },
    "@sandbox-smart-contracts/asset/contracts/AssetCreate.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {EIP712Upgradeable} from \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\";\nimport {\n    AccessControlUpgradeable,\n    ContextUpgradeable\n} from \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport {PausableUpgradeable} from \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport {TokenIdUtils} from \"./libraries/TokenIdUtils.sol\";\nimport {AuthSuperValidator} from \"./AuthSuperValidator.sol\";\nimport {\n    ERC2771HandlerUpgradeable\n} from \"@sandbox-smart-contracts/dependency-metatx/contracts/ERC2771HandlerUpgradeable.sol\";\nimport {IAsset} from \"./interfaces/IAsset.sol\";\nimport {ICatalyst} from \"./interfaces/ICatalyst.sol\";\nimport {IAssetCreate} from \"./interfaces/IAssetCreate.sol\";\n\n/// @title AssetCreate\n/// @author The Sandbox\n/// @notice User-facing contract for creating new assets\ncontract AssetCreate is\n    IAssetCreate,\n    Initializable,\n    ERC2771HandlerUpgradeable,\n    EIP712Upgradeable,\n    AccessControlUpgradeable,\n    PausableUpgradeable\n{\n    using TokenIdUtils for uint256;\n    using Address for address;\n\n    IAsset private assetContract;\n    ICatalyst private catalystContract;\n    AuthSuperValidator private authValidator;\n\n    // mapping of creator address to creator nonce, a nonce is incremented every time a creator mints a new token\n    mapping(address => uint16) public creatorNonces;\n    mapping(address => uint16) public signatureNonces;\n\n    bytes32 public constant SPECIAL_MINTER_ROLE = keccak256(\"SPECIAL_MINTER_ROLE\");\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    bytes32 public constant MINT_TYPEHASH =\n        keccak256(\"Mint(address creator,uint16 nonce,uint8 tier,uint256 amount,bool revealed,string metadataHash)\");\n    bytes32 public constant MINT_BATCH_TYPEHASH =\n        keccak256(\n            \"MintBatch(address creator,uint16 nonce,uint8[] tiers,uint256[] amounts,bool[] revealed,string[] metadataHashes)\"\n        );\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    /// @notice Initialize the contract\n    /// @param _name The name of the contract (for EIP712)\n    /// @param _version The version of the contract (for EIP712)\n    /// @param _assetContract The address of the asset contract\n    /// @param _catalystContract The address of the catalyst contract\n    /// @param _authValidator The address of the AuthSuperValidator contract\n    /// @param _forwarder The address of the forwarder contract\n    /// @param _defaultAdmin The address of the default admin\n    function initialize(\n        string memory _name,\n        string memory _version,\n        address _assetContract,\n        address _catalystContract,\n        address _authValidator,\n        address _forwarder,\n        address _defaultAdmin\n    ) public initializer {\n        assetContract = IAsset(_assetContract);\n        catalystContract = ICatalyst(_catalystContract);\n        authValidator = AuthSuperValidator(_authValidator);\n        __ERC2771Handler_init(_forwarder);\n        __EIP712_init(_name, _version);\n        __AccessControl_init();\n        __Pausable_init();\n        _grantRole(DEFAULT_ADMIN_ROLE, _defaultAdmin);\n    }\n\n    /// @notice Create a new asset\n    /// @param signature A signature generated by TSB\n    /// @param tier The tier of the asset to mint\n    /// @param amount The amount of the asset to mint\n    /// @param revealed Whether the asset is revealed or not\n    /// @param metadataHash The metadata hash of the asset to mint\n    /// @param creator The address of the creator\n    function createAsset(\n        bytes memory signature,\n        uint8 tier,\n        uint256 amount,\n        bool revealed,\n        string calldata metadataHash,\n        address creator\n    ) external whenNotPaused {\n        require(\n            authValidator.verify(\n                signature,\n                _hashMint(creator, signatureNonces[_msgSender()]++, tier, amount, revealed, metadataHash)\n            ),\n            \"AssetCreate: Invalid signature\"\n        );\n\n        uint256 tokenId =\n            TokenIdUtils.generateTokenId(creator, tier, ++creatorNonces[creator], revealed ? 1 : 0, false);\n\n        // burn catalyst of a given tier\n        catalystContract.burnFrom(creator, tier, amount);\n        assetContract.mint(creator, tokenId, amount, metadataHash);\n        emit AssetMinted(creator, tokenId, tier, amount, metadataHash, revealed);\n    }\n\n    /// @notice Create multiple assets at once\n    /// @param signature A signature generated by TSB\n    /// @param tiers The tiers of the assets to mint\n    /// @param amounts The amounts of the assets to mint\n    /// @param revealed Whether the assets are revealed or not\n    /// @param metadataHashes The metadata hashes of the assets to mint\n    /// @param creator The address of the creator\n    function createMultipleAssets(\n        bytes memory signature,\n        uint8[] calldata tiers,\n        uint256[] calldata amounts,\n        bool[] calldata revealed,\n        string[] calldata metadataHashes,\n        address creator\n    ) external whenNotPaused {\n        require(\n            authValidator.verify(\n                signature,\n                _hashBatchMint(creator, signatureNonces[_msgSender()]++, tiers, amounts, revealed, metadataHashes)\n            ),\n            \"AssetCreate: Invalid signature\"\n        );\n\n        require(tiers.length == amounts.length, \"AssetCreate: 1-Array lengths\");\n        require(amounts.length == metadataHashes.length, \"AssetCreate: 2-Array lengths\");\n        require(metadataHashes.length == revealed.length, \"AssetCreate: 3-Array lengths\");\n\n        uint256[] memory tokenIds = new uint256[](tiers.length);\n        uint256[] memory tiersToBurn = new uint256[](tiers.length);\n        for (uint256 i = 0; i < tiers.length; i++) {\n            tiersToBurn[i] = tiers[i];\n            tokenIds[i] = TokenIdUtils.generateTokenId(\n                creator,\n                tiers[i],\n                ++creatorNonces[creator],\n                revealed[i] ? 1 : 0,\n                false\n            );\n        }\n\n        catalystContract.burnBatchFrom(creator, tiersToBurn, amounts);\n\n        assetContract.mintBatch(creator, tokenIds, amounts, metadataHashes);\n        emit AssetBatchMinted(creator, tokenIds, tiers, amounts, metadataHashes, revealed);\n    }\n\n    /// @notice Create special assets\n    /// @dev Only callable by the special minter\n    /// @param signature A signature generated by TSB\n    /// @param amount The amount of the asset to mint\n    /// @param metadataHash The metadata hash of the asset to mint,\n    /// @param creator The address of the creator\n    function createSpecialAsset(\n        bytes memory signature,\n        uint256 amount,\n        string calldata metadataHash,\n        address creator\n    ) external onlyRole(SPECIAL_MINTER_ROLE) whenNotPaused {\n        require(\n            authValidator.verify(\n                signature,\n                _hashMint(creator, signatureNonces[_msgSender()]++, 0, amount, true, metadataHash)\n            ),\n            \"AssetCreate: Invalid signature\"\n        );\n\n        uint256 tokenId = TokenIdUtils.generateTokenId(creator, 0, ++creatorNonces[creator], 1, false);\n\n        assetContract.mint(creator, tokenId, amount, metadataHash);\n        emit SpecialAssetMinted(creator, tokenId, 0, amount, metadataHash, true);\n    }\n\n    /// @notice Create multiple special assets\n    /// @dev Only callable by the special minter\n    /// @param signature A signature generated by TSB\n    /// @param amounts The amounts of the assets to mint\n    /// @param metadataHashes The metadata hashes of the assets to mint\n    /// @param creator The address of the creator\n    function createMultipleSpecialAssets(\n        bytes memory signature,\n        uint256[] calldata amounts,\n        string[] calldata metadataHashes,\n        address creator\n    ) external onlyRole(SPECIAL_MINTER_ROLE) whenNotPaused {\n        bool[] memory revealed = new bool[](amounts.length);\n        uint8[] memory tier = new uint8[](amounts.length);\n        for (uint256 i = 0; i < amounts.length; i++) {\n            revealed[i] = true;\n            tier[i] = 0;\n        }\n\n        require(\n            authValidator.verify(\n                signature,\n                _hashBatchMint(creator, signatureNonces[_msgSender()]++, tier, amounts, revealed, metadataHashes)\n            ),\n            \"AssetCreate: Invalid signature\"\n        );\n\n        require(amounts.length == metadataHashes.length, \"AssetCreate: Array lengths\");\n\n        uint256[] memory tokenIds = new uint256[](amounts.length);\n        for (uint256 i = 0; i < amounts.length; i++) {\n            tokenIds[i] = TokenIdUtils.generateTokenId(creator, 0, ++creatorNonces[creator], 1, false);\n        }\n\n        assetContract.mintBatch(creator, tokenIds, amounts, metadataHashes);\n        emit SpecialAssetBatchMinted(creator, tokenIds, tier, amounts, metadataHashes, revealed);\n    }\n\n    /// @notice Pause the contracts mint and burn functions\n    function pause() external onlyRole(PAUSER_ROLE) {\n        _pause();\n    }\n\n    /// @notice Unpause the contracts mint and burn functions\n    function unpause() external onlyRole(PAUSER_ROLE) {\n        _unpause();\n    }\n\n    /// @notice Get the asset contract address\n    /// @return assetContractAddress The asset contract address\n    function getAssetContract() external view returns (address assetContractAddress) {\n        return address(assetContract);\n    }\n\n    /// @notice Get the catalyst contract address\n    /// @return catalystContractAddress The catalyst contract address\n    function getCatalystContract() external view returns (address catalystContractAddress) {\n        return address(catalystContract);\n    }\n\n    /// @notice Get the auth validator address\n    /// @return authValidatorAddress The auth validator address\n    function getAuthValidator() external view returns (address authValidatorAddress) {\n        return address(authValidator);\n    }\n\n    /// @notice Creates a hash of the mint data\n    /// @param creator The address of the creator\n    /// @param nonce The nonce of the creator\n    /// @param tier The tier of the asset\n    /// @param amount The amount of copies to mint\n    /// @param revealed Whether the asset is revealed or not\n    /// @param metadataHash The metadata hash of the asset\n    /// @return digest The hash of the mint data\n    function _hashMint(\n        address creator,\n        uint16 nonce,\n        uint8 tier,\n        uint256 amount,\n        bool revealed,\n        string memory metadataHash\n    ) internal view returns (bytes32 digest) {\n        digest = _hashTypedDataV4(\n            keccak256(\n                abi.encode(\n                    MINT_TYPEHASH,\n                    creator,\n                    nonce,\n                    tier,\n                    amount,\n                    revealed,\n                    keccak256((abi.encodePacked(metadataHash)))\n                )\n            )\n        );\n    }\n\n    /// @notice Creates a hash of the mint batch data\n    /// @param creator The address of the creator\n    /// @param nonce The nonce of the creator\n    /// @param tiers The tiers of the assets\n    /// @param amounts The amounts of copies to mint\n    /// @param revealed Whether the assets are revealed or not\n    /// @param metadataHashes The metadata hashes of the assets\n    /// @return digest The hash of the mint batch data\n    function _hashBatchMint(\n        address creator,\n        uint16 nonce,\n        uint8[] memory tiers,\n        uint256[] memory amounts,\n        bool[] memory revealed,\n        string[] memory metadataHashes\n    ) internal view returns (bytes32 digest) {\n        digest = _hashTypedDataV4(\n            keccak256(\n                abi.encode(\n                    MINT_BATCH_TYPEHASH,\n                    creator,\n                    nonce,\n                    keccak256(abi.encodePacked(tiers)),\n                    keccak256(abi.encodePacked(amounts)),\n                    keccak256(abi.encodePacked(revealed)),\n                    _encodeHashes(metadataHashes)\n                )\n            )\n        );\n    }\n\n    /// @notice Encodes the hashes of the metadata for signature verification\n    /// @param metadataHashes The hashes of the metadata\n    /// @return encodedHashes The encoded hashes of the metadata\n    function _encodeHashes(string[] memory metadataHashes) internal pure returns (bytes32) {\n        bytes32[] memory encodedHashes = new bytes32[](metadataHashes.length);\n        for (uint256 i = 0; i < metadataHashes.length; i++) {\n            encodedHashes[i] = keccak256((abi.encodePacked(metadataHashes[i])));\n        }\n\n        return keccak256(abi.encodePacked(encodedHashes));\n    }\n\n    /// @notice Set a new trusted forwarder address, limited to DEFAULT_ADMIN_ROLE only\n    /// @dev Change the address of the trusted forwarder for meta-TX\n    /// @param trustedForwarder The new trustedForwarder\n    function setTrustedForwarder(address trustedForwarder) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(trustedForwarder.isContract(), \"AssetCreate: Bad forwarder addr\");\n        _setTrustedForwarder(trustedForwarder);\n    }\n\n    function _msgSender()\n        internal\n        view\n        virtual\n        override(ContextUpgradeable, ERC2771HandlerUpgradeable)\n        returns (address sender)\n    {\n        return ERC2771HandlerUpgradeable._msgSender();\n    }\n\n    function _msgData()\n        internal\n        view\n        virtual\n        override(ContextUpgradeable, ERC2771HandlerUpgradeable)\n        returns (bytes calldata)\n    {\n        return ERC2771HandlerUpgradeable._msgData();\n    }\n\n    uint256[45] private __gap;\n}\n"
    },
    "@sandbox-smart-contracts/asset/contracts/AssetReveal.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {EIP712Upgradeable} from \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\";\nimport {\n    AccessControlUpgradeable,\n    ContextUpgradeable\n} from \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport {PausableUpgradeable} from \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport {TokenIdUtils} from \"./libraries/TokenIdUtils.sol\";\nimport {AuthSuperValidator} from \"./AuthSuperValidator.sol\";\nimport {\n    ERC2771HandlerUpgradeable\n} from \"@sandbox-smart-contracts/dependency-metatx/contracts/ERC2771HandlerUpgradeable.sol\";\nimport {IAsset} from \"./interfaces/IAsset.sol\";\nimport {IAssetReveal} from \"./interfaces/IAssetReveal.sol\";\n\n/// @title AssetReveal\n/// @author The Sandbox\n/// @notice Contract for burning and revealing assets\ncontract AssetReveal is\n    IAssetReveal,\n    Initializable,\n    AccessControlUpgradeable,\n    ERC2771HandlerUpgradeable,\n    EIP712Upgradeable,\n    PausableUpgradeable\n{\n    using TokenIdUtils for uint256;\n    IAsset private assetContract;\n    AuthSuperValidator private authValidator;\n\n    // mapping of creator to asset id to asset's reveal nonce\n    mapping(address => mapping(uint256 => uint16)) internal revealIds;\n\n    // mapping for showing whether a revealHash has been used\n    // revealHashes are generated by the TSB backend from reveal burn events and are used for reveal minting\n    mapping(bytes32 => bool) internal revealHashesUsed;\n\n    // allowance list for tier to be revealed in a single transaction\n    mapping(uint8 => bool) internal tierInstantRevealAllowed;\n\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    bytes32 public constant REVEAL_TYPEHASH =\n        keccak256(\n            \"Reveal(address recipient,uint256 prevTokenId,uint256[] amounts,string[] metadataHashes,bytes32[] revealHashes)\"\n        );\n    bytes32 public constant BATCH_REVEAL_TYPEHASH =\n        keccak256(\n            \"BatchReveal(address recipient,uint256[] prevTokenIds,uint256[][] amounts,string[][] metadataHashes,bytes32[][] revealHashes)\"\n        );\n    bytes32 public constant INSTANT_REVEAL_TYPEHASH =\n        keccak256(\n            \"InstantReveal(address recipient,uint256 prevTokenId,uint256[] amounts,string[] metadataHashes,bytes32[] revealHashes)\"\n        );\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    /// @notice Initialize the contract\n    /// @param _assetContract The address of the asset contract\n    /// @param _authValidator The address of the AuthSuperValidator contract\n    /// @param _forwarder The address of the forwarder contract\n    function initialize(\n        string memory _name,\n        string memory _version,\n        address _assetContract,\n        address _authValidator,\n        address _forwarder,\n        address _defaultAdmin\n    ) public initializer {\n        assetContract = IAsset(_assetContract);\n        authValidator = AuthSuperValidator(_authValidator);\n        __ERC2771Handler_init(_forwarder);\n        __EIP712_init(_name, _version);\n        __AccessControl_init();\n        __Pausable_init();\n        _grantRole(DEFAULT_ADMIN_ROLE, _defaultAdmin);\n    }\n\n    /// @notice Reveal an asset to view its abilities and enhancements\n    /// @dev the reveal mechanism works through burning the asset and minting a new one with updated tokenId\n    /// @param tokenId the tokenId of id idasset to reveal\n    /// @param amount the amount of tokens to reveal\n    function revealBurn(uint256 tokenId, uint256 amount) external whenNotPaused {\n        _burnAsset(tokenId, amount);\n        emit AssetRevealBurn(_msgSender(), tokenId, amount);\n    }\n\n    /// @notice Burn multiple assets to be able to reveal them later\n    /// @dev Can be used to burn multiple copies of the same token id, each copy will be revealed separately\n    /// @param tokenIds the tokenIds of the assets to burn\n    /// @param amounts the amounts of the assets to burn\n    function revealBatchBurn(uint256[] calldata tokenIds, uint256[] calldata amounts) external whenNotPaused {\n        _burnAssetBatch(tokenIds, amounts);\n        emit AssetRevealBatchBurn(_msgSender(), tokenIds, amounts);\n    }\n\n    /// @notice Reveal assets to view their abilities and enhancements\n    /// @dev Can be used to reveal multiple copies of the same token id\n    /// @param signature Signature created on the TSB backend containing REVEAL_TYPEHASH and associated data, must be signed by authorized signer\n    /// @param prevTokenId The tokenId of the unrevealed asset\n    /// @param amounts The amount of assets to reveal (length reflects the number of types of reveal tokens and must be equal to the length of revealHashes)\n    /// @param metadataHashes The array of hashes for revealed asset metadata\n    /// @param revealHashes A revealHash array providing a random bytes32 generated by the TSB backend for each new tokenId\n    function revealMint(\n        bytes memory signature,\n        uint256 prevTokenId,\n        uint256[] calldata amounts,\n        string[] calldata metadataHashes,\n        bytes32[] calldata revealHashes\n    ) external whenNotPaused {\n        require(amounts.length == metadataHashes.length, \"AssetReveal: 1-Array mismatch\");\n        require(amounts.length == revealHashes.length, \"AssetReveal: 2-Array mismatch\");\n        require(\n            authValidator.verify(\n                signature,\n                _hashReveal(_msgSender(), prevTokenId, amounts, metadataHashes, revealHashes)\n            ),\n            \"AssetReveal: Invalid signature\"\n        );\n        uint256[] memory newTokenIds = _revealAsset(prevTokenId, metadataHashes, amounts, revealHashes);\n        emit AssetRevealMint(_msgSender(), prevTokenId, amounts, newTokenIds, revealHashes);\n    }\n\n    /// @notice Mint multiple assets with revealed abilities and enhancements\n    /// @dev Can be used to reveal multiple copies of the same token id\n    /// @param signature Signatures created on the TSB backend containing REVEAL_TYPEHASH and associated data, must be signed by authorized signer\n    /// @param prevTokenIds The tokenId of the unrevealed asset\n    /// @param amounts The amount of assets to reveal (must be equal to the length of revealHashes)\n    /// @param metadataHashes The array of hashes for asset metadata\n    /// @param revealHashes Array of revealHash arrays providing random bytes32 generated by the TSB backend for each new tokenId\n    function revealBatchMint(\n        bytes calldata signature,\n        uint256[] calldata prevTokenIds,\n        uint256[][] calldata amounts,\n        string[][] calldata metadataHashes,\n        bytes32[][] calldata revealHashes\n    ) external whenNotPaused {\n        require(prevTokenIds.length == amounts.length, \"AssetReveal: 1-Array mismatch\");\n        require(amounts.length == metadataHashes.length, \"AssetReveal: 2-Array mismatch\");\n        require(prevTokenIds.length == revealHashes.length, \"AssetReveal: 3-Array mismatch\");\n        require(\n            authValidator.verify(\n                signature,\n                _hashBatchReveal(_msgSender(), prevTokenIds, amounts, metadataHashes, revealHashes)\n            ),\n            \"AssetReveal: Invalid signature\"\n        );\n        uint256[][] memory newTokenIds = new uint256[][](prevTokenIds.length);\n        for (uint256 i = 0; i < prevTokenIds.length; i++) {\n            newTokenIds[i] = _revealAsset(prevTokenIds[i], metadataHashes[i], amounts[i], revealHashes[i]);\n        }\n        emit AssetRevealBatchMint(_msgSender(), prevTokenIds, amounts, newTokenIds, revealHashes);\n    }\n\n    /// @notice Reveal assets to view their abilities and enhancements and mint them in a single transaction\n    /// @dev Should be used where it is not required to keep the metadata secret, e.g. mythical assets where users select their desired abilities and enhancements\n    /// @param signature Signature created on the TSB backend containing INSTANT_REVEAL_TYPEHASH and associated data, must be signed by authorized signer\n    /// @param prevTokenId The tokenId of the unrevealed asset\n    /// @param burnAmount The amount of assets to burn\n    /// @param amounts The amount of assets to reveal (sum must be equal to the burnAmount)\n    /// @param metadataHashes The array of hashes for asset metadata\n    /// @param revealHashes A revealHash array providing a random bytes32 generated by the TSB backend for each new tokenId\n    function burnAndReveal(\n        bytes memory signature,\n        uint256 prevTokenId,\n        uint256 burnAmount,\n        uint256[] calldata amounts,\n        string[] calldata metadataHashes,\n        bytes32[] calldata revealHashes\n    ) external whenNotPaused {\n        require(amounts.length == metadataHashes.length, \"AssetReveal: 1-Array mismatch\");\n        require(amounts.length == revealHashes.length, \"AssetReveal: 2-Array mismatch\");\n        uint8 tier = prevTokenId.getTier();\n        require(tierInstantRevealAllowed[tier], \"AssetReveal: Not allowed\");\n        require(\n            authValidator.verify(\n                signature,\n                _hashInstantReveal(_msgSender(), prevTokenId, amounts, metadataHashes, revealHashes)\n            ),\n            \"AssetReveal: Invalid signature\"\n        );\n        _burnAsset(prevTokenId, burnAmount);\n        uint256[] memory newTokenIds = _revealAsset(prevTokenId, metadataHashes, amounts, revealHashes);\n        emit AssetRevealMint(_msgSender(), prevTokenId, amounts, newTokenIds, revealHashes);\n    }\n\n    /// @notice Generate new tokenIds for revealed assets and mint them\n    /// @param prevTokenId The tokenId of the unrevealed asset\n    /// @param metadataHashes The array of hashes for asset metadata\n    /// @param amounts The array of amounts to mint\n    function _revealAsset(\n        uint256 prevTokenId,\n        string[] calldata metadataHashes,\n        uint256[] calldata amounts,\n        bytes32[] calldata revealHashes\n    ) internal returns (uint256[] memory) {\n        uint256[] memory newTokenIds = getRevealedTokenIds(metadataHashes, prevTokenId);\n        for (uint256 i = 0; i < revealHashes.length; i++) {\n            require(revealHashesUsed[revealHashes[i]] == false, \"AssetReveal: Hash already used\");\n            revealHashesUsed[revealHashes[i]] = true;\n        }\n        if (newTokenIds.length == 1) {\n            assetContract.mint(_msgSender(), newTokenIds[0], amounts[0], metadataHashes[0]);\n        } else {\n            assetContract.mintBatch(_msgSender(), newTokenIds, amounts, metadataHashes);\n        }\n        return newTokenIds;\n    }\n\n    /// @notice Burns an asset to be able to reveal it later\n    /// @param tokenId the tokenId of the asset to burn\n    /// @param amount the amount of the asset to burn\n    function _burnAsset(uint256 tokenId, uint256 amount) internal {\n        _verifyBurnData(tokenId, amount);\n        assetContract.burnFrom(_msgSender(), tokenId, amount);\n    }\n\n    function _burnAssetBatch(uint256[] calldata tokenIds, uint256[] calldata amounts) internal {\n        require(tokenIds.length == amounts.length, \"AssetReveal: Invalid input\");\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            _verifyBurnData(tokenIds[i], amounts[i]);\n        }\n        assetContract.burnBatchFrom(_msgSender(), tokenIds, amounts);\n    }\n\n    function _verifyBurnData(uint256 tokenId, uint256 amount) internal pure {\n        IAsset.AssetData memory data = tokenId.getData();\n        require(!data.revealed, \"AssetReveal: Already revealed\");\n        require(amount > 0, \"AssetReveal: Invalid amount\");\n    }\n\n    /// @notice Creates a hash of the reveal data\n    /// @param recipient The address of the recipient\n    /// @param prevTokenId The unrevealed token id\n    /// @param amounts The amount of tokens to mint\n    /// @param metadataHashes The array of hashes for new asset metadata\n    /// @param revealHashes The revealHashes used for revealing this particular prevTokenId (length corresponds to the new tokenIds)\n    /// @return digest The hash of the reveal data\n    function _hashInstantReveal(\n        address recipient,\n        uint256 prevTokenId,\n        uint256[] calldata amounts,\n        string[] calldata metadataHashes,\n        bytes32[] calldata revealHashes\n    ) internal view returns (bytes32 digest) {\n        digest = _hashTypedDataV4(\n            keccak256(\n                abi.encode(\n                    INSTANT_REVEAL_TYPEHASH,\n                    recipient,\n                    prevTokenId,\n                    keccak256(abi.encodePacked(amounts)),\n                    _encodeHashes(metadataHashes),\n                    keccak256(abi.encodePacked(revealHashes))\n                )\n            )\n        );\n    }\n\n    /// @notice Creates a hash of the reveal data\n    /// @param recipient The intended recipient of the revealed token\n    /// @param prevTokenId The previous token id\n    /// @param amounts The amount of tokens to mint\n    /// @param metadataHashes The array of hashes for new asset metadata\n    /// @param revealHashes The revealHashes used for revealing this particular prevTokenId (length corresponds to the new tokenIds)\n    /// @return digest The hash of the reveal data\n    function _hashReveal(\n        address recipient,\n        uint256 prevTokenId,\n        uint256[] calldata amounts,\n        string[] calldata metadataHashes,\n        bytes32[] calldata revealHashes\n    ) internal view returns (bytes32 digest) {\n        digest = _hashTypedDataV4(\n            keccak256(\n                abi.encode(\n                    REVEAL_TYPEHASH,\n                    recipient,\n                    prevTokenId,\n                    keccak256(abi.encodePacked(amounts)),\n                    _encodeHashes(metadataHashes),\n                    keccak256(abi.encodePacked(revealHashes))\n                )\n            )\n        );\n    }\n\n    /// @notice Creates a hash of the reveal data\n    /// @param recipient The intended recipient of the revealed tokens\n    /// @param prevTokenIds The previous token id\n    /// @param amounts The amounts of tokens to mint\n    /// @param metadataHashes The arrays of hashes for new asset metadata\n    /// @param revealHashes The revealHashes used for these prevTokenIds, (lengths corresponds to the new tokenIds)\n    /// @return digest The hash of the reveal data\n    function _hashBatchReveal(\n        address recipient,\n        uint256[] calldata prevTokenIds,\n        uint256[][] calldata amounts,\n        string[][] calldata metadataHashes,\n        bytes32[][] calldata revealHashes\n    ) internal view returns (bytes32 digest) {\n        digest = _hashTypedDataV4(\n            keccak256(\n                abi.encode(\n                    BATCH_REVEAL_TYPEHASH,\n                    recipient,\n                    keccak256(abi.encodePacked(prevTokenIds)),\n                    _encodeBatchAmounts(amounts),\n                    _encodeBatchHashes(metadataHashes),\n                    _encodeBatchRevealHashes(revealHashes)\n                )\n            )\n        );\n    }\n\n    /// @notice Encodes the hashes of the metadata for signature verification\n    /// @param metadataHashes The hashes of the metadata\n    /// @return encodedHashes The encoded hashes of the metadata\n    function _encodeHashes(string[] memory metadataHashes) internal pure returns (bytes32) {\n        bytes32[] memory encodedHashes = new bytes32[](metadataHashes.length);\n        for (uint256 i = 0; i < metadataHashes.length; i++) {\n            encodedHashes[i] = keccak256((abi.encodePacked(metadataHashes[i])));\n        }\n        return keccak256(abi.encodePacked(encodedHashes));\n    }\n\n    /// @notice Encodes the hashes of the metadata for signature verification\n    /// @param metadataHashes The hashes of the metadata\n    /// @return encodedHashes The encoded hashes of the metadata\n    function _encodeBatchHashes(string[][] memory metadataHashes) internal pure returns (bytes32) {\n        bytes32[] memory encodedHashes = new bytes32[](metadataHashes.length);\n        for (uint256 i = 0; i < metadataHashes.length; i++) {\n            encodedHashes[i] = _encodeHashes(metadataHashes[i]);\n        }\n        return keccak256(abi.encodePacked(encodedHashes));\n    }\n\n    /// @notice Encodes the hashes of the metadata for signature verification\n    /// @param revealHashes The revealHashes\n    /// @return encodedRevealHashes The encoded hashes of the metadata\n    function _encodeBatchRevealHashes(bytes32[][] memory revealHashes) internal pure returns (bytes32) {\n        bytes32[] memory encodedHashes = new bytes32[](revealHashes.length);\n        for (uint256 i = 0; i < revealHashes.length; i++) {\n            encodedHashes[i] = keccak256(abi.encodePacked(revealHashes[i]));\n        }\n        return keccak256(abi.encodePacked(encodedHashes));\n    }\n\n    /// @notice Encodes the amounts of the tokens for signature verification\n    /// @param amounts The amounts of the tokens\n    /// @return encodedAmounts The encoded amounts of the tokens\n    function _encodeBatchAmounts(uint256[][] memory amounts) internal pure returns (bytes32) {\n        bytes32[] memory encodedAmounts = new bytes32[](amounts.length);\n        for (uint256 i = 0; i < amounts.length; i++) {\n            encodedAmounts[i] = keccak256(abi.encodePacked(amounts[i]));\n        }\n        return keccak256(abi.encodePacked(encodedAmounts));\n    }\n\n    /// @notice Checks if each metadatahash has been used before to either get the tokenId that was already created for it or generate a new one if it hasn't\n    /// @dev This function also validates that we're not trying to reveal a tokenId that has already been revealed\n    /// @param metadataHashes The hashes of the metadata\n    /// @param prevTokenId The previous token id from which the assets are revealed\n    /// @return tokenIds The array of tokenIds to mint\n    function getRevealedTokenIds(string[] calldata metadataHashes, uint256 prevTokenId)\n        internal\n        returns (uint256[] memory tokenIds)\n    {\n        IAsset.AssetData memory data = prevTokenId.getData();\n        require(!data.revealed, \"AssetReveal: Already revealed\");\n        uint256[] memory tokenIdArray = new uint256[](metadataHashes.length);\n        for (uint256 i = 0; i < metadataHashes.length; i++) {\n            uint256 tokenId = assetContract.getTokenIdByMetadataHash(metadataHashes[i]);\n            if (tokenId == 0) {\n                uint16 revealNonce = ++revealIds[data.creator][prevTokenId];\n                tokenId = TokenIdUtils.generateTokenId(\n                    data.creator,\n                    data.tier,\n                    data.creatorNonce,\n                    revealNonce,\n                    data.bridged\n                );\n            }\n            tokenIdArray[i] = tokenId;\n        }\n        return tokenIdArray;\n    }\n\n    /// @notice Get the status of a revealHash\n    /// @return hashUsed Boolean representing whether the hash has been used\n    function revealHashUsed(bytes32 revealHash) external view returns (bool hashUsed) {\n        return revealHashesUsed[revealHash];\n    }\n\n    /// @notice Get the asset contract address\n    /// @return assetContractAddres The asset contract address\n    function getAssetContract() external view returns (address assetContractAddres) {\n        return address(assetContract);\n    }\n\n    /// @notice Get the auth validator address\n    /// @return authValidatorContractAddress The auth validator address\n    function getAuthValidator() external view returns (address authValidatorContractAddress) {\n        return address(authValidator);\n    }\n\n    /// @notice Set permission for instant reveal for a given tier\n    /// @param tier the tier to set the permission for\n    /// @param allowed allow or disallow instant reveal for the given tier\n    function setTierInstantRevealAllowed(uint8 tier, bool allowed) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        tierInstantRevealAllowed[tier] = allowed;\n    }\n\n    /// @notice Get permission for instant reveal for a given tier\n    /// @param tier The tier to check\n    /// @return instantRevealAllowed Boolean representing whether instant reveal is allowed for the given tier\n    function getTierInstantRevealAllowed(uint8 tier) external view returns (bool instantRevealAllowed) {\n        return tierInstantRevealAllowed[tier];\n    }\n\n    /// @notice Pause the contracts mint and burn functions\n    function pause() external onlyRole(PAUSER_ROLE) {\n        _pause();\n    }\n\n    /// @notice Unpause the contracts mint and burn functions\n    function unpause() external onlyRole(PAUSER_ROLE) {\n        _unpause();\n    }\n\n    /// @notice Set a new trusted forwarder address, limited to DEFAULT_ADMIN_ROLE only\n    /// @dev Change the address of the trusted forwarder for meta-TX\n    /// @param trustedForwarder The new trustedForwarder\n    function setTrustedForwarder(address trustedForwarder) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(trustedForwarder != address(0), \"AssetReveal: Zero address\");\n        _setTrustedForwarder(trustedForwarder);\n    }\n\n    function _msgSender()\n        internal\n        view\n        virtual\n        override(ContextUpgradeable, ERC2771HandlerUpgradeable)\n        returns (address sender)\n    {\n        return ERC2771HandlerUpgradeable._msgSender();\n    }\n\n    function _msgData()\n        internal\n        view\n        virtual\n        override(ContextUpgradeable, ERC2771HandlerUpgradeable)\n        returns (bytes calldata)\n    {\n        return ERC2771HandlerUpgradeable._msgData();\n    }\n}\n"
    },
    "@sandbox-smart-contracts/asset/contracts/AuthSuperValidator.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport {AccessControl} from \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport {ECDSA} from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\n/// @title AuthSuperValidator\n/// @author The Sandbox\n/// @notice This contract is used to validate the signatures of the backend, each contract can have a separate signer assigned\ncontract AuthSuperValidator is AccessControl {\n    mapping(address => address) private _signers;\n\n    /// @dev Constructor\n    /// @param admin Address of the admin that will be able to grant roles\n    constructor(address admin) {\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\n    }\n\n    /// @notice Sets the signer for a contract\n    /// @dev Only the admin can call this function\n    /// @param contractAddress Address of the contract to set the signer for\n    /// @param signer Address of the signer\n    function setSigner(address contractAddress, address signer) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        _signers[contractAddress] = signer;\n    }\n\n    /// @notice Gets the signer for a contract\n    /// @param contractAddress Address of the contract to get the signer for\n    /// @return address of the signer\n    function getSigner(address contractAddress) public view returns (address) {\n        return _signers[contractAddress];\n    }\n\n    /// @notice Takes the signature and the digest and returns if the signer has a backend signer role assigned\n    /// @dev Multipurpose function that can be used to verify signatures with different digests\n    /// @param signature Signature hash\n    /// @param digest Digest hash\n    /// @return bool\n    function verify(bytes memory signature, bytes32 digest) public view returns (bool) {\n        address signer = _signers[_msgSender()];\n        require(signer != address(0), \"AuthSuperValidator: No signer\");\n        address recoveredSigner = ECDSA.recover(digest, signature);\n        return recoveredSigner == signer;\n    }\n\n    /// @notice Prevents the DEFAULT_ADMIN_ROLE from being renounced\n    /// @dev This function overrides the default renounceRole function to prevent the DEFAULT_ADMIN_ROLE from being renounced\n    /// @param role Role to renounce\n    /// @param account Account to renounce the role for\n    function renounceRole(bytes32 role, address account) public override {\n        require(role != DEFAULT_ADMIN_ROLE, \"AuthSuperValidator: Admin needed\");\n        super.renounceRole(role, account);\n    }\n}\n"
    },
    "@sandbox-smart-contracts/asset/contracts/Catalyst.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport {ERC1155Upgradeable} from \"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\";\nimport {\n    AccessControlUpgradeable,\n    ContextUpgradeable\n} from \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport {\n    ERC1155BurnableUpgradeable\n} from \"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol\";\nimport {\n    ERC1155SupplyUpgradeable\n} from \"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol\";\nimport {\n    ERC1155URIStorageUpgradeable\n} from \"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155URIStorageUpgradeable.sol\";\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {\n    OperatorFiltererUpgradeable\n} from \"@sandbox-smart-contracts/dependency-operator-filter/contracts/OperatorFiltererUpgradeable.sol\";\nimport {\n    RoyaltyDistributor\n} from \"@sandbox-smart-contracts/dependency-royalty-management/contracts/RoyaltyDistributor.sol\";\nimport {\n    ERC2771HandlerUpgradeable\n} from \"@sandbox-smart-contracts/dependency-metatx/contracts/ERC2771HandlerUpgradeable.sol\";\nimport {ICatalyst} from \"./interfaces/ICatalyst.sol\";\n\n/// @title Catalyst\n/// @author The Sandbox\n/// @notice This contract manages catalysts which are used to mint new assets.\n/// @dev An ERC1155 contract that manages catalysts, extends multiple OpenZeppelin contracts to\n/// provide a variety of features including, AccessControl, URIStorage, Burnable and more.\n/// The contract includes support for meta transactions.\ncontract Catalyst is\n    ICatalyst,\n    Initializable,\n    ERC1155Upgradeable,\n    ERC1155BurnableUpgradeable,\n    ERC1155SupplyUpgradeable,\n    ERC1155URIStorageUpgradeable,\n    ERC2771HandlerUpgradeable,\n    AccessControlUpgradeable,\n    OperatorFiltererUpgradeable,\n    RoyaltyDistributor\n{\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant BURNER_ROLE = keccak256(\"BURNER_ROLE\");\n\n    uint256 public highestTierIndex;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    modifier onlyValidId(uint256 tokenId) {\n        require(tokenId > 0 && tokenId <= highestTierIndex, \"Catalyst: invalid catalyst id\");\n        _;\n    }\n\n    /// @notice Initialize the contract, setting up initial values for various features.\n    /// @param _baseUri The base URI for the token metadata, most likely set to ipfs://.\n    /// @param _trustedForwarder The trusted forwarder for meta transactions.\n    /// @param _subscription The subscription address.\n    /// @param _defaultAdmin The default admin address.\n    /// @param _defaultMinter The default minter address.\n    /// @param _catalystIpfsCID The IPFS content identifiers for each catalyst.\n    /// @param _royaltyManager, the address of the Manager contract for common royalty recipient\n    function initialize(\n        string memory _baseUri,\n        address _trustedForwarder,\n        address _subscription,\n        address _defaultAdmin,\n        address _defaultMinter,\n        string[] memory _catalystIpfsCID,\n        address _royaltyManager\n    ) external initializer {\n        require(bytes(_baseUri).length != 0, \"Catalyst: URI empty\");\n        require(_trustedForwarder != address(0), \"Catalyst: 1-Zero address\");\n        require(_subscription != address(0), \"Catalyst: 2-Zero address\");\n        require(_defaultAdmin != address(0), \"Catalyst: 3-Zero address\");\n        require(_defaultMinter != address(0), \"Catalyst: 4-Zero address\");\n        require(_royaltyManager != address(0), \"Catalyst: 5-Zero address\");\n        __ERC1155_init(_baseUri);\n        __AccessControl_init();\n        __ERC1155Burnable_init();\n        __ERC1155Supply_init();\n        __ERC1155URIStorage_init();\n        __ERC2771Handler_init(_trustedForwarder);\n        __OperatorFilterer_init(_subscription, true);\n        _setBaseURI(_baseUri);\n        _grantRole(DEFAULT_ADMIN_ROLE, _defaultAdmin);\n        _grantRole(MINTER_ROLE, _defaultMinter);\n        __RoyaltyDistributor_init(_royaltyManager);\n        for (uint256 i = 0; i < _catalystIpfsCID.length; i++) {\n            require(bytes(_catalystIpfsCID[i]).length != 0, \"Catalyst: CID cant be empty\");\n            _setURI(i, _catalystIpfsCID[i]);\n            highestTierIndex = i;\n        }\n    }\n\n    /// @notice Mints a new token, limited to MINTER_ROLE only\n    /// @param to The address that will own the minted token\n    /// @param id The token id to mint\n    /// @param amount The amount to be minted\n    function mint(\n        address to,\n        uint256 id,\n        uint256 amount\n    ) external onlyRole(MINTER_ROLE) onlyValidId(id) {\n        _mint(to, id, amount, \"\");\n    }\n\n    /// @notice Mints a batch of tokens, limited to MINTER_ROLE only\n    /// @param to The address that will own the minted tokens\n    /// @param ids The token ids to mint\n    /// @param amounts The amounts to be minted per token id\n    function mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) external onlyRole(MINTER_ROLE) {\n        for (uint256 i = 0; i < ids.length; i++) {\n            require(ids[i] > 0 && ids[i] <= highestTierIndex, \"Catalyst: invalid catalyst id\");\n        }\n        _mintBatch(to, ids, amounts, \"\");\n    }\n\n    /// @notice Burns a specified amount of tokens from a specific address\n    /// @param account The address to burn from\n    /// @param id The token id to burn\n    /// @param amount The amount to be burned\n    function burnFrom(\n        address account,\n        uint256 id,\n        uint256 amount\n    ) external onlyRole(BURNER_ROLE) {\n        _burn(account, id, amount);\n    }\n\n    /// @notice Burns a batch of tokens from a specific address\n    /// @param account The address to burn from\n    /// @param ids The token ids to burn\n    /// @param amounts The amounts to be burned\n    function burnBatchFrom(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) external onlyRole(BURNER_ROLE) {\n        _burnBatch(account, ids, amounts);\n    }\n\n    /// @notice Add a new catalyst type, limited to DEFAULT_ADMIN_ROLE only\n    /// @param ipfsCID The IPFS content identifiers for the catalyst\n    function addNewCatalystType(string memory ipfsCID) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(bytes(ipfsCID).length != 0, \"Catalyst: CID cant be empty\");\n        uint256 newCatId = ++highestTierIndex;\n        ERC1155URIStorageUpgradeable._setURI(newCatId, ipfsCID);\n        emit NewCatalystTypeAdded(newCatId);\n    }\n\n    /// @notice Set a new trusted forwarder address, limited to DEFAULT_ADMIN_ROLE only\n    /// @dev Change the address of the trusted forwarder for meta-TX\n    /// @param trustedForwarder The new trustedForwarder\n    function setTrustedForwarder(address trustedForwarder) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(trustedForwarder != address(0), \"Catalyst: Zero address\");\n        _setTrustedForwarder(trustedForwarder);\n    }\n\n    /// @notice Set a new URI for specific tokenid\n    /// @param tokenId The token id to set URI for\n    /// @param metadataHash The new URI\n    function setMetadataHash(uint256 tokenId, string memory metadataHash)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n        onlyValidId(tokenId)\n    {\n        require(bytes(metadataHash).length != 0, \"Catalyst: Metadata hash empty\");\n        _setURI(tokenId, metadataHash);\n    }\n\n    /// @notice Set a new base URI\n    /// @param baseURI The new base URI\n    function setBaseURI(string memory baseURI) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(bytes(baseURI).length != 0, \"Catalyst: URI empty\");\n        _setBaseURI(baseURI);\n        emit BaseURISet(baseURI);\n    }\n\n    /// @notice returns full token URI, including baseURI and token metadata URI\n    /// @param tokenId The token id to get URI for\n    /// @return tokenURI the URI of the token\n    function uri(uint256 tokenId)\n        public\n        view\n        override(ERC1155Upgradeable, ERC1155URIStorageUpgradeable)\n        returns (string memory)\n    {\n        return ERC1155URIStorageUpgradeable.uri(tokenId);\n    }\n\n    /// @dev Needed for meta transactions (see EIP-2771)\n    function _msgSender()\n        internal\n        view\n        virtual\n        override(ContextUpgradeable, ERC2771HandlerUpgradeable)\n        returns (address)\n    {\n        return ERC2771HandlerUpgradeable._msgSender();\n    }\n\n    /// @dev Needed for meta transactions (see EIP-2771)\n    function _msgData()\n        internal\n        view\n        virtual\n        override(ContextUpgradeable, ERC2771HandlerUpgradeable)\n        returns (bytes calldata)\n    {\n        return ERC2771HandlerUpgradeable._msgData();\n    }\n\n    /// @dev Sets `baseURI` as the `_baseURI` for all tokens\n    function _setBaseURI(string memory baseURI) internal virtual override {\n        super._setBaseURI(baseURI);\n        emit BaseURISet(baseURI);\n    }\n\n    /// @notice Transfers `value` tokens of type `id` from  `from` to `to`  (with safety call).\n    /// @param from address from which tokens are transfered.\n    /// @param to address to which the token will be transfered.\n    /// @param id the token type transfered.\n    /// @param value amount of token transfered.\n    /// @param data additional data accompanying the transfer.\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 value,\n        bytes memory data\n    ) public override onlyAllowedOperator(from) {\n        super._safeTransferFrom(from, to, id, value, data);\n    }\n\n    /// @notice Transfers `values` tokens of type `ids` from  `from` to `to` (with safety call).\n    /// @dev call data should be optimized to order ids so packedBalance can be used efficiently.\n    /// @param from address from which tokens are transfered.\n    /// @param to address to which the token will be transfered.\n    /// @param ids ids of each token type transfered.\n    /// @param values amount of each token type transfered.\n    /// @param data additional data accompanying the transfer.\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values,\n        bytes memory data\n    ) public override onlyAllowedOperator(from) {\n        super._safeBatchTransferFrom(from, to, ids, values, data);\n    }\n\n    /// @notice Enable or disable approval for `operator` to manage all of the caller's tokens.\n    /// @param operator address which will be granted rights to transfer all tokens of the caller.\n    /// @param approved whether to approve or revoke\n    function setApprovalForAll(address operator, bool approved) public override onlyAllowedOperatorApproval(operator) {\n        super._setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal override(ERC1155Upgradeable, ERC1155SupplyUpgradeable) {\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n    }\n\n    /// @notice Query if a contract implements interface `id`.\n    /// @param interfaceId the interface identifier, as specified in ERC-165.\n    /// @return `true` if the contract implements `interfaceId`.\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        override(ERC1155Upgradeable, AccessControlUpgradeable, RoyaltyDistributor)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n\n    /// @notice This function is used to register Catalyst contract on the Operator Filterer Registry of OpenSea. Can only be called by admin.\n    /// @dev used to register contract and subscribe to the subscriptionOrRegistrantToCopy's black list.\n    /// @param subscriptionOrRegistrantToCopy registration address of the list to subscribe.\n    /// @param subscribe bool to signify subscription \"true\"\" or to copy the list \"false\".\n    function registerAndSubscribe(address subscriptionOrRegistrantToCopy, bool subscribe)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        require(subscriptionOrRegistrantToCopy != address(0), \"Catalyst: Zero address\");\n        _registerAndSubscribe(subscriptionOrRegistrantToCopy, subscribe);\n    }\n\n    /// @notice sets filter registry address\n    /// @param registry the address of the registry\n    function setOperatorRegistry(address registry) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(registry != address(0), \"Catalyst: Zero address\");\n        OperatorFiltererUpgradeable._setOperatorFilterRegistry(registry);\n        emit OperatorRegistrySet(registry);\n    }\n\n    /// @notice A descriptive name for the collection of tokens in this contract.\n    /// @return _name the name of the tokens.\n    function name() external pure returns (string memory _name) {\n        return \"The Sandbox's CATALYSTs\";\n    }\n\n    /// @notice An abbreviated name for the collection of tokens in this contract.\n    /// @return _symbol the symbol of the tokens.\n    function symbol() external pure returns (string memory _symbol) {\n        return \"CATALYST\";\n    }\n\n    uint256[49] private __gap;\n}\n"
    },
    "@sandbox-smart-contracts/asset/contracts/interfaces/IAsset.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\n/// @title Asset interface\n/// @author The Sandbox\ninterface IAsset {\n    // AssetData reflects the asset tokenId structure\n    // Refer to TokenIdUtils.sol\n    struct AssetData {\n        uint256 tokenId;\n        address creator;\n        uint256 amount;\n        uint8 tier;\n        uint16 creatorNonce;\n        bool revealed;\n        string metadataHash;\n        bool bridged;\n    }\n\n    event TrustedForwarderChanged(address indexed newTrustedForwarderAddress);\n\n    /// @notice Mint new tokens\n    /// @dev Only callable by the minter role\n    /// @param to The address of the recipient\n    /// @param id The id of the token to mint\n    /// @param amount The amount of the token to mint\n    /// @param metadataHash The metadata hash of the token to mint\n    function mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        string memory metadataHash\n    ) external;\n\n    /// @notice Mint new tokens with catalyst tier chosen by the creator\n    /// @dev Only callable by the minter role\n    /// @param to The address of the recipient\n    /// @param ids The ids of the tokens to mint\n    /// @param amounts The amounts of the tokens to mint\n    /// @param metadataHashes The metadata hashes of the tokens to mint\n    function mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        string[] memory metadataHashes\n    ) external;\n\n    /// @notice Burn a token from a given account\n    /// @dev Only the minter role can burn tokens\n    /// @dev This function was added with token recycling and bridging in mind but may have other use cases\n    /// @param account The account to burn tokens from\n    /// @param id The token id to burn\n    /// @param amount The amount of tokens to burn\n    function burnFrom(\n        address account,\n        uint256 id,\n        uint256 amount\n    ) external;\n\n    /// @notice Burn a batch of tokens from a given account\n    /// @dev Only the minter role can burn tokens\n    /// @dev This function was added with token recycling and bridging in mind but may have other use cases\n    /// @dev The length of the ids and amounts arrays must be the same\n    /// @param account The account to burn tokens from\n    /// @param ids An array of token ids to burn\n    /// @param amounts An array of amounts of tokens to burn\n    function burnBatchFrom(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) external;\n\n    /// @notice returns the tokenId associated with provided metadata hash\n    /// @param metadataHash The metadata hash to get tokenId for\n    /// @return tokenId the tokenId associated with the metadata hash\n    function getTokenIdByMetadataHash(string memory metadataHash) external view returns (uint256 tokenId);\n}\n"
    },
    "@sandbox-smart-contracts/asset/contracts/interfaces/IAssetCreate.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\n/// @title AssetCreate interface\n/// @author The Sandbox\ninterface IAssetCreate {\n    event TrustedForwarderChanged(address indexed newTrustedForwarderAddress);\n    event AssetMinted(\n        address indexed creator,\n        uint256 tokenId,\n        uint16 tier,\n        uint256 amount,\n        string metadataHash,\n        bool revealed\n    );\n    event SpecialAssetMinted(\n        address indexed creator,\n        uint256 tokenId,\n        uint16 tier,\n        uint256 amount,\n        string metadataHash,\n        bool revealed\n    );\n    event SpecialAssetBatchMinted(\n        address indexed creator,\n        uint256[] tokenIds,\n        uint8[] tiers,\n        uint256[] amounts,\n        string[] metadataHashes,\n        bool[] revealed\n    );\n    event AssetBatchMinted(\n        address indexed creator,\n        uint256[] tokenIds,\n        uint8[] tiers,\n        uint256[] amounts,\n        string[] metadataHashes,\n        bool[] revealed\n    );\n}\n"
    },
    "@sandbox-smart-contracts/asset/contracts/interfaces/IAssetReveal.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\n/// @title AssetReveal interface\n/// @author The Sandbox\ninterface IAssetReveal {\n    event TrustedForwarderChanged(address indexed newTrustedForwarderAddress);\n    event AssetRevealBurn(address indexed revealer, uint256 unrevealedTokenId, uint256 amount);\n    event AssetRevealBatchBurn(address indexed revealer, uint256[] unrevealedTokenIds, uint256[] amounts);\n    event AssetRevealMint(\n        address indexed recipient,\n        uint256 unrevealedTokenId,\n        uint256[] amounts,\n        uint256[] newTokenIds,\n        bytes32[] revealHashes\n    );\n    event AssetRevealBatchMint(\n        address indexed recipient,\n        uint256[] unrevealedTokenIds,\n        uint256[][] amounts,\n        uint256[][] newTokenIds,\n        bytes32[][] revealHashes\n    );\n}\n"
    },
    "@sandbox-smart-contracts/asset/contracts/interfaces/ICatalyst.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\ninterface ICatalyst {\n    enum CatalystType {TSB_EXCLUSIVE, COMMON, UNCOMMON, RARE, EPIC, LEGENDARY, MYTHIC}\n\n    event TrustedForwarderChanged(address indexed newTrustedForwarderAddress);\n    event NewCatalystTypeAdded(uint256 catalystId);\n    event DefaultRoyaltyChanged(address indexed newDefaultRoyaltyRecipient, uint256 newDefaultRoyaltyAmount);\n    event BaseURISet(string baseURI);\n    event OperatorRegistrySet(address indexed registry);\n\n    /// @notice Mints a new token, limited to MINTER_ROLE only\n    /// @param to The address that will own the minted token\n    /// @param id The token id to mint\n    /// @param amount The amount to be minted\n    function mint(\n        address to,\n        uint256 id,\n        uint256 amount\n    ) external;\n\n    /// @notice Mints a batch of tokens, limited to MINTER_ROLE only\n    /// @param to The address that will own the minted tokens\n    /// @param ids The token ids to mint\n    /// @param amounts The amounts to be minted per token id\n    function mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) external;\n\n    /// @notice Burns a specified amount of tokens from a specific address\n    /// @param account The address to burn from\n    /// @param id The token id to burn\n    /// @param amount The amount to be burned\n    function burnFrom(\n        address account,\n        uint256 id,\n        uint256 amount\n    ) external;\n\n    /// @notice Burns a batch of tokens from a specific address\n    /// @param account The address to burn from\n    /// @param ids The token ids to burn\n    /// @param amounts The amounts to be burned\n    function burnBatchFrom(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) external;\n\n    /// @notice Add a new catalyst type, limited to DEFAULT_ADMIN_ROLE only\n    /// @param ipfsCID The royalty bps for the catalyst\n    function addNewCatalystType(string memory ipfsCID) external;\n\n    /// @notice Set a new URI for specific tokenid\n    /// @param tokenId The token id to set URI for\n    /// @param metadataHash The new URI\n    function setMetadataHash(uint256 tokenId, string memory metadataHash) external;\n\n    /// @notice Set a new base URI\n    /// @param baseURI The new base URI\n    function setBaseURI(string memory baseURI) external;\n}\n"
    },
    "@sandbox-smart-contracts/asset/contracts/interfaces/ITokenUtils.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport {IRoyaltyUGC} from \"@sandbox-smart-contracts/dependency-royalty-management/contracts/interfaces/IRoyaltyUGC.sol\";\n\n/// @title TokenUtils interface\n/// @author The Sandbox\ninterface ITokenUtils is IRoyaltyUGC {\n    /// @notice Extracts the tier from a given token id\n    /// @param tokenId The token id to extract the tier from\n    /// @return tier The asset tier, determined by the catalyst used to create it\n    function getTier(uint256 tokenId) external pure returns (uint8 tier);\n\n    /// @notice Extracts the revealed flag from a given token id\n    /// @param tokenId The token id to extract the revealed flag from\n    /// @return revealed Whether the asset is revealed or not\n    function isRevealed(uint256 tokenId) external pure returns (bool revealed);\n\n    /// @notice Extracts the asset nonce from a given token id\n    /// @param tokenId The token id to extract the asset nonce from\n    /// @return creatorNonce The asset creator nonce\n    function getCreatorNonce(uint256 tokenId) external pure returns (uint16 creatorNonce);\n\n    /// @notice Extracts the abilities and enhancements hash from a given token id\n    /// @param tokenId The token id to extract reveal nonce from\n    /// @return revealNonce The reveal nonce of the asset\n    function getRevealNonce(uint256 tokenId) external pure returns (uint16 revealNonce);\n\n    /// @notice Extracts the bridged flag from a given token id\n    /// @param tokenId The token id to extract the bridged flag from\n    /// @return bridged Whether the asset is bridged or not\n    function isBridged(uint256 tokenId) external pure returns (bool bridged);\n\n    /// @notice Extracts the creator address from a given token id\n    /// @param tokenId The token id to extract the creator address from\n    /// @return creator The asset creator address\n    function getCreatorAddress(uint256 tokenId) external pure returns (address creator);\n}\n"
    },
    "@sandbox-smart-contracts/asset/contracts/libraries/TokenIdUtils.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IAsset} from \"../interfaces/IAsset.sol\";\n\n/// @title TokenIdUtils library\n/// @author The Sandbox\n/// @notice Contains utility functions for token ids\nlibrary TokenIdUtils {\n    // Layer masks\n    uint256 public constant TIER_MASK = 0xFF;\n    uint256 public constant NONCE_MASK = 0xFFFF;\n    uint256 public constant REVEAL_NONCE_MASK = 0xFFFF;\n    uint256 public constant BRIDGED_MASK = 0x1;\n\n    // Bit shifts\n    uint256 public constant CREATOR_SHIFT = 0;\n    uint256 public constant TIER_SHIFT = 160;\n    uint256 public constant NONCE_SHIFT = 168;\n    uint256 public constant REVEAL_NONCE_SHIFT = 184;\n    uint256 public constant BRIDGED_SHIFT = 200;\n\n    /// @notice Generates a token id for a given asset\n    /// @dev The token id is generated by concatenating the following fields:\n    /// @dev creator address, tier, creator nonce, reveal nonce and bridged boolean\n    /// @dev The first 160 bits are the creator address\n    /// @dev The next 8 bits are the tier\n    /// @dev The next 16 bits are the creator nonce\n    /// @dev The next 16 bits are for reveal nonce.\n    /// @dev The last bit is for bridged boolean\n    /// @param creator The address of the creator of the asset\n    /// @param tier The tier of the asset determined by the catalyst used to create it\n    /// @param creatorNonce The nonce of the asset creator\n    /// @param revealNonce The reveal nonce of the asset\n    /// @param bridged Whether the asset is bridged or not\n    /// @return tokenId The generated token id\n    function generateTokenId(\n        address creator,\n        uint8 tier,\n        uint16 creatorNonce,\n        uint16 revealNonce,\n        bool bridged\n    ) internal pure returns (uint256 tokenId) {\n        uint160 creatorAddress = uint160(creator);\n\n        tokenId = tokenId =\n            uint256(creatorAddress) |\n            (uint256(tier) << TIER_SHIFT) |\n            (uint256(creatorNonce) << NONCE_SHIFT) |\n            (uint256(revealNonce) << REVEAL_NONCE_SHIFT) |\n            (uint256(bridged ? 1 : 0) << BRIDGED_SHIFT);\n\n        return tokenId;\n    }\n\n    /// @notice Extracts the creator address from a given token id\n    /// @param tokenId The token id to extract the creator address from\n    /// @return creator The asset creator address\n    function getCreatorAddress(uint256 tokenId) internal pure returns (address creator) {\n        creator = address(uint160(tokenId));\n        return creator;\n    }\n\n    /// @notice Extracts the tier from a given token id\n    /// @param tokenId The token id to extract the tier from\n    /// @return tier The asset tier, determined by the catalyst used to create it\n    function getTier(uint256 tokenId) internal pure returns (uint8 tier) {\n        tier = uint8((tokenId >> TIER_SHIFT) & TIER_MASK);\n        return tier;\n    }\n\n    /// @notice Extracts the revealed flag from a given token id\n    /// @param tokenId The token id to extract the revealed flag from\n    /// @return isRevealed Whether the asset is revealed or not\n    function isRevealed(uint256 tokenId) internal pure returns (bool) {\n        uint16 revealNonce = getRevealNonce(tokenId);\n        return revealNonce != 0;\n    }\n\n    /// @notice Extracts the asset nonce from a given token id\n    /// @param tokenId The token id to extract the asset nonce from\n    /// @return creatorNonce The asset creator nonce\n    function getCreatorNonce(uint256 tokenId) internal pure returns (uint16) {\n        uint16 creatorNonce = uint16((tokenId >> NONCE_SHIFT) & NONCE_MASK);\n        return creatorNonce;\n    }\n\n    /// @notice Extracts the abilities and enhancements hash from a given token id\n    /// @param tokenId The token id to extract reveal nonce from\n    /// @return revealNonce The reveal nonce of the asset\n    function getRevealNonce(uint256 tokenId) internal pure returns (uint16) {\n        uint16 revealNonce = uint16((tokenId >> REVEAL_NONCE_SHIFT) & REVEAL_NONCE_MASK);\n        return revealNonce;\n    }\n\n    /// @notice Extracts the bridged flag from a given token id\n    /// @param tokenId The token id to extract the bridged flag from\n    /// @return bridged Whether the asset is bridged or not\n    function isBridged(uint256 tokenId) internal pure returns (bool) {\n        bool bridged = ((tokenId >> BRIDGED_SHIFT) & BRIDGED_MASK) == 1;\n        return bridged;\n    }\n\n    /// @notice Extracts the asset data from a given token id\n    /// @dev Created to limit the number of functions that need to be called when revealing an asset\n    /// @param tokenId The token id to extract the asset data from\n    /// @return data The asset data struct\n    function getData(uint256 tokenId) internal pure returns (IAsset.AssetData memory data) {\n        data.creator = getCreatorAddress(tokenId);\n        data.tier = getTier(tokenId);\n        data.revealed = isRevealed(tokenId);\n        data.creatorNonce = getCreatorNonce(tokenId);\n        data.bridged = isBridged(tokenId);\n    }\n}\n"
    },
    "@sandbox-smart-contracts/asset/contracts/mock/MockAsset.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\n// mock the asset contract to test the _msgData() function\n\nimport {Asset} from \"../Asset.sol\";\nimport {\n    IOperatorFilterRegistry\n} from \"@sandbox-smart-contracts/dependency-operator-filter/contracts/interfaces/IOperatorFilterRegistry.sol\";\n\ncontract MockAsset is Asset {\n    /// @notice sets registry and subscribe to subscription\n    /// @param registry address of registry\n    /// @param subscription address to subscribe\n    function setRegistryAndSubscribe(address registry, address subscription) external {\n        _setOperatorFilterRegistry(registry);\n        IOperatorFilterRegistry operatorFilterRegistry = _getOperatorFilterRegistry();\n        operatorFilterRegistry = IOperatorFilterRegistry(registry);\n        operatorFilterRegistry.registerAndSubscribe(address(this), subscription);\n    }\n\n    /// @notice Mint new tokens with out minter role\n    /// @param to The address of the recipient\n    /// @param id The id of the token to mint\n    /// @param amount The amount of the token to mint\n    function mintWithoutMinterRole(\n        address to,\n        uint256 id,\n        uint256 amount\n    ) external {\n        _mint(to, id, amount, \"\");\n    }\n\n    /// @notice set approval for asset transfer without filtering\n    /// @param operator operator to be approved\n    /// @param approved bool value for giving (true) and canceling (false) approval\n    function setApprovalForAllWithoutFilter(address operator, bool approved) public virtual {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    function msgData() external view returns (bytes memory) {\n        return _msgData();\n    }\n}\n"
    },
    "@sandbox-smart-contracts/asset/contracts/mock/MockAssetCreate.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\n// mock the asset contract to test the _msgData() function to satisfy the coverage\n\nimport {AssetCreate} from \"../AssetCreate.sol\";\n\ncontract MockAssetCreate is AssetCreate {\n    function msgData() external view returns (bytes memory) {\n        return _msgData();\n    }\n}\n"
    },
    "@sandbox-smart-contracts/asset/contracts/mock/MockAssetReveal.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\n// mock the asset contract to test the _msgData() function to satisfy the coverage\n\nimport {AssetReveal} from \"../AssetReveal.sol\";\n\ncontract MockAssetReveal is AssetReveal {\n    function msgData() external view returns (bytes memory) {\n        return _msgData();\n    }\n}\n"
    },
    "@sandbox-smart-contracts/asset/contracts/mock/MockCatalyst.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity 0.8.18;\n\nimport {Catalyst} from \"../Catalyst.sol\";\nimport {\n    IOperatorFilterRegistry\n} from \"@sandbox-smart-contracts/dependency-operator-filter/contracts/OperatorFiltererUpgradeable.sol\";\n\ncontract MockCatalyst is Catalyst {\n    /// @notice sets registry and subscribe to subscription\n    /// @param registry address of registry\n    /// @param subscription address to subscribe\n    function setRegistryAndSubscribe(address registry, address subscription) external {\n        _setOperatorFilterRegistry(registry);\n        IOperatorFilterRegistry operatorFilterRegistry = _getOperatorFilterRegistry();\n        operatorFilterRegistry = IOperatorFilterRegistry(registry);\n        operatorFilterRegistry.registerAndSubscribe(address(this), subscription);\n    }\n\n    /// @notice Mint new tokens with out minter role\n    /// @param to The address of the recipient\n    /// @param id The id of the token to mint\n    /// @param amount The amount of the token to mint\n    function mintWithoutMinterRole(\n        address to,\n        uint256 id,\n        uint256 amount\n    ) external {\n        _mint(to, id, amount, \"\");\n    }\n\n    /// @notice set approval for asset transfer without filteration\n    /// @param operator operator to be approved\n    /// @param approved bool value for giving (true) and canceling (false) approval\n    function setApprovalForAllWithoutFilter(address operator, bool approved) public virtual {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n}\n"
    },
    "@sandbox-smart-contracts/asset/contracts/mock/MockMinter.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IAsset} from \"../interfaces/IAsset.sol\";\nimport {TokenIdUtils} from \"../libraries/TokenIdUtils.sol\";\n\ncontract MockMinter {\n    using TokenIdUtils for uint256;\n\n    IAsset public assetContract;\n\n    mapping(address => uint16) public creatorNonces;\n\n    event Minted(uint256 tokenId, uint256 amount);\n\n    constructor(address _assetContract) {\n        assetContract = IAsset(_assetContract);\n    }\n\n    /// @dev Mints a specified number of unrevealed copies of specific tier\n    function mintAsset(\n        address recipient,\n        uint256 amount,\n        uint8 tier,\n        bool revealed,\n        string calldata metadataHash\n    ) public {\n        // increment nonce\n        unchecked {creatorNonces[msg.sender]++;}\n        // get current creator nonce\n        uint16 creatorNonce = creatorNonces[msg.sender];\n        uint256 tokenId = TokenIdUtils.generateTokenId(msg.sender, tier, creatorNonce, revealed ? 1 : 0, false);\n\n        assetContract.mint(recipient, tokenId, amount, metadataHash);\n        emit Minted(tokenId, amount);\n    }\n}\n"
    },
    "@sandbox-smart-contracts/asset/contracts/mock/TokenIdUtilsWrapped.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {TokenIdUtils} from \"../libraries/TokenIdUtils.sol\";\nimport {IAsset} from \"../interfaces/IAsset.sol\";\n\ncontract TokenIdUtilsWrapped {\n    function generateTokenId(\n        address creator,\n        uint8 tier,\n        uint16 creatorNonce,\n        uint16 revealNonce,\n        bool bridged\n    ) public pure returns (uint256 tokenId) {\n        return TokenIdUtils.generateTokenId(creator, tier, creatorNonce, revealNonce, bridged);\n    }\n\n    function getCreatorAddress(uint256 tokenId) public pure returns (address creator) {\n        return TokenIdUtils.getCreatorAddress(tokenId);\n    }\n\n    function getTier(uint256 tokenId) public pure returns (uint8 tier) {\n        return TokenIdUtils.getTier(tokenId);\n    }\n\n    function getCreatorNonce(uint256 tokenId) public pure returns (uint16 creatorNonce) {\n        return TokenIdUtils.getCreatorNonce(tokenId);\n    }\n\n    function isRevealed(uint256 tokenId) public pure returns (bool) {\n        return TokenIdUtils.isRevealed(tokenId);\n    }\n\n    function getRevealNonce(uint256 tokenId) public pure returns (uint16) {\n        return TokenIdUtils.getRevealNonce(tokenId);\n    }\n\n    function isBridged(uint256 tokenId) public pure returns (bool) {\n        return TokenIdUtils.isBridged(tokenId);\n    }\n\n    function getData(uint256 tokenId) public pure returns (IAsset.AssetData memory data) {\n        return TokenIdUtils.getData(tokenId);\n    }\n\n    function TIER_MASK() public pure returns (uint256) {\n        return TokenIdUtils.TIER_MASK;\n    }\n\n    function NONCE_MASK() public pure returns (uint256) {\n        return TokenIdUtils.NONCE_MASK;\n    }\n\n    function REVEAL_NONCE_MASK() public pure returns (uint256) {\n        return TokenIdUtils.REVEAL_NONCE_MASK;\n    }\n\n    function BRIDGED_MASK() public pure returns (uint256) {\n        return TokenIdUtils.BRIDGED_MASK;\n    }\n\n    function TIER_SHIFT() public pure returns (uint256) {\n        return TokenIdUtils.TIER_SHIFT;\n    }\n\n    function NONCE_SHIFT() public pure returns (uint256) {\n        return TokenIdUtils.NONCE_SHIFT;\n    }\n\n    function REVEAL_NONCE_SHIFT() public pure returns (uint256) {\n        return TokenIdUtils.REVEAL_NONCE_SHIFT;\n    }\n\n    function BRIDGED_SHIFT() public pure returns (uint256) {\n        return TokenIdUtils.BRIDGED_SHIFT;\n    }\n}\n"
    },
    "@sandbox-smart-contracts/dependency-metatx/contracts/ERC2771HandlerAbstract.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @dev minimal ERC2771 handler to keep bytecode-size down\n/// based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/metatx/ERC2771Context.sol\nabstract contract ERC2771HandlerAbstract {\n    /// @notice return true if the forwarder is the trusted forwarder\n    /// @param forwarder trusted forwarder address to check\n    /// @return true if the address is the same as the trusted forwarder\n    function isTrustedForwarder(address forwarder) external view returns (bool) {\n        return _isTrustedForwarder(forwarder);\n    }\n\n    /// @notice if the call is from the trusted forwarder the sender is extracted from calldata, msg.sender otherwise\n    /// @return sender the calculated address of the sender\n    function _msgSender() internal view virtual returns (address sender) {\n        if (_isTrustedForwarder(msg.sender) && msg.data.length >= 20) {\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\n            }\n        } else {\n            sender = msg.sender;\n        }\n    }\n\n    /// @notice if the call is from the trusted forwarder the sender is removed from calldata\n    /// @return the calldata without the sender\n    function _msgData() internal view virtual returns (bytes calldata) {\n        if (_isTrustedForwarder(msg.sender) && msg.data.length >= 20) {\n            return msg.data[:msg.data.length - 20];\n        } else {\n            return msg.data;\n        }\n    }\n\n    /// @notice return true if the forwarder is the trusted forwarder\n    /// @param forwarder trusted forwarder address to check\n    /// @return true if the address is the same as the trusted forwarder\n    /// @dev this function must be IMPLEMENTED\n    function _isTrustedForwarder(address forwarder) internal view virtual returns (bool);\n}\n"
    },
    "@sandbox-smart-contracts/dependency-metatx/contracts/ERC2771HandlerUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {ERC2771HandlerAbstract} from \"./ERC2771HandlerAbstract.sol\";\n\n/// @dev minimal ERC2771 handler to keep bytecode-size down\n/// based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/metatx/ERC2771Context.sol\ncontract ERC2771HandlerUpgradeable is Initializable, ERC2771HandlerAbstract {\n    address private _trustedForwarder;\n\n    /// @notice Emitted when a `newTrustedForwarder` is set, replacing the `oldTrustedForwarder`\n    /// @param oldTrustedForwarder old trusted forwarder\n    /// @param newTrustedForwarder new trusted forwarder\n    /// @param operator the sender of the transaction\n    event TrustedForwarderSet(\n        address indexed oldTrustedForwarder,\n        address indexed newTrustedForwarder,\n        address indexed operator\n    );\n\n    /// @notice initialize the trusted forwarder address\n    /// @param forwarder trusted forwarder address or zero to disable it\n    // solhint-disable-next-line func-name-mixedcase\n    function __ERC2771Handler_init(address forwarder) internal onlyInitializing {\n        __ERC2771Handler_init_unchained(forwarder);\n    }\n\n    /// @notice initialize the trusted forwarder address\n    /// @param forwarder trusted forwarder address or zero to disable it\n    // solhint-disable-next-line func-name-mixedcase\n    function __ERC2771Handler_init_unchained(address forwarder) internal onlyInitializing {\n        _setTrustedForwarder(forwarder);\n    }\n\n    /// @notice return the address of the trusted forwarder\n    /// @return return the address of the trusted forwarder\n    function getTrustedForwarder() external view returns (address) {\n        return _trustedForwarder;\n    }\n\n    /// @notice set the address of the trusted forwarder\n    /// @param newForwarder the address of the new forwarder.\n    function _setTrustedForwarder(address newForwarder) internal virtual {\n        require(newForwarder != _trustedForwarder, \"ERC2771HandlerUpgradeable: forwarder already set\");\n        emit TrustedForwarderSet(_trustedForwarder, newForwarder, _msgSender());\n        _trustedForwarder = newForwarder;\n    }\n\n    /// @notice return true if the forwarder is the trusted forwarder\n    /// @param forwarder trusted forwarder address to check\n    /// @return true if the address is the same as the trusted forwarder\n    function _isTrustedForwarder(address forwarder) internal view virtual override returns (bool) {\n        return forwarder == _trustedForwarder;\n    }\n\n    /// @notice if the call is from the trusted forwarder the sender is extracted from calldata, msg.sender otherwise\n    /// @return sender the calculated address of the sender\n    function _msgSender() internal view virtual override returns (address sender) {\n        return super._msgSender();\n    }\n\n    /// @notice if the call is from the trusted forwarder the sender is removed from calldata\n    /// @return the calldata without the sender\n    function _msgData() internal view virtual override returns (bytes calldata) {\n        return super._msgData();\n    }\n\n    uint256[49] private __gap;\n}\n"
    },
    "@sandbox-smart-contracts/dependency-operator-filter/contracts/interfaces/IOperatorFilterRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @title IOperatorFilterRegistry\n/// @notice Interface for managing operators and filtering.\ninterface IOperatorFilterRegistry {\n    ///@notice Returns true if operator is not filtered for a given token, either by address or codeHash. Also returns\n    ///        true if supplied registrant address is not registered.\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool isAllowed);\n\n    ///@notice Registers an address with the registry. May be called by address itself or by EIP-173 owner.\n    function register(address registrant) external;\n\n    ///@notice Registers an address with the registry and \"subscribes\" to another address's filtered operators and codeHashes.\n    function registerAndSubscribe(address registrant, address subscription) external;\n\n    ///@notice Registers an address with the registry and copies the filtered operators and codeHashes from another\n    ///        address without subscribing.\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\n\n    ///@notice Unregisters an address with the registry and removes its subscription. May be called by address itself or by EIP-173 owner.\n    ///        Note that this does not remove any filtered addresses or codeHashes.\n    ///        Also note that any subscriptions to this registrant will still be active and follow the existing filtered addresses and codehashes.\n    function unregister(address addr) external;\n\n    ///@notice Update an operator address for a registered address - when filtered is true, the operator is filtered.\n    function updateOperator(\n        address registrant,\n        address operator,\n        bool filtered\n    ) external;\n\n    ///@notice Update multiple operators for a registered address - when filtered is true, the operators will be filtered. Reverts on duplicates.\n    function updateOperators(\n        address registrant,\n        address[] calldata operators,\n        bool filtered\n    ) external;\n\n    ///@notice Update a codeHash for a registered address - when filtered is true, the codeHash is filtered.\n    function updateCodeHash(\n        address registrant,\n        bytes32 codehash,\n        bool filtered\n    ) external;\n\n    ///@notice Update multiple codeHashes for a registered address - when filtered is true, the codeHashes will be filtered. Reverts on duplicates.\n    function updateCodeHashes(\n        address registrant,\n        bytes32[] calldata codeHashes,\n        bool filtered\n    ) external;\n\n    ///@notice Subscribe an address to another registrant's filtered operators and codeHashes. Will remove previous\n    ///        subscription if present.\n    ///        Note that accounts with subscriptions may go on to subscribe to other accounts - in this case,\n    ///        subscriptions will not be forwarded. Instead the former subscription's existing entries will still be\n    ///        used.\n    function subscribe(address registrant, address registrantToSubscribe) external;\n\n    ///@notice Unsubscribe an address from its current subscribed registrant, and optionally copy its filtered operators and codeHashes.\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\n\n    ///@notice Get the subscription address of a given registrant, if any.\n    function subscriptionOf(address addr) external returns (address registrant);\n\n    ///@notice Get the set of addresses subscribed to a given registrant.\n    ///        Note that order is not guaranteed as updates are made.\n    function subscribers(address registrant) external returns (address[] memory subscribersList);\n\n    ///@notice Get the subscriber at a given index in the set of addresses subscribed to a given registrant.\n    ///        Note that order is not guaranteed as updates are made.\n    function subscriberAt(address registrant, uint256 index) external returns (address subscriberAddress);\n\n    ///@notice Copy filtered operators and codeHashes from a different registrantToCopy to addr.\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\n\n    ///@notice Returns true if operator is filtered by a given address or its subscription.\n    function isOperatorFiltered(address registrant, address operator) external returns (bool isFiltered);\n\n    ///@notice Returns true if the hash of an address's code is filtered by a given address or its subscription.\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool isFiltered);\n\n    ///@notice Returns true if a codeHash is filtered by a given address or its subscription.\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool isFiltered);\n\n    ///@notice Returns a list of filtered operators for a given address or its subscription.\n    function filteredOperators(address addr) external returns (address[] memory operatorList);\n\n    ///@notice Returns the set of filtered codeHashes for a given address or its subscription.\n    ///        Note that order is not guaranteed as updates are made.\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory codeHashList);\n\n    ///@notice Returns the filtered operator at the given index of the set of filtered operators for a given address or\n    ///        its subscription.\n    ///        Note that order is not guaranteed as updates are made.\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address operator);\n\n    ///@notice Returns the filtered codeHash at the given index of the list of filtered codeHashes for a given address or\n    ///        its subscription.\n    ///        Note that order is not guaranteed as updates are made.\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32 codeHash);\n\n    ///@notice Returns true if an address has registered\n    function isRegistered(address addr) external returns (bool registered);\n\n    ///@dev Convenience method to compute the code hash of an arbitrary contract\n    function codeHashOf(address addr) external returns (bytes32 codeHash);\n}\n"
    },
    "@sandbox-smart-contracts/dependency-operator-filter/contracts/OperatorFiltererUpgradeable.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {IOperatorFilterRegistry} from \"./interfaces/IOperatorFilterRegistry.sol\";\nimport {ContextUpgradeable} from \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\n\n///@title OperatorFiltererUpgradeable\n///@author The Sandbox\n///@notice This contract would subscribe or copy or just to the subscription provided or just register to default subscription list. The operator filter registry's address could be set using a setter which could be implemented in inheriting contract\nabstract contract OperatorFiltererUpgradeable is Initializable, ContextUpgradeable {\n    event OperatorFilterRegistrySet(address indexed registry);\n\n    IOperatorFilterRegistry private operatorFilterRegistry;\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __OperatorFilterer_init(address subscriptionOrRegistrantToCopy, bool subscribe) internal onlyInitializing {\n        operatorFilterRegistry = IOperatorFilterRegistry(0x000000000000AAeB6D7670E522A718067333cd4E); // Address of the operator filterer registry\n        // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\n        // will not revert, but the contract will need to be registered with the registry once it is deployed in\n        // order for the modifier to filter addresses.\n        _registerAndSubscribe(subscriptionOrRegistrantToCopy, subscribe);\n    }\n\n    function _registerAndSubscribe(address subscriptionOrRegistrantToCopy, bool subscribe) internal {\n        if (address(operatorFilterRegistry).code.length > 0) {\n            if (!operatorFilterRegistry.isRegistered(address(this))) {\n                if (subscribe) {\n                    operatorFilterRegistry.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\n                } else {\n                    if (subscriptionOrRegistrantToCopy != address(0)) {\n                        operatorFilterRegistry.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\n                    } else {\n                        operatorFilterRegistry.register(address(this));\n                    }\n                }\n            }\n        }\n    }\n\n    modifier onlyAllowedOperator(address from) virtual {\n        // Check registry code length to facilitate testing in environments without a deployed registry.\n        if (address(operatorFilterRegistry).code.length > 0) {\n            // Allow spending tokens from addresses with balance\n            // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\n            // from an EOA.\n            if (from == _msgSender()) {\n                _;\n                return;\n            }\n            if (!operatorFilterRegistry.isOperatorAllowed(address(this), _msgSender())) {\n                revert(\"Operator Not Allowed\");\n            }\n        }\n        _;\n    }\n\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\n        // Check registry code length to facilitate testing in environments without a deployed registry.\n        if (address(operatorFilterRegistry).code.length > 0) {\n            if (!operatorFilterRegistry.isOperatorAllowed(address(this), operator)) {\n                revert(\"Operator Not Allowed\");\n            }\n        }\n        _;\n    }\n\n    /// @notice returns the operator filter registry.\n    /// @return operatorFilterRegistryAddress address of operator filter registry contract.\n    function getOperatorFilterRegistry() external view returns (IOperatorFilterRegistry operatorFilterRegistryAddress) {\n        return _getOperatorFilterRegistry();\n    }\n\n    /// @notice internal method to set the operator filter registry\n    /// @param registry address the registry.\n    function _setOperatorFilterRegistry(address registry) internal {\n        operatorFilterRegistry = IOperatorFilterRegistry(registry);\n        emit OperatorFilterRegistrySet(registry);\n    }\n\n    /// @notice internal method to get the operator filter registry.\n    function _getOperatorFilterRegistry()\n        internal\n        view\n        returns (IOperatorFilterRegistry operatorFilterRegistryAddress)\n    {\n        return operatorFilterRegistry;\n    }\n\n    uint256[49] private __gap;\n}\n"
    },
    "@sandbox-smart-contracts/dependency-royalty-management/contracts/interfaces/IMultiRoyaltyDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {IMultiRoyaltyRecipients} from \"./IMultiRoyaltyRecipients.sol\";\nimport {Recipient} from \"@manifoldxyz/royalty-registry-solidity/contracts/overrides/IRoyaltySplitter.sol\";\n\n///Multi-receiver EIP2981 reference override implementation\ninterface IMultiRoyaltyDistributor is IERC165, IMultiRoyaltyRecipients {\n    event TokenRoyaltyRemoved(uint256 tokenId);\n    event DefaultRoyaltyBpsSet(uint16 royaltyBPS);\n\n    event DefaultRoyaltyReceiverSet(address indexed recipient);\n\n    event RoyaltyRecipientSet(address indexed splitter, address indexed recipient);\n\n    event TokenRoyaltySplitterSet(uint256 tokenId, address splitterAddress);\n\n    event RoyaltyManagerSet(address indexed _royaltyManager);\n\n    struct TokenRoyaltyConfig {\n        uint256 tokenId;\n        uint16 royaltyBPS;\n        Recipient[] recipients;\n    }\n\n    ///@notice Set per token royalties.  Passing a recipient of address(0) will delete any existing configuration\n    ///@param tokenId The ID of the token for which to set the royalties.\n    ///@param recipient The address that will receive the royalties.\n    ///@param creator The creator's address for the token.\n    function setTokenRoyalties(\n        uint256 tokenId,\n        address payable recipient,\n        address creator\n    ) external;\n\n    ///@notice Helper function to get all splits contracts\n    ///@return an array of royalty receiver\n    function getAllSplits() external view returns (address payable[] memory);\n}\n"
    },
    "@sandbox-smart-contracts/dependency-royalty-management/contracts/interfaces/IMultiRoyaltyRecipients.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {Recipient} from \"@manifoldxyz/royalty-registry-solidity/contracts/overrides/IRoyaltySplitter.sol\";\n\n/// Multi-receiver EIP2981 implementation\ninterface IMultiRoyaltyRecipients is IERC165 {\n    /// @dev Helper function to get all recipients\n    function getRecipients(uint256 tokenId) external view returns (Recipient[] memory);\n}\n"
    },
    "@sandbox-smart-contracts/dependency-royalty-management/contracts/interfaces/IRoyaltyManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Recipient} from \"@manifoldxyz/royalty-registry-solidity/contracts/overrides/IRoyaltySplitter.sol\";\n\n/// @title IRoyaltyManager\n/// @notice interface for RoyaltyManager Contract\ninterface IRoyaltyManager {\n    event RecipientSet(address indexed commonRecipient);\n\n    event SplitSet(uint16 commonSplit);\n\n    event RoyaltySet(uint16 royaltyBps, address indexed contractAddress);\n\n    event TrustedForwarderSet(address indexed previousForwarder, address indexed newForwarder);\n\n    event SplitterDeployed(address indexed creator, address indexed recipient, address splitterAddress);\n\n    ///@notice sets the common recipient\n    ///@param _commonRecipient is the common recipient for all the splitters\n    function setRecipient(address payable _commonRecipient) external;\n\n    ///@notice sets the common split\n    ///@param commonSplit split for the common recipient\n    function setSplit(uint16 commonSplit) external;\n\n    ///@notice to be called by the splitters to get the common recipient and split\n    ///@return recipient which has the common recipient and split\n    function getCommonRecipient() external view returns (Recipient memory recipient);\n\n    ///@notice returns the amount of basis points allocated to the creator\n    ///@return creatorSplit the share of creator in bps\n    function getCreatorSplit() external view returns (uint16 creatorSplit);\n\n    ///@notice returns the commonRecipient and EIP2981 royalty split\n    ///@return recipient address of common royalty recipient\n    ///@return royaltySplit contract EIP2981 royalty bps\n    function getRoyaltyInfo() external view returns (address payable recipient, uint16 royaltySplit);\n\n    ///@notice deploys splitter for creator\n    ///@param creator the address of the creator\n    ///@param recipient the wallet of the recipient where they would receive their royalty\n    ///@return creatorSplitterAddress splitter's address deployed for creator\n    function deploySplitter(address creator, address payable recipient)\n        external\n        returns (address payable creatorSplitterAddress);\n\n    ///@notice returns the address of splitter of a creator.\n    ///@param creator the address of the creator\n    ///@return creatorSplitterAddress splitter's address deployed for a creator\n    function getCreatorRoyaltySplitter(address creator) external view returns (address payable creatorSplitterAddress);\n\n    ///@notice returns the EIP2981 royalty split\n    ///@param _contractAddress the address of the contract for which the royalty is required\n    ///@return royaltyBps royalty bps of the contract\n    function getContractRoyalty(address _contractAddress) external view returns (uint16 royaltyBps);\n\n    ///@notice sets the trustedForwarder address to be used by the splitters\n    ///@param _newForwarder is the new trusted forwarder address\n    function setTrustedForwarder(address _newForwarder) external;\n\n    ///@notice get the current trustedForwarder address\n    ///@return trustedForwarder address of current trusted Forwarder\n    function getTrustedForwarder() external view returns (address trustedForwarder);\n}\n"
    },
    "@sandbox-smart-contracts/dependency-royalty-management/contracts/interfaces/IRoyaltyUGC.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @title IRoyaltyUGC\n/// @notice interface define function for managing creator of UGC (User-Generated Content)\ninterface IRoyaltyUGC {\n    ///@notice Gets the address of the creator associated with a specific token.\n    ///@param tokenId the Id of token to retrieve the creator address for\n    ///@return creator the address of creator\n    function getCreatorAddress(uint256 tokenId) external pure returns (address creator);\n}\n"
    },
    "@sandbox-smart-contracts/dependency-royalty-management/contracts/MultiRoyaltyDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {ERC165Upgradeable} from \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\";\nimport {IMultiRoyaltyDistributor, IMultiRoyaltyRecipients} from \"./interfaces/IMultiRoyaltyDistributor.sol\";\nimport {\n    IRoyaltySplitter,\n    IERC165\n} from \"@manifoldxyz/royalty-registry-solidity/contracts/overrides/IRoyaltySplitter.sol\";\nimport {IEIP2981} from \"@manifoldxyz/royalty-registry-solidity/contracts/specs/IEIP2981.sol\";\nimport {IRoyaltyManager, Recipient} from \"./interfaces/IRoyaltyManager.sol\";\n\n/// @title MultiRoyaltyDistributor\n/// @author The Sandbox\n/// @dev  The MultiRoyaltyDistributor contract implements the ERC-2981 and ERC-165 interfaces for a royalty payment system. This payment system can be used to pay royalties to multiple recipients through splitters.\n/// @dev  This contract calls to the Royalties manager contract to deploy RoyaltySplitter for a creator to split its royalty between the creator and Sandbox and use it for every token minted by that creator.\nabstract contract MultiRoyaltyDistributor is IEIP2981, IMultiRoyaltyDistributor, ERC165Upgradeable {\n    uint16 internal constant TOTAL_BASIS_POINTS = 10000;\n    address private royaltyManager;\n\n    mapping(uint256 => address payable) private _tokenRoyaltiesSplitter;\n    uint256[] private _tokensWithRoyalties;\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __MultiRoyaltyDistributor_init(address _royaltyManager) internal onlyInitializing {\n        _setRoyaltyManager(_royaltyManager);\n        __ERC165_init_unchained();\n    }\n\n    /// @notice Query if a contract implements interface `id`.\n    /// @param interfaceId the interface identifier, as specified in ERC-165.\n    /// @return isSupported `true` if the contract implements `id`.\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC165Upgradeable, IERC165)\n        returns (bool isSupported)\n    {\n        return\n            interfaceId == type(IEIP2981).interfaceId ||\n            interfaceId == type(IMultiRoyaltyDistributor).interfaceId ||\n            interfaceId == type(IMultiRoyaltyRecipients).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /// @notice sets token royalty\n    /// @dev deploys a splitter if a creator doesn't have one\n    /// @param tokenId id of token\n    /// @param recipient royalty recipient\n    /// @param creator of the token\n    function _setTokenRoyalties(\n        uint256 tokenId,\n        address payable recipient,\n        address creator\n    ) internal {\n        address payable creatorSplitterAddress = IRoyaltyManager(royaltyManager).deploySplitter(creator, recipient);\n\n        if (_tokenRoyaltiesSplitter[tokenId] != address(0)) {\n            if (_tokenRoyaltiesSplitter[tokenId] != creatorSplitterAddress) {\n                _setTokenRoyaltiesSplitter(tokenId, creatorSplitterAddress);\n            }\n        } else {\n            _tokensWithRoyalties.push(tokenId);\n            _setTokenRoyaltiesSplitter(tokenId, creatorSplitterAddress);\n        }\n    }\n\n    /// @notice EIP 2981 royalty info function to return the royalty receiver and royalty amount\n    /// @param tokenId of the token for which the royalty is needed to be distributed\n    /// @param value the amount on which the royalty is calculated\n    /// @return receiver address the royalty receiver\n    /// @return royaltyAmount value the EIP2981 royalty\n    function royaltyInfo(uint256 tokenId, uint256 value)\n        public\n        view\n        override\n        returns (address receiver, uint256 royaltyAmount)\n    {\n        (address payable _defaultRoyaltyReceiver, uint16 _defaultRoyaltyBPS) =\n            IRoyaltyManager(royaltyManager).getRoyaltyInfo();\n        if (_tokenRoyaltiesSplitter[tokenId] != address(0)) {\n            return (_tokenRoyaltiesSplitter[tokenId], (value * _defaultRoyaltyBPS) / TOTAL_BASIS_POINTS);\n        }\n        if (_defaultRoyaltyReceiver != address(0) && _defaultRoyaltyBPS != 0) {\n            return (_defaultRoyaltyReceiver, (value * _defaultRoyaltyBPS) / TOTAL_BASIS_POINTS);\n        }\n        return (address(0), 0);\n    }\n\n    /// @notice returns the EIP-2981 royalty receiver for each token (i.e. splitters) including the default royalty receiver.\n    /// @return splits the royalty receiver's array\n    function getAllSplits() external view override returns (address payable[] memory splits) {\n        uint256 startingIndex;\n        uint256 endingIndex = _tokensWithRoyalties.length;\n        (address payable _defaultRoyaltyReceiver, ) = IRoyaltyManager(royaltyManager).getRoyaltyInfo();\n        if (_defaultRoyaltyReceiver != address(0)) {\n            splits = new address payable[](1 + _tokensWithRoyalties.length);\n            splits[0] = _defaultRoyaltyReceiver;\n            startingIndex = 1;\n            ++endingIndex;\n        } else {\n            // unreachable in practice\n            splits = new address payable[](_tokensWithRoyalties.length);\n        }\n        for (uint256 i = startingIndex; i < endingIndex; ++i) {\n            splits[i] = _tokenRoyaltiesSplitter[_tokensWithRoyalties[i - startingIndex]];\n        }\n    }\n\n    /// @notice returns the royalty recipients for each tokenId.\n    /// @dev returns the default address for tokens with no recipients.\n    /// @param tokenId is the token id for which the recipient should be returned.\n    /// @return recipients array of royalty recipients for the token\n    function getRecipients(uint256 tokenId) public view returns (Recipient[] memory recipients) {\n        address payable splitterAddress = _tokenRoyaltiesSplitter[tokenId];\n        (address payable _defaultRoyaltyReceiver, ) = IRoyaltyManager(royaltyManager).getRoyaltyInfo();\n        if (splitterAddress != address(0)) {\n            return IRoyaltySplitter(splitterAddress).getRecipients();\n        }\n        recipients = new Recipient[](1);\n        recipients[0] = Recipient({recipient: _defaultRoyaltyReceiver, bps: TOTAL_BASIS_POINTS});\n        return recipients;\n    }\n\n    /// @notice internal function to set the token royalty splitter\n    /// @param tokenId id of token\n    /// @param splitterAddress address of the splitter contract\n    function _setTokenRoyaltiesSplitter(uint256 tokenId, address payable splitterAddress) internal {\n        _tokenRoyaltiesSplitter[tokenId] = splitterAddress;\n        emit TokenRoyaltySplitterSet(tokenId, splitterAddress);\n    }\n\n    /// @notice returns the address of token royalty splitter.\n    /// @param tokenId is the token id for which royalty splitter should be returned.\n    /// @return splitterAddress address of royalty splitter for the token\n    function getTokenRoyaltiesSplitter(uint256 tokenId) external view returns (address payable splitterAddress) {\n        return _tokenRoyaltiesSplitter[tokenId];\n    }\n\n    /// @notice returns the address of royalty manager.\n    /// @return managerAddress address of royalty manager.\n    function getRoyaltyManager() external view returns (address managerAddress) {\n        return royaltyManager;\n    }\n\n    /// @notice set royalty manager address\n    /// @param _royaltyManager address of royalty manager to set\n    function _setRoyaltyManager(address _royaltyManager) internal {\n        royaltyManager = _royaltyManager;\n        emit RoyaltyManagerSet(_royaltyManager);\n    }\n\n    uint256[47] private __gap;\n}\n"
    },
    "@sandbox-smart-contracts/dependency-royalty-management/contracts/RoyaltyDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IERC2981Upgradeable} from \"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\";\nimport {IRoyaltyManager} from \"./interfaces/IRoyaltyManager.sol\";\nimport {\n    ERC165Upgradeable,\n    IERC165Upgradeable\n} from \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\";\n\n/// @title RoyaltyDistributor\n/// @author The Sandbox\n/// @notice Contract for distributing royalties based on the ERC2981 standard.\nabstract contract RoyaltyDistributor is IERC2981Upgradeable, ERC165Upgradeable {\n    event RoyaltyManagerSet(address indexed _royaltyManager);\n    uint16 internal constant TOTAL_BASIS_POINTS = 10000;\n    IRoyaltyManager private royaltyManager;\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __RoyaltyDistributor_init(address _royaltyManager) internal onlyInitializing {\n        _setRoyaltyManager(_royaltyManager);\n        __ERC165_init_unchained();\n    }\n\n    /// @notice Returns how much royalty is owed and to whom based on ERC2981\n    /// @dev tokenId is one of the EIP2981 args for this function can't be removed\n    /// @param _salePrice the price of token on which the royalty is calculated\n    /// @return receiver the receiver of royalty\n    /// @return royaltyAmount the amount of royalty\n    function royaltyInfo(\n        uint256, /*_tokenId */\n        uint256 _salePrice\n    ) external view returns (address receiver, uint256 royaltyAmount) {\n        uint16 royaltyBps;\n        (receiver, royaltyBps) = royaltyManager.getRoyaltyInfo();\n        royaltyAmount = (_salePrice * royaltyBps) / TOTAL_BASIS_POINTS;\n        return (receiver, royaltyAmount);\n    }\n\n    /// @notice Query if a contract implements interface `id`.\n    /// @param interfaceId the interface identifier, as specified in ERC-165.\n    /// @return isSupported `true` if the contract implements `id`.\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC165Upgradeable, IERC165Upgradeable)\n        returns (bool isSupported)\n    {\n        return (interfaceId == type(IERC2981Upgradeable).interfaceId || super.supportsInterface(interfaceId));\n    }\n\n    /// @notice returns the royalty manager\n    /// @return royaltyManagerAddress address of royalty manager contract.\n    function getRoyaltyManager() external view returns (IRoyaltyManager royaltyManagerAddress) {\n        return royaltyManager;\n    }\n\n    /// @notice set royalty manager\n    /// @param _royaltyManager address of royalty manager to set\n    function _setRoyaltyManager(address _royaltyManager) internal {\n        royaltyManager = IRoyaltyManager(_royaltyManager);\n        emit RoyaltyManagerSet(_royaltyManager);\n    }\n\n    uint256[49] private __gap;\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 2000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}