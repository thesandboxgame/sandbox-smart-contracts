{
  "address": "0x289Be3c5eFA33449C44EB28b329D87b785ca31fc",
  "abi": [
    {
      "inputs": [],
      "name": "OnlyOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "OperatorNotAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "AllowedExecuteMintSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "BaseURISet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_sandOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_signAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_maxSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_operatorFiltererSubscription",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_operatorFiltererSubscriptionSubscribe",
          "type": "bool"
        }
      ],
      "name": "ContractInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_personalizationMask",
          "type": "uint256"
        }
      ],
      "name": "Personalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_pause",
          "type": "bool"
        }
      ],
      "name": "SaleToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "SandOwnerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_signAddress",
          "type": "address"
        }
      ],
      "name": "SignAddressSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_waveMaxTokens",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_waveMaxTokensToBuy",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_waveSingleTokenPrice",
          "type": "uint256"
        }
      ],
      "name": "WaveSetup",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_SUPPLY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowedToExecuteMint",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chain",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "checkMintAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "indexWave",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address payable",
          "name": "_sandOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_signAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_trustedForwarder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operatorFiltererSubscription",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_operatorFiltererSubscriptionSubscribe",
          "type": "bool"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_signatureId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operatorFilterRegistry",
      "outputs": [
        {
          "internalType": "contract IOperatorFilterRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "personalizationOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "personalizationTraits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_signatureId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_personalizationMask",
          "type": "uint256"
        }
      ],
      "name": "personalize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_count",
          "type": "uint256"
        }
      ],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sandOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setAllowedExecuteMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "setSandOwnerAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_signAddress",
          "type": "address"
        }
      ],
      "name": "setSignAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_waveMaxTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_waveMaxTokensToBuy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_waveSingleTokenPrice",
          "type": "uint256"
        }
      ],
      "name": "setupWave",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "signAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newRegistry",
          "type": "address"
        }
      ],
      "name": "updateOperatorFilterRegistryAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "waveMaxTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "waveMaxTokensToBuy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "waveOwnerToClaimedCounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "waveSingleTokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "waveTotalMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7b390f4d5355ad2b8b69f24695828f3d157e0ad4277d9f30a7f85a995d658f49",
  "receipt": {
    "to": null,
    "from": "0x4BF86138e9DC66Fb65F8b9387C53aB4439FC41FF",
    "contractAddress": "0x289Be3c5eFA33449C44EB28b329D87b785ca31fc",
    "transactionIndex": 1,
    "gasUsed": "4072580",
    "logsBloom": "0x
    "blockHash": "0xa5b84c3628634d2d89dba5f993785f231574d026f9981f008fef4bbd6289fd34",
    "transactionHash": "0x7b390f4d5355ad2b8b69f24695828f3d157e0ad4277d9f30a7f85a995d658f49",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 32289308,
        "transactionHash": "0x7b390f4d5355ad2b8b69f24695828f3d157e0ad4277d9f30a7f85a995d658f49",
        "address": "0x289Be3c5eFA33449C44EB28b329D87b785ca31fc",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 3,
        "blockHash": "0xa5b84c3628634d2d89dba5f993785f231574d026f9981f008fef4bbd6289fd34"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 32289308,
        "transactionHash": "0x7b390f4d5355ad2b8b69f24695828f3d157e0ad4277d9f30a7f85a995d658f49",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000004bf86138e9dc66fb65f8b9387c53ab4439fc41ff",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x00000000000000000000000000000000000000000000000003f4cf4b9378a7c000000000000000000000000000000000000000000000002b99d5fdb9ffffd150000000000000000000000000000000000000000000000db41757bc17d769326200000000000000000000000000000000000000000000002b95e12e6e6c872990000000000000000000000000000000000000000000000db41b4c8b636ae1da22",
        "logIndex": 4,
        "blockHash": "0xa5b84c3628634d2d89dba5f993785f231574d026f9981f008fef4bbd6289fd34"
      }
    ],
    "blockNumber": 32289308,
    "cumulativeGasUsed": "4149505",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3b39014c799f6bb1f41fb1a5525d8848",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"OnlyOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"AllowedExecuteMintSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"BaseURISet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sandOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_signAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_operatorFiltererSubscription\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_operatorFiltererSubscriptionSubscribe\",\"type\":\"bool\"}],\"name\":\"ContractInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_personalizationMask\",\"type\":\"uint256\"}],\"name\":\"Personalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_pause\",\"type\":\"bool\"}],\"name\":\"SaleToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"SandOwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_signAddress\",\"type\":\"address\"}],\"name\":\"SignAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_waveMaxTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_waveMaxTokensToBuy\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_waveSingleTokenPrice\",\"type\":\"uint256\"}],\"name\":\"WaveSetup\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowedToExecuteMint\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"checkMintAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"indexWave\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"_sandOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_signAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operatorFiltererSubscription\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_operatorFiltererSubscriptionSubscribe\",\"type\":\"bool\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_signatureId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorFilterRegistry\",\"outputs\":[{\"internalType\":\"contract IOperatorFilterRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"personalizationOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"personalizationTraits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_signatureId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_personalizationMask\",\"type\":\"uint256\"}],\"name\":\"personalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sandOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setAllowedExecuteMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setSandOwnerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signAddress\",\"type\":\"address\"}],\"name\":\"setSignAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_waveMaxTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_waveMaxTokensToBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_waveSingleTokenPrice\",\"type\":\"uint256\"}],\"name\":\"setupWave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRegistry\",\"type\":\"address\"}],\"name\":\"updateOperatorFilterRegistryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"waveMaxTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"waveMaxTokensToBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"waveOwnerToClaimedCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"waveSingleTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"waveTotalMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See OpenZeppelin {IERC721-approve}\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"chain()\":{\"details\":\"returns block.chainid\",\"returns\":{\"_0\":\"uint256 current chainID for the blockchain\"}},\"checkMintAllowed(address,uint256)\":{\"params\":{\"_amount\":\"amount to be checked if can be minted\",\"_wallet\":\"wallet to be checked if it can mint\"},\"returns\":{\"_0\":\"if can mint or not\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mint(address,uint256,uint256,bytes)\":{\"params\":{\"_amount\":\"number of token to mint\",\"_signature\":\"signing signature value\",\"_signatureId\":\"signing signature ID\",\"_wallet\":\"minting wallet\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"returns OwnableUpgradeable.owner()\",\"returns\":{\"_0\":\"owner of current contract\"}},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"personalizationOf(uint256)\":{\"details\":\"returns personalizationTraits[_tokenId]\",\"params\":{\"_tokenId\":\"the token ID to check\"},\"returns\":{\"_0\":\"uint256 the personalization data as uint256\"}},\"personalize(uint256,bytes,uint256,uint256)\":{\"details\":\"after checks, it is reduced to personalizationTraits[_tokenId] = _personalizationMask      emits {Personalized} event\",\"params\":{\"_personalizationMask\":\"a mask where each bit has a custom meaning in-game\",\"_signature\":\"signing signature\",\"_signatureId\":\"the ID of the provided signature\",\"_tokenId\":\"what token to personalize\"}},\"price(uint256)\":{\"details\":\"returns waveSingleTokenPrice * _count; Does not check if it is possible      to actually mint that much\",\"params\":{\"_count\":\"the number of tokens to estimate mint price for\"},\"returns\":{\"_0\":\"uint256 price of minting all the tokens\"}},\"renounceOwnership()\":{\"details\":\"reverts on call\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See OpenZeppelin {IERC721-safeTransferFrom}\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See OpenZeppelin {IERC721-safeTransferFrom}\"},\"setAllowedExecuteMint(address)\":{\"details\":\"sets allowedToExecuteMint = _address; address can't be 0\",\"params\":{\"_address\":\"the address that will be allowed to set execute the mint function\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"See OpenZeppelin {IERC721-setApprovalForAll}\"},\"setBaseURI(string)\":{\"details\":\"sets baseTokenURI = baseURI\",\"params\":{\"baseURI\":\"an URI that will be used as the base for token URI\"}},\"setSandOwnerAddress(address)\":{\"details\":\"just sets sandOwner = _owner\",\"params\":{\"_owner\":\"new owner address to be saved\"}},\"setSignAddress(address)\":{\"details\":\"sets signAddress = _signAddress; address can't be 0\",\"params\":{\"_signAddress\":\"new signer address to be set\"}},\"setupWave(uint256,uint256,uint256)\":{\"details\":\"emits {WaveSetup} event\",\"params\":{\"_waveMaxTokens\":\"the allowed number of tokens to be minted in this wave (cumulative by all minting wallets)\",\"_waveMaxTokensToBuy\":\"max tokens to buy, per wallet in a given wave\",\"_waveSingleTokenPrice\":\"the price to mint a token in a given wave. In SAND wei\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"toggleSale()\":{\"details\":\"toggle the paused\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See OpenZeppelin {IERC721-transferFrom}\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"AllowedExecuteMintSet(address)\":{\"notice\":\"Event emitted when an address was set as allowed to mint\"},\"BaseURISet(string)\":{\"notice\":\"Event emitted when the base token URI for the contract was set or changed\"},\"ContractInitialized(string,string,string,address,address,uint256,address,address,bool)\":{\"notice\":\"Event emitted when the contract was initialized.\"},\"Personalized(uint256,uint256)\":{\"notice\":\"Event emitted when a token personalization was made.\"},\"SaleToggled(bool)\":{\"notice\":\"Event emitted when sale state was changed.\"},\"SandOwnerSet(address)\":{\"notice\":\"Event emitted when the SAND contract owner was saved\"},\"SignAddressSet(address)\":{\"notice\":\"Event emitted when the signer address was set or changed\"},\"WaveSetup(uint256,uint256,uint256)\":{\"notice\":\"Event emitted when a wave was set up\"}},\"kind\":\"user\",\"methods\":{\"chain()\":{\"notice\":\"helper automation function\"},\"checkMintAllowed(address,uint256)\":{\"notice\":\"check if the indicated wallet can mint the indicated amount\"},\"maxSupply()\":{\"notice\":\"max token supply\"},\"mint(address,uint256,uint256,bytes)\":{\"notice\":\"token minting function. Price is set by wave and is paid in SAND tokens\"},\"owner()\":{\"notice\":\"returns the owner of the contract\"},\"personalizationOf(uint256)\":{\"notice\":\"get the personalization of the indicated tokenID\"},\"personalizationTraits(uint256)\":{\"notice\":\"stores the personalization for a tokenId\"},\"personalize(uint256,bytes,uint256,uint256)\":{\"notice\":\"personalize token traits\"},\"price(uint256)\":{\"notice\":\"get the price of minting the indicated number of tokens for the current wave\"},\"renounceOwnership()\":{\"notice\":\"function renounces ownership of contract. Currently it is disable,         as to not risk loosing mint funds\"},\"setAllowedExecuteMint(address)\":{\"notice\":\"sets which address is allowed to execute the mint function.         Emits {AllowedExecuteMintSet} event\"},\"setBaseURI(string)\":{\"notice\":\"sets the base token URI for the contract. Emits a {BaseURISet} event.\"},\"setSandOwnerAddress(address)\":{\"notice\":\"saving locally the SAND token owner. Emits {SandOwnerSet} event\"},\"setSignAddress(address)\":{\"notice\":\"sets the sign address. Emits {SignAddressSet} event\"},\"setupWave(uint256,uint256,uint256)\":{\"notice\":\"function to setup wave parameters. A wave is defined as a combination of allowed number tokens to be         minted in total, per wallet and minting price\"},\"toggleSale()\":{\"notice\":\"pause or unpause the contract. Emits the {SaleToggled} event\"},\"updateOperatorFilterRegistryAddress(address)\":{\"notice\":\"Update the address that the contract will make OperatorFilter checks against. When set to the zero         address, checks will be bypassed. OnlyOwner.\"},\"waveMaxTokens()\":{\"notice\":\"max tokens to buy per wave, cumulating all addresses\"},\"waveMaxTokensToBuy()\":{\"notice\":\"max tokens to buy, per wallet in a given wave\"},\"waveSingleTokenPrice()\":{\"notice\":\"price of one token mint (in the token owned by the sandOwner which in our case is SAND)\"},\"waveTotalMinted()\":{\"notice\":\"number of total minted tokens in the current running wave\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/solc_0.8.15/raffle/HellsKitchen.sol\":\"HellsKitchen\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-0.8.13/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8.13/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8.13/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8.13/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8.13/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8.13/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8.13/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8.13/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8.13/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8.13/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8.13/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-0.8.13/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-0.8.13/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-0.8.13/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-0.8.13/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-0.8.13/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-0.8.13/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x2a6a0b9fd2d316dcb4141159a9d13be92654066d6c0ae92757ed908ecdfecff0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-0.8.13/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-0.8.13/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2c0b89cef83f353c6f9488c013d8a5968587ffdd6dfc26aad53774214b97e229\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-0.8.13/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\\n    function __ERC721Enumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Enumerable_init_unchained() internal onlyInitializing {\\n    }\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Upgradeable.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721Upgradeable.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0x2c98457c4171d86094adf9a4fd8cd2402b7e3e309e961f07910a60a576dd100f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-0.8.13/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf1870306db8391db9cf14b41be0da76857a88df0e5c623d2b2338fb30a3bd5ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-0.8.13/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-0.8.13/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-0.8.13/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-0.8.13/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-0.8.13/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-0.8.13/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-0.8.13/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"src/solc_0.8.15/common/BaseWithStorage/ERC2771/ERC2771HandlerUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.15;\\n\\n/// @dev minimal ERC2771 handler to keep bytecode-size down\\n/// based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.6.0/contracts/metatx/ERC2771Context.sol\\n/// with an initializer for proxies and a mutable forwarder\\n/// @dev same as ERC2771Handler.sol but with gap\\n\\ncontract ERC2771HandlerUpgradeable {\\n    address internal _trustedForwarder;\\n    uint256[49] private __gap;\\n\\n    function __ERC2771Handler_initialize(address forwarder) internal {\\n        _trustedForwarder = forwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function getTrustedForwarder() external view returns (address trustedForwarder) {\\n        return _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x030a45d3f06cfd854854623e3980456a28db9534295b689c7eb5cd17eb91321c\",\"license\":\"MIT\"},\"src/solc_0.8.15/common/OperatorFilterer/IOperatorFilterRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface IOperatorFilterRegistry {\\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\\n\\n    function register(address registrant) external;\\n\\n    function registerAndSubscribe(address registrant, address subscription) external;\\n\\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\\n\\n    function unregister(address addr) external;\\n\\n    function updateOperator(\\n        address registrant,\\n        address operator,\\n        bool filtered\\n    ) external;\\n\\n    function updateOperators(\\n        address registrant,\\n        address[] calldata operators,\\n        bool filtered\\n    ) external;\\n\\n    function updateCodeHash(\\n        address registrant,\\n        bytes32 codehash,\\n        bool filtered\\n    ) external;\\n\\n    function updateCodeHashes(\\n        address registrant,\\n        bytes32[] calldata codeHashes,\\n        bool filtered\\n    ) external;\\n\\n    function subscribe(address registrant, address registrantToSubscribe) external;\\n\\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\\n\\n    function subscriptionOf(address addr) external returns (address registrant);\\n\\n    function subscribers(address registrant) external returns (address[] memory);\\n\\n    function subscriberAt(address registrant, uint256 index) external returns (address);\\n\\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\\n\\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\\n\\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\\n\\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\\n\\n    function filteredOperators(address addr) external returns (address[] memory);\\n\\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\\n\\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\\n\\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\\n\\n    function isRegistered(address addr) external returns (bool);\\n\\n    function codeHashOf(address addr) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf4c2944d52dd8b3dc5598c93bfd05783ea50245832abc2fd4b759ce5f28fb62c\",\"license\":\"MIT\"},\"src/solc_0.8.15/common/OperatorFilterer/UpdatableOperatorFiltererUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable-0.8.13/proxy/utils/Initializable.sol\\\";\\n\\nimport {IOperatorFilterRegistry} from \\\"./IOperatorFilterRegistry.sol\\\";\\n\\nabstract contract UpdatableOperatorFiltererUpgradeable is Initializable {\\n    error OperatorNotAllowed(address operator);\\n    error OnlyOwner();\\n\\n    IOperatorFilterRegistry public operatorFilterRegistry;\\n\\n    function __UpdatableOperatorFiltererUpgradeable_init(\\n        address _registry,\\n        address subscriptionOrRegistrantToCopy,\\n        bool subscribe\\n    ) internal onlyInitializing {\\n        operatorFilterRegistry = IOperatorFilterRegistry(_registry);\\n        // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\\n        // will not revert, but the contract will need to be registered with the registry once it is deployed in\\n        // order for the modifier to filter addresses.\\n        if (address(operatorFilterRegistry).code.length > 0) {\\n            if (subscribe) {\\n                operatorFilterRegistry.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\\n            } else {\\n                if (subscriptionOrRegistrantToCopy != address(0)) {\\n                    operatorFilterRegistry.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\\n                } else {\\n                    operatorFilterRegistry.register(address(this));\\n                }\\n            }\\n        }\\n    }\\n\\n    modifier onlyAllowedOperator(address from) virtual {\\n        // Check registry code length to facilitate testing in environments without a deployed registry.\\n        if (address(operatorFilterRegistry).code.length > 0) {\\n            // Allow spending tokens from addresses with balance\\n            // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\\n            // from an EOA.\\n            if (from == msg.sender) {\\n                _;\\n                return;\\n            }\\n            if (!operatorFilterRegistry.isOperatorAllowed(address(this), msg.sender)) {\\n                revert OperatorNotAllowed(msg.sender);\\n            }\\n        }\\n        _;\\n    }\\n\\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\\n        // Check registry code length to facilitate testing in environments without a deployed registry.\\n        if (address(operatorFilterRegistry).code.length > 0) {\\n            if (!operatorFilterRegistry.isOperatorAllowed(address(this), operator)) {\\n                revert OperatorNotAllowed(operator);\\n            }\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Update the address that the contract will make OperatorFilter checks against. When set to the zero\\n     *         address, checks will be bypassed. OnlyOwner.\\n     */\\n    function updateOperatorFilterRegistryAddress(address newRegistry) public virtual {\\n        if (msg.sender != owner()) {\\n            revert OnlyOwner();\\n        }\\n        operatorFilterRegistry = IOperatorFilterRegistry(newRegistry);\\n    }\\n\\n    /**\\n     * @dev assume the contract has an owner, but leave specific Ownable implementation up to inheriting contract\\n     */\\n    function owner() public view virtual returns (address);\\n}\\n\",\"keccak256\":\"0x31f310117603da2353f567909118464f08a32703ce32111fb30a6f61ba1ceccf\",\"license\":\"MIT\"},\"src/solc_0.8.15/raffle/GenericRaffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport {Address} from \\\"@openzeppelin/contracts-0.8.13/utils/Address.sol\\\";\\nimport {ContextUpgradeable} from \\\"@openzeppelin/contracts-upgradeable-0.8.13/access/AccessControlUpgradeable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-0.8.13/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8.13/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8.13/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8.13/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8.13/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8.13/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable-0.8.13/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable-0.8.13/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable-0.8.13/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\\\";\\n\\nimport {ERC2771HandlerUpgradeable} from \\\"../common/BaseWithStorage/ERC2771/ERC2771HandlerUpgradeable.sol\\\";\\nimport {\\n    UpdatableOperatorFiltererUpgradeable\\n} from \\\"../common/OperatorFilterer/UpdatableOperatorFiltererUpgradeable.sol\\\";\\n\\n/* solhint-disable max-states-count */\\n/**\\n * @title GenericRaffle\\n * @notice Smart contract based used for creating Original Sandbox Collections\\n *         There are 2 different roles that operate within the contract:\\n *         - owner -> standard owner implementation (calls setupWave, updateOperatorFilterRegistryAddress,\\n *                    and other sensistive functions)\\n *         - allowedToExecuteMint -> address allowed to execute mint function. Can be set by owner\\n */\\ncontract GenericRaffle is\\n    ERC721EnumerableUpgradeable,\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    ERC2771HandlerUpgradeable,\\n    UpdatableOperatorFiltererUpgradeable\\n{\\n    using Address for address;\\n    /// @notice max token supply\\n    uint256 public maxSupply;\\n\\n    /**\\n     * @notice Event emitted when sale state was changed.\\n     * @dev emitted when toggleSale is called\\n     * @param _pause if the sale was was paused or not\\n     */\\n    event SaleToggled(bool _pause);\\n\\n    /**\\n     * @notice Event emitted when a token personalization was made.\\n     * @dev emitted when personalize is called\\n     * @param _tokenId id of the token which had the personalization done\\n     * @param _personalizationMask the exact personalization that was done, as a custom meaning bit-mask\\n     */\\n    event Personalized(uint256 _tokenId, uint256 _personalizationMask);\\n\\n    /**\\n     * @notice Event emitted when the contract was initialized.\\n     * @dev emitted at proxy startup, once only\\n     * @param baseURI an URI that will be used as the base for token URI\\n     * @param _name name of the ERC721 token\\n     * @param _symbol token symbol of the ERC721 token\\n     * @param _sandOwner address belonging to SAND token owner\\n     * @param _signAddress signer address that is allowed to mint\\n     * @param _maxSupply max supply of tokens to be allowed to be minted per contract\\n     * @param _registry filter registry to which to register with. For blocking operators that do not respect royalties\\n     * @param _operatorFiltererSubscription subscription address to use as a template for\\n     * @param _operatorFiltererSubscriptionSubscribe if to subscribe tot the operatorFiltererSubscription address or\\n     *                                               just copy entries from it\\n     */\\n    event ContractInitialized(\\n        string baseURI,\\n        string _name,\\n        string _symbol,\\n        address _sandOwner,\\n        address _signAddress,\\n        uint256 _maxSupply,\\n        address _registry,\\n        address _operatorFiltererSubscription,\\n        bool _operatorFiltererSubscriptionSubscribe\\n    );\\n\\n    /**\\n     * @notice Event emitted when a wave was set up\\n     * @dev emitted when setupWave is called\\n     * @param _waveMaxTokens the allowed number of tokens to be minted in this wave (cumulative by all minting wallets)\\n     * @param _waveMaxTokensToBuy max tokens to buy, per wallet in a given wave\\n     * @param _waveSingleTokenPrice the price to mint a token in a given wave. In SAND wei\\n     */\\n    event WaveSetup(uint256 _waveMaxTokens, uint256 _waveMaxTokensToBuy, uint256 _waveSingleTokenPrice);\\n\\n    /**\\n     * @notice Event emitted when an address was set as allowed to mint\\n     * @dev emitted when setAllowedExecuteMint is called\\n     * @param _address the address that will be allowed to set execute the mint function\\n     */\\n    event AllowedExecuteMintSet(address _address);\\n\\n    /**\\n     * @notice Event emitted when the SAND contract owner was saved\\n     * @dev emitted when setSandOwnerAddress is called\\n     * @param _owner new owner address to be saved\\n     */\\n    event SandOwnerSet(address _owner);\\n\\n    /**\\n     * @notice Event emitted when the base token URI for the contract was set or changed\\n     * @dev emitted when setBaseURI is called\\n     * @param baseURI an URI that will be used as the base for token URI\\n     */\\n    event BaseURISet(string baseURI);\\n\\n    /**\\n     * @notice Event emitted when the signer address was set or changed\\n     * @dev emitted when setSignAddress is called\\n     * @param _signAddress new signer address to be set\\n     */\\n    event SignAddressSet(address _signAddress);\\n\\n    /// @notice max tokens to buy per wave, cumulating all addresses\\n    uint256 public waveMaxTokens;\\n    /// @notice max tokens to buy, per wallet in a given wave\\n    uint256 public waveMaxTokensToBuy;\\n    /// @notice price of one token mint (in the token owned by the sandOwner which in our case is SAND)\\n    uint256 public waveSingleTokenPrice;\\n    /// @notice number of total minted tokens in the current running wave\\n    uint256 public waveTotalMinted;\\n\\n    mapping(address => mapping(uint256 => uint256)) public waveOwnerToClaimedCounts;\\n    /// @notice stores the personalization for a tokenId\\n    mapping(uint256 => uint256) public personalizationTraits;\\n    uint256 public indexWave;\\n    uint256 public paused;\\n\\n    mapping(uint256 => uint256) private signatureIds;\\n    mapping(uint256 => uint256) private availableIds;\\n\\n    address public allowedToExecuteMint;\\n    address public sandOwner;\\n    address public signAddress;\\n    string public baseTokenURI;\\n\\n    /**\\n     * @notice mitigate a possible Implementation contract takeover, as indicate by\\n     *         https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#initializing_the_implementation_contract\\n     */\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @notice initialization function in accordance with the upgradable pattern\\n     * @dev calls all the init functions from the base classes. Emits {ContractInitialized} event\\n     * @param baseURI an URI that will be used as the base for token URI\\n     * @param _name name of the ERC721 token\\n     * @param _symbol token symbol of the ERC721 token\\n     * @param _sandOwner address belonging to SAND token owner\\n     * @param _signAddress signer address that is allowed to mint\\n     * @param _trustedForwarder trusted forwarder address\\n     * @param _registry filter registry to which to register with. For blocking operators that do not respect royalties\\n     * @param _operatorFiltererSubscription subscription address to use as a template for\\n     * @param _operatorFiltererSubscriptionSubscribe if to subscribe tot the operatorFiltererSubscription address or\\n     *                                               just copy entries from it\\n     * @param _maxSupply max supply of tokens to be allowed to be minted per contract\\n     */\\n    function __GenericRaffle_init(\\n        string memory baseURI,\\n        string memory _name,\\n        string memory _symbol,\\n        address payable _sandOwner,\\n        address _signAddress,\\n        address _trustedForwarder,\\n        address _registry,\\n        address _operatorFiltererSubscription,\\n        bool _operatorFiltererSubscriptionSubscribe,\\n        uint256 _maxSupply\\n    ) internal onlyInitializing {\\n        __ERC721_init(_name, _symbol);\\n        __ERC2771Handler_initialize(_trustedForwarder);\\n        __Ownable_init_unchained();\\n        __ReentrancyGuard_init();\\n        __UpdatableOperatorFiltererUpgradeable_init(\\n            _registry,\\n            _operatorFiltererSubscription,\\n            _operatorFiltererSubscriptionSubscribe\\n        );\\n        setBaseURI(baseURI);\\n        require(bytes(baseURI).length != 0, \\\"baseURI is not set\\\");\\n        require(bytes(_name).length != 0, \\\"_name is not set\\\");\\n        require(bytes(_symbol).length != 0, \\\"_symbol is not set\\\");\\n        require(_signAddress != address(0x0), \\\"Sign address is zero address\\\");\\n        require(_trustedForwarder != address(0x0), \\\"Trusted forwarder is zero address\\\");\\n        require(_sandOwner != address(0x0), \\\"Sand owner is zero address\\\");\\n        require(_maxSupply > 0, \\\"Max supply should be more than 0\\\");\\n        sandOwner = _sandOwner;\\n        signAddress = _signAddress;\\n        maxSupply = _maxSupply;\\n\\n        emit ContractInitialized(\\n            baseURI,\\n            _name,\\n            _symbol,\\n            _sandOwner,\\n            _signAddress,\\n            _maxSupply,\\n            _registry,\\n            _operatorFiltererSubscription,\\n            _operatorFiltererSubscriptionSubscribe\\n        );\\n    }\\n\\n    /**\\n     * @notice function to setup wave parameters. A wave is defined as a combination of allowed number tokens to be\\n     *         minted in total, per wallet and minting price\\n     * @dev emits {WaveSetup} event\\n     * @param _waveMaxTokens the allowed number of tokens to be minted in this wave (cumulative by all minting wallets)\\n     * @param _waveMaxTokensToBuy max tokens to buy, per wallet in a given wave\\n     * @param _waveSingleTokenPrice the price to mint a token in a given wave. In SAND wei\\n     */\\n    function setupWave(\\n        uint256 _waveMaxTokens,\\n        uint256 _waveMaxTokensToBuy,\\n        uint256 _waveSingleTokenPrice\\n    ) external onlyOwner {\\n        require(_waveMaxTokens <= maxSupply, \\\"_waveMaxTokens should not exceed maxSupply\\\");\\n        require(_waveMaxTokens > 0 && _waveMaxTokensToBuy > 0, \\\"Invalid configuration\\\");\\n        require(paused == 0, \\\"Contract is paused\\\");\\n        require(_waveMaxTokensToBuy <= _waveMaxTokens, \\\"Invalid supply configuration\\\");\\n\\n        waveMaxTokens = _waveMaxTokens;\\n        waveMaxTokensToBuy = _waveMaxTokensToBuy;\\n        waveSingleTokenPrice = _waveSingleTokenPrice;\\n        waveTotalMinted = 0;\\n        indexWave++;\\n\\n        emit WaveSetup(_waveMaxTokens, _waveMaxTokensToBuy, _waveSingleTokenPrice);\\n    }\\n\\n    /**\\n     * @notice token minting function. Price is set by wave and is paid in SAND tokens\\n     * @param _wallet minting wallet\\n     * @param _amount number of token to mint\\n     * @param _signatureId signing signature ID\\n     * @param _signature signing signature value\\n     */\\n    function mint(\\n        address _wallet,\\n        uint256 _amount,\\n        uint256 _signatureId,\\n        bytes memory _signature\\n    ) external nonReentrant {\\n        require(indexWave > 0, \\\"Contract is not configured\\\");\\n        require(_msgSender() == allowedToExecuteMint, \\\"Not allowed\\\");\\n        require(paused == 0, \\\"Contract is paused\\\");\\n        require(_wallet != address(0x0), \\\"Wallet is zero address\\\");\\n        require(_amount > 0, \\\"Amount cannot be 0\\\");\\n        require(signatureIds[_signatureId] == 0, \\\"signatureId already used\\\");\\n        require(\\n            _checkSignature(_wallet, _signatureId, address(this), block.chainid, _signature) == signAddress,\\n            \\\"Signature failed\\\"\\n        );\\n\\n        signatureIds[_signatureId] = 1;\\n\\n        require(_checkWaveNotComplete(_amount), \\\"Wave completed\\\");\\n        require(_checkLimitNotReached(_wallet, _amount), \\\"Max allowed\\\");\\n\\n        uint256 _price = price(_amount);\\n        if (_price > 0) {\\n            SafeERC20.safeTransferFrom(IERC20(_msgSender()), _wallet, sandOwner, _price);\\n        }\\n\\n        waveOwnerToClaimedCounts[_wallet][indexWave - 1] += _amount;\\n\\n        waveTotalMinted += _amount;\\n\\n        for (uint256 i = 0; i < _amount; i++) {\\n            uint256 tokenId = getRandomToken(_wallet, totalSupply());\\n            _safeMint(_wallet, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @notice pause or unpause the contract. Emits the {SaleToggled} event\\n     * @dev toggle the paused\\n     */\\n    function toggleSale() external onlyOwner {\\n        paused = paused == 0 ? 1 : 0;\\n        emit SaleToggled(paused == 1);\\n    }\\n\\n    /**\\n     * @notice personalize token traits\\n     * @dev after checks, it is reduced to personalizationTraits[_tokenId] = _personalizationMask\\n     *      emits {Personalized} event\\n     * @param _signatureId the ID of the provided signature\\n     * @param _signature signing signature\\n     * @param _tokenId what token to personalize\\n     * @param _personalizationMask a mask where each bit has a custom meaning in-game\\n     */\\n    function personalize(\\n        uint256 _signatureId,\\n        bytes memory _signature,\\n        uint256 _tokenId,\\n        uint256 _personalizationMask\\n    ) external {\\n        require(ownerOf(_tokenId) == _msgSender(), \\\"You must be the owner of the token in order to personalize it\\\");\\n\\n        require(signatureIds[_signatureId] == 0, \\\"SignatureId already used\\\");\\n        require(\\n            _checkPersonalizationSignature(\\n                _msgSender(),\\n                _signatureId,\\n                address(this),\\n                block.chainid,\\n                _tokenId,\\n                _personalizationMask,\\n                _signature\\n            ) == signAddress,\\n            \\\"Signature failed\\\"\\n        );\\n\\n        signatureIds[_signatureId] = 1;\\n\\n        personalizationTraits[_tokenId] = _personalizationMask;\\n        emit Personalized(_tokenId, _personalizationMask);\\n    }\\n\\n    /**\\n     * @notice sets which address is allowed to execute the mint function.\\n     *         Emits {AllowedExecuteMintSet} event\\n     * @dev sets allowedToExecuteMint = _address; address can't be 0\\n     * @param _address the address that will be allowed to set execute the mint function\\n     */\\n    function setAllowedExecuteMint(address _address) external onlyOwner {\\n        require(_address != address(0x0), \\\"Address is zero address\\\");\\n        allowedToExecuteMint = _address;\\n        emit AllowedExecuteMintSet(_address);\\n    }\\n\\n    /**\\n     * @notice saving locally the SAND token owner. Emits {SandOwnerSet} event\\n     * @dev just sets sandOwner = _owner\\n     * @param _owner new owner address to be saved\\n     */\\n    function setSandOwnerAddress(address _owner) external onlyOwner {\\n        require(_owner != address(0x0), \\\"Owner is zero address\\\");\\n        sandOwner = _owner;\\n        emit SandOwnerSet(_owner);\\n    }\\n\\n    /**\\n     * @notice sets the sign address. Emits {SignAddressSet} event\\n     * @dev sets signAddress = _signAddress; address can't be 0\\n     * @param _signAddress new signer address to be set\\n     */\\n    function setSignAddress(address _signAddress) external onlyOwner {\\n        require(_signAddress != address(0x0), \\\"Sign address is zero address\\\");\\n        signAddress = _signAddress;\\n        emit SignAddressSet(_signAddress);\\n    }\\n\\n    /**\\n     * @notice get the personalization of the indicated tokenID\\n     * @dev returns personalizationTraits[_tokenId]\\n     * @param _tokenId the token ID to check\\n     * @return uint256 the personalization data as uint256\\n     */\\n    function personalizationOf(uint256 _tokenId) external view returns (uint256) {\\n        return personalizationTraits[_tokenId];\\n    }\\n\\n    /**\\n     * @notice check if the indicated wallet can mint the indicated amount\\n     * @param _wallet wallet to be checked if it can mint\\n     * @param _amount amount to be checked if can be minted\\n     * @return if can mint or not\\n     */\\n    function checkMintAllowed(address _wallet, uint256 _amount) external view returns (bool) {\\n        return _checkWaveNotComplete(_amount) && _checkLimitNotReached(_wallet, _amount);\\n    }\\n\\n    /**\\n     * @notice helper automation function\\n     * @dev returns block.chainid\\n     * @return uint256 current chainID for the blockchain\\n     */\\n    function chain() external view returns (uint256) {\\n        return block.chainid;\\n    }\\n\\n    /**\\n     * @notice sets the base token URI for the contract. Emits a {BaseURISet} event.\\n     * @dev sets baseTokenURI = baseURI\\n     * @param baseURI an URI that will be used as the base for token URI\\n     */\\n    function setBaseURI(string memory baseURI) public onlyOwner {\\n        require(bytes(baseURI).length != 0, \\\"baseURI is not set\\\");\\n        baseTokenURI = baseURI;\\n        emit BaseURISet(baseURI);\\n    }\\n\\n    /**\\n     * @notice function renounces ownership of contract. Currently it is disable,\\n     *         as to not risk loosing mint funds\\n     * @dev reverts on call\\n     */\\n    function renounceOwnership() public virtual override onlyOwner {\\n        revert(\\\"Renounce ownership is not available\\\");\\n    }\\n\\n    /**\\n     * @dev See OpenZeppelin {IERC721-setApprovalForAll}\\n     */\\n    function setApprovalForAll(address operator, bool approved)\\n        public\\n        override(ERC721Upgradeable, IERC721Upgradeable)\\n        onlyAllowedOperatorApproval(operator)\\n    {\\n        super.setApprovalForAll(operator, approved);\\n    }\\n\\n    /**\\n     * @dev See OpenZeppelin {IERC721-approve}\\n     */\\n    function approve(address operator, uint256 tokenId)\\n        public\\n        override(ERC721Upgradeable, IERC721Upgradeable)\\n        onlyAllowedOperatorApproval(operator)\\n    {\\n        super.approve(operator, tokenId);\\n    }\\n\\n    /**\\n     * @dev See OpenZeppelin {IERC721-transferFrom}\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public override(ERC721Upgradeable, IERC721Upgradeable) onlyAllowedOperator(from) {\\n        super.transferFrom(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See OpenZeppelin {IERC721-safeTransferFrom}\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public override(ERC721Upgradeable, IERC721Upgradeable) onlyAllowedOperator(from) {\\n        super.safeTransferFrom(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See OpenZeppelin {IERC721-safeTransferFrom}\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public override(ERC721Upgradeable, IERC721Upgradeable) onlyAllowedOperator(from) {\\n        super.safeTransferFrom(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @notice get the price of minting the indicated number of tokens for the current wave\\n     * @dev returns waveSingleTokenPrice * _count; Does not check if it is possible\\n     *      to actually mint that much\\n     * @param _count the number of tokens to estimate mint price for\\n     * @return uint256 price of minting all the tokens\\n     */\\n    function price(uint256 _count) public view virtual returns (uint256) {\\n        return waveSingleTokenPrice * _count;\\n    }\\n\\n    /**\\n     * @notice returns the owner of the contract\\n     * @dev returns OwnableUpgradeable.owner()\\n     * @return owner of current contract\\n     */\\n    function owner() public view override(OwnableUpgradeable, UpdatableOperatorFiltererUpgradeable) returns (address) {\\n        return OwnableUpgradeable.owner();\\n    }\\n\\n    /**\\n     * @notice validates signature\\n     * @dev uses ECDSA.recover on the provided params\\n     * @param _wallet wallet that was used in signature generation\\n     * @param _signatureId id of signature\\n     * @param _contractAddress contract address that was used in signature generation\\n     * @param _chainId chain ID for which the signature was generated\\n     * @param _signature signature\\n     * @return address that validates the provided signature\\n     */\\n    function _checkSignature(\\n        address _wallet,\\n        uint256 _signatureId,\\n        address _contractAddress,\\n        uint256 _chainId,\\n        bytes memory _signature\\n    ) internal pure returns (address) {\\n        return\\n            ECDSA.recover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                        keccak256(abi.encode(_wallet, _signatureId, _contractAddress, _chainId))\\n                    )\\n                ),\\n                _signature\\n            );\\n    }\\n\\n    /**\\n     * @notice validate personalization mask\\n     * @dev uses ECDSA.recover on the provided params\\n     * @param _wallet wallet that was used in signature generation\\n     * @param _signatureId id of signature\\n     * @param _contractAddress contract address that was used in signature generation\\n     * @param _chainId chain ID for which the signature was generated\\n     * @param _tokenId token ID for which the signature was generated\\n     * @param _personalizationMask a mask where each bit has a custom meaning in-game\\n     * @param _signature signature\\n     * @return address that validates the provided signature\\n     */\\n    function _checkPersonalizationSignature(\\n        address _wallet,\\n        uint256 _signatureId,\\n        address _contractAddress,\\n        uint256 _chainId,\\n        uint256 _tokenId,\\n        uint256 _personalizationMask,\\n        bytes memory _signature\\n    ) internal pure returns (address) {\\n        return\\n            ECDSA.recover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                        keccak256(\\n                            abi.encode(\\n                                _wallet,\\n                                _signatureId,\\n                                _contractAddress,\\n                                _chainId,\\n                                _tokenId,\\n                                _personalizationMask\\n                            )\\n                        )\\n                    )\\n                ),\\n                _signature\\n            );\\n    }\\n\\n    /**\\n     * @notice get base TokenURI\\n     * @dev returns baseTokenURI\\n     * @return baseTokenURI\\n     */\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return baseTokenURI;\\n    }\\n\\n    /**\\n     * @notice ERC2771 compatible msg.data getter\\n     * @dev returns ERC2771HandlerUpgradeable._msgData()\\n     * @return msg.data\\n     */\\n    function _msgData() internal view override(ContextUpgradeable, ERC2771HandlerUpgradeable) returns (bytes calldata) {\\n        return ERC2771HandlerUpgradeable._msgData();\\n    }\\n\\n    /**\\n     * @notice ERC2771 compatible msg.sender getter\\n     * @dev returns ERC2771HandlerUpgradeable._msgSender()\\n     * @return sender msg.sender\\n     */\\n    function _msgSender()\\n        internal\\n        view\\n        override(ContextUpgradeable, ERC2771HandlerUpgradeable)\\n        returns (address sender)\\n    {\\n        return ERC2771HandlerUpgradeable._msgSender();\\n    }\\n\\n    /**\\n     * @notice check if the current wave can still mint the indicated amount\\n     * @param _amount number of tokens to check if can be minted\\n     * @return if wave can mint the indicated amount\\n     */\\n    function _checkWaveNotComplete(uint256 _amount) internal view returns (bool) {\\n        return _amount > 0 && waveTotalMinted + _amount <= waveMaxTokens;\\n    }\\n\\n    /**\\n     * @notice checks if current contract limits are respected if minting the indicated amount\\n     * @param _wallet minting wallet, whose restrictions will be considered\\n     * @param _amount number of tokens to mint\\n     * @return if amount can be safely minted\\n     */\\n    function _checkLimitNotReached(address _wallet, uint256 _amount) internal view returns (bool) {\\n        return\\n            waveOwnerToClaimedCounts[_wallet][indexWave - 1] + _amount <= waveMaxTokensToBuy &&\\n            totalSupply() + _amount <= maxSupply;\\n    }\\n\\n    /**\\n     * @notice Pseudo-random number function. Good enough for our need, thx Cyberkongs VX <3!\\n     * @dev standard pseudo-random implementation using keccak256 over various parameters.\\n     * @param _wallet the calling account address\\n     * @param _totalMinted total minted tokens up to this point\\n     * @return pseudo-random value\\n     */\\n    function getRandomToken(address _wallet, uint256 _totalMinted) private returns (uint256) {\\n        uint256 remaining = maxSupply - _totalMinted;\\n        uint256 rand =\\n            uint256(keccak256(abi.encodePacked(_wallet, block.difficulty, block.timestamp, remaining))) % remaining;\\n        uint256 value = rand;\\n\\n        if (availableIds[rand] != 0) {\\n            value = availableIds[rand];\\n        }\\n\\n        if (availableIds[remaining - 1] == 0) {\\n            availableIds[rand] = remaining - 1;\\n        } else {\\n            availableIds[rand] = availableIds[remaining - 1];\\n        }\\n\\n        return value;\\n    }\\n\\n    /**\\n    Empty storage space in contracts for future enhancements\\n    ref: https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/issues/13\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xa1738891adb8507ee40d413ad8fd34d14fbd9ca925ef814a6b3096fdf960a2f3\",\"license\":\"MIT\"},\"src/solc_0.8.15/raffle/HellsKitchen.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"./GenericRaffle.sol\\\";\\n\\n/* solhint-disable max-states-count */\\ncontract HellsKitchen is GenericRaffle {\\n    uint256 public constant MAX_SUPPLY = 2_333;\\n\\n    function initialize(\\n        string memory baseURI,\\n        string memory _name,\\n        string memory _symbol,\\n        address payable _sandOwner,\\n        address _signAddress,\\n        address _trustedForwarder,\\n        address _registry,\\n        address _operatorFiltererSubscription,\\n        bool _operatorFiltererSubscriptionSubscribe\\n    ) public initializer {\\n        __GenericRaffle_init(\\n            baseURI,\\n            _name,\\n            _symbol,\\n            _sandOwner,\\n            _signAddress,\\n            _trustedForwarder,\\n            _registry,\\n            _operatorFiltererSubscription,\\n            _operatorFiltererSubscriptionSubscribe,\\n            MAX_SUPPLY\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x0799a2761b83e99af8187ede6fe5f3907dbb406a0fe575fe998e46b98a1c113c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e4565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e2576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b61487980620000f46000396000f3fe608060405234801561001057600080fd5b50600436106103365760003560e01c806368d4a778116101b2578063b0ccc31e116100f9578063d547cfb7116100a2578063df9740da1161007c578063df9740da14610698578063e89bcd09146106a2578063e985e9c5146106b6578063f2fde38b146106f257600080fd5b8063d547cfb71461067c578063d5878eaa14610684578063d5abeb011461068e57600080fd5b8063c763e5a1116100d3578063c763e5a114610651578063c87b56dd14610657578063ce1b815f1461066a57600080fd5b8063b0ccc31e14610617578063b88d4fde1461062b578063b8d1e5321461063e57600080fd5b806382bc78771161015b57806397944ba21161013557806397944ba2146105cf578063a22cb465146105f0578063ac3149e31461060357600080fd5b806382bc7877146105ac5780638da5cb5b146105bf57806395d89b41146105c757600080fd5b8063731133e91161018c578063731133e91461057e5780637c3bfcfa146105915780637d8966e4146105a457600080fd5b806368d4a7781461053757806370a0823114610563578063715018a61461057657600080fd5b80632f745c59116102815780634f6ccce71161022a5780635c975abb116102045780635c975abb146104e65780636352211e146104f0578063671b2a3114610503578063677ec90f1461051657600080fd5b80634f6ccce71461049d57806355f804b3146104b0578063572b6c05146104c357600080fd5b80633e84aa5e1161025b5780633e84aa5e1461047657806342842e0e14610480578063433ad1061461049357600080fd5b80632f745c591461045057806332cb6b0c1461046357806334b35ac01461046c57600080fd5b806318160ddd116102e357806324a6f085116102bd57806324a6f0851461041757806326a49e371461042a578063283ca77c1461043d57600080fd5b806318160ddd146103df5780631992c3f3146103f157806323b872dd1461040457600080fd5b8063081812fc11610314578063081812fc146103a4578063095ea7b3146103b757806315137045146103cc57600080fd5b806301ffc9a71461033b5780630682bdbc1461036357806306fdde031461038f575b600080fd5b61034e610349366004614011565b610705565b60405190151581526020015b60405180910390f35b61016d54610377906001600160a01b031681565b6040516001600160a01b03909116815260200161035a565b610397610761565b60405161035a9190614086565b6103776103b2366004614099565b6107f3565b6103ca6103c53660046140d7565b61081a565b005b6103ca6103da366004614103565b6108e0565b6099545b60405190815260200161035a565b6103ca6103ff366004614120565b610994565b6103ca61041236600461414c565b610b86565b6103ca610425366004614103565b610c5e565b6103e3610438366004614099565b610d0b565b61034e61044b3660046140d7565b610d1c565b6103e361045e3660046140d7565b610d3f565b6103e361091d81565b6103e36101675481565b6103e36101645481565b6103ca61048e36600461414c565b610de7565b6103e36101635481565b6103e36104ab366004614099565b610eb4565b6103ca6104be366004614230565b610f58565b61034e6104d1366004614103565b61012d546001600160a01b0391821691161490565b6103e36101685481565b6103776104fe366004614099565b610fee565b6103ca610511366004614265565b611053565b6103e3610524366004614099565b6101666020526000908152604090205481565b6103e36105453660046140d7565b61016560209081526000928352604080842090915290825290205481565b6103e3610571366004614103565b611220565b6103ca6112ba565b6103ca61058c3660046142bc565b611330565b6103ca61059f366004614338565b61175e565b6103ca611894565b6103ca6105ba366004614103565b6118f1565b61037761199e565b6103976119b7565b6103e36105dd366004614099565b6000908152610166602052604090205490565b6103ca6105fe366004614425565b6119c6565b61016b54610377906001600160a01b031681565b61015f54610377906001600160a01b031681565b6103ca61063936600461445e565b611a82565b6103ca61064c366004614103565b611b5d565b466103e3565b610397610665366004614099565b611bd2565b61012d546001600160a01b0316610377565b610397611c38565b6103e36101615481565b6103e36101605481565b6103e36101625481565b61016c54610377906001600160a01b031681565b61034e6106c43660046144b2565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b6103ca610700366004614103565b611cc7565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f780e9d6300000000000000000000000000000000000000000000000000000000148061075b575061075b82611d57565b92915050565b606060658054610770906144e0565b80601f016020809104026020016040519081016040528092919081815260200182805461079c906144e0565b80156107e95780601f106107be576101008083540402835291602001916107e9565b820191906000526020600020905b8154815290600101906020018083116107cc57829003601f168201915b5050505050905090565b60006107fe82611e3a565b506000908152606960205260409020546001600160a01b031690565b61015f5482906001600160a01b03163b156108d15761015f54604051633185c44d60e21b81523060048201526001600160a01b0383811660248301529091169063c617113490604401602060405180830381865afa158015610880573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a4919061451a565b6108d157604051633b79c77360e21b81526001600160a01b03821660048201526024015b60405180910390fd5b6108db8383611e9e565b505050565b6108e8611fdc565b6001600160a01b03811661093e5760405162461bcd60e51b815260206004820152601c60248201527f5369676e2061646472657373206973207a65726f20616464726573730000000060448201526064016108c8565b61016d80546001600160a01b0319166001600160a01b0383169081179091556040519081527f0e58c0652c5df5dddc98a8856c5a814ba7aedf70cc4ef2c72a040d1ff0fe5ebd906020015b60405180910390a150565b61099c611fdc565b61016054831115610a155760405162461bcd60e51b815260206004820152602a60248201527f5f776176654d6178546f6b656e732073686f756c64206e6f742065786365656460448201527f206d6178537570706c790000000000000000000000000000000000000000000060648201526084016108c8565b600083118015610a255750600082115b610a715760405162461bcd60e51b815260206004820152601560248201527f496e76616c696420636f6e66696775726174696f6e000000000000000000000060448201526064016108c8565b6101685415610ac25760405162461bcd60e51b815260206004820152601260248201527f436f6e747261637420697320706175736564000000000000000000000000000060448201526064016108c8565b82821115610b125760405162461bcd60e51b815260206004820152601c60248201527f496e76616c696420737570706c7920636f6e66696775726174696f6e0000000060448201526064016108c8565b6101618390556101628290556101638190556000610164819055610167805491610b3b8361454d565b909155505060408051848152602081018490529081018290527fe564a4bf9e4db3797c60fe6b6be0c2b012e6557df177e1b63883bd29d00db8de9060600160405180910390a1505050565b61015f5483906001600160a01b03163b15610c4d57336001600160a01b03821603610bbb57610bb684848461204d565b610c58565b61015f54604051633185c44d60e21b81523060048201523360248201526001600160a01b039091169063c617113490604401602060405180830381865afa158015610c0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2e919061451a565b610c4d57604051633b79c77360e21b81523360048201526024016108c8565b610c5884848461204d565b50505050565b610c66611fdc565b6001600160a01b038116610cbc5760405162461bcd60e51b815260206004820152601560248201527f4f776e6572206973207a65726f2061646472657373000000000000000000000060448201526064016108c8565b61016c80546001600160a01b0319166001600160a01b0383169081179091556040519081527fa7a30e0f8be04cc86d8bab5131d01fc28dd5512abb25522217ee56ecea313ce090602001610989565b6000816101635461075b9190614567565b6000610d27826120db565b8015610d385750610d388383612102565b9392505050565b6000610d4a83611220565b8210610dbe5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e647300000000000000000000000000000000000000000060648201526084016108c8565b506001600160a01b03919091166000908152609760209081526040808320938352929052205490565b61015f5483906001600160a01b03163b15610ea957336001600160a01b03821603610e1757610bb6848484612184565b61015f54604051633185c44d60e21b81523060048201523360248201526001600160a01b039091169063c617113490604401602060405180830381865afa158015610e66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8a919061451a565b610ea957604051633b79c77360e21b81523360048201526024016108c8565b610c58848484612184565b6000610ebf60995490565b8210610f335760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e6473000000000000000000000000000000000000000060648201526084016108c8565b60998281548110610f4657610f46614586565b90600052602060002001549050919050565b610f60611fdc565b8051600003610fb15760405162461bcd60e51b815260206004820152601260248201527f62617365555249206973206e6f7420736574000000000000000000000000000060448201526064016108c8565b61016e610fbe82826145ea565b507ff9c7803e94e0d3c02900d8a90893a6d5e90dd04d32a4cfe825520f82bf9f32f6816040516109899190614086565b6000818152606760205260408120546001600160a01b03168061075b5760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e204944000000000000000060448201526064016108c8565b61105b61219f565b6001600160a01b031661106d83610fee565b6001600160a01b0316146110e95760405162461bcd60e51b815260206004820152603d60248201527f596f75206d75737420626520746865206f776e6572206f662074686520746f6b60448201527f656e20696e206f7264657220746f20706572736f6e616c697a6520697400000060648201526084016108c8565b60008481526101696020526040902054156111465760405162461bcd60e51b815260206004820152601860248201527f5369676e6174757265496420616c72656164792075736564000000000000000060448201526064016108c8565b61016d546001600160a01b031661116961115e61219f565b86304687878a6121a9565b6001600160a01b0316146111bf5760405162461bcd60e51b815260206004820152601060248201527f5369676e6174757265206661696c65640000000000000000000000000000000060448201526064016108c8565b6000848152610169602090815260408083206001905584835261016682529182902083905581518481529081018390527f37c5b85bb9cbe019726db5bf44dfd0053ed3e09554d9f97a9778b5b8dd65f620910160405180910390a150505050565b60006001600160a01b03821661129e5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e6572000000000000000000000000000000000000000000000060648201526084016108c8565b506001600160a01b031660009081526068602052604090205490565b6112c2611fdc565b60405162461bcd60e51b815260206004820152602360248201527f52656e6f756e6365206f776e657273686970206973206e6f7420617661696c6160448201527f626c65000000000000000000000000000000000000000000000000000000000060648201526084016108c8565b61133861225c565b6000610167541161138b5760405162461bcd60e51b815260206004820152601a60248201527f436f6e7472616374206973206e6f7420636f6e6669677572656400000000000060448201526064016108c8565b61016b546001600160a01b03166113a061219f565b6001600160a01b0316146113f65760405162461bcd60e51b815260206004820152600b60248201527f4e6f7420616c6c6f77656400000000000000000000000000000000000000000060448201526064016108c8565b61016854156114475760405162461bcd60e51b815260206004820152601260248201527f436f6e747261637420697320706175736564000000000000000000000000000060448201526064016108c8565b6001600160a01b03841661149d5760405162461bcd60e51b815260206004820152601660248201527f57616c6c6574206973207a65726f20616464726573730000000000000000000060448201526064016108c8565b600083116114ed5760405162461bcd60e51b815260206004820152601260248201527f416d6f756e742063616e6e6f742062652030000000000000000000000000000060448201526064016108c8565b600082815261016960205260409020541561154a5760405162461bcd60e51b815260206004820152601860248201527f7369676e6174757265496420616c72656164792075736564000000000000000060448201526064016108c8565b61016d546001600160a01b031661156485843046866122b5565b6001600160a01b0316146115ba5760405162461bcd60e51b815260206004820152601060248201527f5369676e6174757265206661696c65640000000000000000000000000000000060448201526064016108c8565b600082815261016960205260409020600190556115d6836120db565b6116225760405162461bcd60e51b815260206004820152600e60248201527f5761766520636f6d706c6574656400000000000000000000000000000000000060448201526064016108c8565b61162c8484612102565b6116785760405162461bcd60e51b815260206004820152600b60248201527f4d617820616c6c6f77656400000000000000000000000000000000000000000060448201526064016108c8565b600061168384610d0b565b905080156116ab576116ab61169661219f565b61016c5487906001600160a01b0316846122f7565b6001600160a01b038516600090815261016560205260408120610167548692906116d7906001906146aa565b815260200190815260200160002060008282546116f491906146c1565b9250508190555083610164600082825461170e91906146c1565b90915550600090505b848110156117525760006117338761172e60995490565b61237f565b905061173f87826124ae565b508061174a8161454d565b915050611717565b5050610c58600160fb55565b600054610100900460ff161580801561177e5750600054600160ff909116105b806117985750303b158015611798575060005460ff166001145b61180a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016108c8565b6000805460ff19166001179055801561182d576000805461ff0019166101001790555b6118418a8a8a8a8a8a8a8a8a61091d6124d3565b8015611888576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15b50505050505050505050565b61189c611fdc565b61016854156118ac5760006118af565b60015b60ff16610168819055604051600190911481527f37ae8f893f8baa4aef207505c0e4d730119d73dc1363bbee6fda5f5d52c3cf179060200160405180910390a1565b6118f9611fdc565b6001600160a01b03811661194f5760405162461bcd60e51b815260206004820152601760248201527f41646472657373206973207a65726f206164647265737300000000000000000060448201526064016108c8565b61016b80546001600160a01b0319166001600160a01b0383169081179091556040519081527f8eb903ef93f1949409fbfad9304ceafc3ab8211c9ddbe9732ce8b1ede00efb3490602001610989565b60006119b260c9546001600160a01b031690565b905090565b606060668054610770906144e0565b61015f5482906001600160a01b03163b15611a785761015f54604051633185c44d60e21b81523060048201526001600160a01b0383811660248301529091169063c617113490604401602060405180830381865afa158015611a2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a50919061451a565b611a7857604051633b79c77360e21b81526001600160a01b03821660048201526024016108c8565b6108db838361286b565b61015f5484906001600160a01b03163b15611b4a57336001600160a01b03821603611ab857611ab38585858561287d565b611b56565b61015f54604051633185c44d60e21b81523060048201523360248201526001600160a01b039091169063c617113490604401602060405180830381865afa158015611b07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b2b919061451a565b611b4a57604051633b79c77360e21b81523360048201526024016108c8565b611b568585858561287d565b5050505050565b611b6561199e565b6001600160a01b0316336001600160a01b031614611baf576040517f5fc483c500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61015f80546001600160a01b0319166001600160a01b0392909216919091179055565b6060611bdd82611e3a565b6000611be761290c565b90506000815111611c075760405180602001604052806000815250610d38565b80611c118461291c565b604051602001611c229291906146d9565b6040516020818303038152906040529392505050565b61016e8054611c46906144e0565b80601f0160208091040260200160405190810160405280929190818152602001828054611c72906144e0565b8015611cbf5780601f10611c9457610100808354040283529160200191611cbf565b820191906000526020600020905b815481529060010190602001808311611ca257829003601f168201915b505050505081565b611ccf611fdc565b6001600160a01b038116611d4b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016108c8565b611d54816129bc565b50565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd000000000000000000000000000000000000000000000000000000001480611dea57507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061075b57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083161461075b565b6000818152606760205260409020546001600160a01b0316611d545760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e204944000000000000000060448201526064016108c8565b6000611ea982610fee565b9050806001600160a01b0316836001600160a01b031603611f325760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084016108c8565b806001600160a01b0316611f4461219f565b6001600160a01b03161480611f605750611f60816106c461219f565b611fd25760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016108c8565b6108db8383612a0e565b611fe461219f565b6001600160a01b0316611ff561199e565b6001600160a01b03161461204b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108c8565b565b61205e61205861219f565b82612a7c565b6120d05760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f7665640000000000000000000000000000000000000060648201526084016108c8565b6108db838383612afb565b6000808211801561075b57506101615482610164546120fa91906146c1565b111592915050565b600061016254826101656000866001600160a01b03166001600160a01b03168152602001908152602001600020600060016101675461214191906146aa565b81526020019081526020016000205461215a91906146c1565b11158015610d385750610160548261217160995490565b61217b91906146c1565b11159392505050565b6108db83838360405180602001604052806000815250611a82565b60006119b2612d31565b604080516001600160a01b03808a16602083015291810188905290861660608201526080810185905260a0810184905260c081018390526000906122509060e0015b60408051601f198184030181529082905280516020918201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000091830191909152603c820152605c016040516020818303038152906040528051906020012083612d77565b98975050505050505050565b600260fb54036122ae5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016108c8565b600260fb55565b604080516001600160a01b0380881660208301529181018690529084166060820152608081018390526000906122ed9060a0016121eb565b9695505050505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052610c58908590612d9b565b600080826101605461239191906146aa565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606087901b1660208201524460348201524260548201526074810182905290915060009082906094016040516020818303038152906040528051906020012060001c6124019190614708565b600081815261016a602052604090205490915081901561242d5750600081815261016a60205260409020545b61016a600061243d6001866146aa565b8152602001908152602001600020546000036124735761245e6001846146aa565b600083815261016a60205260409020556124a5565b61016a60006124836001866146aa565b8152602080820192909252604090810160009081205485825261016a90935220555b95945050505050565b6124c8828260405180602001604052806000815250612e80565b5050565b600160fb55565b600054610100900460ff1661253e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016108c8565b6125488989612f09565b61012d80546001600160a01b0319166001600160a01b03871617905561256c612f7e565b612574612ff9565b61257f84848461306c565b6125888a610f58565b89516000036125d95760405162461bcd60e51b815260206004820152601260248201527f62617365555249206973206e6f7420736574000000000000000000000000000060448201526064016108c8565b885160000361262a5760405162461bcd60e51b815260206004820152601060248201527f5f6e616d65206973206e6f74207365740000000000000000000000000000000060448201526064016108c8565b875160000361267b5760405162461bcd60e51b815260206004820152601260248201527f5f73796d626f6c206973206e6f7420736574000000000000000000000000000060448201526064016108c8565b6001600160a01b0386166126d15760405162461bcd60e51b815260206004820152601c60248201527f5369676e2061646472657373206973207a65726f20616464726573730000000060448201526064016108c8565b6001600160a01b03851661274d5760405162461bcd60e51b815260206004820152602160248201527f5472757374656420666f72776172646572206973207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016108c8565b6001600160a01b0387166127a35760405162461bcd60e51b815260206004820152601a60248201527f53616e64206f776e6572206973207a65726f206164647265737300000000000060448201526064016108c8565b600081116127f35760405162461bcd60e51b815260206004820181905260248201527f4d617820737570706c792073686f756c64206265206d6f7265207468616e203060448201526064016108c8565b61016c80546001600160a01b03808a166001600160a01b03199283161790925561016d8054928916929091169190911790556101608190556040517f1a3a62dc20450ece39e01e20bfba98408b580d8576926c8ca06f987f9db300bc9061187f908c908c908c908c908c9088908c908c908c9061472a565b6124c861287661219f565b8383613232565b61288e61288861219f565b83612a7c565b6129005760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f7665640000000000000000000000000000000000000060648201526084016108c8565b610c5884848484613300565b606061016e8054610770906144e0565b6060600061292983613389565b600101905060008167ffffffffffffffff8111156129495761294961418d565b6040519080825280601f01601f191660200182016040528015612973576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461297d57509392505050565b60c980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600081815260696020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612a4382610fee565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080612a8883610fee565b9050806001600160a01b0316846001600160a01b03161480612acf57506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff165b80612af35750836001600160a01b0316612ae8846107f3565b6001600160a01b0316145b949350505050565b826001600160a01b0316612b0e82610fee565b6001600160a01b031614612b8a5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e657200000000000000000000000000000000000000000000000000000060648201526084016108c8565b6001600160a01b038216612c055760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016108c8565b612c12838383600161346b565b826001600160a01b0316612c2582610fee565b6001600160a01b031614612ca15760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e657200000000000000000000000000000000000000000000000000000060648201526084016108c8565b600081815260696020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260688552838620805460001901905590871680865283862080546001019055868652606790945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b61012d546000906001600160a01b03163303612d7257507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c90565b503390565b6000806000612d8685856135a7565b91509150612d93816135ec565b509392505050565b6000612df0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166137519092919063ffffffff16565b8051909150156108db5780806020019051810190612e0e919061451a565b6108db5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016108c8565b612e8a8383613760565b612e9760008484846138f9565b6108db5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016108c8565b600054610100900460ff16612f745760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016108c8565b6124c88282613a88565b600054610100900460ff16612fe95760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016108c8565b61204b612ff461219f565b6129bc565b600054610100900460ff166130645760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016108c8565b61204b613b0c565b600054610100900460ff166130d75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016108c8565b61015f80546001600160a01b0319166001600160a01b0385169081179091553b156108db5780156131875761015f546040517f7d3e3dbe0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03848116602483015290911690637d3e3dbe906044015b600060405180830381600087803b15801561316a57600080fd5b505af115801561317e573d6000803e3d6000fd5b50505050505050565b6001600160a01b038216156131e85761015f546040517fa0af29030000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0384811660248301529091169063a0af290390604401613150565b61015f546040517f4420e4860000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0390911690634420e48690602401613150565b816001600160a01b0316836001600160a01b0316036132935760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016108c8565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61330b848484612afb565b613317848484846138f9565b610c585760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016108c8565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106133d2577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106133fe576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061341c57662386f26fc10000830492506010015b6305f5e1008310613434576305f5e100830492506008015b612710831061344857612710830492506004015b6064831061345a576064830492506002015b600a831061075b5760010192915050565b61347784848484613b77565b60018111156134ee5760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e736563757469766520747260448201527f616e7366657273206e6f7420737570706f72746564000000000000000000000060648201526084016108c8565b816001600160a01b03851661354a5761354581609980546000838152609a60205260408120829055600182018355919091527f72a152ddfb8e864297c917af52ea6c1c68aead0fee1a62673fcc7e0c94979d000155565b61356d565b836001600160a01b0316856001600160a01b03161461356d5761356d8582613bff565b6001600160a01b03841661358457611ab381613c9c565b846001600160a01b0316846001600160a01b031614611b5657611b568482613d4b565b60008082516041036135dd5760208301516040840151606085015160001a6135d187828585613d8f565b945094505050506135e5565b506000905060025b9250929050565b6000816004811115613600576136006147ac565b036136085750565b600181600481111561361c5761361c6147ac565b036136695760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016108c8565b600281600481111561367d5761367d6147ac565b036136ca5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016108c8565b60038160048111156136de576136de6147ac565b03611d545760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016108c8565b6060612af38484600085613e53565b6001600160a01b0382166137b65760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016108c8565b6000818152606760205260409020546001600160a01b03161561381b5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016108c8565b61382960008383600161346b565b6000818152606760205260409020546001600160a01b03161561388e5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016108c8565b6001600160a01b038216600081815260686020908152604080832080546001019055848352606790915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160a01b0384163b15613a7d57836001600160a01b031663150b7a0261392261219f565b8786866040518563ffffffff1660e01b815260040161394494939291906147c2565b6020604051808303816000875af192505050801561397f575060408051601f3d908101601f1916820190925261397c918101906147f4565b60015b613a32573d8080156139ad576040519150601f19603f3d011682016040523d82523d6000602084013e6139b2565b606091505b508051600003613a2a5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016108c8565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050612af3565b506001949350505050565b600054610100900460ff16613af35760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016108c8565b6065613aff83826145ea565b5060666108db82826145ea565b600054610100900460ff166124cc5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016108c8565b6001811115610c58576001600160a01b03841615613bbd576001600160a01b03841660009081526068602052604081208054839290613bb79084906146aa565b90915550505b6001600160a01b03831615610c58576001600160a01b03831660009081526068602052604081208054839290613bf49084906146c1565b909155505050505050565b60006001613c0c84611220565b613c1691906146aa565b600083815260986020526040902054909150808214613c69576001600160a01b03841660009081526097602090815260408083208584528252808320548484528184208190558352609890915290208190555b5060009182526098602090815260408084208490556001600160a01b039094168352609781528383209183525290812055565b609954600090613cae906001906146aa565b6000838152609a602052604081205460998054939450909284908110613cd657613cd6614586565b906000526020600020015490508060998381548110613cf757613cf7614586565b6000918252602080832090910192909255828152609a90915260408082208490558582528120556099805480613d2f57613d2f614811565b6001900381819060005260206000200160009055905550505050565b6000613d5683611220565b6001600160a01b039093166000908152609760209081526040808320868452825280832085905593825260989052919091209190915550565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115613dc65750600090506003613e4a565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015613e1a573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116613e4357600060019250925050613e4a565b9150600090505b94509492505050565b606082471015613ecb5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016108c8565b600080866001600160a01b03168587604051613ee79190614827565b60006040518083038185875af1925050503d8060008114613f24576040519150601f19603f3d011682016040523d82523d6000602084013e613f29565b606091505b5091509150613f3a87838387613f45565b979650505050505050565b60608315613fb4578251600003613fad576001600160a01b0385163b613fad5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108c8565b5081612af3565b612af38383815115613fc95781518083602001fd5b8060405162461bcd60e51b81526004016108c89190614086565b7fffffffff0000000000000000000000000000000000000000000000000000000081168114611d5457600080fd5b60006020828403121561402357600080fd5b8135610d3881613fe3565b60005b83811015614049578181015183820152602001614031565b83811115610c585750506000910152565b6000815180845261407281602086016020860161402e565b601f01601f19169290920160200192915050565b602081526000610d38602083018461405a565b6000602082840312156140ab57600080fd5b5035919050565b6001600160a01b0381168114611d5457600080fd5b80356140d2816140b2565b919050565b600080604083850312156140ea57600080fd5b82356140f5816140b2565b946020939093013593505050565b60006020828403121561411557600080fd5b8135610d38816140b2565b60008060006060848603121561413557600080fd5b505081359360208301359350604090920135919050565b60008060006060848603121561416157600080fd5b833561416c816140b2565b9250602084013561417c816140b2565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126141b457600080fd5b813567ffffffffffffffff808211156141cf576141cf61418d565b604051601f8301601f19908116603f011681019082821181831017156141f7576141f761418d565b8160405283815286602085880101111561421057600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006020828403121561424257600080fd5b813567ffffffffffffffff81111561425957600080fd5b612af3848285016141a3565b6000806000806080858703121561427b57600080fd5b84359350602085013567ffffffffffffffff81111561429957600080fd5b6142a5878288016141a3565b949794965050505060408301359260600135919050565b600080600080608085870312156142d257600080fd5b84356142dd816140b2565b93506020850135925060408501359150606085013567ffffffffffffffff81111561430757600080fd5b614313878288016141a3565b91505092959194509250565b8015158114611d5457600080fd5b80356140d28161431f565b60008060008060008060008060006101208a8c03121561435757600080fd5b893567ffffffffffffffff8082111561436f57600080fd5b61437b8d838e016141a3565b9a5060208c013591508082111561439157600080fd5b61439d8d838e016141a3565b995060408c01359150808211156143b357600080fd5b506143c08c828d016141a3565b9750506143cf60608b016140c7565b95506143dd60808b016140c7565b94506143eb60a08b016140c7565b93506143f960c08b016140c7565b925061440760e08b016140c7565b91506144166101008b0161432d565b90509295985092959850929598565b6000806040838503121561443857600080fd5b8235614443816140b2565b915060208301356144538161431f565b809150509250929050565b6000806000806080858703121561447457600080fd5b843561447f816140b2565b9350602085013561448f816140b2565b925060408501359150606085013567ffffffffffffffff81111561430757600080fd5b600080604083850312156144c557600080fd5b82356144d0816140b2565b91506020830135614453816140b2565b600181811c908216806144f457607f821691505b60208210810361451457634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561452c57600080fd5b8151610d388161431f565b634e487b7160e01b600052601160045260246000fd5b6000600019820361456057614560614537565b5060010190565b600081600019048311821515161561458157614581614537565b500290565b634e487b7160e01b600052603260045260246000fd5b601f8211156108db57600081815260208120601f850160051c810160208610156145c35750805b601f850160051c820191505b818110156145e2578281556001016145cf565b505050505050565b815167ffffffffffffffff8111156146045761460461418d565b6146188161461284546144e0565b8461459c565b602080601f83116001811461464d57600084156146355750858301515b600019600386901b1c1916600185901b1785556145e2565b600085815260208120601f198616915b8281101561467c5788860151825594840194600190910190840161465d565b508582101561469a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000828210156146bc576146bc614537565b500390565b600082198211156146d4576146d4614537565b500190565b600083516146eb81846020880161402e565b8351908301906146ff81836020880161402e565b01949350505050565b60008261472557634e487b7160e01b600052601260045260246000fd5b500690565b600061012080835261473e8184018d61405a565b90508281036020840152614752818c61405a565b90508281036040840152614766818b61405a565b6001600160a01b03998a1660608501529789166080840152505060a081019490945291851660c084015290931660e0820152911515610100909201919091529392505050565b634e487b7160e01b600052602160045260246000fd5b60006001600160a01b038087168352808616602084015250836040830152608060608301526122ed608083018461405a565b60006020828403121561480657600080fd5b8151610d3881613fe3565b634e487b7160e01b600052603160045260246000fd5b6000825161483981846020870161402e565b919091019291505056fea264697066735822122089ec803a3f84920a6a91b44fc97d769cda29dfd93dcaa75dea77e6fe9169623864736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103365760003560e01c806368d4a778116101b2578063b0ccc31e116100f9578063d547cfb7116100a2578063df9740da1161007c578063df9740da14610698578063e89bcd09146106a2578063e985e9c5146106b6578063f2fde38b146106f257600080fd5b8063d547cfb71461067c578063d5878eaa14610684578063d5abeb011461068e57600080fd5b8063c763e5a1116100d3578063c763e5a114610651578063c87b56dd14610657578063ce1b815f1461066a57600080fd5b8063b0ccc31e14610617578063b88d4fde1461062b578063b8d1e5321461063e57600080fd5b806382bc78771161015b57806397944ba21161013557806397944ba2146105cf578063a22cb465146105f0578063ac3149e31461060357600080fd5b806382bc7877146105ac5780638da5cb5b146105bf57806395d89b41146105c757600080fd5b8063731133e91161018c578063731133e91461057e5780637c3bfcfa146105915780637d8966e4146105a457600080fd5b806368d4a7781461053757806370a0823114610563578063715018a61461057657600080fd5b80632f745c59116102815780634f6ccce71161022a5780635c975abb116102045780635c975abb146104e65780636352211e146104f0578063671b2a3114610503578063677ec90f1461051657600080fd5b80634f6ccce71461049d57806355f804b3146104b0578063572b6c05146104c357600080fd5b80633e84aa5e1161025b5780633e84aa5e1461047657806342842e0e14610480578063433ad1061461049357600080fd5b80632f745c591461045057806332cb6b0c1461046357806334b35ac01461046c57600080fd5b806318160ddd116102e357806324a6f085116102bd57806324a6f0851461041757806326a49e371461042a578063283ca77c1461043d57600080fd5b806318160ddd146103df5780631992c3f3146103f157806323b872dd1461040457600080fd5b8063081812fc11610314578063081812fc146103a4578063095ea7b3146103b757806315137045146103cc57600080fd5b806301ffc9a71461033b5780630682bdbc1461036357806306fdde031461038f575b600080fd5b61034e610349366004614011565b610705565b60405190151581526020015b60405180910390f35b61016d54610377906001600160a01b031681565b6040516001600160a01b03909116815260200161035a565b610397610761565b60405161035a9190614086565b6103776103b2366004614099565b6107f3565b6103ca6103c53660046140d7565b61081a565b005b6103ca6103da366004614103565b6108e0565b6099545b60405190815260200161035a565b6103ca6103ff366004614120565b610994565b6103ca61041236600461414c565b610b86565b6103ca610425366004614103565b610c5e565b6103e3610438366004614099565b610d0b565b61034e61044b3660046140d7565b610d1c565b6103e361045e3660046140d7565b610d3f565b6103e361091d81565b6103e36101675481565b6103e36101645481565b6103ca61048e36600461414c565b610de7565b6103e36101635481565b6103e36104ab366004614099565b610eb4565b6103ca6104be366004614230565b610f58565b61034e6104d1366004614103565b61012d546001600160a01b0391821691161490565b6103e36101685481565b6103776104fe366004614099565b610fee565b6103ca610511366004614265565b611053565b6103e3610524366004614099565b6101666020526000908152604090205481565b6103e36105453660046140d7565b61016560209081526000928352604080842090915290825290205481565b6103e3610571366004614103565b611220565b6103ca6112ba565b6103ca61058c3660046142bc565b611330565b6103ca61059f366004614338565b61175e565b6103ca611894565b6103ca6105ba366004614103565b6118f1565b61037761199e565b6103976119b7565b6103e36105dd366004614099565b6000908152610166602052604090205490565b6103ca6105fe366004614425565b6119c6565b61016b54610377906001600160a01b031681565b61015f54610377906001600160a01b031681565b6103ca61063936600461445e565b611a82565b6103ca61064c366004614103565b611b5d565b466103e3565b610397610665366004614099565b611bd2565b61012d546001600160a01b0316610377565b610397611c38565b6103e36101615481565b6103e36101605481565b6103e36101625481565b61016c54610377906001600160a01b031681565b61034e6106c43660046144b2565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b6103ca610700366004614103565b611cc7565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f780e9d6300000000000000000000000000000000000000000000000000000000148061075b575061075b82611d57565b92915050565b606060658054610770906144e0565b80601f016020809104026020016040519081016040528092919081815260200182805461079c906144e0565b80156107e95780601f106107be576101008083540402835291602001916107e9565b820191906000526020600020905b8154815290600101906020018083116107cc57829003601f168201915b5050505050905090565b60006107fe82611e3a565b506000908152606960205260409020546001600160a01b031690565b61015f5482906001600160a01b03163b156108d15761015f54604051633185c44d60e21b81523060048201526001600160a01b0383811660248301529091169063c617113490604401602060405180830381865afa158015610880573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a4919061451a565b6108d157604051633b79c77360e21b81526001600160a01b03821660048201526024015b60405180910390fd5b6108db8383611e9e565b505050565b6108e8611fdc565b6001600160a01b03811661093e5760405162461bcd60e51b815260206004820152601c60248201527f5369676e2061646472657373206973207a65726f20616464726573730000000060448201526064016108c8565b61016d80546001600160a01b0319166001600160a01b0383169081179091556040519081527f0e58c0652c5df5dddc98a8856c5a814ba7aedf70cc4ef2c72a040d1ff0fe5ebd906020015b60405180910390a150565b61099c611fdc565b61016054831115610a155760405162461bcd60e51b815260206004820152602a60248201527f5f776176654d6178546f6b656e732073686f756c64206e6f742065786365656460448201527f206d6178537570706c790000000000000000000000000000000000000000000060648201526084016108c8565b600083118015610a255750600082115b610a715760405162461bcd60e51b815260206004820152601560248201527f496e76616c696420636f6e66696775726174696f6e000000000000000000000060448201526064016108c8565b6101685415610ac25760405162461bcd60e51b815260206004820152601260248201527f436f6e747261637420697320706175736564000000000000000000000000000060448201526064016108c8565b82821115610b125760405162461bcd60e51b815260206004820152601c60248201527f496e76616c696420737570706c7920636f6e66696775726174696f6e0000000060448201526064016108c8565b6101618390556101628290556101638190556000610164819055610167805491610b3b8361454d565b909155505060408051848152602081018490529081018290527fe564a4bf9e4db3797c60fe6b6be0c2b012e6557df177e1b63883bd29d00db8de9060600160405180910390a1505050565b61015f5483906001600160a01b03163b15610c4d57336001600160a01b03821603610bbb57610bb684848461204d565b610c58565b61015f54604051633185c44d60e21b81523060048201523360248201526001600160a01b039091169063c617113490604401602060405180830381865afa158015610c0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2e919061451a565b610c4d57604051633b79c77360e21b81523360048201526024016108c8565b610c5884848461204d565b50505050565b610c66611fdc565b6001600160a01b038116610cbc5760405162461bcd60e51b815260206004820152601560248201527f4f776e6572206973207a65726f2061646472657373000000000000000000000060448201526064016108c8565b61016c80546001600160a01b0319166001600160a01b0383169081179091556040519081527fa7a30e0f8be04cc86d8bab5131d01fc28dd5512abb25522217ee56ecea313ce090602001610989565b6000816101635461075b9190614567565b6000610d27826120db565b8015610d385750610d388383612102565b9392505050565b6000610d4a83611220565b8210610dbe5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e647300000000000000000000000000000000000000000060648201526084016108c8565b506001600160a01b03919091166000908152609760209081526040808320938352929052205490565b61015f5483906001600160a01b03163b15610ea957336001600160a01b03821603610e1757610bb6848484612184565b61015f54604051633185c44d60e21b81523060048201523360248201526001600160a01b039091169063c617113490604401602060405180830381865afa158015610e66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8a919061451a565b610ea957604051633b79c77360e21b81523360048201526024016108c8565b610c58848484612184565b6000610ebf60995490565b8210610f335760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e6473000000000000000000000000000000000000000060648201526084016108c8565b60998281548110610f4657610f46614586565b90600052602060002001549050919050565b610f60611fdc565b8051600003610fb15760405162461bcd60e51b815260206004820152601260248201527f62617365555249206973206e6f7420736574000000000000000000000000000060448201526064016108c8565b61016e610fbe82826145ea565b507ff9c7803e94e0d3c02900d8a90893a6d5e90dd04d32a4cfe825520f82bf9f32f6816040516109899190614086565b6000818152606760205260408120546001600160a01b03168061075b5760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e204944000000000000000060448201526064016108c8565b61105b61219f565b6001600160a01b031661106d83610fee565b6001600160a01b0316146110e95760405162461bcd60e51b815260206004820152603d60248201527f596f75206d75737420626520746865206f776e6572206f662074686520746f6b60448201527f656e20696e206f7264657220746f20706572736f6e616c697a6520697400000060648201526084016108c8565b60008481526101696020526040902054156111465760405162461bcd60e51b815260206004820152601860248201527f5369676e6174757265496420616c72656164792075736564000000000000000060448201526064016108c8565b61016d546001600160a01b031661116961115e61219f565b86304687878a6121a9565b6001600160a01b0316146111bf5760405162461bcd60e51b815260206004820152601060248201527f5369676e6174757265206661696c65640000000000000000000000000000000060448201526064016108c8565b6000848152610169602090815260408083206001905584835261016682529182902083905581518481529081018390527f37c5b85bb9cbe019726db5bf44dfd0053ed3e09554d9f97a9778b5b8dd65f620910160405180910390a150505050565b60006001600160a01b03821661129e5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e6572000000000000000000000000000000000000000000000060648201526084016108c8565b506001600160a01b031660009081526068602052604090205490565b6112c2611fdc565b60405162461bcd60e51b815260206004820152602360248201527f52656e6f756e6365206f776e657273686970206973206e6f7420617661696c6160448201527f626c65000000000000000000000000000000000000000000000000000000000060648201526084016108c8565b61133861225c565b6000610167541161138b5760405162461bcd60e51b815260206004820152601a60248201527f436f6e7472616374206973206e6f7420636f6e6669677572656400000000000060448201526064016108c8565b61016b546001600160a01b03166113a061219f565b6001600160a01b0316146113f65760405162461bcd60e51b815260206004820152600b60248201527f4e6f7420616c6c6f77656400000000000000000000000000000000000000000060448201526064016108c8565b61016854156114475760405162461bcd60e51b815260206004820152601260248201527f436f6e747261637420697320706175736564000000000000000000000000000060448201526064016108c8565b6001600160a01b03841661149d5760405162461bcd60e51b815260206004820152601660248201527f57616c6c6574206973207a65726f20616464726573730000000000000000000060448201526064016108c8565b600083116114ed5760405162461bcd60e51b815260206004820152601260248201527f416d6f756e742063616e6e6f742062652030000000000000000000000000000060448201526064016108c8565b600082815261016960205260409020541561154a5760405162461bcd60e51b815260206004820152601860248201527f7369676e6174757265496420616c72656164792075736564000000000000000060448201526064016108c8565b61016d546001600160a01b031661156485843046866122b5565b6001600160a01b0316146115ba5760405162461bcd60e51b815260206004820152601060248201527f5369676e6174757265206661696c65640000000000000000000000000000000060448201526064016108c8565b600082815261016960205260409020600190556115d6836120db565b6116225760405162461bcd60e51b815260206004820152600e60248201527f5761766520636f6d706c6574656400000000000000000000000000000000000060448201526064016108c8565b61162c8484612102565b6116785760405162461bcd60e51b815260206004820152600b60248201527f4d617820616c6c6f77656400000000000000000000000000000000000000000060448201526064016108c8565b600061168384610d0b565b905080156116ab576116ab61169661219f565b61016c5487906001600160a01b0316846122f7565b6001600160a01b038516600090815261016560205260408120610167548692906116d7906001906146aa565b815260200190815260200160002060008282546116f491906146c1565b9250508190555083610164600082825461170e91906146c1565b90915550600090505b848110156117525760006117338761172e60995490565b61237f565b905061173f87826124ae565b508061174a8161454d565b915050611717565b5050610c58600160fb55565b600054610100900460ff161580801561177e5750600054600160ff909116105b806117985750303b158015611798575060005460ff166001145b61180a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016108c8565b6000805460ff19166001179055801561182d576000805461ff0019166101001790555b6118418a8a8a8a8a8a8a8a8a61091d6124d3565b8015611888576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15b50505050505050505050565b61189c611fdc565b61016854156118ac5760006118af565b60015b60ff16610168819055604051600190911481527f37ae8f893f8baa4aef207505c0e4d730119d73dc1363bbee6fda5f5d52c3cf179060200160405180910390a1565b6118f9611fdc565b6001600160a01b03811661194f5760405162461bcd60e51b815260206004820152601760248201527f41646472657373206973207a65726f206164647265737300000000000000000060448201526064016108c8565b61016b80546001600160a01b0319166001600160a01b0383169081179091556040519081527f8eb903ef93f1949409fbfad9304ceafc3ab8211c9ddbe9732ce8b1ede00efb3490602001610989565b60006119b260c9546001600160a01b031690565b905090565b606060668054610770906144e0565b61015f5482906001600160a01b03163b15611a785761015f54604051633185c44d60e21b81523060048201526001600160a01b0383811660248301529091169063c617113490604401602060405180830381865afa158015611a2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a50919061451a565b611a7857604051633b79c77360e21b81526001600160a01b03821660048201526024016108c8565b6108db838361286b565b61015f5484906001600160a01b03163b15611b4a57336001600160a01b03821603611ab857611ab38585858561287d565b611b56565b61015f54604051633185c44d60e21b81523060048201523360248201526001600160a01b039091169063c617113490604401602060405180830381865afa158015611b07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b2b919061451a565b611b4a57604051633b79c77360e21b81523360048201526024016108c8565b611b568585858561287d565b5050505050565b611b6561199e565b6001600160a01b0316336001600160a01b031614611baf576040517f5fc483c500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61015f80546001600160a01b0319166001600160a01b0392909216919091179055565b6060611bdd82611e3a565b6000611be761290c565b90506000815111611c075760405180602001604052806000815250610d38565b80611c118461291c565b604051602001611c229291906146d9565b6040516020818303038152906040529392505050565b61016e8054611c46906144e0565b80601f0160208091040260200160405190810160405280929190818152602001828054611c72906144e0565b8015611cbf5780601f10611c9457610100808354040283529160200191611cbf565b820191906000526020600020905b815481529060010190602001808311611ca257829003601f168201915b505050505081565b611ccf611fdc565b6001600160a01b038116611d4b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016108c8565b611d54816129bc565b50565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd000000000000000000000000000000000000000000000000000000001480611dea57507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061075b57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083161461075b565b6000818152606760205260409020546001600160a01b0316611d545760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e204944000000000000000060448201526064016108c8565b6000611ea982610fee565b9050806001600160a01b0316836001600160a01b031603611f325760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084016108c8565b806001600160a01b0316611f4461219f565b6001600160a01b03161480611f605750611f60816106c461219f565b611fd25760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016108c8565b6108db8383612a0e565b611fe461219f565b6001600160a01b0316611ff561199e565b6001600160a01b03161461204b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108c8565b565b61205e61205861219f565b82612a7c565b6120d05760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f7665640000000000000000000000000000000000000060648201526084016108c8565b6108db838383612afb565b6000808211801561075b57506101615482610164546120fa91906146c1565b111592915050565b600061016254826101656000866001600160a01b03166001600160a01b03168152602001908152602001600020600060016101675461214191906146aa565b81526020019081526020016000205461215a91906146c1565b11158015610d385750610160548261217160995490565b61217b91906146c1565b11159392505050565b6108db83838360405180602001604052806000815250611a82565b60006119b2612d31565b604080516001600160a01b03808a16602083015291810188905290861660608201526080810185905260a0810184905260c081018390526000906122509060e0015b60408051601f198184030181529082905280516020918201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000091830191909152603c820152605c016040516020818303038152906040528051906020012083612d77565b98975050505050505050565b600260fb54036122ae5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016108c8565b600260fb55565b604080516001600160a01b0380881660208301529181018690529084166060820152608081018390526000906122ed9060a0016121eb565b9695505050505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052610c58908590612d9b565b600080826101605461239191906146aa565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606087901b1660208201524460348201524260548201526074810182905290915060009082906094016040516020818303038152906040528051906020012060001c6124019190614708565b600081815261016a602052604090205490915081901561242d5750600081815261016a60205260409020545b61016a600061243d6001866146aa565b8152602001908152602001600020546000036124735761245e6001846146aa565b600083815261016a60205260409020556124a5565b61016a60006124836001866146aa565b8152602080820192909252604090810160009081205485825261016a90935220555b95945050505050565b6124c8828260405180602001604052806000815250612e80565b5050565b600160fb55565b600054610100900460ff1661253e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016108c8565b6125488989612f09565b61012d80546001600160a01b0319166001600160a01b03871617905561256c612f7e565b612574612ff9565b61257f84848461306c565b6125888a610f58565b89516000036125d95760405162461bcd60e51b815260206004820152601260248201527f62617365555249206973206e6f7420736574000000000000000000000000000060448201526064016108c8565b885160000361262a5760405162461bcd60e51b815260206004820152601060248201527f5f6e616d65206973206e6f74207365740000000000000000000000000000000060448201526064016108c8565b875160000361267b5760405162461bcd60e51b815260206004820152601260248201527f5f73796d626f6c206973206e6f7420736574000000000000000000000000000060448201526064016108c8565b6001600160a01b0386166126d15760405162461bcd60e51b815260206004820152601c60248201527f5369676e2061646472657373206973207a65726f20616464726573730000000060448201526064016108c8565b6001600160a01b03851661274d5760405162461bcd60e51b815260206004820152602160248201527f5472757374656420666f72776172646572206973207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016108c8565b6001600160a01b0387166127a35760405162461bcd60e51b815260206004820152601a60248201527f53616e64206f776e6572206973207a65726f206164647265737300000000000060448201526064016108c8565b600081116127f35760405162461bcd60e51b815260206004820181905260248201527f4d617820737570706c792073686f756c64206265206d6f7265207468616e203060448201526064016108c8565b61016c80546001600160a01b03808a166001600160a01b03199283161790925561016d8054928916929091169190911790556101608190556040517f1a3a62dc20450ece39e01e20bfba98408b580d8576926c8ca06f987f9db300bc9061187f908c908c908c908c908c9088908c908c908c9061472a565b6124c861287661219f565b8383613232565b61288e61288861219f565b83612a7c565b6129005760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f7665640000000000000000000000000000000000000060648201526084016108c8565b610c5884848484613300565b606061016e8054610770906144e0565b6060600061292983613389565b600101905060008167ffffffffffffffff8111156129495761294961418d565b6040519080825280601f01601f191660200182016040528015612973576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461297d57509392505050565b60c980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600081815260696020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612a4382610fee565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080612a8883610fee565b9050806001600160a01b0316846001600160a01b03161480612acf57506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff165b80612af35750836001600160a01b0316612ae8846107f3565b6001600160a01b0316145b949350505050565b826001600160a01b0316612b0e82610fee565b6001600160a01b031614612b8a5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e657200000000000000000000000000000000000000000000000000000060648201526084016108c8565b6001600160a01b038216612c055760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016108c8565b612c12838383600161346b565b826001600160a01b0316612c2582610fee565b6001600160a01b031614612ca15760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e657200000000000000000000000000000000000000000000000000000060648201526084016108c8565b600081815260696020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260688552838620805460001901905590871680865283862080546001019055868652606790945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b61012d546000906001600160a01b03163303612d7257507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c90565b503390565b6000806000612d8685856135a7565b91509150612d93816135ec565b509392505050565b6000612df0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166137519092919063ffffffff16565b8051909150156108db5780806020019051810190612e0e919061451a565b6108db5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016108c8565b612e8a8383613760565b612e9760008484846138f9565b6108db5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016108c8565b600054610100900460ff16612f745760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016108c8565b6124c88282613a88565b600054610100900460ff16612fe95760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016108c8565b61204b612ff461219f565b6129bc565b600054610100900460ff166130645760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016108c8565b61204b613b0c565b600054610100900460ff166130d75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016108c8565b61015f80546001600160a01b0319166001600160a01b0385169081179091553b156108db5780156131875761015f546040517f7d3e3dbe0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03848116602483015290911690637d3e3dbe906044015b600060405180830381600087803b15801561316a57600080fd5b505af115801561317e573d6000803e3d6000fd5b50505050505050565b6001600160a01b038216156131e85761015f546040517fa0af29030000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0384811660248301529091169063a0af290390604401613150565b61015f546040517f4420e4860000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0390911690634420e48690602401613150565b816001600160a01b0316836001600160a01b0316036132935760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016108c8565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61330b848484612afb565b613317848484846138f9565b610c585760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016108c8565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106133d2577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106133fe576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061341c57662386f26fc10000830492506010015b6305f5e1008310613434576305f5e100830492506008015b612710831061344857612710830492506004015b6064831061345a576064830492506002015b600a831061075b5760010192915050565b61347784848484613b77565b60018111156134ee5760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e736563757469766520747260448201527f616e7366657273206e6f7420737570706f72746564000000000000000000000060648201526084016108c8565b816001600160a01b03851661354a5761354581609980546000838152609a60205260408120829055600182018355919091527f72a152ddfb8e864297c917af52ea6c1c68aead0fee1a62673fcc7e0c94979d000155565b61356d565b836001600160a01b0316856001600160a01b03161461356d5761356d8582613bff565b6001600160a01b03841661358457611ab381613c9c565b846001600160a01b0316846001600160a01b031614611b5657611b568482613d4b565b60008082516041036135dd5760208301516040840151606085015160001a6135d187828585613d8f565b945094505050506135e5565b506000905060025b9250929050565b6000816004811115613600576136006147ac565b036136085750565b600181600481111561361c5761361c6147ac565b036136695760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016108c8565b600281600481111561367d5761367d6147ac565b036136ca5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016108c8565b60038160048111156136de576136de6147ac565b03611d545760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016108c8565b6060612af38484600085613e53565b6001600160a01b0382166137b65760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016108c8565b6000818152606760205260409020546001600160a01b03161561381b5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016108c8565b61382960008383600161346b565b6000818152606760205260409020546001600160a01b03161561388e5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016108c8565b6001600160a01b038216600081815260686020908152604080832080546001019055848352606790915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160a01b0384163b15613a7d57836001600160a01b031663150b7a0261392261219f565b8786866040518563ffffffff1660e01b815260040161394494939291906147c2565b6020604051808303816000875af192505050801561397f575060408051601f3d908101601f1916820190925261397c918101906147f4565b60015b613a32573d8080156139ad576040519150601f19603f3d011682016040523d82523d6000602084013e6139b2565b606091505b508051600003613a2a5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016108c8565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050612af3565b506001949350505050565b600054610100900460ff16613af35760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016108c8565b6065613aff83826145ea565b5060666108db82826145ea565b600054610100900460ff166124cc5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016108c8565b6001811115610c58576001600160a01b03841615613bbd576001600160a01b03841660009081526068602052604081208054839290613bb79084906146aa565b90915550505b6001600160a01b03831615610c58576001600160a01b03831660009081526068602052604081208054839290613bf49084906146c1565b909155505050505050565b60006001613c0c84611220565b613c1691906146aa565b600083815260986020526040902054909150808214613c69576001600160a01b03841660009081526097602090815260408083208584528252808320548484528184208190558352609890915290208190555b5060009182526098602090815260408084208490556001600160a01b039094168352609781528383209183525290812055565b609954600090613cae906001906146aa565b6000838152609a602052604081205460998054939450909284908110613cd657613cd6614586565b906000526020600020015490508060998381548110613cf757613cf7614586565b6000918252602080832090910192909255828152609a90915260408082208490558582528120556099805480613d2f57613d2f614811565b6001900381819060005260206000200160009055905550505050565b6000613d5683611220565b6001600160a01b039093166000908152609760209081526040808320868452825280832085905593825260989052919091209190915550565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115613dc65750600090506003613e4a565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015613e1a573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116613e4357600060019250925050613e4a565b9150600090505b94509492505050565b606082471015613ecb5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016108c8565b600080866001600160a01b03168587604051613ee79190614827565b60006040518083038185875af1925050503d8060008114613f24576040519150601f19603f3d011682016040523d82523d6000602084013e613f29565b606091505b5091509150613f3a87838387613f45565b979650505050505050565b60608315613fb4578251600003613fad576001600160a01b0385163b613fad5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108c8565b5081612af3565b612af38383815115613fc95781518083602001fd5b8060405162461bcd60e51b81526004016108c89190614086565b7fffffffff0000000000000000000000000000000000000000000000000000000081168114611d5457600080fd5b60006020828403121561402357600080fd5b8135610d3881613fe3565b60005b83811015614049578181015183820152602001614031565b83811115610c585750506000910152565b6000815180845261407281602086016020860161402e565b601f01601f19169290920160200192915050565b602081526000610d38602083018461405a565b6000602082840312156140ab57600080fd5b5035919050565b6001600160a01b0381168114611d5457600080fd5b80356140d2816140b2565b919050565b600080604083850312156140ea57600080fd5b82356140f5816140b2565b946020939093013593505050565b60006020828403121561411557600080fd5b8135610d38816140b2565b60008060006060848603121561413557600080fd5b505081359360208301359350604090920135919050565b60008060006060848603121561416157600080fd5b833561416c816140b2565b9250602084013561417c816140b2565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126141b457600080fd5b813567ffffffffffffffff808211156141cf576141cf61418d565b604051601f8301601f19908116603f011681019082821181831017156141f7576141f761418d565b8160405283815286602085880101111561421057600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006020828403121561424257600080fd5b813567ffffffffffffffff81111561425957600080fd5b612af3848285016141a3565b6000806000806080858703121561427b57600080fd5b84359350602085013567ffffffffffffffff81111561429957600080fd5b6142a5878288016141a3565b949794965050505060408301359260600135919050565b600080600080608085870312156142d257600080fd5b84356142dd816140b2565b93506020850135925060408501359150606085013567ffffffffffffffff81111561430757600080fd5b614313878288016141a3565b91505092959194509250565b8015158114611d5457600080fd5b80356140d28161431f565b60008060008060008060008060006101208a8c03121561435757600080fd5b893567ffffffffffffffff8082111561436f57600080fd5b61437b8d838e016141a3565b9a5060208c013591508082111561439157600080fd5b61439d8d838e016141a3565b995060408c01359150808211156143b357600080fd5b506143c08c828d016141a3565b9750506143cf60608b016140c7565b95506143dd60808b016140c7565b94506143eb60a08b016140c7565b93506143f960c08b016140c7565b925061440760e08b016140c7565b91506144166101008b0161432d565b90509295985092959850929598565b6000806040838503121561443857600080fd5b8235614443816140b2565b915060208301356144538161431f565b809150509250929050565b6000806000806080858703121561447457600080fd5b843561447f816140b2565b9350602085013561448f816140b2565b925060408501359150606085013567ffffffffffffffff81111561430757600080fd5b600080604083850312156144c557600080fd5b82356144d0816140b2565b91506020830135614453816140b2565b600181811c908216806144f457607f821691505b60208210810361451457634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561452c57600080fd5b8151610d388161431f565b634e487b7160e01b600052601160045260246000fd5b6000600019820361456057614560614537565b5060010190565b600081600019048311821515161561458157614581614537565b500290565b634e487b7160e01b600052603260045260246000fd5b601f8211156108db57600081815260208120601f850160051c810160208610156145c35750805b601f850160051c820191505b818110156145e2578281556001016145cf565b505050505050565b815167ffffffffffffffff8111156146045761460461418d565b6146188161461284546144e0565b8461459c565b602080601f83116001811461464d57600084156146355750858301515b600019600386901b1c1916600185901b1785556145e2565b600085815260208120601f198616915b8281101561467c5788860151825594840194600190910190840161465d565b508582101561469a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000828210156146bc576146bc614537565b500390565b600082198211156146d4576146d4614537565b500190565b600083516146eb81846020880161402e565b8351908301906146ff81836020880161402e565b01949350505050565b60008261472557634e487b7160e01b600052601260045260246000fd5b500690565b600061012080835261473e8184018d61405a565b90508281036020840152614752818c61405a565b90508281036040840152614766818b61405a565b6001600160a01b03998a1660608501529789166080840152505060a081019490945291851660c084015290931660e0820152911515610100909201919091529392505050565b634e487b7160e01b600052602160045260246000fd5b60006001600160a01b038087168352808616602084015250836040830152608060608301526122ed608083018461405a565b60006020828403121561480657600080fd5b8151610d3881613fe3565b634e487b7160e01b600052603160045260246000fd5b6000825161483981846020870161402e565b919091019291505056fea264697066735822122089ec803a3f84920a6a91b44fc97d769cda29dfd93dcaa75dea77e6fe9169623864736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See OpenZeppelin {IERC721-approve}"
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "chain()": {
        "details": "returns block.chainid",
        "returns": {
          "_0": "uint256 current chainID for the blockchain"
        }
      },
      "checkMintAllowed(address,uint256)": {
        "params": {
          "_amount": "amount to be checked if can be minted",
          "_wallet": "wallet to be checked if it can mint"
        },
        "returns": {
          "_0": "if can mint or not"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mint(address,uint256,uint256,bytes)": {
        "params": {
          "_amount": "number of token to mint",
          "_signature": "signing signature value",
          "_signatureId": "signing signature ID",
          "_wallet": "minting wallet"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "returns OwnableUpgradeable.owner()",
        "returns": {
          "_0": "owner of current contract"
        }
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "personalizationOf(uint256)": {
        "details": "returns personalizationTraits[_tokenId]",
        "params": {
          "_tokenId": "the token ID to check"
        },
        "returns": {
          "_0": "uint256 the personalization data as uint256"
        }
      },
      "personalize(uint256,bytes,uint256,uint256)": {
        "details": "after checks, it is reduced to personalizationTraits[_tokenId] = _personalizationMask      emits {Personalized} event",
        "params": {
          "_personalizationMask": "a mask where each bit has a custom meaning in-game",
          "_signature": "signing signature",
          "_signatureId": "the ID of the provided signature",
          "_tokenId": "what token to personalize"
        }
      },
      "price(uint256)": {
        "details": "returns waveSingleTokenPrice * _count; Does not check if it is possible      to actually mint that much",
        "params": {
          "_count": "the number of tokens to estimate mint price for"
        },
        "returns": {
          "_0": "uint256 price of minting all the tokens"
        }
      },
      "renounceOwnership()": {
        "details": "reverts on call"
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See OpenZeppelin {IERC721-safeTransferFrom}"
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See OpenZeppelin {IERC721-safeTransferFrom}"
      },
      "setAllowedExecuteMint(address)": {
        "details": "sets allowedToExecuteMint = _address; address can't be 0",
        "params": {
          "_address": "the address that will be allowed to set execute the mint function"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "See OpenZeppelin {IERC721-setApprovalForAll}"
      },
      "setBaseURI(string)": {
        "details": "sets baseTokenURI = baseURI",
        "params": {
          "baseURI": "an URI that will be used as the base for token URI"
        }
      },
      "setSandOwnerAddress(address)": {
        "details": "just sets sandOwner = _owner",
        "params": {
          "_owner": "new owner address to be saved"
        }
      },
      "setSignAddress(address)": {
        "details": "sets signAddress = _signAddress; address can't be 0",
        "params": {
          "_signAddress": "new signer address to be set"
        }
      },
      "setupWave(uint256,uint256,uint256)": {
        "details": "emits {WaveSetup} event",
        "params": {
          "_waveMaxTokens": "the allowed number of tokens to be minted in this wave (cumulative by all minting wallets)",
          "_waveMaxTokensToBuy": "max tokens to buy, per wallet in a given wave",
          "_waveSingleTokenPrice": "the price to mint a token in a given wave. In SAND wei"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "toggleSale()": {
        "details": "toggle the paused"
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See OpenZeppelin {IERC721-transferFrom}"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "AllowedExecuteMintSet(address)": {
        "notice": "Event emitted when an address was set as allowed to mint"
      },
      "BaseURISet(string)": {
        "notice": "Event emitted when the base token URI for the contract was set or changed"
      },
      "ContractInitialized(string,string,string,address,address,uint256,address,address,bool)": {
        "notice": "Event emitted when the contract was initialized."
      },
      "Personalized(uint256,uint256)": {
        "notice": "Event emitted when a token personalization was made."
      },
      "SaleToggled(bool)": {
        "notice": "Event emitted when sale state was changed."
      },
      "SandOwnerSet(address)": {
        "notice": "Event emitted when the SAND contract owner was saved"
      },
      "SignAddressSet(address)": {
        "notice": "Event emitted when the signer address was set or changed"
      },
      "WaveSetup(uint256,uint256,uint256)": {
        "notice": "Event emitted when a wave was set up"
      }
    },
    "kind": "user",
    "methods": {
      "chain()": {
        "notice": "helper automation function"
      },
      "checkMintAllowed(address,uint256)": {
        "notice": "check if the indicated wallet can mint the indicated amount"
      },
      "maxSupply()": {
        "notice": "max token supply"
      },
      "mint(address,uint256,uint256,bytes)": {
        "notice": "token minting function. Price is set by wave and is paid in SAND tokens"
      },
      "owner()": {
        "notice": "returns the owner of the contract"
      },
      "personalizationOf(uint256)": {
        "notice": "get the personalization of the indicated tokenID"
      },
      "personalizationTraits(uint256)": {
        "notice": "stores the personalization for a tokenId"
      },
      "personalize(uint256,bytes,uint256,uint256)": {
        "notice": "personalize token traits"
      },
      "price(uint256)": {
        "notice": "get the price of minting the indicated number of tokens for the current wave"
      },
      "renounceOwnership()": {
        "notice": "function renounces ownership of contract. Currently it is disable,         as to not risk loosing mint funds"
      },
      "setAllowedExecuteMint(address)": {
        "notice": "sets which address is allowed to execute the mint function.         Emits {AllowedExecuteMintSet} event"
      },
      "setBaseURI(string)": {
        "notice": "sets the base token URI for the contract. Emits a {BaseURISet} event."
      },
      "setSandOwnerAddress(address)": {
        "notice": "saving locally the SAND token owner. Emits {SandOwnerSet} event"
      },
      "setSignAddress(address)": {
        "notice": "sets the sign address. Emits {SignAddressSet} event"
      },
      "setupWave(uint256,uint256,uint256)": {
        "notice": "function to setup wave parameters. A wave is defined as a combination of allowed number tokens to be         minted in total, per wallet and minting price"
      },
      "toggleSale()": {
        "notice": "pause or unpause the contract. Emits the {SaleToggled} event"
      },
      "updateOperatorFilterRegistryAddress(address)": {
        "notice": "Update the address that the contract will make OperatorFilter checks against. When set to the zero         address, checks will be bypassed. OnlyOwner."
      },
      "waveMaxTokens()": {
        "notice": "max tokens to buy per wave, cumulating all addresses"
      },
      "waveMaxTokensToBuy()": {
        "notice": "max tokens to buy, per wallet in a given wave"
      },
      "waveSingleTokenPrice()": {
        "notice": "price of one token mint (in the token owned by the sandOwner which in our case is SAND)"
      },
      "waveTotalMinted()": {
        "notice": "number of total minted tokens in the current running wave"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2977,
        "contract": "src/solc_0.8.15/raffle/HellsKitchen.sol:HellsKitchen",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 2980,
        "contract": "src/solc_0.8.15/raffle/HellsKitchen.sol:HellsKitchen",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5073,
        "contract": "src/solc_0.8.15/raffle/HellsKitchen.sol:HellsKitchen",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5292,
        "contract": "src/solc_0.8.15/raffle/HellsKitchen.sol:HellsKitchen",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3241,
        "contract": "src/solc_0.8.15/raffle/HellsKitchen.sol:HellsKitchen",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 3243,
        "contract": "src/solc_0.8.15/raffle/HellsKitchen.sol:HellsKitchen",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 3247,
        "contract": "src/solc_0.8.15/raffle/HellsKitchen.sol:HellsKitchen",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3251,
        "contract": "src/solc_0.8.15/raffle/HellsKitchen.sol:HellsKitchen",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3255,
        "contract": "src/solc_0.8.15/raffle/HellsKitchen.sol:HellsKitchen",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3261,
        "contract": "src/solc_0.8.15/raffle/HellsKitchen.sol:HellsKitchen",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 4181,
        "contract": "src/solc_0.8.15/raffle/HellsKitchen.sol:HellsKitchen",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 4346,
        "contract": "src/solc_0.8.15/raffle/HellsKitchen.sol:HellsKitchen",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 4350,
        "contract": "src/solc_0.8.15/raffle/HellsKitchen.sol:HellsKitchen",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4353,
        "contract": "src/solc_0.8.15/raffle/HellsKitchen.sol:HellsKitchen",
        "label": "_allTokens",
        "offset": 0,
        "slot": "153",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 4357,
        "contract": "src/solc_0.8.15/raffle/HellsKitchen.sol:HellsKitchen",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4689,
        "contract": "src/solc_0.8.15/raffle/HellsKitchen.sol:HellsKitchen",
        "label": "__gap",
        "offset": 0,
        "slot": "155",
        "type": "t_array(t_uint256)46_storage"
      },
      {
        "astId": 2849,
        "contract": "src/solc_0.8.15/raffle/HellsKitchen.sol:HellsKitchen",
        "label": "_owner",
        "offset": 0,
        "slot": "201",
        "type": "t_address"
      },
      {
        "astId": 2969,
        "contract": "src/solc_0.8.15/raffle/HellsKitchen.sol:HellsKitchen",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3153,
        "contract": "src/solc_0.8.15/raffle/HellsKitchen.sol:HellsKitchen",
        "label": "_status",
        "offset": 0,
        "slot": "251",
        "type": "t_uint256"
      },
      {
        "astId": 3211,
        "contract": "src/solc_0.8.15/raffle/HellsKitchen.sol:HellsKitchen",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6175,
        "contract": "src/solc_0.8.15/raffle/HellsKitchen.sol:HellsKitchen",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "301",
        "type": "t_address"
      },
      {
        "astId": 6179,
        "contract": "src/solc_0.8.15/raffle/HellsKitchen.sol:HellsKitchen",
        "label": "__gap",
        "offset": 0,
        "slot": "302",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6463,
        "contract": "src/solc_0.8.15/raffle/HellsKitchen.sol:HellsKitchen",
        "label": "operatorFilterRegistry",
        "offset": 0,
        "slot": "351",
        "type": "t_contract(IOperatorFilterRegistry)6446"
      },
      {
        "astId": 6671,
        "contract": "src/solc_0.8.15/raffle/HellsKitchen.sol:HellsKitchen",
        "label": "maxSupply",
        "offset": 0,
        "slot": "352",
        "type": "t_uint256"
      },
      {
        "astId": 6736,
        "contract": "src/solc_0.8.15/raffle/HellsKitchen.sol:HellsKitchen",
        "label": "waveMaxTokens",
        "offset": 0,
        "slot": "353",
        "type": "t_uint256"
      },
      {
        "astId": 6739,
        "contract": "src/solc_0.8.15/raffle/HellsKitchen.sol:HellsKitchen",
        "label": "waveMaxTokensToBuy",
        "offset": 0,
        "slot": "354",
        "type": "t_uint256"
      },
      {
        "astId": 6742,
        "contract": "src/solc_0.8.15/raffle/HellsKitchen.sol:HellsKitchen",
        "label": "waveSingleTokenPrice",
        "offset": 0,
        "slot": "355",
        "type": "t_uint256"
      },
      {
        "astId": 6745,
        "contract": "src/solc_0.8.15/raffle/HellsKitchen.sol:HellsKitchen",
        "label": "waveTotalMinted",
        "offset": 0,
        "slot": "356",
        "type": "t_uint256"
      },
      {
        "astId": 6751,
        "contract": "src/solc_0.8.15/raffle/HellsKitchen.sol:HellsKitchen",
        "label": "waveOwnerToClaimedCounts",
        "offset": 0,
        "slot": "357",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 6756,
        "contract": "src/solc_0.8.15/raffle/HellsKitchen.sol:HellsKitchen",
        "label": "personalizationTraits",
        "offset": 0,
        "slot": "358",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 6758,
        "contract": "src/solc_0.8.15/raffle/HellsKitchen.sol:HellsKitchen",
        "label": "indexWave",
        "offset": 0,
        "slot": "359",
        "type": "t_uint256"
      },
      {
        "astId": 6760,
        "contract": "src/solc_0.8.15/raffle/HellsKitchen.sol:HellsKitchen",
        "label": "paused",
        "offset": 0,
        "slot": "360",
        "type": "t_uint256"
      },
      {
        "astId": 6764,
        "contract": "src/solc_0.8.15/raffle/HellsKitchen.sol:HellsKitchen",
        "label": "signatureIds",
        "offset": 0,
        "slot": "361",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 6768,
        "contract": "src/solc_0.8.15/raffle/HellsKitchen.sol:HellsKitchen",
        "label": "availableIds",
        "offset": 0,
        "slot": "362",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 6770,
        "contract": "src/solc_0.8.15/raffle/HellsKitchen.sol:HellsKitchen",
        "label": "allowedToExecuteMint",
        "offset": 0,
        "slot": "363",
        "type": "t_address"
      },
      {
        "astId": 6772,
        "contract": "src/solc_0.8.15/raffle/HellsKitchen.sol:HellsKitchen",
        "label": "sandOwner",
        "offset": 0,
        "slot": "364",
        "type": "t_address"
      },
      {
        "astId": 6774,
        "contract": "src/solc_0.8.15/raffle/HellsKitchen.sol:HellsKitchen",
        "label": "signAddress",
        "offset": 0,
        "slot": "365",
        "type": "t_address"
      },
      {
        "astId": 6776,
        "contract": "src/solc_0.8.15/raffle/HellsKitchen.sol:HellsKitchen",
        "label": "baseTokenURI",
        "offset": 0,
        "slot": "366",
        "type": "t_string_storage"
      },
      {
        "astId": 7822,
        "contract": "src/solc_0.8.15/raffle/HellsKitchen.sol:HellsKitchen",
        "label": "__gap",
        "offset": 0,
        "slot": "367",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)46_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[46]",
        "numberOfBytes": "1472"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IOperatorFilterRegistry)6446": {
        "encoding": "inplace",
        "label": "contract IOperatorFilterRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}