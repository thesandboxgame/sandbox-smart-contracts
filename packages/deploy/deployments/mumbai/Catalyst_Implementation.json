{
  "address": "0x0675d3Ad952e443635AD76A22Dceab391556A0d3",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "BaseURISet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newDefaultRoyaltyRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDefaultRoyaltyAmount",
          "type": "uint256"
        }
      ],
      "name": "DefaultRoyaltyChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "catalystId",
          "type": "uint256"
        }
      ],
      "name": "NewCatalystTypeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "registry",
          "type": "address"
        }
      ],
      "name": "OperatorFilterRegistrySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "registry",
          "type": "address"
        }
      ],
      "name": "OperatorRegistrySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_royaltyManager",
          "type": "address"
        }
      ],
      "name": "RoyaltyManagerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newTrustedForwarderAddress",
          "type": "address"
        }
      ],
      "name": "TrustedForwarderChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldTrustedForwarder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newTrustedForwarder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "TrustedForwarderSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BURNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "ipfsCID",
          "type": "string"
        }
      ],
      "name": "addNewCatalystType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatchFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOperatorFilterRegistry",
      "outputs": [
        {
          "internalType": "contract IOperatorFilterRegistry",
          "name": "operatorFilterRegistryAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRoyaltyManager",
      "outputs": [
        {
          "internalType": "contract IRoyaltyManager",
          "name": "royaltyManagerAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "highestTierIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_baseUri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_trustedForwarder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_subscription",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_defaultAdmin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_defaultMinter",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "_catalystIpfsCID",
          "type": "string[]"
        },
        {
          "internalType": "address",
          "name": "_royaltyManager",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "mintBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "subscriptionOrRegistrantToCopy",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "subscribe",
          "type": "bool"
        }
      ],
      "name": "registerAndSubscribe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "metadataHash",
          "type": "string"
        }
      ],
      "name": "setMetadataHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "registry",
          "type": "address"
        }
      ],
      "name": "setOperatorRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x351a3016385979c4d0a1f0076e2aa76667f7ea8c304c8a405abde8a8aa5d6796",
  "receipt": {
    "to": null,
    "from": "0x5F890c9522dCE5670d741D4277BFCC2d9cA8Af02",
    "contractAddress": "0x0675d3Ad952e443635AD76A22Dceab391556A0d3",
    "transactionIndex": 8,
    "gasUsed": "4007590",
    "logsBloom": "0x
    "blockHash": "0x9cdb38d7acfaffedf487e3dc1ad5877b90b1642a65160aeab2f44adf8564c06a",
    "transactionHash": "0x351a3016385979c4d0a1f0076e2aa76667f7ea8c304c8a405abde8a8aa5d6796",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 40238262,
        "transactionHash": "0x351a3016385979c4d0a1f0076e2aa76667f7ea8c304c8a405abde8a8aa5d6796",
        "address": "0x0675d3Ad952e443635AD76A22Dceab391556A0d3",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 27,
        "blockHash": "0x9cdb38d7acfaffedf487e3dc1ad5877b90b1642a65160aeab2f44adf8564c06a"
      },
      {
        "transactionIndex": 8,
        "blockNumber": 40238262,
        "transactionHash": "0x351a3016385979c4d0a1f0076e2aa76667f7ea8c304c8a405abde8a8aa5d6796",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000022e1f5e46ea4ae00000000000000000000000000000000000000000000000fc011d97fc4c70e2e000000000000000000000000000000000000000000001142a61953d4843c35e600000000000000000000000000000000000000000000000fbfeef789e0586980000000000000000000000000000000000000000000001142a63c35ca68aada94",
        "logIndex": 28,
        "blockHash": "0x9cdb38d7acfaffedf487e3dc1ad5877b90b1642a65160aeab2f44adf8564c06a"
      }
    ],
    "blockNumber": 40238262,
    "cumulativeGasUsed": "4981109",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a7dad225e4948fd90c6be2fd4b947044",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"BaseURISet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDefaultRoyaltyRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDefaultRoyaltyAmount\",\"type\":\"uint256\"}],\"name\":\"DefaultRoyaltyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"catalystId\",\"type\":\"uint256\"}],\"name\":\"NewCatalystTypeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"OperatorFilterRegistrySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"OperatorRegistrySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_royaltyManager\",\"type\":\"address\"}],\"name\":\"RoyaltyManagerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTrustedForwarderAddress\",\"type\":\"address\"}],\"name\":\"TrustedForwarderChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldTrustedForwarder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTrustedForwarder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"TrustedForwarderSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BURNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ipfsCID\",\"type\":\"string\"}],\"name\":\"addNewCatalystType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"burnBatchFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperatorFilterRegistry\",\"outputs\":[{\"internalType\":\"contract IOperatorFilterRegistry\",\"name\":\"operatorFilterRegistryAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRoyaltyManager\",\"outputs\":[{\"internalType\":\"contract IRoyaltyManager\",\"name\":\"royaltyManagerAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"highestTierIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseUri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_subscription\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_defaultAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_defaultMinter\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"_catalystIpfsCID\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"_royaltyManager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"subscriptionOrRegistrantToCopy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"subscribe\",\"type\":\"bool\"}],\"name\":\"registerAndSubscribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadataHash\",\"type\":\"string\"}],\"name\":\"setMetadataHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"setOperatorRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"The Sandbox\",\"details\":\"An ERC1155 contract that manages catalysts, extends multiple OpenZeppelin contracts to provide a variety of features including, AccessControl, URIStorage, Burnable and more. The contract includes support for meta transactions.\",\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\"},\"TrustedForwarderSet(address,address,address)\":{\"params\":{\"newTrustedForwarder\":\"new trusted forwarder\",\"oldTrustedForwarder\":\"old trusted forwarder\",\"operator\":\"the sender of the transaction\"}},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"addNewCatalystType(string)\":{\"params\":{\"ipfsCID\":\"The IPFS content identifiers for the catalyst\"}},\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"burnBatchFrom(address,uint256[],uint256[])\":{\"params\":{\"account\":\"The address to burn from\",\"amounts\":\"The amounts to be burned\",\"ids\":\"The token ids to burn\"}},\"burnFrom(address,uint256,uint256)\":{\"params\":{\"account\":\"The address to burn from\",\"amount\":\"The amount to be burned\",\"id\":\"The token id to burn\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"exists(uint256)\":{\"details\":\"Indicates whether any token exist with a given id, or not.\"},\"getOperatorFilterRegistry()\":{\"returns\":{\"operatorFilterRegistryAddress\":\"address of operator filter registry contract.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoyaltyManager()\":{\"returns\":{\"royaltyManagerAddress\":\"address of royalty manager contract.\"}},\"getTrustedForwarder()\":{\"returns\":{\"_0\":\"return the address of the trusted forwarder\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(string,address,address,address,address,string[],address)\":{\"params\":{\"_baseUri\":\"The base URI for the token metadata, most likely set to ipfs://.\",\"_catalystIpfsCID\":\"The IPFS content identifiers for each catalyst.\",\"_defaultAdmin\":\"The default admin address.\",\"_defaultMinter\":\"The default minter address.\",\"_royaltyManager\":\", the address of the Manager contract for common royalty recipient\",\"_subscription\":\"The subscription address.\",\"_trustedForwarder\":\"The trusted forwarder for meta transactions.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"trusted forwarder address to check\"},\"returns\":{\"_0\":\"true if the address is the same as the trusted forwarder\"}},\"mint(address,uint256,uint256)\":{\"params\":{\"amount\":\"The amount to be minted\",\"id\":\"The token id to mint\",\"to\":\"The address that will own the minted token\"}},\"mintBatch(address,uint256[],uint256[])\":{\"params\":{\"amounts\":\"The amounts to be minted per token id\",\"ids\":\"The token ids to mint\",\"to\":\"The address that will own the minted tokens\"}},\"registerAndSubscribe(address,bool)\":{\"details\":\"used to register contract and subscribe to the subscriptionOrRegistrantToCopy's black list.\",\"params\":{\"subscribe\":\"bool to signify subscription \\\"true\\\"\\\" or to copy the list \\\"false\\\".\",\"subscriptionOrRegistrantToCopy\":\"registration address of the list to subscribe.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"tokenId is one of the EIP2981 args for this function can't be removed\",\"params\":{\"_salePrice\":\"the price of token on which the royalty is calculated\"},\"returns\":{\"receiver\":\"the receiver of royalty\",\"royaltyAmount\":\"the amount of royalty\"}},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"call data should be optimized to order ids so packedBalance can be used efficiently.\",\"params\":{\"data\":\"additional data accompanying the transfer.\",\"from\":\"address from which tokens are transfered.\",\"ids\":\"ids of each token type transfered.\",\"to\":\"address to which the token will be transfered.\",\"values\":\"amount of each token type transfered.\"}},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"params\":{\"data\":\"additional data accompanying the transfer.\",\"from\":\"address from which tokens are transfered.\",\"id\":\"the token type transfered.\",\"to\":\"address to which the token will be transfered.\",\"value\":\"amount of token transfered.\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"approved\":\"whether to approve or revoke\",\"operator\":\"address which will be granted rights to transfer all tokens of the caller.\"}},\"setBaseURI(string)\":{\"params\":{\"baseURI\":\"The new base URI\"}},\"setMetadataHash(uint256,string)\":{\"params\":{\"metadataHash\":\"The new URI\",\"tokenId\":\"The token id to set URI for\"}},\"setOperatorRegistry(address)\":{\"params\":{\"registry\":\"the address of the registry\"}},\"setTrustedForwarder(address)\":{\"details\":\"Change the address of the trusted forwarder for meta-TX\",\"params\":{\"trustedForwarder\":\"The new trustedForwarder\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"the interface identifier, as specified in ERC-165.\"},\"returns\":{\"_0\":\"`true` if the contract implements `interfaceId`.\"}},\"totalSupply(uint256)\":{\"details\":\"Total amount of tokens in with a given id.\"},\"uri(uint256)\":{\"params\":{\"tokenId\":\"The token id to get URI for\"},\"returns\":{\"_0\":\"tokenURI the URI of the token\"}}},\"title\":\"Catalyst\",\"version\":1},\"userdoc\":{\"events\":{\"TrustedForwarderSet(address,address,address)\":{\"notice\":\"Emitted when a `newTrustedForwarder` is set, replacing the `oldTrustedForwarder`\"}},\"kind\":\"user\",\"methods\":{\"addNewCatalystType(string)\":{\"notice\":\"Add a new catalyst type, limited to DEFAULT_ADMIN_ROLE only\"},\"burnBatchFrom(address,uint256[],uint256[])\":{\"notice\":\"Burns a batch of tokens from a specific address\"},\"burnFrom(address,uint256,uint256)\":{\"notice\":\"Burns a specified amount of tokens from a specific address\"},\"getOperatorFilterRegistry()\":{\"notice\":\"returns the operator filter registry.\"},\"getRoyaltyManager()\":{\"notice\":\"returns the royalty manager\"},\"getTrustedForwarder()\":{\"notice\":\"return the address of the trusted forwarder\"},\"initialize(string,address,address,address,address,string[],address)\":{\"notice\":\"Initialize the contract, setting up initial values for various features.\"},\"isTrustedForwarder(address)\":{\"notice\":\"return true if the forwarder is the trusted forwarder\"},\"mint(address,uint256,uint256)\":{\"notice\":\"Mints a new token, limited to MINTER_ROLE only\"},\"mintBatch(address,uint256[],uint256[])\":{\"notice\":\"Mints a batch of tokens, limited to MINTER_ROLE only\"},\"registerAndSubscribe(address,bool)\":{\"notice\":\"This function is used to register Catalyst contract on the Operator Filterer Registry of OpenSea. Can only be called by admin.\"},\"royaltyInfo(uint256,uint256)\":{\"notice\":\"Returns how much royalty is owed and to whom based on ERC2981\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Transfers `values` tokens of type `ids` from  `from` to `to` (with safety call).\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"notice\":\"Transfers `value` tokens of type `id` from  `from` to `to`  (with safety call).\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Enable or disable approval for `operator` to manage all of the caller's tokens.\"},\"setBaseURI(string)\":{\"notice\":\"Set a new base URI\"},\"setMetadataHash(uint256,string)\":{\"notice\":\"Set a new URI for specific tokenid\"},\"setOperatorRegistry(address)\":{\"notice\":\"sets filter registry address\"},\"setTrustedForwarder(address)\":{\"notice\":\"Set a new trusted forwarder address, limited to DEFAULT_ADMIN_ROLE only\"},\"supportsInterface(bytes4)\":{\"notice\":\"Query if a contract implements interface `id`.\"},\"uri(uint256)\":{\"notice\":\"returns full token URI, including baseURI and token metadata URI\"}},\"notice\":\"This contract manages catalysts which are used to mint new assets.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@sandbox-smart-contracts/asset/contracts/Catalyst.sol\":\"Catalyst\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@manifoldxyz/royalty-registry-solidity/contracts/overrides/IRoyaltySplitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\nstruct Recipient {\\n    address payable recipient;\\n    uint16 bps;\\n}\\n\\ninterface IRoyaltySplitter is IERC165 {\\n    /**\\n     * @dev Set the splitter recipients. Total bps must total 10000.\\n     */\\n    function setRecipients(Recipient[] calldata recipients) external;\\n\\n    /**\\n     * @dev Get the splitter recipients;\\n     */\\n    function getRecipients() external view returns (Recipient[] memory);\\n}\\n\",\"keccak256\":\"0xc507963f66c4238d25e69d2d05ac5995c549aa89789e89e7a556403221547c6d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xfeefb24d068524440e1ba885efdf105d91f83504af3c2d745ffacc4595396831\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x1a94069aa241fa1ebb4409d02a405c932d3ad7e875bdd5587c88244da210ccdf\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual override returns (uint256[] memory) {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0xc3e465e1fdd0e491688ad75ef1b946e1680e7f9f78bf5beeefd6daed8693c856\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf51f292659a77777c0ed7375a39683d8bee53b86a6e7bd0c76f34ce7aa37a3a8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/extensions/ERC1155Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155BurnableUpgradeable is Initializable, ERC1155Upgradeable {\\n    function __ERC1155Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    function burn(address account, uint256 id, uint256 value) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(address account, uint256[] memory ids, uint256[] memory values) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x048a492eee88c80ecc0354486e8e0ab99490b44a6fb28833b3cfb45d573f18d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155Supply.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155SupplyUpgradeable is Initializable, ERC1155Upgradeable {\\n    function __ERC1155Supply_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Supply_init_unchained() internal onlyInitializing {\\n    }\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return ERC1155SupplyUpgradeable.totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] += amounts[i];\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 id = ids[i];\\n                uint256 amount = amounts[i];\\n                uint256 supply = _totalSupply[id];\\n                require(supply >= amount, \\\"ERC1155: burn amount exceeds totalSupply\\\");\\n                unchecked {\\n                    _totalSupply[id] = supply - amount;\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf7bdbcbb9fcf42997f280db8c02070e9c561406e6971ff680c6c43f92065ac9e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155URIStorageUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../ERC1155Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev ERC1155 token with storage based token URI management.\\n * Inspired by the ERC721URIStorage extension\\n *\\n * _Available since v4.6._\\n */\\nabstract contract ERC1155URIStorageUpgradeable is Initializable, ERC1155Upgradeable {\\n    function __ERC1155URIStorage_init() internal onlyInitializing {\\n        __ERC1155URIStorage_init_unchained();\\n    }\\n\\n    function __ERC1155URIStorage_init_unchained() internal onlyInitializing {\\n        _baseURI = \\\"\\\";\\n    }\\n    using StringsUpgradeable for uint256;\\n\\n    // Optional base URI\\n    string private _baseURI;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the concatenation of the `_baseURI`\\n     * and the token-specific uri if the latter is set\\n     *\\n     * This enables the following behaviors:\\n     *\\n     * - if `_tokenURIs[tokenId]` is set, then the result is the concatenation\\n     *   of `_baseURI` and `_tokenURIs[tokenId]` (keep in mind that `_baseURI`\\n     *   is empty per default);\\n     *\\n     * - if `_tokenURIs[tokenId]` is NOT set then we fallback to `super.uri()`\\n     *   which in most cases will contain `ERC1155._uri`;\\n     *\\n     * - if `_tokenURIs[tokenId]` is NOT set, and if the parents do not have a\\n     *   uri value set, then the result is empty.\\n     */\\n    function uri(uint256 tokenId) public view virtual override returns (string memory) {\\n        string memory tokenURI = _tokenURIs[tokenId];\\n\\n        // If token URI is set, concatenate base URI and tokenURI (via abi.encodePacked).\\n        return bytes(tokenURI).length > 0 ? string(abi.encodePacked(_baseURI, tokenURI)) : super.uri(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `tokenURI` as the tokenURI of `tokenId`.\\n     */\\n    function _setURI(uint256 tokenId, string memory tokenURI) internal virtual {\\n        _tokenURIs[tokenId] = tokenURI;\\n        emit URI(uri(tokenId), tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `baseURI` as the `_baseURI` for all tokens\\n     */\\n    function _setBaseURI(string memory baseURI) internal virtual {\\n        _baseURI = baseURI;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0x9a1218747a17239e2fcab2efc14099379387f114c7ad22c69a23b7d67ec0eaa2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa350df12a8c10e821af05e0863f44e8317a0efa44df27bfd5dc1d63fdfa3c448\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/asset/contracts/Catalyst.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {ERC1155Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\\\";\\nimport {\\n    AccessControlUpgradeable,\\n    ContextUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport {\\n    ERC1155BurnableUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol\\\";\\nimport {\\n    ERC1155SupplyUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol\\\";\\nimport {\\n    ERC1155URIStorageUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155URIStorageUpgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {\\n    OperatorFiltererUpgradeable,\\n    IOperatorFilterRegistry\\n} from \\\"@sandbox-smart-contracts/dependency-operator-filter/contracts/OperatorFiltererUpgradeable.sol\\\";\\nimport {\\n    RoyaltyDistributor\\n} from \\\"@sandbox-smart-contracts/dependency-royalty-management/contracts/RoyaltyDistributor.sol\\\";\\nimport {\\n    ERC2771HandlerUpgradeable\\n} from \\\"@sandbox-smart-contracts/dependency-metatx/contracts/ERC2771HandlerUpgradeable.sol\\\";\\nimport {ICatalyst} from \\\"./interfaces/ICatalyst.sol\\\";\\n\\n/// @title Catalyst\\n/// @author The Sandbox\\n/// @notice This contract manages catalysts which are used to mint new assets.\\n/// @dev An ERC1155 contract that manages catalysts, extends multiple OpenZeppelin contracts to\\n/// provide a variety of features including, AccessControl, URIStorage, Burnable and more.\\n/// The contract includes support for meta transactions.\\ncontract Catalyst is\\n    ICatalyst,\\n    Initializable,\\n    ERC1155Upgradeable,\\n    ERC1155BurnableUpgradeable,\\n    ERC1155SupplyUpgradeable,\\n    ERC1155URIStorageUpgradeable,\\n    ERC2771HandlerUpgradeable,\\n    AccessControlUpgradeable,\\n    OperatorFiltererUpgradeable,\\n    RoyaltyDistributor\\n{\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant BURNER_ROLE = keccak256(\\\"BURNER_ROLE\\\");\\n\\n    uint256 public highestTierIndex;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    modifier onlyValidId(uint256 tokenId) {\\n        require(tokenId > 0 && tokenId <= highestTierIndex, \\\"Catalyst: invalid catalyst id\\\");\\n        _;\\n    }\\n\\n    /// @notice Initialize the contract, setting up initial values for various features.\\n    /// @param _baseUri The base URI for the token metadata, most likely set to ipfs://.\\n    /// @param _trustedForwarder The trusted forwarder for meta transactions.\\n    /// @param _subscription The subscription address.\\n    /// @param _defaultAdmin The default admin address.\\n    /// @param _defaultMinter The default minter address.\\n    /// @param _catalystIpfsCID The IPFS content identifiers for each catalyst.\\n    /// @param _royaltyManager, the address of the Manager contract for common royalty recipient\\n    function initialize(\\n        string memory _baseUri,\\n        address _trustedForwarder,\\n        address _subscription,\\n        address _defaultAdmin,\\n        address _defaultMinter,\\n        string[] memory _catalystIpfsCID,\\n        address _royaltyManager\\n    ) external initializer {\\n        require(bytes(_baseUri).length != 0, \\\"Catalyst: URI empty\\\");\\n        require(_trustedForwarder != address(0), \\\"Catalyst: 1-Zero address\\\");\\n        require(_subscription != address(0), \\\"Catalyst: 2-Zero address\\\");\\n        require(_defaultAdmin != address(0), \\\"Catalyst: 3-Zero address\\\");\\n        require(_defaultMinter != address(0), \\\"Catalyst: 4-Zero address\\\");\\n        require(_royaltyManager != address(0), \\\"Catalyst: 5-Zero address\\\");\\n        __ERC1155_init(_baseUri);\\n        __AccessControl_init();\\n        __ERC1155Burnable_init();\\n        __ERC1155Supply_init();\\n        __ERC1155URIStorage_init();\\n        __ERC2771Handler_init(_trustedForwarder);\\n        __OperatorFilterer_init(_subscription, true);\\n        _setBaseURI(_baseUri);\\n        _grantRole(DEFAULT_ADMIN_ROLE, _defaultAdmin);\\n        _grantRole(MINTER_ROLE, _defaultMinter);\\n        __RoyaltyDistributor_init(_royaltyManager);\\n        for (uint256 i = 0; i < _catalystIpfsCID.length; i++) {\\n            require(bytes(_catalystIpfsCID[i]).length != 0, \\\"Catalyst: CID cant be empty\\\");\\n            _setURI(i, _catalystIpfsCID[i]);\\n            highestTierIndex = i;\\n        }\\n    }\\n\\n    /// @notice Mints a new token, limited to MINTER_ROLE only\\n    /// @param to The address that will own the minted token\\n    /// @param id The token id to mint\\n    /// @param amount The amount to be minted\\n    function mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount\\n    ) external onlyRole(MINTER_ROLE) onlyValidId(id) {\\n        _mint(to, id, amount, \\\"\\\");\\n    }\\n\\n    /// @notice Mints a batch of tokens, limited to MINTER_ROLE only\\n    /// @param to The address that will own the minted tokens\\n    /// @param ids The token ids to mint\\n    /// @param amounts The amounts to be minted per token id\\n    function mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external onlyRole(MINTER_ROLE) {\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            require(ids[i] > 0 && ids[i] <= highestTierIndex, \\\"Catalyst: invalid catalyst id\\\");\\n        }\\n        _mintBatch(to, ids, amounts, \\\"\\\");\\n    }\\n\\n    /// @notice Burns a specified amount of tokens from a specific address\\n    /// @param account The address to burn from\\n    /// @param id The token id to burn\\n    /// @param amount The amount to be burned\\n    function burnFrom(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) external onlyRole(BURNER_ROLE) {\\n        _burn(account, id, amount);\\n    }\\n\\n    /// @notice Burns a batch of tokens from a specific address\\n    /// @param account The address to burn from\\n    /// @param ids The token ids to burn\\n    /// @param amounts The amounts to be burned\\n    function burnBatchFrom(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external onlyRole(BURNER_ROLE) {\\n        _burnBatch(account, ids, amounts);\\n    }\\n\\n    /// @notice Add a new catalyst type, limited to DEFAULT_ADMIN_ROLE only\\n    /// @param ipfsCID The IPFS content identifiers for the catalyst\\n    function addNewCatalystType(string memory ipfsCID) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(bytes(ipfsCID).length != 0, \\\"Catalyst: CID cant be empty\\\");\\n        uint256 newCatId = ++highestTierIndex;\\n        ERC1155URIStorageUpgradeable._setURI(newCatId, ipfsCID);\\n        emit NewCatalystTypeAdded(newCatId);\\n    }\\n\\n    /// @notice Set a new trusted forwarder address, limited to DEFAULT_ADMIN_ROLE only\\n    /// @dev Change the address of the trusted forwarder for meta-TX\\n    /// @param trustedForwarder The new trustedForwarder\\n    function setTrustedForwarder(address trustedForwarder) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(trustedForwarder != address(0), \\\"Catalyst: Zero address\\\");\\n        _setTrustedForwarder(trustedForwarder);\\n    }\\n\\n    /// @notice Set a new URI for specific tokenid\\n    /// @param tokenId The token id to set URI for\\n    /// @param metadataHash The new URI\\n    function setMetadataHash(uint256 tokenId, string memory metadataHash)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n        onlyValidId(tokenId)\\n    {\\n        require(bytes(metadataHash).length != 0, \\\"Catalyst: Metadata hash empty\\\");\\n        _setURI(tokenId, metadataHash);\\n    }\\n\\n    /// @notice Set a new base URI\\n    /// @param baseURI The new base URI\\n    function setBaseURI(string memory baseURI) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(bytes(baseURI).length != 0, \\\"Catalyst: URI empty\\\");\\n        _setBaseURI(baseURI);\\n        emit BaseURISet(baseURI);\\n    }\\n\\n    /// @notice returns full token URI, including baseURI and token metadata URI\\n    /// @param tokenId The token id to get URI for\\n    /// @return tokenURI the URI of the token\\n    function uri(uint256 tokenId)\\n        public\\n        view\\n        override(ERC1155Upgradeable, ERC1155URIStorageUpgradeable)\\n        returns (string memory)\\n    {\\n        return ERC1155URIStorageUpgradeable.uri(tokenId);\\n    }\\n\\n    /// @dev Needed for meta transactions (see EIP-2771)\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override(ContextUpgradeable, ERC2771HandlerUpgradeable)\\n        returns (address)\\n    {\\n        return ERC2771HandlerUpgradeable._msgSender();\\n    }\\n\\n    /// @dev Needed for meta transactions (see EIP-2771)\\n    function _msgData()\\n        internal\\n        view\\n        virtual\\n        override(ContextUpgradeable, ERC2771HandlerUpgradeable)\\n        returns (bytes calldata)\\n    {\\n        return ERC2771HandlerUpgradeable._msgData();\\n    }\\n\\n    /// @dev Sets `baseURI` as the `_baseURI` for all tokens\\n    function _setBaseURI(string memory baseURI) internal virtual override {\\n        super._setBaseURI(baseURI);\\n        emit BaseURISet(baseURI);\\n    }\\n\\n    /// @notice Transfers `value` tokens of type `id` from  `from` to `to`  (with safety call).\\n    /// @param from address from which tokens are transfered.\\n    /// @param to address to which the token will be transfered.\\n    /// @param id the token type transfered.\\n    /// @param value amount of token transfered.\\n    /// @param data additional data accompanying the transfer.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes memory data\\n    ) public override onlyAllowedOperator(from) {\\n        super._safeTransferFrom(from, to, id, value, data);\\n    }\\n\\n    /// @notice Transfers `values` tokens of type `ids` from  `from` to `to` (with safety call).\\n    /// @dev call data should be optimized to order ids so packedBalance can be used efficiently.\\n    /// @param from address from which tokens are transfered.\\n    /// @param to address to which the token will be transfered.\\n    /// @param ids ids of each token type transfered.\\n    /// @param values amount of each token type transfered.\\n    /// @param data additional data accompanying the transfer.\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) public override onlyAllowedOperator(from) {\\n        super._safeBatchTransferFrom(from, to, ids, values, data);\\n    }\\n\\n    /// @notice Enable or disable approval for `operator` to manage all of the caller's tokens.\\n    /// @param operator address which will be granted rights to transfer all tokens of the caller.\\n    /// @param approved whether to approve or revoke\\n    function setApprovalForAll(address operator, bool approved) public override onlyAllowedOperatorApproval(operator) {\\n        super._setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal override(ERC1155Upgradeable, ERC1155SupplyUpgradeable) {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /// @notice Query if a contract implements interface `id`.\\n    /// @param interfaceId the interface identifier, as specified in ERC-165.\\n    /// @return `true` if the contract implements `interfaceId`.\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC1155Upgradeable, AccessControlUpgradeable, RoyaltyDistributor)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @notice This function is used to register Catalyst contract on the Operator Filterer Registry of OpenSea. Can only be called by admin.\\n    /// @dev used to register contract and subscribe to the subscriptionOrRegistrantToCopy's black list.\\n    /// @param subscriptionOrRegistrantToCopy registration address of the list to subscribe.\\n    /// @param subscribe bool to signify subscription \\\"true\\\"\\\" or to copy the list \\\"false\\\".\\n    function registerAndSubscribe(address subscriptionOrRegistrantToCopy, bool subscribe)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(subscriptionOrRegistrantToCopy != address(0), \\\"Catalyst: Zero address\\\");\\n        _registerAndSubscribe(subscriptionOrRegistrantToCopy, subscribe);\\n    }\\n\\n    /// @notice sets filter registry address\\n    /// @param registry the address of the registry\\n    function setOperatorRegistry(address registry) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(registry != address(0), \\\"Catalyst: Zero address\\\");\\n        OperatorFiltererUpgradeable._setOperatorFilterRegistry(registry);\\n        emit OperatorRegistrySet(registry);\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x05885ab02e4879b85ec98c45dceeb98f11987566e13cef18fdab1c72abc3ad31\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/asset/contracts/interfaces/ICatalyst.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\ninterface ICatalyst {\\n    enum CatalystType {TSB_EXCLUSIVE, COMMON, UNCOMMON, RARE, EPIC, LEGENDARY, MYTHIC}\\n\\n    event TrustedForwarderChanged(address indexed newTrustedForwarderAddress);\\n    event NewCatalystTypeAdded(uint256 catalystId);\\n    event DefaultRoyaltyChanged(address indexed newDefaultRoyaltyRecipient, uint256 newDefaultRoyaltyAmount);\\n    event BaseURISet(string baseURI);\\n    event OperatorRegistrySet(address indexed registry);\\n\\n    /// @notice Mints a new token, limited to MINTER_ROLE only\\n    /// @param to The address that will own the minted token\\n    /// @param id The token id to mint\\n    /// @param amount The amount to be minted\\n    function mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount\\n    ) external;\\n\\n    /// @notice Mints a batch of tokens, limited to MINTER_ROLE only\\n    /// @param to The address that will own the minted tokens\\n    /// @param ids The token ids to mint\\n    /// @param amounts The amounts to be minted per token id\\n    function mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    /// @notice Burns a specified amount of tokens from a specific address\\n    /// @param account The address to burn from\\n    /// @param id The token id to burn\\n    /// @param amount The amount to be burned\\n    function burnFrom(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) external;\\n\\n    /// @notice Burns a batch of tokens from a specific address\\n    /// @param account The address to burn from\\n    /// @param ids The token ids to burn\\n    /// @param amounts The amounts to be burned\\n    function burnBatchFrom(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    /// @notice Add a new catalyst type, limited to DEFAULT_ADMIN_ROLE only\\n    /// @param ipfsCID The royalty bps for the catalyst\\n    function addNewCatalystType(string memory ipfsCID) external;\\n\\n    /// @notice Set a new URI for specific tokenid\\n    /// @param tokenId The token id to set URI for\\n    /// @param metadataHash The new URI\\n    function setMetadataHash(uint256 tokenId, string memory metadataHash) external;\\n\\n    /// @notice Set a new base URI\\n    /// @param baseURI The new base URI\\n    function setBaseURI(string memory baseURI) external;\\n}\\n\",\"keccak256\":\"0x4dec39e4b662c4b51f0f828f1b8ea01c873c8a0a18a7c17bc5497f557ceff101\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/dependency-metatx/contracts/ERC2771HandlerAbstract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @dev minimal ERC2771 handler to keep bytecode-size down\\n/// based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/metatx/ERC2771Context.sol\\nabstract contract ERC2771HandlerAbstract {\\n    /// @notice return true if the forwarder is the trusted forwarder\\n    /// @param forwarder trusted forwarder address to check\\n    /// @return true if the address is the same as the trusted forwarder\\n    function isTrustedForwarder(address forwarder) external view returns (bool) {\\n        return _isTrustedForwarder(forwarder);\\n    }\\n\\n    /// @notice if the call is from the trusted forwarder the sender is extracted from calldata, msg.sender otherwise\\n    /// @return sender the calculated address of the sender\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (_isTrustedForwarder(msg.sender) && msg.data.length >= 20) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            sender = msg.sender;\\n        }\\n    }\\n\\n    /// @notice if the call is from the trusted forwarder the sender is removed from calldata\\n    /// @return the calldata without the sender\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (_isTrustedForwarder(msg.sender) && msg.data.length >= 20) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n\\n    /// @notice return true if the forwarder is the trusted forwarder\\n    /// @param forwarder trusted forwarder address to check\\n    /// @return true if the address is the same as the trusted forwarder\\n    /// @dev this function must be IMPLEMENTED\\n    function _isTrustedForwarder(address forwarder) internal view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0xc4f349865ea7146f51b69f1edacdef60e0a2a7cf4dab538a5ae53ee9a0036231\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/dependency-metatx/contracts/ERC2771HandlerUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {ERC2771HandlerAbstract} from \\\"./ERC2771HandlerAbstract.sol\\\";\\n\\n/// @dev minimal ERC2771 handler to keep bytecode-size down\\n/// based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/metatx/ERC2771Context.sol\\ncontract ERC2771HandlerUpgradeable is Initializable, ERC2771HandlerAbstract {\\n    address private _trustedForwarder;\\n\\n    /// @notice Emitted when a `newTrustedForwarder` is set, replacing the `oldTrustedForwarder`\\n    /// @param oldTrustedForwarder old trusted forwarder\\n    /// @param newTrustedForwarder new trusted forwarder\\n    /// @param operator the sender of the transaction\\n    event TrustedForwarderSet(\\n        address indexed oldTrustedForwarder,\\n        address indexed newTrustedForwarder,\\n        address indexed operator\\n    );\\n\\n    /// @notice initialize the trusted forwarder address\\n    /// @param forwarder trusted forwarder address or zero to disable it\\n    function __ERC2771Handler_init(address forwarder) internal onlyInitializing {\\n        __ERC2771Handler_init_unchained(forwarder);\\n    }\\n\\n    /// @notice initialize the trusted forwarder address\\n    /// @param forwarder trusted forwarder address or zero to disable it\\n    function __ERC2771Handler_init_unchained(address forwarder) internal onlyInitializing {\\n        _setTrustedForwarder(forwarder);\\n    }\\n\\n    /// @notice return the address of the trusted forwarder\\n    /// @return return the address of the trusted forwarder\\n    function getTrustedForwarder() external view returns (address) {\\n        return _trustedForwarder;\\n    }\\n\\n    /// @notice set the address of the trusted forwarder\\n    /// @param newForwarder the address of the new forwarder.\\n    function _setTrustedForwarder(address newForwarder) internal virtual {\\n        require(newForwarder != _trustedForwarder, \\\"ERC2771HandlerUpgradeable: forwarder already set\\\");\\n        emit TrustedForwarderSet(_trustedForwarder, newForwarder, _msgSender());\\n        _trustedForwarder = newForwarder;\\n    }\\n\\n    /// @notice return true if the forwarder is the trusted forwarder\\n    /// @param forwarder trusted forwarder address to check\\n    /// @return true if the address is the same as the trusted forwarder\\n    function _isTrustedForwarder(address forwarder) internal view virtual override returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    /// @notice if the call is from the trusted forwarder the sender is extracted from calldata, msg.sender otherwise\\n    /// @return sender the calculated address of the sender\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        return super._msgSender();\\n    }\\n\\n    /// @notice if the call is from the trusted forwarder the sender is removed from calldata\\n    /// @return the calldata without the sender\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        return super._msgData();\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf9767f843906800128ee86bd89bc2088e8f1b633ed4c800f477beb4e604f81de\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/dependency-operator-filter/contracts/OperatorFiltererUpgradeable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {IOperatorFilterRegistry} from \\\"./interfaces/IOperatorFilterRegistry.sol\\\";\\nimport {ContextUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\n///@title OperatorFiltererUpgradeable\\n///@author The Sandbox\\n///@notice This contract would subscribe or copy or just to the subscription provided or just register to default subscription list. The operator filter registry's address could be set using a setter which could be implemented in inheriting contract\\nabstract contract OperatorFiltererUpgradeable is Initializable, ContextUpgradeable {\\n    event OperatorFilterRegistrySet(address indexed registry);\\n\\n    IOperatorFilterRegistry private operatorFilterRegistry;\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __OperatorFilterer_init(address subscriptionOrRegistrantToCopy, bool subscribe) internal onlyInitializing {\\n        operatorFilterRegistry = IOperatorFilterRegistry(0x000000000000AAeB6D7670E522A718067333cd4E); // Address of the operator filterer registry\\n        // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\\n        // will not revert, but the contract will need to be registered with the registry once it is deployed in\\n        // order for the modifier to filter addresses.\\n        _registerAndSubscribe(subscriptionOrRegistrantToCopy, subscribe);\\n    }\\n\\n    function _registerAndSubscribe(address subscriptionOrRegistrantToCopy, bool subscribe) internal {\\n        if (address(operatorFilterRegistry).code.length > 0) {\\n            if (!operatorFilterRegistry.isRegistered(address(this))) {\\n                if (subscribe) {\\n                    operatorFilterRegistry.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\\n                } else {\\n                    if (subscriptionOrRegistrantToCopy != address(0)) {\\n                        operatorFilterRegistry.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\\n                    } else {\\n                        operatorFilterRegistry.register(address(this));\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    modifier onlyAllowedOperator(address from) virtual {\\n        // Check registry code length to facilitate testing in environments without a deployed registry.\\n        if (address(operatorFilterRegistry).code.length > 0) {\\n            // Allow spending tokens from addresses with balance\\n            // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\\n            // from an EOA.\\n            if (from == _msgSender()) {\\n                _;\\n                return;\\n            }\\n            if (!operatorFilterRegistry.isOperatorAllowed(address(this), _msgSender())) {\\n                revert(\\\"Operator Not Allowed\\\");\\n            }\\n        }\\n        _;\\n    }\\n\\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\\n        // Check registry code length to facilitate testing in environments without a deployed registry.\\n        if (address(operatorFilterRegistry).code.length > 0) {\\n            if (!operatorFilterRegistry.isOperatorAllowed(address(this), operator)) {\\n                revert(\\\"Operator Not Allowed\\\");\\n            }\\n        }\\n        _;\\n    }\\n\\n    /// @notice returns the operator filter registry.\\n    /// @return operatorFilterRegistryAddress address of operator filter registry contract.\\n    function getOperatorFilterRegistry() external view returns (IOperatorFilterRegistry operatorFilterRegistryAddress) {\\n        return _getOperatorFilterRegistry();\\n    }\\n\\n    /// @notice internal method to set the operator filter registry\\n    /// @param registry address the registry.\\n    function _setOperatorFilterRegistry(address registry) internal {\\n        operatorFilterRegistry = IOperatorFilterRegistry(registry);\\n        emit OperatorFilterRegistrySet(registry);\\n    }\\n\\n    /// @notice internal method to get the operator filter registry.\\n    function _getOperatorFilterRegistry()\\n        internal\\n        view\\n        returns (IOperatorFilterRegistry operatorFilterRegistryAddress)\\n    {\\n        return operatorFilterRegistry;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xbd7e2d8ee93a31af7057933a0ea415f7c1ab90dbfbb8e41085ef23ed98ead3af\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/dependency-operator-filter/contracts/interfaces/IOperatorFilterRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title IOperatorFilterRegistry\\n/// @notice Interface for managing operators and filtering.\\ninterface IOperatorFilterRegistry {\\n    ///@notice Returns true if operator is not filtered for a given token, either by address or codeHash. Also returns\\n    ///        true if supplied registrant address is not registered.\\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool isAllowed);\\n\\n    ///@notice Registers an address with the registry. May be called by address itself or by EIP-173 owner.\\n    function register(address registrant) external;\\n\\n    ///@notice Registers an address with the registry and \\\"subscribes\\\" to another address's filtered operators and codeHashes.\\n    function registerAndSubscribe(address registrant, address subscription) external;\\n\\n    ///@notice Registers an address with the registry and copies the filtered operators and codeHashes from another\\n    ///        address without subscribing.\\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\\n\\n    ///@notice Unregisters an address with the registry and removes its subscription. May be called by address itself or by EIP-173 owner.\\n    ///        Note that this does not remove any filtered addresses or codeHashes.\\n    ///        Also note that any subscriptions to this registrant will still be active and follow the existing filtered addresses and codehashes.\\n    function unregister(address addr) external;\\n\\n    ///@notice Update an operator address for a registered address - when filtered is true, the operator is filtered.\\n    function updateOperator(\\n        address registrant,\\n        address operator,\\n        bool filtered\\n    ) external;\\n\\n    ///@notice Update multiple operators for a registered address - when filtered is true, the operators will be filtered. Reverts on duplicates.\\n    function updateOperators(\\n        address registrant,\\n        address[] calldata operators,\\n        bool filtered\\n    ) external;\\n\\n    ///@notice Update a codeHash for a registered address - when filtered is true, the codeHash is filtered.\\n    function updateCodeHash(\\n        address registrant,\\n        bytes32 codehash,\\n        bool filtered\\n    ) external;\\n\\n    ///@notice Update multiple codeHashes for a registered address - when filtered is true, the codeHashes will be filtered. Reverts on duplicates.\\n    function updateCodeHashes(\\n        address registrant,\\n        bytes32[] calldata codeHashes,\\n        bool filtered\\n    ) external;\\n\\n    ///@notice Subscribe an address to another registrant's filtered operators and codeHashes. Will remove previous\\n    ///        subscription if present.\\n    ///        Note that accounts with subscriptions may go on to subscribe to other accounts - in this case,\\n    ///        subscriptions will not be forwarded. Instead the former subscription's existing entries will still be\\n    ///        used.\\n    function subscribe(address registrant, address registrantToSubscribe) external;\\n\\n    ///@notice Unsubscribe an address from its current subscribed registrant, and optionally copy its filtered operators and codeHashes.\\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\\n\\n    ///@notice Get the subscription address of a given registrant, if any.\\n    function subscriptionOf(address addr) external returns (address registrant);\\n\\n    ///@notice Get the set of addresses subscribed to a given registrant.\\n    ///        Note that order is not guaranteed as updates are made.\\n    function subscribers(address registrant) external returns (address[] memory subscribersList);\\n\\n    ///@notice Get the subscriber at a given index in the set of addresses subscribed to a given registrant.\\n    ///        Note that order is not guaranteed as updates are made.\\n    function subscriberAt(address registrant, uint256 index) external returns (address subscriberAddress);\\n\\n    ///@notice Copy filtered operators and codeHashes from a different registrantToCopy to addr.\\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\\n\\n    ///@notice Returns true if operator is filtered by a given address or its subscription.\\n    function isOperatorFiltered(address registrant, address operator) external returns (bool isFiltered);\\n\\n    ///@notice Returns true if the hash of an address's code is filtered by a given address or its subscription.\\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool isFiltered);\\n\\n    ///@notice Returns true if a codeHash is filtered by a given address or its subscription.\\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool isFiltered);\\n\\n    ///@notice Returns a list of filtered operators for a given address or its subscription.\\n    function filteredOperators(address addr) external returns (address[] memory operatorList);\\n\\n    ///@notice Returns the set of filtered codeHashes for a given address or its subscription.\\n    ///        Note that order is not guaranteed as updates are made.\\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory codeHashList);\\n\\n    ///@notice Returns the filtered operator at the given index of the set of filtered operators for a given address or\\n    ///        its subscription.\\n    ///        Note that order is not guaranteed as updates are made.\\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address operator);\\n\\n    ///@notice Returns the filtered codeHash at the given index of the list of filtered codeHashes for a given address or\\n    ///        its subscription.\\n    ///        Note that order is not guaranteed as updates are made.\\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32 codeHash);\\n\\n    ///@notice Returns true if an address has registered\\n    function isRegistered(address addr) external returns (bool registered);\\n\\n    ///@dev Convenience method to compute the code hash of an arbitrary contract\\n    function codeHashOf(address addr) external returns (bytes32 codeHash);\\n}\\n\",\"keccak256\":\"0x3954f1465330c8645891a1d566723f9804515632be2025edd02b00a0e53d2f30\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/dependency-royalty-management/contracts/RoyaltyDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC2981Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\\\";\\nimport {IRoyaltyManager} from \\\"./interfaces/IRoyaltyManager.sol\\\";\\nimport {\\n    ERC165Upgradeable,\\n    IERC165Upgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\n\\n/// @title RoyaltyDistributor\\n/// @author The Sandbox\\n/// @notice Contract for distributing royalties based on the ERC2981 standard.\\nabstract contract RoyaltyDistributor is IERC2981Upgradeable, ERC165Upgradeable {\\n    event RoyaltyManagerSet(address indexed _royaltyManager);\\n    uint16 internal constant TOTAL_BASIS_POINTS = 10000;\\n    IRoyaltyManager private royaltyManager;\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __RoyaltyDistributor_init(address _royaltyManager) internal onlyInitializing {\\n        _setRoyaltyManager(_royaltyManager);\\n        __ERC165_init_unchained();\\n    }\\n\\n    /// @notice Returns how much royalty is owed and to whom based on ERC2981\\n    /// @dev tokenId is one of the EIP2981 args for this function can't be removed\\n    /// @param _salePrice the price of token on which the royalty is calculated\\n    /// @return receiver the receiver of royalty\\n    /// @return royaltyAmount the amount of royalty\\n    function royaltyInfo(\\n        uint256, /*_tokenId */\\n        uint256 _salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount) {\\n        uint16 royaltyBps;\\n        (receiver, royaltyBps) = royaltyManager.getRoyaltyInfo();\\n        royaltyAmount = (_salePrice * royaltyBps) / TOTAL_BASIS_POINTS;\\n        return (receiver, royaltyAmount);\\n    }\\n\\n    /// @notice Query if a contract implements interface `id`.\\n    /// @param interfaceId the interface identifier, as specified in ERC-165.\\n    /// @return isSupported `true` if the contract implements `id`.\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Upgradeable, IERC165Upgradeable)\\n        returns (bool isSupported)\\n    {\\n        return (interfaceId == type(IERC2981Upgradeable).interfaceId || super.supportsInterface(interfaceId));\\n    }\\n\\n    /// @notice returns the royalty manager\\n    /// @return royaltyManagerAddress address of royalty manager contract.\\n    function getRoyaltyManager() external view returns (IRoyaltyManager royaltyManagerAddress) {\\n        return royaltyManager;\\n    }\\n\\n    /// @notice set royalty manager\\n    /// @param _royaltyManager address of royalty manager to set\\n    function _setRoyaltyManager(address _royaltyManager) internal {\\n        royaltyManager = IRoyaltyManager(_royaltyManager);\\n        emit RoyaltyManagerSet(_royaltyManager);\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x234d5b2df36f3a7dce1d07e07096e4772223811aa32f6f21d9024276252aacfa\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/dependency-royalty-management/contracts/interfaces/IRoyaltyManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Recipient} from \\\"@manifoldxyz/royalty-registry-solidity/contracts/overrides/IRoyaltySplitter.sol\\\";\\n\\n/// @title IRoyaltyManager\\n/// @notice interface for RoyaltyManager Contract\\ninterface IRoyaltyManager {\\n    event RecipientSet(address indexed commonRecipient);\\n\\n    event SplitSet(uint16 commonSplit);\\n\\n    event RoyaltySet(uint16 royaltyBps, address indexed contractAddress);\\n\\n    event TrustedForwarderSet(address indexed previousForwarder, address indexed newForwarder);\\n\\n    event SplitterDeployed(address indexed creator, address indexed recipient, address splitterAddress);\\n\\n    ///@notice sets the common recipient\\n    ///@param _commonRecipient is the common recipient for all the splitters\\n    function setRecipient(address payable _commonRecipient) external;\\n\\n    ///@notice sets the common split\\n    ///@param commonSplit split for the common recipient\\n    function setSplit(uint16 commonSplit) external;\\n\\n    ///@notice to be called by the splitters to get the common recipient and split\\n    ///@return recipient which has the common recipient and split\\n    function getCommonRecipient() external view returns (Recipient memory recipient);\\n\\n    ///@notice returns the amount of basis points allocated to the creator\\n    ///@return creatorSplit the share of creator in bps\\n    function getCreatorSplit() external view returns (uint16 creatorSplit);\\n\\n    ///@notice returns the commonRecipient and EIP2981 royalty split\\n    ///@return recipient address of common royalty recipient\\n    ///@return royaltySplit contract EIP2981 royalty bps\\n    function getRoyaltyInfo() external view returns (address payable recipient, uint16 royaltySplit);\\n\\n    ///@notice deploys splitter for creator\\n    ///@param creator the address of the creator\\n    ///@param recipient the wallet of the recipient where they would receive their royalty\\n    ///@return creatorSplitterAddress splitter's address deployed for creator\\n    function deploySplitter(address creator, address payable recipient)\\n        external\\n        returns (address payable creatorSplitterAddress);\\n\\n    ///@notice returns the address of splitter of a creator.\\n    ///@param creator the address of the creator\\n    ///@return creatorSplitterAddress splitter's address deployed for a creator\\n    function getCreatorRoyaltySplitter(address creator) external view returns (address payable creatorSplitterAddress);\\n\\n    ///@notice returns the EIP2981 royalty split\\n    ///@param _contractAddress the address of the contract for which the royalty is required\\n    ///@return royaltyBps royalty bps of the contract\\n    function getContractRoyalty(address _contractAddress) external view returns (uint16 royaltyBps);\\n\\n    ///@notice sets the trustedForwarder address to be used by the splitters\\n    ///@param _newForwarder is the new trusted forwarder address\\n    function setTrustedForwarder(address _newForwarder) external;\\n\\n    ///@notice get the current trustedForwarder address\\n    ///@return trustedForwarder address of current trusted Forwarder\\n    function getTrustedForwarder() external view returns (address trustedForwarder);\\n}\\n\",\"keccak256\":\"0x5e8e149845df288a5d0ddfa00407ebda15d024e8caf1057822670a5232fee93f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e3565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811614620000e1576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b61474680620000f36000396000f3fe608060405234801561001057600080fd5b50600436106102765760003560e01c8063572b6c0511610160578063bd85b039116100d8578063da7422281161008c578063f242432a11610071578063f242432a146105fb578063f3bdecc11461060e578063f5298aca1461062157600080fd5b8063da742228146105ac578063e985e9c5146105bf57600080fd5b8063d5391393116100bd578063d53913931461055f578063d547741f14610586578063d81d0a151461059957600080fd5b8063bd85b0391461052d578063ce1b815f1461054d57600080fd5b806391d148541161012f5780639d28fb86116101145780639d28fb86146104ff578063a217fddf14610512578063a22cb4651461051a57600080fd5b806391d14854146104b35780639a1b2fb4146104ed57600080fd5b8063572b6c05146104705780636b20c4541461048357806371e0276c14610496578063791459ea146104a057600080fd5b80632a55205a116101f35780634e1273f4116101c257806350c821b0116101a757806350c821b01461042a578063512c97e91461044a57806355f804b31461045d57600080fd5b80634e1273f4146103e85780634f558e791461040857600080fd5b80632a55205a1461037d5780632eb2c2d6146103af5780632f2ff15d146103c257806336568abe146103d557600080fd5b8063156e29f61161024a57806320820ec31161022f57806320820ec31461031f578063248a9ca314610332578063282c51f31461035657600080fd5b8063156e29f6146102f95780631a87b2771461030c57600080fd5b8062fdd58e1461027b57806301ffc9a7146102a15780630e89341c146102c4578063124d91e5146102e4575b600080fd5b61028e610289366004613a94565b610634565b6040519081526020015b60405180910390f35b6102b46102af366004613ad6565b6106e2565b6040519015158152602001610298565b6102d76102d2366004613af3565b6106ed565b6040516102989190613b5c565b6102f76102f2366004613b6f565b6106f8565b005b6102f7610307366004613b6f565b610733565b6102f761031a366004613c5b565b6107df565b6102f761032d366004613d2d565b610896565b61028e610340366004613af3565b600090815261015f602052604090206001015490565b61028e7f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a84881565b61039061038b366004613da3565b6108cb565b604080516001600160a01b039093168352602083019190915201610298565b6102f76103bd366004613dc5565b610971565b6102f76103d0366004613e73565b610aa3565b6102f76103e3366004613e73565b610ace565b6103fb6103f6366004613ea3565b610b6a565b6040516102989190613fa1565b6102b4610416366004613af3565b600090815260c96020526040902054151590565b610432610ca8565b6040516001600160a01b039091168152602001610298565b6102f7610458366004613fb4565b610cc2565b6102f761046b366004613c5b565b610d88565b6102b461047e366004613ff1565b610e28565b6102f7610491366004613d2d565b610e43565b61028e6101f55481565b6102f76104ae36600461401c565b610eee565b6102b46104c1366004613e73565b600091825261015f602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6101c3546001600160a01b0316610432565b6102f761050d366004613ff1565b610f59565b61028e600081565b6102f761052836600461401c565b610ffb565b61028e61053b366004613af3565b600090815260c9602052604090205490565b61012d546001600160a01b0316610432565b61028e7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b6102f7610594366004613e73565b6110fc565b6102f76105a7366004613d2d565b611122565b6102f76105ba366004613ff1565b611217565b6102b46105cd36600461404a565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205460ff1690565b6102f7610609366004614078565b611281565b6102f761061c3660046140e1565b6113a6565b6102f761062f366004613b6f565b6117fa565b60006001600160a01b0383166106b75760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201527f616c6964206f776e65720000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5060008181526065602090815260408083206001600160a01b03861684529091529020545b92915050565b60006106dc826118a5565b60606106dc826118e3565b7f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a848610722816119c3565b61072d8484846119d7565b50505050565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a661075d816119c3565b8260008111801561077157506101f5548111155b6107bd5760405162461bcd60e51b815260206004820152601d60248201527f436174616c7973743a20696e76616c696420636174616c79737420696400000060448201526064016106ae565b6107d885858560405180602001604052806000815250611bae565b5050505050565b60006107ea816119c3565b815160000361083b5760405162461bcd60e51b815260206004820152601b60248201527f436174616c7973743a204349442063616e7420626520656d707479000000000060448201526064016106ae565b60006101f56000815461084d90614233565b9182905550905061085e8184611cf1565b6040518181527f0fc221b41b73e1c4f9d65566cf090e650d0246fb5c0434a32e9b313a39636d169060200160405180910390a1505050565b7f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a8486108c0816119c3565b61072d848484611d4e565b60008060006101c360009054906101000a90046001600160a01b03166001600160a01b031663a86a28d16040518163ffffffff1660e01b81526004016040805180830381865afa158015610923573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610947919061424d565b909350905061271061095d61ffff831686614283565b610967919061429a565b9150509250929050565b6101915485906001600160a01b03163b15610a8e5761098e611fe0565b6001600160a01b0316816001600160a01b0316036109b8576109b38686868686611fea565b610a9b565b610191546001600160a01b031663c6171134306109d3611fe0565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381865afa158015610a1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4291906142bc565b610a8e5760405162461bcd60e51b815260206004820152601460248201527f4f70657261746f72204e6f7420416c6c6f77656400000000000000000000000060448201526064016106ae565b610a9b8686868686611fea565b505050505050565b600082815261015f6020526040902060010154610abf816119c3565b610ac98383612287565b505050565b610ad6611fe0565b6001600160a01b0316816001600160a01b031614610b5c5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016106ae565b610b66828261232c565b5050565b60608151835114610be35760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d61746368000000000000000000000000000000000000000000000060648201526084016106ae565b6000835167ffffffffffffffff811115610bff57610bff613ba4565b604051908082528060200260200182016040528015610c28578160200160208202803683370190505b50905060005b8451811015610ca057610c73858281518110610c4c57610c4c6142d9565b6020026020010151858381518110610c6657610c666142d9565b6020026020010151610634565b828281518110610c8557610c856142d9565b6020908102919091010152610c9981614233565b9050610c2e565b509392505050565b6000610cbd610191546001600160a01b031690565b905090565b6000610ccd816119c3565b82600081118015610ce157506101f5548111155b610d2d5760405162461bcd60e51b815260206004820152601d60248201527f436174616c7973743a20696e76616c696420636174616c79737420696400000060448201526064016106ae565b8251600003610d7e5760405162461bcd60e51b815260206004820152601d60248201527f436174616c7973743a204d65746164617461206861736820656d70747900000060448201526064016106ae565b61072d8484611cf1565b6000610d93816119c3565b8151600003610de45760405162461bcd60e51b815260206004820152601360248201527f436174616c7973743a2055524920656d7074790000000000000000000000000060448201526064016106ae565b610ded826123cf565b7ff9c7803e94e0d3c02900d8a90893a6d5e90dd04d32a4cfe825520f82bf9f32f682604051610e1c9190613b5c565b60405180910390a15050565b60006106dc8261012d546001600160a01b0391821691161490565b610e4b611fe0565b6001600160a01b0316836001600160a01b03161480610e715750610e71836105cd611fe0565b610ee35760405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206f7220617070726f76656400000000000000000000000000000000000060648201526084016106ae565b610ac9838383611d4e565b6000610ef9816119c3565b6001600160a01b038316610f4f5760405162461bcd60e51b815260206004820152601660248201527f436174616c7973743a205a65726f20616464726573730000000000000000000060448201526064016106ae565b610ac98383612412565b6000610f64816119c3565b6001600160a01b038216610fba5760405162461bcd60e51b815260206004820152601660248201527f436174616c7973743a205a65726f20616464726573730000000000000000000060448201526064016106ae565b610fc3826125de565b6040516001600160a01b038316907fc6df119c56c99171b170652a3c4750ba46dcaacbdb3b7ab4847a9fa339659bd490600090a25050565b6101915482906001600160a01b03163b156110ea57610191546040517fc61711340000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0383811660248301529091169063c617113490604401602060405180830381865afa15801561107a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109e91906142bc565b6110ea5760405162461bcd60e51b815260206004820152601460248201527f4f70657261746f72204e6f7420416c6c6f77656400000000000000000000000060448201526064016106ae565b610ac96110f5611fe0565b8484612636565b600082815261015f6020526040902060010154611118816119c3565b610ac9838361232c565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a661114c816119c3565b60005b83518110156111fb57600084828151811061116c5761116c6142d9565b602002602001015111801561119d57506101f554848281518110611192576111926142d9565b602002602001015111155b6111e95760405162461bcd60e51b815260206004820152601d60248201527f436174616c7973743a20696e76616c696420636174616c79737420696400000060448201526064016106ae565b806111f381614233565b91505061114f565b5061072d8484846040518060200160405280600081525061272a565b6000611222816119c3565b6001600160a01b0382166112785760405162461bcd60e51b815260206004820152601660248201527f436174616c7973743a205a65726f20616464726573730000000000000000000060448201526064016106ae565b610b6682612927565b6101915485906001600160a01b03163b156113995761129e611fe0565b6001600160a01b0316816001600160a01b0316036112c3576109b38686868686612a23565b610191546001600160a01b031663c6171134306112de611fe0565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381865afa158015611329573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134d91906142bc565b6113995760405162461bcd60e51b815260206004820152601460248201527f4f70657261746f72204e6f7420416c6c6f77656400000000000000000000000060448201526064016106ae565b610a9b8686868686612a23565b600054610100900460ff16158080156113c65750600054600160ff909116105b806113e05750303b1580156113e0575060005460ff166001145b6114525760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016106ae565b6000805460ff191660011790558015611475576000805461ff0019166101001790555b87516000036114c65760405162461bcd60e51b815260206004820152601360248201527f436174616c7973743a2055524920656d7074790000000000000000000000000060448201526064016106ae565b6001600160a01b03871661151c5760405162461bcd60e51b815260206004820152601860248201527f436174616c7973743a20312d5a65726f2061646472657373000000000000000060448201526064016106ae565b6001600160a01b0386166115725760405162461bcd60e51b815260206004820152601860248201527f436174616c7973743a20322d5a65726f2061646472657373000000000000000060448201526064016106ae565b6001600160a01b0385166115c85760405162461bcd60e51b815260206004820152601860248201527f436174616c7973743a20332d5a65726f2061646472657373000000000000000060448201526064016106ae565b6001600160a01b03841661161e5760405162461bcd60e51b815260206004820152601860248201527f436174616c7973743a20342d5a65726f2061646472657373000000000000000060448201526064016106ae565b6001600160a01b0382166116745760405162461bcd60e51b815260206004820152601860248201527f436174616c7973743a20352d5a65726f2061646472657373000000000000000060448201526064016106ae565b61167d88612c16565b611685612c8a565b61168d612c8a565b611695612c8a565b61169d612cf7565b6116a687612d6a565b6116b1866001612dde565b6116ba886123cf565b6116c5600086612287565b6116ef7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a685612287565b6116f882612e81565b60005b83518110156117a957838181518110611716576117166142d9565b60200260200101515160000361176e5760405162461bcd60e51b815260206004820152601b60248201527f436174616c7973743a204349442063616e7420626520656d707479000000000060448201526064016106ae565b61179181858381518110611784576117846142d9565b6020026020010151611cf1565b6101f5819055806117a181614233565b9150506116fb565b5080156117f0576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b611802611fe0565b6001600160a01b0316836001600160a01b031614806118285750611828836105cd611fe0565b61189a5760405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206f7220617070726f76656400000000000000000000000000000000000060648201526084016106ae565b610ac98383836119d7565b60006001600160e01b031982167f2a55205a0000000000000000000000000000000000000000000000000000000014806106dc57506106dc82612efd565b600081815260fc6020526040812080546060929190611901906142ef565b80601f016020809104026020016040519081016040528092919081815260200182805461192d906142ef565b801561197a5780601f1061194f5761010080835404028352916020019161197a565b820191906000526020600020905b81548152906001019060200180831161195d57829003601f168201915b5050505050905060008151116119985761199383612f3b565b6119bc565b60fb816040516020016119ac929190614329565b6040516020818303038152906040525b9392505050565b6119d4816119cf611fe0565b612fcf565b50565b6001600160a01b038316611a535760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016106ae565b6000611a5d611fe0565b90506000611a6a84613045565b90506000611a7784613045565b9050611a9783876000858560405180602001604052806000815250613090565b60008581526065602090815260408083206001600160a01b038a16845290915290205484811015611b2f5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c60448201527f616e63650000000000000000000000000000000000000000000000000000000060648201526084016106ae565b60008681526065602090815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46040805160208101909152600090525b50505050505050565b6001600160a01b038416611c2a5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016106ae565b6000611c34611fe0565b90506000611c4185613045565b90506000611c4e85613045565b9050611c5f83600089858589613090565b60008681526065602090815260408083206001600160a01b038b16845290915281208054879290611c919084906143b0565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611ba58360008989898961309e565b600082815260fc60205260409020611d098282614409565b50817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b611d35846106ed565b604051611d429190613b5c565b60405180910390a25050565b6001600160a01b038316611dca5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016106ae565b8051825114611e2c5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016106ae565b6000611e36611fe0565b9050611e5681856000868660405180602001604052806000815250613090565b60005b8351811015611f73576000848281518110611e7657611e766142d9565b602002602001015190506000848381518110611e9457611e946142d9565b60209081029190910181015160008481526065835260408082206001600160a01b038c168352909352919091205490915081811015611f3a5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c60448201527f616e63650000000000000000000000000000000000000000000000000000000060648201526084016106ae565b60009283526065602090815260408085206001600160a01b038b1686529091529092209103905580611f6b81614233565b915050611e59565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611fc49291906144c9565b60405180910390a460408051602081019091526000905261072d565b6000610cbd61328a565b815183511461204c5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016106ae565b6001600160a01b0384166120c85760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016106ae565b60006120d2611fe0565b90506120e2818787878787613090565b60005b8451811015612221576000858281518110612102576121026142d9565b602002602001015190506000858381518110612120576121206142d9565b60209081029190910181015160008481526065835260408082206001600160a01b038e1683529093529190912054909150818110156121c75760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201527f72207472616e736665720000000000000000000000000000000000000000000060648201526084016106ae565b60008381526065602090815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906122069084906143b0565b925050819055505050508061221a90614233565b90506120e5565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516122719291906144c9565b60405180910390a4610a9b818787878787613294565b600082815261015f602090815260408083206001600160a01b038516845290915290205460ff16610b6657600082815261015f602090815260408083206001600160a01b03851684529091529020805460ff191660011790556122e8611fe0565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600082815261015f602090815260408083206001600160a01b038516845290915290205460ff1615610b6657600082815261015f602090815260408083206001600160a01b03851684529091529020805460ff1916905561238b611fe0565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6123d8816133d7565b7ff9c7803e94e0d3c02900d8a90893a6d5e90dd04d32a4cfe825520f82bf9f32f6816040516124079190613b5c565b60405180910390a150565b610191546001600160a01b03163b15610b6657610191546040517fc3c5a5470000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b039091169063c3c5a547906024016020604051808303816000875af1158015612489573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ad91906142bc565b610b6657801561253357610191546040517f7d3e3dbe0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03848116602483015290911690637d3e3dbe906044015b600060405180830381600087803b15801561251f57600080fd5b505af1158015610a9b573d6000803e3d6000fd5b6001600160a01b0382161561259457610191546040517fa0af29030000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0384811660248301529091169063a0af290390604401612505565b610191546040517f4420e4860000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0390911690634420e48690602401612505565b610191805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517fe9919957d871eafd2de063f58e6c3015bdee186c8a161b85d6173122db2210f890600090a250565b816001600160a01b0316836001600160a01b0316036126bd5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c66000000000000000000000000000000000000000000000060648201526084016106ae565b6001600160a01b03838116600081815260666020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0384166127a65760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016106ae565b81518351146128085760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016106ae565b6000612812611fe0565b905061282381600087878787613090565b60005b84518110156128bf57838181518110612841576128416142d9565b60200260200101516065600087848151811061285f5761285f6142d9565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060008282546128a791906143b0565b909155508190506128b781614233565b915050612826565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516129109291906144c9565b60405180910390a46107d881600087878787613294565b61012d546001600160a01b03908116908216036129ac5760405162461bcd60e51b815260206004820152603060248201527f4552433237373148616e646c65725570677261646561626c653a20666f72776160448201527f7264657220616c7265616479207365740000000000000000000000000000000060648201526084016106ae565b6129b4611fe0565b61012d546040516001600160a01b03928316928481169216907f8ca022029d8ff7ad974913f8970aeed6c5e0e7eaf494a0c5b262249f6b5759e590600090a461012d805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b038416612a9f5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016106ae565b6000612aa9611fe0565b90506000612ab685613045565b90506000612ac385613045565b9050612ad3838989858589613090565b60008681526065602090815260408083206001600160a01b038c16845290915290205485811015612b6c5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201527f72207472616e736665720000000000000000000000000000000000000000000060648201526084016106ae565b60008781526065602090815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290612bab9084906143b0565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4612c0b848a8a8a8a8a61309e565b505050505050505050565b600054610100900460ff16612c815760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106ae565b6119d4816133e3565b600054610100900460ff16612cf55760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106ae565b565b600054610100900460ff16612d625760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106ae565b612cf5613457565b600054610100900460ff16612dd55760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106ae565b6119d4816134de565b600054610100900460ff16612e495760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106ae565b610191805473ffffffffffffffffffffffffffffffffffffffff19166daaeb6d7670e522a718067333cd4e179055610b668282612412565b600054610100900460ff16612eec5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106ae565b612ef581613552565b6119d4612c8a565b60006001600160e01b031982167f7965db0b0000000000000000000000000000000000000000000000000000000014806106dc57506106dc826135aa565b606060678054612f4a906142ef565b80601f0160208091040260200160405190810160405280929190818152602001828054612f76906142ef565b8015612fc35780601f10612f9857610100808354040283529160200191612fc3565b820191906000526020600020905b815481529060010190602001808311612fa657829003601f168201915b50505050509050919050565b600082815261015f602090815260408083206001600160a01b038516845290915290205460ff16610b665761300381613645565b61300e836020613657565b60405160200161301f9291906144f7565b60408051601f198184030181529082905262461bcd60e51b82526106ae91600401613b5c565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061307f5761307f6142d9565b602090810291909101015292915050565b610a9b868686868686613880565b6001600160a01b0384163b15610a9b576040517ff23a6e610000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063f23a6e61906130fb9089908990889088908890600401614578565b6020604051808303816000875af1925050508015613136575060408051601f3d908101601f19168201909252613133918101906145bb565b60015b6131eb576131426145d8565b806308c379a00361317b57506131566145f3565b80613161575061317d565b8060405162461bcd60e51b81526004016106ae9190613b5c565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d4552433131353560448201527f526563656976657220696d706c656d656e74657200000000000000000000000060648201526084016106ae565b6001600160e01b031981167ff23a6e610000000000000000000000000000000000000000000000000000000014611ba55760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a6563746560448201527f6420746f6b656e7300000000000000000000000000000000000000000000000060648201526084016106ae565b6000610cbd613a0e565b6001600160a01b0384163b15610a9b576040517fbc197c810000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063bc197c81906132f1908990899088908890889060040161469b565b6020604051808303816000875af192505050801561332c575060408051601f3d908101601f19168201909252613329918101906145bb565b60015b613338576131426145d8565b6001600160e01b031981167fbc197c810000000000000000000000000000000000000000000000000000000014611ba55760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a6563746560448201527f6420746f6b656e7300000000000000000000000000000000000000000000000060648201526084016106ae565b60fb610b668282614409565b600054610100900460ff1661344e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106ae565b6119d481613a63565b600054610100900460ff166134c25760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106ae565b60408051602081019091526000815260fb906119d49082614409565b600054610100900460ff166135495760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106ae565b6119d481612927565b6101c3805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f1ad03d64d67ed9b2c90cfdf8dc8e54de3e41af88ae55e45a53dc27e476406de890600090a250565b60006001600160e01b031982167fd9b67a2600000000000000000000000000000000000000000000000000000000148061360d57506001600160e01b031982167f0e89341c00000000000000000000000000000000000000000000000000000000145b806106dc57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316146106dc565b60606106dc6001600160a01b03831660145b60606000613666836002614283565b6136719060026143b0565b67ffffffffffffffff81111561368957613689613ba4565b6040519080825280601f01601f1916602001820160405280156136b3576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106136ea576136ea6142d9565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061374d5761374d6142d9565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000613789846002614283565b6137949060016143b0565b90505b6001811115613831577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106137d5576137d56142d9565b1a60f81b8282815181106137eb576137eb6142d9565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361382a816146f9565b9050613797565b5083156119bc5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106ae565b6001600160a01b0385166139075760005b8351811015613905578281815181106138ac576138ac6142d9565b602002602001015160c960008684815181106138ca576138ca6142d9565b6020026020010151815260200190815260200160002060008282546138ef91906143b0565b909155506138fe905081614233565b9050613891565b505b6001600160a01b038416610a9b5760005b8351811015611ba5576000848281518110613935576139356142d9565b602002602001015190506000848381518110613953576139536142d9565b60200260200101519050600060c96000848152602001908152602001600020549050818110156139eb5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a206275726e20616d6f756e74206578636565647320746f7460448201527f616c537570706c7900000000000000000000000000000000000000000000000060648201526084016106ae565b600092835260c9602052604090922091039055613a0781614233565b9050613918565b61012d546000906001600160a01b031633148015613a2d575060143610155b15613a5d57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c90565b50335b90565b6067610b668282614409565b6001600160a01b03811681146119d457600080fd5b8035613a8f81613a6f565b919050565b60008060408385031215613aa757600080fd5b8235613ab281613a6f565b946020939093013593505050565b6001600160e01b0319811681146119d457600080fd5b600060208284031215613ae857600080fd5b81356119bc81613ac0565b600060208284031215613b0557600080fd5b5035919050565b60005b83811015613b27578181015183820152602001613b0f565b50506000910152565b60008151808452613b48816020860160208601613b0c565b601f01601f19169290920160200192915050565b6020815260006119bc6020830184613b30565b600080600060608486031215613b8457600080fd5b8335613b8f81613a6f565b95602085013595506040909401359392505050565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715613be057613be0613ba4565b6040525050565b600082601f830112613bf857600080fd5b813567ffffffffffffffff811115613c1257613c12613ba4565b604051613c296020601f19601f8501160182613bba565b818152846020838601011115613c3e57600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215613c6d57600080fd5b813567ffffffffffffffff811115613c8457600080fd5b613c9084828501613be7565b949350505050565b600067ffffffffffffffff821115613cb257613cb2613ba4565b5060051b60200190565b600082601f830112613ccd57600080fd5b81356020613cda82613c98565b604051613ce78282613bba565b83815260059390931b8501820192828101915086841115613d0757600080fd5b8286015b84811015613d225780358352918301918301613d0b565b509695505050505050565b600080600060608486031215613d4257600080fd5b8335613d4d81613a6f565b9250602084013567ffffffffffffffff80821115613d6a57600080fd5b613d7687838801613cbc565b93506040860135915080821115613d8c57600080fd5b50613d9986828701613cbc565b9150509250925092565b60008060408385031215613db657600080fd5b50508035926020909101359150565b600080600080600060a08688031215613ddd57600080fd5b8535613de881613a6f565b94506020860135613df881613a6f565b9350604086013567ffffffffffffffff80821115613e1557600080fd5b613e2189838a01613cbc565b94506060880135915080821115613e3757600080fd5b613e4389838a01613cbc565b93506080880135915080821115613e5957600080fd5b50613e6688828901613be7565b9150509295509295909350565b60008060408385031215613e8657600080fd5b823591506020830135613e9881613a6f565b809150509250929050565b60008060408385031215613eb657600080fd5b823567ffffffffffffffff80821115613ece57600080fd5b818501915085601f830112613ee257600080fd5b81356020613eef82613c98565b604051613efc8282613bba565b83815260059390931b8501820192828101915089841115613f1c57600080fd5b948201945b83861015613f43578535613f3481613a6f565b82529482019490820190613f21565b96505086013592505080821115613f5957600080fd5b5061096785828601613cbc565b600081518084526020808501945080840160005b83811015613f9657815187529582019590820190600101613f7a565b509495945050505050565b6020815260006119bc6020830184613f66565b60008060408385031215613fc757600080fd5b82359150602083013567ffffffffffffffff811115613fe557600080fd5b61096785828601613be7565b60006020828403121561400357600080fd5b81356119bc81613a6f565b80151581146119d457600080fd5b6000806040838503121561402f57600080fd5b823561403a81613a6f565b91506020830135613e988161400e565b6000806040838503121561405d57600080fd5b823561406881613a6f565b91506020830135613e9881613a6f565b600080600080600060a0868803121561409057600080fd5b853561409b81613a6f565b945060208601356140ab81613a6f565b93506040860135925060608601359150608086013567ffffffffffffffff8111156140d557600080fd5b613e6688828901613be7565b600080600080600080600060e0888a0312156140fc57600080fd5b67ffffffffffffffff808935111561411357600080fd5b6141208a8a358b01613be7565b9750602089013561413081613a6f565b9650604089013561414081613a6f565b9550606089013561415081613a6f565b9450608089013561416081613a6f565b935060a08901358181111561417457600080fd5b8901601f81018b1361418557600080fd5b803561419081613c98565b60405161419d8282613bba565b80915082815260208101915060208360051b85010192508d8311156141c157600080fd5b602084015b838110156141fa5785813511156141dc57600080fd5b6141ec8f60208335880101613be7565b8352602092830192016141c6565b50809650505050505061420f60c08901613a84565b905092959891949750929550565b634e487b7160e01b600052601160045260246000fd5b600060001982036142465761424661421d565b5060010190565b6000806040838503121561426057600080fd5b825161426b81613a6f565b602084015190925061ffff81168114613e9857600080fd5b80820281158282048414176106dc576106dc61421d565b6000826142b757634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156142ce57600080fd5b81516119bc8161400e565b634e487b7160e01b600052603260045260246000fd5b600181811c9082168061430357607f821691505b60208210810361432357634e487b7160e01b600052602260045260246000fd5b50919050565b6000808454614337816142ef565b6001828116801561434f576001811461436457614393565b60ff1984168752821515830287019450614393565b8860005260208060002060005b8581101561438a5781548a820152908401908201614371565b50505082870194505b5050505083516143a7818360208801613b0c565b01949350505050565b808201808211156106dc576106dc61421d565b601f821115610ac957600081815260208120601f850160051c810160208610156143ea5750805b601f850160051c820191505b81811015610a9b578281556001016143f6565b815167ffffffffffffffff81111561442357614423613ba4565b6144378161443184546142ef565b846143c3565b602080601f83116001811461446c57600084156144545750858301515b600019600386901b1c1916600185901b178555610a9b565b600085815260208120601f198616915b8281101561449b5788860151825594840194600190910190840161447c565b50858210156144b95787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6040815260006144dc6040830185613f66565b82810360208401526144ee8185613f66565b95945050505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161452f816017850160208801613b0c565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000601791840191820152835161456c816028840160208801613b0c565b01602801949350505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a060808301526145b060a0830184613b30565b979650505050505050565b6000602082840312156145cd57600080fd5b81516119bc81613ac0565b600060033d1115613a605760046000803e5060005160e01c90565b600060443d10156146015790565b6040517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc803d016004833e81513d67ffffffffffffffff816024840111818411171561464f57505050505090565b82850191508151818111156146675750505050505090565b843d87010160208285010111156146815750505050505090565b61469060208286010187613bba565b509095945050505050565b60006001600160a01b03808816835280871660208401525060a060408301526146c760a0830186613f66565b82810360608401526146d98186613f66565b905082810360808401526146ed8185613b30565b98975050505050505050565b6000816147085761470861421d565b50600019019056fea2646970667358221220984fb4dae22ed4aba9db5e3346aea4e270846b068ed4e6f7516b7ee7d9257fdf64736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102765760003560e01c8063572b6c0511610160578063bd85b039116100d8578063da7422281161008c578063f242432a11610071578063f242432a146105fb578063f3bdecc11461060e578063f5298aca1461062157600080fd5b8063da742228146105ac578063e985e9c5146105bf57600080fd5b8063d5391393116100bd578063d53913931461055f578063d547741f14610586578063d81d0a151461059957600080fd5b8063bd85b0391461052d578063ce1b815f1461054d57600080fd5b806391d148541161012f5780639d28fb86116101145780639d28fb86146104ff578063a217fddf14610512578063a22cb4651461051a57600080fd5b806391d14854146104b35780639a1b2fb4146104ed57600080fd5b8063572b6c05146104705780636b20c4541461048357806371e0276c14610496578063791459ea146104a057600080fd5b80632a55205a116101f35780634e1273f4116101c257806350c821b0116101a757806350c821b01461042a578063512c97e91461044a57806355f804b31461045d57600080fd5b80634e1273f4146103e85780634f558e791461040857600080fd5b80632a55205a1461037d5780632eb2c2d6146103af5780632f2ff15d146103c257806336568abe146103d557600080fd5b8063156e29f61161024a57806320820ec31161022f57806320820ec31461031f578063248a9ca314610332578063282c51f31461035657600080fd5b8063156e29f6146102f95780631a87b2771461030c57600080fd5b8062fdd58e1461027b57806301ffc9a7146102a15780630e89341c146102c4578063124d91e5146102e4575b600080fd5b61028e610289366004613a94565b610634565b6040519081526020015b60405180910390f35b6102b46102af366004613ad6565b6106e2565b6040519015158152602001610298565b6102d76102d2366004613af3565b6106ed565b6040516102989190613b5c565b6102f76102f2366004613b6f565b6106f8565b005b6102f7610307366004613b6f565b610733565b6102f761031a366004613c5b565b6107df565b6102f761032d366004613d2d565b610896565b61028e610340366004613af3565b600090815261015f602052604090206001015490565b61028e7f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a84881565b61039061038b366004613da3565b6108cb565b604080516001600160a01b039093168352602083019190915201610298565b6102f76103bd366004613dc5565b610971565b6102f76103d0366004613e73565b610aa3565b6102f76103e3366004613e73565b610ace565b6103fb6103f6366004613ea3565b610b6a565b6040516102989190613fa1565b6102b4610416366004613af3565b600090815260c96020526040902054151590565b610432610ca8565b6040516001600160a01b039091168152602001610298565b6102f7610458366004613fb4565b610cc2565b6102f761046b366004613c5b565b610d88565b6102b461047e366004613ff1565b610e28565b6102f7610491366004613d2d565b610e43565b61028e6101f55481565b6102f76104ae36600461401c565b610eee565b6102b46104c1366004613e73565b600091825261015f602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6101c3546001600160a01b0316610432565b6102f761050d366004613ff1565b610f59565b61028e600081565b6102f761052836600461401c565b610ffb565b61028e61053b366004613af3565b600090815260c9602052604090205490565b61012d546001600160a01b0316610432565b61028e7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b6102f7610594366004613e73565b6110fc565b6102f76105a7366004613d2d565b611122565b6102f76105ba366004613ff1565b611217565b6102b46105cd36600461404a565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205460ff1690565b6102f7610609366004614078565b611281565b6102f761061c3660046140e1565b6113a6565b6102f761062f366004613b6f565b6117fa565b60006001600160a01b0383166106b75760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201527f616c6964206f776e65720000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5060008181526065602090815260408083206001600160a01b03861684529091529020545b92915050565b60006106dc826118a5565b60606106dc826118e3565b7f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a848610722816119c3565b61072d8484846119d7565b50505050565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a661075d816119c3565b8260008111801561077157506101f5548111155b6107bd5760405162461bcd60e51b815260206004820152601d60248201527f436174616c7973743a20696e76616c696420636174616c79737420696400000060448201526064016106ae565b6107d885858560405180602001604052806000815250611bae565b5050505050565b60006107ea816119c3565b815160000361083b5760405162461bcd60e51b815260206004820152601b60248201527f436174616c7973743a204349442063616e7420626520656d707479000000000060448201526064016106ae565b60006101f56000815461084d90614233565b9182905550905061085e8184611cf1565b6040518181527f0fc221b41b73e1c4f9d65566cf090e650d0246fb5c0434a32e9b313a39636d169060200160405180910390a1505050565b7f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a8486108c0816119c3565b61072d848484611d4e565b60008060006101c360009054906101000a90046001600160a01b03166001600160a01b031663a86a28d16040518163ffffffff1660e01b81526004016040805180830381865afa158015610923573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610947919061424d565b909350905061271061095d61ffff831686614283565b610967919061429a565b9150509250929050565b6101915485906001600160a01b03163b15610a8e5761098e611fe0565b6001600160a01b0316816001600160a01b0316036109b8576109b38686868686611fea565b610a9b565b610191546001600160a01b031663c6171134306109d3611fe0565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381865afa158015610a1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4291906142bc565b610a8e5760405162461bcd60e51b815260206004820152601460248201527f4f70657261746f72204e6f7420416c6c6f77656400000000000000000000000060448201526064016106ae565b610a9b8686868686611fea565b505050505050565b600082815261015f6020526040902060010154610abf816119c3565b610ac98383612287565b505050565b610ad6611fe0565b6001600160a01b0316816001600160a01b031614610b5c5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016106ae565b610b66828261232c565b5050565b60608151835114610be35760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d61746368000000000000000000000000000000000000000000000060648201526084016106ae565b6000835167ffffffffffffffff811115610bff57610bff613ba4565b604051908082528060200260200182016040528015610c28578160200160208202803683370190505b50905060005b8451811015610ca057610c73858281518110610c4c57610c4c6142d9565b6020026020010151858381518110610c6657610c666142d9565b6020026020010151610634565b828281518110610c8557610c856142d9565b6020908102919091010152610c9981614233565b9050610c2e565b509392505050565b6000610cbd610191546001600160a01b031690565b905090565b6000610ccd816119c3565b82600081118015610ce157506101f5548111155b610d2d5760405162461bcd60e51b815260206004820152601d60248201527f436174616c7973743a20696e76616c696420636174616c79737420696400000060448201526064016106ae565b8251600003610d7e5760405162461bcd60e51b815260206004820152601d60248201527f436174616c7973743a204d65746164617461206861736820656d70747900000060448201526064016106ae565b61072d8484611cf1565b6000610d93816119c3565b8151600003610de45760405162461bcd60e51b815260206004820152601360248201527f436174616c7973743a2055524920656d7074790000000000000000000000000060448201526064016106ae565b610ded826123cf565b7ff9c7803e94e0d3c02900d8a90893a6d5e90dd04d32a4cfe825520f82bf9f32f682604051610e1c9190613b5c565b60405180910390a15050565b60006106dc8261012d546001600160a01b0391821691161490565b610e4b611fe0565b6001600160a01b0316836001600160a01b03161480610e715750610e71836105cd611fe0565b610ee35760405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206f7220617070726f76656400000000000000000000000000000000000060648201526084016106ae565b610ac9838383611d4e565b6000610ef9816119c3565b6001600160a01b038316610f4f5760405162461bcd60e51b815260206004820152601660248201527f436174616c7973743a205a65726f20616464726573730000000000000000000060448201526064016106ae565b610ac98383612412565b6000610f64816119c3565b6001600160a01b038216610fba5760405162461bcd60e51b815260206004820152601660248201527f436174616c7973743a205a65726f20616464726573730000000000000000000060448201526064016106ae565b610fc3826125de565b6040516001600160a01b038316907fc6df119c56c99171b170652a3c4750ba46dcaacbdb3b7ab4847a9fa339659bd490600090a25050565b6101915482906001600160a01b03163b156110ea57610191546040517fc61711340000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0383811660248301529091169063c617113490604401602060405180830381865afa15801561107a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109e91906142bc565b6110ea5760405162461bcd60e51b815260206004820152601460248201527f4f70657261746f72204e6f7420416c6c6f77656400000000000000000000000060448201526064016106ae565b610ac96110f5611fe0565b8484612636565b600082815261015f6020526040902060010154611118816119c3565b610ac9838361232c565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a661114c816119c3565b60005b83518110156111fb57600084828151811061116c5761116c6142d9565b602002602001015111801561119d57506101f554848281518110611192576111926142d9565b602002602001015111155b6111e95760405162461bcd60e51b815260206004820152601d60248201527f436174616c7973743a20696e76616c696420636174616c79737420696400000060448201526064016106ae565b806111f381614233565b91505061114f565b5061072d8484846040518060200160405280600081525061272a565b6000611222816119c3565b6001600160a01b0382166112785760405162461bcd60e51b815260206004820152601660248201527f436174616c7973743a205a65726f20616464726573730000000000000000000060448201526064016106ae565b610b6682612927565b6101915485906001600160a01b03163b156113995761129e611fe0565b6001600160a01b0316816001600160a01b0316036112c3576109b38686868686612a23565b610191546001600160a01b031663c6171134306112de611fe0565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381865afa158015611329573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134d91906142bc565b6113995760405162461bcd60e51b815260206004820152601460248201527f4f70657261746f72204e6f7420416c6c6f77656400000000000000000000000060448201526064016106ae565b610a9b8686868686612a23565b600054610100900460ff16158080156113c65750600054600160ff909116105b806113e05750303b1580156113e0575060005460ff166001145b6114525760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016106ae565b6000805460ff191660011790558015611475576000805461ff0019166101001790555b87516000036114c65760405162461bcd60e51b815260206004820152601360248201527f436174616c7973743a2055524920656d7074790000000000000000000000000060448201526064016106ae565b6001600160a01b03871661151c5760405162461bcd60e51b815260206004820152601860248201527f436174616c7973743a20312d5a65726f2061646472657373000000000000000060448201526064016106ae565b6001600160a01b0386166115725760405162461bcd60e51b815260206004820152601860248201527f436174616c7973743a20322d5a65726f2061646472657373000000000000000060448201526064016106ae565b6001600160a01b0385166115c85760405162461bcd60e51b815260206004820152601860248201527f436174616c7973743a20332d5a65726f2061646472657373000000000000000060448201526064016106ae565b6001600160a01b03841661161e5760405162461bcd60e51b815260206004820152601860248201527f436174616c7973743a20342d5a65726f2061646472657373000000000000000060448201526064016106ae565b6001600160a01b0382166116745760405162461bcd60e51b815260206004820152601860248201527f436174616c7973743a20352d5a65726f2061646472657373000000000000000060448201526064016106ae565b61167d88612c16565b611685612c8a565b61168d612c8a565b611695612c8a565b61169d612cf7565b6116a687612d6a565b6116b1866001612dde565b6116ba886123cf565b6116c5600086612287565b6116ef7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a685612287565b6116f882612e81565b60005b83518110156117a957838181518110611716576117166142d9565b60200260200101515160000361176e5760405162461bcd60e51b815260206004820152601b60248201527f436174616c7973743a204349442063616e7420626520656d707479000000000060448201526064016106ae565b61179181858381518110611784576117846142d9565b6020026020010151611cf1565b6101f5819055806117a181614233565b9150506116fb565b5080156117f0576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b611802611fe0565b6001600160a01b0316836001600160a01b031614806118285750611828836105cd611fe0565b61189a5760405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206f7220617070726f76656400000000000000000000000000000000000060648201526084016106ae565b610ac98383836119d7565b60006001600160e01b031982167f2a55205a0000000000000000000000000000000000000000000000000000000014806106dc57506106dc82612efd565b600081815260fc6020526040812080546060929190611901906142ef565b80601f016020809104026020016040519081016040528092919081815260200182805461192d906142ef565b801561197a5780601f1061194f5761010080835404028352916020019161197a565b820191906000526020600020905b81548152906001019060200180831161195d57829003601f168201915b5050505050905060008151116119985761199383612f3b565b6119bc565b60fb816040516020016119ac929190614329565b6040516020818303038152906040525b9392505050565b6119d4816119cf611fe0565b612fcf565b50565b6001600160a01b038316611a535760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016106ae565b6000611a5d611fe0565b90506000611a6a84613045565b90506000611a7784613045565b9050611a9783876000858560405180602001604052806000815250613090565b60008581526065602090815260408083206001600160a01b038a16845290915290205484811015611b2f5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c60448201527f616e63650000000000000000000000000000000000000000000000000000000060648201526084016106ae565b60008681526065602090815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46040805160208101909152600090525b50505050505050565b6001600160a01b038416611c2a5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016106ae565b6000611c34611fe0565b90506000611c4185613045565b90506000611c4e85613045565b9050611c5f83600089858589613090565b60008681526065602090815260408083206001600160a01b038b16845290915281208054879290611c919084906143b0565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611ba58360008989898961309e565b600082815260fc60205260409020611d098282614409565b50817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b611d35846106ed565b604051611d429190613b5c565b60405180910390a25050565b6001600160a01b038316611dca5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016106ae565b8051825114611e2c5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016106ae565b6000611e36611fe0565b9050611e5681856000868660405180602001604052806000815250613090565b60005b8351811015611f73576000848281518110611e7657611e766142d9565b602002602001015190506000848381518110611e9457611e946142d9565b60209081029190910181015160008481526065835260408082206001600160a01b038c168352909352919091205490915081811015611f3a5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c60448201527f616e63650000000000000000000000000000000000000000000000000000000060648201526084016106ae565b60009283526065602090815260408085206001600160a01b038b1686529091529092209103905580611f6b81614233565b915050611e59565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611fc49291906144c9565b60405180910390a460408051602081019091526000905261072d565b6000610cbd61328a565b815183511461204c5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016106ae565b6001600160a01b0384166120c85760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016106ae565b60006120d2611fe0565b90506120e2818787878787613090565b60005b8451811015612221576000858281518110612102576121026142d9565b602002602001015190506000858381518110612120576121206142d9565b60209081029190910181015160008481526065835260408082206001600160a01b038e1683529093529190912054909150818110156121c75760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201527f72207472616e736665720000000000000000000000000000000000000000000060648201526084016106ae565b60008381526065602090815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906122069084906143b0565b925050819055505050508061221a90614233565b90506120e5565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516122719291906144c9565b60405180910390a4610a9b818787878787613294565b600082815261015f602090815260408083206001600160a01b038516845290915290205460ff16610b6657600082815261015f602090815260408083206001600160a01b03851684529091529020805460ff191660011790556122e8611fe0565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600082815261015f602090815260408083206001600160a01b038516845290915290205460ff1615610b6657600082815261015f602090815260408083206001600160a01b03851684529091529020805460ff1916905561238b611fe0565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6123d8816133d7565b7ff9c7803e94e0d3c02900d8a90893a6d5e90dd04d32a4cfe825520f82bf9f32f6816040516124079190613b5c565b60405180910390a150565b610191546001600160a01b03163b15610b6657610191546040517fc3c5a5470000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b039091169063c3c5a547906024016020604051808303816000875af1158015612489573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ad91906142bc565b610b6657801561253357610191546040517f7d3e3dbe0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03848116602483015290911690637d3e3dbe906044015b600060405180830381600087803b15801561251f57600080fd5b505af1158015610a9b573d6000803e3d6000fd5b6001600160a01b0382161561259457610191546040517fa0af29030000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0384811660248301529091169063a0af290390604401612505565b610191546040517f4420e4860000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0390911690634420e48690602401612505565b610191805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517fe9919957d871eafd2de063f58e6c3015bdee186c8a161b85d6173122db2210f890600090a250565b816001600160a01b0316836001600160a01b0316036126bd5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c66000000000000000000000000000000000000000000000060648201526084016106ae565b6001600160a01b03838116600081815260666020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0384166127a65760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016106ae565b81518351146128085760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016106ae565b6000612812611fe0565b905061282381600087878787613090565b60005b84518110156128bf57838181518110612841576128416142d9565b60200260200101516065600087848151811061285f5761285f6142d9565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060008282546128a791906143b0565b909155508190506128b781614233565b915050612826565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516129109291906144c9565b60405180910390a46107d881600087878787613294565b61012d546001600160a01b03908116908216036129ac5760405162461bcd60e51b815260206004820152603060248201527f4552433237373148616e646c65725570677261646561626c653a20666f72776160448201527f7264657220616c7265616479207365740000000000000000000000000000000060648201526084016106ae565b6129b4611fe0565b61012d546040516001600160a01b03928316928481169216907f8ca022029d8ff7ad974913f8970aeed6c5e0e7eaf494a0c5b262249f6b5759e590600090a461012d805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b038416612a9f5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016106ae565b6000612aa9611fe0565b90506000612ab685613045565b90506000612ac385613045565b9050612ad3838989858589613090565b60008681526065602090815260408083206001600160a01b038c16845290915290205485811015612b6c5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201527f72207472616e736665720000000000000000000000000000000000000000000060648201526084016106ae565b60008781526065602090815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290612bab9084906143b0565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4612c0b848a8a8a8a8a61309e565b505050505050505050565b600054610100900460ff16612c815760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106ae565b6119d4816133e3565b600054610100900460ff16612cf55760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106ae565b565b600054610100900460ff16612d625760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106ae565b612cf5613457565b600054610100900460ff16612dd55760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106ae565b6119d4816134de565b600054610100900460ff16612e495760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106ae565b610191805473ffffffffffffffffffffffffffffffffffffffff19166daaeb6d7670e522a718067333cd4e179055610b668282612412565b600054610100900460ff16612eec5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106ae565b612ef581613552565b6119d4612c8a565b60006001600160e01b031982167f7965db0b0000000000000000000000000000000000000000000000000000000014806106dc57506106dc826135aa565b606060678054612f4a906142ef565b80601f0160208091040260200160405190810160405280929190818152602001828054612f76906142ef565b8015612fc35780601f10612f9857610100808354040283529160200191612fc3565b820191906000526020600020905b815481529060010190602001808311612fa657829003601f168201915b50505050509050919050565b600082815261015f602090815260408083206001600160a01b038516845290915290205460ff16610b665761300381613645565b61300e836020613657565b60405160200161301f9291906144f7565b60408051601f198184030181529082905262461bcd60e51b82526106ae91600401613b5c565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061307f5761307f6142d9565b602090810291909101015292915050565b610a9b868686868686613880565b6001600160a01b0384163b15610a9b576040517ff23a6e610000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063f23a6e61906130fb9089908990889088908890600401614578565b6020604051808303816000875af1925050508015613136575060408051601f3d908101601f19168201909252613133918101906145bb565b60015b6131eb576131426145d8565b806308c379a00361317b57506131566145f3565b80613161575061317d565b8060405162461bcd60e51b81526004016106ae9190613b5c565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d4552433131353560448201527f526563656976657220696d706c656d656e74657200000000000000000000000060648201526084016106ae565b6001600160e01b031981167ff23a6e610000000000000000000000000000000000000000000000000000000014611ba55760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a6563746560448201527f6420746f6b656e7300000000000000000000000000000000000000000000000060648201526084016106ae565b6000610cbd613a0e565b6001600160a01b0384163b15610a9b576040517fbc197c810000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063bc197c81906132f1908990899088908890889060040161469b565b6020604051808303816000875af192505050801561332c575060408051601f3d908101601f19168201909252613329918101906145bb565b60015b613338576131426145d8565b6001600160e01b031981167fbc197c810000000000000000000000000000000000000000000000000000000014611ba55760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a6563746560448201527f6420746f6b656e7300000000000000000000000000000000000000000000000060648201526084016106ae565b60fb610b668282614409565b600054610100900460ff1661344e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106ae565b6119d481613a63565b600054610100900460ff166134c25760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106ae565b60408051602081019091526000815260fb906119d49082614409565b600054610100900460ff166135495760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106ae565b6119d481612927565b6101c3805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f1ad03d64d67ed9b2c90cfdf8dc8e54de3e41af88ae55e45a53dc27e476406de890600090a250565b60006001600160e01b031982167fd9b67a2600000000000000000000000000000000000000000000000000000000148061360d57506001600160e01b031982167f0e89341c00000000000000000000000000000000000000000000000000000000145b806106dc57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316146106dc565b60606106dc6001600160a01b03831660145b60606000613666836002614283565b6136719060026143b0565b67ffffffffffffffff81111561368957613689613ba4565b6040519080825280601f01601f1916602001820160405280156136b3576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106136ea576136ea6142d9565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061374d5761374d6142d9565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000613789846002614283565b6137949060016143b0565b90505b6001811115613831577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106137d5576137d56142d9565b1a60f81b8282815181106137eb576137eb6142d9565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361382a816146f9565b9050613797565b5083156119bc5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106ae565b6001600160a01b0385166139075760005b8351811015613905578281815181106138ac576138ac6142d9565b602002602001015160c960008684815181106138ca576138ca6142d9565b6020026020010151815260200190815260200160002060008282546138ef91906143b0565b909155506138fe905081614233565b9050613891565b505b6001600160a01b038416610a9b5760005b8351811015611ba5576000848281518110613935576139356142d9565b602002602001015190506000848381518110613953576139536142d9565b60200260200101519050600060c96000848152602001908152602001600020549050818110156139eb5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a206275726e20616d6f756e74206578636565647320746f7460448201527f616c537570706c7900000000000000000000000000000000000000000000000060648201526084016106ae565b600092835260c9602052604090922091039055613a0781614233565b9050613918565b61012d546000906001600160a01b031633148015613a2d575060143610155b15613a5d57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c90565b50335b90565b6067610b668282614409565b6001600160a01b03811681146119d457600080fd5b8035613a8f81613a6f565b919050565b60008060408385031215613aa757600080fd5b8235613ab281613a6f565b946020939093013593505050565b6001600160e01b0319811681146119d457600080fd5b600060208284031215613ae857600080fd5b81356119bc81613ac0565b600060208284031215613b0557600080fd5b5035919050565b60005b83811015613b27578181015183820152602001613b0f565b50506000910152565b60008151808452613b48816020860160208601613b0c565b601f01601f19169290920160200192915050565b6020815260006119bc6020830184613b30565b600080600060608486031215613b8457600080fd5b8335613b8f81613a6f565b95602085013595506040909401359392505050565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715613be057613be0613ba4565b6040525050565b600082601f830112613bf857600080fd5b813567ffffffffffffffff811115613c1257613c12613ba4565b604051613c296020601f19601f8501160182613bba565b818152846020838601011115613c3e57600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215613c6d57600080fd5b813567ffffffffffffffff811115613c8457600080fd5b613c9084828501613be7565b949350505050565b600067ffffffffffffffff821115613cb257613cb2613ba4565b5060051b60200190565b600082601f830112613ccd57600080fd5b81356020613cda82613c98565b604051613ce78282613bba565b83815260059390931b8501820192828101915086841115613d0757600080fd5b8286015b84811015613d225780358352918301918301613d0b565b509695505050505050565b600080600060608486031215613d4257600080fd5b8335613d4d81613a6f565b9250602084013567ffffffffffffffff80821115613d6a57600080fd5b613d7687838801613cbc565b93506040860135915080821115613d8c57600080fd5b50613d9986828701613cbc565b9150509250925092565b60008060408385031215613db657600080fd5b50508035926020909101359150565b600080600080600060a08688031215613ddd57600080fd5b8535613de881613a6f565b94506020860135613df881613a6f565b9350604086013567ffffffffffffffff80821115613e1557600080fd5b613e2189838a01613cbc565b94506060880135915080821115613e3757600080fd5b613e4389838a01613cbc565b93506080880135915080821115613e5957600080fd5b50613e6688828901613be7565b9150509295509295909350565b60008060408385031215613e8657600080fd5b823591506020830135613e9881613a6f565b809150509250929050565b60008060408385031215613eb657600080fd5b823567ffffffffffffffff80821115613ece57600080fd5b818501915085601f830112613ee257600080fd5b81356020613eef82613c98565b604051613efc8282613bba565b83815260059390931b8501820192828101915089841115613f1c57600080fd5b948201945b83861015613f43578535613f3481613a6f565b82529482019490820190613f21565b96505086013592505080821115613f5957600080fd5b5061096785828601613cbc565b600081518084526020808501945080840160005b83811015613f9657815187529582019590820190600101613f7a565b509495945050505050565b6020815260006119bc6020830184613f66565b60008060408385031215613fc757600080fd5b82359150602083013567ffffffffffffffff811115613fe557600080fd5b61096785828601613be7565b60006020828403121561400357600080fd5b81356119bc81613a6f565b80151581146119d457600080fd5b6000806040838503121561402f57600080fd5b823561403a81613a6f565b91506020830135613e988161400e565b6000806040838503121561405d57600080fd5b823561406881613a6f565b91506020830135613e9881613a6f565b600080600080600060a0868803121561409057600080fd5b853561409b81613a6f565b945060208601356140ab81613a6f565b93506040860135925060608601359150608086013567ffffffffffffffff8111156140d557600080fd5b613e6688828901613be7565b600080600080600080600060e0888a0312156140fc57600080fd5b67ffffffffffffffff808935111561411357600080fd5b6141208a8a358b01613be7565b9750602089013561413081613a6f565b9650604089013561414081613a6f565b9550606089013561415081613a6f565b9450608089013561416081613a6f565b935060a08901358181111561417457600080fd5b8901601f81018b1361418557600080fd5b803561419081613c98565b60405161419d8282613bba565b80915082815260208101915060208360051b85010192508d8311156141c157600080fd5b602084015b838110156141fa5785813511156141dc57600080fd5b6141ec8f60208335880101613be7565b8352602092830192016141c6565b50809650505050505061420f60c08901613a84565b905092959891949750929550565b634e487b7160e01b600052601160045260246000fd5b600060001982036142465761424661421d565b5060010190565b6000806040838503121561426057600080fd5b825161426b81613a6f565b602084015190925061ffff81168114613e9857600080fd5b80820281158282048414176106dc576106dc61421d565b6000826142b757634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156142ce57600080fd5b81516119bc8161400e565b634e487b7160e01b600052603260045260246000fd5b600181811c9082168061430357607f821691505b60208210810361432357634e487b7160e01b600052602260045260246000fd5b50919050565b6000808454614337816142ef565b6001828116801561434f576001811461436457614393565b60ff1984168752821515830287019450614393565b8860005260208060002060005b8581101561438a5781548a820152908401908201614371565b50505082870194505b5050505083516143a7818360208801613b0c565b01949350505050565b808201808211156106dc576106dc61421d565b601f821115610ac957600081815260208120601f850160051c810160208610156143ea5750805b601f850160051c820191505b81811015610a9b578281556001016143f6565b815167ffffffffffffffff81111561442357614423613ba4565b6144378161443184546142ef565b846143c3565b602080601f83116001811461446c57600084156144545750858301515b600019600386901b1c1916600185901b178555610a9b565b600085815260208120601f198616915b8281101561449b5788860151825594840194600190910190840161447c565b50858210156144b95787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6040815260006144dc6040830185613f66565b82810360208401526144ee8185613f66565b95945050505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161452f816017850160208801613b0c565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000601791840191820152835161456c816028840160208801613b0c565b01602801949350505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a060808301526145b060a0830184613b30565b979650505050505050565b6000602082840312156145cd57600080fd5b81516119bc81613ac0565b600060033d1115613a605760046000803e5060005160e01c90565b600060443d10156146015790565b6040517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc803d016004833e81513d67ffffffffffffffff816024840111818411171561464f57505050505090565b82850191508151818111156146675750505050505090565b843d87010160208285010111156146815750505050505090565b61469060208286010187613bba565b509095945050505050565b60006001600160a01b03808816835280871660208401525060a060408301526146c760a0830186613f66565b82810360608401526146d98186613f66565b905082810360808401526146ed8185613b30565b98975050505050505050565b6000816147085761470861421d565b50600019019056fea2646970667358221220984fb4dae22ed4aba9db5e3346aea4e270846b068ed4e6f7516b7ee7d9257fdf64736f6c63430008120033",
  "devdoc": {
    "author": "The Sandbox",
    "details": "An ERC1155 contract that manages catalysts, extends multiple OpenZeppelin contracts to provide a variety of features including, AccessControl, URIStorage, Burnable and more. The contract includes support for meta transactions.",
    "events": {
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "TransferBatch(address,address,address,uint256[],uint256[])": {
        "details": "Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."
      },
      "TransferSingle(address,address,address,uint256,uint256)": {
        "details": "Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`."
      },
      "TrustedForwarderSet(address,address,address)": {
        "params": {
          "newTrustedForwarder": "new trusted forwarder",
          "oldTrustedForwarder": "old trusted forwarder",
          "operator": "the sender of the transaction"
        }
      },
      "URI(string,uint256)": {
        "details": "Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."
      }
    },
    "kind": "dev",
    "methods": {
      "addNewCatalystType(string)": {
        "params": {
          "ipfsCID": "The IPFS content identifiers for the catalyst"
        }
      },
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "burnBatchFrom(address,uint256[],uint256[])": {
        "params": {
          "account": "The address to burn from",
          "amounts": "The amounts to be burned",
          "ids": "The token ids to burn"
        }
      },
      "burnFrom(address,uint256,uint256)": {
        "params": {
          "account": "The address to burn from",
          "amount": "The amount to be burned",
          "id": "The token id to burn"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "exists(uint256)": {
        "details": "Indicates whether any token exist with a given id, or not."
      },
      "getOperatorFilterRegistry()": {
        "returns": {
          "operatorFilterRegistryAddress": "address of operator filter registry contract."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoyaltyManager()": {
        "returns": {
          "royaltyManagerAddress": "address of royalty manager contract."
        }
      },
      "getTrustedForwarder()": {
        "returns": {
          "_0": "return the address of the trusted forwarder"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(string,address,address,address,address,string[],address)": {
        "params": {
          "_baseUri": "The base URI for the token metadata, most likely set to ipfs://.",
          "_catalystIpfsCID": "The IPFS content identifiers for each catalyst.",
          "_defaultAdmin": "The default admin address.",
          "_defaultMinter": "The default minter address.",
          "_royaltyManager": ", the address of the Manager contract for common royalty recipient",
          "_subscription": "The subscription address.",
          "_trustedForwarder": "The trusted forwarder for meta transactions."
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "isTrustedForwarder(address)": {
        "params": {
          "forwarder": "trusted forwarder address to check"
        },
        "returns": {
          "_0": "true if the address is the same as the trusted forwarder"
        }
      },
      "mint(address,uint256,uint256)": {
        "params": {
          "amount": "The amount to be minted",
          "id": "The token id to mint",
          "to": "The address that will own the minted token"
        }
      },
      "mintBatch(address,uint256[],uint256[])": {
        "params": {
          "amounts": "The amounts to be minted per token id",
          "ids": "The token ids to mint",
          "to": "The address that will own the minted tokens"
        }
      },
      "registerAndSubscribe(address,bool)": {
        "details": "used to register contract and subscribe to the subscriptionOrRegistrantToCopy's black list.",
        "params": {
          "subscribe": "bool to signify subscription \"true\"\" or to copy the list \"false\".",
          "subscriptionOrRegistrantToCopy": "registration address of the list to subscribe."
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "tokenId is one of the EIP2981 args for this function can't be removed",
        "params": {
          "_salePrice": "the price of token on which the royalty is calculated"
        },
        "returns": {
          "receiver": "the receiver of royalty",
          "royaltyAmount": "the amount of royalty"
        }
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "call data should be optimized to order ids so packedBalance can be used efficiently.",
        "params": {
          "data": "additional data accompanying the transfer.",
          "from": "address from which tokens are transfered.",
          "ids": "ids of each token type transfered.",
          "to": "address to which the token will be transfered.",
          "values": "amount of each token type transfered."
        }
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "params": {
          "data": "additional data accompanying the transfer.",
          "from": "address from which tokens are transfered.",
          "id": "the token type transfered.",
          "to": "address to which the token will be transfered.",
          "value": "amount of token transfered."
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "approved": "whether to approve or revoke",
          "operator": "address which will be granted rights to transfer all tokens of the caller."
        }
      },
      "setBaseURI(string)": {
        "params": {
          "baseURI": "The new base URI"
        }
      },
      "setMetadataHash(uint256,string)": {
        "params": {
          "metadataHash": "The new URI",
          "tokenId": "The token id to set URI for"
        }
      },
      "setOperatorRegistry(address)": {
        "params": {
          "registry": "the address of the registry"
        }
      },
      "setTrustedForwarder(address)": {
        "details": "Change the address of the trusted forwarder for meta-TX",
        "params": {
          "trustedForwarder": "The new trustedForwarder"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "the interface identifier, as specified in ERC-165."
        },
        "returns": {
          "_0": "`true` if the contract implements `interfaceId`."
        }
      },
      "totalSupply(uint256)": {
        "details": "Total amount of tokens in with a given id."
      },
      "uri(uint256)": {
        "params": {
          "tokenId": "The token id to get URI for"
        },
        "returns": {
          "_0": "tokenURI the URI of the token"
        }
      }
    },
    "title": "Catalyst",
    "version": 1
  },
  "userdoc": {
    "events": {
      "TrustedForwarderSet(address,address,address)": {
        "notice": "Emitted when a `newTrustedForwarder` is set, replacing the `oldTrustedForwarder`"
      }
    },
    "kind": "user",
    "methods": {
      "addNewCatalystType(string)": {
        "notice": "Add a new catalyst type, limited to DEFAULT_ADMIN_ROLE only"
      },
      "burnBatchFrom(address,uint256[],uint256[])": {
        "notice": "Burns a batch of tokens from a specific address"
      },
      "burnFrom(address,uint256,uint256)": {
        "notice": "Burns a specified amount of tokens from a specific address"
      },
      "getOperatorFilterRegistry()": {
        "notice": "returns the operator filter registry."
      },
      "getRoyaltyManager()": {
        "notice": "returns the royalty manager"
      },
      "getTrustedForwarder()": {
        "notice": "return the address of the trusted forwarder"
      },
      "initialize(string,address,address,address,address,string[],address)": {
        "notice": "Initialize the contract, setting up initial values for various features."
      },
      "isTrustedForwarder(address)": {
        "notice": "return true if the forwarder is the trusted forwarder"
      },
      "mint(address,uint256,uint256)": {
        "notice": "Mints a new token, limited to MINTER_ROLE only"
      },
      "mintBatch(address,uint256[],uint256[])": {
        "notice": "Mints a batch of tokens, limited to MINTER_ROLE only"
      },
      "registerAndSubscribe(address,bool)": {
        "notice": "This function is used to register Catalyst contract on the Operator Filterer Registry of OpenSea. Can only be called by admin."
      },
      "royaltyInfo(uint256,uint256)": {
        "notice": "Returns how much royalty is owed and to whom based on ERC2981"
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "notice": "Transfers `values` tokens of type `ids` from  `from` to `to` (with safety call)."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "notice": "Transfers `value` tokens of type `id` from  `from` to `to`  (with safety call)."
      },
      "setApprovalForAll(address,bool)": {
        "notice": "Enable or disable approval for `operator` to manage all of the caller's tokens."
      },
      "setBaseURI(string)": {
        "notice": "Set a new base URI"
      },
      "setMetadataHash(uint256,string)": {
        "notice": "Set a new URI for specific tokenid"
      },
      "setOperatorRegistry(address)": {
        "notice": "sets filter registry address"
      },
      "setTrustedForwarder(address)": {
        "notice": "Set a new trusted forwarder address, limited to DEFAULT_ADMIN_ROLE only"
      },
      "supportsInterface(bytes4)": {
        "notice": "Query if a contract implements interface `id`."
      },
      "uri(uint256)": {
        "notice": "returns full token URI, including baseURI and token metadata URI"
      }
    },
    "notice": "This contract manages catalysts which are used to mint new assets.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 502,
        "contract": "@sandbox-smart-contracts/asset/contracts/Catalyst.sol:Catalyst",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 505,
        "contract": "@sandbox-smart-contracts/asset/contracts/Catalyst.sol:Catalyst",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2965,
        "contract": "@sandbox-smart-contracts/asset/contracts/Catalyst.sol:Catalyst",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3888,
        "contract": "@sandbox-smart-contracts/asset/contracts/Catalyst.sol:Catalyst",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 820,
        "contract": "@sandbox-smart-contracts/asset/contracts/Catalyst.sol:Catalyst",
        "label": "_balances",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 826,
        "contract": "@sandbox-smart-contracts/asset/contracts/Catalyst.sol:Catalyst",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 828,
        "contract": "@sandbox-smart-contracts/asset/contracts/Catalyst.sol:Catalyst",
        "label": "_uri",
        "offset": 0,
        "slot": "103",
        "type": "t_string_storage"
      },
      {
        "astId": 2035,
        "contract": "@sandbox-smart-contracts/asset/contracts/Catalyst.sol:Catalyst",
        "label": "__gap",
        "offset": 0,
        "slot": "104",
        "type": "t_array(t_uint256)47_storage"
      },
      {
        "astId": 2287,
        "contract": "@sandbox-smart-contracts/asset/contracts/Catalyst.sol:Catalyst",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2313,
        "contract": "@sandbox-smart-contracts/asset/contracts/Catalyst.sol:Catalyst",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2464,
        "contract": "@sandbox-smart-contracts/asset/contracts/Catalyst.sol:Catalyst",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2499,
        "contract": "@sandbox-smart-contracts/asset/contracts/Catalyst.sol:Catalyst",
        "label": "_baseURI",
        "offset": 0,
        "slot": "251",
        "type": "t_string_storage"
      },
      {
        "astId": 2503,
        "contract": "@sandbox-smart-contracts/asset/contracts/Catalyst.sol:Catalyst",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "252",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2578,
        "contract": "@sandbox-smart-contracts/asset/contracts/Catalyst.sol:Catalyst",
        "label": "__gap",
        "offset": 0,
        "slot": "253",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 11744,
        "contract": "@sandbox-smart-contracts/asset/contracts/Catalyst.sol:Catalyst",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "301",
        "type": "t_address"
      },
      {
        "astId": 11855,
        "contract": "@sandbox-smart-contracts/asset/contracts/Catalyst.sol:Catalyst",
        "label": "__gap",
        "offset": 0,
        "slot": "302",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 82,
        "contract": "@sandbox-smart-contracts/asset/contracts/Catalyst.sol:Catalyst",
        "label": "_roles",
        "offset": 0,
        "slot": "351",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)77_storage)"
      },
      {
        "astId": 377,
        "contract": "@sandbox-smart-contracts/asset/contracts/Catalyst.sol:Catalyst",
        "label": "__gap",
        "offset": 0,
        "slot": "352",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11876,
        "contract": "@sandbox-smart-contracts/asset/contracts/Catalyst.sol:Catalyst",
        "label": "operatorFilterRegistry",
        "offset": 0,
        "slot": "401",
        "type": "t_contract(IOperatorFilterRegistry)12300"
      },
      {
        "astId": 12080,
        "contract": "@sandbox-smart-contracts/asset/contracts/Catalyst.sol:Catalyst",
        "label": "__gap",
        "offset": 0,
        "slot": "402",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 12751,
        "contract": "@sandbox-smart-contracts/asset/contracts/Catalyst.sol:Catalyst",
        "label": "royaltyManager",
        "offset": 0,
        "slot": "451",
        "type": "t_contract(IRoyaltyManager)13053"
      },
      {
        "astId": 12859,
        "contract": "@sandbox-smart-contracts/asset/contracts/Catalyst.sol:Catalyst",
        "label": "__gap",
        "offset": 0,
        "slot": "452",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 9845,
        "contract": "@sandbox-smart-contracts/asset/contracts/Catalyst.sol:Catalyst",
        "label": "highestTierIndex",
        "offset": 0,
        "slot": "501",
        "type": "t_uint256"
      },
      {
        "astId": 10527,
        "contract": "@sandbox-smart-contracts/asset/contracts/Catalyst.sol:Catalyst",
        "label": "__gap",
        "offset": 0,
        "slot": "502",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IOperatorFilterRegistry)12300": {
        "encoding": "inplace",
        "label": "contract IOperatorFilterRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(IRoyaltyManager)13053": {
        "encoding": "inplace",
        "label": "contract IRoyaltyManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)77_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)77_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)77_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 74,
            "contract": "@sandbox-smart-contracts/asset/contracts/Catalyst.sol:Catalyst",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 76,
            "contract": "@sandbox-smart-contracts/asset/contracts/Catalyst.sol:Catalyst",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}