{
  "address": "0xf29d66157F23c3a9981C0626742E9FB2F7DA80A8",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum LibAsset.AssetClassType",
                      "name": "assetClass",
                      "type": "uint8"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct LibAsset.AssetType",
                  "name": "assetType",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibAsset.Asset",
              "name": "makeAsset",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum LibAsset.AssetClassType",
                      "name": "assetClass",
                      "type": "uint8"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct LibAsset.AssetType",
                  "name": "assetType",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibAsset.Asset",
              "name": "takeAsset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "end",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct LibOrder.Order",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "Cancel",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newDefaultFeeReceiver",
          "type": "address"
        }
      ],
      "name": "DefaultFeeReceiverSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "leftHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "rightHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "leftValue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rightValue",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct LibFill.FillResult",
          "name": "newFill",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalFillLeft",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalFillRight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueLeft",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueRight",
          "type": "uint256"
        }
      ],
      "name": "Match",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IOrderValidator",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "OrderValidatorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newProtocolFeePrimary",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newProtocolFeeSecondary",
          "type": "uint256"
        }
      ],
      "name": "ProtocolFeeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IRoyaltiesProvider",
          "name": "newRoyaltiesRegistry",
          "type": "address"
        }
      ],
      "name": "RoyaltiesRegistrySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldTrustedForwarder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newTrustedForwarder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "TrustedForwarderSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ERC1776_OPERATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EXCHANGE_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newTrustedForwarder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newProtocolFeePrimary",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newProtocolFeeSecondary",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "newDefaultFeeReceiver",
          "type": "address"
        },
        {
          "internalType": "contract IRoyaltiesProvider",
          "name": "newRoyaltiesProvider",
          "type": "address"
        },
        {
          "internalType": "contract IOrderValidator",
          "name": "orderValidatorAddress",
          "type": "address"
        }
      ],
      "name": "__Exchange_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum LibAsset.AssetClassType",
                      "name": "assetClass",
                      "type": "uint8"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct LibAsset.AssetType",
                  "name": "assetType",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibAsset.Asset",
              "name": "makeAsset",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum LibAsset.AssetClassType",
                      "name": "assetClass",
                      "type": "uint8"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct LibAsset.AssetType",
                  "name": "assetType",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibAsset.Asset",
              "name": "takeAsset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "end",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibOrder.Order",
          "name": "order",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "orderKeyHash",
          "type": "bytes32"
        }
      ],
      "name": "cancel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultFeeReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "fills",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "maker",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "enum LibAsset.AssetClassType",
                          "name": "assetClass",
                          "type": "uint8"
                        },
                        {
                          "internalType": "bytes",
                          "name": "data",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct LibAsset.AssetType",
                      "name": "assetType",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct LibAsset.Asset",
                  "name": "makeAsset",
                  "type": "tuple"
                },
                {
                  "internalType": "address",
                  "name": "taker",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "enum LibAsset.AssetClassType",
                          "name": "assetClass",
                          "type": "uint8"
                        },
                        {
                          "internalType": "bytes",
                          "name": "data",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct LibAsset.AssetType",
                      "name": "assetType",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct LibAsset.Asset",
                  "name": "takeAsset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "salt",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "start",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "end",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibOrder.Order",
              "name": "orderLeft",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "signatureLeft",
              "type": "bytes"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "maker",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "enum LibAsset.AssetClassType",
                          "name": "assetClass",
                          "type": "uint8"
                        },
                        {
                          "internalType": "bytes",
                          "name": "data",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct LibAsset.AssetType",
                      "name": "assetType",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct LibAsset.Asset",
                  "name": "makeAsset",
                  "type": "tuple"
                },
                {
                  "internalType": "address",
                  "name": "taker",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "enum LibAsset.AssetClassType",
                          "name": "assetClass",
                          "type": "uint8"
                        },
                        {
                          "internalType": "bytes",
                          "name": "data",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct LibAsset.AssetType",
                      "name": "assetType",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct LibAsset.Asset",
                  "name": "takeAsset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "salt",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "start",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "end",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibOrder.Order",
              "name": "orderRight",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "signatureRight",
              "type": "bytes"
            }
          ],
          "internalType": "struct ExchangeCore.ExchangeMatch[]",
          "name": "matchedOrders",
          "type": "tuple[]"
        }
      ],
      "name": "matchOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "maker",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "enum LibAsset.AssetClassType",
                          "name": "assetClass",
                          "type": "uint8"
                        },
                        {
                          "internalType": "bytes",
                          "name": "data",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct LibAsset.AssetType",
                      "name": "assetType",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct LibAsset.Asset",
                  "name": "makeAsset",
                  "type": "tuple"
                },
                {
                  "internalType": "address",
                  "name": "taker",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "enum LibAsset.AssetClassType",
                          "name": "assetClass",
                          "type": "uint8"
                        },
                        {
                          "internalType": "bytes",
                          "name": "data",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct LibAsset.AssetType",
                      "name": "assetType",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct LibAsset.Asset",
                  "name": "takeAsset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "salt",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "start",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "end",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibOrder.Order",
              "name": "orderLeft",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "signatureLeft",
              "type": "bytes"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "maker",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "enum LibAsset.AssetClassType",
                          "name": "assetClass",
                          "type": "uint8"
                        },
                        {
                          "internalType": "bytes",
                          "name": "data",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct LibAsset.AssetType",
                      "name": "assetType",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct LibAsset.Asset",
                  "name": "makeAsset",
                  "type": "tuple"
                },
                {
                  "internalType": "address",
                  "name": "taker",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "enum LibAsset.AssetClassType",
                          "name": "assetClass",
                          "type": "uint8"
                        },
                        {
                          "internalType": "bytes",
                          "name": "data",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct LibAsset.AssetType",
                      "name": "assetType",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct LibAsset.Asset",
                  "name": "takeAsset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "salt",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "start",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "end",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibOrder.Order",
              "name": "orderRight",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "signatureRight",
              "type": "bytes"
            }
          ],
          "internalType": "struct ExchangeCore.ExchangeMatch[]",
          "name": "matchedOrders",
          "type": "tuple[]"
        }
      ],
      "name": "matchOrdersFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "orderValidator",
      "outputs": [
        {
          "internalType": "contract IOrderValidator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeePrimary",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeeSecondary",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltiesRegistry",
      "outputs": [
        {
          "internalType": "contract IRoyaltiesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newDefaultFeeReceiver",
          "type": "address"
        }
      ],
      "name": "setDefaultFeeReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOrderValidator",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "setOrderValidatorContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newProtocolFeePrimary",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newProtocolFeeSecondary",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRoyaltiesProvider",
          "name": "newRoyaltiesRegistry",
          "type": "address"
        }
      ],
      "name": "setRoyaltiesRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newTrustedForwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5478d0c250f87e5211a3516d341bf48bf5df179fefa19da7c195745fe801e432",
  "receipt": {
    "to": null,
    "from": "0x5F890c9522dCE5670d741D4277BFCC2d9cA8Af02",
    "contractAddress": "0xf29d66157F23c3a9981C0626742E9FB2F7DA80A8",
    "transactionIndex": 1,
    "gasUsed": "3702040",
    "logsBloom": "0x
    "blockHash": "0x2cdd4e7883580a771f60ace13a7a9a3d04385e4811b1209e508a8cc95e840ff3",
    "transactionHash": "0x5478d0c250f87e5211a3516d341bf48bf5df179fefa19da7c195745fe801e432",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 40870210,
        "transactionHash": "0x5478d0c250f87e5211a3516d341bf48bf5df179fefa19da7c195745fe801e432",
        "address": "0xf29d66157F23c3a9981C0626742E9FB2F7DA80A8",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 1,
        "blockHash": "0x2cdd4e7883580a771f60ace13a7a9a3d04385e4811b1209e508a8cc95e840ff3"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 40870210,
        "transactionHash": "0x5478d0c250f87e5211a3516d341bf48bf5df179fefa19da7c195745fe801e432",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02",
          "0x0000000000000000000000005082f249cdb2f2c1ee035e4f423c46ea2dab3ab1"
        ],
        "data": "0x000000000000000000000000000000000000000000000000008385db8c220b9800000000000000000000000000000000000000000000000f8a2dc26b2d44eff400000000000000000000000000000000000000000000025656ca37bcba157d7900000000000000000000000000000000000000000000000f89aa3c8fa122e45c000000000000000000000000000000000000000000000256574dbd9846378911",
        "logIndex": 2,
        "blockHash": "0x2cdd4e7883580a771f60ace13a7a9a3d04385e4811b1209e508a8cc95e840ff3"
      }
    ],
    "blockNumber": 40870210,
    "cumulativeGasUsed": "3999441",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ecd1b268b7f8423b750f66ee2d2cf788",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"enum LibAsset.AssetClassType\",\"name\":\"assetClass\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"makeAsset\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"enum LibAsset.AssetClassType\",\"name\":\"assetClass\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"takeAsset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct LibOrder.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDefaultFeeReceiver\",\"type\":\"address\"}],\"name\":\"DefaultFeeReceiverSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"leftHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"rightHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"leftValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rightValue\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct LibFill.FillResult\",\"name\":\"newFill\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalFillLeft\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalFillRight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueLeft\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueRight\",\"type\":\"uint256\"}],\"name\":\"Match\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IOrderValidator\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"OrderValidatorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newProtocolFeePrimary\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newProtocolFeeSecondary\",\"type\":\"uint256\"}],\"name\":\"ProtocolFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IRoyaltiesProvider\",\"name\":\"newRoyaltiesRegistry\",\"type\":\"address\"}],\"name\":\"RoyaltiesRegistrySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldTrustedForwarder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTrustedForwarder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"TrustedForwarderSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC1776_OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXCHANGE_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newTrustedForwarder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newProtocolFeePrimary\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newProtocolFeeSecondary\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newDefaultFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"contract IRoyaltiesProvider\",\"name\":\"newRoyaltiesProvider\",\"type\":\"address\"},{\"internalType\":\"contract IOrderValidator\",\"name\":\"orderValidatorAddress\",\"type\":\"address\"}],\"name\":\"__Exchange_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"enum LibAsset.AssetClassType\",\"name\":\"assetClass\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"makeAsset\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"enum LibAsset.AssetClassType\",\"name\":\"assetClass\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"takeAsset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"internalType\":\"struct LibOrder.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"orderKeyHash\",\"type\":\"bytes32\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"fills\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"enum LibAsset.AssetClassType\",\"name\":\"assetClass\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"makeAsset\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"enum LibAsset.AssetClassType\",\"name\":\"assetClass\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"takeAsset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"internalType\":\"struct LibOrder.Order\",\"name\":\"orderLeft\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signatureLeft\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"enum LibAsset.AssetClassType\",\"name\":\"assetClass\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"makeAsset\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"enum LibAsset.AssetClassType\",\"name\":\"assetClass\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"takeAsset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"internalType\":\"struct LibOrder.Order\",\"name\":\"orderRight\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signatureRight\",\"type\":\"bytes\"}],\"internalType\":\"struct ExchangeCore.ExchangeMatch[]\",\"name\":\"matchedOrders\",\"type\":\"tuple[]\"}],\"name\":\"matchOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"enum LibAsset.AssetClassType\",\"name\":\"assetClass\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"makeAsset\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"enum LibAsset.AssetClassType\",\"name\":\"assetClass\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"takeAsset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"internalType\":\"struct LibOrder.Order\",\"name\":\"orderLeft\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signatureLeft\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"enum LibAsset.AssetClassType\",\"name\":\"assetClass\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"makeAsset\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"enum LibAsset.AssetClassType\",\"name\":\"assetClass\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"takeAsset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"internalType\":\"struct LibOrder.Order\",\"name\":\"orderRight\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signatureRight\",\"type\":\"bytes\"}],\"internalType\":\"struct ExchangeCore.ExchangeMatch[]\",\"name\":\"matchedOrders\",\"type\":\"tuple[]\"}],\"name\":\"matchOrdersFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orderValidator\",\"outputs\":[{\"internalType\":\"contract IOrderValidator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeePrimary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeSecondary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltiesRegistry\",\"outputs\":[{\"internalType\":\"contract IRoyaltiesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDefaultFeeReceiver\",\"type\":\"address\"}],\"name\":\"setDefaultFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOrderValidator\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setOrderValidatorContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newProtocolFeePrimary\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newProtocolFeeSecondary\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRoyaltiesProvider\",\"name\":\"newRoyaltiesRegistry\",\"type\":\"address\"}],\"name\":\"setRoyaltiesRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTrustedForwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Main functions are in ExchangeCoreTransferManager is used to execute token transfers\",\"events\":{\"Cancel(bytes32,(address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256))\":{\"params\":{\"hash\":\"order hash\"}},\"DefaultFeeReceiverSet(address)\":{\"params\":{\"newDefaultFeeReceiver\":\"address that gets the fees\"}},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"ProtocolFeeSet(uint256,uint256)\":{\"params\":{\"newProtocolFeePrimary\":\"fee for primary market\",\"newProtocolFeeSecondary\":\"fee for secondary market\"}},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"RoyaltiesRegistrySet(address)\":{\"params\":{\"newRoyaltiesRegistry\":\"address of new royalties registry\"}},\"TrustedForwarderSet(address,address,address)\":{\"params\":{\"newTrustedForwarder\":\"new trusted forwarder\",\"oldTrustedForwarder\":\"old trusted forwarder\",\"operator\":\"the sender of the transaction\"}},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"__Exchange_init(address,address,uint256,uint256,address,address,address)\":{\"params\":{\"admin\":\"the admin user that can grant/revoke roles, etc.\",\"newDefaultFeeReceiver\":\"market fee receiver\",\"newProtocolFeePrimary\":\"protocol fee applied for primary markets\",\"newProtocolFeeSecondary\":\"protocol fee applied for secondary markets\",\"newRoyaltiesProvider\":\"registry for the different types of royalties\",\"newTrustedForwarder\":\"address for trusted forwarder that will execute meta transactions\",\"orderValidatorAddress\":\"new OrderValidator contract address\"}},\"cancel((address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes32)\":{\"details\":\"require msg sender to be order maker and salt different from 0\",\"params\":{\"order\":\"to be canceled\",\"orderKeyHash\":\"used as a checksum to avoid mistakes in the values of order\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\",\"details\":\"this protects the implementation contract from being initialized.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getTrustedForwarder()\":{\"returns\":{\"_0\":\"return the address of the trusted forwarder\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"trusted forwarder address to check\"},\"returns\":{\"_0\":\"true if the address is the same as the trusted forwarder\"}},\"matchOrders(((address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes,(address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes)[])\":{\"params\":{\"matchedOrders\":\"a list of left/right orders that match each other\"}},\"matchOrdersFrom(address,((address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes,(address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes)[])\":{\"params\":{\"matchedOrders\":\"a list of left/right orders that match each other\",\"sender\":\"the original sender of the transaction\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setDefaultFeeReceiver(address)\":{\"params\":{\"newDefaultFeeReceiver\":\"address that gets the fees\"}},\"setOrderValidatorContract(address)\":{\"params\":{\"contractAddress\":\"new OrderValidator contract address\"}},\"setProtocolFee(uint256,uint256)\":{\"params\":{\"newProtocolFeePrimary\":\"fee for primary market\",\"newProtocolFeeSecondary\":\"fee for secondary market\"}},\"setRoyaltiesRegistry(address)\":{\"params\":{\"newRoyaltiesRegistry\":\"address of new royalties registry\"}},\"setTrustedForwarder(address)\":{\"params\":{\"newTrustedForwarder\":\"The new trustedForwarder\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"interface id to check\"}}},\"stateVariables\":{\"ERC1776_OPERATOR_ROLE\":{\"return\":\"hash for ERC1776_OPERATOR_ROLE\",\"returns\":{\"_0\":\"hash for ERC1776_OPERATOR_ROLE\"}},\"EXCHANGE_ADMIN_ROLE\":{\"return\":\"hash for EXCHANGE_ADMIN_ROLE\",\"returns\":{\"_0\":\"hash for EXCHANGE_ADMIN_ROLE\"}},\"PAUSER_ROLE\":{\"return\":\"hash for PAUSER_ROLE\",\"returns\":{\"_0\":\"hash for PAUSER_ROLE\"}}},\"title\":\"Exchange contract with meta transactions\",\"version\":1},\"userdoc\":{\"events\":{\"Cancel(bytes32,(address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256))\":{\"notice\":\"event signaling that an order was canceled\"},\"DefaultFeeReceiverSet(address)\":{\"notice\":\"event for when a default fee receiver is set\"},\"ProtocolFeeSet(uint256,uint256)\":{\"notice\":\"event for when protocol fees are set\"},\"RoyaltiesRegistrySet(address)\":{\"notice\":\"event for when a royalties registry is set\"},\"TrustedForwarderSet(address,address,address)\":{\"notice\":\"Emitted when a `newTrustedForwarder` is set, replacing the `oldTrustedForwarder`\"}},\"kind\":\"user\",\"methods\":{\"ERC1776_OPERATOR_ROLE()\":{\"notice\":\"role erc1776 trusted meta transaction contracts (Sand for example).\"},\"EXCHANGE_ADMIN_ROLE()\":{\"notice\":\"role business addresses that can change for example: fees and royalties\"},\"PAUSER_ROLE()\":{\"notice\":\"role business addresses that can react on an emergency, pause\"},\"__Exchange_init(address,address,uint256,uint256,address,address,address)\":{\"notice\":\"Exchange contract initializer\"},\"cancel((address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes32)\":{\"notice\":\"cancel order\"},\"defaultFeeReceiver()\":{\"notice\":\"Default receiver of protocol fees\"},\"fills(bytes32)\":{\"notice\":\"stores the fills for orders\"},\"getTrustedForwarder()\":{\"notice\":\"return the address of the trusted forwarder\"},\"isTrustedForwarder(address)\":{\"notice\":\"return true if the forwarder is the trusted forwarder\"},\"matchOrders(((address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes,(address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes)[])\":{\"notice\":\"Match orders and transact\"},\"matchOrdersFrom(address,((address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes,(address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes)[])\":{\"notice\":\"Match orders and transact\"},\"orderValidator()\":{\"notice\":\"OrderValidator contract\"},\"protocolFeePrimary()\":{\"notice\":\"fee for primary sales\"},\"protocolFeeSecondary()\":{\"notice\":\"fee for secondary sales\"},\"royaltiesRegistry()\":{\"notice\":\"Registry for the different royalties\"},\"setDefaultFeeReceiver(address)\":{\"notice\":\"setter for default fee receiver\"},\"setOrderValidatorContract(address)\":{\"notice\":\"set OrderValidator address\"},\"setProtocolFee(uint256,uint256)\":{\"notice\":\"setter for protocol fees\"},\"setRoyaltiesRegistry(address)\":{\"notice\":\"setter for royalty registry\"},\"setTrustedForwarder(address)\":{\"notice\":\"Change the address of the trusted forwarder for meta-transactions\"},\"supportsInterface(bytes4)\":{\"notice\":\"See {IERC165-supportsInterface}.\"},\"unpause()\":{\"notice\":\"Returns to normal state.\"}},\"notice\":\"Used to exchange assets, that is, tokens.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@sandbox-smart-contracts/marketplace/contracts/exchange/Exchange.sol\":\"Exchange\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xfeefb24d068524440e1ba885efdf105d91f83504af3c2d745ffacc4595396831\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf51f292659a77777c0ed7375a39683d8bee53b86a6e7bd0c76f34ce7aa37a3a8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd60f939a3ca0199014d079b4dd66aa757954334947d81eb5c1d35d7a83061ab3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x23b997be73d3dd46885262704f0f8cfc7273fdadfe303d37969a9561373972b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xbe63437e37e32162d5d11ea8f11a44378c092b4bcbb05b51a813fe4bf33297d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/dependency-metatx/contracts/ERC2771HandlerAbstract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @dev minimal ERC2771 handler to keep bytecode-size down\\n/// based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/metatx/ERC2771Context.sol\\nabstract contract ERC2771HandlerAbstract {\\n    /// @notice return true if the forwarder is the trusted forwarder\\n    /// @param forwarder trusted forwarder address to check\\n    /// @return true if the address is the same as the trusted forwarder\\n    function isTrustedForwarder(address forwarder) external view returns (bool) {\\n        return _isTrustedForwarder(forwarder);\\n    }\\n\\n    /// @notice if the call is from the trusted forwarder the sender is extracted from calldata, msg.sender otherwise\\n    /// @return sender the calculated address of the sender\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (_isTrustedForwarder(msg.sender) && msg.data.length >= 20) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            sender = msg.sender;\\n        }\\n    }\\n\\n    /// @notice if the call is from the trusted forwarder the sender is removed from calldata\\n    /// @return the calldata without the sender\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (_isTrustedForwarder(msg.sender) && msg.data.length >= 20) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n\\n    /// @notice return true if the forwarder is the trusted forwarder\\n    /// @param forwarder trusted forwarder address to check\\n    /// @return true if the address is the same as the trusted forwarder\\n    /// @dev this function must be IMPLEMENTED\\n    function _isTrustedForwarder(address forwarder) internal view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0xc4f349865ea7146f51b69f1edacdef60e0a2a7cf4dab538a5ae53ee9a0036231\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/dependency-metatx/contracts/ERC2771HandlerUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {ERC2771HandlerAbstract} from \\\"./ERC2771HandlerAbstract.sol\\\";\\n\\n/// @dev minimal ERC2771 handler to keep bytecode-size down\\n/// based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/metatx/ERC2771Context.sol\\ncontract ERC2771HandlerUpgradeable is Initializable, ERC2771HandlerAbstract {\\n    address private _trustedForwarder;\\n\\n    /// @notice Emitted when a `newTrustedForwarder` is set, replacing the `oldTrustedForwarder`\\n    /// @param oldTrustedForwarder old trusted forwarder\\n    /// @param newTrustedForwarder new trusted forwarder\\n    /// @param operator the sender of the transaction\\n    event TrustedForwarderSet(\\n        address indexed oldTrustedForwarder,\\n        address indexed newTrustedForwarder,\\n        address indexed operator\\n    );\\n\\n    /// @notice initialize the trusted forwarder address\\n    /// @param forwarder trusted forwarder address or zero to disable it\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __ERC2771Handler_init(address forwarder) internal onlyInitializing {\\n        __ERC2771Handler_init_unchained(forwarder);\\n    }\\n\\n    /// @notice initialize the trusted forwarder address\\n    /// @param forwarder trusted forwarder address or zero to disable it\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __ERC2771Handler_init_unchained(address forwarder) internal onlyInitializing {\\n        _setTrustedForwarder(forwarder);\\n    }\\n\\n    /// @notice return the address of the trusted forwarder\\n    /// @return return the address of the trusted forwarder\\n    function getTrustedForwarder() external view returns (address) {\\n        return _trustedForwarder;\\n    }\\n\\n    /// @notice set the address of the trusted forwarder\\n    /// @param newForwarder the address of the new forwarder.\\n    function _setTrustedForwarder(address newForwarder) internal virtual {\\n        require(newForwarder != _trustedForwarder, \\\"forwarder already set\\\");\\n        emit TrustedForwarderSet(_trustedForwarder, newForwarder, _msgSender());\\n        _trustedForwarder = newForwarder;\\n    }\\n\\n    /// @notice return true if the forwarder is the trusted forwarder\\n    /// @param forwarder trusted forwarder address to check\\n    /// @return true if the address is the same as the trusted forwarder\\n    function _isTrustedForwarder(address forwarder) internal view virtual override returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    /// @notice if the call is from the trusted forwarder the sender is extracted from calldata, msg.sender otherwise\\n    /// @return sender the calculated address of the sender\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        return super._msgSender();\\n    }\\n\\n    /// @notice if the call is from the trusted forwarder the sender is removed from calldata\\n    /// @return the calldata without the sender\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        return super._msgData();\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xa845151230d9973663a800142e26d8d879688382a552d5e74c0dd271aeeaf68b\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/marketplace/contracts/exchange/Exchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.21;\\n\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {AccessControlUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport {ContextUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {ERC2771HandlerUpgradeable} from \\\"@sandbox-smart-contracts/dependency-metatx/contracts/ERC2771HandlerUpgradeable.sol\\\";\\nimport {IOrderValidator} from \\\"../interfaces/IOrderValidator.sol\\\";\\nimport {TransferManager, IRoyaltiesProvider} from \\\"../transfer-manager/TransferManager.sol\\\";\\nimport {LibOrder} from \\\"../lib-order/LibOrder.sol\\\";\\nimport {ExchangeCore} from \\\"./ExchangeCore.sol\\\";\\n\\n/// @title Exchange contract with meta transactions\\n/// @notice Used to exchange assets, that is, tokens.\\n/// @dev Main functions are in ExchangeCore\\n/// @dev TransferManager is used to execute token transfers\\ncontract Exchange is\\n    Initializable,\\n    AccessControlUpgradeable,\\n    ExchangeCore,\\n    TransferManager,\\n    ERC2771HandlerUpgradeable,\\n    PausableUpgradeable\\n{\\n    /// @notice role erc1776 trusted meta transaction contracts (Sand for example).\\n    /// @return hash for ERC1776_OPERATOR_ROLE\\n    bytes32 public constant ERC1776_OPERATOR_ROLE = keccak256(\\\"ERC1776_OPERATOR_ROLE\\\");\\n\\n    /// @notice role business addresses that can change for example: fees and royalties\\n    /// @return hash for EXCHANGE_ADMIN_ROLE\\n    bytes32 public constant EXCHANGE_ADMIN_ROLE = keccak256(\\\"EXCHANGE_ADMIN_ROLE\\\");\\n\\n    /// @notice role business addresses that can react on an emergency, pause\\n    /// @return hash for PAUSER_ROLE\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    /// @dev this protects the implementation contract from being initialized.\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Exchange contract initializer\\n    /// @param admin the admin user that can grant/revoke roles, etc.\\n    /// @param newTrustedForwarder address for trusted forwarder that will execute meta transactions\\n    /// @param newProtocolFeePrimary protocol fee applied for primary markets\\n    /// @param newProtocolFeeSecondary protocol fee applied for secondary markets\\n    /// @param newDefaultFeeReceiver market fee receiver\\n    /// @param newRoyaltiesProvider registry for the different types of royalties\\n    /// @param orderValidatorAddress new OrderValidator contract address\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __Exchange_init(\\n        address admin,\\n        address newTrustedForwarder,\\n        uint256 newProtocolFeePrimary,\\n        uint256 newProtocolFeeSecondary,\\n        address newDefaultFeeReceiver,\\n        IRoyaltiesProvider newRoyaltiesProvider,\\n        IOrderValidator orderValidatorAddress\\n    ) external initializer {\\n        __ERC2771Handler_init_unchained(newTrustedForwarder);\\n        __AccessControl_init_unchained();\\n        __Pausable_init_unchained();\\n        __TransferManager_init_unchained(\\n            newProtocolFeePrimary,\\n            newProtocolFeeSecondary,\\n            newDefaultFeeReceiver,\\n            newRoyaltiesProvider\\n        );\\n        __ExchangeCoreInitialize(orderValidatorAddress);\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\\n    }\\n\\n    /// @notice Match orders and transact\\n    /// @param matchedOrders a list of left/right orders that match each other\\n    function matchOrders(ExchangeMatch[] calldata matchedOrders) external whenNotPaused {\\n        _matchOrders(_msgSender(), matchedOrders);\\n    }\\n\\n    /// @notice Match orders and transact\\n    /// @param sender the original sender of the transaction\\n    /// @param matchedOrders a list of left/right orders that match each other\\n    function matchOrdersFrom(\\n        address sender,\\n        ExchangeMatch[] calldata matchedOrders\\n    ) external onlyRole(ERC1776_OPERATOR_ROLE) whenNotPaused {\\n        require(sender != address(0), \\\"invalid sender\\\");\\n        _matchOrders(sender, matchedOrders);\\n    }\\n\\n    /// @notice cancel order\\n    /// @param order to be canceled\\n    /// @param orderKeyHash used as a checksum to avoid mistakes in the values of order\\n    /// @dev require msg sender to be order maker and salt different from 0\\n    function cancel(LibOrder.Order calldata order, bytes32 orderKeyHash) external whenNotPaused {\\n        require(_msgSender() == order.maker, \\\"ExchangeCore: not maker\\\");\\n        _cancel(order, orderKeyHash);\\n    }\\n\\n    /// @notice setter for royalty registry\\n    /// @param newRoyaltiesRegistry address of new royalties registry\\n    function setRoyaltiesRegistry(IRoyaltiesProvider newRoyaltiesRegistry) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _setRoyaltiesRegistry(newRoyaltiesRegistry);\\n    }\\n\\n    /// @notice set OrderValidator address\\n    /// @param contractAddress new OrderValidator contract address\\n    function setOrderValidatorContract(IOrderValidator contractAddress) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _setOrderValidatorContract(contractAddress);\\n    }\\n\\n    /// @notice Change the address of the trusted forwarder for meta-transactions\\n    /// @param newTrustedForwarder The new trustedForwarder\\n    function setTrustedForwarder(address newTrustedForwarder) external virtual onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _setTrustedForwarder(newTrustedForwarder);\\n    }\\n\\n    /// @notice setter for protocol fees\\n    /// @param newProtocolFeePrimary fee for primary market\\n    /// @param newProtocolFeeSecondary fee for secondary market\\n    function setProtocolFee(\\n        uint256 newProtocolFeePrimary,\\n        uint256 newProtocolFeeSecondary\\n    ) external onlyRole(EXCHANGE_ADMIN_ROLE) {\\n        _setProtocolFee(newProtocolFeePrimary, newProtocolFeeSecondary);\\n    }\\n\\n    /// @notice setter for default fee receiver\\n    /// @param newDefaultFeeReceiver address that gets the fees\\n    function setDefaultFeeReceiver(address newDefaultFeeReceiver) external onlyRole(EXCHANGE_ADMIN_ROLE) {\\n        _setDefaultFeeReceiver(newDefaultFeeReceiver);\\n    }\\n\\n    // @notice Triggers stopped state.\\n    function pause() external onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    /// @notice Returns to normal state.\\n    function unpause() external onlyRole(EXCHANGE_ADMIN_ROLE) {\\n        _unpause();\\n    }\\n\\n    /// @notice See {IERC165-supportsInterface}.\\n    /// @param interfaceId interface id to check\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC165Upgradeable, AccessControlUpgradeable) returns (bool) {\\n        return\\n            ERC165Upgradeable.supportsInterface(interfaceId) || AccessControlUpgradeable.supportsInterface(interfaceId);\\n    }\\n\\n    /// @dev Apply the fees & royalties only for users NOT granted with the role EXCHANGE_ADMIN_ROLE\\n    /// @param from address to check\\n    function _applyFees(address from) internal view override returns (bool) {\\n        return !hasRole(EXCHANGE_ADMIN_ROLE, from);\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override(ContextUpgradeable, ERC2771HandlerUpgradeable)\\n        returns (address)\\n    {\\n        return ERC2771HandlerUpgradeable._msgSender();\\n    }\\n\\n    function _msgData() internal view override(ContextUpgradeable, ERC2771HandlerUpgradeable) returns (bytes calldata) {\\n        return ERC2771HandlerUpgradeable._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0x08ff3275e05bd82e1dee16d90a0988364ab114ab266e9f460bd8142ee29c15b0\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/marketplace/contracts/exchange/ExchangeCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.21;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {LibFill} from \\\"./libraries/LibFill.sol\\\";\\nimport {TransferExecutor} from \\\"../transfer-manager/TransferExecutor.sol\\\";\\nimport {LibAsset} from \\\"../lib-asset/LibAsset.sol\\\";\\nimport {LibOrder} from \\\"../lib-order/LibOrder.sol\\\";\\nimport {LibPart} from \\\"../lib-part/LibPart.sol\\\";\\nimport {ITransferManager} from \\\"../transfer-manager/interfaces/ITransferManager.sol\\\";\\nimport {IOrderValidator} from \\\"../interfaces/IOrderValidator.sol\\\";\\n\\n/// @notice ExchangeCore contract\\n/// @dev contains the main functions for the marketplace\\nabstract contract ExchangeCore is Initializable, TransferExecutor, ITransferManager {\\n    // a list of left/right orders that match each other\\n    // left and right are symmetrical except for fees that are taken from left side first.\\n    struct ExchangeMatch {\\n        LibOrder.Order orderLeft; // left order\\n        bytes signatureLeft; // signature for the left order\\n        LibOrder.Order orderRight; // right order\\n        bytes signatureRight; // signature for the right order\\n    }\\n\\n    /// @notice OrderValidator contract\\n    /// @return OrderValidator address\\n    IOrderValidator public orderValidator;\\n\\n    uint256 private constant UINT256_MAX = type(uint256).max;\\n\\n    /// @notice stores the fills for orders\\n    /// @return order fill\\n    mapping(bytes32 => uint256) public fills;\\n\\n    /// @notice event signaling that an order was canceled\\n    /// @param  hash order hash\\n    event Cancel(bytes32 indexed hash, LibOrder.Order order);\\n\\n    /*     /// @notice event when orders match\\n    /// @param from _msgSender\\n    /// @param leftHash left order hash\\n    /// @param rightHash right order hash\\n    /// @param newLeftFill fill for left order\\n    /// @param newRightFill fill for right order\\n    /// @param totalFillLeft total fill left\\n    /// @param totalFillRight total fill right */\\n    event Match(\\n        address indexed from,\\n        bytes32 leftHash,\\n        bytes32 rightHash,\\n        LibFill.FillResult newFill,\\n        uint256 totalFillLeft,\\n        uint256 totalFillRight,\\n        uint256 valueLeft,\\n        uint256 valueRight\\n    );\\n    event OrderValidatorSet(IOrderValidator indexed contractAddress);\\n\\n    /// @notice initializer for ExchangeCore\\n    /// @param newOrderValidatorAddress new OrderValidator contract address\\n    /// @dev initialize permissions for native token exchange\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __ExchangeCoreInitialize(IOrderValidator newOrderValidatorAddress) internal onlyInitializing {\\n        _setOrderValidatorContract(newOrderValidatorAddress);\\n    }\\n\\n    /// @notice set OrderValidator address\\n    /// @param contractAddress new OrderValidator contract address\\n    function _setOrderValidatorContract(IOrderValidator contractAddress) internal {\\n        require(address(contractAddress) != address(0), \\\"invalid order validator\\\");\\n        orderValidator = contractAddress;\\n        emit OrderValidatorSet(contractAddress);\\n    }\\n\\n    /// @notice cancel order\\n    /// @param order to be canceled\\n    /// @param orderKeyHash used as a checksum to avoid mistakes in the values of order\\n    /// @dev require msg sender to be order maker and salt different from 0\\n    function _cancel(LibOrder.Order calldata order, bytes32 orderKeyHash) internal {\\n        require(order.salt != 0, \\\"ExchangeCore: 0 salt can't be used\\\");\\n        bytes32 _orderKeyHash = LibOrder.hashKey(order);\\n        require(_orderKeyHash == orderKeyHash, \\\"ExchangeCore: Invalid orderHash\\\");\\n        fills[orderKeyHash] = UINT256_MAX;\\n        emit Cancel(orderKeyHash, order);\\n    }\\n\\n    /// @notice Match orders and transact\\n    /// @param sender the original sender of the transaction\\n    /// @param matchedOrders a list of left/right orders that match each other\\n    /// @dev validate orders through validateOrders before matchAndTransfer\\n    function _matchOrders(address sender, ExchangeMatch[] calldata matchedOrders) internal {\\n        uint256 len = matchedOrders.length;\\n        require(len > 0, \\\"invalid exchange match\\\");\\n        for (uint256 i; i < len; i++) {\\n            ExchangeMatch calldata m = matchedOrders[i];\\n            _validateOrders(sender, m.orderLeft, m.signatureLeft, m.orderRight, m.signatureRight);\\n            _matchAndTransfer(sender, m.orderLeft, m.orderRight);\\n        }\\n    }\\n\\n    /// @dev function, validate orders\\n    /// @param sender the message sender\\n    /// @param orderLeft left order\\n    /// @param signatureLeft order left signature\\n    /// @param orderRight right order\\n    /// @param signatureRight order right signature\\n    function _validateOrders(\\n        address sender,\\n        LibOrder.Order memory orderLeft,\\n        bytes memory signatureLeft,\\n        LibOrder.Order memory orderRight,\\n        bytes memory signatureRight\\n    ) internal view {\\n        // validate must force order.maker != address(0)\\n        orderValidator.validate(orderLeft, signatureLeft, sender);\\n        orderValidator.validate(orderRight, signatureRight, sender);\\n        if (orderLeft.taker != address(0)) {\\n            require(orderRight.maker == orderLeft.taker, \\\"leftOrder.taker failed\\\");\\n        }\\n        if (orderRight.taker != address(0)) {\\n            require(orderRight.taker == orderLeft.maker, \\\"rightOrder.taker failed\\\");\\n        }\\n    }\\n\\n    /// @notice matches valid orders and transfers their assets\\n    /// @param sender the message sender\\n    /// @param orderLeft the left order of the match\\n    /// @param orderRight the right order of the match\\n    function _matchAndTransfer(\\n        address sender,\\n        LibOrder.Order calldata orderLeft,\\n        LibOrder.Order calldata orderRight\\n    ) internal {\\n        LibAsset.AssetType memory makeMatch = LibAsset.matchAssets(\\n            orderLeft.makeAsset.assetType,\\n            orderRight.takeAsset.assetType\\n        );\\n        LibAsset.AssetType memory takeMatch = LibAsset.matchAssets(\\n            orderLeft.takeAsset.assetType,\\n            orderRight.makeAsset.assetType\\n        );\\n\\n        LibFill.FillResult memory newFill = _parseOrdersSetFillEmitMatch(sender, orderLeft, orderRight);\\n\\n        doTransfers(\\n            ITransferManager.DealSide({\\n                asset: LibAsset.Asset({assetType: makeMatch, value: newFill.leftValue}),\\n                payouts: _payToMaker(orderLeft),\\n                from: orderLeft.maker\\n            }),\\n            ITransferManager.DealSide({\\n                asset: LibAsset.Asset(takeMatch, newFill.rightValue),\\n                payouts: _payToMaker(orderRight),\\n                from: orderRight.maker\\n            }),\\n            LibAsset.getFeeSide(makeMatch.assetClass, takeMatch.assetClass)\\n        );\\n    }\\n\\n    /// @notice create a payout array that pays to maker 100%\\n    /// @param order the order from which the maker is taken\\n    /// @return an array with just one entry that pays to order.maker\\n    function _payToMaker(LibOrder.Order memory order) internal pure returns (LibPart.Part[] memory) {\\n        LibPart.Part[] memory payout = new LibPart.Part[](1);\\n        payout[0].account = order.maker;\\n        payout[0].value = 10000;\\n        return payout;\\n    }\\n\\n    /// @notice parse orders with LibOrderDataGeneric parse() to get the order data, then create a new fill with setFillEmitMatch()\\n    /// @param sender the message sender\\n    /// @param orderLeft left order\\n    /// @param orderRight right order\\n    /// @return newFill fill result\\n    function _parseOrdersSetFillEmitMatch(\\n        address sender,\\n        LibOrder.Order calldata orderLeft,\\n        LibOrder.Order calldata orderRight\\n    ) internal returns (LibFill.FillResult memory newFill) {\\n        bytes32 leftOrderKeyHash = LibOrder.hashKey(orderLeft);\\n        bytes32 rightOrderKeyHash = LibOrder.hashKey(orderRight);\\n\\n        uint256 leftOrderFill = _getOrderFill(orderLeft.salt, leftOrderKeyHash);\\n        uint256 rightOrderFill = _getOrderFill(orderRight.salt, rightOrderKeyHash);\\n        newFill = LibFill.fillOrder(orderLeft, orderRight, leftOrderFill, rightOrderFill);\\n\\n        require(newFill.rightValue > 0 && newFill.leftValue > 0, \\\"nothing to fill\\\");\\n\\n        if (orderLeft.salt != 0) {\\n            fills[leftOrderKeyHash] = leftOrderFill + newFill.rightValue;\\n        }\\n\\n        if (orderRight.salt != 0) {\\n            fills[rightOrderKeyHash] = rightOrderFill + newFill.leftValue;\\n        }\\n\\n        emit Match({\\n            from: sender,\\n            leftHash: leftOrderKeyHash,\\n            rightHash: rightOrderKeyHash,\\n            newFill: newFill,\\n            totalFillLeft: fills[leftOrderKeyHash],\\n            totalFillRight: fills[rightOrderKeyHash],\\n            valueLeft: orderLeft.makeAsset.value,\\n            valueRight: orderRight.makeAsset.value\\n        });\\n        return newFill;\\n    }\\n\\n    /// @notice return fill corresponding to order hash\\n    /// @param salt if salt 0, fill = 0\\n    /// @param hash order hash\\n    function _getOrderFill(uint256 salt, bytes32 hash) internal view returns (uint256 fill) {\\n        if (salt == 0) {\\n            fill = 0;\\n        } else {\\n            fill = fills[hash];\\n        }\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x3822ff5d3ed09f2a912bba0e6817a706371cd0d7d7a3cdc276791901133723aa\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/marketplace/contracts/exchange/libraries/LibFill.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\nimport {LibOrder} from \\\"../../lib-order/LibOrder.sol\\\";\\nimport {LibMath} from \\\"./LibMath.sol\\\";\\n\\n/// @title This library provides `fillOrder` function.\\n/// @notice It calculates fill of both orders (part of the Order that can be filled).\\nlibrary LibFill {\\n    struct FillResult {\\n        uint256 leftValue;\\n        uint256 rightValue;\\n    }\\n\\n    /// @notice Should return filled values\\n    /// @param leftOrder left order\\n    /// @param rightOrder right order\\n    /// @param leftOrderFill current fill of the left order (0 if order is unfilled)\\n    /// @param rightOrderFill current fill of the right order (0 if order is unfilled)\\n    /// @dev We have 3 cases, 1st: left order should be fully filled\\n    /// @dev 2nd: right order should be fully filled or 3d: both should be fully filled if required values are the same\\n    /// @return the fill result of both orders\\n    function fillOrder(\\n        LibOrder.Order calldata leftOrder,\\n        LibOrder.Order calldata rightOrder,\\n        uint256 leftOrderFill,\\n        uint256 rightOrderFill\\n    ) internal pure returns (FillResult memory) {\\n        (uint256 leftMakeValue, uint256 leftTakeValue) = calculateRemaining(leftOrder, leftOrderFill);\\n        (uint256 rightMakeValue, uint256 rightTakeValue) = calculateRemaining(rightOrder, rightOrderFill);\\n\\n        if (rightTakeValue > leftMakeValue) {\\n            return fillLeft(leftMakeValue, leftTakeValue, rightOrder.makeAsset.value, rightOrder.takeAsset.value);\\n        }\\n        return fillRight(leftOrder.makeAsset.value, leftOrder.takeAsset.value, rightMakeValue, rightTakeValue);\\n    }\\n\\n    /// @notice calculate the remaining fill from orders\\n    /// @param order order that we will calculate the remaining fill\\n    /// @param fill to be subtracted\\n    /// @return makeValue remaining fill from make side\\n    /// @return takeValue remaining fill from take side\\n    function calculateRemaining(\\n        LibOrder.Order calldata order,\\n        uint256 fill\\n    ) internal pure returns (uint256 makeValue, uint256 takeValue) {\\n        takeValue = order.takeAsset.value - fill;\\n        makeValue = LibMath.safeGetPartialAmountFloor(order.makeAsset.value, order.takeAsset.value, takeValue);\\n    }\\n\\n    function fillRight(\\n        uint256 leftMakeValue,\\n        uint256 leftTakeValue,\\n        uint256 rightMakeValue,\\n        uint256 rightTakeValue\\n    ) internal pure returns (FillResult memory result) {\\n        uint256 makerValue = LibMath.safeGetPartialAmountFloor(rightTakeValue, leftMakeValue, leftTakeValue);\\n        require(makerValue <= rightMakeValue, \\\"fillRight: unable to fill\\\");\\n        return FillResult(rightTakeValue, makerValue);\\n    }\\n\\n    function fillLeft(\\n        uint256 leftMakeValue,\\n        uint256 leftTakeValue,\\n        uint256 rightMakeValue,\\n        uint256 rightTakeValue\\n    ) internal pure returns (FillResult memory result) {\\n        uint256 rightTake = LibMath.safeGetPartialAmountFloor(leftTakeValue, rightMakeValue, rightTakeValue);\\n        require(rightTake <= leftMakeValue, \\\"fillLeft: unable to fill\\\");\\n        return FillResult(leftMakeValue, leftTakeValue);\\n    }\\n}\\n\",\"keccak256\":\"0x90e836be08c3e1962c1bd0512690aafde814abfb59edc07f2f0f7bfe96a0d86f\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/marketplace/contracts/exchange/libraries/LibMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.21;\\n\\nlibrary LibMath {\\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\\n    ///      Reverts if rounding error is >= 0.1%\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to calculate partial of.\\n    /// @return partialAmount value of target rounded down.\\n    function safeGetPartialAmountFloor(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (uint256 partialAmount) {\\n        if (isRoundingErrorFloor(numerator, denominator, target)) {\\n            revert(\\\"rounding error\\\");\\n        }\\n        partialAmount = (numerator * target) / (denominator);\\n    }\\n\\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to multiply with numerator/denominator.\\n    /// @return isError Rounding error is present.\\n    function isRoundingErrorFloor(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (bool isError) {\\n        if (denominator == 0) {\\n            revert(\\\"division by zero\\\");\\n        }\\n\\n        // The absolute rounding error is the difference between the rounded\\n        // value and the ideal value. The relative rounding error is the\\n        // absolute rounding error divided by the absolute value of the\\n        // ideal value. This is undefined when the ideal value is zero.\\n        //\\n        // The ideal value is `numerator * target / denominator`.\\n        // Let's call `numerator * target % denominator` the remainder.\\n        // The absolute error is `remainder / denominator`.\\n        //\\n        // When the ideal value is zero, we require the absolute error to\\n        // be zero. Fortunately, this is always the case. The ideal value is\\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\\n        // remainder and absolute error are also zero.\\n        if (target == 0 || numerator == 0) {\\n            return false;\\n        }\\n\\n        // Otherwise, we want the relative rounding error to be strictly\\n        // less than 0.1%.\\n        // The relative error is `remainder / (numerator * target)`.\\n        // We want the relative error less than 1 / 1000:\\n        //        remainder / (numerator * target)  <  1 / 1000\\n        // or equivalently:\\n        //        1000 * remainder  <  numerator * target\\n        // so we have a rounding error iff:\\n        //        1000 * remainder  >=  numerator * target\\n        uint256 remainder = mulmod(target, numerator, denominator);\\n        isError = remainder * 1000 >= numerator * target;\\n    }\\n\\n    function safeGetPartialAmountCeil(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (uint256 partialAmount) {\\n        if (isRoundingErrorCeil(numerator, denominator, target)) {\\n            revert(\\\"rounding error\\\");\\n        }\\n        partialAmount = (numerator * target) + ((denominator - 1) / denominator);\\n    }\\n\\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to multiply with numerator/denominator.\\n    /// @return isError Rounding error is present.\\n    function isRoundingErrorCeil(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (bool isError) {\\n        if (denominator == 0) {\\n            revert(\\\"division by zero\\\");\\n        }\\n\\n        // See the comments in `isRoundingError`.\\n        if (target == 0 || numerator == 0) {\\n            // When either is zero, the ideal value and rounded value are zero\\n            // and there is no rounding error. (Although the relative error\\n            // is undefined.)\\n            return false;\\n        }\\n        // Compute remainder as before\\n        uint256 remainder = mulmod(target, numerator, denominator);\\n        remainder = (denominator - remainder) % denominator;\\n        isError = remainder * 1000 >= numerator * target;\\n        return isError;\\n    }\\n}\\n\",\"keccak256\":\"0x96084fee756acfb3191a02bfbab20a8ed57024745cf95b482994f9fe0e4192c7\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/marketplace/contracts/interfaces/IOrderValidator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.21;\\n\\nimport {LibOrder} from \\\"../lib-order/LibOrder.sol\\\";\\n\\n/// @title interface for the OrderValidator contract\\n/// @notice contains the signature for validate, isPurchaseValid and verifyERC20Whitelist functions\\ninterface IOrderValidator {\\n    /// @notice verifies order\\n    /// @param order order to be validated\\n    /// @param signature signature of order\\n    /// @param sender order sender\\n    function validate(LibOrder.Order memory order, bytes memory signature, address sender) external view;\\n}\\n\",\"keccak256\":\"0x34124715b819920ce2eb56b14284a1e4a682740dbf8d40497c7d953faf3c6b58\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/marketplace/contracts/interfaces/IRoyaltiesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.21;\\n\\nimport {LibPart} from \\\"../lib-part/LibPart.sol\\\";\\n\\n/// @title interface for the RoyaltiesProvider contract\\n/// @notice contains the signature for the getRoyalties function\\ninterface IRoyaltiesProvider {\\n    /// @notice calculates all roaylties in token for tokenId\\n    /// @param token address of token\\n    /// @param tokenId of the token we want to calculate royalites\\n    /// @return a LibPart.Part with allroyalties for token\\n    function getRoyalties(address token, uint256 tokenId) external returns (LibPart.Part[] memory);\\n}\\n\",\"keccak256\":\"0x86bc8bca3b5cab3a6e0ce9f41a3f8e89d0fc8e19e143fcac1b5b8e3cb4e0c994\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/marketplace/contracts/lib-asset/LibAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.21;\\n\\n/// @title library for Assets\\n/// @notice contains structs for Asset and AssetType\\nlibrary LibAsset {\\n    enum AssetClassType {\\n        INVALID_ASSET_CLASS,\\n        ERC20_ASSET_CLASS,\\n        ERC721_ASSET_CLASS,\\n        ERC1155_ASSET_CLASS\\n    }\\n\\n    enum FeeSide {\\n        NONE,\\n        LEFT,\\n        RIGHT\\n    }\\n\\n    /// @dev AssetType is a type of a specific asset. For example AssetType is specific ERC-721 token (key is token + tokenId) or specific ERC-20 token (DAI for example).\\n    /// @dev It consists of asset class and generic data (format of data is different for different asset classes). For example, for asset class ERC20 data holds address of the token, for ERC-721 data holds smart contract address and tokenId.\\n    struct AssetType {\\n        AssetClassType assetClass;\\n        bytes data;\\n    }\\n\\n    /// @dev Asset represents any asset on ethereum blockchain. Asset has type and value (amount of an asset).\\n    struct Asset {\\n        AssetType assetType;\\n        uint256 value;\\n    }\\n\\n    bytes32 internal constant ASSET_TYPE_TYPEHASH = keccak256(\\\"AssetType(uint256 assetClass,bytes data)\\\");\\n\\n    bytes32 internal constant ASSET_TYPEHASH =\\n        keccak256(\\\"Asset(AssetType assetType,uint256 value)AssetType(uint256 assetClass,bytes data)\\\");\\n\\n    /// @notice decides if the fees will be taken and from which side\\n    /// @param leftClass left side asset class type\\n    /// @param rightClass right side asset class type\\n    /// @return side from which the fees will be taken or none\\n    function getFeeSide(AssetClassType leftClass, AssetClassType rightClass) internal pure returns (FeeSide) {\\n        if (leftClass == AssetClassType.ERC20_ASSET_CLASS && rightClass != AssetClassType.ERC20_ASSET_CLASS) {\\n            return FeeSide.LEFT;\\n        }\\n        if (rightClass == AssetClassType.ERC20_ASSET_CLASS && leftClass != AssetClassType.ERC20_ASSET_CLASS) {\\n            return FeeSide.RIGHT;\\n        }\\n        return FeeSide.NONE;\\n    }\\n\\n    /// @notice calculate if Asset types match with each other\\n    /// @param leftType to be matched with rightAssetType\\n    /// @param rightType to be matched with leftAssetType\\n    /// @return AssetType of the match\\n    function matchAssets(\\n        AssetType calldata leftType,\\n        AssetType calldata rightType\\n    ) internal pure returns (AssetType memory) {\\n        AssetClassType classLeft = leftType.assetClass;\\n        AssetClassType classRight = rightType.assetClass;\\n\\n        require(classLeft != AssetClassType.INVALID_ASSET_CLASS, \\\"not found IAssetMatcher\\\");\\n        require(classRight != AssetClassType.INVALID_ASSET_CLASS, \\\"not found IAssetMatcher\\\");\\n        require(classLeft == classRight, \\\"assets don't match\\\");\\n\\n        bytes32 leftHash = keccak256(leftType.data);\\n        bytes32 rightHash = keccak256(rightType.data);\\n        require(leftHash == rightHash, \\\"assets don't match\\\");\\n\\n        return leftType;\\n    }\\n\\n    /// @notice calculate hash of asset type\\n    /// @param assetType to be hashed\\n    /// @return hash of assetType\\n    function hash(AssetType memory assetType) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(ASSET_TYPE_TYPEHASH, assetType.assetClass, keccak256(assetType.data)));\\n    }\\n\\n    ///    @notice calculate hash of asset\\n    ///    @param asset to be hashed\\n    ///    @return hash of asset\\n    function hash(Asset memory asset) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(ASSET_TYPEHASH, hash(asset.assetType), asset.value));\\n    }\\n}\\n\",\"keccak256\":\"0x2c5763a98a7e6c6d0b03a515a6e43f0cec72772c10f016426585906d936d4caa\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/marketplace/contracts/lib-bp/BpLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.21;\\n\\n/// @title library for Base Point calculation\\n/// @notice contains a method for basepoint calculation\\nlibrary BpLibrary {\\n    /// @notice basepoint calculation\\n    /// @param value value to be multiplied by basepoint\\n    /// @param bpValue basepoint value\\n    /// @return value times basepoint divided by 10000\\n    function bp(uint256 value, uint256 bpValue) internal pure returns (uint256) {\\n        return (value * bpValue) / 10000;\\n    }\\n}\\n\",\"keccak256\":\"0x6a19a7c68e7f3189e287082a3235733f7831a8a848907bbe3e600dcbaa6298cc\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/marketplace/contracts/lib-order/LibOrder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.21;\\n\\nimport {LibAsset} from \\\"../lib-asset/LibAsset.sol\\\";\\n\\n/// @title library for Order\\n/// @notice contains structs and functions related to Order\\nlibrary LibOrder {\\n    bytes32 internal constant ORDER_TYPEHASH =\\n        keccak256(\\n            \\\"Order(address maker,Asset makeAsset,address taker,Asset takeAsset,uint256 salt,uint256 start,uint256 end)Asset(AssetType assetType,uint256 value)AssetType(uint256 assetClass,bytes data)\\\"\\n        );\\n\\n    struct Order {\\n        address maker;\\n        LibAsset.Asset makeAsset;\\n        address taker;\\n        LibAsset.Asset takeAsset;\\n        uint256 salt;\\n        uint256 start;\\n        uint256 end;\\n    }\\n\\n    /// @notice calculate hash key from order\\n    /// @param order object to be hashed\\n    /// @return hash key of order\\n    function hashKey(Order calldata order) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    order.maker,\\n                    LibAsset.hash(order.makeAsset.assetType),\\n                    LibAsset.hash(order.takeAsset.assetType),\\n                    order.salt\\n                )\\n            );\\n    }\\n\\n    /// @notice calculate hash from order\\n    /// @param order object to be hashed\\n    /// @return hash of order\\n    function hash(Order calldata order) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                // solhint-disable-next-line func-named-parameters\\n                abi.encode(\\n                    ORDER_TYPEHASH,\\n                    order.maker,\\n                    LibAsset.hash(order.makeAsset),\\n                    order.taker,\\n                    LibAsset.hash(order.takeAsset),\\n                    order.salt,\\n                    order.start,\\n                    order.end\\n                )\\n            );\\n    }\\n\\n    /// @notice validates order time\\n    /// @param order whose time we want to validate\\n    function validateOrderTime(Order memory order) internal view {\\n        // solhint-disable-next-line not-rely-on-time\\n        require(order.start == 0 || order.start < block.timestamp, \\\"Order start validation failed\\\");\\n        // solhint-disable-next-line not-rely-on-time\\n        require(order.end == 0 || order.end > block.timestamp, \\\"Order end validation failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x9481748b6eb6d584e313c42049812226200a26e2e6861e62e9d8f9a72ce1d4a1\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/marketplace/contracts/lib-part/LibPart.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.21;\\n\\n/// @title library for parts of transaction fees\\n/// @notice contains the struct for Part, containing the fee recipient and value\\nlibrary LibPart {\\n    /// @notice type hash of Part struct\\n    /// @return hash of Part struct\\n    bytes32 public constant TYPE_HASH = keccak256(\\\"Part(address account,uint96 value)\\\");\\n\\n    struct Part {\\n        address account;\\n        uint96 value;\\n    }\\n\\n    /// @notice hash part object\\n    /// @param part to be hashed\\n    /// @return resulting hash\\n    function hash(Part memory part) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, part.account, part.value));\\n    }\\n}\\n\",\"keccak256\":\"0xe5688703d282c860c702f436bff69206520899860c958bd6e2b442d467e6219e\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/marketplace/contracts/transfer-manager/TransferExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.21;\\n\\nimport {SafeERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {IERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport {IERC1155Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {LibAsset} from \\\"../lib-asset/LibAsset.sol\\\";\\nimport {ITransferExecutor} from \\\"./interfaces/ITransferExecutor.sol\\\";\\n\\n/// @title abstract contract for TransferExecutor\\n/// @notice contains transfer functions for any assets as well as ERC20 tokens\\nabstract contract TransferExecutor is Initializable, ITransferExecutor {\\n    /// @notice function should be able to transfer any supported Asset\\n    /// @param asset Asset to be transferred\\n    /// @param from account holding the asset\\n    /// @param to account that will receive the asset\\n    function transfer(LibAsset.Asset memory asset, address from, address to) internal override {\\n        if (asset.assetType.assetClass == LibAsset.AssetClassType.ERC721_ASSET_CLASS) {\\n            //not using transfer proxy when transferring from this contract\\n            (address token, uint256 tokenId) = abi.decode(asset.assetType.data, (address, uint256));\\n            require(asset.value == 1, \\\"erc721 value error\\\");\\n            erc721safeTransferFrom(IERC721Upgradeable(token), from, to, tokenId);\\n        } else if (asset.assetType.assetClass == LibAsset.AssetClassType.ERC20_ASSET_CLASS) {\\n            //not using transfer proxy when transferring from this contract\\n            address token = abi.decode(asset.assetType.data, (address));\\n            SafeERC20Upgradeable.safeTransferFrom(IERC20Upgradeable(token), from, to, asset.value);\\n        } else if (asset.assetType.assetClass == LibAsset.AssetClassType.ERC1155_ASSET_CLASS) {\\n            //not using transfer proxy when transferring from this contract\\n            (address token, uint256 tokenId) = abi.decode(asset.assetType.data, (address, uint256));\\n            erc1155safeTransferFrom(IERC1155Upgradeable(token), from, to, tokenId, asset.value, \\\"\\\");\\n        }\\n    }\\n\\n    /// @notice function for safe transfer of ERC721 tokens\\n    /// @param token ERC721 token to be transferred\\n    /// @param from address from which token will be taken\\n    /// @param to address that will receive token\\n    /// @param tokenId id of the token being transferred\\n    function erc721safeTransferFrom(IERC721Upgradeable token, address from, address to, uint256 tokenId) internal {\\n        token.safeTransferFrom(from, to, tokenId);\\n    }\\n\\n    /// @notice function for safe transfer of ERC1155 tokens\\n    /// @param token ERC1155 token to be transferred\\n    /// @param from address from which tokens will be taken\\n    /// @param to address that will receive tokens\\n    /// @param id id of the tokens being transferred\\n    /// @param value how many tokens will be transferred\\n    function erc1155safeTransferFrom(\\n        IERC1155Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        token.safeTransferFrom(from, to, id, value, data);\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2721a48e6da931828020d97272029d89bb98af0f187c71cf4c78b2e8d255749a\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/marketplace/contracts/transfer-manager/TransferManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.21;\\n\\nimport {ERC165Upgradeable, IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {IRoyaltiesProvider} from \\\"../interfaces/IRoyaltiesProvider.sol\\\";\\nimport {BpLibrary} from \\\"../lib-bp/BpLibrary.sol\\\";\\nimport {IRoyaltyUGC} from \\\"./interfaces/IRoyaltyUGC.sol\\\";\\nimport {ITransferManager} from \\\"./interfaces/ITransferManager.sol\\\";\\nimport {LibAsset} from \\\"../lib-asset/LibAsset.sol\\\";\\nimport {LibPart} from \\\"../lib-part/LibPart.sol\\\";\\n\\n/// @title TransferManager contract\\n/// @notice responsible for transferring all Assets\\n/// @dev this manager supports different types of fees\\n/// @dev also it supports different beneficiaries\\nabstract contract TransferManager is ERC165Upgradeable, ITransferManager {\\n    using BpLibrary for uint;\\n\\n    bytes4 internal constant INTERFACE_ID_IROYALTYUGC = 0xa30b4db9;\\n\\n    /// @notice fee for primary sales\\n    /// @return uint256 of primary sale fee\\n    uint256 public protocolFeePrimary;\\n\\n    /// @notice fee for secondary sales\\n    /// @return uint256 of secondary sale fee\\n    uint256 public protocolFeeSecondary;\\n\\n    /// @notice Registry for the different royalties\\n    /// @return address of royaltiesRegistry\\n    IRoyaltiesProvider public royaltiesRegistry;\\n\\n    /// @notice Default receiver of protocol fees\\n    /// @return address of defaultFeeReceiver\\n    address public defaultFeeReceiver;\\n\\n    /// @notice event for when protocol fees are set\\n    /// @param newProtocolFeePrimary fee for primary market\\n    /// @param newProtocolFeeSecondary fee for secondary market\\n    event ProtocolFeeSet(uint256 newProtocolFeePrimary, uint256 newProtocolFeeSecondary);\\n\\n    /// @notice event for when a royalties registry is set\\n    /// @param newRoyaltiesRegistry address of new royalties registry\\n    event RoyaltiesRegistrySet(IRoyaltiesProvider newRoyaltiesRegistry);\\n\\n    /// @notice event for when a default fee receiver is set\\n    /// @param newDefaultFeeReceiver address that gets the fees\\n    event DefaultFeeReceiverSet(address newDefaultFeeReceiver);\\n\\n    /// @notice initializer for TransferExecutor\\n    /// @param newProtocolFeePrimary fee for primary market\\n    /// @param newProtocolFeeSecondary fee for secondary market\\n    /// @param newDefaultFeeReceiver address for account receiving fees\\n    /// @param newRoyaltiesProvider address of royalties registry\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __TransferManager_init_unchained(\\n        uint256 newProtocolFeePrimary,\\n        uint256 newProtocolFeeSecondary,\\n        address newDefaultFeeReceiver,\\n        IRoyaltiesProvider newRoyaltiesProvider\\n    ) internal onlyInitializing {\\n        __ERC165_init();\\n        _setProtocolFee(newProtocolFeePrimary, newProtocolFeeSecondary);\\n        _setRoyaltiesRegistry(newRoyaltiesProvider);\\n        _setDefaultFeeReceiver(newDefaultFeeReceiver);\\n    }\\n\\n    /// @notice setter for royalty registry\\n    /// @param newRoyaltiesRegistry address of new royalties registry\\n    function _setRoyaltiesRegistry(IRoyaltiesProvider newRoyaltiesRegistry) internal {\\n        require(address(newRoyaltiesRegistry) != address(0), \\\"invalid Royalties Registry\\\");\\n        royaltiesRegistry = newRoyaltiesRegistry;\\n\\n        emit RoyaltiesRegistrySet(newRoyaltiesRegistry);\\n    }\\n\\n    /// @notice setter for protocol fees\\n    /// @param newProtocolFeePrimary fee for primary market\\n    /// @param newProtocolFeeSecondary fee for secondary market\\n    function _setProtocolFee(uint256 newProtocolFeePrimary, uint256 newProtocolFeeSecondary) internal {\\n        require(newProtocolFeePrimary < 5000, \\\"invalid primary fee\\\");\\n        require(newProtocolFeeSecondary < 5000, \\\"invalid secodary fee\\\");\\n        protocolFeePrimary = newProtocolFeePrimary;\\n        protocolFeeSecondary = newProtocolFeeSecondary;\\n\\n        emit ProtocolFeeSet(newProtocolFeePrimary, newProtocolFeeSecondary);\\n    }\\n\\n    /// @notice setter for default fee receiver\\n    /// @param newDefaultFeeReceiver address that gets the fees\\n    function _setDefaultFeeReceiver(address newDefaultFeeReceiver) internal {\\n        require(address(newDefaultFeeReceiver) != address(0), \\\"invalid default fee receiver\\\");\\n        defaultFeeReceiver = newDefaultFeeReceiver;\\n\\n        emit DefaultFeeReceiverSet(newDefaultFeeReceiver);\\n    }\\n\\n    /// @notice executes transfers for 2 matched orders\\n    /// @param left DealSide from the left order (see LibDeal.sol)\\n    /// @param right DealSide from the right order (see LibDeal.sol)\\n    function doTransfers(DealSide memory left, DealSide memory right, LibAsset.FeeSide feeSide) internal override {\\n        if (feeSide == LibAsset.FeeSide.LEFT) {\\n            doTransfersWithFees(left, right);\\n            transferPayouts(right.asset.assetType, right.asset.value, right.from, left.payouts);\\n        } else if (feeSide == LibAsset.FeeSide.RIGHT) {\\n            doTransfersWithFees(right, left);\\n            transferPayouts(left.asset.assetType, left.asset.value, left.from, right.payouts);\\n        } else {\\n            transferPayouts(left.asset.assetType, left.asset.value, left.from, right.payouts);\\n            transferPayouts(right.asset.assetType, right.asset.value, right.from, left.payouts);\\n        }\\n    }\\n\\n    /// @notice executes the fee-side transfers (payment + fees)\\n    /// @param paymentSide DealSide of the fee-side order\\n    /// @param nftSide DealSide of the nft-side order\\n    function doTransfersWithFees(DealSide memory paymentSide, DealSide memory nftSide) internal {\\n        uint256 rest = paymentSide.asset.value;\\n\\n        if (_applyFees(paymentSide.from)) {\\n            rest = transferRoyalties(\\n                paymentSide.asset.assetType,\\n                nftSide.asset.assetType,\\n                nftSide.payouts,\\n                rest,\\n                paymentSide.asset.value,\\n                paymentSide.from\\n            );\\n\\n            LibPart.Part[] memory origin = new LibPart.Part[](1);\\n            origin[0].account = payable(defaultFeeReceiver);\\n\\n            bool primaryMarket = false;\\n\\n            // check if primary or secondary market\\n            if (\\n                nftSide.asset.assetType.assetClass == LibAsset.AssetClassType.ERC1155_ASSET_CLASS ||\\n                nftSide.asset.assetType.assetClass == LibAsset.AssetClassType.ERC721_ASSET_CLASS\\n            ) {\\n                (address token, uint256 tokenId) = abi.decode(nftSide.asset.assetType.data, (address, uint));\\n                try IERC165Upgradeable(token).supportsInterface(INTERFACE_ID_IROYALTYUGC) returns (bool result) {\\n                    if (result) {\\n                        address creator = IRoyaltyUGC(token).getCreatorAddress(tokenId);\\n                        if (nftSide.from == creator) {\\n                            primaryMarket = true;\\n                        }\\n                    }\\n                    // solhint-disable-next-line no-empty-blocks\\n                } catch {}\\n            }\\n\\n            if (primaryMarket) {\\n                origin[0].value = uint96(protocolFeePrimary);\\n            } else {\\n                origin[0].value = uint96(protocolFeeSecondary);\\n            }\\n\\n            (rest, ) = transferFees(\\n                paymentSide.asset.assetType,\\n                rest,\\n                paymentSide.asset.value,\\n                origin,\\n                paymentSide.from\\n            );\\n        }\\n\\n        transferPayouts(paymentSide.asset.assetType, rest, paymentSide.from, nftSide.payouts);\\n    }\\n\\n    /// @notice transfer royalties. If there is only one royalties receiver and one address in payouts and they match,\\n    /// @dev nothing is transferred in this function\\n    /// @param paymentAssetType Asset Type which represents payment\\n    /// @param nftAssetType Asset Type which represents NFT to pay royalties for\\n    /// @param payouts Payouts to be made\\n    /// @param rest How much of the amount left after previous transfers\\n    /// @param amount total amount of asset that is going to be transferred\\n    /// @param from owner of the Asset to transfer\\n    /// @return How much left after transferring royalties\\n    function transferRoyalties(\\n        LibAsset.AssetType memory paymentAssetType,\\n        LibAsset.AssetType memory nftAssetType,\\n        LibPart.Part[] memory payouts,\\n        uint256 rest,\\n        uint256 amount,\\n        address from\\n    ) internal returns (uint256) {\\n        LibPart.Part[] memory royalties = getRoyaltiesByAssetType(nftAssetType);\\n\\n        if (\\n            nftAssetType.assetClass == LibAsset.AssetClassType.ERC1155_ASSET_CLASS ||\\n            nftAssetType.assetClass == LibAsset.AssetClassType.ERC721_ASSET_CLASS\\n        ) {\\n            (address token, uint256 tokenId) = abi.decode(nftAssetType.data, (address, uint));\\n            try IERC165Upgradeable(token).supportsInterface(INTERFACE_ID_IROYALTYUGC) returns (bool resultInterface) {\\n                if (resultInterface) {\\n                    address creator = IRoyaltyUGC(token).getCreatorAddress(tokenId);\\n                    if (payouts.length == 1 && payouts[0].account == creator) {\\n                        require(royalties[0].value <= 5000, \\\"Royalties are too high (>50%)\\\");\\n                        return rest;\\n                    }\\n                }\\n                // solhint-disable-next-line no-empty-blocks\\n            } catch {}\\n        }\\n        if (royalties.length == 1 && payouts.length == 1 && royalties[0].account == payouts[0].account) {\\n            require(royalties[0].value <= 5000, \\\"Royalties are too high (>50%)\\\");\\n            return rest;\\n        }\\n\\n        (uint256 result, uint256 totalRoyalties) = transferFees(paymentAssetType, rest, amount, royalties, from);\\n        require(totalRoyalties <= 5000, \\\"Royalties are too high (>50%)\\\");\\n        return result;\\n    }\\n\\n    /// @notice calculates royalties by asset type.\\n    /// @param nftAssetType NFT Asset Type to calculate royalties for\\n    /// @return calculated royalties (Array of LibPart.Part)\\n    function getRoyaltiesByAssetType(LibAsset.AssetType memory nftAssetType) internal returns (LibPart.Part[] memory) {\\n        if (\\n            nftAssetType.assetClass == LibAsset.AssetClassType.ERC1155_ASSET_CLASS ||\\n            nftAssetType.assetClass == LibAsset.AssetClassType.ERC721_ASSET_CLASS\\n        ) {\\n            (address token, uint256 tokenId) = abi.decode(nftAssetType.data, (address, uint));\\n            return royaltiesRegistry.getRoyalties(token, tokenId);\\n        }\\n        LibPart.Part[] memory empty;\\n        return empty;\\n    }\\n\\n    /// @notice Transfer fees\\n    /// @param assetType Asset Type to transfer\\n    /// @param rest How much of the amount left after previous transfers\\n    /// @param amount Total amount of the Asset. Used as a base to calculate part from (100%)\\n    /// @param fees Array of LibPart.Part which represents fees to pay\\n    /// @param from owner of the Asset to transfer\\n    /// @return newRest how much left after transferring fees\\n    /// @return totalFees total number of fees in bp\\n    function transferFees(\\n        LibAsset.AssetType memory assetType,\\n        uint256 rest,\\n        uint256 amount,\\n        LibPart.Part[] memory fees,\\n        address from\\n    ) internal returns (uint256 newRest, uint256 totalFees) {\\n        totalFees = 0;\\n        newRest = rest;\\n        for (uint256 i = 0; i < fees.length; ++i) {\\n            totalFees = totalFees + fees[i].value;\\n            uint256 feeValue;\\n            (newRest, feeValue) = subFeeInBp(newRest, amount, fees[i].value);\\n            if (feeValue > 0) {\\n                transfer(LibAsset.Asset(assetType, feeValue), from, fees[i].account);\\n            }\\n        }\\n    }\\n\\n    /// @notice transfers main part of the asset (payout)\\n    /// @param assetType Asset Type to transfer\\n    /// @param amount Amount of the asset to transfer\\n    /// @param from Current owner of the asset\\n    /// @param payouts List of payouts - receivers of the Asset\\n    function transferPayouts(\\n        LibAsset.AssetType memory assetType,\\n        uint256 amount,\\n        address from,\\n        LibPart.Part[] memory payouts\\n    ) internal {\\n        require(payouts.length > 0, \\\"transferPayouts: nothing to transfer\\\");\\n        uint256 sumBps = 0;\\n        uint256 rest = amount;\\n        for (uint256 i = 0; i < payouts.length - 1; ++i) {\\n            uint256 currentAmount = amount.bp(payouts[i].value);\\n            sumBps = sumBps + payouts[i].value;\\n            if (currentAmount > 0) {\\n                rest = rest - currentAmount;\\n                transfer(LibAsset.Asset(assetType, currentAmount), from, payouts[i].account);\\n            }\\n        }\\n        LibPart.Part memory lastPayout = payouts[payouts.length - 1];\\n        sumBps = sumBps + lastPayout.value;\\n        require(sumBps == 10000, \\\"Sum payouts Bps not equal 100%\\\");\\n        if (rest > 0) {\\n            transfer(LibAsset.Asset(assetType, rest), from, lastPayout.account);\\n        }\\n    }\\n\\n    /// @notice subtract fees in BP, or base point\\n    /// @param value amount left from amount after fees are discounted\\n    /// @param total total price for asset\\n    /// @param feeInBp fee in basepoint to be deducted\\n    function subFeeInBp(\\n        uint256 value,\\n        uint256 total,\\n        uint256 feeInBp\\n    ) internal pure returns (uint256 newValue, uint256 realFee) {\\n        return subFee(value, total.bp(feeInBp));\\n    }\\n\\n    /// @notice subtract fee from value\\n    /// @param value from which the fees will be deducted\\n    /// @param fee to deduct from value\\n    /// @return newValue result from deduction, 0 if value < fee\\n    /// @return realFee fee value if value > fee, otherwise return value input\\n    function subFee(uint256 value, uint256 fee) internal pure returns (uint256 newValue, uint256 realFee) {\\n        if (value > fee) {\\n            newValue = value - fee;\\n            realFee = fee;\\n        } else {\\n            newValue = 0;\\n            realFee = value;\\n        }\\n    }\\n\\n    /// @dev function deciding if the fees are applied or not, to be overriden\\n    /// @param from address to check\\n    function _applyFees(address from) internal virtual returns (bool);\\n\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0xf7770ee0fcb545b1586cb2f5b9905d97dcc048bea4d7521cec0c9b5d44362d45\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/marketplace/contracts/transfer-manager/interfaces/IRoyaltyUGC.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IRoyaltyUGC {\\n    function getCreatorAddress(uint256 tokenId) external pure returns (address creator);\\n}\\n\",\"keccak256\":\"0xa43870e62369bafb23450ad5e3948906ee832adcc5b8f1812c802533ea6f32a0\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/marketplace/contracts/transfer-manager/interfaces/ITransferExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.21;\\n\\nimport {LibAsset} from \\\"../../lib-asset/LibAsset.sol\\\";\\n\\nabstract contract ITransferExecutor {\\n    function transfer(LibAsset.Asset memory asset, address from, address to) internal virtual;\\n}\\n\",\"keccak256\":\"0xfc7a255b03c125feffbb31c762fa6afe067b0866c9bc822187e9f05490404cd5\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/marketplace/contracts/transfer-manager/interfaces/ITransferManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.21;\\n\\nimport {ITransferExecutor} from \\\"./ITransferExecutor.sol\\\";\\nimport {LibAsset} from \\\"../../lib-asset/LibAsset.sol\\\";\\nimport {LibPart} from \\\"../../lib-part/LibPart.sol\\\";\\n\\nabstract contract ITransferManager is ITransferExecutor {\\n    struct DealSide {\\n        LibAsset.Asset asset;\\n        LibPart.Part[] payouts;\\n        address from;\\n    }\\n\\n    function doTransfers(DealSide memory left, DealSide memory right, LibAsset.FeeSide feeSide) internal virtual;\\n}\\n\",\"keccak256\":\"0x1dbfe50de6f2b94997b5073a5297562dd59a65c32594ed0f2b588e33eba997a7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e3565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811614620000e1576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6141ad80620000f36000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c80635c975abb11610104578063a217fddf116100a2578063da74222811610071578063da74222814610438578063e63ab1e91461044b578063ec03ce8214610472578063fb01d36b1461048557600080fd5b8063a217fddf14610402578063c46002881461040a578063ce1b815f14610413578063d547741f1461042557600080fd5b80638587177a116100de5780638587177a146103865780638830df0d1461039957806389de1d7a146103c057806391d14854146103c957600080fd5b80635c975abb1461035f5780636d8f06941461036b5780638456cb591461037e57600080fd5b80632f2ff15d1161017c5780633f4ba83a1161014b5780633f4ba83a1461030a5780634ac0c18314610312578063572b6c05146103395780635737e1961461034c57600080fd5b80632f2ff15d146102a657806336568abe146102b95780633abf6fd4146102cc5780633be89922146102f757600080fd5b806320158c44116101b857806320158c441461022f578063240de2771461025d578063248a9ca3146102705780632959bfed1461029357600080fd5b806301ffc9a7146101df5780630c8b6288146102075780631cdfe3d81461021c575b600080fd5b6101f26101ed36600461355a565b610498565b60405190151581526020015b60405180910390f35b61021a6102153660046135e1565b6104db565b005b61021a61022a366004613648565b6104f9565b61024f61023d366004613665565b60c96020526000908152604090205481565b6040519081526020016101fe565b61021a61026b36600461367e565b61052c565b61024f61027e366004613665565b60009081526065602052604090206001015490565b61021a6102a13660046136a0565b610565565b61021a6102b4366004613724565b6106c2565b61021a6102c7366004613724565b6106e7565b60fe546102df906001600160a01b031681565b6040516001600160a01b0390911681526020016101fe565b61021a610305366004613648565b61077f565b61021a610793565b61024f7f541943c4a49765b7940b4b1392c4b1f8ede6efd4e23572572987ae02e569a78681565b6101f2610347366004613648565b6107c8565b60c8546102df906001600160a01b031681565b61015f5460ff166101f2565b60fd546102df906001600160a01b031681565b61021a6107e3565b61021a610394366004613648565b610815565b61024f7f1d46dada6ac47de84b1e7381a753499bde9d44cc2b9eacc1ba89f2ac24be16cc81565b61024f60fb5481565b6101f26103d7366004613724565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61024f600081565b61024f60fc5481565b61012d546001600160a01b03166102df565b61021a610433366004613724565b610829565b61021a610446366004613648565b61084e565b61024f7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b61021a610480366004613754565b610862565b61021a61049336600461379e565b6108e8565b60006301ffc9a760e01b7fffffffff00000000000000000000000000000000000000000000000000000000831614806104d557506104d582610981565b92915050565b6104e36109ff565b6104f56104ee610a55565b8383610a64565b5050565b7f541943c4a49765b7940b4b1392c4b1f8ede6efd4e23572572987ae02e569a78661052381610bd4565b6104f582610be5565b7f541943c4a49765b7940b4b1392c4b1f8ede6efd4e23572572987ae02e569a78661055681610bd4565b6105608383610c9d565b505050565b600054610100900460ff16158080156105855750600054600160ff909116105b8061059f5750303b15801561059f575060005460ff166001145b6106165760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b6000805460ff191660011790558015610639576000805461ff0019166101001790555b61064287610d86565b61064a610dfa565b610652610e65565b61065e86868686610edd565b61066782610f6c565b610672600089610fe0565b80156106b8576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b6000828152606560205260409020600101546106dd81610bd4565b6105608383610fe0565b6106ef610a55565b6001600160a01b0316816001600160a01b0316146107755760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c660000000000000000000000000000000000606482015260840161060d565b6104f58282611083565b600061078a81610bd4565b6104f582611124565b7f541943c4a49765b7940b4b1392c4b1f8ede6efd4e23572572987ae02e569a7866107bd81610bd4565b6107c56111d5565b50565b60006104d58261012d546001600160a01b0391821691161490565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a61080d81610bd4565b6107c561122e565b600061082081610bd4565b6104f58261126d565b60008281526065602052604090206001015461084481610bd4565b6105608383611083565b600061085981610bd4565b6104f58261131a565b61086a6109ff565b6108776020830183613648565b6001600160a01b0316610888610a55565b6001600160a01b0316146108de5760405162461bcd60e51b815260206004820152601760248201527f45786368616e6765436f72653a206e6f74206d616b6572000000000000000000604482015260640161060d565b6104f582826113f0565b7f1d46dada6ac47de84b1e7381a753499bde9d44cc2b9eacc1ba89f2ac24be16cc61091281610bd4565b61091a6109ff565b6001600160a01b0384166109705760405162461bcd60e51b815260206004820152600e60248201527f696e76616c69642073656e646572000000000000000000000000000000000000604482015260640161060d565b61097b848484610a64565b50505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b0000000000000000000000000000000000000000000000000000000014806104d557506301ffc9a760e01b7fffffffff000000000000000000000000000000000000000000000000000000008316146104d5565b61015f5460ff1615610a535760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015260640161060d565b565b6000610a5f611518565b905090565b8080610ab25760405162461bcd60e51b815260206004820152601660248201527f696e76616c69642065786368616e6765206d6174636800000000000000000000604482015260640161060d565b60005b81811015610bcd5736848483818110610ad057610ad06137f3565b9050602002810190610ae29190613809565b9050610b9a86610af28380613847565b610afb90613a1e565b610b086020850185613ace565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610b4a925050506040860186613847565b610b5390613a1e565b610b606060870187613ace565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061152292505050565b610bba86610ba88380613847565b610bb56040850185613847565b611714565b5080610bc581613b2b565b915050610ab5565b5050505050565b6107c581610be0610a55565b611844565b6001600160a01b038116610c3b5760405162461bcd60e51b815260206004820152601c60248201527f696e76616c69642064656661756c742066656520726563656976657200000000604482015260640161060d565b60fe805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527f5d039c612419cd7b6696e7d5c8ccaef3362188cc98db01e07fb55bb85b33541d906020015b60405180910390a150565b6113888210610cee5760405162461bcd60e51b815260206004820152601360248201527f696e76616c6964207072696d6172792066656500000000000000000000000000604482015260640161060d565b6113888110610d3f5760405162461bcd60e51b815260206004820152601460248201527f696e76616c6964207365636f6461727920666565000000000000000000000000604482015260640161060d565b60fb82905560fc81905560408051838152602081018390527ffa4067f2d0249edb7594284cabb394f2ec0e4f6168dbd1e3a63f861b67f1188f910160405180910390a15050565b600054610100900460ff16610df15760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161060d565b6107c58161131a565b600054610100900460ff16610a535760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161060d565b600054610100900460ff16610ed05760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161060d565b61015f805460ff19169055565b600054610100900460ff16610f485760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161060d565b610f50610dfa565b610f5a8484610c9d565b610f6381611124565b61097b82610be5565b600054610100900460ff16610fd75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161060d565b6107c58161126d565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff166104f55760008281526065602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561103f610a55565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff16156104f55760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191690556110e0610a55565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6001600160a01b03811661117a5760405162461bcd60e51b815260206004820152601a60248201527f696e76616c696420526f79616c74696573205265676973747279000000000000604482015260640161060d565b60fd805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527f6932f02a24181a8c1b9fa7bdc7453f15ecba05c354c9da94e97bac1abb13397890602001610c92565b6111dd6118b9565b61015f805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611211610a55565b6040516001600160a01b03909116815260200160405180910390a1565b6112366109ff565b61015f805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611211610a55565b6001600160a01b0381166112c35760405162461bcd60e51b815260206004820152601760248201527f696e76616c6964206f726465722076616c696461746f72000000000000000000604482015260640161060d565b60c8805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517ff605132f819f46ab9f362495c159c83b8a080f3b8b22f8a684018837eae0bed390600090a250565b61012d546001600160a01b03908116908216036113795760405162461bcd60e51b815260206004820152601560248201527f666f7277617264657220616c7265616479207365740000000000000000000000604482015260640161060d565b611381610a55565b61012d546040516001600160a01b03928316928481169216907f8ca022029d8ff7ad974913f8970aeed6c5e0e7eaf494a0c5b262249f6b5759e590600090a461012d805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b816080013560000361146a5760405162461bcd60e51b815260206004820152602260248201527f45786368616e6765436f72653a20302073616c742063616e277420626520757360448201527f6564000000000000000000000000000000000000000000000000000000000000606482015260840161060d565b60006114758361190c565b90508181146114c65760405162461bcd60e51b815260206004820152601f60248201527f45786368616e6765436f72653a20496e76616c6964206f726465724861736800604482015260640161060d565b600082815260c960205260409081902060001990555182907f34e97b51b26b1b4b5889b90f9702b02688ef22aaf1679d0d697a7518de60abfa9061150b908690613c41565b60405180910390a2505050565b6000610a5f61199d565b60c8546040517fb45230ec0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063b45230ec9061156f90879087908a90600401613d84565b60006040518083038186803b15801561158757600080fd5b505afa15801561159b573d6000803e3d6000fd5b505060c8546040517fb45230ec0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116925063b45230ec91506115ec90859085908a90600401613d84565b60006040518083038186803b15801561160457600080fd5b505afa158015611618573d6000803e3d6000fd5b5050505060408401516001600160a01b0316156116985783604001516001600160a01b031682600001516001600160a01b0316146116985760405162461bcd60e51b815260206004820152601660248201527f6c6566744f726465722e74616b6572206661696c656400000000000000000000604482015260640161060d565b60408201516001600160a01b031615610bcd5783600001516001600160a01b031682604001516001600160a01b031614610bcd5760405162461bcd60e51b815260206004820152601760248201527f72696768744f726465722e74616b6572206661696c6564000000000000000000604482015260640161060d565b600061174c6117266020850185613e4a565b6117309080613e4a565b61173d6060850185613e4a565b6117479080613e4a565b6119f1565b905060006117776117606060860186613e4a565b61176a9080613e4a565b61173d6020860186613e4a565b90506000611786868686611c0d565b6040805160a081019091526060810185815282516080830152815290915061183c90602081016117bd6117b889613a1e565b611dda565b81526020908101906117d190890189613648565b6001600160a01b031690526040805160a08101909152606081018581526020858101516080840152908252810161180a6117b889613a1e565b815260209081019061181e90890189613648565b6001600160a01b03169052855185516118379190611e95565b611f20565b505050505050565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff166104f55761187781611fbd565b611882836020611fcf565b604051602001611893929190613e60565b60408051601f198184030181529082905262461bcd60e51b825261060d91600401613ee1565b61015f5460ff16610a535760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604482015260640161060d565b600061191b6020830183613648565b61194361192b6020850185613e4a565b6119359080613e4a565b61193e90613ef4565b6121f8565b61195361192b6060860186613e4a565b604080516001600160a01b03909416602085015283019190915260608201526080808401359082015260a0015b604051602081830303815290604052805190602001209050919050565b61012d546000906001600160a01b0316331480156119bc575060143610155b156119ec57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c90565b503390565b6040805180820190915260008152606060208201526000611a156020850185613f00565b90506000611a266020850185613f00565b90506000826003811115611a3c57611a3c613b64565b03611a895760405162461bcd60e51b815260206004820152601760248201527f6e6f7420666f756e64204941737365744d617463686572000000000000000000604482015260640161060d565b6000816003811115611a9d57611a9d613b64565b03611aea5760405162461bcd60e51b815260206004820152601760248201527f6e6f7420666f756e64204941737365744d617463686572000000000000000000604482015260640161060d565b806003811115611afc57611afc613b64565b826003811115611b0e57611b0e613b64565b14611b5b5760405162461bcd60e51b815260206004820152601260248201527f61737365747320646f6e2774206d617463680000000000000000000000000000604482015260640161060d565b6000611b6a6020870187613ace565b604051611b78929190613f1b565b60405190819003902090506000611b926020870187613ace565b604051611ba0929190613f1b565b60405180910390209050808214611bf95760405162461bcd60e51b815260206004820152601260248201527f61737365747320646f6e2774206d617463680000000000000000000000000000604482015260640161060d565b611c0287613ef4565b979650505050505050565b60408051808201909152600080825260208201526000611c2c8461190c565b90506000611c398461190c565b90506000611c4b86608001358461223a565b90506000611c5d86608001358461223a565b9050611c6b87878484612261565b945060008560200151118015611c815750845115155b611ccd5760405162461bcd60e51b815260206004820152600f60248201527f6e6f7468696e6720746f2066696c6c0000000000000000000000000000000000604482015260640161060d565b608087013515611cf6576020850151611ce69083613f2b565b600085815260c960205260409020555b608086013515611d1c578451611d0c9082613f2b565b600084815260c960205260409020555b600084815260c960209081526040808320548684529220546001600160a01b038b16927ff1133ed5e330ee3f63885c4d2ed888f41e54352d2fdcf6db454a80518c77ab7892889288928b92909190611d76908f018f613e4a565b602001358d8060200190611d8a9190613e4a565b60408051978852602088810197909752855190880152938501516060870152608086019290925260a085015260c0840152013560e08201526101000160405180910390a2505050505b9392505050565b60408051600180825281830190925260609160009190816020015b6040805180820190915260008082526020820152815260200190600190039081611df5579050509050826000015181600081518110611e3657611e366137f3565b6020026020010151600001906001600160a01b031690816001600160a01b03168152505061271081600081518110611e7057611e706137f3565b6020908102919091018101516bffffffffffffffffffffffff90921691015292915050565b60006001836003811115611eab57611eab613b64565b148015611eca57506001826003811115611ec757611ec7613b64565b14155b15611ed7575060016104d5565b6001826003811115611eeb57611eeb613b64565b148015611f0a57506001836003811115611f0757611f07613b64565b14155b15611f17575060026104d5565b50600092915050565b6001816002811115611f3457611f34613b64565b03611f6057611f438383612311565b815180516020918201516040850151928601516105609390612619565b6002816002811115611f7457611f74613b64565b03611fa057611f838284612311565b825180516020918201516040860151928501516105609390612619565b82518051602091820151604086015192850151611f439390612619565b60606104d56001600160a01b03831660145b60606000611fde836002613f3e565b611fe9906002613f2b565b67ffffffffffffffff8111156120015761200161387b565b6040519080825280601f01601f19166020018201604052801561202b576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110612062576120626137f3565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106120c5576120c56137f3565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000612101846002613f3e565b61210c906001613f2b565b90505b60018111156121a9577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061214d5761214d6137f3565b1a60f81b828281518110612163576121636137f3565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c936121a281613f55565b905061210f565b508315611dd35760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161060d565b8051602080830151805190820120604051600093611980937f75aacb2727a36600741802d07994792d9d768ee841822bca87180d320cea991293919201613f6c565b60008260000361224c575060006104d5565b50600090815260c96020526040902054919050565b60408051808201909152600080825260208201526000806122828786612852565b915091506000806122938887612852565b91509150838111156122d6576122cb84846122b160208c018c613e4a565b602001356122c260608d018d613e4a565b602001356128a7565b945050505050612309565b6123026122e660208b018b613e4a565b602001356122f760608c018c613e4a565b602001358484612933565b9450505050505b949350505050565b815160200151604083015161235e906001600160a01b031660009081527f90916b45ad713ccdf8d945eab9f58d0d1cfed58f8e47d57192d063a0ddbfe292602052604090205460ff161590565b1561260457825180518351516020808601519301516040870151612384949186916129c0565b60408051600180825281830190925291925060009190816020015b604080518082019091526000808252602082015281526020019060019003908161239f57505060fe5481519192506001600160a01b03169082906000906123e8576123e86137f3565b60209081029190910101516001600160a01b0390911690526000600384515151600381111561241957612419613b64565b14806124395750600284515151600381111561243757612437613b64565b145b1561256b578351516020908101518051600092839261245d92810182019101613f8e565b6040516301ffc9a760e01b815263a30b4db960e01b600482015291935091506001600160a01b038316906301ffc9a790602401602060405180830381865afa9250505080156124c9575060408051601f3d908101601f191682019092526124c691810190613fbc565b60015b156125685780156125665760405163a30b4db960e01b8152600481018390526000906001600160a01b0385169063a30b4db990602401602060405180830381865afa15801561251c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125409190613fde565b9050806001600160a01b031688604001516001600160a01b03160361256457600194505b505b505b50505b80156125ab5760fb5482600081518110612587576125876137f3565b6020908102919091018101516bffffffffffffffffffffffff9092169101526125e1565b60fc54826000815181106125c1576125c16137f3565b6020908102919091018101516bffffffffffffffffffffffff9092169101525b8451805160209091015160408701516125fe929186918690612d49565b50925050505b82515160408401516020840151610560929184915b600081511161268f5760405162461bcd60e51b8152602060048201526024808201527f7472616e736665725061796f7574733a206e6f7468696e6720746f207472616e60448201527f7366657200000000000000000000000000000000000000000000000000000000606482015260840161060d565b600083815b600184516126a29190613ffb565b8110156127835760006126e98583815181106126c0576126c06137f3565b6020026020010151602001516bffffffffffffffffffffffff1688612e1a90919063ffffffff16565b90508482815181106126fd576126fd6137f3565b6020026020010151602001516bffffffffffffffffffffffff16846127229190613f2b565b93508015612772576127348184613ffb565b925061277260405180604001604052808a81526020018381525087878581518110612761576127616137f3565b602002602001015160000151612e33565b5061277c81613b2b565b9050612694565b50600083600185516127959190613ffb565b815181106127a5576127a56137f3565b6020026020010151905080602001516bffffffffffffffffffffffff16836127cd9190613f2b565b925082612710146128205760405162461bcd60e51b815260206004820152601e60248201527f53756d207061796f75747320427073206e6f7420657175616c20313030250000604482015260640161060d565b811561284957612849604051806040016040528089815260200184815250868360000151612e33565b50505050505050565b600080826128636060860186613e4a565b602001356128719190613ffb565b905061289e6128836020860186613e4a565b602001356128946060870187613e4a565b6020013583612f7b565b91509250929050565b604080518082019091526000808252602082015260006128c8858585612f7b565b90508581111561291a5760405162461bcd60e51b815260206004820152601860248201527f66696c6c4c6566743a20756e61626c6520746f2066696c6c0000000000000000604482015260640161060d565b5050604080518082019091529384525050602082015290565b60408051808201909152600080825260208201526000612954838787612f7b565b9050838111156129a65760405162461bcd60e51b815260206004820152601960248201527f66696c6c52696768743a20756e61626c6520746f2066696c6c00000000000000604482015260640161060d565b604080518082019091529283526020830152509392505050565b6000806129cc87612fea565b90506003875160038111156129e3576129e3613b64565b1480612a0157506002875160038111156129ff576129ff613b64565b145b15612bdd576000808860200151806020019051810190612a219190613f8e565b6040516301ffc9a760e01b815263a30b4db960e01b600482015291935091506001600160a01b038316906301ffc9a790602401602060405180830381865afa925050508015612a8d575060408051601f3d908101601f19168201909252612a8a91810190613fbc565b60015b15612bda578015612bd85760405163a30b4db960e01b8152600481018390526000906001600160a01b0385169063a30b4db990602401602060405180830381865afa158015612ae0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b049190613fde565b905089516001148015612b465750806001600160a01b03168a600081518110612b2f57612b2f6137f3565b6020026020010151600001516001600160a01b0316145b15612bd65761138885600081518110612b6157612b616137f3565b6020026020010151602001516bffffffffffffffffffffffff161115612bc95760405162461bcd60e51b815260206004820152601d60248201527f526f79616c746965732061726520746f6f206869676820283e35302529000000604482015260640161060d565b8895505050505050612d3f565b505b505b50505b80516001148015612bef575085516001145b8015612c48575085600081518110612c0957612c096137f3565b6020026020010151600001516001600160a01b031681600081518110612c3157612c316137f3565b6020026020010151600001516001600160a01b0316145b15612cd45761138881600081518110612c6357612c636137f3565b6020026020010151602001516bffffffffffffffffffffffff161115612ccb5760405162461bcd60e51b815260206004820152601d60248201527f526f79616c746965732061726520746f6f206869676820283e35302529000000604482015260640161060d565b84915050612d3f565b600080612ce48a88888689612d49565b91509150611388811115612d3a5760405162461bcd60e51b815260206004820152601d60248201527f526f79616c746965732061726520746f6f206869676820283e35302529000000604482015260640161060d565b509150505b9695505050505050565b836000805b8451811015612e0f57848181518110612d6957612d696137f3565b6020026020010151602001516bffffffffffffffffffffffff1682612d8e9190613f2b565b91506000612dc88488888581518110612da957612da96137f3565b6020026020010151602001516bffffffffffffffffffffffff166130e2565b90945090508015612dfe57612dfe60405180604001604052808b81526020018381525086888581518110612761576127616137f3565b50612e0881613b2b565b9050612d4e565b509550959350505050565b6000612710612e298385613f3e565b611dd39190614024565b60028351516003811115612e4957612e49613b64565b03612ed157600080846000015160200151806020019051810190612e6d9190613f8e565b915091508460200151600114612ec55760405162461bcd60e51b815260206004820152601260248201527f6572633732312076616c7565206572726f720000000000000000000000000000604482015260640161060d565b610bcd82858584613104565b60018351516003811115612ee757612ee7613b64565b03612f1c576000836000015160200151806020019051810190612f0a9190613fde565b905061097b8184848760200151613183565b60038351516003811115612f3257612f32613b64565b0361056057600080846000015160200151806020019051810190612f569190613f8e565b91509150610bcd8285858489602001516040518060200160405280600081525061320b565b6000612f88848484613292565b15612fd55760405162461bcd60e51b815260206004820152600e60248201527f726f756e64696e67206572726f72000000000000000000000000000000000000604482015260640161060d565b82612fe08386613f3e565b6123099190614024565b606060038251600381111561300157613001613b64565b148061301f575060028251600381111561301d5761301d613b64565b145b156130da57600080836020015180602001905181019061303f9190613f8e565b60fd546040517f9ca7dc7a0000000000000000000000000000000000000000000000000000000081526001600160a01b038085166004830152602482018490529395509193509190911690639ca7dc7a906044016000604051808303816000875af11580156130b2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526123099190810190614046565b506060919050565b6000806130f8856130f38686612e1a565b613332565b91509150935093915050565b6040517f42842e0e0000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301528381166024830152604482018390528516906342842e0e90606401600060405180830381600087803b15801561316f57600080fd5b505af11580156106b8573d6000803e3d6000fd5b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905261097b90859061335f565b6040517ff242432a0000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063f242432a90613258908890889088908890889060040161412d565b600060405180830381600087803b15801561327257600080fd5b505af1158015613286573d6000803e3d6000fd5b50505050505050505050565b6000826000036132e45760405162461bcd60e51b815260206004820152601060248201527f6469766973696f6e206279207a65726f00000000000000000000000000000000604482015260640161060d565b8115806132ef575083155b156132fc57506000611dd3565b6000838061330c5761330c61400e565b858409905061331b8386613f3e565b613327826103e8613f3e565b101595945050505050565b60008082841115613351576133478385613ffb565b9150829050613358565b5060009050825b9250929050565b60006133b4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166134479092919063ffffffff16565b90508051600014806133d55750808060200190518101906133d59190613fbc565b6105605760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161060d565b6060612309848460008585600080866001600160a01b0316858760405161346e9190614165565b60006040518083038185875af1925050503d80600081146134ab576040519150601f19603f3d011682016040523d82523d6000602084013e6134b0565b606091505b5091509150611c02878383876060831561352b578251600003613524576001600160a01b0385163b6135245760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161060d565b5081612309565b61230983838151156135405781518083602001fd5b8060405162461bcd60e51b815260040161060d9190613ee1565b60006020828403121561356c57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114611dd357600080fd5b60008083601f8401126135ae57600080fd5b50813567ffffffffffffffff8111156135c657600080fd5b6020830191508360208260051b850101111561335857600080fd5b600080602083850312156135f457600080fd5b823567ffffffffffffffff81111561360b57600080fd5b6136178582860161359c565b90969095509350505050565b6001600160a01b03811681146107c557600080fd5b803561364381613623565b919050565b60006020828403121561365a57600080fd5b8135611dd381613623565b60006020828403121561367757600080fd5b5035919050565b6000806040838503121561369157600080fd5b50508035926020909101359150565b600080600080600080600060e0888a0312156136bb57600080fd5b87356136c681613623565b965060208801356136d681613623565b9550604088013594506060880135935060808801356136f481613623565b925060a088013561370481613623565b915060c088013561371481613623565b8091505092959891949750929550565b6000806040838503121561373757600080fd5b82359150602083013561374981613623565b809150509250929050565b6000806040838503121561376757600080fd5b823567ffffffffffffffff81111561377e57600080fd5b830160e0818603121561379057600080fd5b946020939093013593505050565b6000806000604084860312156137b357600080fd5b83356137be81613623565b9250602084013567ffffffffffffffff8111156137da57600080fd5b6137e68682870161359c565b9497909650939450505050565b634e487b7160e01b600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8183360301811261383d57600080fd5b9190910192915050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2183360301811261383d57600080fd5b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156138b4576138b461387b565b60405290565b60405160e0810167ffffffffffffffff811182821017156138b4576138b461387b565b604051601f8201601f1916810167ffffffffffffffff811182821017156139065761390661387b565b604052919050565b80356004811061364357600080fd5b60006040828403121561392f57600080fd5b613937613891565b90506139428261390e565b815260208083013567ffffffffffffffff8082111561396057600080fd5b818501915085601f83011261397457600080fd5b8135818111156139865761398661387b565b61399884601f19601f840116016138dd565b915080825286848285010111156139ae57600080fd5b80848401858401376000908201840152918301919091525092915050565b6000604082840312156139de57600080fd5b6139e6613891565b9050813567ffffffffffffffff8111156139ff57600080fd5b613a0b8482850161391d565b8252506020820135602082015292915050565b600060e08236031215613a3057600080fd5b613a386138ba565b613a4183613638565b8152602083013567ffffffffffffffff80821115613a5e57600080fd5b613a6a368387016139cc565b6020840152613a7b60408601613638565b60408401526060850135915080821115613a9457600080fd5b50613aa1368286016139cc565b6060830152506080830135608082015260a083013560a082015260c083013560c082015280915050919050565b6000808335601e19843603018112613ae557600080fd5b83018035915067ffffffffffffffff821115613b0057600080fd5b60200191503681900382131561335857600080fd5b634e487b7160e01b600052601160045260246000fd5b60006000198203613b3e57613b3e613b15565b5060010190565b60008235603e19833603018112613b5b57600080fd5b90910192915050565b634e487b7160e01b600052602160045260246000fd5b60048110613b9857634e487b7160e01b600052602160045260246000fd5b9052565b6000613ba88283613b45565b60408452613bc160408501613bbc8361390e565b613b7a565b6020810135601e19823603018112613bd857600080fd5b0160208101903567ffffffffffffffff811115613bf457600080fd5b803603821315613c0357600080fd5b60406060860152806080860152808260a0870137600060a082870101526020840135602086015260a0601f19601f8301168601019250505092915050565b6020815260008235613c5281613623565b6001600160a01b038116602084015250613c6f6020840184613b45565b60e06040840152613c84610100840182613b9c565b90506040840135613c9481613623565b6001600160a01b038116606085015250613cb16060850185613b45565b601f19848303016080850152613cc78282613b9c565b915050608084013560a084015260a084013560c084015260c084013560e08401528091505092915050565b60005b83811015613d0d578181015183820152602001613cf5565b50506000910152565b60008151808452613d2e816020860160208601613cf2565b601f01601f19169290920160200192915050565b6000815160408452613d58604085018251613b7a565b6020015160406060850152613d706080850182613d16565b602093840151949093019390935250919050565b6060815260006001600160a01b03808651166060840152602086015160e06080850152613db5610140850182613d42565b604088015190921660a08501525060608601518382037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa00160c085015290613dfd8183613d42565b915050608086015160e084015260a086015161010084015260c08601516101208401528281036020840152613e328186613d16565b91505061230960408301846001600160a01b03169052565b60008235603e1983360301811261383d57600080fd5b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613e98816017850160208801613cf2565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351613ed5816028840160208801613cf2565b01602801949350505050565b602081526000611dd36020830184613d16565b60006104d5368361391d565b600060208284031215613f1257600080fd5b611dd38261390e565b8183823760009101908152919050565b808201808211156104d5576104d5613b15565b80820281158282048414176104d5576104d5613b15565b600081613f6457613f64613b15565b506000190190565b83815260608101613f806020830185613b7a565b826040830152949350505050565b60008060408385031215613fa157600080fd5b8251613fac81613623565b6020939093015192949293505050565b600060208284031215613fce57600080fd5b81518015158114611dd357600080fd5b600060208284031215613ff057600080fd5b8151611dd381613623565b818103818111156104d5576104d5613b15565b634e487b7160e01b600052601260045260246000fd5b60008261404157634e487b7160e01b600052601260045260246000fd5b500490565b6000602080838503121561405957600080fd5b825167ffffffffffffffff8082111561407157600080fd5b818501915085601f83011261408557600080fd5b8151818111156140975761409761387b565b6140a5848260051b016138dd565b818152848101925060069190911b8301840190878211156140c557600080fd5b928401925b81841015611c0257604084890312156140e35760008081fd5b6140eb613891565b84516140f681613623565b8152848601516bffffffffffffffffffffffff811681146141175760008081fd5b81870152835260409390930192918401916140ca565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a06080830152611c0260a0830184613d16565b6000825161383d818460208701613cf256fea2646970667358221220ade6588f4beea3a297dfec058606e0ac57e5483fd2ff085c6c7808d33552f83b64736f6c63430008150033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c80635c975abb11610104578063a217fddf116100a2578063da74222811610071578063da74222814610438578063e63ab1e91461044b578063ec03ce8214610472578063fb01d36b1461048557600080fd5b8063a217fddf14610402578063c46002881461040a578063ce1b815f14610413578063d547741f1461042557600080fd5b80638587177a116100de5780638587177a146103865780638830df0d1461039957806389de1d7a146103c057806391d14854146103c957600080fd5b80635c975abb1461035f5780636d8f06941461036b5780638456cb591461037e57600080fd5b80632f2ff15d1161017c5780633f4ba83a1161014b5780633f4ba83a1461030a5780634ac0c18314610312578063572b6c05146103395780635737e1961461034c57600080fd5b80632f2ff15d146102a657806336568abe146102b95780633abf6fd4146102cc5780633be89922146102f757600080fd5b806320158c44116101b857806320158c441461022f578063240de2771461025d578063248a9ca3146102705780632959bfed1461029357600080fd5b806301ffc9a7146101df5780630c8b6288146102075780631cdfe3d81461021c575b600080fd5b6101f26101ed36600461355a565b610498565b60405190151581526020015b60405180910390f35b61021a6102153660046135e1565b6104db565b005b61021a61022a366004613648565b6104f9565b61024f61023d366004613665565b60c96020526000908152604090205481565b6040519081526020016101fe565b61021a61026b36600461367e565b61052c565b61024f61027e366004613665565b60009081526065602052604090206001015490565b61021a6102a13660046136a0565b610565565b61021a6102b4366004613724565b6106c2565b61021a6102c7366004613724565b6106e7565b60fe546102df906001600160a01b031681565b6040516001600160a01b0390911681526020016101fe565b61021a610305366004613648565b61077f565b61021a610793565b61024f7f541943c4a49765b7940b4b1392c4b1f8ede6efd4e23572572987ae02e569a78681565b6101f2610347366004613648565b6107c8565b60c8546102df906001600160a01b031681565b61015f5460ff166101f2565b60fd546102df906001600160a01b031681565b61021a6107e3565b61021a610394366004613648565b610815565b61024f7f1d46dada6ac47de84b1e7381a753499bde9d44cc2b9eacc1ba89f2ac24be16cc81565b61024f60fb5481565b6101f26103d7366004613724565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61024f600081565b61024f60fc5481565b61012d546001600160a01b03166102df565b61021a610433366004613724565b610829565b61021a610446366004613648565b61084e565b61024f7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b61021a610480366004613754565b610862565b61021a61049336600461379e565b6108e8565b60006301ffc9a760e01b7fffffffff00000000000000000000000000000000000000000000000000000000831614806104d557506104d582610981565b92915050565b6104e36109ff565b6104f56104ee610a55565b8383610a64565b5050565b7f541943c4a49765b7940b4b1392c4b1f8ede6efd4e23572572987ae02e569a78661052381610bd4565b6104f582610be5565b7f541943c4a49765b7940b4b1392c4b1f8ede6efd4e23572572987ae02e569a78661055681610bd4565b6105608383610c9d565b505050565b600054610100900460ff16158080156105855750600054600160ff909116105b8061059f5750303b15801561059f575060005460ff166001145b6106165760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b6000805460ff191660011790558015610639576000805461ff0019166101001790555b61064287610d86565b61064a610dfa565b610652610e65565b61065e86868686610edd565b61066782610f6c565b610672600089610fe0565b80156106b8576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b6000828152606560205260409020600101546106dd81610bd4565b6105608383610fe0565b6106ef610a55565b6001600160a01b0316816001600160a01b0316146107755760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c660000000000000000000000000000000000606482015260840161060d565b6104f58282611083565b600061078a81610bd4565b6104f582611124565b7f541943c4a49765b7940b4b1392c4b1f8ede6efd4e23572572987ae02e569a7866107bd81610bd4565b6107c56111d5565b50565b60006104d58261012d546001600160a01b0391821691161490565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a61080d81610bd4565b6107c561122e565b600061082081610bd4565b6104f58261126d565b60008281526065602052604090206001015461084481610bd4565b6105608383611083565b600061085981610bd4565b6104f58261131a565b61086a6109ff565b6108776020830183613648565b6001600160a01b0316610888610a55565b6001600160a01b0316146108de5760405162461bcd60e51b815260206004820152601760248201527f45786368616e6765436f72653a206e6f74206d616b6572000000000000000000604482015260640161060d565b6104f582826113f0565b7f1d46dada6ac47de84b1e7381a753499bde9d44cc2b9eacc1ba89f2ac24be16cc61091281610bd4565b61091a6109ff565b6001600160a01b0384166109705760405162461bcd60e51b815260206004820152600e60248201527f696e76616c69642073656e646572000000000000000000000000000000000000604482015260640161060d565b61097b848484610a64565b50505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b0000000000000000000000000000000000000000000000000000000014806104d557506301ffc9a760e01b7fffffffff000000000000000000000000000000000000000000000000000000008316146104d5565b61015f5460ff1615610a535760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015260640161060d565b565b6000610a5f611518565b905090565b8080610ab25760405162461bcd60e51b815260206004820152601660248201527f696e76616c69642065786368616e6765206d6174636800000000000000000000604482015260640161060d565b60005b81811015610bcd5736848483818110610ad057610ad06137f3565b9050602002810190610ae29190613809565b9050610b9a86610af28380613847565b610afb90613a1e565b610b086020850185613ace565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610b4a925050506040860186613847565b610b5390613a1e565b610b606060870187613ace565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061152292505050565b610bba86610ba88380613847565b610bb56040850185613847565b611714565b5080610bc581613b2b565b915050610ab5565b5050505050565b6107c581610be0610a55565b611844565b6001600160a01b038116610c3b5760405162461bcd60e51b815260206004820152601c60248201527f696e76616c69642064656661756c742066656520726563656976657200000000604482015260640161060d565b60fe805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527f5d039c612419cd7b6696e7d5c8ccaef3362188cc98db01e07fb55bb85b33541d906020015b60405180910390a150565b6113888210610cee5760405162461bcd60e51b815260206004820152601360248201527f696e76616c6964207072696d6172792066656500000000000000000000000000604482015260640161060d565b6113888110610d3f5760405162461bcd60e51b815260206004820152601460248201527f696e76616c6964207365636f6461727920666565000000000000000000000000604482015260640161060d565b60fb82905560fc81905560408051838152602081018390527ffa4067f2d0249edb7594284cabb394f2ec0e4f6168dbd1e3a63f861b67f1188f910160405180910390a15050565b600054610100900460ff16610df15760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161060d565b6107c58161131a565b600054610100900460ff16610a535760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161060d565b600054610100900460ff16610ed05760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161060d565b61015f805460ff19169055565b600054610100900460ff16610f485760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161060d565b610f50610dfa565b610f5a8484610c9d565b610f6381611124565b61097b82610be5565b600054610100900460ff16610fd75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161060d565b6107c58161126d565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff166104f55760008281526065602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561103f610a55565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff16156104f55760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191690556110e0610a55565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6001600160a01b03811661117a5760405162461bcd60e51b815260206004820152601a60248201527f696e76616c696420526f79616c74696573205265676973747279000000000000604482015260640161060d565b60fd805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527f6932f02a24181a8c1b9fa7bdc7453f15ecba05c354c9da94e97bac1abb13397890602001610c92565b6111dd6118b9565b61015f805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611211610a55565b6040516001600160a01b03909116815260200160405180910390a1565b6112366109ff565b61015f805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611211610a55565b6001600160a01b0381166112c35760405162461bcd60e51b815260206004820152601760248201527f696e76616c6964206f726465722076616c696461746f72000000000000000000604482015260640161060d565b60c8805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517ff605132f819f46ab9f362495c159c83b8a080f3b8b22f8a684018837eae0bed390600090a250565b61012d546001600160a01b03908116908216036113795760405162461bcd60e51b815260206004820152601560248201527f666f7277617264657220616c7265616479207365740000000000000000000000604482015260640161060d565b611381610a55565b61012d546040516001600160a01b03928316928481169216907f8ca022029d8ff7ad974913f8970aeed6c5e0e7eaf494a0c5b262249f6b5759e590600090a461012d805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b816080013560000361146a5760405162461bcd60e51b815260206004820152602260248201527f45786368616e6765436f72653a20302073616c742063616e277420626520757360448201527f6564000000000000000000000000000000000000000000000000000000000000606482015260840161060d565b60006114758361190c565b90508181146114c65760405162461bcd60e51b815260206004820152601f60248201527f45786368616e6765436f72653a20496e76616c6964206f726465724861736800604482015260640161060d565b600082815260c960205260409081902060001990555182907f34e97b51b26b1b4b5889b90f9702b02688ef22aaf1679d0d697a7518de60abfa9061150b908690613c41565b60405180910390a2505050565b6000610a5f61199d565b60c8546040517fb45230ec0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063b45230ec9061156f90879087908a90600401613d84565b60006040518083038186803b15801561158757600080fd5b505afa15801561159b573d6000803e3d6000fd5b505060c8546040517fb45230ec0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116925063b45230ec91506115ec90859085908a90600401613d84565b60006040518083038186803b15801561160457600080fd5b505afa158015611618573d6000803e3d6000fd5b5050505060408401516001600160a01b0316156116985783604001516001600160a01b031682600001516001600160a01b0316146116985760405162461bcd60e51b815260206004820152601660248201527f6c6566744f726465722e74616b6572206661696c656400000000000000000000604482015260640161060d565b60408201516001600160a01b031615610bcd5783600001516001600160a01b031682604001516001600160a01b031614610bcd5760405162461bcd60e51b815260206004820152601760248201527f72696768744f726465722e74616b6572206661696c6564000000000000000000604482015260640161060d565b600061174c6117266020850185613e4a565b6117309080613e4a565b61173d6060850185613e4a565b6117479080613e4a565b6119f1565b905060006117776117606060860186613e4a565b61176a9080613e4a565b61173d6020860186613e4a565b90506000611786868686611c0d565b6040805160a081019091526060810185815282516080830152815290915061183c90602081016117bd6117b889613a1e565b611dda565b81526020908101906117d190890189613648565b6001600160a01b031690526040805160a08101909152606081018581526020858101516080840152908252810161180a6117b889613a1e565b815260209081019061181e90890189613648565b6001600160a01b03169052855185516118379190611e95565b611f20565b505050505050565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff166104f55761187781611fbd565b611882836020611fcf565b604051602001611893929190613e60565b60408051601f198184030181529082905262461bcd60e51b825261060d91600401613ee1565b61015f5460ff16610a535760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604482015260640161060d565b600061191b6020830183613648565b61194361192b6020850185613e4a565b6119359080613e4a565b61193e90613ef4565b6121f8565b61195361192b6060860186613e4a565b604080516001600160a01b03909416602085015283019190915260608201526080808401359082015260a0015b604051602081830303815290604052805190602001209050919050565b61012d546000906001600160a01b0316331480156119bc575060143610155b156119ec57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c90565b503390565b6040805180820190915260008152606060208201526000611a156020850185613f00565b90506000611a266020850185613f00565b90506000826003811115611a3c57611a3c613b64565b03611a895760405162461bcd60e51b815260206004820152601760248201527f6e6f7420666f756e64204941737365744d617463686572000000000000000000604482015260640161060d565b6000816003811115611a9d57611a9d613b64565b03611aea5760405162461bcd60e51b815260206004820152601760248201527f6e6f7420666f756e64204941737365744d617463686572000000000000000000604482015260640161060d565b806003811115611afc57611afc613b64565b826003811115611b0e57611b0e613b64565b14611b5b5760405162461bcd60e51b815260206004820152601260248201527f61737365747320646f6e2774206d617463680000000000000000000000000000604482015260640161060d565b6000611b6a6020870187613ace565b604051611b78929190613f1b565b60405190819003902090506000611b926020870187613ace565b604051611ba0929190613f1b565b60405180910390209050808214611bf95760405162461bcd60e51b815260206004820152601260248201527f61737365747320646f6e2774206d617463680000000000000000000000000000604482015260640161060d565b611c0287613ef4565b979650505050505050565b60408051808201909152600080825260208201526000611c2c8461190c565b90506000611c398461190c565b90506000611c4b86608001358461223a565b90506000611c5d86608001358461223a565b9050611c6b87878484612261565b945060008560200151118015611c815750845115155b611ccd5760405162461bcd60e51b815260206004820152600f60248201527f6e6f7468696e6720746f2066696c6c0000000000000000000000000000000000604482015260640161060d565b608087013515611cf6576020850151611ce69083613f2b565b600085815260c960205260409020555b608086013515611d1c578451611d0c9082613f2b565b600084815260c960205260409020555b600084815260c960209081526040808320548684529220546001600160a01b038b16927ff1133ed5e330ee3f63885c4d2ed888f41e54352d2fdcf6db454a80518c77ab7892889288928b92909190611d76908f018f613e4a565b602001358d8060200190611d8a9190613e4a565b60408051978852602088810197909752855190880152938501516060870152608086019290925260a085015260c0840152013560e08201526101000160405180910390a2505050505b9392505050565b60408051600180825281830190925260609160009190816020015b6040805180820190915260008082526020820152815260200190600190039081611df5579050509050826000015181600081518110611e3657611e366137f3565b6020026020010151600001906001600160a01b031690816001600160a01b03168152505061271081600081518110611e7057611e706137f3565b6020908102919091018101516bffffffffffffffffffffffff90921691015292915050565b60006001836003811115611eab57611eab613b64565b148015611eca57506001826003811115611ec757611ec7613b64565b14155b15611ed7575060016104d5565b6001826003811115611eeb57611eeb613b64565b148015611f0a57506001836003811115611f0757611f07613b64565b14155b15611f17575060026104d5565b50600092915050565b6001816002811115611f3457611f34613b64565b03611f6057611f438383612311565b815180516020918201516040850151928601516105609390612619565b6002816002811115611f7457611f74613b64565b03611fa057611f838284612311565b825180516020918201516040860151928501516105609390612619565b82518051602091820151604086015192850151611f439390612619565b60606104d56001600160a01b03831660145b60606000611fde836002613f3e565b611fe9906002613f2b565b67ffffffffffffffff8111156120015761200161387b565b6040519080825280601f01601f19166020018201604052801561202b576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110612062576120626137f3565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106120c5576120c56137f3565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000612101846002613f3e565b61210c906001613f2b565b90505b60018111156121a9577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061214d5761214d6137f3565b1a60f81b828281518110612163576121636137f3565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c936121a281613f55565b905061210f565b508315611dd35760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161060d565b8051602080830151805190820120604051600093611980937f75aacb2727a36600741802d07994792d9d768ee841822bca87180d320cea991293919201613f6c565b60008260000361224c575060006104d5565b50600090815260c96020526040902054919050565b60408051808201909152600080825260208201526000806122828786612852565b915091506000806122938887612852565b91509150838111156122d6576122cb84846122b160208c018c613e4a565b602001356122c260608d018d613e4a565b602001356128a7565b945050505050612309565b6123026122e660208b018b613e4a565b602001356122f760608c018c613e4a565b602001358484612933565b9450505050505b949350505050565b815160200151604083015161235e906001600160a01b031660009081527f90916b45ad713ccdf8d945eab9f58d0d1cfed58f8e47d57192d063a0ddbfe292602052604090205460ff161590565b1561260457825180518351516020808601519301516040870151612384949186916129c0565b60408051600180825281830190925291925060009190816020015b604080518082019091526000808252602082015281526020019060019003908161239f57505060fe5481519192506001600160a01b03169082906000906123e8576123e86137f3565b60209081029190910101516001600160a01b0390911690526000600384515151600381111561241957612419613b64565b14806124395750600284515151600381111561243757612437613b64565b145b1561256b578351516020908101518051600092839261245d92810182019101613f8e565b6040516301ffc9a760e01b815263a30b4db960e01b600482015291935091506001600160a01b038316906301ffc9a790602401602060405180830381865afa9250505080156124c9575060408051601f3d908101601f191682019092526124c691810190613fbc565b60015b156125685780156125665760405163a30b4db960e01b8152600481018390526000906001600160a01b0385169063a30b4db990602401602060405180830381865afa15801561251c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125409190613fde565b9050806001600160a01b031688604001516001600160a01b03160361256457600194505b505b505b50505b80156125ab5760fb5482600081518110612587576125876137f3565b6020908102919091018101516bffffffffffffffffffffffff9092169101526125e1565b60fc54826000815181106125c1576125c16137f3565b6020908102919091018101516bffffffffffffffffffffffff9092169101525b8451805160209091015160408701516125fe929186918690612d49565b50925050505b82515160408401516020840151610560929184915b600081511161268f5760405162461bcd60e51b8152602060048201526024808201527f7472616e736665725061796f7574733a206e6f7468696e6720746f207472616e60448201527f7366657200000000000000000000000000000000000000000000000000000000606482015260840161060d565b600083815b600184516126a29190613ffb565b8110156127835760006126e98583815181106126c0576126c06137f3565b6020026020010151602001516bffffffffffffffffffffffff1688612e1a90919063ffffffff16565b90508482815181106126fd576126fd6137f3565b6020026020010151602001516bffffffffffffffffffffffff16846127229190613f2b565b93508015612772576127348184613ffb565b925061277260405180604001604052808a81526020018381525087878581518110612761576127616137f3565b602002602001015160000151612e33565b5061277c81613b2b565b9050612694565b50600083600185516127959190613ffb565b815181106127a5576127a56137f3565b6020026020010151905080602001516bffffffffffffffffffffffff16836127cd9190613f2b565b925082612710146128205760405162461bcd60e51b815260206004820152601e60248201527f53756d207061796f75747320427073206e6f7420657175616c20313030250000604482015260640161060d565b811561284957612849604051806040016040528089815260200184815250868360000151612e33565b50505050505050565b600080826128636060860186613e4a565b602001356128719190613ffb565b905061289e6128836020860186613e4a565b602001356128946060870187613e4a565b6020013583612f7b565b91509250929050565b604080518082019091526000808252602082015260006128c8858585612f7b565b90508581111561291a5760405162461bcd60e51b815260206004820152601860248201527f66696c6c4c6566743a20756e61626c6520746f2066696c6c0000000000000000604482015260640161060d565b5050604080518082019091529384525050602082015290565b60408051808201909152600080825260208201526000612954838787612f7b565b9050838111156129a65760405162461bcd60e51b815260206004820152601960248201527f66696c6c52696768743a20756e61626c6520746f2066696c6c00000000000000604482015260640161060d565b604080518082019091529283526020830152509392505050565b6000806129cc87612fea565b90506003875160038111156129e3576129e3613b64565b1480612a0157506002875160038111156129ff576129ff613b64565b145b15612bdd576000808860200151806020019051810190612a219190613f8e565b6040516301ffc9a760e01b815263a30b4db960e01b600482015291935091506001600160a01b038316906301ffc9a790602401602060405180830381865afa925050508015612a8d575060408051601f3d908101601f19168201909252612a8a91810190613fbc565b60015b15612bda578015612bd85760405163a30b4db960e01b8152600481018390526000906001600160a01b0385169063a30b4db990602401602060405180830381865afa158015612ae0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b049190613fde565b905089516001148015612b465750806001600160a01b03168a600081518110612b2f57612b2f6137f3565b6020026020010151600001516001600160a01b0316145b15612bd65761138885600081518110612b6157612b616137f3565b6020026020010151602001516bffffffffffffffffffffffff161115612bc95760405162461bcd60e51b815260206004820152601d60248201527f526f79616c746965732061726520746f6f206869676820283e35302529000000604482015260640161060d565b8895505050505050612d3f565b505b505b50505b80516001148015612bef575085516001145b8015612c48575085600081518110612c0957612c096137f3565b6020026020010151600001516001600160a01b031681600081518110612c3157612c316137f3565b6020026020010151600001516001600160a01b0316145b15612cd45761138881600081518110612c6357612c636137f3565b6020026020010151602001516bffffffffffffffffffffffff161115612ccb5760405162461bcd60e51b815260206004820152601d60248201527f526f79616c746965732061726520746f6f206869676820283e35302529000000604482015260640161060d565b84915050612d3f565b600080612ce48a88888689612d49565b91509150611388811115612d3a5760405162461bcd60e51b815260206004820152601d60248201527f526f79616c746965732061726520746f6f206869676820283e35302529000000604482015260640161060d565b509150505b9695505050505050565b836000805b8451811015612e0f57848181518110612d6957612d696137f3565b6020026020010151602001516bffffffffffffffffffffffff1682612d8e9190613f2b565b91506000612dc88488888581518110612da957612da96137f3565b6020026020010151602001516bffffffffffffffffffffffff166130e2565b90945090508015612dfe57612dfe60405180604001604052808b81526020018381525086888581518110612761576127616137f3565b50612e0881613b2b565b9050612d4e565b509550959350505050565b6000612710612e298385613f3e565b611dd39190614024565b60028351516003811115612e4957612e49613b64565b03612ed157600080846000015160200151806020019051810190612e6d9190613f8e565b915091508460200151600114612ec55760405162461bcd60e51b815260206004820152601260248201527f6572633732312076616c7565206572726f720000000000000000000000000000604482015260640161060d565b610bcd82858584613104565b60018351516003811115612ee757612ee7613b64565b03612f1c576000836000015160200151806020019051810190612f0a9190613fde565b905061097b8184848760200151613183565b60038351516003811115612f3257612f32613b64565b0361056057600080846000015160200151806020019051810190612f569190613f8e565b91509150610bcd8285858489602001516040518060200160405280600081525061320b565b6000612f88848484613292565b15612fd55760405162461bcd60e51b815260206004820152600e60248201527f726f756e64696e67206572726f72000000000000000000000000000000000000604482015260640161060d565b82612fe08386613f3e565b6123099190614024565b606060038251600381111561300157613001613b64565b148061301f575060028251600381111561301d5761301d613b64565b145b156130da57600080836020015180602001905181019061303f9190613f8e565b60fd546040517f9ca7dc7a0000000000000000000000000000000000000000000000000000000081526001600160a01b038085166004830152602482018490529395509193509190911690639ca7dc7a906044016000604051808303816000875af11580156130b2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526123099190810190614046565b506060919050565b6000806130f8856130f38686612e1a565b613332565b91509150935093915050565b6040517f42842e0e0000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301528381166024830152604482018390528516906342842e0e90606401600060405180830381600087803b15801561316f57600080fd5b505af11580156106b8573d6000803e3d6000fd5b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905261097b90859061335f565b6040517ff242432a0000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063f242432a90613258908890889088908890889060040161412d565b600060405180830381600087803b15801561327257600080fd5b505af1158015613286573d6000803e3d6000fd5b50505050505050505050565b6000826000036132e45760405162461bcd60e51b815260206004820152601060248201527f6469766973696f6e206279207a65726f00000000000000000000000000000000604482015260640161060d565b8115806132ef575083155b156132fc57506000611dd3565b6000838061330c5761330c61400e565b858409905061331b8386613f3e565b613327826103e8613f3e565b101595945050505050565b60008082841115613351576133478385613ffb565b9150829050613358565b5060009050825b9250929050565b60006133b4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166134479092919063ffffffff16565b90508051600014806133d55750808060200190518101906133d59190613fbc565b6105605760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161060d565b6060612309848460008585600080866001600160a01b0316858760405161346e9190614165565b60006040518083038185875af1925050503d80600081146134ab576040519150601f19603f3d011682016040523d82523d6000602084013e6134b0565b606091505b5091509150611c02878383876060831561352b578251600003613524576001600160a01b0385163b6135245760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161060d565b5081612309565b61230983838151156135405781518083602001fd5b8060405162461bcd60e51b815260040161060d9190613ee1565b60006020828403121561356c57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114611dd357600080fd5b60008083601f8401126135ae57600080fd5b50813567ffffffffffffffff8111156135c657600080fd5b6020830191508360208260051b850101111561335857600080fd5b600080602083850312156135f457600080fd5b823567ffffffffffffffff81111561360b57600080fd5b6136178582860161359c565b90969095509350505050565b6001600160a01b03811681146107c557600080fd5b803561364381613623565b919050565b60006020828403121561365a57600080fd5b8135611dd381613623565b60006020828403121561367757600080fd5b5035919050565b6000806040838503121561369157600080fd5b50508035926020909101359150565b600080600080600080600060e0888a0312156136bb57600080fd5b87356136c681613623565b965060208801356136d681613623565b9550604088013594506060880135935060808801356136f481613623565b925060a088013561370481613623565b915060c088013561371481613623565b8091505092959891949750929550565b6000806040838503121561373757600080fd5b82359150602083013561374981613623565b809150509250929050565b6000806040838503121561376757600080fd5b823567ffffffffffffffff81111561377e57600080fd5b830160e0818603121561379057600080fd5b946020939093013593505050565b6000806000604084860312156137b357600080fd5b83356137be81613623565b9250602084013567ffffffffffffffff8111156137da57600080fd5b6137e68682870161359c565b9497909650939450505050565b634e487b7160e01b600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8183360301811261383d57600080fd5b9190910192915050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2183360301811261383d57600080fd5b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156138b4576138b461387b565b60405290565b60405160e0810167ffffffffffffffff811182821017156138b4576138b461387b565b604051601f8201601f1916810167ffffffffffffffff811182821017156139065761390661387b565b604052919050565b80356004811061364357600080fd5b60006040828403121561392f57600080fd5b613937613891565b90506139428261390e565b815260208083013567ffffffffffffffff8082111561396057600080fd5b818501915085601f83011261397457600080fd5b8135818111156139865761398661387b565b61399884601f19601f840116016138dd565b915080825286848285010111156139ae57600080fd5b80848401858401376000908201840152918301919091525092915050565b6000604082840312156139de57600080fd5b6139e6613891565b9050813567ffffffffffffffff8111156139ff57600080fd5b613a0b8482850161391d565b8252506020820135602082015292915050565b600060e08236031215613a3057600080fd5b613a386138ba565b613a4183613638565b8152602083013567ffffffffffffffff80821115613a5e57600080fd5b613a6a368387016139cc565b6020840152613a7b60408601613638565b60408401526060850135915080821115613a9457600080fd5b50613aa1368286016139cc565b6060830152506080830135608082015260a083013560a082015260c083013560c082015280915050919050565b6000808335601e19843603018112613ae557600080fd5b83018035915067ffffffffffffffff821115613b0057600080fd5b60200191503681900382131561335857600080fd5b634e487b7160e01b600052601160045260246000fd5b60006000198203613b3e57613b3e613b15565b5060010190565b60008235603e19833603018112613b5b57600080fd5b90910192915050565b634e487b7160e01b600052602160045260246000fd5b60048110613b9857634e487b7160e01b600052602160045260246000fd5b9052565b6000613ba88283613b45565b60408452613bc160408501613bbc8361390e565b613b7a565b6020810135601e19823603018112613bd857600080fd5b0160208101903567ffffffffffffffff811115613bf457600080fd5b803603821315613c0357600080fd5b60406060860152806080860152808260a0870137600060a082870101526020840135602086015260a0601f19601f8301168601019250505092915050565b6020815260008235613c5281613623565b6001600160a01b038116602084015250613c6f6020840184613b45565b60e06040840152613c84610100840182613b9c565b90506040840135613c9481613623565b6001600160a01b038116606085015250613cb16060850185613b45565b601f19848303016080850152613cc78282613b9c565b915050608084013560a084015260a084013560c084015260c084013560e08401528091505092915050565b60005b83811015613d0d578181015183820152602001613cf5565b50506000910152565b60008151808452613d2e816020860160208601613cf2565b601f01601f19169290920160200192915050565b6000815160408452613d58604085018251613b7a565b6020015160406060850152613d706080850182613d16565b602093840151949093019390935250919050565b6060815260006001600160a01b03808651166060840152602086015160e06080850152613db5610140850182613d42565b604088015190921660a08501525060608601518382037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa00160c085015290613dfd8183613d42565b915050608086015160e084015260a086015161010084015260c08601516101208401528281036020840152613e328186613d16565b91505061230960408301846001600160a01b03169052565b60008235603e1983360301811261383d57600080fd5b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613e98816017850160208801613cf2565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351613ed5816028840160208801613cf2565b01602801949350505050565b602081526000611dd36020830184613d16565b60006104d5368361391d565b600060208284031215613f1257600080fd5b611dd38261390e565b8183823760009101908152919050565b808201808211156104d5576104d5613b15565b80820281158282048414176104d5576104d5613b15565b600081613f6457613f64613b15565b506000190190565b83815260608101613f806020830185613b7a565b826040830152949350505050565b60008060408385031215613fa157600080fd5b8251613fac81613623565b6020939093015192949293505050565b600060208284031215613fce57600080fd5b81518015158114611dd357600080fd5b600060208284031215613ff057600080fd5b8151611dd381613623565b818103818111156104d5576104d5613b15565b634e487b7160e01b600052601260045260246000fd5b60008261404157634e487b7160e01b600052601260045260246000fd5b500490565b6000602080838503121561405957600080fd5b825167ffffffffffffffff8082111561407157600080fd5b818501915085601f83011261408557600080fd5b8151818111156140975761409761387b565b6140a5848260051b016138dd565b818152848101925060069190911b8301840190878211156140c557600080fd5b928401925b81841015611c0257604084890312156140e35760008081fd5b6140eb613891565b84516140f681613623565b8152848601516bffffffffffffffffffffffff811681146141175760008081fd5b81870152835260409390930192918401916140ca565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a06080830152611c0260a0830184613d16565b6000825161383d818460208701613cf256fea2646970667358221220ade6588f4beea3a297dfec058606e0ac57e5483fd2ff085c6c7808d33552f83b64736f6c63430008150033",
  "devdoc": {
    "details": "Main functions are in ExchangeCoreTransferManager is used to execute token transfers",
    "events": {
      "Cancel(bytes32,(address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256))": {
        "params": {
          "hash": "order hash"
        }
      },
      "DefaultFeeReceiverSet(address)": {
        "params": {
          "newDefaultFeeReceiver": "address that gets the fees"
        }
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "ProtocolFeeSet(uint256,uint256)": {
        "params": {
          "newProtocolFeePrimary": "fee for primary market",
          "newProtocolFeeSecondary": "fee for secondary market"
        }
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "RoyaltiesRegistrySet(address)": {
        "params": {
          "newRoyaltiesRegistry": "address of new royalties registry"
        }
      },
      "TrustedForwarderSet(address,address,address)": {
        "params": {
          "newTrustedForwarder": "new trusted forwarder",
          "oldTrustedForwarder": "old trusted forwarder",
          "operator": "the sender of the transaction"
        }
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "__Exchange_init(address,address,uint256,uint256,address,address,address)": {
        "params": {
          "admin": "the admin user that can grant/revoke roles, etc.",
          "newDefaultFeeReceiver": "market fee receiver",
          "newProtocolFeePrimary": "protocol fee applied for primary markets",
          "newProtocolFeeSecondary": "protocol fee applied for secondary markets",
          "newRoyaltiesProvider": "registry for the different types of royalties",
          "newTrustedForwarder": "address for trusted forwarder that will execute meta transactions",
          "orderValidatorAddress": "new OrderValidator contract address"
        }
      },
      "cancel((address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes32)": {
        "details": "require msg sender to be order maker and salt different from 0",
        "params": {
          "order": "to be canceled",
          "orderKeyHash": "used as a checksum to avoid mistakes in the values of order"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor",
        "details": "this protects the implementation contract from being initialized."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getTrustedForwarder()": {
        "returns": {
          "_0": "return the address of the trusted forwarder"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isTrustedForwarder(address)": {
        "params": {
          "forwarder": "trusted forwarder address to check"
        },
        "returns": {
          "_0": "true if the address is the same as the trusted forwarder"
        }
      },
      "matchOrders(((address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes,(address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes)[])": {
        "params": {
          "matchedOrders": "a list of left/right orders that match each other"
        }
      },
      "matchOrdersFrom(address,((address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes,(address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes)[])": {
        "params": {
          "matchedOrders": "a list of left/right orders that match each other",
          "sender": "the original sender of the transaction"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setDefaultFeeReceiver(address)": {
        "params": {
          "newDefaultFeeReceiver": "address that gets the fees"
        }
      },
      "setOrderValidatorContract(address)": {
        "params": {
          "contractAddress": "new OrderValidator contract address"
        }
      },
      "setProtocolFee(uint256,uint256)": {
        "params": {
          "newProtocolFeePrimary": "fee for primary market",
          "newProtocolFeeSecondary": "fee for secondary market"
        }
      },
      "setRoyaltiesRegistry(address)": {
        "params": {
          "newRoyaltiesRegistry": "address of new royalties registry"
        }
      },
      "setTrustedForwarder(address)": {
        "params": {
          "newTrustedForwarder": "The new trustedForwarder"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "interface id to check"
        }
      }
    },
    "stateVariables": {
      "ERC1776_OPERATOR_ROLE": {
        "return": "hash for ERC1776_OPERATOR_ROLE",
        "returns": {
          "_0": "hash for ERC1776_OPERATOR_ROLE"
        }
      },
      "EXCHANGE_ADMIN_ROLE": {
        "return": "hash for EXCHANGE_ADMIN_ROLE",
        "returns": {
          "_0": "hash for EXCHANGE_ADMIN_ROLE"
        }
      },
      "PAUSER_ROLE": {
        "return": "hash for PAUSER_ROLE",
        "returns": {
          "_0": "hash for PAUSER_ROLE"
        }
      }
    },
    "title": "Exchange contract with meta transactions",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Cancel(bytes32,(address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256))": {
        "notice": "event signaling that an order was canceled"
      },
      "DefaultFeeReceiverSet(address)": {
        "notice": "event for when a default fee receiver is set"
      },
      "ProtocolFeeSet(uint256,uint256)": {
        "notice": "event for when protocol fees are set"
      },
      "RoyaltiesRegistrySet(address)": {
        "notice": "event for when a royalties registry is set"
      },
      "TrustedForwarderSet(address,address,address)": {
        "notice": "Emitted when a `newTrustedForwarder` is set, replacing the `oldTrustedForwarder`"
      }
    },
    "kind": "user",
    "methods": {
      "ERC1776_OPERATOR_ROLE()": {
        "notice": "role erc1776 trusted meta transaction contracts (Sand for example)."
      },
      "EXCHANGE_ADMIN_ROLE()": {
        "notice": "role business addresses that can change for example: fees and royalties"
      },
      "PAUSER_ROLE()": {
        "notice": "role business addresses that can react on an emergency, pause"
      },
      "__Exchange_init(address,address,uint256,uint256,address,address,address)": {
        "notice": "Exchange contract initializer"
      },
      "cancel((address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes32)": {
        "notice": "cancel order"
      },
      "defaultFeeReceiver()": {
        "notice": "Default receiver of protocol fees"
      },
      "fills(bytes32)": {
        "notice": "stores the fills for orders"
      },
      "getTrustedForwarder()": {
        "notice": "return the address of the trusted forwarder"
      },
      "isTrustedForwarder(address)": {
        "notice": "return true if the forwarder is the trusted forwarder"
      },
      "matchOrders(((address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes,(address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes)[])": {
        "notice": "Match orders and transact"
      },
      "matchOrdersFrom(address,((address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes,(address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes)[])": {
        "notice": "Match orders and transact"
      },
      "orderValidator()": {
        "notice": "OrderValidator contract"
      },
      "protocolFeePrimary()": {
        "notice": "fee for primary sales"
      },
      "protocolFeeSecondary()": {
        "notice": "fee for secondary sales"
      },
      "royaltiesRegistry()": {
        "notice": "Registry for the different royalties"
      },
      "setDefaultFeeReceiver(address)": {
        "notice": "setter for default fee receiver"
      },
      "setOrderValidatorContract(address)": {
        "notice": "set OrderValidator address"
      },
      "setProtocolFee(uint256,uint256)": {
        "notice": "setter for protocol fees"
      },
      "setRoyaltiesRegistry(address)": {
        "notice": "setter for royalty registry"
      },
      "setTrustedForwarder(address)": {
        "notice": "Change the address of the trusted forwarder for meta-transactions"
      },
      "supportsInterface(bytes4)": {
        "notice": "See {IERC165-supportsInterface}."
      },
      "unpause()": {
        "notice": "Returns to normal state."
      }
    },
    "notice": "Used to exchange assets, that is, tokens.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 586,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/exchange/Exchange.sol:Exchange",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 589,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/exchange/Exchange.sol:Exchange",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1974,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/exchange/Exchange.sol:Exchange",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2900,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/exchange/Exchange.sol:Exchange",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/exchange/Exchange.sol:Exchange",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 334,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/exchange/Exchange.sol:Exchange",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7469,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/exchange/Exchange.sol:Exchange",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4490,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/exchange/Exchange.sol:Exchange",
        "label": "orderValidator",
        "offset": 0,
        "slot": "200",
        "type": "t_contract(IOrderValidator)5918"
      },
      {
        "astId": 4502,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/exchange/Exchange.sol:Exchange",
        "label": "fills",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 5035,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/exchange/Exchange.sol:Exchange",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7501,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/exchange/Exchange.sol:Exchange",
        "label": "protocolFeePrimary",
        "offset": 0,
        "slot": "251",
        "type": "t_uint256"
      },
      {
        "astId": 7504,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/exchange/Exchange.sol:Exchange",
        "label": "protocolFeeSecondary",
        "offset": 0,
        "slot": "252",
        "type": "t_uint256"
      },
      {
        "astId": 7508,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/exchange/Exchange.sol:Exchange",
        "label": "royaltiesRegistry",
        "offset": 0,
        "slot": "253",
        "type": "t_contract(IRoyaltiesProvider)5936"
      },
      {
        "astId": 7511,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/exchange/Exchange.sol:Exchange",
        "label": "defaultFeeReceiver",
        "offset": 0,
        "slot": "254",
        "type": "t_address"
      },
      {
        "astId": 8453,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/exchange/Exchange.sol:Exchange",
        "label": "__gap",
        "offset": 0,
        "slot": "255",
        "type": "t_array(t_uint256)46_storage"
      },
      {
        "astId": 3992,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/exchange/Exchange.sol:Exchange",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "301",
        "type": "t_address"
      },
      {
        "astId": 4103,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/exchange/Exchange.sol:Exchange",
        "label": "__gap",
        "offset": 0,
        "slot": "302",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 769,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/exchange/Exchange.sol:Exchange",
        "label": "_paused",
        "offset": 0,
        "slot": "351",
        "type": "t_bool"
      },
      {
        "astId": 874,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/exchange/Exchange.sol:Exchange",
        "label": "__gap",
        "offset": 0,
        "slot": "352",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)46_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[46]",
        "numberOfBytes": "1472"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IOrderValidator)5918": {
        "encoding": "inplace",
        "label": "contract IOrderValidator",
        "numberOfBytes": "20"
      },
      "t_contract(IRoyaltiesProvider)5936": {
        "encoding": "inplace",
        "label": "contract IRoyaltiesProvider",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "@sandbox-smart-contracts/marketplace/contracts/exchange/Exchange.sol:Exchange",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "@sandbox-smart-contracts/marketplace/contracts/exchange/Exchange.sol:Exchange",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}