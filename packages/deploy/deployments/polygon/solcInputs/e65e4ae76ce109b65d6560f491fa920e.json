{
  "language": "Solidity",
  "sources": {
    "@manifoldxyz/royalty-registry-solidity/contracts/overrides/IRoyaltySplitter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @author: manifold.xyz\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\nstruct Recipient {\n    address payable recipient;\n    uint16 bps;\n}\n\ninterface IRoyaltySplitter is IERC165 {\n    /**\n     * @dev Set the splitter recipients. Total bps must total 10000.\n     */\n    function setRecipients(Recipient[] calldata recipients) external;\n\n    /**\n     * @dev Get the splitter recipients;\n     */\n    function getRecipients() external view returns (Recipient[] memory);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerableUpgradeable.sol\";\nimport \"./AccessControlUpgradeable.sol\";\nimport \"../utils/structs/EnumerableSetUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\n    function __AccessControlEnumerable_init() internal onlyInitializing {\n    }\n\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\n    }\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\n\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(account),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/IERC1271Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n *\n * _Available since v4.1._\n */\ninterface IERC1271Upgradeable {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\n\npragma solidity ^0.8.0;\n\ninterface IERC5267Upgradeable {\n    /**\n     * @dev MAY be emitted to signal that the domain could have changed.\n     */\n    event EIP712DomainChanged();\n\n    /**\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n     * signature.\n     */\n    function eip712Domain()\n        external\n        view\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        );\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] calldata accounts,\n        uint256[] calldata ids\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../extensions/IERC20PermitUpgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20PermitUpgradeable token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/draft-EIP712.sol)\n\npragma solidity ^0.8.0;\n\n// EIP-712 is Final as of 2022-08-11. This file is deprecated.\n\nimport \"./EIP712Upgradeable.sol\";\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../StringsUpgradeable.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSAUpgradeable {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", StringsUpgradeable.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.8;\n\nimport \"./ECDSAUpgradeable.sol\";\nimport \"../../interfaces/IERC5267Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n *\n * _Available since v3.4._\n *\n * @custom:storage-size 52\n */\nabstract contract EIP712Upgradeable is Initializable, IERC5267Upgradeable {\n    bytes32 private constant _TYPE_HASH =\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    /// @custom:oz-renamed-from _HASHED_NAME\n    bytes32 private _hashedName;\n    /// @custom:oz-renamed-from _HASHED_VERSION\n    bytes32 private _hashedVersion;\n\n    string private _name;\n    string private _version;\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\n        __EIP712_init_unchained(name, version);\n    }\n\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\n        _name = name;\n        _version = version;\n\n        // Reset prior values in storage if upgrading\n        _hashedName = 0;\n        _hashedVersion = 0;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        return _buildDomainSeparator();\n    }\n\n    function _buildDomainSeparator() private view returns (bytes32) {\n        return keccak256(abi.encode(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash(), block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev See {EIP-5267}.\n     *\n     * _Available since v4.9._\n     */\n    function eip712Domain()\n        public\n        view\n        virtual\n        override\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        )\n    {\n        // If the hashed name and version in storage are non-zero, the contract hasn't been properly initialized\n        // and the EIP712 domain is not reliable, as it will be missing name and version.\n        require(_hashedName == 0 && _hashedVersion == 0, \"EIP712: Uninitialized\");\n\n        return (\n            hex\"0f\", // 01111\n            _EIP712Name(),\n            _EIP712Version(),\n            block.chainid,\n            address(this),\n            bytes32(0),\n            new uint256[](0)\n        );\n    }\n\n    /**\n     * @dev The name parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712Name() internal virtual view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev The version parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712Version() internal virtual view returns (string memory) {\n        return _version;\n    }\n\n    /**\n     * @dev The hash of the name parameter for the EIP712 domain.\n     *\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Name` instead.\n     */\n    function _EIP712NameHash() internal view returns (bytes32) {\n        string memory name = _EIP712Name();\n        if (bytes(name).length > 0) {\n            return keccak256(bytes(name));\n        } else {\n            // If the name is empty, the contract may have been upgraded without initializing the new storage.\n            // We return the name hash in storage if non-zero, otherwise we assume the name is empty by design.\n            bytes32 hashedName = _hashedName;\n            if (hashedName != 0) {\n                return hashedName;\n            } else {\n                return keccak256(\"\");\n            }\n        }\n    }\n\n    /**\n     * @dev The hash of the version parameter for the EIP712 domain.\n     *\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Version` instead.\n     */\n    function _EIP712VersionHash() internal view returns (bytes32) {\n        string memory version = _EIP712Version();\n        if (bytes(version).length > 0) {\n            return keccak256(bytes(version));\n        } else {\n            // If the version is empty, the contract may have been upgraded without initializing the new storage.\n            // We return the version hash in storage if non-zero, otherwise we assume the version is empty by design.\n            bytes32 hashedVersion = _hashedVersion;\n            if (hashedVersion != 0) {\n                return hashedVersion;\n            } else {\n                return keccak256(\"\");\n            }\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[48] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/SignatureCheckerUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/SignatureChecker.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSAUpgradeable.sol\";\nimport \"../../interfaces/IERC1271Upgradeable.sol\";\n\n/**\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\n * Argent and Gnosis Safe.\n *\n * _Available since v4.1._\n */\nlibrary SignatureCheckerUpgradeable {\n    /**\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\n     *\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\n     */\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\n        (address recovered, ECDSAUpgradeable.RecoverError error) = ECDSAUpgradeable.tryRecover(hash, signature);\n        return\n            (error == ECDSAUpgradeable.RecoverError.NoError && recovered == signer) ||\n            isValidERC1271SignatureNow(signer, hash, signature);\n    }\n\n    /**\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\n     * against the signer smart contract using ERC1271.\n     *\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\n     */\n    function isValidERC1271SignatureNow(\n        address signer,\n        bytes32 hash,\n        bytes memory signature\n    ) internal view returns (bool) {\n        (bool success, bytes memory result) = signer.staticcall(\n            abi.encodeWithSelector(IERC1271Upgradeable.isValidSignature.selector, hash, signature)\n        );\n        return (success &&\n            result.length >= 32 &&\n            abi.decode(result, (bytes32)) == bytes32(IERC1271Upgradeable.isValidSignature.selector));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165CheckerUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/introspection/ERC165Checker.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\n\n/**\n * @dev Library used to query support of an interface declared via {IERC165}.\n *\n * Note that these functions return the actual result of the query: they do not\n * `revert` if an interface is not supported. It is up to the caller to decide\n * what to do in these cases.\n */\nlibrary ERC165CheckerUpgradeable {\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\n\n    /**\n     * @dev Returns true if `account` supports the {IERC165} interface.\n     */\n    function supportsERC165(address account) internal view returns (bool) {\n        // Any contract that implements ERC165 must explicitly indicate support of\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\n        return\n            supportsERC165InterfaceUnchecked(account, type(IERC165Upgradeable).interfaceId) &&\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\n    }\n\n    /**\n     * @dev Returns true if `account` supports the interface defined by\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\n        // query support of both ERC165 as per the spec and support of _interfaceId\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\n    }\n\n    /**\n     * @dev Returns a boolean array where each value corresponds to the\n     * interfaces passed in and whether they're supported or not. This allows\n     * you to batch check interfaces for a contract where your expectation\n     * is that some interfaces may not be supported.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * _Available since v3.4._\n     */\n    function getSupportedInterfaces(\n        address account,\n        bytes4[] memory interfaceIds\n    ) internal view returns (bool[] memory) {\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\n\n        // query support of ERC165 itself\n        if (supportsERC165(account)) {\n            // query support of each interface in interfaceIds\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\n            }\n        }\n\n        return interfaceIdsSupported;\n    }\n\n    /**\n     * @dev Returns true if `account` supports all the interfaces defined in\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\n     *\n     * Batch-querying can lead to gas savings by skipping repeated checks for\n     * {IERC165} support.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\n        // query support of ERC165 itself\n        if (!supportsERC165(account)) {\n            return false;\n        }\n\n        // query support of each interface in interfaceIds\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\n                return false;\n            }\n        }\n\n        // all interfaces supported\n        return true;\n    }\n\n    /**\n     * @notice Query if a contract implements an interface, does not check ERC165 support\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @return true if the contract at account indicates support of the interface with\n     * identifier interfaceId, false otherwise\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\n     * the behavior of this method is undefined. This precondition can be checked\n     * with {supportsERC165}.\n     *\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\n     * should be exercised when using this function.\n     *\n     * Interface identification is specified in ERC-165.\n     */\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\n        // prepare call\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165Upgradeable.supportsInterface.selector, interfaceId);\n\n        // perform static call\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly {\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0x00)\n        }\n\n        return success && returnSize >= 0x20 && returnValue > 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMathUpgradeable {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\nimport \"./math/SignedMathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMathUpgradeable.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSetUpgradeable {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(\n        uint256 tokenId,\n        uint256 salePrice\n    ) external view returns (address receiver, uint256 royaltyAmount);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@sandbox-smart-contracts/dependency-metatx/contracts/ERC2771HandlerAbstract.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @dev minimal ERC2771 handler to keep bytecode-size down\n/// based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/metatx/ERC2771Context.sol\nabstract contract ERC2771HandlerAbstract {\n    /// @notice return true if the forwarder is the trusted forwarder\n    /// @param forwarder trusted forwarder address to check\n    /// @return true if the address is the same as the trusted forwarder\n    function isTrustedForwarder(address forwarder) external view returns (bool) {\n        return _isTrustedForwarder(forwarder);\n    }\n\n    /// @notice if the call is from the trusted forwarder the sender is extracted from calldata, msg.sender otherwise\n    /// @return sender the calculated address of the sender\n    function _msgSender() internal view virtual returns (address sender) {\n        if (_isTrustedForwarder(msg.sender) && msg.data.length >= 20) {\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\n            }\n        } else {\n            sender = msg.sender;\n        }\n    }\n\n    /// @notice if the call is from the trusted forwarder the sender is removed from calldata\n    /// @return the calldata without the sender\n    function _msgData() internal view virtual returns (bytes calldata) {\n        if (_isTrustedForwarder(msg.sender) && msg.data.length >= 20) {\n            return msg.data[:msg.data.length - 20];\n        } else {\n            return msg.data;\n        }\n    }\n\n    /// @notice return true if the forwarder is the trusted forwarder\n    /// @param forwarder trusted forwarder address to check\n    /// @return true if the address is the same as the trusted forwarder\n    /// @dev this function must be IMPLEMENTED\n    function _isTrustedForwarder(address forwarder) internal view virtual returns (bool);\n}\n"
    },
    "@sandbox-smart-contracts/dependency-metatx/contracts/ERC2771HandlerUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {ERC2771HandlerAbstract} from \"./ERC2771HandlerAbstract.sol\";\n\n/// @dev minimal ERC2771 handler to keep bytecode-size down\n/// based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/metatx/ERC2771Context.sol\ncontract ERC2771HandlerUpgradeable is Initializable, ERC2771HandlerAbstract {\n    address private _trustedForwarder;\n\n    /// @notice Emitted when a `newTrustedForwarder` is set, replacing the `oldTrustedForwarder`\n    /// @param oldTrustedForwarder old trusted forwarder\n    /// @param newTrustedForwarder new trusted forwarder\n    /// @param operator the sender of the transaction\n    event TrustedForwarderSet(\n        address indexed oldTrustedForwarder,\n        address indexed newTrustedForwarder,\n        address indexed operator\n    );\n\n    /// @notice initialize the trusted forwarder address\n    /// @param forwarder trusted forwarder address or zero to disable it\n    // solhint-disable-next-line func-name-mixedcase\n    function __ERC2771Handler_init(address forwarder) internal onlyInitializing {\n        __ERC2771Handler_init_unchained(forwarder);\n    }\n\n    /// @notice initialize the trusted forwarder address\n    /// @param forwarder trusted forwarder address or zero to disable it\n    // solhint-disable-next-line func-name-mixedcase\n    function __ERC2771Handler_init_unchained(address forwarder) internal onlyInitializing {\n        _setTrustedForwarder(forwarder);\n    }\n\n    /// @notice return the address of the trusted forwarder\n    /// @return return the address of the trusted forwarder\n    function getTrustedForwarder() external view returns (address) {\n        return _trustedForwarder;\n    }\n\n    /// @notice set the address of the trusted forwarder\n    /// @param newForwarder the address of the new forwarder.\n    function _setTrustedForwarder(address newForwarder) internal virtual {\n        require(newForwarder != _trustedForwarder, \"ERC2771HandlerUpgradeable: forwarder already set\");\n        emit TrustedForwarderSet(_trustedForwarder, newForwarder, _msgSender());\n        _trustedForwarder = newForwarder;\n    }\n\n    /// @notice return true if the forwarder is the trusted forwarder\n    /// @param forwarder trusted forwarder address to check\n    /// @return true if the address is the same as the trusted forwarder\n    function _isTrustedForwarder(address forwarder) internal view virtual override returns (bool) {\n        return forwarder == _trustedForwarder;\n    }\n\n    /// @notice if the call is from the trusted forwarder the sender is extracted from calldata, msg.sender otherwise\n    /// @return sender the calculated address of the sender\n    function _msgSender() internal view virtual override returns (address sender) {\n        return super._msgSender();\n    }\n\n    /// @notice if the call is from the trusted forwarder the sender is removed from calldata\n    /// @return the calldata without the sender\n    function _msgData() internal view virtual override returns (bytes calldata) {\n        return super._msgData();\n    }\n\n    uint256[49] private __gap;\n}\n"
    },
    "@sandbox-smart-contracts/dependency-royalty-management/contracts/interfaces/IMultiRoyaltyRecipients.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {Recipient} from \"@manifoldxyz/royalty-registry-solidity/contracts/overrides/IRoyaltySplitter.sol\";\n\n/// Multi-receiver EIP2981 implementation\ninterface IMultiRoyaltyRecipients is IERC165 {\n    /// @dev Helper function to get all recipients\n    function getRecipients(uint256 tokenId) external view returns (Recipient[] memory);\n}\n"
    },
    "@sandbox-smart-contracts/dependency-royalty-management/contracts/interfaces/IRoyaltyUGC.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @title IRoyaltyUGC\n/// @notice interface define function for managing creator of UGC (User-Generated Content)\ninterface IRoyaltyUGC {\n    ///@notice Gets the address of the creator associated with a specific token.\n    ///@param tokenId the Id of token to retrieve the creator address for\n    ///@return creator the address of creator\n    function getCreatorAddress(uint256 tokenId) external pure returns (address creator);\n}\n"
    },
    "@sandbox-smart-contracts/marketplace/contracts/Exchange.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport {PausableUpgradeable} from \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {AccessControlEnumerableUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\";\nimport {ContextUpgradeable} from \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\nimport {ERC2771HandlerUpgradeable} from \"@sandbox-smart-contracts/dependency-metatx/contracts/ERC2771HandlerUpgradeable.sol\";\nimport {IOrderValidator} from \"./interfaces/IOrderValidator.sol\";\nimport {TransferManager, IRoyaltiesProvider} from \"./TransferManager.sol\";\nimport {LibOrder} from \"./libraries/LibOrder.sol\";\nimport {ExchangeCore} from \"./ExchangeCore.sol\";\n\n/// @author The Sandbox\n/// @title Exchange contract with meta transactions\n/// @notice Used to exchange assets, that is, tokens.\n/// @dev Main functions are in ExchangeCore\n/// @dev TransferManager is used to execute token transfers\ncontract Exchange is\n    Initializable,\n    AccessControlEnumerableUpgradeable,\n    ExchangeCore,\n    TransferManager,\n    ERC2771HandlerUpgradeable,\n    PausableUpgradeable\n{\n    /// @notice Role for ERC1776 trusted meta transaction contracts (like SAND).\n    /// @return Hash for ERC1776_OPERATOR_ROLE.\n    bytes32 public constant ERC1776_OPERATOR_ROLE = keccak256(\"ERC1776_OPERATOR_ROLE\");\n\n    /// @notice Role for business addresses that can change values like fees and royalties.\n    /// @return Hash for EXCHANGE_ADMIN_ROLE.\n    bytes32 public constant EXCHANGE_ADMIN_ROLE = keccak256(\"EXCHANGE_ADMIN_ROLE\");\n\n    /// @notice Role for business addresses that can react to emergencies and pause.\n    /// @return Hash for PAUSER_ROLE.\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    /// @dev This protects the implementation contract from being initialized.\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    /// @notice Exchange contract initializer.\n    /// @param admin The admin user that can grant/revoke roles, etc.\n    /// @param newTrustedForwarder Address for the trusted forwarder that will execute meta transactions.\n    /// @param newProtocolFeePrimary Protocol fee applied to primary markets.\n    /// @param newProtocolFeeSecondary Protocol fee applied to secondary markets.\n    /// @param newDefaultFeeReceiver Market fee receiver.\n    /// @param newRoyaltiesProvider Registry for the different types of royalties.\n    /// @param orderValidatorAddress New OrderValidator contract address.\n    function initialize(\n        address admin,\n        address newTrustedForwarder,\n        uint256 newProtocolFeePrimary,\n        uint256 newProtocolFeeSecondary,\n        address newDefaultFeeReceiver,\n        IRoyaltiesProvider newRoyaltiesProvider,\n        IOrderValidator orderValidatorAddress,\n        uint256 newMatchOrdersLimit\n    ) external initializer {\n        __ERC2771Handler_init_unchained(newTrustedForwarder);\n        __AccessControlEnumerable_init_unchained();\n        __Pausable_init_unchained();\n        __TransferManager_init_unchained(\n            newProtocolFeePrimary,\n            newProtocolFeeSecondary,\n            newDefaultFeeReceiver,\n            newRoyaltiesProvider\n        );\n        __ExchangeCoreInitialize(orderValidatorAddress, newMatchOrdersLimit);\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\n    }\n\n    /// @notice Match orders and transact.\n    /// @param matchedOrders A list of left/right orders that match each other.\n    function matchOrders(ExchangeMatch[] calldata matchedOrders) external whenNotPaused {\n        _matchOrders(_msgSender(), matchedOrders);\n    }\n\n    /// @notice Match orders and transact.\n    /// @param sender The original sender of the transaction.\n    /// @param matchedOrders A list of left/right orders that match each other.\n    /// @dev This method supports ERC1776 native meta transactions.\n    function matchOrdersFrom(\n        address sender,\n        ExchangeMatch[] calldata matchedOrders\n    ) external onlyRole(ERC1776_OPERATOR_ROLE) whenNotPaused {\n        require(sender != address(0), \"invalid sender\");\n        _matchOrders(sender, matchedOrders);\n    }\n\n    /// @notice Cancel an order.\n    /// @param order The order to be canceled.\n    /// @param orderKeyHash Used as a checksum to avoid mistakes in the order values.\n    function cancel(LibOrder.Order calldata order, bytes32 orderKeyHash) external {\n        require(_msgSender() == order.maker, \"not maker\");\n        _cancel(order, orderKeyHash);\n    }\n\n    /// @notice Set the royalty registry.\n    /// @param newRoyaltiesRegistry Address of the new royalties registry.\n    function setRoyaltiesRegistry(IRoyaltiesProvider newRoyaltiesRegistry) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        _setRoyaltiesRegistry(newRoyaltiesRegistry);\n    }\n\n    /// @notice Set the OrderValidator address.\n    /// @param contractAddress New OrderValidator contract address.\n    function setOrderValidatorContract(IOrderValidator contractAddress) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        _setOrderValidatorContract(contractAddress);\n    }\n\n    /// @notice Set the limit for matching orders.\n    /// @param newMatchOrdersLimit New value for max orders that can be matched.\n    function setMatchOrdersLimit(uint256 newMatchOrdersLimit) external onlyRole(EXCHANGE_ADMIN_ROLE) {\n        _setMatchOrdersLimit(newMatchOrdersLimit);\n    }\n\n    /// @notice Change the address of the trusted forwarder for meta-transactions.\n    /// @param newTrustedForwarder The new trusted forwarder address.\n    function setTrustedForwarder(address newTrustedForwarder) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        _setTrustedForwarder(newTrustedForwarder);\n    }\n\n    /// @notice Set the protocol fees.\n    /// @param newProtocolFeePrimary Fee for the primary market.\n    /// @param newProtocolFeeSecondary Fee for the secondary market.\n    function setProtocolFee(\n        uint256 newProtocolFeePrimary,\n        uint256 newProtocolFeeSecondary\n    ) external onlyRole(EXCHANGE_ADMIN_ROLE) {\n        _setProtocolFee(newProtocolFeePrimary, newProtocolFeeSecondary);\n    }\n\n    /// @notice Set the default fee receiver.\n    /// @param newDefaultFeeReceiver Address to receive the fees.\n    function setDefaultFeeReceiver(address newDefaultFeeReceiver) external onlyRole(EXCHANGE_ADMIN_ROLE) {\n        _setDefaultFeeReceiver(newDefaultFeeReceiver);\n    }\n\n    /// @notice Pause the contract operations.\n    function pause() external onlyRole(PAUSER_ROLE) {\n        _pause();\n    }\n\n    /// @notice Resume the contract operations.\n    function unpause() external onlyRole(EXCHANGE_ADMIN_ROLE) {\n        _unpause();\n    }\n\n    /// @dev Check if fees & royalties should be skipped for users with the EXCHANGE_ADMIN_ROLE.\n    /// @param from Address to check.\n    /// @return True if fees should be skipped, false otherwise.\n    function _mustSkipFees(address from) internal view override returns (bool) {\n        return hasRole(EXCHANGE_ADMIN_ROLE, from);\n    }\n\n    function _msgSender()\n        internal\n        view\n        virtual\n        override(ContextUpgradeable, ERC2771HandlerUpgradeable)\n        returns (address)\n    {\n        return ERC2771HandlerUpgradeable._msgSender();\n    }\n\n    // slither-disable-next-line dead-code needed because of inheritance\n    function _msgData() internal view override(ContextUpgradeable, ERC2771HandlerUpgradeable) returns (bytes calldata) {\n        return ERC2771HandlerUpgradeable._msgData();\n    }\n}\n"
    },
    "@sandbox-smart-contracts/marketplace/contracts/ExchangeCore.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {AddressUpgradeable} from \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\nimport {LibAsset} from \"./libraries/LibAsset.sol\";\nimport {LibOrder} from \"./libraries/LibOrder.sol\";\nimport {ITransferManager} from \"./interfaces/ITransferManager.sol\";\nimport {IOrderValidator} from \"./interfaces/IOrderValidator.sol\";\n\n/// @author The Sandbox\n/// @title ExchangeCore Contract\n/// @notice Contains the main functions for the marketplace.\n/// @dev This is an abstract contract that requires implementation.\nabstract contract ExchangeCore is Initializable, ITransferManager {\n    using AddressUpgradeable for address;\n    /// @dev Stores left and right orders that match each other.\n    /// Left and right are symmetrical except for fees that are taken from the left side first.\n    struct ExchangeMatch {\n        LibOrder.Order orderLeft; // Left order details\n        bytes signatureLeft; // Signature of the left order\n        LibOrder.Order orderRight; // Right order details\n        bytes signatureRight; // Signature of the right order\n    }\n\n    /// @dev Address of the OrderValidator contract.\n    IOrderValidator public orderValidator;\n\n    /// @dev Limit for the number of orders that can be matched in a single transaction.\n    uint256 private matchOrdersLimit;\n\n    /// @dev Mapping to store the fill amount for each order, identified by its hash.\n    mapping(bytes32 orderKeyHash => uint256 orderFillValue) public fills;\n\n    /// @notice Event emitted when an order is canceled.\n    /// @param orderKeyHash The hash of the order being canceled.\n    /// @param order The details of the order being canceled.\n    event Cancel(bytes32 indexed orderKeyHash, LibOrder.Order order);\n\n    /// @notice Event emitted when two orders are matched.\n    /// @param from Address that initiated the match.\n    /// @param orderKeyHashLeft Hash of the left order.\n    /// @param orderKeyHashRight Hash of the right order.\n    /// @param orderLeft Details of the left order.\n    /// @param orderRight Details of the right order.\n    /// @param newFill Fill details resulting from the order match.\n    /// @param totalFillLeft Total fill amount for the left order.\n    /// @param totalFillRight Total fill amount for the right order.\n    event Match(\n        address indexed from,\n        bytes32 indexed orderKeyHashLeft,\n        bytes32 indexed orderKeyHashRight,\n        LibOrder.Order orderLeft,\n        LibOrder.Order orderRight,\n        LibOrder.FillResult newFill,\n        uint256 totalFillLeft,\n        uint256 totalFillRight\n    );\n\n    /// @notice Event emitted when a new OrderValidator contract is set.\n    /// @param contractAddress Address of the new OrderValidator contract.\n    event OrderValidatorSet(IOrderValidator indexed contractAddress);\n\n    /// @notice Event emitted when the match orders limit is updated.\n    /// @param newMatchOrdersLimit The new limit for matching orders in one transaction.\n    event MatchOrdersLimitSet(uint256 indexed newMatchOrdersLimit);\n\n    /// @dev Constructor to disable initializers for this contract.\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    /// @notice Initializes the ExchangeCore contract.\n    /// @param newOrderValidatorAddress Address of the new OrderValidator contract.\n    /// @param newMatchOrdersLimit The limit for matching orders in one transaction.\n    // solhint-disable-next-line func-name-mixedcase\n    function __ExchangeCoreInitialize(\n        IOrderValidator newOrderValidatorAddress,\n        uint256 newMatchOrdersLimit\n    ) internal onlyInitializing {\n        _setOrderValidatorContract(newOrderValidatorAddress);\n        _setMatchOrdersLimit(newMatchOrdersLimit);\n    }\n\n    /// @notice Updates the OrderValidator contract address.\n    /// @param contractAddress Address of the new OrderValidator contract.\n    function _setOrderValidatorContract(IOrderValidator contractAddress) internal {\n        require(address(contractAddress).isContract(), \"invalid order validator\");\n        orderValidator = contractAddress;\n        emit OrderValidatorSet(contractAddress);\n    }\n\n    /// @notice Updates the limit for the number of orders that can be matched in a single transaction.\n    /// @param newMatchOrdersLimit The new limit for matching orders.\n    function _setMatchOrdersLimit(uint256 newMatchOrdersLimit) internal {\n        require(newMatchOrdersLimit > 0, \"invalid quantity\");\n        matchOrdersLimit = newMatchOrdersLimit;\n        emit MatchOrdersLimitSet(matchOrdersLimit);\n    }\n\n    /// @notice Cancels a specified order.\n    /// @param order Details of the order to be canceled.\n    /// @param orderKeyHash The hash of the order, used for verification.\n    function _cancel(LibOrder.Order calldata order, bytes32 orderKeyHash) internal {\n        require(order.salt != 0, \"0 salt can't be used\");\n        bytes32 _orderKeyHash = LibOrder.hashKey(order);\n        require(_orderKeyHash == orderKeyHash, \"invalid orderHash\");\n        fills[orderKeyHash] = type(uint256).max;\n        emit Cancel(orderKeyHash, order);\n    }\n\n    /// @notice Matches provided orders and performs the transaction.\n    /// @param sender The original sender of the transaction.\n    /// @param matchedOrders Array of orders that are matched with each other.\n    function _matchOrders(address sender, ExchangeMatch[] calldata matchedOrders) internal {\n        uint256 len = matchedOrders.length;\n        require(len > 0, \"ExchangeMatch cannot be empty\");\n        require(len <= matchOrdersLimit, \"too many ExchangeMatch\");\n        for (uint256 i; i < len; i++) {\n            ExchangeMatch calldata m = matchedOrders[i];\n            _validateOrders(sender, m.orderLeft, m.signatureLeft, m.orderRight, m.signatureRight);\n            _matchAndTransfer(sender, m.orderLeft, m.orderRight);\n        }\n    }\n\n    /// @dev Validates the provided orders.\n    /// @param sender Address of the sender.\n    /// @param orderLeft Details of the left order.\n    /// @param signatureLeft Signature of the left order.\n    /// @param orderRight Details of the right order.\n    /// @param signatureRight Signature of the right order.\n    function _validateOrders(\n        address sender,\n        LibOrder.Order memory orderLeft,\n        bytes memory signatureLeft,\n        LibOrder.Order memory orderRight,\n        bytes memory signatureRight\n    ) internal view {\n        // validate must force order.maker != address(0)\n        orderValidator.validate(orderLeft, signatureLeft, sender);\n        orderValidator.validate(orderRight, signatureRight, sender);\n        if (orderLeft.taker != address(0)) {\n            require(orderRight.maker == orderLeft.taker, \"leftOrder.taker failed\");\n        }\n        if (orderRight.taker != address(0)) {\n            require(orderRight.taker == orderLeft.maker, \"rightOrder.taker failed\");\n        }\n    }\n\n    /// @notice Matches valid orders and transfers the associated assets.\n    /// @param sender Address initiating the match.\n    /// @param orderLeft The left order.\n    /// @param orderRight The right order.\n    function _matchAndTransfer(\n        address sender,\n        LibOrder.Order calldata orderLeft,\n        LibOrder.Order calldata orderRight\n    ) internal {\n        LibAsset.AssetType memory makeMatch = LibAsset.matchAssets(\n            orderLeft.makeAsset.assetType,\n            orderRight.takeAsset.assetType\n        );\n        LibAsset.AssetType memory takeMatch = LibAsset.matchAssets(\n            orderLeft.takeAsset.assetType,\n            orderRight.makeAsset.assetType\n        );\n\n        LibOrder.FillResult memory newFill = _parseOrdersSetFillEmitMatch(sender, orderLeft, orderRight);\n\n        doTransfers(\n            ITransferManager.DealSide(LibAsset.Asset(makeMatch, newFill.leftValue), orderLeft.maker),\n            ITransferManager.DealSide(LibAsset.Asset(takeMatch, newFill.rightValue), orderRight.maker),\n            LibAsset.getFeeSide(makeMatch.assetClass, takeMatch.assetClass)\n        );\n    }\n\n    /// @notice Parse orders to get the order data, then create a new fill with setFillEmitMatch()\n    /// @param sender The message sender\n    /// @param orderLeft Left order\n    /// @param orderRight Right order\n    /// @return newFill Fill result\n    function _parseOrdersSetFillEmitMatch(\n        address sender,\n        LibOrder.Order calldata orderLeft,\n        LibOrder.Order calldata orderRight\n    ) internal returns (LibOrder.FillResult memory newFill) {\n        bytes32 orderKeyHashLeft = LibOrder.hashKey(orderLeft);\n        bytes32 orderKeyHashRight = LibOrder.hashKey(orderRight);\n\n        uint256 leftOrderFill = _getOrderFill(orderLeft.salt, orderKeyHashLeft);\n        uint256 rightOrderFill = _getOrderFill(orderRight.salt, orderKeyHashRight);\n        newFill = LibOrder.fillOrder(orderLeft, orderRight, leftOrderFill, rightOrderFill);\n\n        require(newFill.rightValue > 0 && newFill.leftValue > 0, \"nothing to fill\");\n\n        if (orderLeft.salt != 0) {\n            fills[orderKeyHashLeft] = leftOrderFill + newFill.rightValue;\n        }\n\n        if (orderRight.salt != 0) {\n            fills[orderKeyHashRight] = rightOrderFill + newFill.leftValue;\n        }\n\n        emit Match({\n            from: sender,\n            orderKeyHashLeft: orderKeyHashLeft,\n            orderKeyHashRight: orderKeyHashRight,\n            orderLeft: orderLeft,\n            orderRight: orderRight,\n            newFill: newFill,\n            totalFillLeft: fills[orderKeyHashLeft],\n            totalFillRight: fills[orderKeyHashRight]\n        });\n        return newFill;\n    }\n\n    /// @notice Return fill corresponding to order hash\n    /// @param salt If salt 0, fill = 0\n    /// @param hash Order hash\n    function _getOrderFill(uint256 salt, bytes32 hash) internal view returns (uint256 fill) {\n        if (salt == 0) {\n            fill = 0;\n        } else {\n            fill = fills[hash];\n        }\n    }\n\n    // slither-disable-next-line unused-state\n    uint256[49] private __gap;\n}\n"
    },
    "@sandbox-smart-contracts/marketplace/contracts/interfaces/IOrderValidator.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport {LibOrder} from \"../libraries/LibOrder.sol\";\n\n/// @author The Sandbox\n/// @title OrderValidator contract interface\n/// @notice Contains the signature for validate, isPurchaseValid and verifyERC20Whitelist functions\ninterface IOrderValidator {\n    /// @notice Verifies order\n    /// @param order Order to be validated\n    /// @param signature Signature of order\n    /// @param sender Order sender\n    function validate(LibOrder.Order memory order, bytes memory signature, address sender) external view;\n}\n"
    },
    "@sandbox-smart-contracts/marketplace/contracts/interfaces/IRoyaltiesProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\n// The IRoyaltiesProvider.Part.basisPoints represents percentages in base points: 2.5 % == 0.025 * 10000 == 250.\n// We expect external contracts to return the values with this precision.\nuint256 constant TOTAL_BASIS_POINTS = 10000;\n\n/// @author The Sandbox\n/// @title RoyaltiesProvider contract interface\n/// @notice Contains the signature for the getRoyalties function\ninterface IRoyaltiesProvider {\n    struct Part {\n        address account;\n        uint256 basisPoints;\n    }\n\n    /// @notice Calculates all royalties in token for tokenId\n    /// @param token Address of token\n    /// @param tokenId of the token we want to calculate royalties\n    /// @return A part with all royalties for token\n    function getRoyalties(address token, uint256 tokenId) external returns (Part[] memory);\n}\n"
    },
    "@sandbox-smart-contracts/marketplace/contracts/interfaces/ITransferManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport {LibAsset} from \"../libraries/LibAsset.sol\";\n\n/// @author The Sandbox\n/// @title ITransferManager Interface\n/// @notice Provides an interface for managing transfers of assets between matched orders.\nabstract contract ITransferManager {\n    /// @dev Represents a side (either maker or taker) of a deal.\n    /// Each side has an associated asset and an account address.\n    struct DealSide {\n        LibAsset.Asset asset; // The asset associated with this side of the deal.\n        address account; // The account address associated with this side of the deal.\n    }\n\n    /// @notice Executes the asset transfers associated with two matched orders.\n    /// @param left The DealSide representing the left order's side.\n    /// @param right The DealSide representing the right order's side.\n    /// @param feeSide Indicates which side of the deal will bear the fee.\n    /// @dev This function serves as the primary entry point for asset transfers.\n    /// If used in a separate contract, the visibility of this method might change to external.\n    function doTransfers(DealSide memory left, DealSide memory right, LibAsset.FeeSide feeSide) internal virtual;\n}\n"
    },
    "@sandbox-smart-contracts/marketplace/contracts/interfaces/IWhitelist.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\n/// @author The Sandbox\n/// @title Interface for the Whitelist contract\n/// @notice Contains the function signatures for the contract.\ninterface IWhitelist {\n    /// @notice Check if a specific role is enabled or disabled.\n    /// @param role The role identifier.\n    /// @return True if the role is enabled, false if disabled.\n    function isRoleEnabled(bytes32 role) external view returns (bool);\n\n    /// @notice Check if whitelists are enabled.\n    /// @return True if whitelists are enabled, false if disabled.\n    function isWhitelistsEnabled() external view returns (bool);\n\n    /// @notice Setting permissions for tokens.\n    /// @param roles Roles we want to enable or disable.\n    /// @param permissions Boolean.\n    function setRolesEnabled(bytes32[] calldata roles, bool[] calldata permissions) external;\n\n    /// @notice Enable role.\n    /// @param role Role we want to enable.\n    function enableRole(bytes32 role) external;\n\n    /// @notice Disable role.\n    /// @param role Role we want to disable.\n    function disableRole(bytes32 role) external;\n\n    /// @notice Enable whitelists, allowing orders with any token except for ERC20 tokens.\n    function enableWhitelists() external;\n\n    /// @notice Disable whitelists, requiring orders to refer to the specified whitelists.\n    function disableWhitelists() external;\n}\n"
    },
    "@sandbox-smart-contracts/marketplace/contracts/libraries/LibAsset.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\n/// @author The Sandbox\n/// @title LibAsset: A library for handling different types of Ethereum assets.\n/// @notice This library contains structs, enums, and utility functions for managing and processing Ethereum assets.\nlibrary LibAsset {\n    /// @dev Represents different types of assets on the Ethereum network.\n    enum AssetClass {\n        INVALID, // Represents an invalid asset type.\n        ERC20, // Represents an ERC20 token.\n        ERC721, // Represents a single ERC721 token.\n        ERC1155 // Represents an ERC1155 token.\n    }\n\n    /// @dev Represents the side of the trade from which a fee should be taken, if any.\n    enum FeeSide {\n        NONE, // No fees are taken.\n        LEFT, // Fees are taken from the left side of the trade.\n        RIGHT // Fees are taken from the right side of the trade.\n    }\n\n    /// @dev Represents the type of a specific asset.\n    /// AssetType can represent a specific ERC-721 token (defined by the token contract address and tokenId) or\n    /// a specific ERC-20 token (like DAI).\n    struct AssetType {\n        AssetClass assetClass; // The class of the asset (ERC20, ERC721, etc.).\n        bytes data; // Contains the token's contract address and possibly its tokenId.\n    }\n\n    /// @dev Represents any asset on the Ethereum blockchain with its type and value.\n    struct Asset {\n        AssetType assetType; // The type of the asset.\n        uint256 value; // The amount or value of the asset.\n    }\n\n    bytes32 internal constant ASSET_TYPE_TYPEHASH = keccak256(\"AssetType(uint256 assetClass,bytes data)\");\n\n    bytes32 internal constant ASSET_TYPEHASH =\n        keccak256(\"Asset(AssetType assetType,uint256 value)AssetType(uint256 assetClass,bytes data)\");\n\n    /// @notice Determine which side of a trade should bear the fee, based on the asset types.\n    /// @param leftClass The asset class type of the left side of the trade.\n    /// @param rightClass The asset class type of the right side of the trade.\n    /// @return FeeSide representing which side should bear the fee, if any.\n    function getFeeSide(AssetClass leftClass, AssetClass rightClass) internal pure returns (FeeSide) {\n        if (leftClass == AssetClass.ERC20 && rightClass != AssetClass.ERC20) {\n            return FeeSide.LEFT;\n        }\n        if (rightClass == AssetClass.ERC20 && leftClass != AssetClass.ERC20) {\n            return FeeSide.RIGHT;\n        }\n        return FeeSide.NONE;\n    }\n\n    /// @notice Check if two asset types match.\n    /// @param leftType Asset type on the left side of a trade.\n    /// @param rightType Asset type on the right side of a trade.\n    /// @return AssetType representing the matched asset type.\n    function matchAssets(\n        AssetType calldata leftType,\n        AssetType calldata rightType\n    ) internal pure returns (AssetType memory) {\n        AssetClass classLeft = leftType.assetClass;\n        AssetClass classRight = rightType.assetClass;\n\n        require(classLeft != AssetClass.INVALID, \"invalid left asset class\");\n        require(classRight != AssetClass.INVALID, \"invalid right asset class\");\n        require(classLeft == classRight, \"assets don't match\");\n\n        bytes32 leftHash = keccak256(leftType.data);\n        bytes32 rightHash = keccak256(rightType.data);\n        require(leftHash == rightHash, \"assets don't match\");\n\n        return leftType;\n    }\n\n    /// @notice Compute the hash of an asset type.\n    /// @param assetType The asset type to hash.\n    /// @return The hash of the asset type.\n    function hash(AssetType memory assetType) internal pure returns (bytes32) {\n        return keccak256(abi.encode(ASSET_TYPE_TYPEHASH, assetType.assetClass, keccak256(assetType.data)));\n    }\n\n    /// @notice Compute the hash of an asset.\n    /// @param asset The asset to hash.\n    /// @return The hash of the asset.\n    function hash(Asset memory asset) internal pure returns (bytes32) {\n        return keccak256(abi.encode(ASSET_TYPEHASH, hash(asset.assetType), asset.value));\n    }\n\n    /// @notice Decode the token details (address and tokenId) from an AssetType.\n    /// @param assetType The asset type to decode.\n    /// @return Address of the token\n    /// @return Id of the token\n    function decodeToken(AssetType memory assetType) internal pure returns (address, uint256) {\n        return abi.decode(assetType.data, (address, uint256));\n    }\n\n    /// @notice Decode the token address from an AssetType.\n    /// @param assetType The asset type to decode.\n    /// @return The address of the token.\n    function decodeAddress(AssetType memory assetType) internal pure returns (address) {\n        return abi.decode(assetType.data, (address));\n    }\n}\n"
    },
    "@sandbox-smart-contracts/marketplace/contracts/libraries/LibMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\n/// @author The Sandbox\n/// @title LibMath: A library for handling specific math operations.\nlibrary LibMath {\n    uint256 internal constant ACCEPTABLE_RELATIVE_ERROR = 1000;\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount value of target rounded down.\n    function safeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    ) internal pure returns (uint256 partialAmount) {\n        if (isRoundingErrorFloor(numerator, denominator, target)) {\n            revert(\"rounding error\");\n        }\n        partialAmount = (numerator * target) / (denominator);\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    ) internal pure returns (bool isError) {\n        if (denominator == 0) {\n            revert(\"division by zero\");\n        }\n\n        // The absolute rounding error is the difference between the rounded\n        // value and the ideal value. The relative rounding error is the\n        // absolute rounding error divided by the absolute value of the\n        // ideal value. This is undefined when the ideal value is zero.\n        //\n        // The ideal value is `numerator * target / denominator`.\n        // Let's call `numerator * target % denominator` the remainder.\n        // The absolute error is `remainder / denominator`.\n        //\n        // When the ideal value is zero, we require the absolute error to\n        // be zero. Fortunately, this is always the case. The ideal value is\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\n        // remainder and absolute error are also zero.\n        if (target == 0 || numerator == 0) {\n            return false;\n        }\n\n        // Otherwise, we want the relative rounding error to be strictly\n        // less than 0.1%.\n        // The relative error is `remainder / (numerator * target)`.\n        // We want the relative error less than 1 / 1000:\n        //        remainder / (numerator * target)  <  1 / 1000\n        // or equivalently:\n        //        1000 * remainder  <  numerator * target\n        // so we have a rounding error iff:\n        //        1000 * remainder  >=  numerator * target\n        uint256 remainder = mulmod(target, numerator, denominator);\n        isError = remainder * ACCEPTABLE_RELATIVE_ERROR >= numerator * target;\n    }\n}\n"
    },
    "@sandbox-smart-contracts/marketplace/contracts/libraries/LibOrder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport {LibAsset} from \"./LibAsset.sol\";\nimport {LibMath} from \"./LibMath.sol\";\n\n/// @author The Sandbox\n/// @title Order Handling Library\n/// @notice Provides tools for constructing, hashing, and validating orders.\nlibrary LibOrder {\n    bytes32 internal constant ORDER_TYPEHASH =\n        keccak256(\n            \"Order(address maker,Asset makeAsset,address taker,Asset takeAsset,uint256 salt,uint256 start,uint256 end)Asset(AssetType assetType,uint256 value)AssetType(uint256 assetClass,bytes data)\"\n        );\n\n    /// @dev Represents the structure of an order.\n    struct Order {\n        address maker; // Address of the maker.\n        LibAsset.Asset makeAsset; // Asset the maker is providing.\n        address taker; // Address of the taker.\n        LibAsset.Asset takeAsset; // Asset the taker is providing.\n        uint256 salt; // Random number to ensure unique order hash.\n        uint256 start; // Timestamp when the order becomes valid.\n        uint256 end; // Timestamp when the order expires.\n    }\n\n    /// @dev Represents the result of filling two orders.\n    struct FillResult {\n        uint256 leftValue; // Amount filled from the left order.\n        uint256 rightValue; // Amount filled from the right order.\n    }\n\n    /// @notice Computes the unique hash of an order.\n    /// @param order The order data.\n    /// @return The unique hash of the order.\n    function hashKey(Order calldata order) internal pure returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    order.maker,\n                    LibAsset.hash(order.makeAsset.assetType),\n                    LibAsset.hash(order.takeAsset.assetType),\n                    order.salt\n                )\n            );\n    }\n\n    /// @notice Computes the complete hash of an order, including domain-specific data.\n    /// @param order The order data.\n    /// @return The complete hash of the order.\n    function hash(Order calldata order) internal pure returns (bytes32) {\n        return\n            keccak256(\n                // solhint-disable-next-line func-named-parameters\n                abi.encode(\n                    ORDER_TYPEHASH,\n                    order.maker,\n                    LibAsset.hash(order.makeAsset),\n                    order.taker,\n                    LibAsset.hash(order.takeAsset),\n                    order.salt,\n                    order.start,\n                    order.end\n                )\n            );\n    }\n\n    /// @notice Validates order time\n    /// @param order Whose time we want to validate\n    // solhint-disable not-rely-on-time\n    // slither-disable-start timestamp\n    function validateOrderTime(Order memory order) internal view {\n        require(order.start == 0 || order.start < block.timestamp, \"Order start validation failed\");\n        require(order.end == 0 || order.end > block.timestamp, \"Order end validation failed\");\n    }\n\n    // slither-disable-end timestamp\n    // solhint-enable not-rely-on-time\n\n    /// @notice Should return filled values\n    /// @param leftOrder Left order\n    /// @param rightOrder Right order\n    /// @param leftOrderFill Current fill of the left order (0 if order is unfilled)\n    /// @param rightOrderFill Current fill of the right order (0 if order is unfilled)\n    /// @dev We have 3 cases, 1st: left order should be fully filled\n    /// @dev 2nd: right order should be fully filled or 3d: both should be fully filled if required values are the same\n    /// @return The fill result of both orders\n    function fillOrder(\n        LibOrder.Order calldata leftOrder,\n        LibOrder.Order calldata rightOrder,\n        uint256 leftOrderFill,\n        uint256 rightOrderFill\n    ) internal pure returns (FillResult memory) {\n        (uint256 leftMakeValue, uint256 leftTakeValue) = calculateRemaining(leftOrder, leftOrderFill);\n        (uint256 rightMakeValue, uint256 rightTakeValue) = calculateRemaining(rightOrder, rightOrderFill);\n\n        if (rightTakeValue > leftMakeValue) {\n            return _fillLeft(leftMakeValue, leftTakeValue, rightOrder.makeAsset.value, rightOrder.takeAsset.value);\n        }\n        return _fillRight(leftOrder.makeAsset.value, leftOrder.takeAsset.value, rightMakeValue, rightTakeValue);\n    }\n\n    /// @notice Computes the remaining fillable amount of an order.\n    /// @param order The order to compute from.\n    /// @param fill The amount of the order already filled.\n    /// @return makeValue The remaining fillable amount from the maker's side.\n    /// @return takeValue The remaining fillable amount from the taker's side.\n    function calculateRemaining(\n        LibOrder.Order calldata order,\n        uint256 fill\n    ) internal pure returns (uint256 makeValue, uint256 takeValue) {\n        require(order.takeAsset.value >= fill, \"filling more than order permits\");\n        takeValue = order.takeAsset.value - fill;\n        makeValue = LibMath.safeGetPartialAmountFloor(order.makeAsset.value, order.takeAsset.value, takeValue);\n    }\n\n    /// @notice Computes the fill values for a situation where the right order is expected to fill the left order.\n    /// @param leftMakeValue The amount the left order maker wants to trade.\n    /// @param leftTakeValue The amount the left order taker wants in return.\n    /// @param rightMakeValue The amount the right order maker wants to trade.\n    /// @param rightTakeValue The amount the right order taker wants in return.\n    /// @return The filled amounts for both the left and right orders.\n    function _fillRight(\n        uint256 leftMakeValue,\n        uint256 leftTakeValue,\n        uint256 rightMakeValue,\n        uint256 rightTakeValue\n    ) internal pure returns (FillResult memory) {\n        uint256 makerValue = LibMath.safeGetPartialAmountFloor(rightTakeValue, leftMakeValue, leftTakeValue);\n        require(makerValue <= rightMakeValue, \"fillRight: unable to fill\");\n        return FillResult(rightTakeValue, makerValue);\n    }\n\n    /// @notice Computes the fill values for a situation where the left order is expected to fill the right order.\n    /// @param leftMakeValue The amount the left order maker wants to trade.\n    /// @param leftTakeValue The amount the left order taker wants in return.\n    /// @param rightMakeValue The amount the right order maker wants to trade.\n    /// @param rightTakeValue The amount the right order taker wants in return.\n    /// @return The filled amounts for both the left and right orders.\n    function _fillLeft(\n        uint256 leftMakeValue,\n        uint256 leftTakeValue,\n        uint256 rightMakeValue,\n        uint256 rightTakeValue\n    ) internal pure returns (FillResult memory) {\n        uint256 rightTake = LibMath.safeGetPartialAmountFloor(leftTakeValue, rightMakeValue, rightTakeValue);\n        require(rightTake <= leftMakeValue, \"fillLeft: unable to fill\");\n        return FillResult(leftMakeValue, leftTakeValue);\n    }\n}\n"
    },
    "@sandbox-smart-contracts/marketplace/contracts/OrderValidator.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport {LibOrder} from \"./libraries/LibOrder.sol\";\nimport {LibAsset} from \"./libraries/LibAsset.sol\";\nimport {SignatureCheckerUpgradeable} from \"@openzeppelin/contracts-upgradeable/utils/cryptography/SignatureCheckerUpgradeable.sol\";\nimport {EIP712Upgradeable, Initializable} from \"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\";\nimport {IOrderValidator} from \"./interfaces/IOrderValidator.sol\";\nimport {Whitelist} from \"./Whitelist.sol\";\n\n/// @author The Sandbox\n/// @title OrderValidator\n/// @notice Contract for order validation. It validates orders and contains a whitelist of tokens.\ncontract OrderValidator is IOrderValidator, Initializable, EIP712Upgradeable, Whitelist {\n    using SignatureCheckerUpgradeable for address;\n\n    /// @dev Internal mechanism to protect the implementation contract from being initialized.\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    /// @notice Initializes the OrderValidator contract.\n    /// @param admin The admin address for the OrderValidator and Whitelist.\n    /// @param roles Array of role identifiers for the Whitelist contract.\n    /// @param permissions Array of permissions associated with each role.\n    /// @param whitelistsEnabled Boolean to indicate if whitelist functionality is enabled.\n    function initialize(\n        address admin,\n        bytes32[] calldata roles,\n        bool[] calldata permissions,\n        bool whitelistsEnabled\n    ) external initializer {\n        __EIP712_init_unchained(\"The Sandbox Marketplace\", \"1.0.0\");\n        __Whitelist_init(admin, roles, permissions, whitelistsEnabled);\n    }\n\n    /// @notice Validates the given order.\n    /// @param order The order details to be validated.\n    /// @param signature The signature associated with the order.\n    /// @param sender Address of the order sender.\n    function validate(LibOrder.Order calldata order, bytes memory signature, address sender) external view {\n        require(order.maker != address(0), \"no maker\");\n\n        LibOrder.validateOrderTime(order);\n        _verifyWhitelists(order.makeAsset);\n\n        if (order.salt == 0) {\n            require(sender == order.maker, \"maker is not tx sender\");\n            // No partial fill, the order is reusable forever\n            return;\n        }\n\n        if (sender == order.maker) {\n            return;\n        }\n\n        bytes32 hash = LibOrder.hash(order);\n\n        require(order.maker.isValidSignatureNow(_hashTypedDataV4(hash), signature), \"signature verification error\");\n    }\n\n    /// @notice Verifies if the asset exchange is affected by the whitelist.\n    /// @param asset Details of the asset to be verified.\n    /// @dev If the asset type is ERC20, the ERC20_ROLE is checked.\n    /// @dev if ERC20_ROLE is enabled only tokens that have the role are accepted\n    /// @dev If whitelists are enabled, checks TSB_ROLE and PARTNER_ROLE.\n    function _verifyWhitelists(LibAsset.Asset calldata asset) internal view {\n        address makeToken = LibAsset.decodeAddress(asset.assetType);\n        if (asset.assetType.assetClass == LibAsset.AssetClass.ERC20) {\n            if (!hasRole(ERC20_ROLE, makeToken)) {\n                revert(\"payment token not allowed\");\n            }\n        } else {\n            if (!isWhitelistsEnabled()) {\n                return;\n            } else if (\n                (isRoleEnabled(TSB_ROLE) && hasRole(TSB_ROLE, makeToken)) ||\n                (isRoleEnabled(PARTNER_ROLE) && hasRole(PARTNER_ROLE, makeToken))\n            ) {\n                return;\n            } else {\n                revert(\"not allowed\");\n            }\n        }\n    }\n\n    // slither-disable-next-line unused-state\n    uint256[50] private __gap;\n}\n"
    },
    "@sandbox-smart-contracts/marketplace/contracts/RoyaltiesRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport {IMultiRoyaltyRecipients} from \"@sandbox-smart-contracts/dependency-royalty-management/contracts/interfaces/IMultiRoyaltyRecipients.sol\";\nimport {IERC2981} from \"@openzeppelin/contracts/interfaces/IERC2981.sol\";\nimport {ERC165CheckerUpgradeable} from \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165CheckerUpgradeable.sol\";\nimport {OwnableUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport {Recipient} from \"@manifoldxyz/royalty-registry-solidity/contracts/overrides/IRoyaltySplitter.sol\";\nimport {IRoyaltiesProvider, TOTAL_BASIS_POINTS} from \"./interfaces/IRoyaltiesProvider.sol\";\n\n/// @author The Sandbox\n/// @title RoyaltiesRegistry\n/// @dev Contract managing the registry of royalties.\ncontract RoyaltiesRegistry is OwnableUpgradeable, IRoyaltiesProvider {\n    using ERC165CheckerUpgradeable for address;\n    /// @notice Emitted when royalties are set for a token.\n    /// @param token The token address for which royalties are set.\n    /// @param royalties An array of royalties set for the token.\n    event RoyaltiesSetForContract(address indexed token, Part[] royalties);\n\n    /// @notice Emitted when the royalties type and provider are defined for a token.\n    /// @param token The token address.\n    /// @param royaltiesType The type of royalties set.\n    /// @param royaltiesProvider The address of the royalties provider.\n    event RoyaltiesTypeSet(\n        address indexed token,\n        RoyaltiesType indexed royaltiesType,\n        address indexed royaltiesProvider\n    );\n\n    /// @dev Stores royalty information for tokens.\n    struct RoyaltiesSet {\n        bool initialized;\n        Part[] royalties;\n    }\n\n    /// @dev Represents a type of royalties.\n    enum RoyaltiesType {\n        UNSET,\n        BY_TOKEN,\n        EXTERNAL_PROVIDER,\n        EIP2981,\n        UNSUPPORTED_NONEXISTENT\n    }\n\n    /// @dev Used to call EIP2981 royaltyInfo to calculate the royalties percentage\n    uint256 public constant WEIGHT_VALUE = 1e6;\n\n    /// @notice Stores royalties for token contract, set in setRoyaltiesByToken() method\n    mapping(address token => RoyaltiesSet royalties) public royaltiesByToken;\n\n    /// @notice Stores external provider and royalties type for token contract\n    mapping(address token => uint256 provider) public royaltiesProviders;\n\n    /// @dev This protects the implementation contract from being initialized.\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    /// @notice Royalties registry initializer\n    function initialize() external initializer {\n        __Ownable_init();\n    }\n\n    /// @notice Assigns an external provider for a token's royalties and sets the royalty type as 'EXTERNAL_PROVIDER' (2).\n    /// @param token Address of the token.\n    /// @param provider Address of the external royalties provider.\n    function setProviderByToken(address token, address provider) external {\n        _checkOwner(token);\n        _setRoyaltiesType(token, RoyaltiesType.EXTERNAL_PROVIDER, provider);\n    }\n\n    /// @notice Fetches the royalty type for a given token.\n    /// @param token Address of the token.\n    /// @return The type of royalty associated with the token.\n    function getRoyaltiesType(address token) external view returns (RoyaltiesType) {\n        return _getRoyaltiesType(royaltiesProviders[token]);\n    }\n\n    /// @notice Overwrites the royalty type for a given token.\n    /// @param token Address of the token.\n    /// @param royaltiesType The new royalty type to be set.\n    function forceSetRoyaltiesType(address token, RoyaltiesType royaltiesType) external {\n        _checkOwner(token);\n        _setRoyaltiesType(token, royaltiesType, getProvider(token));\n    }\n\n    /// @notice Resets the royalty type for a token to 'UNSET'.\n    /// @param token Address of the token.\n    function clearRoyaltiesType(address token) external {\n        _checkOwner(token);\n        royaltiesProviders[token] = uint256(uint160(getProvider(token)));\n\n        emit RoyaltiesTypeSet(token, RoyaltiesType.UNSET, getProvider(token));\n    }\n\n    /// @notice Defines royalties for a token and sets the royalty type as 'BY_TOKEN'.\n    /// @param token Address of the token.\n    /// @param royalties Array of royalty parts to be set for the token.\n    function setRoyaltiesByToken(address token, Part[] memory royalties) external {\n        _checkOwner(token);\n        //clearing royaltiesProviders value for the token\n        delete royaltiesProviders[token];\n        // setting royaltiesType = 1 for the token\n        _setRoyaltiesType(token, RoyaltiesType.BY_TOKEN, address(0));\n        uint256 sumRoyalties = 0;\n        delete royaltiesByToken[token];\n        for (uint256 i = 0; i < royalties.length; ++i) {\n            require(royalties[i].account != address(0x0), \"recipient should be present\");\n            require(royalties[i].basisPoints != 0, \"basisPoints should be > 0\");\n            royaltiesByToken[token].royalties.push(royalties[i]);\n            sumRoyalties += royalties[i].basisPoints;\n        }\n        require(sumRoyalties < TOTAL_BASIS_POINTS, \"royalties sum is more than 100%\");\n        royaltiesByToken[token].initialized = true;\n        emit RoyaltiesSetForContract(token, royalties);\n    }\n\n    /// @notice Fetches royalties for a given token and token ID.\n    /// @param token Address of the token.\n    /// @param tokenId ID of the token.\n    /// @return An array containing royalty parts.\n    function getRoyalties(address token, uint256 tokenId) external returns (Part[] memory) {\n        uint256 royaltiesProviderData = royaltiesProviders[token];\n\n        address royaltiesProvider = address(uint160(royaltiesProviderData));\n        RoyaltiesType royaltiesType = _getRoyaltiesType(royaltiesProviderData);\n\n        // case when royaltiesType is not set\n        if (royaltiesType == RoyaltiesType.UNSET) {\n            // calculating royalties type for token\n            royaltiesType = _calculateRoyaltiesType(token, royaltiesProvider);\n\n            //saving royalties type\n            _setRoyaltiesType(token, royaltiesType, royaltiesProvider);\n        }\n\n        //case royaltiesType = 1, royalties are set in royaltiesByToken\n        if (royaltiesType == RoyaltiesType.BY_TOKEN) {\n            return royaltiesByToken[token].royalties;\n        }\n\n        //case royaltiesType = 2, royalties from external provider\n        if (royaltiesType == RoyaltiesType.EXTERNAL_PROVIDER) {\n            return _providerExtractor(token, tokenId, royaltiesProvider);\n        }\n\n        //case royaltiesType = 3, royalties EIP-2981\n        if (royaltiesType == RoyaltiesType.EIP2981) {\n            return _getRoyaltiesEIP2981(token, tokenId);\n        }\n\n        // case royaltiesType = 4, unknown/empty royalties\n        return new Part[](0);\n    }\n\n    /// @notice Returns provider address for token contract from royaltiesProviders mapping\n    /// @param token token address\n    /// @return address of provider\n    function getProvider(address token) public view returns (address) {\n        return address(uint160(royaltiesProviders[token]));\n    }\n\n    /// @notice Returns the royalties type for a given raw data value.\n    /// @param data The raw data (uint256).\n    /// @return The derived royalties type.\n    function _getRoyaltiesType(uint256 data) internal pure returns (RoyaltiesType) {\n        for (uint256 i = 1; i <= uint256(type(RoyaltiesType).max); ++i) {\n            if (data / 2 ** (256 - i) == 1) {\n                return RoyaltiesType(i);\n            }\n        }\n        return RoyaltiesType.UNSET;\n    }\n\n    /// @notice Sets the royalties type and provider for a given token contract.\n    /// @param token The address of the token.\n    /// @param royaltiesType The type of royalties to be set.\n    /// @param royaltiesProvider The address of the royalties provider.\n    function _setRoyaltiesType(address token, RoyaltiesType royaltiesType, address royaltiesProvider) internal {\n        require(royaltiesType != RoyaltiesType.UNSET, \"wrong royaltiesType\");\n        royaltiesProviders[token] = uint256(uint160(royaltiesProvider)) + 2 ** (256 - uint256(royaltiesType));\n        emit RoyaltiesTypeSet(token, royaltiesType, royaltiesProvider);\n    }\n\n    /// @notice Validates if the message sender is the owner of the contract or the given token.\n    /// @param token Address of the token to check against.\n    function _checkOwner(address token) internal view {\n        if ((owner() != _msgSender()) && (OwnableUpgradeable(token).owner() != _msgSender())) {\n            revert(\"token owner not detected\");\n        }\n    }\n\n    /// @notice Determines the royalties type for a given token.\n    /// @param token Address of the token.\n    /// @param royaltiesProvider Address of the royalties provider.\n    /// @return The determined royalties type.\n    function _calculateRoyaltiesType(address token, address royaltiesProvider) internal view returns (RoyaltiesType) {\n        if (token.supportsInterface(type(IERC2981).interfaceId)) {\n            return RoyaltiesType.EIP2981;\n        }\n\n        if (royaltiesProvider != address(0)) {\n            return RoyaltiesType.EXTERNAL_PROVIDER;\n        }\n\n        return RoyaltiesType.UNSUPPORTED_NONEXISTENT;\n    }\n\n    /// @notice Fetches EIP-2981 royalties for a given token ID.\n    /// @param token Address of the token.\n    /// @param tokenId ID of the token for which royalties are to be fetched.\n    /// @return An array of parts representing the royalties.\n    function _getRoyaltiesEIP2981(address token, uint256 tokenId) internal view returns (Part[] memory) {\n        try IERC2981(token).royaltyInfo(tokenId, WEIGHT_VALUE) returns (address receiver, uint256 royaltyAmount) {\n            if (token.supportsInterface(type(IMultiRoyaltyRecipients).interfaceId)) {\n                return _getRecipients(token, tokenId, receiver, royaltyAmount);\n            } else {\n                return _calculateRoyalties(receiver, royaltyAmount);\n            }\n        } catch {\n            return new Part[](0);\n        }\n    }\n\n    /// @notice Fetches the recipients and calculates the royalties.\n    /// @param token Address of the token.\n    /// @param tokenId ID of the token.\n    /// @param receiver Address of the royalty receiver.\n    /// @param royaltyAmount The total royalty amount.\n    /// @return An array of parts representing the royalties.\n    function _getRecipients(\n        address token,\n        uint256 tokenId,\n        address receiver,\n        uint256 royaltyAmount\n    ) internal view returns (Part[] memory) {\n        try IMultiRoyaltyRecipients(token).getRecipients(tokenId) returns (Recipient[] memory multiRecipients) {\n            uint256 multiRecipientsLength = multiRecipients.length;\n            Part[] memory royalties = new Part[](multiRecipientsLength);\n            uint256 sum = 0;\n            for (uint256 i; i < multiRecipientsLength; i++) {\n                Recipient memory splitRecipient = multiRecipients[i];\n                royalties[i].account = splitRecipient.recipient;\n                uint256 splitAmount = (splitRecipient.bps * royaltyAmount) / WEIGHT_VALUE;\n                royalties[i].basisPoints = splitAmount;\n                sum += splitAmount;\n            }\n            // sum can be less than amount, otherwise small-value listings can break\n            require(sum <= royaltyAmount, \"RoyaltiesRegistry: Invalid split\");\n            return royalties;\n            // solhint-disable-next-line no-empty-blocks\n        } catch {}\n\n        return _calculateRoyalties(receiver, royaltyAmount);\n    }\n\n    /// @notice Fetches royalties for a given token ID from an external provider.\n    /// @param token Address of the token.\n    /// @param tokenId ID of the token for which royalties are to be fetched.\n    /// @param providerAddress Address of the external provider.\n    /// @return An array of parts representing the royalties.\n    function _providerExtractor(\n        address token,\n        uint256 tokenId,\n        address providerAddress\n    ) internal returns (Part[] memory) {\n        try IRoyaltiesProvider(providerAddress).getRoyalties(token, tokenId) returns (Part[] memory result) {\n            return result;\n        } catch {\n            return new Part[](0);\n        }\n    }\n\n    /// @notice Converts a given amount to its percentage representation and forms a royalty part.\n    /// @param to Address of the royalty recipient.\n    /// @param amount Amount of the royalty.\n    /// @return An array containing the formed royalty part.\n    function _calculateRoyalties(address to, uint256 amount) internal pure returns (Part[] memory) {\n        Part[] memory result;\n        if (amount == 0) {\n            return result;\n        }\n        uint256 percent = (amount * TOTAL_BASIS_POINTS) / WEIGHT_VALUE;\n        require(percent < TOTAL_BASIS_POINTS, \"royalties 2981 exceeds 100%\");\n        result = new Part[](1);\n        result[0].account = to;\n        result[0].basisPoints = percent;\n        return result;\n    }\n\n    // slither-disable-next-line unused-state\n    uint256[50] private __gap;\n}\n"
    },
    "@sandbox-smart-contracts/marketplace/contracts/TransferManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport {ERC165CheckerUpgradeable} from \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165CheckerUpgradeable.sol\";\nimport {IERC1155Upgradeable} from \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\";\nimport {IERC721Upgradeable} from \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\";\nimport {IERC20Upgradeable} from \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport {AddressUpgradeable} from \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\nimport {IRoyaltyUGC} from \"@sandbox-smart-contracts/dependency-royalty-management/contracts/interfaces/IRoyaltyUGC.sol\";\nimport {SafeERC20Upgradeable} from \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport {IRoyaltiesProvider, TOTAL_BASIS_POINTS} from \"./interfaces/IRoyaltiesProvider.sol\";\nimport {ITransferManager} from \"./interfaces/ITransferManager.sol\";\nimport {LibAsset} from \"./libraries/LibAsset.sol\";\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\n/// @author The Sandbox\n/// @title TransferManager\n/// @notice Manages the transfer of assets with support for different fee structures and beneficiaries.\n/// @dev This contract can handle various assets like ERC20, ERC721, and ERC1155 tokens.\nabstract contract TransferManager is Initializable, ITransferManager {\n    using AddressUpgradeable for address;\n    using ERC165CheckerUpgradeable for address;\n\n    /// @notice Defines the base for representing fees to avoid rounding: 50% == 0.5 * 10000 == 5000.\n    uint256 internal constant PROTOCOL_FEE_MULTIPLIER = 10000;\n\n    /// @notice The maximum allowable fee which cannot exceed 50%.\n    uint256 internal constant PROTOCOL_FEE_SHARE_LIMIT = 5000;\n\n    /// @notice Royalties are represented in IRoyaltiesProvider.BASE_POINT, they\n    /// @notice cannot exceed 50% == 0.5 * BASE_POINTS == 5000\n    uint256 internal constant ROYALTY_SHARE_LIMIT = 5000;\n\n    /// @notice Fee applied to primary sales.\n    /// @return uint256 of primary sale fee in PROTOCOL_FEE_MULTIPLIER units\n    uint256 public protocolFeePrimary;\n\n    /// @notice Fee applied to secondary sales.\n    /// @return uint256 of secondary sale fee in PROTOCOL_FEE_MULTIPLIER units\n    uint256 public protocolFeeSecondary;\n\n    /// @notice Registry for the different royalties\n    /// @return address of royaltiesRegistry\n    IRoyaltiesProvider public royaltiesRegistry;\n\n    /// @notice Default receiver of protocol fees\n    /// @return address of defaultFeeReceiver\n    address public defaultFeeReceiver;\n\n    /// @notice Emitted when protocol fees are updated.\n    /// @param newProtocolFeePrimary fee for primary market\n    /// @param newProtocolFeeSecondary fee for secondary market\n    event ProtocolFeeSet(uint256 indexed newProtocolFeePrimary, uint256 indexed newProtocolFeeSecondary);\n\n    //// @notice Emitted when the royalties registry is updated.\n    /// @param newRoyaltiesRegistry address of new royalties registry\n    event RoyaltiesRegistrySet(IRoyaltiesProvider indexed newRoyaltiesRegistry);\n\n    /// @notice Emitted when the default fee receiver is updated.\n    /// @param newDefaultFeeReceiver address that gets the fees\n    event DefaultFeeReceiverSet(address indexed newDefaultFeeReceiver);\n\n    /// @dev This protects the implementation contract from being initialized.\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    /// @notice Initializer for TransferExecutor\n    /// @param newProtocolFeePrimary Fee for the primary market\n    /// @param newProtocolFeeSecondary Fee for the secondary market\n    /// @param newDefaultFeeReceiver Address for account receiving fees\n    /// @param newRoyaltiesProvider Address of royalties registry\n    // solhint-disable-next-line func-name-mixedcase\n    function __TransferManager_init_unchained(\n        uint256 newProtocolFeePrimary,\n        uint256 newProtocolFeeSecondary,\n        address newDefaultFeeReceiver,\n        IRoyaltiesProvider newRoyaltiesProvider\n    ) internal onlyInitializing {\n        _setProtocolFee(newProtocolFeePrimary, newProtocolFeeSecondary);\n        _setDefaultFeeReceiver(newDefaultFeeReceiver);\n        _setRoyaltiesRegistry(newRoyaltiesProvider);\n    }\n\n    /// @notice Executes transfers for 2 matched orders\n    /// @param left DealSide from the left order\n    /// @param right DealSide from the right order\n    /// @dev This is the main entry point, when used as a separated contract this method will be external\n    function doTransfers(DealSide memory left, DealSide memory right, LibAsset.FeeSide feeSide) internal override {\n        DealSide memory paymentSide;\n        DealSide memory nftSide;\n        if (feeSide == LibAsset.FeeSide.LEFT) {\n            paymentSide = left;\n            nftSide = right;\n        } else {\n            paymentSide = right;\n            nftSide = left;\n        }\n        // Transfer NFT or left side if FeeSide.NONE\n        _transfer(nftSide.asset, nftSide.account, paymentSide.account);\n        // Transfer ERC20 or right side if FeeSide.NONE\n        if (feeSide == LibAsset.FeeSide.NONE || _mustSkipFees(paymentSide.account)) {\n            _transfer(paymentSide.asset, paymentSide.account, nftSide.account);\n        } else {\n            _doTransfersWithFeesAndRoyalties(paymentSide, nftSide);\n        }\n    }\n\n    /// @notice Sets the royalties registry.\n    /// @param newRoyaltiesRegistry Address of new royalties registry\n    function _setRoyaltiesRegistry(IRoyaltiesProvider newRoyaltiesRegistry) internal {\n        require(address(newRoyaltiesRegistry).isContract(), \"invalid Royalties Registry\");\n        royaltiesRegistry = newRoyaltiesRegistry;\n\n        emit RoyaltiesRegistrySet(newRoyaltiesRegistry);\n    }\n\n    /// @notice Sets the protocol fees.\n    /// @param newProtocolFeePrimary Fee for the primary market\n    /// @param newProtocolFeeSecondary Fee for the secondary market\n    function _setProtocolFee(uint256 newProtocolFeePrimary, uint256 newProtocolFeeSecondary) internal {\n        require(newProtocolFeePrimary < PROTOCOL_FEE_SHARE_LIMIT, \"invalid primary fee\");\n        require(newProtocolFeeSecondary < PROTOCOL_FEE_SHARE_LIMIT, \"invalid secondary fee\");\n        protocolFeePrimary = newProtocolFeePrimary;\n        protocolFeeSecondary = newProtocolFeeSecondary;\n\n        emit ProtocolFeeSet(newProtocolFeePrimary, newProtocolFeeSecondary);\n    }\n\n    /// @notice Sets the default fee receiver.\n    /// @param newDefaultFeeReceiver Address that gets the fees\n    function _setDefaultFeeReceiver(address newDefaultFeeReceiver) internal {\n        require(newDefaultFeeReceiver != address(0), \"invalid default fee receiver\");\n        defaultFeeReceiver = newDefaultFeeReceiver;\n\n        emit DefaultFeeReceiverSet(newDefaultFeeReceiver);\n    }\n\n    /// @notice Transfer protocol fees and royalties.\n    /// @param paymentSide DealSide of the fee-side order\n    /// @param nftSide DealSide of the nft-side order\n    function _doTransfersWithFeesAndRoyalties(DealSide memory paymentSide, DealSide memory nftSide) internal {\n        uint256 fees;\n        uint256 remainder = paymentSide.asset.value;\n        if (_isPrimaryMarket(nftSide)) {\n            fees = protocolFeePrimary;\n            // No royalties\n        } else {\n            fees = protocolFeeSecondary;\n            remainder = _transferRoyalties(remainder, paymentSide, nftSide);\n        }\n        if (fees > 0 && remainder > 0) {\n            remainder = _transferPercentage(remainder, paymentSide, defaultFeeReceiver, fees, PROTOCOL_FEE_MULTIPLIER);\n        }\n        if (remainder > 0) {\n            _transfer(LibAsset.Asset(paymentSide.asset.assetType, remainder), paymentSide.account, nftSide.account);\n        }\n    }\n\n    /// @notice Return if this tx is on primary market\n    /// @param nftSide DealSide of the nft-side order\n    /// @return creator Address or zero if is not able to retrieve it\n    function _isPrimaryMarket(DealSide memory nftSide) internal view returns (bool) {\n        address creator = _getCreator(nftSide.asset.assetType);\n        return creator != address(0) && nftSide.account == creator;\n    }\n\n    /// @notice Transfer royalties.\n    /// @param remainder How much of the amount left after previous transfers\n    /// @param paymentSide DealSide of the fee-side order\n    /// @param nftSide DealSide of the nft-side order\n    /// @return How much left after paying royalties\n    function _transferRoyalties(\n        uint256 remainder,\n        DealSide memory paymentSide,\n        DealSide memory nftSide\n    ) internal returns (uint256) {\n        (address token, uint256 tokenId) = LibAsset.decodeToken(nftSide.asset.assetType);\n        IRoyaltiesProvider.Part[] memory royalties = royaltiesRegistry.getRoyalties(token, tokenId);\n        uint256 totalRoyalties;\n        uint256 len = royalties.length;\n        for (uint256 i; i < len; i++) {\n            IRoyaltiesProvider.Part memory r = royalties[i];\n            totalRoyalties = totalRoyalties + r.basisPoints;\n            if (r.account == nftSide.account) {\n                // We just skip the transfer because the nftSide will get the full payment anyway.\n                continue;\n            }\n            remainder = _transferPercentage(remainder, paymentSide, r.account, r.basisPoints, TOTAL_BASIS_POINTS);\n        }\n        require(totalRoyalties <= ROYALTY_SHARE_LIMIT, \"royalties are too high (>50%)\");\n        return remainder;\n    }\n\n    /// @notice Do a transfer based on a percentage (in basis points)\n    /// @param remainder How much of the amount left after previous transfers\n    /// @param paymentSide DealSide of the fee-side order\n    /// @param to Account that will receive the asset\n    /// @param percentage Percentage to be transferred multiplied by the multiplier\n    /// @param multiplier Percentage is multiplied by this number to avoid rounding (2.5% == 0.025) * multiplier\n    /// @return How much left after current transfer\n    function _transferPercentage(\n        uint256 remainder,\n        DealSide memory paymentSide,\n        address to,\n        uint256 percentage,\n        uint256 multiplier\n    ) internal returns (uint256) {\n        LibAsset.Asset memory payment = LibAsset.Asset(paymentSide.asset.assetType, 0);\n        uint256 fee = (paymentSide.asset.value * percentage) / multiplier;\n        if (remainder > fee) {\n            remainder = remainder - fee;\n            payment.value = fee;\n        } else {\n            payment.value = remainder;\n            remainder = 0;\n        }\n        if (payment.value > 0) {\n            _transfer(payment, paymentSide.account, to);\n        }\n        return remainder;\n    }\n\n    /// @notice Return the creator of the token if the token supports IRoyaltyUGC\n    /// @param assetType Asset type\n    /// @return creator Address or zero if is not able to retrieve it\n    function _getCreator(LibAsset.AssetType memory assetType) internal view returns (address creator) {\n        (address token, uint256 tokenId) = LibAsset.decodeToken(assetType);\n        if (token.supportsInterface(type(IRoyaltyUGC).interfaceId)) {\n            creator = IRoyaltyUGC(token).getCreatorAddress(tokenId);\n        }\n    }\n\n    /// @notice Function should be able to transfer any supported Asset\n    /// @param asset Asset to be transferred\n    /// @param from Account holding the asset\n    /// @param to Account that will receive the asset\n    /// @dev This is the main entry point, when used as a separated contract this method will be external\n    function _transfer(LibAsset.Asset memory asset, address from, address to) internal {\n        if (asset.assetType.assetClass == LibAsset.AssetClass.ERC20) {\n            address token = LibAsset.decodeAddress(asset.assetType);\n            // slither-disable-next-line arbitrary-send-erc20\n            SafeERC20Upgradeable.safeTransferFrom(IERC20Upgradeable(token), from, to, asset.value);\n        } else if (asset.assetType.assetClass == LibAsset.AssetClass.ERC721) {\n            (address token, uint256 tokenId) = LibAsset.decodeToken(asset.assetType);\n            require(asset.value == 1, \"erc721 value error\");\n            IERC721Upgradeable(token).safeTransferFrom(from, to, tokenId);\n        } else if (asset.assetType.assetClass == LibAsset.AssetClass.ERC1155) {\n            (address token, uint256 tokenId) = LibAsset.decodeToken(asset.assetType);\n            IERC1155Upgradeable(token).safeTransferFrom(from, to, tokenId, asset.value, \"\");\n        } else {\n            revert(\"invalid asset class\");\n        }\n    }\n\n    /// @notice Function deciding if the fees are applied or not, to be override\n    /// @param from Address to check\n    function _mustSkipFees(address from) internal virtual returns (bool);\n\n    // slither-disable-next-line unused-state\n    uint256[50] private __gap;\n}\n"
    },
    "@sandbox-smart-contracts/marketplace/contracts/Whitelist.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {AccessControlEnumerableUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\";\nimport {IWhitelist} from \"./interfaces/IWhitelist.sol\";\n\n/// @author The Sandbox\n/// @title Whitelist contract\n/// @dev A contract to control which tokens are accepted in the marketplace.\ncontract Whitelist is IWhitelist, Initializable, AccessControlEnumerableUpgradeable {\n    /// @notice Role for The Sandbox tokens\n    /// @return Hash for TSB_ROLE\n    bytes32 public constant TSB_ROLE = keccak256(\"TSB_ROLE\");\n    /// @notice Role for partner tokens\n    /// @return Hash for PARTNER_ROLE\n    bytes32 public constant PARTNER_ROLE = keccak256(\"PARTNER_ROLE\");\n    /// @notice Role for ERC20 tokens, enabled all times\n    /// @return Hash for ERC20_ROLE\n    bytes32 public constant ERC20_ROLE = keccak256(\"ERC20_ROLE\");\n\n    /// @dev Internal mapping to keep track of the enablement status of each role.\n    mapping(bytes32 role => bool isEnabled) private _rolesEnabled;\n\n    /// @dev Boolean that indicates if non-ERC20 whitelists are enabled or not\n    bool private _whitelistsEnabled;\n\n    /// @notice Emitted when a specific role gets enabled.\n    /// @param role Roles whose permissions were enabled\n    event RoleEnabled(bytes32 indexed role);\n\n    /// @notice Emitted when a specific role gets disabled.\n    event RoleDisabled(bytes32 indexed role);\n\n    /// @notice Emitted when only non-ERC20 tokens that are whitelisted can be allowed.\n    event WhitelistsEnabled();\n\n    /// @notice Emitted when all non-ERC20 tokens are allowed in the market.\n    event WhitelistsDisabled();\n\n    /// @dev This protects the implementation contract from being initialized.\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    /// @notice Enables or disables specific roles.\n    /// @param roles List of role identifiers.\n    /// @param permissions List of booleans indicating the desired status of each role.\n    function setRolesEnabled(\n        bytes32[] calldata roles,\n        bool[] calldata permissions\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        _setRolesEnabled(roles, permissions);\n    }\n\n    /// @notice Enable a given role.\n    /// @param role Identifier of the role to be enabled.\n    function enableRole(bytes32 role) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        _enableRole(role);\n    }\n\n    /// @notice Disable a given role.\n    /// @param role Identifier of the role to be disabled.\n    function disableRole(bytes32 role) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        _disableRole(role);\n    }\n\n    /// @notice Activate whitelists for all non-ERC20 tokens.\n    function enableWhitelists() external onlyRole(DEFAULT_ADMIN_ROLE) {\n        _enableWhitelists();\n    }\n\n    /// @notice Deactivate whitelists for all non-ERC20 tokens.\n    function disableWhitelists() external onlyRole(DEFAULT_ADMIN_ROLE) {\n        _disableWhitelists();\n    }\n\n    /// @notice Query the status of a given role.\n    /// @param role Identifier of the role.\n    /// @return True if the role is enabled, false otherwise.\n    function isRoleEnabled(bytes32 role) public view returns (bool) {\n        return _rolesEnabled[role];\n    }\n\n    /// @notice Check the status of the whitelist functionality.\n    /// @return True if whitelists are active, false otherwise.\n    function isWhitelistsEnabled() public view returns (bool) {\n        return _whitelistsEnabled;\n    }\n\n    /// @notice Initializer function for the Whitelist contract.\n    /// @param admin Address to be granted the admin role.\n    /// @param roles List of role identifiers.\n    /// @param permissions List of booleans for the initial status of each role.\n    /// @param whitelistsEnabled Initial status of the whitelist functionality.\n    // solhint-disable-next-line func-name-mixedcase\n    function __Whitelist_init(\n        address admin,\n        bytes32[] calldata roles,\n        bool[] calldata permissions,\n        bool whitelistsEnabled\n    ) internal onlyInitializing {\n        __AccessControlEnumerable_init_unchained();\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\n        _setRolesEnabled(roles, permissions);\n        if (whitelistsEnabled) {\n            _enableWhitelists();\n        } else {\n            _disableWhitelists();\n        }\n    }\n\n    /// @dev Internal function to set the status of multiple roles.\n    /// @param roles List of role identifiers.\n    /// @param permissions List of desired status for each role.\n    function _setRolesEnabled(bytes32[] memory roles, bool[] memory permissions) internal {\n        require(roles.length == permissions.length, \"Mismatched input lengths\");\n        for (uint256 i = 0; i < roles.length; ++i) {\n            if (isRoleEnabled(roles[i]) != permissions[i]) {\n                if (permissions[i]) {\n                    _enableRole(roles[i]);\n                } else {\n                    _disableRole(roles[i]);\n                }\n            }\n        }\n    }\n\n    /// @dev Internal function to activate a role.\n    /// @param role Identifier of the role to be enabled.\n    function _enableRole(bytes32 role) internal {\n        _rolesEnabled[role] = true;\n        emit RoleEnabled(role);\n    }\n\n    /// @dev Internal function to deactivate a role.\n    /// @param role Identifier of the role to be disabled.\n    function _disableRole(bytes32 role) internal {\n        _rolesEnabled[role] = false;\n        emit RoleDisabled(role);\n    }\n\n    /// @dev Internal function to activate the whitelist functionality.\n    function _enableWhitelists() internal {\n        _whitelistsEnabled = true;\n        emit WhitelistsEnabled();\n    }\n\n    /// @dev Internal function to deactivate the whitelist functionality.\n    function _disableWhitelists() internal {\n        _whitelistsEnabled = false;\n        emit WhitelistsDisabled();\n    }\n\n    // slither-disable-next-line unused-state\n    uint256[50] private __gap;\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 2000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}