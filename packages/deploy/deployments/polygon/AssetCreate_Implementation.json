{
  "address": "0xF4BcA07Ed1F6735B509699B99237Ce7a63632ba4",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint8[]",
          "name": "tiers",
          "type": "uint8[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "metadataHashes",
          "type": "string[]"
        },
        {
          "indexed": false,
          "internalType": "bool[]",
          "name": "revealed",
          "type": "bool[]"
        }
      ],
      "name": "AssetBatchMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "tier",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadataHash",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "revealed",
          "type": "bool"
        }
      ],
      "name": "AssetMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "EIP712DomainChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "tier",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadataHash",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "revealed",
          "type": "bool"
        }
      ],
      "name": "SpecialAssetMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newTrustedForwarderAddress",
          "type": "address"
        }
      ],
      "name": "TrustedForwarderChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldTrustedForwarder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newTrustedForwarder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "TrustedForwarderSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_BATCH_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SPECIAL_MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "uint8",
          "name": "tier",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "revealed",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "metadataHash",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "createAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "uint8[]",
          "name": "tiers",
          "type": "uint8[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bool[]",
          "name": "revealed",
          "type": "bool[]"
        },
        {
          "internalType": "string[]",
          "name": "metadataHashes",
          "type": "string[]"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "createMultipleAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "metadataHash",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "createSpecialAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "creatorNonces",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eip712Domain",
      "outputs": [
        {
          "internalType": "bytes1",
          "name": "fields",
          "type": "bytes1"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "verifyingContract",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "extensions",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAssetContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "assetContractAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAuthValidator",
      "outputs": [
        {
          "internalType": "address",
          "name": "authValidatorAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCatalystContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "catalystContractAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_version",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_assetContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_catalystContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_authValidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_forwarder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_defaultAdmin",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "signatureNonces",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x888c55bb1e8c6bcb75338fbe9c142b81cb8ef28a626ea87af1ef0554151a0873",
  "receipt": {
    "to": null,
    "from": "0x114B1d9f0d546B8f85C4003dcd4ca5CbB7F6bC98",
    "contractAddress": "0xF4BcA07Ed1F6735B509699B99237Ce7a63632ba4",
    "transactionIndex": 42,
    "gasUsed": "2784611",
    "logsBloom": "0x
    "blockHash": "0xe7a00f220b74f87f01a7848c5251a13e2e4a804b44b885246bcab61531441668",
    "transactionHash": "0x888c55bb1e8c6bcb75338fbe9c142b81cb8ef28a626ea87af1ef0554151a0873",
    "logs": [
      {
        "transactionIndex": 42,
        "blockNumber": 49897280,
        "transactionHash": "0x888c55bb1e8c6bcb75338fbe9c142b81cb8ef28a626ea87af1ef0554151a0873",
        "address": "0xF4BcA07Ed1F6735B509699B99237Ce7a63632ba4",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 250,
        "blockHash": "0xe7a00f220b74f87f01a7848c5251a13e2e4a804b44b885246bcab61531441668"
      },
      {
        "transactionIndex": 42,
        "blockNumber": 49897280,
        "transactionHash": "0x888c55bb1e8c6bcb75338fbe9c142b81cb8ef28a626ea87af1ef0554151a0873",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000114b1d9f0d546b8f85c4003dcd4ca5cbb7f6bc98",
          "0x0000000000000000000000009ead03f7136fc6b4bdb0780b00a1c14ae5a8b6d0"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000655583367e3db35000000000000000000000000000000000000000000000000ae06aebd2f9edef40000000000000000000000000000000000000000000006b2a37fda374a91175e000000000000000000000000000000000000000000000000a7b15689c7bb03bf0000000000000000000000000000000000000000000006b2a9d5326ab274f293",
        "logIndex": 251,
        "blockHash": "0xe7a00f220b74f87f01a7848c5251a13e2e4a804b44b885246bcab61531441668"
      }
    ],
    "blockNumber": 49897280,
    "cumulativeGasUsed": "13138613",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4309e5257b9fc4698732e88e622d7204",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"tiers\",\"type\":\"uint8[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"metadataHashes\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"revealed\",\"type\":\"bool[]\"}],\"name\":\"AssetBatchMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"tier\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"revealed\",\"type\":\"bool\"}],\"name\":\"AssetMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"tier\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"revealed\",\"type\":\"bool\"}],\"name\":\"SpecialAssetMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTrustedForwarderAddress\",\"type\":\"address\"}],\"name\":\"TrustedForwarderChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldTrustedForwarder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTrustedForwarder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"TrustedForwarderSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_BATCH_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SPECIAL_MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"revealed\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"metadataHash\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"createAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint8[]\",\"name\":\"tiers\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"revealed\",\"type\":\"bool[]\"},{\"internalType\":\"string[]\",\"name\":\"metadataHashes\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"createMultipleAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadataHash\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"createSpecialAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"creatorNonces\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAssetContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"assetContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuthValidator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"authValidatorAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCatalystContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"catalystContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_assetContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_catalystContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_authValidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_forwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_defaultAdmin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"signatureNonces\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"The Sandbox\",\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"TrustedForwarderSet(address,address,address)\":{\"params\":{\"newTrustedForwarder\":\"new trusted forwarder\",\"oldTrustedForwarder\":\"old trusted forwarder\",\"operator\":\"the sender of the transaction\"}},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"createAsset(bytes,uint8,uint256,bool,string,address)\":{\"params\":{\"amount\":\"The amount of the asset to mint\",\"creator\":\"The address of the creator\",\"metadataHash\":\"The metadata hash of the asset to mint\",\"revealed\":\"Whether the asset is revealed or not\",\"signature\":\"A signature generated by TSB\",\"tier\":\"The tier of the asset to mint\"}},\"createMultipleAssets(bytes,uint8[],uint256[],bool[],string[],address)\":{\"params\":{\"amounts\":\"The amounts of the assets to mint\",\"creator\":\"The address of the creator\",\"metadataHashes\":\"The metadata hashes of the assets to mint\",\"revealed\":\"Whether the assets are revealed or not\",\"signature\":\"A signature generated by TSB\",\"tiers\":\"The tiers of the assets to mint\"}},\"createSpecialAsset(bytes,uint256,string,address)\":{\"details\":\"Only callable by the special minter\",\"params\":{\"amount\":\"The amount of the asset to mint\",\"creator\":\"The address of the creator\",\"metadataHash\":\"The metadata hash of the asset to mint,\",\"signature\":\"A signature generated by TSB\"}},\"eip712Domain()\":{\"details\":\"See {EIP-5267}. _Available since v4.9._\"},\"getAssetContract()\":{\"returns\":{\"assetContractAddress\":\"The asset contract address\"}},\"getAuthValidator()\":{\"returns\":{\"authValidatorAddress\":\"The auth validator address\"}},\"getCatalystContract()\":{\"returns\":{\"catalystContractAddress\":\"The catalyst contract address\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getTrustedForwarder()\":{\"returns\":{\"_0\":\"return the address of the trusted forwarder\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(string,string,address,address,address,address,address)\":{\"params\":{\"_assetContract\":\"The address of the asset contract\",\"_authValidator\":\"The address of the AuthSuperValidator contract\",\"_catalystContract\":\"The address of the catalyst contract\",\"_defaultAdmin\":\"The address of the default admin\",\"_forwarder\":\"The address of the forwarder contract\",\"_name\":\"The name of the contract (for EIP712)\",\"_version\":\"The version of the contract (for EIP712)\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"trusted forwarder address to check\"},\"returns\":{\"_0\":\"true if the address is the same as the trusted forwarder\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setTrustedForwarder(address)\":{\"details\":\"Change the address of the trusted forwarder for meta-TX\",\"params\":{\"trustedForwarder\":\"The new trustedForwarder\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"title\":\"AssetCreate\",\"version\":1},\"userdoc\":{\"events\":{\"TrustedForwarderSet(address,address,address)\":{\"notice\":\"Emitted when a `newTrustedForwarder` is set, replacing the `oldTrustedForwarder`\"}},\"kind\":\"user\",\"methods\":{\"createAsset(bytes,uint8,uint256,bool,string,address)\":{\"notice\":\"Create a new asset\"},\"createMultipleAssets(bytes,uint8[],uint256[],bool[],string[],address)\":{\"notice\":\"Create multiple assets at once\"},\"createSpecialAsset(bytes,uint256,string,address)\":{\"notice\":\"Create special assets, like TSB exclusive tokens\"},\"getAssetContract()\":{\"notice\":\"Get the asset contract address\"},\"getAuthValidator()\":{\"notice\":\"Get the auth validator address\"},\"getCatalystContract()\":{\"notice\":\"Get the catalyst contract address\"},\"getTrustedForwarder()\":{\"notice\":\"return the address of the trusted forwarder\"},\"initialize(string,string,address,address,address,address,address)\":{\"notice\":\"Initialize the contract\"},\"isTrustedForwarder(address)\":{\"notice\":\"return true if the forwarder is the trusted forwarder\"},\"pause()\":{\"notice\":\"Pause the contracts mint and burn functions\"},\"setTrustedForwarder(address)\":{\"notice\":\"Set a new trusted forwarder address, limited to DEFAULT_ADMIN_ROLE only\"},\"unpause()\":{\"notice\":\"Unpause the contracts mint and burn functions\"}},\"notice\":\"User-facing contract for creating new assets\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@sandbox-smart-contracts/asset/contracts/AssetCreate.sol\":\"AssetCreate\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xfeefb24d068524440e1ba885efdf105d91f83504af3c2d745ffacc4595396831\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267Upgradeable {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0xe562dab443278837fa50faddb76743399e942181881db8dccaea3bd1712994db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0xa014f65d84b02827055d99993ccdbfb4b56b2c9e91eb278d82a93330659d06e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC5267Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable, IERC5267Upgradeable {\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @custom:oz-renamed-from _HASHED_NAME\\n    bytes32 private _hashedName;\\n    /// @custom:oz-renamed-from _HASHED_VERSION\\n    bytes32 private _hashedVersion;\\n\\n    string private _name;\\n    string private _version;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        _name = name;\\n        _version = version;\\n\\n        // Reset prior values in storage if upgrading\\n        _hashedName = 0;\\n        _hashedVersion = 0;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator();\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash(), block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {EIP-5267}.\\n     *\\n     * _Available since v4.9._\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        // If the hashed name and version in storage are non-zero, the contract hasn't been properly initialized\\n        // and the EIP712 domain is not reliable, as it will be missing name and version.\\n        require(_hashedName == 0 && _hashedVersion == 0, \\\"EIP712: Uninitialized\\\");\\n\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Name() internal virtual view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Version() internal virtual view returns (string memory) {\\n        return _version;\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Name` instead.\\n     */\\n    function _EIP712NameHash() internal view returns (bytes32) {\\n        string memory name = _EIP712Name();\\n        if (bytes(name).length > 0) {\\n            return keccak256(bytes(name));\\n        } else {\\n            // If the name is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the name hash in storage if non-zero, otherwise we assume the name is empty by design.\\n            bytes32 hashedName = _hashedName;\\n            if (hashedName != 0) {\\n                return hashedName;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Version` instead.\\n     */\\n    function _EIP712VersionHash() internal view returns (bytes32) {\\n        string memory version = _EIP712Version();\\n        if (bytes(version).length > 0) {\\n            return keccak256(bytes(version));\\n        } else {\\n            // If the version is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the version hash in storage if non-zero, otherwise we assume the version is empty by design.\\n            bytes32 hashedVersion = _hashedVersion;\\n            if (hashedVersion != 0) {\\n                return hashedVersion;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0xeb8d6be406a373771724922eb41b5d593bc8e2dc705daa22cd1145cfc8f5a3a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/asset/contracts/AssetCreate.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {EIP712Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\\\";\\nimport {\\n    AccessControlUpgradeable,\\n    ContextUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport {TokenIdUtils} from \\\"./libraries/TokenIdUtils.sol\\\";\\nimport {AuthSuperValidator} from \\\"./AuthSuperValidator.sol\\\";\\nimport {\\n    ERC2771HandlerUpgradeable\\n} from \\\"@sandbox-smart-contracts/dependency-metatx/contracts/ERC2771HandlerUpgradeable.sol\\\";\\nimport {IAsset} from \\\"./interfaces/IAsset.sol\\\";\\nimport {ICatalyst} from \\\"./interfaces/ICatalyst.sol\\\";\\nimport {IAssetCreate} from \\\"./interfaces/IAssetCreate.sol\\\";\\n\\n/// @title AssetCreate\\n/// @author The Sandbox\\n/// @notice User-facing contract for creating new assets\\ncontract AssetCreate is\\n    IAssetCreate,\\n    Initializable,\\n    ERC2771HandlerUpgradeable,\\n    EIP712Upgradeable,\\n    AccessControlUpgradeable,\\n    PausableUpgradeable\\n{\\n    using TokenIdUtils for uint256;\\n\\n    IAsset private assetContract;\\n    ICatalyst private catalystContract;\\n    AuthSuperValidator private authValidator;\\n\\n    // mapping of creator address to creator nonce, a nonce is incremented every time a creator mints a new token\\n    mapping(address => uint16) public creatorNonces;\\n    mapping(address => uint16) public signatureNonces;\\n\\n    bytes32 public constant SPECIAL_MINTER_ROLE = keccak256(\\\"SPECIAL_MINTER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    bytes32 public constant MINT_TYPEHASH =\\n        keccak256(\\\"Mint(address creator,uint16 nonce,uint8 tier,uint256 amount,bool revealed,string metadataHash)\\\");\\n    bytes32 public constant MINT_BATCH_TYPEHASH =\\n        keccak256(\\n            \\\"MintBatch(address creator,uint16 nonce,uint8[] tiers,uint256[] amounts,bool[] revealed,string[] metadataHashes)\\\"\\n        );\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Initialize the contract\\n    /// @param _name The name of the contract (for EIP712)\\n    /// @param _version The version of the contract (for EIP712)\\n    /// @param _assetContract The address of the asset contract\\n    /// @param _catalystContract The address of the catalyst contract\\n    /// @param _authValidator The address of the AuthSuperValidator contract\\n    /// @param _forwarder The address of the forwarder contract\\n    /// @param _defaultAdmin The address of the default admin\\n    function initialize(\\n        string memory _name,\\n        string memory _version,\\n        address _assetContract,\\n        address _catalystContract,\\n        address _authValidator,\\n        address _forwarder,\\n        address _defaultAdmin\\n    ) public initializer {\\n        assetContract = IAsset(_assetContract);\\n        catalystContract = ICatalyst(_catalystContract);\\n        authValidator = AuthSuperValidator(_authValidator);\\n        __ERC2771Handler_init(_forwarder);\\n        __EIP712_init(_name, _version);\\n        __AccessControl_init();\\n        __Pausable_init();\\n        _grantRole(DEFAULT_ADMIN_ROLE, _defaultAdmin);\\n    }\\n\\n    /// @notice Create a new asset\\n    /// @param signature A signature generated by TSB\\n    /// @param tier The tier of the asset to mint\\n    /// @param amount The amount of the asset to mint\\n    /// @param revealed Whether the asset is revealed or not\\n    /// @param metadataHash The metadata hash of the asset to mint\\n    /// @param creator The address of the creator\\n    function createAsset(\\n        bytes memory signature,\\n        uint8 tier,\\n        uint256 amount,\\n        bool revealed,\\n        string calldata metadataHash,\\n        address creator\\n    ) external whenNotPaused {\\n        require(\\n            authValidator.verify(\\n                signature,\\n                _hashMint(creator, signatureNonces[_msgSender()]++, tier, amount, revealed, metadataHash)\\n            ),\\n            \\\"AssetCreate: Invalid signature\\\"\\n        );\\n\\n        uint256 tokenId =\\n            TokenIdUtils.generateTokenId(creator, tier, ++creatorNonces[creator], revealed ? 1 : 0, false);\\n\\n        // burn catalyst of a given tier\\n        catalystContract.burnFrom(creator, tier, amount);\\n        assetContract.mint(creator, tokenId, amount, metadataHash);\\n        emit AssetMinted(creator, tokenId, tier, amount, metadataHash, revealed);\\n    }\\n\\n    /// @notice Create multiple assets at once\\n    /// @param signature A signature generated by TSB\\n    /// @param tiers The tiers of the assets to mint\\n    /// @param amounts The amounts of the assets to mint\\n    /// @param revealed Whether the assets are revealed or not\\n    /// @param metadataHashes The metadata hashes of the assets to mint\\n    /// @param creator The address of the creator\\n    function createMultipleAssets(\\n        bytes memory signature,\\n        uint8[] calldata tiers,\\n        uint256[] calldata amounts,\\n        bool[] calldata revealed,\\n        string[] calldata metadataHashes,\\n        address creator\\n    ) external whenNotPaused {\\n        require(\\n            authValidator.verify(\\n                signature,\\n                _hashBatchMint(creator, signatureNonces[_msgSender()]++, tiers, amounts, revealed, metadataHashes)\\n            ),\\n            \\\"AssetCreate: Invalid signature\\\"\\n        );\\n\\n        require(tiers.length == amounts.length, \\\"AssetCreate: 1-Array lengths\\\");\\n        require(amounts.length == metadataHashes.length, \\\"AssetCreate: 2-Array lengths\\\");\\n        require(metadataHashes.length == revealed.length, \\\"AssetCreate: 3-Array lengths\\\");\\n\\n        uint256[] memory tokenIds = new uint256[](tiers.length);\\n        uint256[] memory tiersToBurn = new uint256[](tiers.length);\\n        for (uint256 i = 0; i < tiers.length; i++) {\\n            tiersToBurn[i] = tiers[i];\\n            tokenIds[i] = TokenIdUtils.generateTokenId(\\n                creator,\\n                tiers[i],\\n                ++creatorNonces[creator],\\n                revealed[i] ? 1 : 0,\\n                false\\n            );\\n        }\\n\\n        catalystContract.burnBatchFrom(creator, tiersToBurn, amounts);\\n\\n        assetContract.mintBatch(creator, tokenIds, amounts, metadataHashes);\\n        emit AssetBatchMinted(creator, tokenIds, tiers, amounts, metadataHashes, revealed);\\n    }\\n\\n    /// @notice Create special assets, like TSB exclusive tokens\\n    /// @dev Only callable by the special minter\\n    /// @param signature A signature generated by TSB\\n    /// @param amount The amount of the asset to mint\\n    /// @param metadataHash The metadata hash of the asset to mint,\\n    /// @param creator The address of the creator\\n    function createSpecialAsset(\\n        bytes memory signature,\\n        uint256 amount,\\n        string calldata metadataHash,\\n        address creator\\n    ) external onlyRole(SPECIAL_MINTER_ROLE) whenNotPaused {\\n        require(\\n            authValidator.verify(\\n                signature,\\n                _hashMint(creator, signatureNonces[_msgSender()]++, 0, amount, true, metadataHash)\\n            ),\\n            \\\"AssetCreate: Invalid signature\\\"\\n        );\\n\\n        uint256 tokenId = TokenIdUtils.generateTokenId(creator, 0, ++creatorNonces[creator], 1, false);\\n\\n        assetContract.mint(creator, tokenId, amount, metadataHash);\\n        emit SpecialAssetMinted(creator, tokenId, 0, amount, metadataHash, true);\\n    }\\n\\n    /// @notice Pause the contracts mint and burn functions\\n    function pause() external onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    /// @notice Unpause the contracts mint and burn functions\\n    function unpause() external onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n\\n    /// @notice Get the asset contract address\\n    /// @return assetContractAddress The asset contract address\\n    function getAssetContract() external view returns (address assetContractAddress) {\\n        return address(assetContract);\\n    }\\n\\n    /// @notice Get the catalyst contract address\\n    /// @return catalystContractAddress The catalyst contract address\\n    function getCatalystContract() external view returns (address catalystContractAddress) {\\n        return address(catalystContract);\\n    }\\n\\n    /// @notice Get the auth validator address\\n    /// @return authValidatorAddress The auth validator address\\n    function getAuthValidator() external view returns (address authValidatorAddress) {\\n        return address(authValidator);\\n    }\\n\\n    /// @notice Creates a hash of the mint data\\n    /// @param creator The address of the creator\\n    /// @param nonce The nonce of the creator\\n    /// @param tier The tier of the asset\\n    /// @param amount The amount of copies to mint\\n    /// @param revealed Whether the asset is revealed or not\\n    /// @param metadataHash The metadata hash of the asset\\n    /// @return digest The hash of the mint data\\n    function _hashMint(\\n        address creator,\\n        uint16 nonce,\\n        uint8 tier,\\n        uint256 amount,\\n        bool revealed,\\n        string calldata metadataHash\\n    ) internal view returns (bytes32 digest) {\\n        digest = _hashTypedDataV4(\\n            keccak256(\\n                abi.encode(\\n                    MINT_TYPEHASH,\\n                    creator,\\n                    nonce,\\n                    tier,\\n                    amount,\\n                    revealed,\\n                    keccak256((abi.encodePacked(metadataHash)))\\n                )\\n            )\\n        );\\n    }\\n\\n    /// @notice Creates a hash of the mint batch data\\n    /// @param creator The address of the creator\\n    /// @param nonce The nonce of the creator\\n    /// @param tiers The tiers of the assets\\n    /// @param amounts The amounts of copies to mint\\n    /// @param revealed Whether the assets are revealed or not\\n    /// @param metadataHashes The metadata hashes of the assets\\n    /// @return digest The hash of the mint batch data\\n    function _hashBatchMint(\\n        address creator,\\n        uint16 nonce,\\n        uint8[] calldata tiers,\\n        uint256[] calldata amounts,\\n        bool[] calldata revealed,\\n        string[] calldata metadataHashes\\n    ) internal view returns (bytes32 digest) {\\n        digest = _hashTypedDataV4(\\n            keccak256(\\n                abi.encode(\\n                    MINT_BATCH_TYPEHASH,\\n                    creator,\\n                    nonce,\\n                    keccak256(abi.encodePacked(tiers)),\\n                    keccak256(abi.encodePacked(amounts)),\\n                    keccak256(abi.encodePacked(revealed)),\\n                    _encodeHashes(metadataHashes)\\n                )\\n            )\\n        );\\n    }\\n\\n    /// @notice Encodes the hashes of the metadata for signature verification\\n    /// @param metadataHashes The hashes of the metadata\\n    /// @return encodedHashes The encoded hashes of the metadata\\n    function _encodeHashes(string[] memory metadataHashes) internal pure returns (bytes32) {\\n        bytes32[] memory encodedHashes = new bytes32[](metadataHashes.length);\\n        for (uint256 i = 0; i < metadataHashes.length; i++) {\\n            encodedHashes[i] = keccak256((abi.encodePacked(metadataHashes[i])));\\n        }\\n\\n        return keccak256(abi.encodePacked(encodedHashes));\\n    }\\n\\n    /// @notice Set a new trusted forwarder address, limited to DEFAULT_ADMIN_ROLE only\\n    /// @dev Change the address of the trusted forwarder for meta-TX\\n    /// @param trustedForwarder The new trustedForwarder\\n    function setTrustedForwarder(address trustedForwarder) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(trustedForwarder != address(0), \\\"AssetCreate: Zero address\\\");\\n        _setTrustedForwarder(trustedForwarder);\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override(ContextUpgradeable, ERC2771HandlerUpgradeable)\\n        returns (address sender)\\n    {\\n        return ERC2771HandlerUpgradeable._msgSender();\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        virtual\\n        override(ContextUpgradeable, ERC2771HandlerUpgradeable)\\n        returns (bytes calldata)\\n    {\\n        return ERC2771HandlerUpgradeable._msgData();\\n    }\\n\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xfb45ea45610ca5ee480b81de34ccf6035be7f35f597ff7c79a97ed1985d314b4\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/asset/contracts/AuthSuperValidator.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\n/// @title AuthSuperValidator\\n/// @author The Sandbox\\n/// @notice This contract is used to validate the signatures of the backend, each contract can have a separate signer assigned\\ncontract AuthSuperValidator is AccessControl {\\n    mapping(address => address) private _signers;\\n\\n    /// @dev Constructor\\n    /// @param admin Address of the admin that will be able to grant roles\\n    constructor(address admin) {\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\\n    }\\n\\n    /// @notice Sets the signer for a contract\\n    /// @dev Only the admin can call this function\\n    /// @param contractAddress Address of the contract to set the signer for\\n    /// @param signer Address of the signer\\n    function setSigner(address contractAddress, address signer) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _signers[contractAddress] = signer;\\n    }\\n\\n    /// @notice Gets the signer for a contract\\n    /// @param contractAddress Address of the contract to get the signer for\\n    /// @return address of the signer\\n    function getSigner(address contractAddress) public view returns (address) {\\n        return _signers[contractAddress];\\n    }\\n\\n    /// @notice Takes the signature and the digest and returns if the signer has a backend signer role assigned\\n    /// @dev Multipurpose function that can be used to verify signatures with different digests\\n    /// @param signature Signature hash\\n    /// @param digest Digest hash\\n    /// @return bool\\n    function verify(bytes memory signature, bytes32 digest) public view returns (bool) {\\n        address signer = _signers[_msgSender()];\\n        require(signer != address(0), \\\"AuthSuperValidator: No signer\\\");\\n        address recoveredSigner = ECDSA.recover(digest, signature);\\n        return recoveredSigner == signer;\\n    }\\n\\n    /// @notice Prevents the DEFAULT_ADMIN_ROLE from being renounced\\n    /// @dev This function overrides the default renounceRole function to prevent the DEFAULT_ADMIN_ROLE from being renounced\\n    /// @param role Role to renounce\\n    /// @param account Account to renounce the role for\\n    function renounceRole(bytes32 role, address account) public override {\\n        require(role != DEFAULT_ADMIN_ROLE, \\\"AuthSuperValidator: Admin needed\\\");\\n        super.renounceRole(role, account);\\n    }\\n}\\n\",\"keccak256\":\"0x2b707b14efefb8d16841983887fa055ec4528d8b9d683d9c049d30eb1e51c5c5\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/asset/contracts/interfaces/IAsset.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\n/// @title Asset interface\\n/// @author The Sandbox\\ninterface IAsset {\\n    // AssetData reflects the asset tokenId structure\\n    // Refer to TokenIdUtils.sol\\n    struct AssetData {\\n        uint256 tokenId;\\n        address creator;\\n        uint256 amount;\\n        uint8 tier;\\n        uint16 creatorNonce;\\n        bool revealed;\\n        string metadataHash;\\n        bool bridged;\\n    }\\n\\n    event TrustedForwarderChanged(address indexed newTrustedForwarderAddress);\\n\\n    /// @notice Mint new tokens\\n    /// @dev Only callable by the minter role\\n    /// @param to The address of the recipient\\n    /// @param id The id of the token to mint\\n    /// @param amount The amount of the token to mint\\n    /// @param metadataHash The metadata hash of the token to mint\\n    function mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        string memory metadataHash\\n    ) external;\\n\\n    /// @notice Mint new tokens with catalyst tier chosen by the creator\\n    /// @dev Only callable by the minter role\\n    /// @param to The address of the recipient\\n    /// @param ids The ids of the tokens to mint\\n    /// @param amounts The amounts of the tokens to mint\\n    /// @param metadataHashes The metadata hashes of the tokens to mint\\n    function mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        string[] memory metadataHashes\\n    ) external;\\n\\n    /// @notice Burn a token from a given account\\n    /// @dev Only the minter role can burn tokens\\n    /// @dev This function was added with token recycling and bridging in mind but may have other use cases\\n    /// @param account The account to burn tokens from\\n    /// @param id The token id to burn\\n    /// @param amount The amount of tokens to burn\\n    function burnFrom(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) external;\\n\\n    /// @notice Burn a batch of tokens from a given account\\n    /// @dev Only the minter role can burn tokens\\n    /// @dev This function was added with token recycling and bridging in mind but may have other use cases\\n    /// @dev The length of the ids and amounts arrays must be the same\\n    /// @param account The account to burn tokens from\\n    /// @param ids An array of token ids to burn\\n    /// @param amounts An array of amounts of tokens to burn\\n    function burnBatchFrom(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    /// @notice returns the tokenId associated with provided metadata hash\\n    /// @param metadataHash The metadata hash to get tokenId for\\n    /// @return tokenId the tokenId associated with the metadata hash\\n    function getTokenIdByMetadataHash(string memory metadataHash) external view returns (uint256 tokenId);\\n}\\n\",\"keccak256\":\"0xbc79058becff31b0b7f465d92a89aad25f561dbdb5a2cd068d51c7ef93b4fbfe\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/asset/contracts/interfaces/IAssetCreate.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\n/// @title AssetCreate interface\\n/// @author The Sandbox\\ninterface IAssetCreate {\\n    event TrustedForwarderChanged(address indexed newTrustedForwarderAddress);\\n    event AssetMinted(\\n        address indexed creator,\\n        uint256 tokenId,\\n        uint16 tier,\\n        uint256 amount,\\n        string metadataHash,\\n        bool revealed\\n    );\\n    event SpecialAssetMinted(\\n        address indexed creator,\\n        uint256 tokenId,\\n        uint16 tier,\\n        uint256 amount,\\n        string metadataHash,\\n        bool revealed\\n    );\\n    event AssetBatchMinted(\\n        address indexed creator,\\n        uint256[] tokenIds,\\n        uint8[] tiers,\\n        uint256[] amounts,\\n        string[] metadataHashes,\\n        bool[] revealed\\n    );\\n}\\n\",\"keccak256\":\"0x3d5d85ce6ad96f56d2d39e191d851ec82acd41e69e1658af97affb9aa522bca7\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/asset/contracts/interfaces/ICatalyst.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\ninterface ICatalyst {\\n    enum CatalystType {TSB_EXCLUSIVE, COMMON, UNCOMMON, RARE, EPIC, LEGENDARY, MYTHIC}\\n\\n    event TrustedForwarderChanged(address indexed newTrustedForwarderAddress);\\n    event NewCatalystTypeAdded(uint256 catalystId);\\n    event DefaultRoyaltyChanged(address indexed newDefaultRoyaltyRecipient, uint256 newDefaultRoyaltyAmount);\\n    event BaseURISet(string baseURI);\\n    event OperatorRegistrySet(address indexed registry);\\n\\n    /// @notice Mints a new token, limited to MINTER_ROLE only\\n    /// @param to The address that will own the minted token\\n    /// @param id The token id to mint\\n    /// @param amount The amount to be minted\\n    function mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount\\n    ) external;\\n\\n    /// @notice Mints a batch of tokens, limited to MINTER_ROLE only\\n    /// @param to The address that will own the minted tokens\\n    /// @param ids The token ids to mint\\n    /// @param amounts The amounts to be minted per token id\\n    function mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    /// @notice Burns a specified amount of tokens from a specific address\\n    /// @param account The address to burn from\\n    /// @param id The token id to burn\\n    /// @param amount The amount to be burned\\n    function burnFrom(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) external;\\n\\n    /// @notice Burns a batch of tokens from a specific address\\n    /// @param account The address to burn from\\n    /// @param ids The token ids to burn\\n    /// @param amounts The amounts to be burned\\n    function burnBatchFrom(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    /// @notice Add a new catalyst type, limited to DEFAULT_ADMIN_ROLE only\\n    /// @param ipfsCID The royalty bps for the catalyst\\n    function addNewCatalystType(string memory ipfsCID) external;\\n\\n    /// @notice Set a new URI for specific tokenid\\n    /// @param tokenId The token id to set URI for\\n    /// @param metadataHash The new URI\\n    function setMetadataHash(uint256 tokenId, string memory metadataHash) external;\\n\\n    /// @notice Set a new base URI\\n    /// @param baseURI The new base URI\\n    function setBaseURI(string memory baseURI) external;\\n}\\n\",\"keccak256\":\"0x4dec39e4b662c4b51f0f828f1b8ea01c873c8a0a18a7c17bc5497f557ceff101\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/asset/contracts/libraries/TokenIdUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IAsset} from \\\"../interfaces/IAsset.sol\\\";\\n\\n/// @title TokenIdUtils library\\n/// @author The Sandbox\\n/// @notice Contains utility functions for token ids\\nlibrary TokenIdUtils {\\n    // Layer masks\\n    uint256 public constant TIER_MASK = 0xFF;\\n    uint256 public constant NONCE_MASK = 0xFFFF;\\n    uint256 public constant REVEAL_NONCE_MASK = 0xFFFF;\\n    uint256 public constant BRIDGED_MASK = 0x1;\\n\\n    // Bit shifts\\n    uint256 public constant CREATOR_SHIFT = 0;\\n    uint256 public constant TIER_SHIFT = 160;\\n    uint256 public constant NONCE_SHIFT = 168;\\n    uint256 public constant REVEAL_NONCE_SHIFT = 184;\\n    uint256 public constant BRIDGED_SHIFT = 200;\\n\\n    /// @notice Generates a token id for a given asset\\n    /// @dev The token id is generated by concatenating the following fields:\\n    /// @dev creator address, tier, creator nonce, reveal nonce and bridged boolean\\n    /// @dev The first 160 bits are the creator address\\n    /// @dev The next 8 bits are the tier\\n    /// @dev The next 16 bits are the creator nonce\\n    /// @dev The next 16 bits are for reveal nonce.\\n    /// @dev The last bit is for bridged boolean\\n    /// @param creator The address of the creator of the asset\\n    /// @param tier The tier of the asset determined by the catalyst used to create it\\n    /// @param creatorNonce The nonce of the asset creator\\n    /// @param revealNonce The reveal nonce of the asset\\n    /// @param bridged Whether the asset is bridged or not\\n    /// @return tokenId The generated token id\\n    function generateTokenId(\\n        address creator,\\n        uint8 tier,\\n        uint16 creatorNonce,\\n        uint16 revealNonce,\\n        bool bridged\\n    ) internal pure returns (uint256 tokenId) {\\n        uint160 creatorAddress = uint160(creator);\\n\\n        tokenId = tokenId =\\n            uint256(creatorAddress) |\\n            (uint256(tier) << TIER_SHIFT) |\\n            (uint256(creatorNonce) << NONCE_SHIFT) |\\n            (uint256(revealNonce) << REVEAL_NONCE_SHIFT) |\\n            (uint256(bridged ? 1 : 0) << BRIDGED_SHIFT);\\n\\n        return tokenId;\\n    }\\n\\n    /// @notice Extracts the creator address from a given token id\\n    /// @param tokenId The token id to extract the creator address from\\n    /// @return creator The asset creator address\\n    function getCreatorAddress(uint256 tokenId) internal pure returns (address creator) {\\n        creator = address(uint160(tokenId));\\n        return creator;\\n    }\\n\\n    /// @notice Extracts the tier from a given token id\\n    /// @param tokenId The token id to extract the tier from\\n    /// @return tier The asset tier, determined by the catalyst used to create it\\n    function getTier(uint256 tokenId) internal pure returns (uint8 tier) {\\n        tier = uint8((tokenId >> TIER_SHIFT) & TIER_MASK);\\n        return tier;\\n    }\\n\\n    /// @notice Extracts the revealed flag from a given token id\\n    /// @param tokenId The token id to extract the revealed flag from\\n    /// @return isRevealed Whether the asset is revealed or not\\n    function isRevealed(uint256 tokenId) internal pure returns (bool) {\\n        uint16 revealNonce = getRevealNonce(tokenId);\\n        return revealNonce != 0;\\n    }\\n\\n    /// @notice Extracts the asset nonce from a given token id\\n    /// @param tokenId The token id to extract the asset nonce from\\n    /// @return creatorNonce The asset creator nonce\\n    function getCreatorNonce(uint256 tokenId) internal pure returns (uint16) {\\n        uint16 creatorNonce = uint16((tokenId >> NONCE_SHIFT) & NONCE_MASK);\\n        return creatorNonce;\\n    }\\n\\n    /// @notice Extracts the abilities and enhancements hash from a given token id\\n    /// @param tokenId The token id to extract reveal nonce from\\n    /// @return revealNonce The reveal nonce of the asset\\n    function getRevealNonce(uint256 tokenId) internal pure returns (uint16) {\\n        uint16 revealNonce = uint16((tokenId >> REVEAL_NONCE_SHIFT) & REVEAL_NONCE_MASK);\\n        return revealNonce;\\n    }\\n\\n    /// @notice Extracts the bridged flag from a given token id\\n    /// @param tokenId The token id to extract the bridged flag from\\n    /// @return bridged Whether the asset is bridged or not\\n    function isBridged(uint256 tokenId) internal pure returns (bool) {\\n        bool bridged = ((tokenId >> BRIDGED_SHIFT) & BRIDGED_MASK) == 1;\\n        return bridged;\\n    }\\n\\n    /// @notice Extracts the asset data from a given token id\\n    /// @dev Created to limit the number of functions that need to be called when revealing an asset\\n    /// @param tokenId The token id to extract the asset data from\\n    /// @return data The asset data struct\\n    function getData(uint256 tokenId) internal pure returns (IAsset.AssetData memory data) {\\n        data.creator = getCreatorAddress(tokenId);\\n        data.tier = getTier(tokenId);\\n        data.revealed = isRevealed(tokenId);\\n        data.creatorNonce = getCreatorNonce(tokenId);\\n        data.bridged = isBridged(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x68a7d6f1ff700f2c1cc9b20e89ccd9aa7fced45a54cc1e3c361136c57d0e4511\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/dependency-metatx/contracts/ERC2771HandlerAbstract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @dev minimal ERC2771 handler to keep bytecode-size down\\n/// based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/metatx/ERC2771Context.sol\\nabstract contract ERC2771HandlerAbstract {\\n    /// @notice return true if the forwarder is the trusted forwarder\\n    /// @param forwarder trusted forwarder address to check\\n    /// @return true if the address is the same as the trusted forwarder\\n    function isTrustedForwarder(address forwarder) external view returns (bool) {\\n        return _isTrustedForwarder(forwarder);\\n    }\\n\\n    /// @notice if the call is from the trusted forwarder the sender is extracted from calldata, msg.sender otherwise\\n    /// @return sender the calculated address of the sender\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (_isTrustedForwarder(msg.sender) && msg.data.length >= 20) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            sender = msg.sender;\\n        }\\n    }\\n\\n    /// @notice if the call is from the trusted forwarder the sender is removed from calldata\\n    /// @return the calldata without the sender\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (_isTrustedForwarder(msg.sender) && msg.data.length >= 20) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n\\n    /// @notice return true if the forwarder is the trusted forwarder\\n    /// @param forwarder trusted forwarder address to check\\n    /// @return true if the address is the same as the trusted forwarder\\n    /// @dev this function must be IMPLEMENTED\\n    function _isTrustedForwarder(address forwarder) internal view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0xc4f349865ea7146f51b69f1edacdef60e0a2a7cf4dab538a5ae53ee9a0036231\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/dependency-metatx/contracts/ERC2771HandlerUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {ERC2771HandlerAbstract} from \\\"./ERC2771HandlerAbstract.sol\\\";\\n\\n/// @dev minimal ERC2771 handler to keep bytecode-size down\\n/// based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/metatx/ERC2771Context.sol\\ncontract ERC2771HandlerUpgradeable is Initializable, ERC2771HandlerAbstract {\\n    address private _trustedForwarder;\\n\\n    /// @notice Emitted when a `newTrustedForwarder` is set, replacing the `oldTrustedForwarder`\\n    /// @param oldTrustedForwarder old trusted forwarder\\n    /// @param newTrustedForwarder new trusted forwarder\\n    /// @param operator the sender of the transaction\\n    event TrustedForwarderSet(\\n        address indexed oldTrustedForwarder,\\n        address indexed newTrustedForwarder,\\n        address indexed operator\\n    );\\n\\n    /// @notice initialize the trusted forwarder address\\n    /// @param forwarder trusted forwarder address or zero to disable it\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __ERC2771Handler_init(address forwarder) internal onlyInitializing {\\n        __ERC2771Handler_init_unchained(forwarder);\\n    }\\n\\n    /// @notice initialize the trusted forwarder address\\n    /// @param forwarder trusted forwarder address or zero to disable it\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __ERC2771Handler_init_unchained(address forwarder) internal onlyInitializing {\\n        _setTrustedForwarder(forwarder);\\n    }\\n\\n    /// @notice return the address of the trusted forwarder\\n    /// @return return the address of the trusted forwarder\\n    function getTrustedForwarder() external view returns (address) {\\n        return _trustedForwarder;\\n    }\\n\\n    /// @notice set the address of the trusted forwarder\\n    /// @param newForwarder the address of the new forwarder.\\n    function _setTrustedForwarder(address newForwarder) internal virtual {\\n        require(newForwarder != _trustedForwarder, \\\"ERC2771HandlerUpgradeable: forwarder already set\\\");\\n        emit TrustedForwarderSet(_trustedForwarder, newForwarder, _msgSender());\\n        _trustedForwarder = newForwarder;\\n    }\\n\\n    /// @notice return true if the forwarder is the trusted forwarder\\n    /// @param forwarder trusted forwarder address to check\\n    /// @return true if the address is the same as the trusted forwarder\\n    function _isTrustedForwarder(address forwarder) internal view virtual override returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    /// @notice if the call is from the trusted forwarder the sender is extracted from calldata, msg.sender otherwise\\n    /// @return sender the calculated address of the sender\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        return super._msgSender();\\n    }\\n\\n    /// @notice if the call is from the trusted forwarder the sender is removed from calldata\\n    /// @return the calldata without the sender\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        return super._msgData();\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x63b605598cecd8d66880b7978e17036367dfa8b0f236c2d5eaf0bff6328d26b8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e3565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811614620000e1576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b61310f80620000f36000396000f3fe608060405234801561001057600080fd5b50600436106101b95760003560e01c80638456cb59116100f9578063d547741f11610097578063dbd8483d11610071578063dbd8483d146103fb578063de743a7214610420578063e63ab1e914610447578063f76fc35e1461046e57600080fd5b8063d547741f146103c3578063d5f2077c146103d6578063da742228146103e857600080fd5b80639e7495aa116100d35780639e7495aa1461037e578063a217fddf14610391578063c91f0c5314610399578063ce1b815f146103ac57600080fd5b80638456cb591461032257806384b0196e1461032a57806391d148541461034557600080fd5b806336568abe1161016657806359c191e41161014057806359c191e4146102b85780635c975abb146102de57806374e3447a146102e95780637caa719a1461031057600080fd5b806336568abe1461028a5780633f4ba83a1461029d578063572b6c05146102a557600080fd5b80632d94a9d3116101975780632d94a9d31461022c5780632f2ff15d1461023f57806334dcdd521461025257600080fd5b806301ffc9a7146101be5780631a3101b1146101e6578063248a9ca3146101fb575b600080fd5b6101d16101cc366004612328565b610495565b60405190151581526020015b60405180910390f35b6101f96101f43660046124a5565b61052e565b005b61021e61020936600461254f565b600090815260ca602052604090206001015490565b6040519081526020016101dd565b6101f961023a366004612568565b610821565b6101f961024d3660046125ed565b610aa2565b610277610260366004612619565b6101316020526000908152604090205461ffff1681565b60405161ffff90911681526020016101dd565b6101f96102983660046125ed565b610acc565b6101f9610b68565b6101d16102b3366004612619565b610b9d565b61012e546001600160a01b03165b6040516001600160a01b0390911681526020016101dd565b60fc5460ff166101d1565b61021e7fb696df569c2dfecb5a24edfd39d7f55b0f442be14350cbc68dbe8eb35489d3a681565b61012f546001600160a01b03166102c6565b6101f9610bba565b610332610bec565b6040516101dd97969594939291906126bf565b6101d16103533660046125ed565b600091825260ca602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6101f961038c36600461278e565b610cae565b61021e600081565b6101f96103a7366004612887565b6111dc565b6000546201000090046001600160a01b03166102c6565b6101f96103d13660046125ed565b611381565b610130546001600160a01b03166102c6565b6101f96103f6366004612619565b6113a6565b610277610409366004612619565b6101326020526000908152604090205461ffff1681565b61021e7f52955c021a90f71f7afee289089576ce6998f456ca81e444651c71363bf2609581565b61021e7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b61021e7f3b0c69bab62d38b5774be9b5185349bf525ef97a4d288b652e29bb4ec2a4902d81565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061052857507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b610536611410565b610130546001600160a01b0316636b406341886105a984610132600061055a611465565b6001600160a01b0316815260208101919091526040016000908120805461ffff169161058583612946565b91906101000a81548161ffff021916908361ffff1602179055508b8b8b8b8b611474565b6040518363ffffffff1660e01b81526004016105c6929190612967565b602060405180830381865afa1580156105e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106079190612989565b6106585760405162461bcd60e51b815260206004820152601e60248201527f41737365744372656174653a20496e76616c6964207369676e6174757265000060448201526064015b60405180910390fd5b6001600160a01b03811660009081526101316020526040812080546106bd9184918a9190859061068b9061ffff16612946565b91906101000a81548161ffff021916908361ffff1602179055886106b05760006106b3565b60015b60ff166000611538565b61012f546040517f124d91e50000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015260ff8b166024830152604482018a905292935091169063124d91e590606401600060405180830381600087803b15801561073057600080fd5b505af1158015610744573d6000803e3d6000fd5b505061012e546040517fbb7fde710000000000000000000000000000000000000000000000000000000081526001600160a01b03909116925063bb7fde71915061079a90859085908b908a908a906004016129d1565b600060405180830381600087803b1580156107b457600080fd5b505af11580156107c8573d6000803e3d6000fd5b50505050816001600160a01b03167f293c16277edbc93bfb30f56ac279e45bbdbd421755b0278d19ebcd1cee6a795b82898988888b60405161080f96959493929190612a0b565b60405180910390a25050505050505050565b7fb696df569c2dfecb5a24edfd39d7f55b0f442be14350cbc68dbe8eb35489d3a661084b81611585565b610853611410565b610130546001600160a01b0316636b406341876108c8856101326000610877611465565b6001600160a01b0316815260208101919091526040016000908120805461ffff16916108a283612946565b91906101000a81548161ffff021916908361ffff16021790555060008b60018c8c611474565b6040518363ffffffff1660e01b81526004016108e5929190612967565b602060405180830381865afa158015610902573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109269190612989565b6109725760405162461bcd60e51b815260206004820152601e60248201527f41737365744372656174653a20496e76616c6964207369676e61747572650000604482015260640161064f565b6001600160a01b03821660009081526101316020526040812080546109c791859184919082906109a59061ffff16612946565b91906101000a81548161ffff021916908361ffff160217905560016000611538565b61012e546040517fbb7fde710000000000000000000000000000000000000000000000000000000081529192506001600160a01b03169063bb7fde7190610a1a90869085908b908b908b906004016129d1565b600060405180830381600087803b158015610a3457600080fd5b505af1158015610a48573d6000803e3d6000fd5b50505050826001600160a01b03167f07560e268a00bce229c6a07c00d3f177f67674deae28b79a1840dd20712366288260008989896001604051610a9196959493929190612a49565b60405180910390a250505050505050565b600082815260ca6020526040902060010154610abd81611585565b610ac78383611596565b505050565b610ad4611465565b6001600160a01b0316816001600160a01b031614610b5a5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c660000000000000000000000000000000000606482015260840161064f565b610b648282611639565b5050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610b9281611585565b610b9a6116da565b50565b600080546001600160a01b03838116620100009092041614610528565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610be481611585565b610b9a611732565b6000606080600080600060606032546000801b148015610c0c5750603354155b610c585760405162461bcd60e51b815260206004820152601560248201527f4549503731323a20556e696e697469616c697a65640000000000000000000000604482015260640161064f565b610c60611770565b610c68611802565b604080516000808252602082019092527f0f000000000000000000000000000000000000000000000000000000000000009b939a50919850469750309650945092509050565b610cb6611410565b610130546001600160a01b0316636b4063418b610d2c846101326000610cda611465565b6001600160a01b0316815260208101919091526040016000908120805461ffff1691610d0583612946565b91906101000a81548161ffff021916908361ffff1602179055508e8e8e8e8e8e8e8e611811565b6040518363ffffffff1660e01b8152600401610d49929190612967565b602060405180830381865afa158015610d66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8a9190612989565b610dd65760405162461bcd60e51b815260206004820152601e60248201527f41737365744372656174653a20496e76616c6964207369676e61747572650000604482015260640161064f565b878614610e255760405162461bcd60e51b815260206004820152601c60248201527f41737365744372656174653a20312d4172726179206c656e6774687300000000604482015260640161064f565b858214610e745760405162461bcd60e51b815260206004820152601c60248201527f41737365744372656174653a20322d4172726179206c656e6774687300000000604482015260640161064f565b818414610ec35760405162461bcd60e51b815260206004820152601c60248201527f41737365744372656174653a20332d4172726179206c656e6774687300000000604482015260640161064f565b60008867ffffffffffffffff811115610ede57610ede61236a565b604051908082528060200260200182016040528015610f07578160200160208202803683370190505b50905060008967ffffffffffffffff811115610f2557610f2561236a565b604051908082528060200260200182016040528015610f4e578160200160208202803683370190505b50905060005b8a811015611074578b8b82818110610f6e57610f6e612a73565b9050602002016020810190610f839190612a89565b60ff16828281518110610f9857610f98612a73565b602002602001018181525050611045848d8d84818110610fba57610fba612a73565b9050602002016020810190610fcf9190612a89565b6001600160a01b0387166000908152610131602052604081208054909190610ffa9061ffff16612946565b91906101000a81548161ffff021916908361ffff16021790558b8b8681811061102557611025612a73565b905060200201602081019061103a9190612aa4565b6106b05760006106b3565b83828151811061105757611057612a73565b60209081029190910101528061106c81612ac1565b915050610f54565b5061012f546040517f20820ec30000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906320820ec3906110c590869085908e908e90600401612b26565b600060405180830381600087803b1580156110df57600080fd5b505af11580156110f3573d6000803e3d6000fd5b505061012e546040517fa55784ef0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116925063a55784ef915061114b90869086908e908e908c908c90600401612c0e565b600060405180830381600087803b15801561116557600080fd5b505af1158015611179573d6000803e3d6000fd5b50505050826001600160a01b03167fdd4b554190cbd4759e711abb655bdaf12557fea0ac84cec4fd4d978db3148bab838d8d8d8d8b8b8f8f6040516111c699989796959493929190612c65565b60405180910390a2505050505050505050505050565b600054610100900460ff16158080156111fc5750600054600160ff909116105b806112165750303b158015611216575060005460ff166001145b6112885760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161064f565b6000805460ff1916600117905580156112ab576000805461ff0019166101001790555b61012e80546001600160a01b038089167fffffffffffffffffffffffff00000000000000000000000000000000000000009283161790925561012f805488841690831617905561013080549287169290911691909117905561130c83611920565b6113168888611994565b61131e611a09565b611326611a74565b611331600083611596565b8015611377576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b600082815260ca602052604090206001015461139c81611585565b610ac78383611639565b60006113b181611585565b6001600160a01b0382166114075760405162461bcd60e51b815260206004820152601960248201527f41737365744372656174653a205a65726f206164647265737300000000000000604482015260640161064f565b610b6482611ae7565b60fc5460ff16156114635760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015260640161064f565b565b600061146f611bfc565b905090565b600061152c7f3b0c69bab62d38b5774be9b5185349bf525ef97a4d288b652e29bb4ec2a4902d898989898989896040516020016114b2929190612d2a565b60408051601f198184030181528282528051602091820120908301989098526001600160a01b039096169581019590955261ffff909316606085015260ff909116608084015260a0830152151560c082015260e0810191909152610100015b60405160208183030381529060405280519060200120611c06565b98975050505050505050565b60008560c88361154957600061154c565b60015b60ff16901b60b88561ffff16901b60a88761ffff16901b60a08960ff16901b846001600160a01b03161717171791505095945050505050565b610b9a81611591611465565b611c4e565b600082815260ca602090815260408083206001600160a01b038516845290915290205460ff16610b6457600082815260ca602090815260408083206001600160a01b03851684529091529020805460ff191660011790556115f5611465565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600082815260ca602090815260408083206001600160a01b038516845290915290205460ff1615610b6457600082815260ca602090815260408083206001600160a01b03851684529091529020805460ff19169055611696611465565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6116e2611cc3565b60fc805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611715611465565b6040516001600160a01b03909116815260200160405180910390a1565b61173a611410565b60fc805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611715611465565b60606034805461177f90612d3a565b80601f01602080910402602001604051908101604052809291908181526020018280546117ab90612d3a565b80156117f85780601f106117cd576101008083540402835291602001916117f8565b820191906000526020600020905b8154815290600101906020018083116117db57829003601f168201915b5050505050905090565b60606035805461177f90612d3a565b60006119117f52955c021a90f71f7afee289089576ce6998f456ca81e444651c71363bf260958c8c8c8c60405160200161184c929190612d74565b604051602081830303815290604052805190602001208b8b604051602001611875929190612dae565b604051602081830303815290604052805190602001208a8a60405160200161189e929190612df0565b60408051601f1981840301815291905280516020909101206118c86118c38a8c612e20565b611d15565b6040805160208101989098526001600160a01b039096169587019590955261ffff9093166060860152608085019190915260a084015260c083015260e082015261010001611511565b9b9a5050505050505050505050565b600054610100900460ff1661198b5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161064f565b610b9a81611e09565b600054610100900460ff166119ff5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161064f565b610b648282611e7d565b600054610100900460ff166114635760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161064f565b600054610100900460ff16611adf5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161064f565b611463611f10565b6000546001600160a01b0362010000909104811690821603611b715760405162461bcd60e51b815260206004820152603060248201527f4552433237373148616e646c65725570677261646561626c653a20666f72776160448201527f7264657220616c72656164792073657400000000000000000000000000000000606482015260840161064f565b611b79611465565b600080546040516001600160a01b0393841693858116936201000090930416917f8ca022029d8ff7ad974913f8970aeed6c5e0e7eaf494a0c5b262249f6b5759e591a4600080546001600160a01b0390921662010000027fffffffffffffffffffff0000000000000000000000000000000000000000ffff909216919091179055565b600061146f611f87565b6000610528611c13611fde565b836040517f19010000000000000000000000000000000000000000000000000000000000008152600281019290925260228201526042902090565b600082815260ca602090815260408083206001600160a01b038516845290915290205460ff16610b6457611c8181611fe8565b611c8c836020611ffa565b604051602001611c9d929190612ea4565b60408051601f198184030181529082905262461bcd60e51b825261064f91600401612f25565b60fc5460ff166114635760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604482015260640161064f565b600080825167ffffffffffffffff811115611d3257611d3261236a565b604051908082528060200260200182016040528015611d5b578160200160208202803683370190505b50905060005b8351811015611dd957838181518110611d7c57611d7c612a73565b6020026020010151604051602001611d949190612f38565b60405160208183030381529060405280519060200120828281518110611dbc57611dbc612a73565b602090810291909101015280611dd181612ac1565b915050611d61565b5080604051602001611deb9190612f54565b60405160208183030381529060405280519060200120915050919050565b600054610100900460ff16611e745760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161064f565b610b9a81611ae7565b600054610100900460ff16611ee85760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161064f565b6034611ef48382612fd8565b506035611f018282612fd8565b50506000603281905560335550565b600054610100900460ff16611f7b5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161064f565b60fc805460ff19169055565b600080546201000090046001600160a01b031633148015611fa9575060143610155b15611fd957507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c90565b503390565b600061146f61222a565b60606105286001600160a01b03831660145b60606000612009836002613098565b6120149060026130af565b67ffffffffffffffff81111561202c5761202c61236a565b6040519080825280601f01601f191660200182016040528015612056576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061208d5761208d612a73565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106120f0576120f0612a73565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600061212c846002613098565b6121379060016130af565b90505b60018111156121d4577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061217857612178612a73565b1a60f81b82828151811061218e5761218e612a73565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c936121cd816130c2565b905061213a565b5083156122235760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161064f565b9392505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f61225561229e565b61225d6122f7565b60408051602081019490945283019190915260608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6000806122a9611770565b8051909150156122c0578051602090910120919050565b60325480156122cf5792915050565b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4709250505090565b600080612302611802565b805190915015612319578051602090910120919050565b60335480156122cf5792915050565b60006020828403121561233a57600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461222357600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156123a9576123a961236a565b604052919050565b600082601f8301126123c257600080fd5b813567ffffffffffffffff8111156123dc576123dc61236a565b6123ef6020601f19601f84011601612380565b81815284602083860101111561240457600080fd5b816020850160208301376000918101602001919091529392505050565b803560ff8116811461243257600080fd5b919050565b8015158114610b9a57600080fd5b60008083601f84011261245757600080fd5b50813567ffffffffffffffff81111561246f57600080fd5b60208301915083602082850101111561248757600080fd5b9250929050565b80356001600160a01b038116811461243257600080fd5b600080600080600080600060c0888a0312156124c057600080fd5b873567ffffffffffffffff808211156124d857600080fd5b6124e48b838c016123b1565b98506124f260208b01612421565b975060408a0135965060608a0135915061250b82612437565b9094506080890135908082111561252157600080fd5b5061252e8a828b01612445565b9094509250612541905060a0890161248e565b905092959891949750929550565b60006020828403121561256157600080fd5b5035919050565b60008060008060006080868803121561258057600080fd5b853567ffffffffffffffff8082111561259857600080fd5b6125a489838a016123b1565b96506020880135955060408801359150808211156125c157600080fd5b506125ce88828901612445565b90945092506125e190506060870161248e565b90509295509295909350565b6000806040838503121561260057600080fd5b823591506126106020840161248e565b90509250929050565b60006020828403121561262b57600080fd5b6122238261248e565b60005b8381101561264f578181015183820152602001612637565b50506000910152565b60008151808452612670816020860160208601612634565b601f01601f19169290920160200192915050565b600081518084526020808501945080840160005b838110156126b457815187529582019590820190600101612698565b509495945050505050565b7fff000000000000000000000000000000000000000000000000000000000000008816815260e0602082015260006126fa60e0830189612658565b828103604084015261270c8189612658565b90508660608401526001600160a01b03861660808401528460a084015282810360c084015261273b8185612684565b9a9950505050505050505050565b60008083601f84011261275b57600080fd5b50813567ffffffffffffffff81111561277357600080fd5b6020830191508360208260051b850101111561248757600080fd5b60008060008060008060008060008060c08b8d0312156127ad57600080fd5b8a3567ffffffffffffffff808211156127c557600080fd5b6127d18e838f016123b1565b9b5060208d01359150808211156127e757600080fd5b6127f38e838f01612749565b909b50995060408d013591508082111561280c57600080fd5b6128188e838f01612749565b909950975060608d013591508082111561283157600080fd5b61283d8e838f01612749565b909750955060808d013591508082111561285657600080fd5b506128638d828e01612749565b9094509250612876905060a08c0161248e565b90509295989b9194979a5092959850565b600080600080600080600060e0888a0312156128a257600080fd5b873567ffffffffffffffff808211156128ba57600080fd5b6128c68b838c016123b1565b985060208a01359150808211156128dc57600080fd5b506128e98a828b016123b1565b9650506128f86040890161248e565b94506129066060890161248e565b93506129146080890161248e565b925061292260a0890161248e565b915061254160c0890161248e565b634e487b7160e01b600052601160045260246000fd5b600061ffff80831681810361295d5761295d612930565b6001019392505050565b60408152600061297a6040830185612658565b90508260208301529392505050565b60006020828403121561299b57600080fd5b815161222381612437565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b6001600160a01b0386168152846020820152836040820152608060608201526000612a006080830184866129a6565b979650505050505050565b86815260ff8616602082015284604082015260a060608201526000612a3460a0830185876129a6565b90508215156080830152979650505050505050565b86815261ffff8616602082015284604082015260a060608201526000612a3460a0830185876129a6565b634e487b7160e01b600052603260045260246000fd5b600060208284031215612a9b57600080fd5b61222382612421565b600060208284031215612ab657600080fd5b813561222381612437565b60006000198203612ad457612ad4612930565b5060010190565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115612b0d57600080fd5b8260051b80836020870137939093016020019392505050565b6001600160a01b0385168152606060208201526000612b486060830186612684565b8281036040840152612a00818587612adb565b60008383855260208086019550808560051b8301018460005b87811015612c0157601f1985840301895281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1883603018112612bb757600080fd5b8701848101903567ffffffffffffffff811115612bd357600080fd5b803603821315612be257600080fd5b612bed8582846129a6565b9a86019a9450505090830190600101612b74565b5090979650505050505050565b6001600160a01b0387168152608060208201526000612c306080830188612684565b8281036040840152612c43818789612adb565b90508281036060840152612c58818587612b5b565b9998505050505050505050565b60a081526000612c7860a083018c612684565b8281036020848101919091528a82528b91810160005b8c811015612cb45760ff612ca185612421565b1682529282019290820190600101612c8e565b508481036040860152612cc8818b8d612adb565b9250508382036060850152612cde82888a612b5b565b8481036080860152858152869250810160005b86811015612d18578335612d0481612437565b151582529282019290820190600101612cf1565b509d9c50505050505050505050505050565b8183823760009101908152919050565b600181811c90821680612d4e57607f821691505b602082108103612d6e57634e487b7160e01b600052602260045260246000fd5b50919050565b60008184825b85811015612da35760ff612d8d83612421565b1683526020928301929190910190600101612d7a565b509095945050505050565b60007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115612ddd57600080fd5b8260051b80858437919091019392505050565b60008184825b85811015612da3578135612e0981612437565b151583526020928301929190910190600101612df6565b600067ffffffffffffffff80841115612e3b57612e3b61236a565b8360051b6020612e4c818301612380565b868152918501918181019036841115612e6457600080fd5b865b84811015612e9857803586811115612e7e5760008081fd5b612e8a36828b016123b1565b845250918301918301612e66565b50979650505050505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612edc816017850160208801612634565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351612f19816028840160208801612634565b01602801949350505050565b6020815260006122236020830184612658565b60008251612f4a818460208701612634565b9190910192915050565b815160009082906020808601845b83811015612f7e57815185529382019390820190600101612f62565b50929695505050505050565b601f821115610ac757600081815260208120601f850160051c81016020861015612fb15750805b601f850160051c820191505b81811015612fd057828155600101612fbd565b505050505050565b815167ffffffffffffffff811115612ff257612ff261236a565b613006816130008454612d3a565b84612f8a565b602080601f83116001811461303b57600084156130235750858301515b600019600386901b1c1916600185901b178555612fd0565b600085815260208120601f198616915b8281101561306a5788860151825594840194600190910190840161304b565b50858210156130885787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b808202811582820484141761052857610528612930565b8082018082111561052857610528612930565b6000816130d1576130d1612930565b50600019019056fea2646970667358221220e3723aaf536aaa10001907b95860610085631d779ed218d6c948b2224977791164736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101b95760003560e01c80638456cb59116100f9578063d547741f11610097578063dbd8483d11610071578063dbd8483d146103fb578063de743a7214610420578063e63ab1e914610447578063f76fc35e1461046e57600080fd5b8063d547741f146103c3578063d5f2077c146103d6578063da742228146103e857600080fd5b80639e7495aa116100d35780639e7495aa1461037e578063a217fddf14610391578063c91f0c5314610399578063ce1b815f146103ac57600080fd5b80638456cb591461032257806384b0196e1461032a57806391d148541461034557600080fd5b806336568abe1161016657806359c191e41161014057806359c191e4146102b85780635c975abb146102de57806374e3447a146102e95780637caa719a1461031057600080fd5b806336568abe1461028a5780633f4ba83a1461029d578063572b6c05146102a557600080fd5b80632d94a9d3116101975780632d94a9d31461022c5780632f2ff15d1461023f57806334dcdd521461025257600080fd5b806301ffc9a7146101be5780631a3101b1146101e6578063248a9ca3146101fb575b600080fd5b6101d16101cc366004612328565b610495565b60405190151581526020015b60405180910390f35b6101f96101f43660046124a5565b61052e565b005b61021e61020936600461254f565b600090815260ca602052604090206001015490565b6040519081526020016101dd565b6101f961023a366004612568565b610821565b6101f961024d3660046125ed565b610aa2565b610277610260366004612619565b6101316020526000908152604090205461ffff1681565b60405161ffff90911681526020016101dd565b6101f96102983660046125ed565b610acc565b6101f9610b68565b6101d16102b3366004612619565b610b9d565b61012e546001600160a01b03165b6040516001600160a01b0390911681526020016101dd565b60fc5460ff166101d1565b61021e7fb696df569c2dfecb5a24edfd39d7f55b0f442be14350cbc68dbe8eb35489d3a681565b61012f546001600160a01b03166102c6565b6101f9610bba565b610332610bec565b6040516101dd97969594939291906126bf565b6101d16103533660046125ed565b600091825260ca602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6101f961038c36600461278e565b610cae565b61021e600081565b6101f96103a7366004612887565b6111dc565b6000546201000090046001600160a01b03166102c6565b6101f96103d13660046125ed565b611381565b610130546001600160a01b03166102c6565b6101f96103f6366004612619565b6113a6565b610277610409366004612619565b6101326020526000908152604090205461ffff1681565b61021e7f52955c021a90f71f7afee289089576ce6998f456ca81e444651c71363bf2609581565b61021e7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b61021e7f3b0c69bab62d38b5774be9b5185349bf525ef97a4d288b652e29bb4ec2a4902d81565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061052857507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b610536611410565b610130546001600160a01b0316636b406341886105a984610132600061055a611465565b6001600160a01b0316815260208101919091526040016000908120805461ffff169161058583612946565b91906101000a81548161ffff021916908361ffff1602179055508b8b8b8b8b611474565b6040518363ffffffff1660e01b81526004016105c6929190612967565b602060405180830381865afa1580156105e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106079190612989565b6106585760405162461bcd60e51b815260206004820152601e60248201527f41737365744372656174653a20496e76616c6964207369676e6174757265000060448201526064015b60405180910390fd5b6001600160a01b03811660009081526101316020526040812080546106bd9184918a9190859061068b9061ffff16612946565b91906101000a81548161ffff021916908361ffff1602179055886106b05760006106b3565b60015b60ff166000611538565b61012f546040517f124d91e50000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015260ff8b166024830152604482018a905292935091169063124d91e590606401600060405180830381600087803b15801561073057600080fd5b505af1158015610744573d6000803e3d6000fd5b505061012e546040517fbb7fde710000000000000000000000000000000000000000000000000000000081526001600160a01b03909116925063bb7fde71915061079a90859085908b908a908a906004016129d1565b600060405180830381600087803b1580156107b457600080fd5b505af11580156107c8573d6000803e3d6000fd5b50505050816001600160a01b03167f293c16277edbc93bfb30f56ac279e45bbdbd421755b0278d19ebcd1cee6a795b82898988888b60405161080f96959493929190612a0b565b60405180910390a25050505050505050565b7fb696df569c2dfecb5a24edfd39d7f55b0f442be14350cbc68dbe8eb35489d3a661084b81611585565b610853611410565b610130546001600160a01b0316636b406341876108c8856101326000610877611465565b6001600160a01b0316815260208101919091526040016000908120805461ffff16916108a283612946565b91906101000a81548161ffff021916908361ffff16021790555060008b60018c8c611474565b6040518363ffffffff1660e01b81526004016108e5929190612967565b602060405180830381865afa158015610902573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109269190612989565b6109725760405162461bcd60e51b815260206004820152601e60248201527f41737365744372656174653a20496e76616c6964207369676e61747572650000604482015260640161064f565b6001600160a01b03821660009081526101316020526040812080546109c791859184919082906109a59061ffff16612946565b91906101000a81548161ffff021916908361ffff160217905560016000611538565b61012e546040517fbb7fde710000000000000000000000000000000000000000000000000000000081529192506001600160a01b03169063bb7fde7190610a1a90869085908b908b908b906004016129d1565b600060405180830381600087803b158015610a3457600080fd5b505af1158015610a48573d6000803e3d6000fd5b50505050826001600160a01b03167f07560e268a00bce229c6a07c00d3f177f67674deae28b79a1840dd20712366288260008989896001604051610a9196959493929190612a49565b60405180910390a250505050505050565b600082815260ca6020526040902060010154610abd81611585565b610ac78383611596565b505050565b610ad4611465565b6001600160a01b0316816001600160a01b031614610b5a5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c660000000000000000000000000000000000606482015260840161064f565b610b648282611639565b5050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610b9281611585565b610b9a6116da565b50565b600080546001600160a01b03838116620100009092041614610528565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610be481611585565b610b9a611732565b6000606080600080600060606032546000801b148015610c0c5750603354155b610c585760405162461bcd60e51b815260206004820152601560248201527f4549503731323a20556e696e697469616c697a65640000000000000000000000604482015260640161064f565b610c60611770565b610c68611802565b604080516000808252602082019092527f0f000000000000000000000000000000000000000000000000000000000000009b939a50919850469750309650945092509050565b610cb6611410565b610130546001600160a01b0316636b4063418b610d2c846101326000610cda611465565b6001600160a01b0316815260208101919091526040016000908120805461ffff1691610d0583612946565b91906101000a81548161ffff021916908361ffff1602179055508e8e8e8e8e8e8e8e611811565b6040518363ffffffff1660e01b8152600401610d49929190612967565b602060405180830381865afa158015610d66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8a9190612989565b610dd65760405162461bcd60e51b815260206004820152601e60248201527f41737365744372656174653a20496e76616c6964207369676e61747572650000604482015260640161064f565b878614610e255760405162461bcd60e51b815260206004820152601c60248201527f41737365744372656174653a20312d4172726179206c656e6774687300000000604482015260640161064f565b858214610e745760405162461bcd60e51b815260206004820152601c60248201527f41737365744372656174653a20322d4172726179206c656e6774687300000000604482015260640161064f565b818414610ec35760405162461bcd60e51b815260206004820152601c60248201527f41737365744372656174653a20332d4172726179206c656e6774687300000000604482015260640161064f565b60008867ffffffffffffffff811115610ede57610ede61236a565b604051908082528060200260200182016040528015610f07578160200160208202803683370190505b50905060008967ffffffffffffffff811115610f2557610f2561236a565b604051908082528060200260200182016040528015610f4e578160200160208202803683370190505b50905060005b8a811015611074578b8b82818110610f6e57610f6e612a73565b9050602002016020810190610f839190612a89565b60ff16828281518110610f9857610f98612a73565b602002602001018181525050611045848d8d84818110610fba57610fba612a73565b9050602002016020810190610fcf9190612a89565b6001600160a01b0387166000908152610131602052604081208054909190610ffa9061ffff16612946565b91906101000a81548161ffff021916908361ffff16021790558b8b8681811061102557611025612a73565b905060200201602081019061103a9190612aa4565b6106b05760006106b3565b83828151811061105757611057612a73565b60209081029190910101528061106c81612ac1565b915050610f54565b5061012f546040517f20820ec30000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906320820ec3906110c590869085908e908e90600401612b26565b600060405180830381600087803b1580156110df57600080fd5b505af11580156110f3573d6000803e3d6000fd5b505061012e546040517fa55784ef0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116925063a55784ef915061114b90869086908e908e908c908c90600401612c0e565b600060405180830381600087803b15801561116557600080fd5b505af1158015611179573d6000803e3d6000fd5b50505050826001600160a01b03167fdd4b554190cbd4759e711abb655bdaf12557fea0ac84cec4fd4d978db3148bab838d8d8d8d8b8b8f8f6040516111c699989796959493929190612c65565b60405180910390a2505050505050505050505050565b600054610100900460ff16158080156111fc5750600054600160ff909116105b806112165750303b158015611216575060005460ff166001145b6112885760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161064f565b6000805460ff1916600117905580156112ab576000805461ff0019166101001790555b61012e80546001600160a01b038089167fffffffffffffffffffffffff00000000000000000000000000000000000000009283161790925561012f805488841690831617905561013080549287169290911691909117905561130c83611920565b6113168888611994565b61131e611a09565b611326611a74565b611331600083611596565b8015611377576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b600082815260ca602052604090206001015461139c81611585565b610ac78383611639565b60006113b181611585565b6001600160a01b0382166114075760405162461bcd60e51b815260206004820152601960248201527f41737365744372656174653a205a65726f206164647265737300000000000000604482015260640161064f565b610b6482611ae7565b60fc5460ff16156114635760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015260640161064f565b565b600061146f611bfc565b905090565b600061152c7f3b0c69bab62d38b5774be9b5185349bf525ef97a4d288b652e29bb4ec2a4902d898989898989896040516020016114b2929190612d2a565b60408051601f198184030181528282528051602091820120908301989098526001600160a01b039096169581019590955261ffff909316606085015260ff909116608084015260a0830152151560c082015260e0810191909152610100015b60405160208183030381529060405280519060200120611c06565b98975050505050505050565b60008560c88361154957600061154c565b60015b60ff16901b60b88561ffff16901b60a88761ffff16901b60a08960ff16901b846001600160a01b03161717171791505095945050505050565b610b9a81611591611465565b611c4e565b600082815260ca602090815260408083206001600160a01b038516845290915290205460ff16610b6457600082815260ca602090815260408083206001600160a01b03851684529091529020805460ff191660011790556115f5611465565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600082815260ca602090815260408083206001600160a01b038516845290915290205460ff1615610b6457600082815260ca602090815260408083206001600160a01b03851684529091529020805460ff19169055611696611465565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6116e2611cc3565b60fc805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611715611465565b6040516001600160a01b03909116815260200160405180910390a1565b61173a611410565b60fc805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611715611465565b60606034805461177f90612d3a565b80601f01602080910402602001604051908101604052809291908181526020018280546117ab90612d3a565b80156117f85780601f106117cd576101008083540402835291602001916117f8565b820191906000526020600020905b8154815290600101906020018083116117db57829003601f168201915b5050505050905090565b60606035805461177f90612d3a565b60006119117f52955c021a90f71f7afee289089576ce6998f456ca81e444651c71363bf260958c8c8c8c60405160200161184c929190612d74565b604051602081830303815290604052805190602001208b8b604051602001611875929190612dae565b604051602081830303815290604052805190602001208a8a60405160200161189e929190612df0565b60408051601f1981840301815291905280516020909101206118c86118c38a8c612e20565b611d15565b6040805160208101989098526001600160a01b039096169587019590955261ffff9093166060860152608085019190915260a084015260c083015260e082015261010001611511565b9b9a5050505050505050505050565b600054610100900460ff1661198b5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161064f565b610b9a81611e09565b600054610100900460ff166119ff5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161064f565b610b648282611e7d565b600054610100900460ff166114635760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161064f565b600054610100900460ff16611adf5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161064f565b611463611f10565b6000546001600160a01b0362010000909104811690821603611b715760405162461bcd60e51b815260206004820152603060248201527f4552433237373148616e646c65725570677261646561626c653a20666f72776160448201527f7264657220616c72656164792073657400000000000000000000000000000000606482015260840161064f565b611b79611465565b600080546040516001600160a01b0393841693858116936201000090930416917f8ca022029d8ff7ad974913f8970aeed6c5e0e7eaf494a0c5b262249f6b5759e591a4600080546001600160a01b0390921662010000027fffffffffffffffffffff0000000000000000000000000000000000000000ffff909216919091179055565b600061146f611f87565b6000610528611c13611fde565b836040517f19010000000000000000000000000000000000000000000000000000000000008152600281019290925260228201526042902090565b600082815260ca602090815260408083206001600160a01b038516845290915290205460ff16610b6457611c8181611fe8565b611c8c836020611ffa565b604051602001611c9d929190612ea4565b60408051601f198184030181529082905262461bcd60e51b825261064f91600401612f25565b60fc5460ff166114635760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604482015260640161064f565b600080825167ffffffffffffffff811115611d3257611d3261236a565b604051908082528060200260200182016040528015611d5b578160200160208202803683370190505b50905060005b8351811015611dd957838181518110611d7c57611d7c612a73565b6020026020010151604051602001611d949190612f38565b60405160208183030381529060405280519060200120828281518110611dbc57611dbc612a73565b602090810291909101015280611dd181612ac1565b915050611d61565b5080604051602001611deb9190612f54565b60405160208183030381529060405280519060200120915050919050565b600054610100900460ff16611e745760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161064f565b610b9a81611ae7565b600054610100900460ff16611ee85760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161064f565b6034611ef48382612fd8565b506035611f018282612fd8565b50506000603281905560335550565b600054610100900460ff16611f7b5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161064f565b60fc805460ff19169055565b600080546201000090046001600160a01b031633148015611fa9575060143610155b15611fd957507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c90565b503390565b600061146f61222a565b60606105286001600160a01b03831660145b60606000612009836002613098565b6120149060026130af565b67ffffffffffffffff81111561202c5761202c61236a565b6040519080825280601f01601f191660200182016040528015612056576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061208d5761208d612a73565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106120f0576120f0612a73565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600061212c846002613098565b6121379060016130af565b90505b60018111156121d4577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061217857612178612a73565b1a60f81b82828151811061218e5761218e612a73565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c936121cd816130c2565b905061213a565b5083156122235760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161064f565b9392505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f61225561229e565b61225d6122f7565b60408051602081019490945283019190915260608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6000806122a9611770565b8051909150156122c0578051602090910120919050565b60325480156122cf5792915050565b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4709250505090565b600080612302611802565b805190915015612319578051602090910120919050565b60335480156122cf5792915050565b60006020828403121561233a57600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461222357600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156123a9576123a961236a565b604052919050565b600082601f8301126123c257600080fd5b813567ffffffffffffffff8111156123dc576123dc61236a565b6123ef6020601f19601f84011601612380565b81815284602083860101111561240457600080fd5b816020850160208301376000918101602001919091529392505050565b803560ff8116811461243257600080fd5b919050565b8015158114610b9a57600080fd5b60008083601f84011261245757600080fd5b50813567ffffffffffffffff81111561246f57600080fd5b60208301915083602082850101111561248757600080fd5b9250929050565b80356001600160a01b038116811461243257600080fd5b600080600080600080600060c0888a0312156124c057600080fd5b873567ffffffffffffffff808211156124d857600080fd5b6124e48b838c016123b1565b98506124f260208b01612421565b975060408a0135965060608a0135915061250b82612437565b9094506080890135908082111561252157600080fd5b5061252e8a828b01612445565b9094509250612541905060a0890161248e565b905092959891949750929550565b60006020828403121561256157600080fd5b5035919050565b60008060008060006080868803121561258057600080fd5b853567ffffffffffffffff8082111561259857600080fd5b6125a489838a016123b1565b96506020880135955060408801359150808211156125c157600080fd5b506125ce88828901612445565b90945092506125e190506060870161248e565b90509295509295909350565b6000806040838503121561260057600080fd5b823591506126106020840161248e565b90509250929050565b60006020828403121561262b57600080fd5b6122238261248e565b60005b8381101561264f578181015183820152602001612637565b50506000910152565b60008151808452612670816020860160208601612634565b601f01601f19169290920160200192915050565b600081518084526020808501945080840160005b838110156126b457815187529582019590820190600101612698565b509495945050505050565b7fff000000000000000000000000000000000000000000000000000000000000008816815260e0602082015260006126fa60e0830189612658565b828103604084015261270c8189612658565b90508660608401526001600160a01b03861660808401528460a084015282810360c084015261273b8185612684565b9a9950505050505050505050565b60008083601f84011261275b57600080fd5b50813567ffffffffffffffff81111561277357600080fd5b6020830191508360208260051b850101111561248757600080fd5b60008060008060008060008060008060c08b8d0312156127ad57600080fd5b8a3567ffffffffffffffff808211156127c557600080fd5b6127d18e838f016123b1565b9b5060208d01359150808211156127e757600080fd5b6127f38e838f01612749565b909b50995060408d013591508082111561280c57600080fd5b6128188e838f01612749565b909950975060608d013591508082111561283157600080fd5b61283d8e838f01612749565b909750955060808d013591508082111561285657600080fd5b506128638d828e01612749565b9094509250612876905060a08c0161248e565b90509295989b9194979a5092959850565b600080600080600080600060e0888a0312156128a257600080fd5b873567ffffffffffffffff808211156128ba57600080fd5b6128c68b838c016123b1565b985060208a01359150808211156128dc57600080fd5b506128e98a828b016123b1565b9650506128f86040890161248e565b94506129066060890161248e565b93506129146080890161248e565b925061292260a0890161248e565b915061254160c0890161248e565b634e487b7160e01b600052601160045260246000fd5b600061ffff80831681810361295d5761295d612930565b6001019392505050565b60408152600061297a6040830185612658565b90508260208301529392505050565b60006020828403121561299b57600080fd5b815161222381612437565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b6001600160a01b0386168152846020820152836040820152608060608201526000612a006080830184866129a6565b979650505050505050565b86815260ff8616602082015284604082015260a060608201526000612a3460a0830185876129a6565b90508215156080830152979650505050505050565b86815261ffff8616602082015284604082015260a060608201526000612a3460a0830185876129a6565b634e487b7160e01b600052603260045260246000fd5b600060208284031215612a9b57600080fd5b61222382612421565b600060208284031215612ab657600080fd5b813561222381612437565b60006000198203612ad457612ad4612930565b5060010190565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115612b0d57600080fd5b8260051b80836020870137939093016020019392505050565b6001600160a01b0385168152606060208201526000612b486060830186612684565b8281036040840152612a00818587612adb565b60008383855260208086019550808560051b8301018460005b87811015612c0157601f1985840301895281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1883603018112612bb757600080fd5b8701848101903567ffffffffffffffff811115612bd357600080fd5b803603821315612be257600080fd5b612bed8582846129a6565b9a86019a9450505090830190600101612b74565b5090979650505050505050565b6001600160a01b0387168152608060208201526000612c306080830188612684565b8281036040840152612c43818789612adb565b90508281036060840152612c58818587612b5b565b9998505050505050505050565b60a081526000612c7860a083018c612684565b8281036020848101919091528a82528b91810160005b8c811015612cb45760ff612ca185612421565b1682529282019290820190600101612c8e565b508481036040860152612cc8818b8d612adb565b9250508382036060850152612cde82888a612b5b565b8481036080860152858152869250810160005b86811015612d18578335612d0481612437565b151582529282019290820190600101612cf1565b509d9c50505050505050505050505050565b8183823760009101908152919050565b600181811c90821680612d4e57607f821691505b602082108103612d6e57634e487b7160e01b600052602260045260246000fd5b50919050565b60008184825b85811015612da35760ff612d8d83612421565b1683526020928301929190910190600101612d7a565b509095945050505050565b60007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115612ddd57600080fd5b8260051b80858437919091019392505050565b60008184825b85811015612da3578135612e0981612437565b151583526020928301929190910190600101612df6565b600067ffffffffffffffff80841115612e3b57612e3b61236a565b8360051b6020612e4c818301612380565b868152918501918181019036841115612e6457600080fd5b865b84811015612e9857803586811115612e7e5760008081fd5b612e8a36828b016123b1565b845250918301918301612e66565b50979650505050505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612edc816017850160208801612634565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351612f19816028840160208801612634565b01602801949350505050565b6020815260006122236020830184612658565b60008251612f4a818460208701612634565b9190910192915050565b815160009082906020808601845b83811015612f7e57815185529382019390820190600101612f62565b50929695505050505050565b601f821115610ac757600081815260208120601f850160051c81016020861015612fb15750805b601f850160051c820191505b81811015612fd057828155600101612fbd565b505050505050565b815167ffffffffffffffff811115612ff257612ff261236a565b613006816130008454612d3a565b84612f8a565b602080601f83116001811461303b57600084156130235750858301515b600019600386901b1c1916600185901b178555612fd0565b600085815260208120601f198616915b8281101561306a5788860151825594840194600190910190840161304b565b50858210156130885787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b808202811582820484141761052857610528612930565b8082018082111561052857610528612930565b6000816130d1576130d1612930565b50600019019056fea2646970667358221220e3723aaf536aaa10001907b95860610085631d779ed218d6c948b2224977791164736f6c63430008120033",
  "devdoc": {
    "author": "The Sandbox",
    "events": {
      "EIP712DomainChanged()": {
        "details": "MAY be emitted to signal that the domain could have changed."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "TrustedForwarderSet(address,address,address)": {
        "params": {
          "newTrustedForwarder": "new trusted forwarder",
          "oldTrustedForwarder": "old trusted forwarder",
          "operator": "the sender of the transaction"
        }
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "createAsset(bytes,uint8,uint256,bool,string,address)": {
        "params": {
          "amount": "The amount of the asset to mint",
          "creator": "The address of the creator",
          "metadataHash": "The metadata hash of the asset to mint",
          "revealed": "Whether the asset is revealed or not",
          "signature": "A signature generated by TSB",
          "tier": "The tier of the asset to mint"
        }
      },
      "createMultipleAssets(bytes,uint8[],uint256[],bool[],string[],address)": {
        "params": {
          "amounts": "The amounts of the assets to mint",
          "creator": "The address of the creator",
          "metadataHashes": "The metadata hashes of the assets to mint",
          "revealed": "Whether the assets are revealed or not",
          "signature": "A signature generated by TSB",
          "tiers": "The tiers of the assets to mint"
        }
      },
      "createSpecialAsset(bytes,uint256,string,address)": {
        "details": "Only callable by the special minter",
        "params": {
          "amount": "The amount of the asset to mint",
          "creator": "The address of the creator",
          "metadataHash": "The metadata hash of the asset to mint,",
          "signature": "A signature generated by TSB"
        }
      },
      "eip712Domain()": {
        "details": "See {EIP-5267}. _Available since v4.9._"
      },
      "getAssetContract()": {
        "returns": {
          "assetContractAddress": "The asset contract address"
        }
      },
      "getAuthValidator()": {
        "returns": {
          "authValidatorAddress": "The auth validator address"
        }
      },
      "getCatalystContract()": {
        "returns": {
          "catalystContractAddress": "The catalyst contract address"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getTrustedForwarder()": {
        "returns": {
          "_0": "return the address of the trusted forwarder"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(string,string,address,address,address,address,address)": {
        "params": {
          "_assetContract": "The address of the asset contract",
          "_authValidator": "The address of the AuthSuperValidator contract",
          "_catalystContract": "The address of the catalyst contract",
          "_defaultAdmin": "The address of the default admin",
          "_forwarder": "The address of the forwarder contract",
          "_name": "The name of the contract (for EIP712)",
          "_version": "The version of the contract (for EIP712)"
        }
      },
      "isTrustedForwarder(address)": {
        "params": {
          "forwarder": "trusted forwarder address to check"
        },
        "returns": {
          "_0": "true if the address is the same as the trusted forwarder"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setTrustedForwarder(address)": {
        "details": "Change the address of the trusted forwarder for meta-TX",
        "params": {
          "trustedForwarder": "The new trustedForwarder"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "title": "AssetCreate",
    "version": 1
  },
  "userdoc": {
    "events": {
      "TrustedForwarderSet(address,address,address)": {
        "notice": "Emitted when a `newTrustedForwarder` is set, replacing the `oldTrustedForwarder`"
      }
    },
    "kind": "user",
    "methods": {
      "createAsset(bytes,uint8,uint256,bool,string,address)": {
        "notice": "Create a new asset"
      },
      "createMultipleAssets(bytes,uint8[],uint256[],bool[],string[],address)": {
        "notice": "Create multiple assets at once"
      },
      "createSpecialAsset(bytes,uint256,string,address)": {
        "notice": "Create special assets, like TSB exclusive tokens"
      },
      "getAssetContract()": {
        "notice": "Get the asset contract address"
      },
      "getAuthValidator()": {
        "notice": "Get the auth validator address"
      },
      "getCatalystContract()": {
        "notice": "Get the catalyst contract address"
      },
      "getTrustedForwarder()": {
        "notice": "return the address of the trusted forwarder"
      },
      "initialize(string,string,address,address,address,address,address)": {
        "notice": "Initialize the contract"
      },
      "isTrustedForwarder(address)": {
        "notice": "return true if the forwarder is the trusted forwarder"
      },
      "pause()": {
        "notice": "Pause the contracts mint and burn functions"
      },
      "setTrustedForwarder(address)": {
        "notice": "Set a new trusted forwarder address, limited to DEFAULT_ADMIN_ROLE only"
      },
      "unpause()": {
        "notice": "Unpause the contracts mint and burn functions"
      }
    },
    "notice": "User-facing contract for creating new assets",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 502,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetCreate.sol:AssetCreate",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 505,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetCreate.sol:AssetCreate",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 11743,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetCreate.sol:AssetCreate",
        "label": "_trustedForwarder",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 11854,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetCreate.sol:AssetCreate",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3579,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetCreate.sol:AssetCreate",
        "label": "_hashedName",
        "offset": 0,
        "slot": "50",
        "type": "t_bytes32"
      },
      {
        "astId": 3582,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetCreate.sol:AssetCreate",
        "label": "_hashedVersion",
        "offset": 0,
        "slot": "51",
        "type": "t_bytes32"
      },
      {
        "astId": 3584,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetCreate.sol:AssetCreate",
        "label": "_name",
        "offset": 0,
        "slot": "52",
        "type": "t_string_storage"
      },
      {
        "astId": 3586,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetCreate.sol:AssetCreate",
        "label": "_version",
        "offset": 0,
        "slot": "53",
        "type": "t_string_storage"
      },
      {
        "astId": 3844,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetCreate.sol:AssetCreate",
        "label": "__gap",
        "offset": 0,
        "slot": "54",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 2965,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetCreate.sol:AssetCreate",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3888,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetCreate.sol:AssetCreate",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 82,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetCreate.sol:AssetCreate",
        "label": "_roles",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)77_storage)"
      },
      {
        "astId": 377,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetCreate.sol:AssetCreate",
        "label": "__gap",
        "offset": 0,
        "slot": "203",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 685,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetCreate.sol:AssetCreate",
        "label": "_paused",
        "offset": 0,
        "slot": "252",
        "type": "t_bool"
      },
      {
        "astId": 790,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetCreate.sol:AssetCreate",
        "label": "__gap",
        "offset": 0,
        "slot": "253",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7695,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetCreate.sol:AssetCreate",
        "label": "assetContract",
        "offset": 0,
        "slot": "302",
        "type": "t_contract(IAsset)10608"
      },
      {
        "astId": 7698,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetCreate.sol:AssetCreate",
        "label": "catalystContract",
        "offset": 0,
        "slot": "303",
        "type": "t_contract(ICatalyst)10820"
      },
      {
        "astId": 7701,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetCreate.sol:AssetCreate",
        "label": "authValidator",
        "offset": 0,
        "slot": "304",
        "type": "t_contract(AuthSuperValidator)9787"
      },
      {
        "astId": 7705,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetCreate.sol:AssetCreate",
        "label": "creatorNonces",
        "offset": 0,
        "slot": "305",
        "type": "t_mapping(t_address,t_uint16)"
      },
      {
        "astId": 7709,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetCreate.sol:AssetCreate",
        "label": "signatureNonces",
        "offset": 0,
        "slot": "306",
        "type": "t_mapping(t_address,t_uint16)"
      },
      {
        "astId": 8379,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetCreate.sol:AssetCreate",
        "label": "__gap",
        "offset": 0,
        "slot": "307",
        "type": "t_array(t_uint256)45_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(AuthSuperValidator)9787": {
        "encoding": "inplace",
        "label": "contract AuthSuperValidator",
        "numberOfBytes": "20"
      },
      "t_contract(IAsset)10608": {
        "encoding": "inplace",
        "label": "contract IAsset",
        "numberOfBytes": "20"
      },
      "t_contract(ICatalyst)10820": {
        "encoding": "inplace",
        "label": "contract ICatalyst",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint16)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)77_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)77_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)77_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 74,
            "contract": "@sandbox-smart-contracts/asset/contracts/AssetCreate.sol:AssetCreate",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 76,
            "contract": "@sandbox-smart-contracts/asset/contracts/AssetCreate.sol:AssetCreate",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}