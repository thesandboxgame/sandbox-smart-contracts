{
  "address": "0xa6c3Fe9D0F99007C4Ceeb23F5F4D74982D0b7260",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "orderKeyHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum LibAsset.AssetClass",
                      "name": "assetClass",
                      "type": "uint8"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct LibAsset.AssetType",
                  "name": "assetType",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibAsset.Asset",
              "name": "makeAsset",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum LibAsset.AssetClass",
                      "name": "assetClass",
                      "type": "uint8"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct LibAsset.AssetType",
                  "name": "assetType",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibAsset.Asset",
              "name": "takeAsset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "end",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct LibOrder.Order",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "Cancel",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newDefaultFeeReceiver",
          "type": "address"
        }
      ],
      "name": "DefaultFeeReceiverSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "orderKeyHashLeft",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "orderKeyHashRight",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum LibAsset.AssetClass",
                      "name": "assetClass",
                      "type": "uint8"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct LibAsset.AssetType",
                  "name": "assetType",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibAsset.Asset",
              "name": "makeAsset",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum LibAsset.AssetClass",
                      "name": "assetClass",
                      "type": "uint8"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct LibAsset.AssetType",
                  "name": "assetType",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibAsset.Asset",
              "name": "takeAsset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "end",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct LibOrder.Order",
          "name": "orderLeft",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum LibAsset.AssetClass",
                      "name": "assetClass",
                      "type": "uint8"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct LibAsset.AssetType",
                  "name": "assetType",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibAsset.Asset",
              "name": "makeAsset",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum LibAsset.AssetClass",
                      "name": "assetClass",
                      "type": "uint8"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct LibAsset.AssetType",
                  "name": "assetType",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibAsset.Asset",
              "name": "takeAsset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "end",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct LibOrder.Order",
          "name": "orderRight",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "leftValue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rightValue",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct LibOrder.FillResult",
          "name": "newFill",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalFillLeft",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalFillRight",
          "type": "uint256"
        }
      ],
      "name": "Match",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newMatchOrdersLimit",
          "type": "uint256"
        }
      ],
      "name": "MatchOrdersLimitSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IOrderValidator",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "OrderValidatorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newProtocolFeePrimary",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newProtocolFeeSecondary",
          "type": "uint256"
        }
      ],
      "name": "ProtocolFeeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IRoyaltiesProvider",
          "name": "newRoyaltiesRegistry",
          "type": "address"
        }
      ],
      "name": "RoyaltiesRegistrySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldTrustedForwarder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newTrustedForwarder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "TrustedForwarderSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ERC1776_OPERATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EXCHANGE_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum LibAsset.AssetClass",
                      "name": "assetClass",
                      "type": "uint8"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct LibAsset.AssetType",
                  "name": "assetType",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibAsset.Asset",
              "name": "makeAsset",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum LibAsset.AssetClass",
                      "name": "assetClass",
                      "type": "uint8"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct LibAsset.AssetType",
                  "name": "assetType",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibAsset.Asset",
              "name": "takeAsset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "end",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibOrder.Order",
          "name": "order",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "orderKeyHash",
          "type": "bytes32"
        }
      ],
      "name": "cancel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultFeeReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "orderKeyHash",
          "type": "bytes32"
        }
      ],
      "name": "fills",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "orderFillValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newTrustedForwarder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newProtocolFeePrimary",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newProtocolFeeSecondary",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "newDefaultFeeReceiver",
          "type": "address"
        },
        {
          "internalType": "contract IRoyaltiesProvider",
          "name": "newRoyaltiesProvider",
          "type": "address"
        },
        {
          "internalType": "contract IOrderValidator",
          "name": "orderValidatorAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newMatchOrdersLimit",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "maker",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "enum LibAsset.AssetClass",
                          "name": "assetClass",
                          "type": "uint8"
                        },
                        {
                          "internalType": "bytes",
                          "name": "data",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct LibAsset.AssetType",
                      "name": "assetType",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct LibAsset.Asset",
                  "name": "makeAsset",
                  "type": "tuple"
                },
                {
                  "internalType": "address",
                  "name": "taker",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "enum LibAsset.AssetClass",
                          "name": "assetClass",
                          "type": "uint8"
                        },
                        {
                          "internalType": "bytes",
                          "name": "data",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct LibAsset.AssetType",
                      "name": "assetType",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct LibAsset.Asset",
                  "name": "takeAsset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "salt",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "start",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "end",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibOrder.Order",
              "name": "orderLeft",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "signatureLeft",
              "type": "bytes"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "maker",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "enum LibAsset.AssetClass",
                          "name": "assetClass",
                          "type": "uint8"
                        },
                        {
                          "internalType": "bytes",
                          "name": "data",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct LibAsset.AssetType",
                      "name": "assetType",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct LibAsset.Asset",
                  "name": "makeAsset",
                  "type": "tuple"
                },
                {
                  "internalType": "address",
                  "name": "taker",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "enum LibAsset.AssetClass",
                          "name": "assetClass",
                          "type": "uint8"
                        },
                        {
                          "internalType": "bytes",
                          "name": "data",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct LibAsset.AssetType",
                      "name": "assetType",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct LibAsset.Asset",
                  "name": "takeAsset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "salt",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "start",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "end",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibOrder.Order",
              "name": "orderRight",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "signatureRight",
              "type": "bytes"
            }
          ],
          "internalType": "struct ExchangeCore.ExchangeMatch[]",
          "name": "matchedOrders",
          "type": "tuple[]"
        }
      ],
      "name": "matchOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "maker",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "enum LibAsset.AssetClass",
                          "name": "assetClass",
                          "type": "uint8"
                        },
                        {
                          "internalType": "bytes",
                          "name": "data",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct LibAsset.AssetType",
                      "name": "assetType",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct LibAsset.Asset",
                  "name": "makeAsset",
                  "type": "tuple"
                },
                {
                  "internalType": "address",
                  "name": "taker",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "enum LibAsset.AssetClass",
                          "name": "assetClass",
                          "type": "uint8"
                        },
                        {
                          "internalType": "bytes",
                          "name": "data",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct LibAsset.AssetType",
                      "name": "assetType",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct LibAsset.Asset",
                  "name": "takeAsset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "salt",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "start",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "end",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibOrder.Order",
              "name": "orderLeft",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "signatureLeft",
              "type": "bytes"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "maker",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "enum LibAsset.AssetClass",
                          "name": "assetClass",
                          "type": "uint8"
                        },
                        {
                          "internalType": "bytes",
                          "name": "data",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct LibAsset.AssetType",
                      "name": "assetType",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct LibAsset.Asset",
                  "name": "makeAsset",
                  "type": "tuple"
                },
                {
                  "internalType": "address",
                  "name": "taker",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "enum LibAsset.AssetClass",
                          "name": "assetClass",
                          "type": "uint8"
                        },
                        {
                          "internalType": "bytes",
                          "name": "data",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct LibAsset.AssetType",
                      "name": "assetType",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct LibAsset.Asset",
                  "name": "takeAsset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "salt",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "start",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "end",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibOrder.Order",
              "name": "orderRight",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "signatureRight",
              "type": "bytes"
            }
          ],
          "internalType": "struct ExchangeCore.ExchangeMatch[]",
          "name": "matchedOrders",
          "type": "tuple[]"
        }
      ],
      "name": "matchOrdersFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "orderValidator",
      "outputs": [
        {
          "internalType": "contract IOrderValidator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeePrimary",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeeSecondary",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltiesRegistry",
      "outputs": [
        {
          "internalType": "contract IRoyaltiesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newDefaultFeeReceiver",
          "type": "address"
        }
      ],
      "name": "setDefaultFeeReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMatchOrdersLimit",
          "type": "uint256"
        }
      ],
      "name": "setMatchOrdersLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOrderValidator",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "setOrderValidatorContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newProtocolFeePrimary",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newProtocolFeeSecondary",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRoyaltiesProvider",
          "name": "newRoyaltiesRegistry",
          "type": "address"
        }
      ],
      "name": "setRoyaltiesRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newTrustedForwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x35aef25e5054ba76161e23ad62b39ad8021a4801d914064a07d728f69f96f639",
  "receipt": {
    "to": null,
    "from": "0x114B1d9f0d546B8f85C4003dcd4ca5CbB7F6bC98",
    "contractAddress": "0xa6c3Fe9D0F99007C4Ceeb23F5F4D74982D0b7260",
    "transactionIndex": 127,
    "gasUsed": "3599206",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000004000000000000000000000000000000000000800000000000000000000100000000000000000000000000000000000000000000000000000000000080000000000000004000000000100000000000000000000000000000000080000000000000000000200080000000000000000000000c00000000000000000000000000000000004000000000000000000001000002040800000000000000000000100000000000000000000080000000000000000000004000000000000000000000000000100000",
    "blockHash": "0x63e8139e4c6a334e00e279aca00e57302f90ef8d0d5238cdcd1a83192735bc6e",
    "transactionHash": "0x35aef25e5054ba76161e23ad62b39ad8021a4801d914064a07d728f69f96f639",
    "logs": [
      {
        "transactionIndex": 127,
        "blockNumber": 50496406,
        "transactionHash": "0x35aef25e5054ba76161e23ad62b39ad8021a4801d914064a07d728f69f96f639",
        "address": "0xa6c3Fe9D0F99007C4Ceeb23F5F4D74982D0b7260",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 255,
        "blockHash": "0x63e8139e4c6a334e00e279aca00e57302f90ef8d0d5238cdcd1a83192735bc6e"
      },
      {
        "transactionIndex": 127,
        "blockNumber": 50496406,
        "transactionHash": "0x35aef25e5054ba76161e23ad62b39ad8021a4801d914064a07d728f69f96f639",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000114b1d9f0d546b8f85c4003dcd4ca5cbb7f6bc98",
          "0x000000000000000000000000048cfedf907c4c9ddd11ff882380906e78e84bbe"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000148431bd930cfe40000000000000000000000000000000000000000000000005a691ca4a481bb3e0000000000000000000000000000000000000000000012c5c2b6416a4e3c3d600000000000000000000000000000000000000000000000005920d988cb50eb5a0000000000000000000000000000000000000000000012c5c3fe8486276d0d44",
        "logIndex": 256,
        "blockHash": "0x63e8139e4c6a334e00e279aca00e57302f90ef8d0d5238cdcd1a83192735bc6e"
      }
    ],
    "blockNumber": 50496406,
    "cumulativeGasUsed": "13348973",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e65e4ae76ce109b65d6560f491fa920e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderKeyHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"enum LibAsset.AssetClass\",\"name\":\"assetClass\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"makeAsset\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"enum LibAsset.AssetClass\",\"name\":\"assetClass\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"takeAsset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct LibOrder.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDefaultFeeReceiver\",\"type\":\"address\"}],\"name\":\"DefaultFeeReceiverSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderKeyHashLeft\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderKeyHashRight\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"enum LibAsset.AssetClass\",\"name\":\"assetClass\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"makeAsset\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"enum LibAsset.AssetClass\",\"name\":\"assetClass\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"takeAsset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct LibOrder.Order\",\"name\":\"orderLeft\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"enum LibAsset.AssetClass\",\"name\":\"assetClass\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"makeAsset\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"enum LibAsset.AssetClass\",\"name\":\"assetClass\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"takeAsset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct LibOrder.Order\",\"name\":\"orderRight\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"leftValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rightValue\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct LibOrder.FillResult\",\"name\":\"newFill\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalFillLeft\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalFillRight\",\"type\":\"uint256\"}],\"name\":\"Match\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newMatchOrdersLimit\",\"type\":\"uint256\"}],\"name\":\"MatchOrdersLimitSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IOrderValidator\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"OrderValidatorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newProtocolFeePrimary\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newProtocolFeeSecondary\",\"type\":\"uint256\"}],\"name\":\"ProtocolFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IRoyaltiesProvider\",\"name\":\"newRoyaltiesRegistry\",\"type\":\"address\"}],\"name\":\"RoyaltiesRegistrySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldTrustedForwarder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTrustedForwarder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"TrustedForwarderSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC1776_OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXCHANGE_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"enum LibAsset.AssetClass\",\"name\":\"assetClass\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"makeAsset\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"enum LibAsset.AssetClass\",\"name\":\"assetClass\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"takeAsset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"internalType\":\"struct LibOrder.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"orderKeyHash\",\"type\":\"bytes32\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderKeyHash\",\"type\":\"bytes32\"}],\"name\":\"fills\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"orderFillValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newTrustedForwarder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newProtocolFeePrimary\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newProtocolFeeSecondary\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newDefaultFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"contract IRoyaltiesProvider\",\"name\":\"newRoyaltiesProvider\",\"type\":\"address\"},{\"internalType\":\"contract IOrderValidator\",\"name\":\"orderValidatorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newMatchOrdersLimit\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"enum LibAsset.AssetClass\",\"name\":\"assetClass\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"makeAsset\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"enum LibAsset.AssetClass\",\"name\":\"assetClass\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"takeAsset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"internalType\":\"struct LibOrder.Order\",\"name\":\"orderLeft\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signatureLeft\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"enum LibAsset.AssetClass\",\"name\":\"assetClass\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"makeAsset\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"enum LibAsset.AssetClass\",\"name\":\"assetClass\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"takeAsset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"internalType\":\"struct LibOrder.Order\",\"name\":\"orderRight\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signatureRight\",\"type\":\"bytes\"}],\"internalType\":\"struct ExchangeCore.ExchangeMatch[]\",\"name\":\"matchedOrders\",\"type\":\"tuple[]\"}],\"name\":\"matchOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"enum LibAsset.AssetClass\",\"name\":\"assetClass\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"makeAsset\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"enum LibAsset.AssetClass\",\"name\":\"assetClass\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"takeAsset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"internalType\":\"struct LibOrder.Order\",\"name\":\"orderLeft\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signatureLeft\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"enum LibAsset.AssetClass\",\"name\":\"assetClass\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"makeAsset\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"enum LibAsset.AssetClass\",\"name\":\"assetClass\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"takeAsset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"internalType\":\"struct LibOrder.Order\",\"name\":\"orderRight\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signatureRight\",\"type\":\"bytes\"}],\"internalType\":\"struct ExchangeCore.ExchangeMatch[]\",\"name\":\"matchedOrders\",\"type\":\"tuple[]\"}],\"name\":\"matchOrdersFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orderValidator\",\"outputs\":[{\"internalType\":\"contract IOrderValidator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeePrimary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeSecondary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltiesRegistry\",\"outputs\":[{\"internalType\":\"contract IRoyaltiesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDefaultFeeReceiver\",\"type\":\"address\"}],\"name\":\"setDefaultFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMatchOrdersLimit\",\"type\":\"uint256\"}],\"name\":\"setMatchOrdersLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOrderValidator\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setOrderValidatorContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newProtocolFeePrimary\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newProtocolFeeSecondary\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRoyaltiesProvider\",\"name\":\"newRoyaltiesRegistry\",\"type\":\"address\"}],\"name\":\"setRoyaltiesRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTrustedForwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"The Sandbox\",\"details\":\"Main functions are in ExchangeCoreTransferManager is used to execute token transfers\",\"events\":{\"Cancel(bytes32,(address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256))\":{\"params\":{\"order\":\"The details of the order being canceled.\",\"orderKeyHash\":\"The hash of the order being canceled.\"}},\"DefaultFeeReceiverSet(address)\":{\"params\":{\"newDefaultFeeReceiver\":\"address that gets the fees\"}},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Match(address,bytes32,bytes32,(address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),(address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),(uint256,uint256),uint256,uint256)\":{\"params\":{\"from\":\"Address that initiated the match.\",\"newFill\":\"Fill details resulting from the order match.\",\"orderKeyHashLeft\":\"Hash of the left order.\",\"orderKeyHashRight\":\"Hash of the right order.\",\"orderLeft\":\"Details of the left order.\",\"orderRight\":\"Details of the right order.\",\"totalFillLeft\":\"Total fill amount for the left order.\",\"totalFillRight\":\"Total fill amount for the right order.\"}},\"MatchOrdersLimitSet(uint256)\":{\"params\":{\"newMatchOrdersLimit\":\"The new limit for matching orders in one transaction.\"}},\"OrderValidatorSet(address)\":{\"params\":{\"contractAddress\":\"Address of the new OrderValidator contract.\"}},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"ProtocolFeeSet(uint256,uint256)\":{\"params\":{\"newProtocolFeePrimary\":\"fee for primary market\",\"newProtocolFeeSecondary\":\"fee for secondary market\"}},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"RoyaltiesRegistrySet(address)\":{\"params\":{\"newRoyaltiesRegistry\":\"address of new royalties registry\"}},\"TrustedForwarderSet(address,address,address)\":{\"params\":{\"newTrustedForwarder\":\"new trusted forwarder\",\"oldTrustedForwarder\":\"old trusted forwarder\",\"operator\":\"the sender of the transaction\"}},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"cancel((address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes32)\":{\"params\":{\"order\":\"The order to be canceled.\",\"orderKeyHash\":\"Used as a checksum to avoid mistakes in the order values.\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\",\"details\":\"This protects the implementation contract from being initialized.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"getTrustedForwarder()\":{\"returns\":{\"_0\":\"return the address of the trusted forwarder\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,address,uint256,uint256,address,address,address,uint256)\":{\"params\":{\"admin\":\"The admin user that can grant/revoke roles, etc.\",\"newDefaultFeeReceiver\":\"Market fee receiver.\",\"newProtocolFeePrimary\":\"Protocol fee applied to primary markets.\",\"newProtocolFeeSecondary\":\"Protocol fee applied to secondary markets.\",\"newRoyaltiesProvider\":\"Registry for the different types of royalties.\",\"newTrustedForwarder\":\"Address for the trusted forwarder that will execute meta transactions.\",\"orderValidatorAddress\":\"New OrderValidator contract address.\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"trusted forwarder address to check\"},\"returns\":{\"_0\":\"true if the address is the same as the trusted forwarder\"}},\"matchOrders(((address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes,(address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes)[])\":{\"params\":{\"matchedOrders\":\"A list of left/right orders that match each other.\"}},\"matchOrdersFrom(address,((address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes,(address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes)[])\":{\"details\":\"This method supports ERC1776 native meta transactions.\",\"params\":{\"matchedOrders\":\"A list of left/right orders that match each other.\",\"sender\":\"The original sender of the transaction.\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setDefaultFeeReceiver(address)\":{\"params\":{\"newDefaultFeeReceiver\":\"Address to receive the fees.\"}},\"setMatchOrdersLimit(uint256)\":{\"params\":{\"newMatchOrdersLimit\":\"New value for max orders that can be matched.\"}},\"setOrderValidatorContract(address)\":{\"params\":{\"contractAddress\":\"New OrderValidator contract address.\"}},\"setProtocolFee(uint256,uint256)\":{\"params\":{\"newProtocolFeePrimary\":\"Fee for the primary market.\",\"newProtocolFeeSecondary\":\"Fee for the secondary market.\"}},\"setRoyaltiesRegistry(address)\":{\"params\":{\"newRoyaltiesRegistry\":\"Address of the new royalties registry.\"}},\"setTrustedForwarder(address)\":{\"params\":{\"newTrustedForwarder\":\"The new trusted forwarder address.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"stateVariables\":{\"ERC1776_OPERATOR_ROLE\":{\"return\":\"Hash for ERC1776_OPERATOR_ROLE.\",\"returns\":{\"_0\":\"Hash for ERC1776_OPERATOR_ROLE.\"}},\"EXCHANGE_ADMIN_ROLE\":{\"return\":\"Hash for EXCHANGE_ADMIN_ROLE.\",\"returns\":{\"_0\":\"Hash for EXCHANGE_ADMIN_ROLE.\"}},\"PAUSER_ROLE\":{\"return\":\"Hash for PAUSER_ROLE.\",\"returns\":{\"_0\":\"Hash for PAUSER_ROLE.\"}}},\"title\":\"Exchange contract with meta transactions\",\"version\":1},\"userdoc\":{\"events\":{\"Cancel(bytes32,(address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256))\":{\"notice\":\"Event emitted when an order is canceled.\"},\"DefaultFeeReceiverSet(address)\":{\"notice\":\"Emitted when the default fee receiver is updated.\"},\"Match(address,bytes32,bytes32,(address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),(address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),(uint256,uint256),uint256,uint256)\":{\"notice\":\"Event emitted when two orders are matched.\"},\"MatchOrdersLimitSet(uint256)\":{\"notice\":\"Event emitted when the match orders limit is updated.\"},\"OrderValidatorSet(address)\":{\"notice\":\"Event emitted when a new OrderValidator contract is set.\"},\"ProtocolFeeSet(uint256,uint256)\":{\"notice\":\"Emitted when protocol fees are updated.\"},\"TrustedForwarderSet(address,address,address)\":{\"notice\":\"Emitted when a `newTrustedForwarder` is set, replacing the `oldTrustedForwarder`\"}},\"kind\":\"user\",\"methods\":{\"ERC1776_OPERATOR_ROLE()\":{\"notice\":\"Role for ERC1776 trusted meta transaction contracts (like SAND).\"},\"EXCHANGE_ADMIN_ROLE()\":{\"notice\":\"Role for business addresses that can change values like fees and royalties.\"},\"PAUSER_ROLE()\":{\"notice\":\"Role for business addresses that can react to emergencies and pause.\"},\"cancel((address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes32)\":{\"notice\":\"Cancel an order.\"},\"defaultFeeReceiver()\":{\"notice\":\"Default receiver of protocol fees\"},\"getTrustedForwarder()\":{\"notice\":\"return the address of the trusted forwarder\"},\"initialize(address,address,uint256,uint256,address,address,address,uint256)\":{\"notice\":\"Exchange contract initializer.\"},\"isTrustedForwarder(address)\":{\"notice\":\"return true if the forwarder is the trusted forwarder\"},\"matchOrders(((address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes,(address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes)[])\":{\"notice\":\"Match orders and transact.\"},\"matchOrdersFrom(address,((address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes,(address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes)[])\":{\"notice\":\"Match orders and transact.\"},\"pause()\":{\"notice\":\"Pause the contract operations.\"},\"protocolFeePrimary()\":{\"notice\":\"Fee applied to primary sales.\"},\"protocolFeeSecondary()\":{\"notice\":\"Fee applied to secondary sales.\"},\"royaltiesRegistry()\":{\"notice\":\"Registry for the different royalties\"},\"setDefaultFeeReceiver(address)\":{\"notice\":\"Set the default fee receiver.\"},\"setMatchOrdersLimit(uint256)\":{\"notice\":\"Set the limit for matching orders.\"},\"setOrderValidatorContract(address)\":{\"notice\":\"Set the OrderValidator address.\"},\"setProtocolFee(uint256,uint256)\":{\"notice\":\"Set the protocol fees.\"},\"setRoyaltiesRegistry(address)\":{\"notice\":\"Set the royalty registry.\"},\"setTrustedForwarder(address)\":{\"notice\":\"Change the address of the trusted forwarder for meta-transactions.\"},\"unpause()\":{\"notice\":\"Resume the contract operations.\"}},\"notice\":\"Used to exchange assets, that is, tokens.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@sandbox-smart-contracts/marketplace/contracts/Exchange.sol\":\"Exchange\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc2dfd6ba9449f61b6b03b262182faf302f093a8c05dd10792aeecb4ed1663c0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xfeefb24d068524440e1ba885efdf105d91f83504af3c2d745ffacc4595396831\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf51f292659a77777c0ed7375a39683d8bee53b86a6e7bd0c76f34ce7aa37a3a8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd60f939a3ca0199014d079b4dd66aa757954334947d81eb5c1d35d7a83061ab3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x23b997be73d3dd46885262704f0f8cfc7273fdadfe303d37969a9561373972b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xbe63437e37e32162d5d11ea8f11a44378c092b4bcbb05b51a813fe4bf33297d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165CheckerUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165CheckerUpgradeable {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165Upgradeable).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165Upgradeable.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x94edef8687cf1335a114f7e7267fa92cb0d9e61afde8d62589aceede6c245caf\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x1c65595a26548a1b2263315b08a56334a2d7087319814437559c3c96025e939f\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/dependency-metatx/contracts/ERC2771HandlerAbstract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @dev minimal ERC2771 handler to keep bytecode-size down\\n/// based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/metatx/ERC2771Context.sol\\nabstract contract ERC2771HandlerAbstract {\\n    /// @notice return true if the forwarder is the trusted forwarder\\n    /// @param forwarder trusted forwarder address to check\\n    /// @return true if the address is the same as the trusted forwarder\\n    function isTrustedForwarder(address forwarder) external view returns (bool) {\\n        return _isTrustedForwarder(forwarder);\\n    }\\n\\n    /// @notice if the call is from the trusted forwarder the sender is extracted from calldata, msg.sender otherwise\\n    /// @return sender the calculated address of the sender\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (_isTrustedForwarder(msg.sender) && msg.data.length >= 20) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            sender = msg.sender;\\n        }\\n    }\\n\\n    /// @notice if the call is from the trusted forwarder the sender is removed from calldata\\n    /// @return the calldata without the sender\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (_isTrustedForwarder(msg.sender) && msg.data.length >= 20) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n\\n    /// @notice return true if the forwarder is the trusted forwarder\\n    /// @param forwarder trusted forwarder address to check\\n    /// @return true if the address is the same as the trusted forwarder\\n    /// @dev this function must be IMPLEMENTED\\n    function _isTrustedForwarder(address forwarder) internal view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0xc4f349865ea7146f51b69f1edacdef60e0a2a7cf4dab538a5ae53ee9a0036231\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/dependency-metatx/contracts/ERC2771HandlerUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {ERC2771HandlerAbstract} from \\\"./ERC2771HandlerAbstract.sol\\\";\\n\\n/// @dev minimal ERC2771 handler to keep bytecode-size down\\n/// based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/metatx/ERC2771Context.sol\\ncontract ERC2771HandlerUpgradeable is Initializable, ERC2771HandlerAbstract {\\n    address private _trustedForwarder;\\n\\n    /// @notice Emitted when a `newTrustedForwarder` is set, replacing the `oldTrustedForwarder`\\n    /// @param oldTrustedForwarder old trusted forwarder\\n    /// @param newTrustedForwarder new trusted forwarder\\n    /// @param operator the sender of the transaction\\n    event TrustedForwarderSet(\\n        address indexed oldTrustedForwarder,\\n        address indexed newTrustedForwarder,\\n        address indexed operator\\n    );\\n\\n    /// @notice initialize the trusted forwarder address\\n    /// @param forwarder trusted forwarder address or zero to disable it\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __ERC2771Handler_init(address forwarder) internal onlyInitializing {\\n        __ERC2771Handler_init_unchained(forwarder);\\n    }\\n\\n    /// @notice initialize the trusted forwarder address\\n    /// @param forwarder trusted forwarder address or zero to disable it\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __ERC2771Handler_init_unchained(address forwarder) internal onlyInitializing {\\n        _setTrustedForwarder(forwarder);\\n    }\\n\\n    /// @notice return the address of the trusted forwarder\\n    /// @return return the address of the trusted forwarder\\n    function getTrustedForwarder() external view returns (address) {\\n        return _trustedForwarder;\\n    }\\n\\n    /// @notice set the address of the trusted forwarder\\n    /// @param newForwarder the address of the new forwarder.\\n    function _setTrustedForwarder(address newForwarder) internal virtual {\\n        require(newForwarder != _trustedForwarder, \\\"ERC2771HandlerUpgradeable: forwarder already set\\\");\\n        emit TrustedForwarderSet(_trustedForwarder, newForwarder, _msgSender());\\n        _trustedForwarder = newForwarder;\\n    }\\n\\n    /// @notice return true if the forwarder is the trusted forwarder\\n    /// @param forwarder trusted forwarder address to check\\n    /// @return true if the address is the same as the trusted forwarder\\n    function _isTrustedForwarder(address forwarder) internal view virtual override returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    /// @notice if the call is from the trusted forwarder the sender is extracted from calldata, msg.sender otherwise\\n    /// @return sender the calculated address of the sender\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        return super._msgSender();\\n    }\\n\\n    /// @notice if the call is from the trusted forwarder the sender is removed from calldata\\n    /// @return the calldata without the sender\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        return super._msgData();\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x63b605598cecd8d66880b7978e17036367dfa8b0f236c2d5eaf0bff6328d26b8\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/dependency-royalty-management/contracts/interfaces/IRoyaltyUGC.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title IRoyaltyUGC\\n/// @notice interface define function for managing creator of UGC (User-Generated Content)\\ninterface IRoyaltyUGC {\\n    ///@notice Gets the address of the creator associated with a specific token.\\n    ///@param tokenId the Id of token to retrieve the creator address for\\n    ///@return creator the address of creator\\n    function getCreatorAddress(uint256 tokenId) external pure returns (address creator);\\n}\\n\",\"keccak256\":\"0x621ac01b122e55554c87437ca7f64f571c18b43d100e2d2205ca06e9ae72a464\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/marketplace/contracts/Exchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {AccessControlEnumerableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport {ContextUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport {ERC2771HandlerUpgradeable} from \\\"@sandbox-smart-contracts/dependency-metatx/contracts/ERC2771HandlerUpgradeable.sol\\\";\\nimport {IOrderValidator} from \\\"./interfaces/IOrderValidator.sol\\\";\\nimport {TransferManager, IRoyaltiesProvider} from \\\"./TransferManager.sol\\\";\\nimport {LibOrder} from \\\"./libraries/LibOrder.sol\\\";\\nimport {ExchangeCore} from \\\"./ExchangeCore.sol\\\";\\n\\n/// @author The Sandbox\\n/// @title Exchange contract with meta transactions\\n/// @notice Used to exchange assets, that is, tokens.\\n/// @dev Main functions are in ExchangeCore\\n/// @dev TransferManager is used to execute token transfers\\ncontract Exchange is\\n    Initializable,\\n    AccessControlEnumerableUpgradeable,\\n    ExchangeCore,\\n    TransferManager,\\n    ERC2771HandlerUpgradeable,\\n    PausableUpgradeable\\n{\\n    /// @notice Role for ERC1776 trusted meta transaction contracts (like SAND).\\n    /// @return Hash for ERC1776_OPERATOR_ROLE.\\n    bytes32 public constant ERC1776_OPERATOR_ROLE = keccak256(\\\"ERC1776_OPERATOR_ROLE\\\");\\n\\n    /// @notice Role for business addresses that can change values like fees and royalties.\\n    /// @return Hash for EXCHANGE_ADMIN_ROLE.\\n    bytes32 public constant EXCHANGE_ADMIN_ROLE = keccak256(\\\"EXCHANGE_ADMIN_ROLE\\\");\\n\\n    /// @notice Role for business addresses that can react to emergencies and pause.\\n    /// @return Hash for PAUSER_ROLE.\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    /// @dev This protects the implementation contract from being initialized.\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Exchange contract initializer.\\n    /// @param admin The admin user that can grant/revoke roles, etc.\\n    /// @param newTrustedForwarder Address for the trusted forwarder that will execute meta transactions.\\n    /// @param newProtocolFeePrimary Protocol fee applied to primary markets.\\n    /// @param newProtocolFeeSecondary Protocol fee applied to secondary markets.\\n    /// @param newDefaultFeeReceiver Market fee receiver.\\n    /// @param newRoyaltiesProvider Registry for the different types of royalties.\\n    /// @param orderValidatorAddress New OrderValidator contract address.\\n    function initialize(\\n        address admin,\\n        address newTrustedForwarder,\\n        uint256 newProtocolFeePrimary,\\n        uint256 newProtocolFeeSecondary,\\n        address newDefaultFeeReceiver,\\n        IRoyaltiesProvider newRoyaltiesProvider,\\n        IOrderValidator orderValidatorAddress,\\n        uint256 newMatchOrdersLimit\\n    ) external initializer {\\n        __ERC2771Handler_init_unchained(newTrustedForwarder);\\n        __AccessControlEnumerable_init_unchained();\\n        __Pausable_init_unchained();\\n        __TransferManager_init_unchained(\\n            newProtocolFeePrimary,\\n            newProtocolFeeSecondary,\\n            newDefaultFeeReceiver,\\n            newRoyaltiesProvider\\n        );\\n        __ExchangeCoreInitialize(orderValidatorAddress, newMatchOrdersLimit);\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\\n    }\\n\\n    /// @notice Match orders and transact.\\n    /// @param matchedOrders A list of left/right orders that match each other.\\n    function matchOrders(ExchangeMatch[] calldata matchedOrders) external whenNotPaused {\\n        _matchOrders(_msgSender(), matchedOrders);\\n    }\\n\\n    /// @notice Match orders and transact.\\n    /// @param sender The original sender of the transaction.\\n    /// @param matchedOrders A list of left/right orders that match each other.\\n    /// @dev This method supports ERC1776 native meta transactions.\\n    function matchOrdersFrom(\\n        address sender,\\n        ExchangeMatch[] calldata matchedOrders\\n    ) external onlyRole(ERC1776_OPERATOR_ROLE) whenNotPaused {\\n        require(sender != address(0), \\\"invalid sender\\\");\\n        _matchOrders(sender, matchedOrders);\\n    }\\n\\n    /// @notice Cancel an order.\\n    /// @param order The order to be canceled.\\n    /// @param orderKeyHash Used as a checksum to avoid mistakes in the order values.\\n    function cancel(LibOrder.Order calldata order, bytes32 orderKeyHash) external {\\n        require(_msgSender() == order.maker, \\\"not maker\\\");\\n        _cancel(order, orderKeyHash);\\n    }\\n\\n    /// @notice Set the royalty registry.\\n    /// @param newRoyaltiesRegistry Address of the new royalties registry.\\n    function setRoyaltiesRegistry(IRoyaltiesProvider newRoyaltiesRegistry) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _setRoyaltiesRegistry(newRoyaltiesRegistry);\\n    }\\n\\n    /// @notice Set the OrderValidator address.\\n    /// @param contractAddress New OrderValidator contract address.\\n    function setOrderValidatorContract(IOrderValidator contractAddress) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _setOrderValidatorContract(contractAddress);\\n    }\\n\\n    /// @notice Set the limit for matching orders.\\n    /// @param newMatchOrdersLimit New value for max orders that can be matched.\\n    function setMatchOrdersLimit(uint256 newMatchOrdersLimit) external onlyRole(EXCHANGE_ADMIN_ROLE) {\\n        _setMatchOrdersLimit(newMatchOrdersLimit);\\n    }\\n\\n    /// @notice Change the address of the trusted forwarder for meta-transactions.\\n    /// @param newTrustedForwarder The new trusted forwarder address.\\n    function setTrustedForwarder(address newTrustedForwarder) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _setTrustedForwarder(newTrustedForwarder);\\n    }\\n\\n    /// @notice Set the protocol fees.\\n    /// @param newProtocolFeePrimary Fee for the primary market.\\n    /// @param newProtocolFeeSecondary Fee for the secondary market.\\n    function setProtocolFee(\\n        uint256 newProtocolFeePrimary,\\n        uint256 newProtocolFeeSecondary\\n    ) external onlyRole(EXCHANGE_ADMIN_ROLE) {\\n        _setProtocolFee(newProtocolFeePrimary, newProtocolFeeSecondary);\\n    }\\n\\n    /// @notice Set the default fee receiver.\\n    /// @param newDefaultFeeReceiver Address to receive the fees.\\n    function setDefaultFeeReceiver(address newDefaultFeeReceiver) external onlyRole(EXCHANGE_ADMIN_ROLE) {\\n        _setDefaultFeeReceiver(newDefaultFeeReceiver);\\n    }\\n\\n    /// @notice Pause the contract operations.\\n    function pause() external onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    /// @notice Resume the contract operations.\\n    function unpause() external onlyRole(EXCHANGE_ADMIN_ROLE) {\\n        _unpause();\\n    }\\n\\n    /// @dev Check if fees & royalties should be skipped for users with the EXCHANGE_ADMIN_ROLE.\\n    /// @param from Address to check.\\n    /// @return True if fees should be skipped, false otherwise.\\n    function _mustSkipFees(address from) internal view override returns (bool) {\\n        return hasRole(EXCHANGE_ADMIN_ROLE, from);\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override(ContextUpgradeable, ERC2771HandlerUpgradeable)\\n        returns (address)\\n    {\\n        return ERC2771HandlerUpgradeable._msgSender();\\n    }\\n\\n    // slither-disable-next-line dead-code needed because of inheritance\\n    function _msgData() internal view override(ContextUpgradeable, ERC2771HandlerUpgradeable) returns (bytes calldata) {\\n        return ERC2771HandlerUpgradeable._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0x273b7ab72bf8f3b4f9c971047ef6aac759d8c06e24d36c3e4091755e017be280\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/marketplace/contracts/ExchangeCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {AddressUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport {LibAsset} from \\\"./libraries/LibAsset.sol\\\";\\nimport {LibOrder} from \\\"./libraries/LibOrder.sol\\\";\\nimport {ITransferManager} from \\\"./interfaces/ITransferManager.sol\\\";\\nimport {IOrderValidator} from \\\"./interfaces/IOrderValidator.sol\\\";\\n\\n/// @author The Sandbox\\n/// @title ExchangeCore Contract\\n/// @notice Contains the main functions for the marketplace.\\n/// @dev This is an abstract contract that requires implementation.\\nabstract contract ExchangeCore is Initializable, ITransferManager {\\n    using AddressUpgradeable for address;\\n    /// @dev Stores left and right orders that match each other.\\n    /// Left and right are symmetrical except for fees that are taken from the left side first.\\n    struct ExchangeMatch {\\n        LibOrder.Order orderLeft; // Left order details\\n        bytes signatureLeft; // Signature of the left order\\n        LibOrder.Order orderRight; // Right order details\\n        bytes signatureRight; // Signature of the right order\\n    }\\n\\n    /// @dev Address of the OrderValidator contract.\\n    IOrderValidator public orderValidator;\\n\\n    /// @dev Limit for the number of orders that can be matched in a single transaction.\\n    uint256 private matchOrdersLimit;\\n\\n    /// @dev Mapping to store the fill amount for each order, identified by its hash.\\n    mapping(bytes32 orderKeyHash => uint256 orderFillValue) public fills;\\n\\n    /// @notice Event emitted when an order is canceled.\\n    /// @param orderKeyHash The hash of the order being canceled.\\n    /// @param order The details of the order being canceled.\\n    event Cancel(bytes32 indexed orderKeyHash, LibOrder.Order order);\\n\\n    /// @notice Event emitted when two orders are matched.\\n    /// @param from Address that initiated the match.\\n    /// @param orderKeyHashLeft Hash of the left order.\\n    /// @param orderKeyHashRight Hash of the right order.\\n    /// @param orderLeft Details of the left order.\\n    /// @param orderRight Details of the right order.\\n    /// @param newFill Fill details resulting from the order match.\\n    /// @param totalFillLeft Total fill amount for the left order.\\n    /// @param totalFillRight Total fill amount for the right order.\\n    event Match(\\n        address indexed from,\\n        bytes32 indexed orderKeyHashLeft,\\n        bytes32 indexed orderKeyHashRight,\\n        LibOrder.Order orderLeft,\\n        LibOrder.Order orderRight,\\n        LibOrder.FillResult newFill,\\n        uint256 totalFillLeft,\\n        uint256 totalFillRight\\n    );\\n\\n    /// @notice Event emitted when a new OrderValidator contract is set.\\n    /// @param contractAddress Address of the new OrderValidator contract.\\n    event OrderValidatorSet(IOrderValidator indexed contractAddress);\\n\\n    /// @notice Event emitted when the match orders limit is updated.\\n    /// @param newMatchOrdersLimit The new limit for matching orders in one transaction.\\n    event MatchOrdersLimitSet(uint256 indexed newMatchOrdersLimit);\\n\\n    /// @dev Constructor to disable initializers for this contract.\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Initializes the ExchangeCore contract.\\n    /// @param newOrderValidatorAddress Address of the new OrderValidator contract.\\n    /// @param newMatchOrdersLimit The limit for matching orders in one transaction.\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __ExchangeCoreInitialize(\\n        IOrderValidator newOrderValidatorAddress,\\n        uint256 newMatchOrdersLimit\\n    ) internal onlyInitializing {\\n        _setOrderValidatorContract(newOrderValidatorAddress);\\n        _setMatchOrdersLimit(newMatchOrdersLimit);\\n    }\\n\\n    /// @notice Updates the OrderValidator contract address.\\n    /// @param contractAddress Address of the new OrderValidator contract.\\n    function _setOrderValidatorContract(IOrderValidator contractAddress) internal {\\n        require(address(contractAddress).isContract(), \\\"invalid order validator\\\");\\n        orderValidator = contractAddress;\\n        emit OrderValidatorSet(contractAddress);\\n    }\\n\\n    /// @notice Updates the limit for the number of orders that can be matched in a single transaction.\\n    /// @param newMatchOrdersLimit The new limit for matching orders.\\n    function _setMatchOrdersLimit(uint256 newMatchOrdersLimit) internal {\\n        require(newMatchOrdersLimit > 0, \\\"invalid quantity\\\");\\n        matchOrdersLimit = newMatchOrdersLimit;\\n        emit MatchOrdersLimitSet(matchOrdersLimit);\\n    }\\n\\n    /// @notice Cancels a specified order.\\n    /// @param order Details of the order to be canceled.\\n    /// @param orderKeyHash The hash of the order, used for verification.\\n    function _cancel(LibOrder.Order calldata order, bytes32 orderKeyHash) internal {\\n        require(order.salt != 0, \\\"0 salt can't be used\\\");\\n        bytes32 _orderKeyHash = LibOrder.hashKey(order);\\n        require(_orderKeyHash == orderKeyHash, \\\"invalid orderHash\\\");\\n        fills[orderKeyHash] = type(uint256).max;\\n        emit Cancel(orderKeyHash, order);\\n    }\\n\\n    /// @notice Matches provided orders and performs the transaction.\\n    /// @param sender The original sender of the transaction.\\n    /// @param matchedOrders Array of orders that are matched with each other.\\n    function _matchOrders(address sender, ExchangeMatch[] calldata matchedOrders) internal {\\n        uint256 len = matchedOrders.length;\\n        require(len > 0, \\\"ExchangeMatch cannot be empty\\\");\\n        require(len <= matchOrdersLimit, \\\"too many ExchangeMatch\\\");\\n        for (uint256 i; i < len; i++) {\\n            ExchangeMatch calldata m = matchedOrders[i];\\n            _validateOrders(sender, m.orderLeft, m.signatureLeft, m.orderRight, m.signatureRight);\\n            _matchAndTransfer(sender, m.orderLeft, m.orderRight);\\n        }\\n    }\\n\\n    /// @dev Validates the provided orders.\\n    /// @param sender Address of the sender.\\n    /// @param orderLeft Details of the left order.\\n    /// @param signatureLeft Signature of the left order.\\n    /// @param orderRight Details of the right order.\\n    /// @param signatureRight Signature of the right order.\\n    function _validateOrders(\\n        address sender,\\n        LibOrder.Order memory orderLeft,\\n        bytes memory signatureLeft,\\n        LibOrder.Order memory orderRight,\\n        bytes memory signatureRight\\n    ) internal view {\\n        // validate must force order.maker != address(0)\\n        orderValidator.validate(orderLeft, signatureLeft, sender);\\n        orderValidator.validate(orderRight, signatureRight, sender);\\n        if (orderLeft.taker != address(0)) {\\n            require(orderRight.maker == orderLeft.taker, \\\"leftOrder.taker failed\\\");\\n        }\\n        if (orderRight.taker != address(0)) {\\n            require(orderRight.taker == orderLeft.maker, \\\"rightOrder.taker failed\\\");\\n        }\\n    }\\n\\n    /// @notice Matches valid orders and transfers the associated assets.\\n    /// @param sender Address initiating the match.\\n    /// @param orderLeft The left order.\\n    /// @param orderRight The right order.\\n    function _matchAndTransfer(\\n        address sender,\\n        LibOrder.Order calldata orderLeft,\\n        LibOrder.Order calldata orderRight\\n    ) internal {\\n        LibAsset.AssetType memory makeMatch = LibAsset.matchAssets(\\n            orderLeft.makeAsset.assetType,\\n            orderRight.takeAsset.assetType\\n        );\\n        LibAsset.AssetType memory takeMatch = LibAsset.matchAssets(\\n            orderLeft.takeAsset.assetType,\\n            orderRight.makeAsset.assetType\\n        );\\n\\n        LibOrder.FillResult memory newFill = _parseOrdersSetFillEmitMatch(sender, orderLeft, orderRight);\\n\\n        doTransfers(\\n            ITransferManager.DealSide(LibAsset.Asset(makeMatch, newFill.leftValue), orderLeft.maker),\\n            ITransferManager.DealSide(LibAsset.Asset(takeMatch, newFill.rightValue), orderRight.maker),\\n            LibAsset.getFeeSide(makeMatch.assetClass, takeMatch.assetClass)\\n        );\\n    }\\n\\n    /// @notice Parse orders to get the order data, then create a new fill with setFillEmitMatch()\\n    /// @param sender The message sender\\n    /// @param orderLeft Left order\\n    /// @param orderRight Right order\\n    /// @return newFill Fill result\\n    function _parseOrdersSetFillEmitMatch(\\n        address sender,\\n        LibOrder.Order calldata orderLeft,\\n        LibOrder.Order calldata orderRight\\n    ) internal returns (LibOrder.FillResult memory newFill) {\\n        bytes32 orderKeyHashLeft = LibOrder.hashKey(orderLeft);\\n        bytes32 orderKeyHashRight = LibOrder.hashKey(orderRight);\\n\\n        uint256 leftOrderFill = _getOrderFill(orderLeft.salt, orderKeyHashLeft);\\n        uint256 rightOrderFill = _getOrderFill(orderRight.salt, orderKeyHashRight);\\n        newFill = LibOrder.fillOrder(orderLeft, orderRight, leftOrderFill, rightOrderFill);\\n\\n        require(newFill.rightValue > 0 && newFill.leftValue > 0, \\\"nothing to fill\\\");\\n\\n        if (orderLeft.salt != 0) {\\n            fills[orderKeyHashLeft] = leftOrderFill + newFill.rightValue;\\n        }\\n\\n        if (orderRight.salt != 0) {\\n            fills[orderKeyHashRight] = rightOrderFill + newFill.leftValue;\\n        }\\n\\n        emit Match({\\n            from: sender,\\n            orderKeyHashLeft: orderKeyHashLeft,\\n            orderKeyHashRight: orderKeyHashRight,\\n            orderLeft: orderLeft,\\n            orderRight: orderRight,\\n            newFill: newFill,\\n            totalFillLeft: fills[orderKeyHashLeft],\\n            totalFillRight: fills[orderKeyHashRight]\\n        });\\n        return newFill;\\n    }\\n\\n    /// @notice Return fill corresponding to order hash\\n    /// @param salt If salt 0, fill = 0\\n    /// @param hash Order hash\\n    function _getOrderFill(uint256 salt, bytes32 hash) internal view returns (uint256 fill) {\\n        if (salt == 0) {\\n            fill = 0;\\n        } else {\\n            fill = fills[hash];\\n        }\\n    }\\n\\n    // slither-disable-next-line unused-state\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x551d5555ffa5792840d61c2447390224a4c914b1cdb8c9cc2862a9a07eaf6281\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/marketplace/contracts/TransferManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport {ERC165CheckerUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165CheckerUpgradeable.sol\\\";\\nimport {IERC1155Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\nimport {IERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {AddressUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport {IRoyaltyUGC} from \\\"@sandbox-smart-contracts/dependency-royalty-management/contracts/interfaces/IRoyaltyUGC.sol\\\";\\nimport {SafeERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport {IRoyaltiesProvider, TOTAL_BASIS_POINTS} from \\\"./interfaces/IRoyaltiesProvider.sol\\\";\\nimport {ITransferManager} from \\\"./interfaces/ITransferManager.sol\\\";\\nimport {LibAsset} from \\\"./libraries/LibAsset.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/// @author The Sandbox\\n/// @title TransferManager\\n/// @notice Manages the transfer of assets with support for different fee structures and beneficiaries.\\n/// @dev This contract can handle various assets like ERC20, ERC721, and ERC1155 tokens.\\nabstract contract TransferManager is Initializable, ITransferManager {\\n    using AddressUpgradeable for address;\\n    using ERC165CheckerUpgradeable for address;\\n\\n    /// @notice Defines the base for representing fees to avoid rounding: 50% == 0.5 * 10000 == 5000.\\n    uint256 internal constant PROTOCOL_FEE_MULTIPLIER = 10000;\\n\\n    /// @notice The maximum allowable fee which cannot exceed 50%.\\n    uint256 internal constant PROTOCOL_FEE_SHARE_LIMIT = 5000;\\n\\n    /// @notice Royalties are represented in IRoyaltiesProvider.BASE_POINT, they\\n    /// @notice cannot exceed 50% == 0.5 * BASE_POINTS == 5000\\n    uint256 internal constant ROYALTY_SHARE_LIMIT = 5000;\\n\\n    /// @notice Fee applied to primary sales.\\n    /// @return uint256 of primary sale fee in PROTOCOL_FEE_MULTIPLIER units\\n    uint256 public protocolFeePrimary;\\n\\n    /// @notice Fee applied to secondary sales.\\n    /// @return uint256 of secondary sale fee in PROTOCOL_FEE_MULTIPLIER units\\n    uint256 public protocolFeeSecondary;\\n\\n    /// @notice Registry for the different royalties\\n    /// @return address of royaltiesRegistry\\n    IRoyaltiesProvider public royaltiesRegistry;\\n\\n    /// @notice Default receiver of protocol fees\\n    /// @return address of defaultFeeReceiver\\n    address public defaultFeeReceiver;\\n\\n    /// @notice Emitted when protocol fees are updated.\\n    /// @param newProtocolFeePrimary fee for primary market\\n    /// @param newProtocolFeeSecondary fee for secondary market\\n    event ProtocolFeeSet(uint256 indexed newProtocolFeePrimary, uint256 indexed newProtocolFeeSecondary);\\n\\n    //// @notice Emitted when the royalties registry is updated.\\n    /// @param newRoyaltiesRegistry address of new royalties registry\\n    event RoyaltiesRegistrySet(IRoyaltiesProvider indexed newRoyaltiesRegistry);\\n\\n    /// @notice Emitted when the default fee receiver is updated.\\n    /// @param newDefaultFeeReceiver address that gets the fees\\n    event DefaultFeeReceiverSet(address indexed newDefaultFeeReceiver);\\n\\n    /// @dev This protects the implementation contract from being initialized.\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Initializer for TransferExecutor\\n    /// @param newProtocolFeePrimary Fee for the primary market\\n    /// @param newProtocolFeeSecondary Fee for the secondary market\\n    /// @param newDefaultFeeReceiver Address for account receiving fees\\n    /// @param newRoyaltiesProvider Address of royalties registry\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __TransferManager_init_unchained(\\n        uint256 newProtocolFeePrimary,\\n        uint256 newProtocolFeeSecondary,\\n        address newDefaultFeeReceiver,\\n        IRoyaltiesProvider newRoyaltiesProvider\\n    ) internal onlyInitializing {\\n        _setProtocolFee(newProtocolFeePrimary, newProtocolFeeSecondary);\\n        _setDefaultFeeReceiver(newDefaultFeeReceiver);\\n        _setRoyaltiesRegistry(newRoyaltiesProvider);\\n    }\\n\\n    /// @notice Executes transfers for 2 matched orders\\n    /// @param left DealSide from the left order\\n    /// @param right DealSide from the right order\\n    /// @dev This is the main entry point, when used as a separated contract this method will be external\\n    function doTransfers(DealSide memory left, DealSide memory right, LibAsset.FeeSide feeSide) internal override {\\n        DealSide memory paymentSide;\\n        DealSide memory nftSide;\\n        if (feeSide == LibAsset.FeeSide.LEFT) {\\n            paymentSide = left;\\n            nftSide = right;\\n        } else {\\n            paymentSide = right;\\n            nftSide = left;\\n        }\\n        // Transfer NFT or left side if FeeSide.NONE\\n        _transfer(nftSide.asset, nftSide.account, paymentSide.account);\\n        // Transfer ERC20 or right side if FeeSide.NONE\\n        if (feeSide == LibAsset.FeeSide.NONE || _mustSkipFees(paymentSide.account)) {\\n            _transfer(paymentSide.asset, paymentSide.account, nftSide.account);\\n        } else {\\n            _doTransfersWithFeesAndRoyalties(paymentSide, nftSide);\\n        }\\n    }\\n\\n    /// @notice Sets the royalties registry.\\n    /// @param newRoyaltiesRegistry Address of new royalties registry\\n    function _setRoyaltiesRegistry(IRoyaltiesProvider newRoyaltiesRegistry) internal {\\n        require(address(newRoyaltiesRegistry).isContract(), \\\"invalid Royalties Registry\\\");\\n        royaltiesRegistry = newRoyaltiesRegistry;\\n\\n        emit RoyaltiesRegistrySet(newRoyaltiesRegistry);\\n    }\\n\\n    /// @notice Sets the protocol fees.\\n    /// @param newProtocolFeePrimary Fee for the primary market\\n    /// @param newProtocolFeeSecondary Fee for the secondary market\\n    function _setProtocolFee(uint256 newProtocolFeePrimary, uint256 newProtocolFeeSecondary) internal {\\n        require(newProtocolFeePrimary < PROTOCOL_FEE_SHARE_LIMIT, \\\"invalid primary fee\\\");\\n        require(newProtocolFeeSecondary < PROTOCOL_FEE_SHARE_LIMIT, \\\"invalid secondary fee\\\");\\n        protocolFeePrimary = newProtocolFeePrimary;\\n        protocolFeeSecondary = newProtocolFeeSecondary;\\n\\n        emit ProtocolFeeSet(newProtocolFeePrimary, newProtocolFeeSecondary);\\n    }\\n\\n    /// @notice Sets the default fee receiver.\\n    /// @param newDefaultFeeReceiver Address that gets the fees\\n    function _setDefaultFeeReceiver(address newDefaultFeeReceiver) internal {\\n        require(newDefaultFeeReceiver != address(0), \\\"invalid default fee receiver\\\");\\n        defaultFeeReceiver = newDefaultFeeReceiver;\\n\\n        emit DefaultFeeReceiverSet(newDefaultFeeReceiver);\\n    }\\n\\n    /// @notice Transfer protocol fees and royalties.\\n    /// @param paymentSide DealSide of the fee-side order\\n    /// @param nftSide DealSide of the nft-side order\\n    function _doTransfersWithFeesAndRoyalties(DealSide memory paymentSide, DealSide memory nftSide) internal {\\n        uint256 fees;\\n        uint256 remainder = paymentSide.asset.value;\\n        if (_isPrimaryMarket(nftSide)) {\\n            fees = protocolFeePrimary;\\n            // No royalties\\n        } else {\\n            fees = protocolFeeSecondary;\\n            remainder = _transferRoyalties(remainder, paymentSide, nftSide);\\n        }\\n        if (fees > 0 && remainder > 0) {\\n            remainder = _transferPercentage(remainder, paymentSide, defaultFeeReceiver, fees, PROTOCOL_FEE_MULTIPLIER);\\n        }\\n        if (remainder > 0) {\\n            _transfer(LibAsset.Asset(paymentSide.asset.assetType, remainder), paymentSide.account, nftSide.account);\\n        }\\n    }\\n\\n    /// @notice Return if this tx is on primary market\\n    /// @param nftSide DealSide of the nft-side order\\n    /// @return creator Address or zero if is not able to retrieve it\\n    function _isPrimaryMarket(DealSide memory nftSide) internal view returns (bool) {\\n        address creator = _getCreator(nftSide.asset.assetType);\\n        return creator != address(0) && nftSide.account == creator;\\n    }\\n\\n    /// @notice Transfer royalties.\\n    /// @param remainder How much of the amount left after previous transfers\\n    /// @param paymentSide DealSide of the fee-side order\\n    /// @param nftSide DealSide of the nft-side order\\n    /// @return How much left after paying royalties\\n    function _transferRoyalties(\\n        uint256 remainder,\\n        DealSide memory paymentSide,\\n        DealSide memory nftSide\\n    ) internal returns (uint256) {\\n        (address token, uint256 tokenId) = LibAsset.decodeToken(nftSide.asset.assetType);\\n        IRoyaltiesProvider.Part[] memory royalties = royaltiesRegistry.getRoyalties(token, tokenId);\\n        uint256 totalRoyalties;\\n        uint256 len = royalties.length;\\n        for (uint256 i; i < len; i++) {\\n            IRoyaltiesProvider.Part memory r = royalties[i];\\n            totalRoyalties = totalRoyalties + r.basisPoints;\\n            if (r.account == nftSide.account) {\\n                // We just skip the transfer because the nftSide will get the full payment anyway.\\n                continue;\\n            }\\n            remainder = _transferPercentage(remainder, paymentSide, r.account, r.basisPoints, TOTAL_BASIS_POINTS);\\n        }\\n        require(totalRoyalties <= ROYALTY_SHARE_LIMIT, \\\"royalties are too high (>50%)\\\");\\n        return remainder;\\n    }\\n\\n    /// @notice Do a transfer based on a percentage (in basis points)\\n    /// @param remainder How much of the amount left after previous transfers\\n    /// @param paymentSide DealSide of the fee-side order\\n    /// @param to Account that will receive the asset\\n    /// @param percentage Percentage to be transferred multiplied by the multiplier\\n    /// @param multiplier Percentage is multiplied by this number to avoid rounding (2.5% == 0.025) * multiplier\\n    /// @return How much left after current transfer\\n    function _transferPercentage(\\n        uint256 remainder,\\n        DealSide memory paymentSide,\\n        address to,\\n        uint256 percentage,\\n        uint256 multiplier\\n    ) internal returns (uint256) {\\n        LibAsset.Asset memory payment = LibAsset.Asset(paymentSide.asset.assetType, 0);\\n        uint256 fee = (paymentSide.asset.value * percentage) / multiplier;\\n        if (remainder > fee) {\\n            remainder = remainder - fee;\\n            payment.value = fee;\\n        } else {\\n            payment.value = remainder;\\n            remainder = 0;\\n        }\\n        if (payment.value > 0) {\\n            _transfer(payment, paymentSide.account, to);\\n        }\\n        return remainder;\\n    }\\n\\n    /// @notice Return the creator of the token if the token supports IRoyaltyUGC\\n    /// @param assetType Asset type\\n    /// @return creator Address or zero if is not able to retrieve it\\n    function _getCreator(LibAsset.AssetType memory assetType) internal view returns (address creator) {\\n        (address token, uint256 tokenId) = LibAsset.decodeToken(assetType);\\n        if (token.supportsInterface(type(IRoyaltyUGC).interfaceId)) {\\n            creator = IRoyaltyUGC(token).getCreatorAddress(tokenId);\\n        }\\n    }\\n\\n    /// @notice Function should be able to transfer any supported Asset\\n    /// @param asset Asset to be transferred\\n    /// @param from Account holding the asset\\n    /// @param to Account that will receive the asset\\n    /// @dev This is the main entry point, when used as a separated contract this method will be external\\n    function _transfer(LibAsset.Asset memory asset, address from, address to) internal {\\n        if (asset.assetType.assetClass == LibAsset.AssetClass.ERC20) {\\n            address token = LibAsset.decodeAddress(asset.assetType);\\n            // slither-disable-next-line arbitrary-send-erc20\\n            SafeERC20Upgradeable.safeTransferFrom(IERC20Upgradeable(token), from, to, asset.value);\\n        } else if (asset.assetType.assetClass == LibAsset.AssetClass.ERC721) {\\n            (address token, uint256 tokenId) = LibAsset.decodeToken(asset.assetType);\\n            require(asset.value == 1, \\\"erc721 value error\\\");\\n            IERC721Upgradeable(token).safeTransferFrom(from, to, tokenId);\\n        } else if (asset.assetType.assetClass == LibAsset.AssetClass.ERC1155) {\\n            (address token, uint256 tokenId) = LibAsset.decodeToken(asset.assetType);\\n            IERC1155Upgradeable(token).safeTransferFrom(from, to, tokenId, asset.value, \\\"\\\");\\n        } else {\\n            revert(\\\"invalid asset class\\\");\\n        }\\n    }\\n\\n    /// @notice Function deciding if the fees are applied or not, to be override\\n    /// @param from Address to check\\n    function _mustSkipFees(address from) internal virtual returns (bool);\\n\\n    // slither-disable-next-line unused-state\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xd0727b4c043078b4810febd90cf3de7d2b196e074e31cce8b76462ea6e2aa307\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/marketplace/contracts/interfaces/IOrderValidator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport {LibOrder} from \\\"../libraries/LibOrder.sol\\\";\\n\\n/// @author The Sandbox\\n/// @title OrderValidator contract interface\\n/// @notice Contains the signature for validate, isPurchaseValid and verifyERC20Whitelist functions\\ninterface IOrderValidator {\\n    /// @notice Verifies order\\n    /// @param order Order to be validated\\n    /// @param signature Signature of order\\n    /// @param sender Order sender\\n    function validate(LibOrder.Order memory order, bytes memory signature, address sender) external view;\\n}\\n\",\"keccak256\":\"0x0b88d05e24a53fe183b4d56c689f0a65199dc7530a0d2548fab8fcfa24efd647\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/marketplace/contracts/interfaces/IRoyaltiesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n// The IRoyaltiesProvider.Part.basisPoints represents percentages in base points: 2.5 % == 0.025 * 10000 == 250.\\n// We expect external contracts to return the values with this precision.\\nuint256 constant TOTAL_BASIS_POINTS = 10000;\\n\\n/// @author The Sandbox\\n/// @title RoyaltiesProvider contract interface\\n/// @notice Contains the signature for the getRoyalties function\\ninterface IRoyaltiesProvider {\\n    struct Part {\\n        address account;\\n        uint256 basisPoints;\\n    }\\n\\n    /// @notice Calculates all royalties in token for tokenId\\n    /// @param token Address of token\\n    /// @param tokenId of the token we want to calculate royalties\\n    /// @return A part with all royalties for token\\n    function getRoyalties(address token, uint256 tokenId) external returns (Part[] memory);\\n}\\n\",\"keccak256\":\"0xdb67e9a7128c33290b9cb64ade84bfac064e0936933b7385a4c1238df098aa41\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/marketplace/contracts/interfaces/ITransferManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport {LibAsset} from \\\"../libraries/LibAsset.sol\\\";\\n\\n/// @author The Sandbox\\n/// @title ITransferManager Interface\\n/// @notice Provides an interface for managing transfers of assets between matched orders.\\nabstract contract ITransferManager {\\n    /// @dev Represents a side (either maker or taker) of a deal.\\n    /// Each side has an associated asset and an account address.\\n    struct DealSide {\\n        LibAsset.Asset asset; // The asset associated with this side of the deal.\\n        address account; // The account address associated with this side of the deal.\\n    }\\n\\n    /// @notice Executes the asset transfers associated with two matched orders.\\n    /// @param left The DealSide representing the left order's side.\\n    /// @param right The DealSide representing the right order's side.\\n    /// @param feeSide Indicates which side of the deal will bear the fee.\\n    /// @dev This function serves as the primary entry point for asset transfers.\\n    /// If used in a separate contract, the visibility of this method might change to external.\\n    function doTransfers(DealSide memory left, DealSide memory right, LibAsset.FeeSide feeSide) internal virtual;\\n}\\n\",\"keccak256\":\"0x523411e1859bf13cceb77dc9b5c81ebbae7f9eb0a964a85a9db0bf11ff5acb39\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/marketplace/contracts/libraries/LibAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n/// @author The Sandbox\\n/// @title LibAsset: A library for handling different types of Ethereum assets.\\n/// @notice This library contains structs, enums, and utility functions for managing and processing Ethereum assets.\\nlibrary LibAsset {\\n    /// @dev Represents different types of assets on the Ethereum network.\\n    enum AssetClass {\\n        INVALID, // Represents an invalid asset type.\\n        ERC20, // Represents an ERC20 token.\\n        ERC721, // Represents a single ERC721 token.\\n        ERC1155 // Represents an ERC1155 token.\\n    }\\n\\n    /// @dev Represents the side of the trade from which a fee should be taken, if any.\\n    enum FeeSide {\\n        NONE, // No fees are taken.\\n        LEFT, // Fees are taken from the left side of the trade.\\n        RIGHT // Fees are taken from the right side of the trade.\\n    }\\n\\n    /// @dev Represents the type of a specific asset.\\n    /// AssetType can represent a specific ERC-721 token (defined by the token contract address and tokenId) or\\n    /// a specific ERC-20 token (like DAI).\\n    struct AssetType {\\n        AssetClass assetClass; // The class of the asset (ERC20, ERC721, etc.).\\n        bytes data; // Contains the token's contract address and possibly its tokenId.\\n    }\\n\\n    /// @dev Represents any asset on the Ethereum blockchain with its type and value.\\n    struct Asset {\\n        AssetType assetType; // The type of the asset.\\n        uint256 value; // The amount or value of the asset.\\n    }\\n\\n    bytes32 internal constant ASSET_TYPE_TYPEHASH = keccak256(\\\"AssetType(uint256 assetClass,bytes data)\\\");\\n\\n    bytes32 internal constant ASSET_TYPEHASH =\\n        keccak256(\\\"Asset(AssetType assetType,uint256 value)AssetType(uint256 assetClass,bytes data)\\\");\\n\\n    /// @notice Determine which side of a trade should bear the fee, based on the asset types.\\n    /// @param leftClass The asset class type of the left side of the trade.\\n    /// @param rightClass The asset class type of the right side of the trade.\\n    /// @return FeeSide representing which side should bear the fee, if any.\\n    function getFeeSide(AssetClass leftClass, AssetClass rightClass) internal pure returns (FeeSide) {\\n        if (leftClass == AssetClass.ERC20 && rightClass != AssetClass.ERC20) {\\n            return FeeSide.LEFT;\\n        }\\n        if (rightClass == AssetClass.ERC20 && leftClass != AssetClass.ERC20) {\\n            return FeeSide.RIGHT;\\n        }\\n        return FeeSide.NONE;\\n    }\\n\\n    /// @notice Check if two asset types match.\\n    /// @param leftType Asset type on the left side of a trade.\\n    /// @param rightType Asset type on the right side of a trade.\\n    /// @return AssetType representing the matched asset type.\\n    function matchAssets(\\n        AssetType calldata leftType,\\n        AssetType calldata rightType\\n    ) internal pure returns (AssetType memory) {\\n        AssetClass classLeft = leftType.assetClass;\\n        AssetClass classRight = rightType.assetClass;\\n\\n        require(classLeft != AssetClass.INVALID, \\\"invalid left asset class\\\");\\n        require(classRight != AssetClass.INVALID, \\\"invalid right asset class\\\");\\n        require(classLeft == classRight, \\\"assets don't match\\\");\\n\\n        bytes32 leftHash = keccak256(leftType.data);\\n        bytes32 rightHash = keccak256(rightType.data);\\n        require(leftHash == rightHash, \\\"assets don't match\\\");\\n\\n        return leftType;\\n    }\\n\\n    /// @notice Compute the hash of an asset type.\\n    /// @param assetType The asset type to hash.\\n    /// @return The hash of the asset type.\\n    function hash(AssetType memory assetType) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(ASSET_TYPE_TYPEHASH, assetType.assetClass, keccak256(assetType.data)));\\n    }\\n\\n    /// @notice Compute the hash of an asset.\\n    /// @param asset The asset to hash.\\n    /// @return The hash of the asset.\\n    function hash(Asset memory asset) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(ASSET_TYPEHASH, hash(asset.assetType), asset.value));\\n    }\\n\\n    /// @notice Decode the token details (address and tokenId) from an AssetType.\\n    /// @param assetType The asset type to decode.\\n    /// @return Address of the token\\n    /// @return Id of the token\\n    function decodeToken(AssetType memory assetType) internal pure returns (address, uint256) {\\n        return abi.decode(assetType.data, (address, uint256));\\n    }\\n\\n    /// @notice Decode the token address from an AssetType.\\n    /// @param assetType The asset type to decode.\\n    /// @return The address of the token.\\n    function decodeAddress(AssetType memory assetType) internal pure returns (address) {\\n        return abi.decode(assetType.data, (address));\\n    }\\n}\\n\",\"keccak256\":\"0xe23da99d5ce9a8129f0413a5f650e6a7c8d7a6a46b59fce546b8f19676d81fa2\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/marketplace/contracts/libraries/LibMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n/// @author The Sandbox\\n/// @title LibMath: A library for handling specific math operations.\\nlibrary LibMath {\\n    uint256 internal constant ACCEPTABLE_RELATIVE_ERROR = 1000;\\n\\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\\n    ///      Reverts if rounding error is >= 0.1%\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to calculate partial of.\\n    /// @return partialAmount value of target rounded down.\\n    function safeGetPartialAmountFloor(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (uint256 partialAmount) {\\n        if (isRoundingErrorFloor(numerator, denominator, target)) {\\n            revert(\\\"rounding error\\\");\\n        }\\n        partialAmount = (numerator * target) / (denominator);\\n    }\\n\\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to multiply with numerator/denominator.\\n    /// @return isError Rounding error is present.\\n    function isRoundingErrorFloor(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (bool isError) {\\n        if (denominator == 0) {\\n            revert(\\\"division by zero\\\");\\n        }\\n\\n        // The absolute rounding error is the difference between the rounded\\n        // value and the ideal value. The relative rounding error is the\\n        // absolute rounding error divided by the absolute value of the\\n        // ideal value. This is undefined when the ideal value is zero.\\n        //\\n        // The ideal value is `numerator * target / denominator`.\\n        // Let's call `numerator * target % denominator` the remainder.\\n        // The absolute error is `remainder / denominator`.\\n        //\\n        // When the ideal value is zero, we require the absolute error to\\n        // be zero. Fortunately, this is always the case. The ideal value is\\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\\n        // remainder and absolute error are also zero.\\n        if (target == 0 || numerator == 0) {\\n            return false;\\n        }\\n\\n        // Otherwise, we want the relative rounding error to be strictly\\n        // less than 0.1%.\\n        // The relative error is `remainder / (numerator * target)`.\\n        // We want the relative error less than 1 / 1000:\\n        //        remainder / (numerator * target)  <  1 / 1000\\n        // or equivalently:\\n        //        1000 * remainder  <  numerator * target\\n        // so we have a rounding error iff:\\n        //        1000 * remainder  >=  numerator * target\\n        uint256 remainder = mulmod(target, numerator, denominator);\\n        isError = remainder * ACCEPTABLE_RELATIVE_ERROR >= numerator * target;\\n    }\\n}\\n\",\"keccak256\":\"0xa5daa3df082d3f8ff705f9d21f6e7f9fa1caffdc53bd53001e6285c35c58f33a\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/marketplace/contracts/libraries/LibOrder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport {LibAsset} from \\\"./LibAsset.sol\\\";\\nimport {LibMath} from \\\"./LibMath.sol\\\";\\n\\n/// @author The Sandbox\\n/// @title Order Handling Library\\n/// @notice Provides tools for constructing, hashing, and validating orders.\\nlibrary LibOrder {\\n    bytes32 internal constant ORDER_TYPEHASH =\\n        keccak256(\\n            \\\"Order(address maker,Asset makeAsset,address taker,Asset takeAsset,uint256 salt,uint256 start,uint256 end)Asset(AssetType assetType,uint256 value)AssetType(uint256 assetClass,bytes data)\\\"\\n        );\\n\\n    /// @dev Represents the structure of an order.\\n    struct Order {\\n        address maker; // Address of the maker.\\n        LibAsset.Asset makeAsset; // Asset the maker is providing.\\n        address taker; // Address of the taker.\\n        LibAsset.Asset takeAsset; // Asset the taker is providing.\\n        uint256 salt; // Random number to ensure unique order hash.\\n        uint256 start; // Timestamp when the order becomes valid.\\n        uint256 end; // Timestamp when the order expires.\\n    }\\n\\n    /// @dev Represents the result of filling two orders.\\n    struct FillResult {\\n        uint256 leftValue; // Amount filled from the left order.\\n        uint256 rightValue; // Amount filled from the right order.\\n    }\\n\\n    /// @notice Computes the unique hash of an order.\\n    /// @param order The order data.\\n    /// @return The unique hash of the order.\\n    function hashKey(Order calldata order) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    order.maker,\\n                    LibAsset.hash(order.makeAsset.assetType),\\n                    LibAsset.hash(order.takeAsset.assetType),\\n                    order.salt\\n                )\\n            );\\n    }\\n\\n    /// @notice Computes the complete hash of an order, including domain-specific data.\\n    /// @param order The order data.\\n    /// @return The complete hash of the order.\\n    function hash(Order calldata order) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                // solhint-disable-next-line func-named-parameters\\n                abi.encode(\\n                    ORDER_TYPEHASH,\\n                    order.maker,\\n                    LibAsset.hash(order.makeAsset),\\n                    order.taker,\\n                    LibAsset.hash(order.takeAsset),\\n                    order.salt,\\n                    order.start,\\n                    order.end\\n                )\\n            );\\n    }\\n\\n    /// @notice Validates order time\\n    /// @param order Whose time we want to validate\\n    // solhint-disable not-rely-on-time\\n    // slither-disable-start timestamp\\n    function validateOrderTime(Order memory order) internal view {\\n        require(order.start == 0 || order.start < block.timestamp, \\\"Order start validation failed\\\");\\n        require(order.end == 0 || order.end > block.timestamp, \\\"Order end validation failed\\\");\\n    }\\n\\n    // slither-disable-end timestamp\\n    // solhint-enable not-rely-on-time\\n\\n    /// @notice Should return filled values\\n    /// @param leftOrder Left order\\n    /// @param rightOrder Right order\\n    /// @param leftOrderFill Current fill of the left order (0 if order is unfilled)\\n    /// @param rightOrderFill Current fill of the right order (0 if order is unfilled)\\n    /// @dev We have 3 cases, 1st: left order should be fully filled\\n    /// @dev 2nd: right order should be fully filled or 3d: both should be fully filled if required values are the same\\n    /// @return The fill result of both orders\\n    function fillOrder(\\n        LibOrder.Order calldata leftOrder,\\n        LibOrder.Order calldata rightOrder,\\n        uint256 leftOrderFill,\\n        uint256 rightOrderFill\\n    ) internal pure returns (FillResult memory) {\\n        (uint256 leftMakeValue, uint256 leftTakeValue) = calculateRemaining(leftOrder, leftOrderFill);\\n        (uint256 rightMakeValue, uint256 rightTakeValue) = calculateRemaining(rightOrder, rightOrderFill);\\n\\n        if (rightTakeValue > leftMakeValue) {\\n            return _fillLeft(leftMakeValue, leftTakeValue, rightOrder.makeAsset.value, rightOrder.takeAsset.value);\\n        }\\n        return _fillRight(leftOrder.makeAsset.value, leftOrder.takeAsset.value, rightMakeValue, rightTakeValue);\\n    }\\n\\n    /// @notice Computes the remaining fillable amount of an order.\\n    /// @param order The order to compute from.\\n    /// @param fill The amount of the order already filled.\\n    /// @return makeValue The remaining fillable amount from the maker's side.\\n    /// @return takeValue The remaining fillable amount from the taker's side.\\n    function calculateRemaining(\\n        LibOrder.Order calldata order,\\n        uint256 fill\\n    ) internal pure returns (uint256 makeValue, uint256 takeValue) {\\n        require(order.takeAsset.value >= fill, \\\"filling more than order permits\\\");\\n        takeValue = order.takeAsset.value - fill;\\n        makeValue = LibMath.safeGetPartialAmountFloor(order.makeAsset.value, order.takeAsset.value, takeValue);\\n    }\\n\\n    /// @notice Computes the fill values for a situation where the right order is expected to fill the left order.\\n    /// @param leftMakeValue The amount the left order maker wants to trade.\\n    /// @param leftTakeValue The amount the left order taker wants in return.\\n    /// @param rightMakeValue The amount the right order maker wants to trade.\\n    /// @param rightTakeValue The amount the right order taker wants in return.\\n    /// @return The filled amounts for both the left and right orders.\\n    function _fillRight(\\n        uint256 leftMakeValue,\\n        uint256 leftTakeValue,\\n        uint256 rightMakeValue,\\n        uint256 rightTakeValue\\n    ) internal pure returns (FillResult memory) {\\n        uint256 makerValue = LibMath.safeGetPartialAmountFloor(rightTakeValue, leftMakeValue, leftTakeValue);\\n        require(makerValue <= rightMakeValue, \\\"fillRight: unable to fill\\\");\\n        return FillResult(rightTakeValue, makerValue);\\n    }\\n\\n    /// @notice Computes the fill values for a situation where the left order is expected to fill the right order.\\n    /// @param leftMakeValue The amount the left order maker wants to trade.\\n    /// @param leftTakeValue The amount the left order taker wants in return.\\n    /// @param rightMakeValue The amount the right order maker wants to trade.\\n    /// @param rightTakeValue The amount the right order taker wants in return.\\n    /// @return The filled amounts for both the left and right orders.\\n    function _fillLeft(\\n        uint256 leftMakeValue,\\n        uint256 leftTakeValue,\\n        uint256 rightMakeValue,\\n        uint256 rightTakeValue\\n    ) internal pure returns (FillResult memory) {\\n        uint256 rightTake = LibMath.safeGetPartialAmountFloor(leftTakeValue, rightMakeValue, rightTakeValue);\\n        require(rightTake <= leftMakeValue, \\\"fillLeft: unable to fill\\\");\\n        return FillResult(leftMakeValue, leftTakeValue);\\n    }\\n}\\n\",\"keccak256\":\"0x988f3a3a2acacf4b28e7854fffae94684b2ac2ee8fb35b0c2118222ab3eb87b2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000036565b6200002662000036565b6200003062000036565b620000f7565b600054610100900460ff1615620000a35760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811614620000f5576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b613fd980620001076000396000f3fe608060405234801561001057600080fd5b506004361061020b5760003560e01c80636d8f06941161012a578063c36e69e9116100bd578063d547741f1161008c578063e63ab1e911610071578063e63ab1e9146104b6578063ec03ce82146104dd578063fb01d36b146104f057600080fd5b8063d547741f14610490578063da742228146104a357600080fd5b8063c36e69e91461044f578063c460028814610462578063ca15c8731461046b578063ce1b815f1461047e57600080fd5b806389de1d7a116100f957806389de1d7a146103f25780639010d07c146103fb57806391d148541461040e578063a217fddf1461044757600080fd5b80636d8f06941461039d5780638456cb59146103b05780638587177a146103b85780638830df0d146103cb57600080fd5b806336568abe116101a25780634ac0c183116101715780634ac0c18314610344578063572b6c051461036b5780635737e1961461037e5780635c975abb1461039157600080fd5b806336568abe146102ea5780633abf6fd4146102fd5780633be89922146103295780633f4ba83a1461033c57600080fd5b806320158c44116101de57806320158c4414610273578063240de277146102a1578063248a9ca3146102b45780632f2ff15d146102d757600080fd5b806301ffc9a714610210578063032566d3146102385780630c8b62881461024d5780631cdfe3d814610260575b600080fd5b61022361021e366004613367565b610503565b60405190151581526020015b60405180910390f35b61024b6102463660046133a9565b61055f565b005b61024b61025b36600461340e565b610596565b61024b61026e366004613475565b6105b0565b6102936102813660046133a9565b60cb6020526000908152604090205481565b60405190815260200161022f565b61024b6102af366004613492565b6105e3565b6102936102c23660046133a9565b60009081526065602052604090206001015490565b61024b6102e53660046134b4565b61061c565b61024b6102f83660046134b4565b610641565b61010054610311906001600160a01b031681565b6040516001600160a01b03909116815260200161022f565b61024b610337366004613475565b6106de565b61024b6106f2565b6102937f541943c4a49765b7940b4b1392c4b1f8ede6efd4e23572572987ae02e569a78681565b610223610379366004613475565b610727565b60c954610311906001600160a01b031681565b6101655460ff16610223565b60ff54610311906001600160a01b031681565b61024b610742565b61024b6103c6366004613475565b610774565b6102937f1d46dada6ac47de84b1e7381a753499bde9d44cc2b9eacc1ba89f2ac24be16cc81565b61029360fd5481565b610311610409366004613492565b610788565b61022361041c3660046134b4565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610293600081565b61024b61045d3660046134e4565b6107a7565b61029360fe5481565b6102936104793660046133a9565b610901565b610133546001600160a01b0316610311565b61024b61049e3660046134b4565b610918565b61024b6104b1366004613475565b61093d565b6102937f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b61024b6104eb366004613572565b610951565b61024b6104fe3660046135bc565b6109cf565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f5a05180f000000000000000000000000000000000000000000000000000000001480610559575061055982610a68565b92915050565b7f541943c4a49765b7940b4b1392c4b1f8ede6efd4e23572572987ae02e569a78661058981610ae6565b61059282610af7565b5050565b61059e610b7a565b6105926105a9610bd0565b8383610bdf565b7f541943c4a49765b7940b4b1392c4b1f8ede6efd4e23572572987ae02e569a7866105da81610ae6565b61059282610da1565b7f541943c4a49765b7940b4b1392c4b1f8ede6efd4e23572572987ae02e569a78661060d81610ae6565b6106178383610e4f565b505050565b60008281526065602052604090206001015461063781610ae6565b6106178383610f2c565b610649610bd0565b6001600160a01b0316816001600160a01b0316146106d45760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b6105928282610f4e565b60006106e981610ae6565b61059282610f70565b7f541943c4a49765b7940b4b1392c4b1f8ede6efd4e23572572987ae02e569a78661071c81610ae6565b61072461101e565b50565b600061055982610133546001600160a01b0391821691161490565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a61076c81610ae6565b610724611077565b600061077f81610ae6565b610592826110b6565b60008281526097602052604081206107a09083611164565b9392505050565b600054610100900460ff16158080156107c75750600054600160ff909116105b806107e15750303b1580156107e1575060005460ff166001145b6108535760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016106cb565b6000805460ff191660011790558015610876576000805461ff0019166101001790555b61087f88611170565b6108876111e4565b61088f61124f565b61089b878787876112c7565b6108a5838361134e565b6108b060008a610f2c565b80156108f6576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050565b6000818152609760205260408120610559906113cb565b60008281526065602052604090206001015461093381610ae6565b6106178383610f4e565b600061094881610ae6565b610592826113d5565b61095e6020830183613475565b6001600160a01b031661096f610bd0565b6001600160a01b0316146109c55760405162461bcd60e51b815260206004820152600960248201527f6e6f74206d616b6572000000000000000000000000000000000000000000000060448201526064016106cb565b61059282826114d1565b7f1d46dada6ac47de84b1e7381a753499bde9d44cc2b9eacc1ba89f2ac24be16cc6109f981610ae6565b610a01610b7a565b6001600160a01b038416610a575760405162461bcd60e51b815260206004820152600e60248201527f696e76616c69642073656e64657200000000000000000000000000000000000060448201526064016106cb565b610a62848484610bdf565b50505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061055957506301ffc9a760e01b7fffffffff00000000000000000000000000000000000000000000000000000000831614610559565b61072481610af2610bd0565b6115d3565b60008111610b475760405162461bcd60e51b815260206004820152601060248201527f696e76616c6964207175616e746974790000000000000000000000000000000060448201526064016106cb565b60ca81905560405181907fa461ccf4a7e6996574f5a69258032896cd5082cf3264467d1b8875a3f98538d790600090a250565b6101655460ff1615610bce5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016106cb565b565b6000610bda611648565b905090565b8080610c2d5760405162461bcd60e51b815260206004820152601d60248201527f45786368616e67654d617463682063616e6e6f7420626520656d70747900000060448201526064016106cb565b60ca54811115610c7f5760405162461bcd60e51b815260206004820152601660248201527f746f6f206d616e792045786368616e67654d617463680000000000000000000060448201526064016106cb565b60005b81811015610d9a5736848483818110610c9d57610c9d613611565b9050602002810190610caf9190613627565b9050610d6786610cbf8380613665565b610cc89061383c565b610cd560208501856138ec565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610d17925050506040860186613665565b610d209061383c565b610d2d60608701876138ec565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061165292505050565b610d8786610d758380613665565b610d826040850185613665565b611844565b5080610d9281613949565b915050610c82565b5050505050565b6001600160a01b038116610df75760405162461bcd60e51b815260206004820152601c60248201527f696e76616c69642064656661756c74206665652072656365697665720000000060448201526064016106cb565b610100805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f5d039c612419cd7b6696e7d5c8ccaef3362188cc98db01e07fb55bb85b33541d90600090a250565b6113888210610ea05760405162461bcd60e51b815260206004820152601360248201527f696e76616c6964207072696d617279206665650000000000000000000000000060448201526064016106cb565b6113888110610ef15760405162461bcd60e51b815260206004820152601560248201527f696e76616c6964207365636f6e6461727920666565000000000000000000000060448201526064016106cb565b60fd82905560fe819055604051819083907ffa4067f2d0249edb7594284cabb394f2ec0e4f6168dbd1e3a63f861b67f1188f90600090a35050565b610f368282611947565b600082815260976020526040902061061790826119ea565b610f5882826119ff565b60008281526097602052604090206106179082611aa0565b6001600160a01b0381163b610fc75760405162461bcd60e51b815260206004820152601a60248201527f696e76616c696420526f79616c7469657320526567697374727900000000000060448201526064016106cb565b60ff805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f6932f02a24181a8c1b9fa7bdc7453f15ecba05c354c9da94e97bac1abb13397890600090a250565b611026611ab5565b610165805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61105a610bd0565b6040516001600160a01b03909116815260200160405180910390a1565b61107f610b7a565b610165805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861105a610bd0565b6001600160a01b0381163b61110d5760405162461bcd60e51b815260206004820152601760248201527f696e76616c6964206f726465722076616c696461746f7200000000000000000060448201526064016106cb565b60c9805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517ff605132f819f46ab9f362495c159c83b8a080f3b8b22f8a684018837eae0bed390600090a250565b60006107a08383611b08565b600054610100900460ff166111db5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106cb565b610724816113d5565b600054610100900460ff16610bce5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106cb565b600054610100900460ff166112ba5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106cb565b610165805460ff19169055565b600054610100900460ff166113325760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106cb565b61133c8484610e4f565b61134582610da1565b610a6281610f70565b600054610100900460ff166113b95760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106cb565b6113c2826110b6565b61059281610af7565b6000610559825490565b610133546001600160a01b039081169082160361145a5760405162461bcd60e51b815260206004820152603060248201527f4552433237373148616e646c65725570677261646561626c653a20666f72776160448201527f7264657220616c7265616479207365740000000000000000000000000000000060648201526084016106cb565b611462610bd0565b610133546040516001600160a01b03928316928481169216907f8ca022029d8ff7ad974913f8970aeed6c5e0e7eaf494a0c5b262249f6b5759e590600090a4610133805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b81608001356000036115255760405162461bcd60e51b815260206004820152601460248201527f302073616c742063616e2774206265207573656400000000000000000000000060448201526064016106cb565b600061153083611b32565b90508181146115815760405162461bcd60e51b815260206004820152601160248201527f696e76616c6964206f726465724861736800000000000000000000000000000060448201526064016106cb565b600082815260cb60205260409081902060001990555182907f34e97b51b26b1b4b5889b90f9702b02688ef22aaf1679d0d697a7518de60abfa906115c6908690613afc565b60405180910390a2505050565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff166105925761160681611bc3565b611611836020611bd5565b604051602001611622929190613b33565b60408051601f198184030181529082905262461bcd60e51b82526106cb91600401613be0565b6000610bda611dfe565b60c9546040517fb45230ec0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063b45230ec9061169f90879087908a90600401613c35565b60006040518083038186803b1580156116b757600080fd5b505afa1580156116cb573d6000803e3d6000fd5b505060c9546040517fb45230ec0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116925063b45230ec915061171c90859085908a90600401613c35565b60006040518083038186803b15801561173457600080fd5b505afa158015611748573d6000803e3d6000fd5b5050505060408401516001600160a01b0316156117c85783604001516001600160a01b031682600001516001600160a01b0316146117c85760405162461bcd60e51b815260206004820152601660248201527f6c6566744f726465722e74616b6572206661696c65640000000000000000000060448201526064016106cb565b60408201516001600160a01b031615610d9a5783600001516001600160a01b031682604001516001600160a01b031614610d9a5760405162461bcd60e51b815260206004820152601760248201527f72696768744f726465722e74616b6572206661696c656400000000000000000060448201526064016106cb565b600061187c6118566020850185613cfb565b6118609080613cfb565b61186d6060850185613cfb565b6118779080613cfb565b611e52565b905060006118a76118906060860186613cfb565b61189a9080613cfb565b61186d6020860186613cfb565b905060006118b686868661206e565b6040805160808101825290810185815282516060830152815290915061193f906020808201906118e890890189613475565b6001600160a01b031690526040805160808101825290810185815260208581015160608401529082528082019061192190890189613475565b6001600160a01b031690528551855161193a91906121ec565b612277565b505050505050565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff166105925760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556119a6610bd0565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006107a0836001600160a01b03841661237c565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff16156105925760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19169055611a5c610bd0565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60006107a0836001600160a01b0384166123cb565b6101655460ff16610bce5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016106cb565b6000826000018281548110611b1f57611b1f613611565b9060005260206000200154905092915050565b6000611b416020830183613475565b611b69611b516020850185613cfb565b611b5b9080613cfb565b611b6490613d11565b6124be565b611b79611b516060860186613cfb565b604080516001600160a01b03909416602085015283019190915260608201526080808401359082015260a0015b604051602081830303815290604052805190602001209050919050565b60606105596001600160a01b03831660145b60606000611be4836002613d1d565b611bef906002613d34565b67ffffffffffffffff811115611c0757611c07613699565b6040519080825280601f01601f191660200182016040528015611c31576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611c6857611c68613611565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611ccb57611ccb613611565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000611d07846002613d1d565b611d12906001613d34565b90505b6001811115611daf577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611d5357611d53613611565b1a60f81b828281518110611d6957611d69613611565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93611da881613d47565b9050611d15565b5083156107a05760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106cb565b610133546000906001600160a01b031633148015611e1d575060143610155b15611e4d57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c90565b503390565b6040805180820190915260008152606060208201526000611e766020850185613d5e565b90506000611e876020850185613d5e565b90506000826003811115611e9d57611e9d613982565b03611eea5760405162461bcd60e51b815260206004820152601860248201527f696e76616c6964206c65667420617373657420636c617373000000000000000060448201526064016106cb565b6000816003811115611efe57611efe613982565b03611f4b5760405162461bcd60e51b815260206004820152601960248201527f696e76616c696420726967687420617373657420636c6173730000000000000060448201526064016106cb565b806003811115611f5d57611f5d613982565b826003811115611f6f57611f6f613982565b14611fbc5760405162461bcd60e51b815260206004820152601260248201527f61737365747320646f6e2774206d61746368000000000000000000000000000060448201526064016106cb565b6000611fcb60208701876138ec565b604051611fd9929190613d79565b60405190819003902090506000611ff360208701876138ec565b604051612001929190613d79565b6040518091039020905080821461205a5760405162461bcd60e51b815260206004820152601260248201527f61737365747320646f6e2774206d61746368000000000000000000000000000060448201526064016106cb565b61206387613d11565b979650505050505050565b6040805180820190915260008082526020820152600061208d84611b32565b9050600061209a84611b32565b905060006120ac866080013584612500565b905060006120be866080013584612500565b90506120cc87878484612527565b9450600085602001511180156120e25750845115155b61212e5760405162461bcd60e51b815260206004820152600f60248201527f6e6f7468696e6720746f2066696c6c000000000000000000000000000000000060448201526064016106cb565b6080870135156121575760208501516121479083613d34565b600085815260cb60205260409020555b60808601351561217d57845161216d9082613d34565b600084815260cb60205260409020555b600084815260cb60205260408082205485835291819020549051859287926001600160a01b038d16927f5f1f72885b9f262a0908dfcb03271aa93b00aa85f8105a1617f08c7a52192f50926121d9928e928e928e929091613d89565b60405180910390a4505050509392505050565b6000600183600381111561220257612202613982565b1480156122215750600182600381111561221e5761221e613982565b14155b1561222e57506001610559565b600182600381111561224257612242613982565b1480156122615750600183600381111561225e5761225e613982565b14155b1561226e57506002610559565b50600092915050565b6122b06040805160c081018252600060808201818152606060a08401819052938301908152928201529081908152600060209091015290565b6122e96040805160c081018252600060808201818152606060a08401819052938301908152928201529081908152600060209091015290565b60018360028111156122fd576122fd613982565b0361230c575083905082612312565b50829050835b6123298160000151826020015184602001516125d7565b600083600281111561233d5761233d613982565b148061235157506123518260200151612800565b156123725761236d8260000151836020015183602001516125d7565b610d9a565b610d9a8282612840565b60008181526001830160205260408120546123c357508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610559565b506000610559565b600081815260018301602052604081205480156124b45760006123ef600183613dd6565b855490915060009061240390600190613dd6565b905081811461246857600086600001828154811061242357612423613611565b906000526020600020015490508087600001848154811061244657612446613611565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061247957612479613de9565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610559565b6000915050610559565b8051602080830151805190820120604051600093611ba6937f75aacb2727a36600741802d07994792d9d768ee841822bca87180d320cea991293919201613dff565b60008260000361251257506000610559565b50600090815260cb6020526040902054919050565b604080518082019091526000808252602082015260008061254887866128df565b9150915060008061255988876128df565b915091508381111561259c57612591848461257760208c018c613cfb565b6020013561258860608d018d613cfb565b60200135612994565b9450505050506125cf565b6125c86125ac60208b018b613cfb565b602001356125bd60608c018c613cfb565b602001358484612a20565b9450505050505b949350505050565b600183515160038111156125ed576125ed613982565b036126135760006126018460000151612aad565b9050610a628184848760200151612ac7565b6002835151600381111561262957612629613982565b036127165760008061263e8560000151612b4f565b9150915084602001516001146126965760405162461bcd60e51b815260206004820152601260248201527f6572633732312076616c7565206572726f72000000000000000000000000000060448201526064016106cb565b6040517f42842e0e0000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301528481166024830152604482018390528316906342842e0e906064015b600060405180830381600087803b15801561270257600080fd5b505af11580156108f6573d6000803e3d6000fd5b6003835151600381111561272c5761272c613982565b036127b8576000806127418560000151612b4f565b60208701516040517ff242432a0000000000000000000000000000000000000000000000000000000081526001600160a01b038881166004830152878116602483015260448201849052606482019290925260a06084820152600060a482015292945090925083169063f242432a9060c4016126e8565b60405162461bcd60e51b815260206004820152601360248201527f696e76616c696420617373657420636c6173730000000000000000000000000060448201526064016106cb565b6001600160a01b03811660009081527f90916b45ad713ccdf8d945eab9f58d0d1cfed58f8e47d57192d063a0ddbfe292602052604081205460ff16610559565b81516020015160009061285283612b73565b156128615760fd549150612874565b60fe549150612871818585612bb9565b90505b6000821180156128845750600081115b156128aa57610100546128a790829086906001600160a01b031685612710612d60565b90505b8015610a6257610a626040518060400160405280866000015160000151815260200183815250856020015185602001516125d7565b600080826128f06060860186613cfb565b6020013510156129425760405162461bcd60e51b815260206004820152601f60248201527f66696c6c696e67206d6f7265207468616e206f72646572207065726d6974730060448201526064016106cb565b826129506060860186613cfb565b6020013561295e9190613dd6565b905061298b6129706020860186613cfb565b602001356129816060870187613cfb565b6020013583612dec565b91509250929050565b604080518082019091526000808252602082015260006129b5858585612dec565b905085811115612a075760405162461bcd60e51b815260206004820152601860248201527f66696c6c4c6566743a20756e61626c6520746f2066696c6c000000000000000060448201526064016106cb565b5050604080518082019091529384525050602082015290565b60408051808201909152600080825260208201526000612a41838787612dec565b905083811115612a935760405162461bcd60e51b815260206004820152601960248201527f66696c6c52696768743a20756e61626c6520746f2066696c6c0000000000000060448201526064016106cb565b604080518082019091529283526020830152509392505050565b600081602001518060200190518101906105599190613e21565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052610a62908590612e5b565b6000808260200151806020019051810190612b6a9190613e3e565b91509150915091565b8051516000908190612b8490612f43565b90506001600160a01b038116158015906107a05750806001600160a01b031683602001516001600160a01b0316149392505050565b6000806000612bcf846000015160000151612b4f565b60ff546040517f9ca7dc7a0000000000000000000000000000000000000000000000000000000081526001600160a01b038085166004830152602482018490529395509193506000921690639ca7dc7a906044016000604051808303816000875af1158015612c42573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612c6a9190810190613e6c565b8051909150600090815b81811015612d00576000848281518110612c9057612c90613611565b60200260200101519050806020015184612caa9190613d34565b935088602001516001600160a01b031681600001516001600160a01b031603612cd35750612cee565b612cea8b8b83600001518460200151612710612d60565b9a50505b80612cf881613949565b915050612c74565b50611388821115612d535760405162461bcd60e51b815260206004820152601d60248201527f726f79616c746965732061726520746f6f206869676820283e3530252900000060448201526064016106cb565b5096979650505050505050565b604080518082019091528451518152600060208083018290528651015190919082908490612d8f908790613d1d565b612d999190613f4d565b905080881115612dbb57612dad8189613dd6565b602083018290529750612dc7565b60208201979097526000965b602082015115612de057612de0828860200151886125d7565b50959695505050505050565b6000612df984848461301a565b15612e465760405162461bcd60e51b815260206004820152600e60248201527f726f756e64696e67206572726f7200000000000000000000000000000000000060448201526064016106cb565b82612e518386613d1d565b6125cf9190613f4d565b6000612eb0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166130ba9092919063ffffffff16565b9050805160001480612ed1575080806020019051810190612ed19190613f6f565b6106175760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016106cb565b6000806000612f5184612b4f565b9092509050612f896001600160a01b0383167fa30b4db9000000000000000000000000000000000000000000000000000000006130c9565b15613013576040517fa30b4db9000000000000000000000000000000000000000000000000000000008152600481018290526001600160a01b0383169063a30b4db990602401602060405180830381865afa158015612fec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130109190613e21565b92505b5050919050565b60008260000361306c5760405162461bcd60e51b815260206004820152601060248201527f6469766973696f6e206279207a65726f0000000000000000000000000000000060448201526064016106cb565b811580613077575083155b15613084575060006107a0565b6000838061309457613094613f37565b85840990506130a38386613d1d565b6130af6103e883613d1d565b101595945050505050565b60606125cf84846000856130e5565b60006130d4836131cc565b80156107a057506107a08383613217565b60608247101561315d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016106cb565b600080866001600160a01b031685876040516131799190613f91565b60006040518083038185875af1925050503d80600081146131b6576040519150601f19603f3d011682016040523d82523d6000602084013e6131bb565b606091505b5091509150612063878383876132c9565b60006131df826301ffc9a760e01b613217565b80156105595750613210827fffffffff00000000000000000000000000000000000000000000000000000000613217565b1592915050565b604080517fffffffff000000000000000000000000000000000000000000000000000000008316602480830191909152825180830390910181526044909101909152602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b178152825160009392849283928392918391908a617530fa92503d915060005190508280156132b6575060208210155b8015612063575015159695505050505050565b60608315613338578251600003613331576001600160a01b0385163b6133315760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106cb565b50816125cf565b6125cf838381511561334d5781518083602001fd5b8060405162461bcd60e51b81526004016106cb9190613be0565b60006020828403121561337957600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146107a057600080fd5b6000602082840312156133bb57600080fd5b5035919050565b60008083601f8401126133d457600080fd5b50813567ffffffffffffffff8111156133ec57600080fd5b6020830191508360208260051b850101111561340757600080fd5b9250929050565b6000806020838503121561342157600080fd5b823567ffffffffffffffff81111561343857600080fd5b613444858286016133c2565b90969095509350505050565b6001600160a01b038116811461072457600080fd5b803561347081613450565b919050565b60006020828403121561348757600080fd5b81356107a081613450565b600080604083850312156134a557600080fd5b50508035926020909101359150565b600080604083850312156134c757600080fd5b8235915060208301356134d981613450565b809150509250929050565b600080600080600080600080610100898b03121561350157600080fd5b883561350c81613450565b9750602089013561351c81613450565b96506040890135955060608901359450608089013561353a81613450565b935060a089013561354a81613450565b925060c089013561355a81613450565b8092505060e089013590509295985092959890939650565b6000806040838503121561358557600080fd5b823567ffffffffffffffff81111561359c57600080fd5b830160e081860312156135ae57600080fd5b946020939093013593505050565b6000806000604084860312156135d157600080fd5b83356135dc81613450565b9250602084013567ffffffffffffffff8111156135f857600080fd5b613604868287016133c2565b9497909650939450505050565b634e487b7160e01b600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8183360301811261365b57600080fd5b9190910192915050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2183360301811261365b57600080fd5b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156136d2576136d2613699565b60405290565b60405160e0810167ffffffffffffffff811182821017156136d2576136d2613699565b604051601f8201601f1916810167ffffffffffffffff8111828210171561372457613724613699565b604052919050565b80356004811061347057600080fd5b60006040828403121561374d57600080fd5b6137556136af565b90506137608261372c565b815260208083013567ffffffffffffffff8082111561377e57600080fd5b818501915085601f83011261379257600080fd5b8135818111156137a4576137a4613699565b6137b684601f19601f840116016136fb565b915080825286848285010111156137cc57600080fd5b80848401858401376000908201840152918301919091525092915050565b6000604082840312156137fc57600080fd5b6138046136af565b9050813567ffffffffffffffff81111561381d57600080fd5b6138298482850161373b565b8252506020820135602082015292915050565b600060e0823603121561384e57600080fd5b6138566136d8565b61385f83613465565b8152602083013567ffffffffffffffff8082111561387c57600080fd5b613888368387016137ea565b602084015261389960408601613465565b604084015260608501359150808211156138b257600080fd5b506138bf368286016137ea565b6060830152506080830135608082015260a083013560a082015260c083013560c082015280915050919050565b6000808335601e1984360301811261390357600080fd5b83018035915067ffffffffffffffff82111561391e57600080fd5b60200191503681900382131561340757600080fd5b634e487b7160e01b600052601160045260246000fd5b6000600019820361395c5761395c613933565b5060010190565b60008235603e1983360301811261397957600080fd5b90910192915050565b634e487b7160e01b600052602160045260246000fd5b600481106139b657634e487b7160e01b600052602160045260246000fd5b9052565b60006139c68283613963565b604084526139df604085016139da8361372c565b613998565b6020810135601e198236030181126139f657600080fd5b0160208101903567ffffffffffffffff811115613a1257600080fd5b803603821315613a2157600080fd5b60406060860152806080860152808260a0870137600060a082870101526020840135602086015260a0601f19601f8301168601019250505092915050565b60008135613a6c81613450565b6001600160a01b038082168552613a866020850185613963565b915060e06020860152613a9c60e08601836139ba565b91506040840135613aac81613450565b166040850152613abf6060840184613963565b8482036060860152613ad182826139ba565b9150506080830135608085015260a083013560a085015260c083013560c08501528091505092915050565b6020815260006107a06020830184613a5f565b60005b83811015613b2a578181015183820152602001613b12565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613b6b816017850160208801613b0f565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351613ba8816028840160208801613b0f565b01602801949350505050565b60008151808452613bcc816020860160208601613b0f565b601f01601f19169290920160200192915050565b6020815260006107a06020830184613bb4565b6000815160408452613c09604085018251613998565b6020015160406060850152613c216080850182613bb4565b602093840151949093019390935250919050565b6060815260006001600160a01b03808651166060840152602086015160e06080850152613c66610140850182613bf3565b604088015190921660a08501525060608601518382037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa00160c085015290613cae8183613bf3565b915050608086015160e084015260a086015161010084015260c08601516101208401528281036020840152613ce38186613bb4565b9150506125cf60408301846001600160a01b03169052565b60008235603e1983360301811261365b57600080fd5b6000610559368361373b565b808202811582820484141761055957610559613933565b8082018082111561055957610559613933565b600081613d5657613d56613933565b506000190190565b600060208284031215613d7057600080fd5b6107a08261372c565b8183823760009101908152919050565b60c081526000613d9c60c0830188613a5f565b8281036020840152613dae8188613a5f565b8651604085015260209096015160608401525050608081019290925260a09091015292915050565b8181038181111561055957610559613933565b634e487b7160e01b600052603160045260246000fd5b83815260608101613e136020830185613998565b826040830152949350505050565b600060208284031215613e3357600080fd5b81516107a081613450565b60008060408385031215613e5157600080fd5b8251613e5c81613450565b6020939093015192949293505050565b60006020808385031215613e7f57600080fd5b825167ffffffffffffffff80821115613e9757600080fd5b818501915085601f830112613eab57600080fd5b815181811115613ebd57613ebd613699565b613ecb848260051b016136fb565b818152848101925060069190911b830184019087821115613eeb57600080fd5b928401925b818410156120635760408489031215613f095760008081fd5b613f116136af565b8451613f1c81613450565b81528486015186820152835260409093019291840191613ef0565b634e487b7160e01b600052601260045260246000fd5b600082613f6a57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215613f8157600080fd5b815180151581146107a057600080fd5b6000825161365b818460208701613b0f56fea26469706673582212204fb4aef3d7226e3c51717ee1c7bd8270f126087fe0a8b6b0ed8c1147686fcfad64736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061020b5760003560e01c80636d8f06941161012a578063c36e69e9116100bd578063d547741f1161008c578063e63ab1e911610071578063e63ab1e9146104b6578063ec03ce82146104dd578063fb01d36b146104f057600080fd5b8063d547741f14610490578063da742228146104a357600080fd5b8063c36e69e91461044f578063c460028814610462578063ca15c8731461046b578063ce1b815f1461047e57600080fd5b806389de1d7a116100f957806389de1d7a146103f25780639010d07c146103fb57806391d148541461040e578063a217fddf1461044757600080fd5b80636d8f06941461039d5780638456cb59146103b05780638587177a146103b85780638830df0d146103cb57600080fd5b806336568abe116101a25780634ac0c183116101715780634ac0c18314610344578063572b6c051461036b5780635737e1961461037e5780635c975abb1461039157600080fd5b806336568abe146102ea5780633abf6fd4146102fd5780633be89922146103295780633f4ba83a1461033c57600080fd5b806320158c44116101de57806320158c4414610273578063240de277146102a1578063248a9ca3146102b45780632f2ff15d146102d757600080fd5b806301ffc9a714610210578063032566d3146102385780630c8b62881461024d5780631cdfe3d814610260575b600080fd5b61022361021e366004613367565b610503565b60405190151581526020015b60405180910390f35b61024b6102463660046133a9565b61055f565b005b61024b61025b36600461340e565b610596565b61024b61026e366004613475565b6105b0565b6102936102813660046133a9565b60cb6020526000908152604090205481565b60405190815260200161022f565b61024b6102af366004613492565b6105e3565b6102936102c23660046133a9565b60009081526065602052604090206001015490565b61024b6102e53660046134b4565b61061c565b61024b6102f83660046134b4565b610641565b61010054610311906001600160a01b031681565b6040516001600160a01b03909116815260200161022f565b61024b610337366004613475565b6106de565b61024b6106f2565b6102937f541943c4a49765b7940b4b1392c4b1f8ede6efd4e23572572987ae02e569a78681565b610223610379366004613475565b610727565b60c954610311906001600160a01b031681565b6101655460ff16610223565b60ff54610311906001600160a01b031681565b61024b610742565b61024b6103c6366004613475565b610774565b6102937f1d46dada6ac47de84b1e7381a753499bde9d44cc2b9eacc1ba89f2ac24be16cc81565b61029360fd5481565b610311610409366004613492565b610788565b61022361041c3660046134b4565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610293600081565b61024b61045d3660046134e4565b6107a7565b61029360fe5481565b6102936104793660046133a9565b610901565b610133546001600160a01b0316610311565b61024b61049e3660046134b4565b610918565b61024b6104b1366004613475565b61093d565b6102937f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b61024b6104eb366004613572565b610951565b61024b6104fe3660046135bc565b6109cf565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f5a05180f000000000000000000000000000000000000000000000000000000001480610559575061055982610a68565b92915050565b7f541943c4a49765b7940b4b1392c4b1f8ede6efd4e23572572987ae02e569a78661058981610ae6565b61059282610af7565b5050565b61059e610b7a565b6105926105a9610bd0565b8383610bdf565b7f541943c4a49765b7940b4b1392c4b1f8ede6efd4e23572572987ae02e569a7866105da81610ae6565b61059282610da1565b7f541943c4a49765b7940b4b1392c4b1f8ede6efd4e23572572987ae02e569a78661060d81610ae6565b6106178383610e4f565b505050565b60008281526065602052604090206001015461063781610ae6565b6106178383610f2c565b610649610bd0565b6001600160a01b0316816001600160a01b0316146106d45760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b6105928282610f4e565b60006106e981610ae6565b61059282610f70565b7f541943c4a49765b7940b4b1392c4b1f8ede6efd4e23572572987ae02e569a78661071c81610ae6565b61072461101e565b50565b600061055982610133546001600160a01b0391821691161490565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a61076c81610ae6565b610724611077565b600061077f81610ae6565b610592826110b6565b60008281526097602052604081206107a09083611164565b9392505050565b600054610100900460ff16158080156107c75750600054600160ff909116105b806107e15750303b1580156107e1575060005460ff166001145b6108535760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016106cb565b6000805460ff191660011790558015610876576000805461ff0019166101001790555b61087f88611170565b6108876111e4565b61088f61124f565b61089b878787876112c7565b6108a5838361134e565b6108b060008a610f2c565b80156108f6576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050565b6000818152609760205260408120610559906113cb565b60008281526065602052604090206001015461093381610ae6565b6106178383610f4e565b600061094881610ae6565b610592826113d5565b61095e6020830183613475565b6001600160a01b031661096f610bd0565b6001600160a01b0316146109c55760405162461bcd60e51b815260206004820152600960248201527f6e6f74206d616b6572000000000000000000000000000000000000000000000060448201526064016106cb565b61059282826114d1565b7f1d46dada6ac47de84b1e7381a753499bde9d44cc2b9eacc1ba89f2ac24be16cc6109f981610ae6565b610a01610b7a565b6001600160a01b038416610a575760405162461bcd60e51b815260206004820152600e60248201527f696e76616c69642073656e64657200000000000000000000000000000000000060448201526064016106cb565b610a62848484610bdf565b50505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061055957506301ffc9a760e01b7fffffffff00000000000000000000000000000000000000000000000000000000831614610559565b61072481610af2610bd0565b6115d3565b60008111610b475760405162461bcd60e51b815260206004820152601060248201527f696e76616c6964207175616e746974790000000000000000000000000000000060448201526064016106cb565b60ca81905560405181907fa461ccf4a7e6996574f5a69258032896cd5082cf3264467d1b8875a3f98538d790600090a250565b6101655460ff1615610bce5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016106cb565b565b6000610bda611648565b905090565b8080610c2d5760405162461bcd60e51b815260206004820152601d60248201527f45786368616e67654d617463682063616e6e6f7420626520656d70747900000060448201526064016106cb565b60ca54811115610c7f5760405162461bcd60e51b815260206004820152601660248201527f746f6f206d616e792045786368616e67654d617463680000000000000000000060448201526064016106cb565b60005b81811015610d9a5736848483818110610c9d57610c9d613611565b9050602002810190610caf9190613627565b9050610d6786610cbf8380613665565b610cc89061383c565b610cd560208501856138ec565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610d17925050506040860186613665565b610d209061383c565b610d2d60608701876138ec565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061165292505050565b610d8786610d758380613665565b610d826040850185613665565b611844565b5080610d9281613949565b915050610c82565b5050505050565b6001600160a01b038116610df75760405162461bcd60e51b815260206004820152601c60248201527f696e76616c69642064656661756c74206665652072656365697665720000000060448201526064016106cb565b610100805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f5d039c612419cd7b6696e7d5c8ccaef3362188cc98db01e07fb55bb85b33541d90600090a250565b6113888210610ea05760405162461bcd60e51b815260206004820152601360248201527f696e76616c6964207072696d617279206665650000000000000000000000000060448201526064016106cb565b6113888110610ef15760405162461bcd60e51b815260206004820152601560248201527f696e76616c6964207365636f6e6461727920666565000000000000000000000060448201526064016106cb565b60fd82905560fe819055604051819083907ffa4067f2d0249edb7594284cabb394f2ec0e4f6168dbd1e3a63f861b67f1188f90600090a35050565b610f368282611947565b600082815260976020526040902061061790826119ea565b610f5882826119ff565b60008281526097602052604090206106179082611aa0565b6001600160a01b0381163b610fc75760405162461bcd60e51b815260206004820152601a60248201527f696e76616c696420526f79616c7469657320526567697374727900000000000060448201526064016106cb565b60ff805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f6932f02a24181a8c1b9fa7bdc7453f15ecba05c354c9da94e97bac1abb13397890600090a250565b611026611ab5565b610165805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61105a610bd0565b6040516001600160a01b03909116815260200160405180910390a1565b61107f610b7a565b610165805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861105a610bd0565b6001600160a01b0381163b61110d5760405162461bcd60e51b815260206004820152601760248201527f696e76616c6964206f726465722076616c696461746f7200000000000000000060448201526064016106cb565b60c9805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517ff605132f819f46ab9f362495c159c83b8a080f3b8b22f8a684018837eae0bed390600090a250565b60006107a08383611b08565b600054610100900460ff166111db5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106cb565b610724816113d5565b600054610100900460ff16610bce5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106cb565b600054610100900460ff166112ba5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106cb565b610165805460ff19169055565b600054610100900460ff166113325760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106cb565b61133c8484610e4f565b61134582610da1565b610a6281610f70565b600054610100900460ff166113b95760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106cb565b6113c2826110b6565b61059281610af7565b6000610559825490565b610133546001600160a01b039081169082160361145a5760405162461bcd60e51b815260206004820152603060248201527f4552433237373148616e646c65725570677261646561626c653a20666f72776160448201527f7264657220616c7265616479207365740000000000000000000000000000000060648201526084016106cb565b611462610bd0565b610133546040516001600160a01b03928316928481169216907f8ca022029d8ff7ad974913f8970aeed6c5e0e7eaf494a0c5b262249f6b5759e590600090a4610133805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b81608001356000036115255760405162461bcd60e51b815260206004820152601460248201527f302073616c742063616e2774206265207573656400000000000000000000000060448201526064016106cb565b600061153083611b32565b90508181146115815760405162461bcd60e51b815260206004820152601160248201527f696e76616c6964206f726465724861736800000000000000000000000000000060448201526064016106cb565b600082815260cb60205260409081902060001990555182907f34e97b51b26b1b4b5889b90f9702b02688ef22aaf1679d0d697a7518de60abfa906115c6908690613afc565b60405180910390a2505050565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff166105925761160681611bc3565b611611836020611bd5565b604051602001611622929190613b33565b60408051601f198184030181529082905262461bcd60e51b82526106cb91600401613be0565b6000610bda611dfe565b60c9546040517fb45230ec0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063b45230ec9061169f90879087908a90600401613c35565b60006040518083038186803b1580156116b757600080fd5b505afa1580156116cb573d6000803e3d6000fd5b505060c9546040517fb45230ec0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116925063b45230ec915061171c90859085908a90600401613c35565b60006040518083038186803b15801561173457600080fd5b505afa158015611748573d6000803e3d6000fd5b5050505060408401516001600160a01b0316156117c85783604001516001600160a01b031682600001516001600160a01b0316146117c85760405162461bcd60e51b815260206004820152601660248201527f6c6566744f726465722e74616b6572206661696c65640000000000000000000060448201526064016106cb565b60408201516001600160a01b031615610d9a5783600001516001600160a01b031682604001516001600160a01b031614610d9a5760405162461bcd60e51b815260206004820152601760248201527f72696768744f726465722e74616b6572206661696c656400000000000000000060448201526064016106cb565b600061187c6118566020850185613cfb565b6118609080613cfb565b61186d6060850185613cfb565b6118779080613cfb565b611e52565b905060006118a76118906060860186613cfb565b61189a9080613cfb565b61186d6020860186613cfb565b905060006118b686868661206e565b6040805160808101825290810185815282516060830152815290915061193f906020808201906118e890890189613475565b6001600160a01b031690526040805160808101825290810185815260208581015160608401529082528082019061192190890189613475565b6001600160a01b031690528551855161193a91906121ec565b612277565b505050505050565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff166105925760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556119a6610bd0565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006107a0836001600160a01b03841661237c565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff16156105925760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19169055611a5c610bd0565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60006107a0836001600160a01b0384166123cb565b6101655460ff16610bce5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016106cb565b6000826000018281548110611b1f57611b1f613611565b9060005260206000200154905092915050565b6000611b416020830183613475565b611b69611b516020850185613cfb565b611b5b9080613cfb565b611b6490613d11565b6124be565b611b79611b516060860186613cfb565b604080516001600160a01b03909416602085015283019190915260608201526080808401359082015260a0015b604051602081830303815290604052805190602001209050919050565b60606105596001600160a01b03831660145b60606000611be4836002613d1d565b611bef906002613d34565b67ffffffffffffffff811115611c0757611c07613699565b6040519080825280601f01601f191660200182016040528015611c31576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611c6857611c68613611565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611ccb57611ccb613611565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000611d07846002613d1d565b611d12906001613d34565b90505b6001811115611daf577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611d5357611d53613611565b1a60f81b828281518110611d6957611d69613611565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93611da881613d47565b9050611d15565b5083156107a05760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106cb565b610133546000906001600160a01b031633148015611e1d575060143610155b15611e4d57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c90565b503390565b6040805180820190915260008152606060208201526000611e766020850185613d5e565b90506000611e876020850185613d5e565b90506000826003811115611e9d57611e9d613982565b03611eea5760405162461bcd60e51b815260206004820152601860248201527f696e76616c6964206c65667420617373657420636c617373000000000000000060448201526064016106cb565b6000816003811115611efe57611efe613982565b03611f4b5760405162461bcd60e51b815260206004820152601960248201527f696e76616c696420726967687420617373657420636c6173730000000000000060448201526064016106cb565b806003811115611f5d57611f5d613982565b826003811115611f6f57611f6f613982565b14611fbc5760405162461bcd60e51b815260206004820152601260248201527f61737365747320646f6e2774206d61746368000000000000000000000000000060448201526064016106cb565b6000611fcb60208701876138ec565b604051611fd9929190613d79565b60405190819003902090506000611ff360208701876138ec565b604051612001929190613d79565b6040518091039020905080821461205a5760405162461bcd60e51b815260206004820152601260248201527f61737365747320646f6e2774206d61746368000000000000000000000000000060448201526064016106cb565b61206387613d11565b979650505050505050565b6040805180820190915260008082526020820152600061208d84611b32565b9050600061209a84611b32565b905060006120ac866080013584612500565b905060006120be866080013584612500565b90506120cc87878484612527565b9450600085602001511180156120e25750845115155b61212e5760405162461bcd60e51b815260206004820152600f60248201527f6e6f7468696e6720746f2066696c6c000000000000000000000000000000000060448201526064016106cb565b6080870135156121575760208501516121479083613d34565b600085815260cb60205260409020555b60808601351561217d57845161216d9082613d34565b600084815260cb60205260409020555b600084815260cb60205260408082205485835291819020549051859287926001600160a01b038d16927f5f1f72885b9f262a0908dfcb03271aa93b00aa85f8105a1617f08c7a52192f50926121d9928e928e928e929091613d89565b60405180910390a4505050509392505050565b6000600183600381111561220257612202613982565b1480156122215750600182600381111561221e5761221e613982565b14155b1561222e57506001610559565b600182600381111561224257612242613982565b1480156122615750600183600381111561225e5761225e613982565b14155b1561226e57506002610559565b50600092915050565b6122b06040805160c081018252600060808201818152606060a08401819052938301908152928201529081908152600060209091015290565b6122e96040805160c081018252600060808201818152606060a08401819052938301908152928201529081908152600060209091015290565b60018360028111156122fd576122fd613982565b0361230c575083905082612312565b50829050835b6123298160000151826020015184602001516125d7565b600083600281111561233d5761233d613982565b148061235157506123518260200151612800565b156123725761236d8260000151836020015183602001516125d7565b610d9a565b610d9a8282612840565b60008181526001830160205260408120546123c357508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610559565b506000610559565b600081815260018301602052604081205480156124b45760006123ef600183613dd6565b855490915060009061240390600190613dd6565b905081811461246857600086600001828154811061242357612423613611565b906000526020600020015490508087600001848154811061244657612446613611565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061247957612479613de9565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610559565b6000915050610559565b8051602080830151805190820120604051600093611ba6937f75aacb2727a36600741802d07994792d9d768ee841822bca87180d320cea991293919201613dff565b60008260000361251257506000610559565b50600090815260cb6020526040902054919050565b604080518082019091526000808252602082015260008061254887866128df565b9150915060008061255988876128df565b915091508381111561259c57612591848461257760208c018c613cfb565b6020013561258860608d018d613cfb565b60200135612994565b9450505050506125cf565b6125c86125ac60208b018b613cfb565b602001356125bd60608c018c613cfb565b602001358484612a20565b9450505050505b949350505050565b600183515160038111156125ed576125ed613982565b036126135760006126018460000151612aad565b9050610a628184848760200151612ac7565b6002835151600381111561262957612629613982565b036127165760008061263e8560000151612b4f565b9150915084602001516001146126965760405162461bcd60e51b815260206004820152601260248201527f6572633732312076616c7565206572726f72000000000000000000000000000060448201526064016106cb565b6040517f42842e0e0000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301528481166024830152604482018390528316906342842e0e906064015b600060405180830381600087803b15801561270257600080fd5b505af11580156108f6573d6000803e3d6000fd5b6003835151600381111561272c5761272c613982565b036127b8576000806127418560000151612b4f565b60208701516040517ff242432a0000000000000000000000000000000000000000000000000000000081526001600160a01b038881166004830152878116602483015260448201849052606482019290925260a06084820152600060a482015292945090925083169063f242432a9060c4016126e8565b60405162461bcd60e51b815260206004820152601360248201527f696e76616c696420617373657420636c6173730000000000000000000000000060448201526064016106cb565b6001600160a01b03811660009081527f90916b45ad713ccdf8d945eab9f58d0d1cfed58f8e47d57192d063a0ddbfe292602052604081205460ff16610559565b81516020015160009061285283612b73565b156128615760fd549150612874565b60fe549150612871818585612bb9565b90505b6000821180156128845750600081115b156128aa57610100546128a790829086906001600160a01b031685612710612d60565b90505b8015610a6257610a626040518060400160405280866000015160000151815260200183815250856020015185602001516125d7565b600080826128f06060860186613cfb565b6020013510156129425760405162461bcd60e51b815260206004820152601f60248201527f66696c6c696e67206d6f7265207468616e206f72646572207065726d6974730060448201526064016106cb565b826129506060860186613cfb565b6020013561295e9190613dd6565b905061298b6129706020860186613cfb565b602001356129816060870187613cfb565b6020013583612dec565b91509250929050565b604080518082019091526000808252602082015260006129b5858585612dec565b905085811115612a075760405162461bcd60e51b815260206004820152601860248201527f66696c6c4c6566743a20756e61626c6520746f2066696c6c000000000000000060448201526064016106cb565b5050604080518082019091529384525050602082015290565b60408051808201909152600080825260208201526000612a41838787612dec565b905083811115612a935760405162461bcd60e51b815260206004820152601960248201527f66696c6c52696768743a20756e61626c6520746f2066696c6c0000000000000060448201526064016106cb565b604080518082019091529283526020830152509392505050565b600081602001518060200190518101906105599190613e21565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052610a62908590612e5b565b6000808260200151806020019051810190612b6a9190613e3e565b91509150915091565b8051516000908190612b8490612f43565b90506001600160a01b038116158015906107a05750806001600160a01b031683602001516001600160a01b0316149392505050565b6000806000612bcf846000015160000151612b4f565b60ff546040517f9ca7dc7a0000000000000000000000000000000000000000000000000000000081526001600160a01b038085166004830152602482018490529395509193506000921690639ca7dc7a906044016000604051808303816000875af1158015612c42573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612c6a9190810190613e6c565b8051909150600090815b81811015612d00576000848281518110612c9057612c90613611565b60200260200101519050806020015184612caa9190613d34565b935088602001516001600160a01b031681600001516001600160a01b031603612cd35750612cee565b612cea8b8b83600001518460200151612710612d60565b9a50505b80612cf881613949565b915050612c74565b50611388821115612d535760405162461bcd60e51b815260206004820152601d60248201527f726f79616c746965732061726520746f6f206869676820283e3530252900000060448201526064016106cb565b5096979650505050505050565b604080518082019091528451518152600060208083018290528651015190919082908490612d8f908790613d1d565b612d999190613f4d565b905080881115612dbb57612dad8189613dd6565b602083018290529750612dc7565b60208201979097526000965b602082015115612de057612de0828860200151886125d7565b50959695505050505050565b6000612df984848461301a565b15612e465760405162461bcd60e51b815260206004820152600e60248201527f726f756e64696e67206572726f7200000000000000000000000000000000000060448201526064016106cb565b82612e518386613d1d565b6125cf9190613f4d565b6000612eb0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166130ba9092919063ffffffff16565b9050805160001480612ed1575080806020019051810190612ed19190613f6f565b6106175760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016106cb565b6000806000612f5184612b4f565b9092509050612f896001600160a01b0383167fa30b4db9000000000000000000000000000000000000000000000000000000006130c9565b15613013576040517fa30b4db9000000000000000000000000000000000000000000000000000000008152600481018290526001600160a01b0383169063a30b4db990602401602060405180830381865afa158015612fec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130109190613e21565b92505b5050919050565b60008260000361306c5760405162461bcd60e51b815260206004820152601060248201527f6469766973696f6e206279207a65726f0000000000000000000000000000000060448201526064016106cb565b811580613077575083155b15613084575060006107a0565b6000838061309457613094613f37565b85840990506130a38386613d1d565b6130af6103e883613d1d565b101595945050505050565b60606125cf84846000856130e5565b60006130d4836131cc565b80156107a057506107a08383613217565b60608247101561315d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016106cb565b600080866001600160a01b031685876040516131799190613f91565b60006040518083038185875af1925050503d80600081146131b6576040519150601f19603f3d011682016040523d82523d6000602084013e6131bb565b606091505b5091509150612063878383876132c9565b60006131df826301ffc9a760e01b613217565b80156105595750613210827fffffffff00000000000000000000000000000000000000000000000000000000613217565b1592915050565b604080517fffffffff000000000000000000000000000000000000000000000000000000008316602480830191909152825180830390910181526044909101909152602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b178152825160009392849283928392918391908a617530fa92503d915060005190508280156132b6575060208210155b8015612063575015159695505050505050565b60608315613338578251600003613331576001600160a01b0385163b6133315760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106cb565b50816125cf565b6125cf838381511561334d5781518083602001fd5b8060405162461bcd60e51b81526004016106cb9190613be0565b60006020828403121561337957600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146107a057600080fd5b6000602082840312156133bb57600080fd5b5035919050565b60008083601f8401126133d457600080fd5b50813567ffffffffffffffff8111156133ec57600080fd5b6020830191508360208260051b850101111561340757600080fd5b9250929050565b6000806020838503121561342157600080fd5b823567ffffffffffffffff81111561343857600080fd5b613444858286016133c2565b90969095509350505050565b6001600160a01b038116811461072457600080fd5b803561347081613450565b919050565b60006020828403121561348757600080fd5b81356107a081613450565b600080604083850312156134a557600080fd5b50508035926020909101359150565b600080604083850312156134c757600080fd5b8235915060208301356134d981613450565b809150509250929050565b600080600080600080600080610100898b03121561350157600080fd5b883561350c81613450565b9750602089013561351c81613450565b96506040890135955060608901359450608089013561353a81613450565b935060a089013561354a81613450565b925060c089013561355a81613450565b8092505060e089013590509295985092959890939650565b6000806040838503121561358557600080fd5b823567ffffffffffffffff81111561359c57600080fd5b830160e081860312156135ae57600080fd5b946020939093013593505050565b6000806000604084860312156135d157600080fd5b83356135dc81613450565b9250602084013567ffffffffffffffff8111156135f857600080fd5b613604868287016133c2565b9497909650939450505050565b634e487b7160e01b600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8183360301811261365b57600080fd5b9190910192915050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2183360301811261365b57600080fd5b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156136d2576136d2613699565b60405290565b60405160e0810167ffffffffffffffff811182821017156136d2576136d2613699565b604051601f8201601f1916810167ffffffffffffffff8111828210171561372457613724613699565b604052919050565b80356004811061347057600080fd5b60006040828403121561374d57600080fd5b6137556136af565b90506137608261372c565b815260208083013567ffffffffffffffff8082111561377e57600080fd5b818501915085601f83011261379257600080fd5b8135818111156137a4576137a4613699565b6137b684601f19601f840116016136fb565b915080825286848285010111156137cc57600080fd5b80848401858401376000908201840152918301919091525092915050565b6000604082840312156137fc57600080fd5b6138046136af565b9050813567ffffffffffffffff81111561381d57600080fd5b6138298482850161373b565b8252506020820135602082015292915050565b600060e0823603121561384e57600080fd5b6138566136d8565b61385f83613465565b8152602083013567ffffffffffffffff8082111561387c57600080fd5b613888368387016137ea565b602084015261389960408601613465565b604084015260608501359150808211156138b257600080fd5b506138bf368286016137ea565b6060830152506080830135608082015260a083013560a082015260c083013560c082015280915050919050565b6000808335601e1984360301811261390357600080fd5b83018035915067ffffffffffffffff82111561391e57600080fd5b60200191503681900382131561340757600080fd5b634e487b7160e01b600052601160045260246000fd5b6000600019820361395c5761395c613933565b5060010190565b60008235603e1983360301811261397957600080fd5b90910192915050565b634e487b7160e01b600052602160045260246000fd5b600481106139b657634e487b7160e01b600052602160045260246000fd5b9052565b60006139c68283613963565b604084526139df604085016139da8361372c565b613998565b6020810135601e198236030181126139f657600080fd5b0160208101903567ffffffffffffffff811115613a1257600080fd5b803603821315613a2157600080fd5b60406060860152806080860152808260a0870137600060a082870101526020840135602086015260a0601f19601f8301168601019250505092915050565b60008135613a6c81613450565b6001600160a01b038082168552613a866020850185613963565b915060e06020860152613a9c60e08601836139ba565b91506040840135613aac81613450565b166040850152613abf6060840184613963565b8482036060860152613ad182826139ba565b9150506080830135608085015260a083013560a085015260c083013560c08501528091505092915050565b6020815260006107a06020830184613a5f565b60005b83811015613b2a578181015183820152602001613b12565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613b6b816017850160208801613b0f565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351613ba8816028840160208801613b0f565b01602801949350505050565b60008151808452613bcc816020860160208601613b0f565b601f01601f19169290920160200192915050565b6020815260006107a06020830184613bb4565b6000815160408452613c09604085018251613998565b6020015160406060850152613c216080850182613bb4565b602093840151949093019390935250919050565b6060815260006001600160a01b03808651166060840152602086015160e06080850152613c66610140850182613bf3565b604088015190921660a08501525060608601518382037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa00160c085015290613cae8183613bf3565b915050608086015160e084015260a086015161010084015260c08601516101208401528281036020840152613ce38186613bb4565b9150506125cf60408301846001600160a01b03169052565b60008235603e1983360301811261365b57600080fd5b6000610559368361373b565b808202811582820484141761055957610559613933565b8082018082111561055957610559613933565b600081613d5657613d56613933565b506000190190565b600060208284031215613d7057600080fd5b6107a08261372c565b8183823760009101908152919050565b60c081526000613d9c60c0830188613a5f565b8281036020840152613dae8188613a5f565b8651604085015260209096015160608401525050608081019290925260a09091015292915050565b8181038181111561055957610559613933565b634e487b7160e01b600052603160045260246000fd5b83815260608101613e136020830185613998565b826040830152949350505050565b600060208284031215613e3357600080fd5b81516107a081613450565b60008060408385031215613e5157600080fd5b8251613e5c81613450565b6020939093015192949293505050565b60006020808385031215613e7f57600080fd5b825167ffffffffffffffff80821115613e9757600080fd5b818501915085601f830112613eab57600080fd5b815181811115613ebd57613ebd613699565b613ecb848260051b016136fb565b818152848101925060069190911b830184019087821115613eeb57600080fd5b928401925b818410156120635760408489031215613f095760008081fd5b613f116136af565b8451613f1c81613450565b81528486015186820152835260409093019291840191613ef0565b634e487b7160e01b600052601260045260246000fd5b600082613f6a57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215613f8157600080fd5b815180151581146107a057600080fd5b6000825161365b818460208701613b0f56fea26469706673582212204fb4aef3d7226e3c51717ee1c7bd8270f126087fe0a8b6b0ed8c1147686fcfad64736f6c63430008130033",
  "devdoc": {
    "author": "The Sandbox",
    "details": "Main functions are in ExchangeCoreTransferManager is used to execute token transfers",
    "events": {
      "Cancel(bytes32,(address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256))": {
        "params": {
          "order": "The details of the order being canceled.",
          "orderKeyHash": "The hash of the order being canceled."
        }
      },
      "DefaultFeeReceiverSet(address)": {
        "params": {
          "newDefaultFeeReceiver": "address that gets the fees"
        }
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Match(address,bytes32,bytes32,(address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),(address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),(uint256,uint256),uint256,uint256)": {
        "params": {
          "from": "Address that initiated the match.",
          "newFill": "Fill details resulting from the order match.",
          "orderKeyHashLeft": "Hash of the left order.",
          "orderKeyHashRight": "Hash of the right order.",
          "orderLeft": "Details of the left order.",
          "orderRight": "Details of the right order.",
          "totalFillLeft": "Total fill amount for the left order.",
          "totalFillRight": "Total fill amount for the right order."
        }
      },
      "MatchOrdersLimitSet(uint256)": {
        "params": {
          "newMatchOrdersLimit": "The new limit for matching orders in one transaction."
        }
      },
      "OrderValidatorSet(address)": {
        "params": {
          "contractAddress": "Address of the new OrderValidator contract."
        }
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "ProtocolFeeSet(uint256,uint256)": {
        "params": {
          "newProtocolFeePrimary": "fee for primary market",
          "newProtocolFeeSecondary": "fee for secondary market"
        }
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "RoyaltiesRegistrySet(address)": {
        "params": {
          "newRoyaltiesRegistry": "address of new royalties registry"
        }
      },
      "TrustedForwarderSet(address,address,address)": {
        "params": {
          "newTrustedForwarder": "new trusted forwarder",
          "oldTrustedForwarder": "old trusted forwarder",
          "operator": "the sender of the transaction"
        }
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "cancel((address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes32)": {
        "params": {
          "order": "The order to be canceled.",
          "orderKeyHash": "Used as a checksum to avoid mistakes in the order values."
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor",
        "details": "This protects the implementation contract from being initialized."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "getTrustedForwarder()": {
        "returns": {
          "_0": "return the address of the trusted forwarder"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,address,uint256,uint256,address,address,address,uint256)": {
        "params": {
          "admin": "The admin user that can grant/revoke roles, etc.",
          "newDefaultFeeReceiver": "Market fee receiver.",
          "newProtocolFeePrimary": "Protocol fee applied to primary markets.",
          "newProtocolFeeSecondary": "Protocol fee applied to secondary markets.",
          "newRoyaltiesProvider": "Registry for the different types of royalties.",
          "newTrustedForwarder": "Address for the trusted forwarder that will execute meta transactions.",
          "orderValidatorAddress": "New OrderValidator contract address."
        }
      },
      "isTrustedForwarder(address)": {
        "params": {
          "forwarder": "trusted forwarder address to check"
        },
        "returns": {
          "_0": "true if the address is the same as the trusted forwarder"
        }
      },
      "matchOrders(((address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes,(address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes)[])": {
        "params": {
          "matchedOrders": "A list of left/right orders that match each other."
        }
      },
      "matchOrdersFrom(address,((address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes,(address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes)[])": {
        "details": "This method supports ERC1776 native meta transactions.",
        "params": {
          "matchedOrders": "A list of left/right orders that match each other.",
          "sender": "The original sender of the transaction."
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setDefaultFeeReceiver(address)": {
        "params": {
          "newDefaultFeeReceiver": "Address to receive the fees."
        }
      },
      "setMatchOrdersLimit(uint256)": {
        "params": {
          "newMatchOrdersLimit": "New value for max orders that can be matched."
        }
      },
      "setOrderValidatorContract(address)": {
        "params": {
          "contractAddress": "New OrderValidator contract address."
        }
      },
      "setProtocolFee(uint256,uint256)": {
        "params": {
          "newProtocolFeePrimary": "Fee for the primary market.",
          "newProtocolFeeSecondary": "Fee for the secondary market."
        }
      },
      "setRoyaltiesRegistry(address)": {
        "params": {
          "newRoyaltiesRegistry": "Address of the new royalties registry."
        }
      },
      "setTrustedForwarder(address)": {
        "params": {
          "newTrustedForwarder": "The new trusted forwarder address."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "stateVariables": {
      "ERC1776_OPERATOR_ROLE": {
        "return": "Hash for ERC1776_OPERATOR_ROLE.",
        "returns": {
          "_0": "Hash for ERC1776_OPERATOR_ROLE."
        }
      },
      "EXCHANGE_ADMIN_ROLE": {
        "return": "Hash for EXCHANGE_ADMIN_ROLE.",
        "returns": {
          "_0": "Hash for EXCHANGE_ADMIN_ROLE."
        }
      },
      "PAUSER_ROLE": {
        "return": "Hash for PAUSER_ROLE.",
        "returns": {
          "_0": "Hash for PAUSER_ROLE."
        }
      }
    },
    "title": "Exchange contract with meta transactions",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Cancel(bytes32,(address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256))": {
        "notice": "Event emitted when an order is canceled."
      },
      "DefaultFeeReceiverSet(address)": {
        "notice": "Emitted when the default fee receiver is updated."
      },
      "Match(address,bytes32,bytes32,(address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),(address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),(uint256,uint256),uint256,uint256)": {
        "notice": "Event emitted when two orders are matched."
      },
      "MatchOrdersLimitSet(uint256)": {
        "notice": "Event emitted when the match orders limit is updated."
      },
      "OrderValidatorSet(address)": {
        "notice": "Event emitted when a new OrderValidator contract is set."
      },
      "ProtocolFeeSet(uint256,uint256)": {
        "notice": "Emitted when protocol fees are updated."
      },
      "TrustedForwarderSet(address,address,address)": {
        "notice": "Emitted when a `newTrustedForwarder` is set, replacing the `oldTrustedForwarder`"
      }
    },
    "kind": "user",
    "methods": {
      "ERC1776_OPERATOR_ROLE()": {
        "notice": "Role for ERC1776 trusted meta transaction contracts (like SAND)."
      },
      "EXCHANGE_ADMIN_ROLE()": {
        "notice": "Role for business addresses that can change values like fees and royalties."
      },
      "PAUSER_ROLE()": {
        "notice": "Role for business addresses that can react to emergencies and pause."
      },
      "cancel((address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes32)": {
        "notice": "Cancel an order."
      },
      "defaultFeeReceiver()": {
        "notice": "Default receiver of protocol fees"
      },
      "getTrustedForwarder()": {
        "notice": "return the address of the trusted forwarder"
      },
      "initialize(address,address,uint256,uint256,address,address,address,uint256)": {
        "notice": "Exchange contract initializer."
      },
      "isTrustedForwarder(address)": {
        "notice": "return true if the forwarder is the trusted forwarder"
      },
      "matchOrders(((address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes,(address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes)[])": {
        "notice": "Match orders and transact."
      },
      "matchOrdersFrom(address,((address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes,(address,((uint8,bytes),uint256),address,((uint8,bytes),uint256),uint256,uint256,uint256),bytes)[])": {
        "notice": "Match orders and transact."
      },
      "pause()": {
        "notice": "Pause the contract operations."
      },
      "protocolFeePrimary()": {
        "notice": "Fee applied to primary sales."
      },
      "protocolFeeSecondary()": {
        "notice": "Fee applied to secondary sales."
      },
      "royaltiesRegistry()": {
        "notice": "Registry for the different royalties"
      },
      "setDefaultFeeReceiver(address)": {
        "notice": "Set the default fee receiver."
      },
      "setMatchOrdersLimit(uint256)": {
        "notice": "Set the limit for matching orders."
      },
      "setOrderValidatorContract(address)": {
        "notice": "Set the OrderValidator address."
      },
      "setProtocolFee(uint256,uint256)": {
        "notice": "Set the protocol fees."
      },
      "setRoyaltiesRegistry(address)": {
        "notice": "Set the royalty registry."
      },
      "setTrustedForwarder(address)": {
        "notice": "Change the address of the trusted forwarder for meta-transactions."
      },
      "unpause()": {
        "notice": "Resume the contract operations."
      }
    },
    "notice": "Used to exchange assets, that is, tokens.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 783,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/Exchange.sol:Exchange",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 786,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/Exchange.sol:Exchange",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2171,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/Exchange.sol:Exchange",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3390,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/Exchange.sol:Exchange",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 211,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/Exchange.sol:Exchange",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)206_storage)"
      },
      {
        "astId": 506,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/Exchange.sol:Exchange",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 60,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/Exchange.sol:Exchange",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)4700_storage)"
      },
      {
        "astId": 170,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/Exchange.sol:Exchange",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5632,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/Exchange.sol:Exchange",
        "label": "orderValidator",
        "offset": 0,
        "slot": "201",
        "type": "t_contract(IOrderValidator)8328"
      },
      {
        "astId": 5635,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/Exchange.sol:Exchange",
        "label": "matchOrdersLimit",
        "offset": 0,
        "slot": "202",
        "type": "t_uint256"
      },
      {
        "astId": 5640,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/Exchange.sol:Exchange",
        "label": "fills",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 6174,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/Exchange.sol:Exchange",
        "label": "__gap",
        "offset": 0,
        "slot": "204",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7295,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/Exchange.sol:Exchange",
        "label": "protocolFeePrimary",
        "offset": 0,
        "slot": "253",
        "type": "t_uint256"
      },
      {
        "astId": 7298,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/Exchange.sol:Exchange",
        "label": "protocolFeeSecondary",
        "offset": 0,
        "slot": "254",
        "type": "t_uint256"
      },
      {
        "astId": 7302,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/Exchange.sol:Exchange",
        "label": "royaltiesRegistry",
        "offset": 0,
        "slot": "255",
        "type": "t_contract(IRoyaltiesProvider)8352"
      },
      {
        "astId": 7305,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/Exchange.sol:Exchange",
        "label": "defaultFeeReceiver",
        "offset": 0,
        "slot": "256",
        "type": "t_address"
      },
      {
        "astId": 7989,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/Exchange.sol:Exchange",
        "label": "__gap",
        "offset": 0,
        "slot": "257",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5114,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/Exchange.sol:Exchange",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "307",
        "type": "t_address"
      },
      {
        "astId": 5225,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/Exchange.sol:Exchange",
        "label": "__gap",
        "offset": 0,
        "slot": "308",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 966,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/Exchange.sol:Exchange",
        "label": "_paused",
        "offset": 0,
        "slot": "357",
        "type": "t_bool"
      },
      {
        "astId": 1071,
        "contract": "@sandbox-smart-contracts/marketplace/contracts/Exchange.sol:Exchange",
        "label": "__gap",
        "offset": 0,
        "slot": "358",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IOrderValidator)8328": {
        "encoding": "inplace",
        "label": "contract IOrderValidator",
        "numberOfBytes": "20"
      },
      "t_contract(IRoyaltiesProvider)8352": {
        "encoding": "inplace",
        "label": "contract IRoyaltiesProvider",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)4700_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)4700_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)206_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)206_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)4700_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 4699,
            "contract": "@sandbox-smart-contracts/marketplace/contracts/Exchange.sol:Exchange",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)4385_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)206_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 203,
            "contract": "@sandbox-smart-contracts/marketplace/contracts/Exchange.sol:Exchange",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 205,
            "contract": "@sandbox-smart-contracts/marketplace/contracts/Exchange.sol:Exchange",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)4385_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 4380,
            "contract": "@sandbox-smart-contracts/marketplace/contracts/Exchange.sol:Exchange",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4384,
            "contract": "@sandbox-smart-contracts/marketplace/contracts/Exchange.sol:Exchange",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}