{
  "address": "0x2c0521ea8B94bdFBc981621a7bFDc3314a2C8426",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "enum SignedMultiGiveawayBase.TokenType",
              "name": "tokenType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct SignedMultiGiveawayBase.ClaimEntry[]",
          "name": "claims",
          "type": "tuple[]"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "AssetsRecovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "claimIds",
          "type": "uint256[]"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "enum SignedMultiGiveawayBase.TokenType",
              "name": "tokenType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct SignedMultiGiveawayBase.ClaimEntry[]",
          "name": "claims",
          "type": "tuple[]"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "EIP712DomainChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "maxClaimEntries",
          "type": "uint128"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "MaxClaimEntriesSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxWeiPerClaim",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "MaxWeiPerClaimSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "numberOfSignaturesNeeded",
          "type": "uint128"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "NumberOfSignaturesNeededSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "claimIds",
          "type": "uint256[]"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "RevokedClaims",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldTrustedForwarder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newTrustedForwarder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "TrustedForwarderSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BACKOFFICE_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CLAIM_ENTRY_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CLAIM_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SIGNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "v",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes32",
                  "name": "r",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "s",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct SignedMultiGiveawayBase.Signature[]",
              "name": "sigs",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256[]",
              "name": "claimIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "expiration",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "enum SignedMultiGiveawayBase.TokenType",
                  "name": "tokenType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct SignedMultiGiveawayBase.ClaimEntry[]",
              "name": "claims",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct SignedMultiGiveaway.BatchClaimData[]",
          "name": "batch",
          "type": "tuple[]"
        }
      ],
      "name": "batchClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SignedMultiGiveawayBase.Signature[]",
          "name": "sigs",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256[]",
          "name": "claimIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "enum SignedMultiGiveawayBase.TokenType",
              "name": "tokenType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct SignedMultiGiveawayBase.ClaimEntry[]",
          "name": "claims",
          "type": "tuple[]"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "domainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eip712Domain",
      "outputs": [
        {
          "internalType": "bytes1",
          "name": "fields",
          "type": "bytes1"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "verifyingContract",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "extensions",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxClaimEntries",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getMaxWeiPerClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfSignaturesNeeded",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "claimId",
          "type": "uint256"
        }
      ],
      "name": "isClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "enum SignedMultiGiveawayBase.TokenType",
              "name": "tokenType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct SignedMultiGiveawayBase.ClaimEntry[]",
          "name": "claims",
          "type": "tuple[]"
        }
      ],
      "name": "recoverAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "claimIds",
          "type": "uint256[]"
        }
      ],
      "name": "revokeClaims",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "maxClaimEntries",
          "type": "uint128"
        }
      ],
      "name": "setMaxClaimEntries",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxWeiPerClaim",
          "type": "uint256"
        }
      ],
      "name": "setMaxWeiPerClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "numberOfSignaturesNeeded",
          "type": "uint128"
        }
      ],
      "name": "setNumberOfSignaturesNeeded",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newForwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SignedMultiGiveawayBase.Signature",
          "name": "sig",
          "type": "tuple"
        },
        {
          "internalType": "uint256[]",
          "name": "claimIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "enum SignedMultiGiveawayBase.TokenType",
              "name": "tokenType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct SignedMultiGiveawayBase.ClaimEntry[]",
          "name": "claims",
          "type": "tuple[]"
        }
      ],
      "name": "verifySignature",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa33f52a6131e0356dd20eef5ce9fa6d88bb4d2af6a00fb0e6e153b2eb7ce8df4",
  "receipt": {
    "to": null,
    "from": "0x7074BB056C53ACC0b6091dd3FAe591aa3A4acC88",
    "contractAddress": "0x2c0521ea8B94bdFBc981621a7bFDc3314a2C8426",
    "transactionIndex": 57,
    "gasUsed": "3943364",
    "logsBloom": "0x0000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000800000000000000000000100000000000000000000000000000000000000000000000000000000000080000000000000000040000000040000000000000000000000000000000080000000000000000000200000000000000008000000000400000000000000000000000000000000004000000000000000000001000000040000000000000000000000120000000000004000000000000000000000000000000000000800000000001000000000100000",
    "blockHash": "0x6ebd26b4a22401248fa0418f08744dcf13da906af938a4082be7f1d1b57b7ef3",
    "transactionHash": "0xa33f52a6131e0356dd20eef5ce9fa6d88bb4d2af6a00fb0e6e153b2eb7ce8df4",
    "logs": [
      {
        "transactionIndex": 57,
        "blockNumber": 47454717,
        "transactionHash": "0xa33f52a6131e0356dd20eef5ce9fa6d88bb4d2af6a00fb0e6e153b2eb7ce8df4",
        "address": "0x2c0521ea8B94bdFBc981621a7bFDc3314a2C8426",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 285,
        "blockHash": "0x6ebd26b4a22401248fa0418f08744dcf13da906af938a4082be7f1d1b57b7ef3"
      },
      {
        "transactionIndex": 57,
        "blockNumber": 47454717,
        "transactionHash": "0xa33f52a6131e0356dd20eef5ce9fa6d88bb4d2af6a00fb0e6e153b2eb7ce8df4",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000007074bb056c53acc0b6091dd3fae591aa3a4acc88",
          "0x0000000000000000000000009ead03f7136fc6b4bdb0780b00a1c14ae5a8b6d0"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000196f1a76f3f4dac00000000000000000000000000000000000000000000000116813c0f6295331b00000000000000000000000000000000000000000000093182af6e02efc6157d00000000000000000000000000000000000000000000000114ea4a67f355e56f00000000000000000000000000000000000000000000093184465faa5f056329",
        "logIndex": 286,
        "blockHash": "0x6ebd26b4a22401248fa0418f08744dcf13da906af938a4082be7f1d1b57b7ef3"
      }
    ],
    "blockNumber": 47454717,
    "cumulativeGasUsed": "14502065",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "cd1335c00fcad6b6ea8e743b67515779",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum SignedMultiGiveawayBase.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct SignedMultiGiveawayBase.ClaimEntry[]\",\"name\":\"claims\",\"type\":\"tuple[]\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"AssetsRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"claimIds\",\"type\":\"uint256[]\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum SignedMultiGiveawayBase.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct SignedMultiGiveawayBase.ClaimEntry[]\",\"name\":\"claims\",\"type\":\"tuple[]\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"maxClaimEntries\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"MaxClaimEntriesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxWeiPerClaim\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"MaxWeiPerClaimSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"numberOfSignaturesNeeded\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"NumberOfSignaturesNeededSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"claimIds\",\"type\":\"uint256[]\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RevokedClaims\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldTrustedForwarder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTrustedForwarder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"TrustedForwarderSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BACKOFFICE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CLAIM_ENTRY_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CLAIM_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIGNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignedMultiGiveawayBase.Signature[]\",\"name\":\"sigs\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"claimIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum SignedMultiGiveawayBase.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedMultiGiveawayBase.ClaimEntry[]\",\"name\":\"claims\",\"type\":\"tuple[]\"}],\"internalType\":\"struct SignedMultiGiveaway.BatchClaimData[]\",\"name\":\"batch\",\"type\":\"tuple[]\"}],\"name\":\"batchClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignedMultiGiveawayBase.Signature[]\",\"name\":\"sigs\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"claimIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum SignedMultiGiveawayBase.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedMultiGiveawayBase.ClaimEntry[]\",\"name\":\"claims\",\"type\":\"tuple[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxClaimEntries\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getMaxWeiPerClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfSignaturesNeeded\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimId\",\"type\":\"uint256\"}],\"name\":\"isClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum SignedMultiGiveawayBase.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedMultiGiveawayBase.ClaimEntry[]\",\"name\":\"claims\",\"type\":\"tuple[]\"}],\"name\":\"recoverAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"claimIds\",\"type\":\"uint256[]\"}],\"name\":\"revokeClaims\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"maxClaimEntries\",\"type\":\"uint128\"}],\"name\":\"setMaxClaimEntries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWeiPerClaim\",\"type\":\"uint256\"}],\"name\":\"setMaxWeiPerClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"numberOfSignaturesNeeded\",\"type\":\"uint128\"}],\"name\":\"setNumberOfSignaturesNeeded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newForwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignedMultiGiveawayBase.Signature\",\"name\":\"sig\",\"type\":\"tuple\"},{\"internalType\":\"uint256[]\",\"name\":\"claimIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum SignedMultiGiveawayBase.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedMultiGiveawayBase.ClaimEntry[]\",\"name\":\"claims\",\"type\":\"tuple[]\"}],\"name\":\"verifySignature\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The whole contract is split in the base one this implementation to facilitate the reading and splitthe signature checking code.This contract supports meta transactions.This contract is final, don't inherit from it.\",\"events\":{\"AssetsRecovered(address,(uint8,address,bytes)[],address)\":{\"params\":{\"claims\":\"unique claim ids, used by the backend to avoid double spending\",\"operator\":\"the sender of the transaction\",\"to\":\"destination user\"}},\"Claimed(uint256[],address,address,(uint8,address,bytes)[],address)\":{\"params\":{\"claimIds\":\"unique claim ids, used by the backend to avoid double spending\",\"claims\":\"list of tokens to do transfer\",\"from\":\"source user\",\"operator\":\"the sender of the transaction\",\"to\":\"destination user\"}},\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"MaxClaimEntriesSet(uint128,address)\":{\"params\":{\"maxClaimEntries\":\"maximum amount of claim entries per message\",\"operator\":\"the sender of the transaction\"}},\"MaxWeiPerClaimSet(address,uint256,uint256,address)\":{\"params\":{\"maxWeiPerClaim\":\"maximum amount of wei per each individual claim, 0 => check disabled\",\"operator\":\"the sender of the transaction\",\"token\":\"address of the token to configure\",\"tokenId\":\"of the token\"}},\"NumberOfSignaturesNeededSet(uint128,address)\":{\"params\":{\"numberOfSignaturesNeeded\":\"amount of valid signatures needed to claim\",\"operator\":\"the sender of the transaction\"}},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RevokedClaims(uint256[],address)\":{\"params\":{\"claimIds\":\"unique claim ids, used by the backend to avoid double spending\",\"operator\":\"the sender of the transaction\"}},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"TrustedForwarderSet(address,address,address)\":{\"params\":{\"newTrustedForwarder\":\"new trusted forwarder\",\"oldTrustedForwarder\":\"old trusted forwarder\",\"operator\":\"the sender of the transaction\"}},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"batchClaim(((uint8,bytes32,bytes32)[],uint256[],uint256,address,address,(uint8,address,bytes)[])[])\":{\"params\":{\"batch\":\"an array of args to the claim method\"}},\"claim((uint8,bytes32,bytes32)[],uint256[],uint256,address,address,(uint8,address,bytes)[])\":{\"params\":{\"claimIds\":\"unique claim ids, used by the backend to avoid double spending\",\"claims\":\"list of tokens to do transfer\",\"expiration\":\"expiration timestamp\",\"from\":\"source user\",\"sigs\":\"signature part (v,r,s) the array of signatures M in N of M sigs\",\"to\":\"destination user\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\",\"details\":\"this protects the implementation contract from behing initialized.\"},\"domainSeparator()\":{\"returns\":{\"_0\":\"the hash of the domain separator\"}},\"eip712Domain()\":{\"details\":\"See {EIP-5267}. _Available since v4.9._\"},\"getMaxClaimEntries()\":{\"returns\":{\"_0\":\"Maximum amount of claims per message\"}},\"getMaxWeiPerClaim(address,uint256)\":{\"details\":\"even tokenId is kind of inconsistent for tokenType!=ERC1155 it doesn't harm\",\"params\":{\"token\":\"the token contract address\",\"tokenId\":\"if ERC1155 the token id else must be zero\"},\"returns\":{\"_0\":\"maximum amount of wei per each individual claim, 0 => check disabled\"}},\"getNumberOfSignaturesNeeded()\":{\"returns\":{\"_0\":\"number of signatures needed\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"getTrustedForwarder()\":{\"returns\":{\"_0\":\"return the address of the trusted forwarder\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,address)\":{\"params\":{\"admin_\":\"address that have admin access and can assign roles.\",\"trustedForwarder_\":\"address of the ERC2771 trusted forwarder\"}},\"isClaimed(uint256)\":{\"params\":{\"claimId\":\"unique id used to avoid double spending\"},\"returns\":{\"_0\":\"true if claimed\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"trusted forwarder address to check\"},\"returns\":{\"_0\":\"true if the address is the same as the trusted forwarder\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"recoverAssets(address,(uint8,address,bytes)[])\":{\"params\":{\"claims\":\"list of the tokens to transfer\",\"to\":\"destination address of the recovered fund\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeClaims(uint256[])\":{\"params\":{\"claimIds\":\"and array of claim Ids to revoke\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setMaxClaimEntries(uint128)\":{\"params\":{\"maxClaimEntries\":\"maximum number of entries in a claim (amount of transfers) that can be claimed at once\"}},\"setMaxWeiPerClaim(address,uint256,uint256)\":{\"details\":\"even tokenId is kind of inconsistent for tokenType!=ERC1155 it doesn't harm\",\"params\":{\"maxWeiPerClaim\":\"the max amount per each claim, for example 0.01eth per claim\",\"token\":\"the token to which will assign the limit\",\"tokenId\":\"for ERC1155 is the id of the token, else it must be zero\"}},\"setNumberOfSignaturesNeeded(uint128)\":{\"params\":{\"numberOfSignaturesNeeded\":\"number of signatures needed to approve a claim (default to 1)\"}},\"setTrustedForwarder(address)\":{\"details\":\"Change the address of the trusted forwarder for meta-TX\",\"params\":{\"newForwarder\":\"The new trustedForwarder\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"trustedForwarder()\":{\"details\":\"this methods is the same as getTrustedForwarder but used by Biconomy\",\"returns\":{\"_0\":\"return the address of the trusted forwarder\"}},\"verifySignature((uint8,bytes32,bytes32),uint256[],uint256,address,address,(uint8,address,bytes)[])\":{\"params\":{\"claimIds\":\"unique id used to avoid double spending\",\"claims\":\"list of tokens to do transfer\",\"expiration\":\"expiration timestamp\",\"from\":\"source user\",\"sig\":\"signature part (v,r,s)\",\"to\":\"destination user\"},\"returns\":{\"_0\":\"the recovered address must match the signing address\"}}},\"stateVariables\":{\"BACKOFFICE_ROLE\":{\"details\":\"this role is for addresses that help the admin. Can pause the contract, but, only the admin can unpause it.\"},\"_limits\":{\"details\":\"configurable global limits for the contract.\"},\"_perTokenLimitData\":{\"details\":\"limits applied to each claim per token and tokenId (most useful for EIP1155 tokens)Token -> id -> Limit\"}},\"title\":\"This contract gives rewards in any ERC20, ERC721 or ERC1155 when the backend authorizes it via message signing.\",\"version\":1},\"userdoc\":{\"events\":{\"AssetsRecovered(address,(uint8,address,bytes)[],address)\":{\"notice\":\"This event is emitted when assets are recovered from the contract.\"},\"Claimed(uint256[],address,address,(uint8,address,bytes)[],address)\":{\"notice\":\"This event is emitted when a claim occurs.\"},\"MaxClaimEntriesSet(uint128,address)\":{\"notice\":\"This event is emitted when the max entries per claim is set\"},\"MaxWeiPerClaimSet(address,uint256,uint256,address)\":{\"notice\":\"This event is emitted when the max wei per claim is set\"},\"NumberOfSignaturesNeededSet(uint128,address)\":{\"notice\":\"This event is emitted when the number of signatures needed to claim is set\"},\"RevokedClaims(uint256[],address)\":{\"notice\":\"This event is emitted when a claim is revoked.\"},\"TrustedForwarderSet(address,address,address)\":{\"notice\":\"Emitted when a `newTrustedForwarder` is set, replacing the `oldTrustedForwarder`\"}},\"kind\":\"user\",\"methods\":{\"batchClaim(((uint8,bytes32,bytes32)[],uint256[],uint256,address,address,(uint8,address,bytes)[])[])\":{\"notice\":\"does a lot of claims in batch\"},\"claim((uint8,bytes32,bytes32)[],uint256[],uint256,address,address,(uint8,address,bytes)[])\":{\"notice\":\"verifies the ERC712 signatures and transfer tokens from the source user to the destination user.\"},\"domainSeparator()\":{\"notice\":\"EIP712 domain separator\"},\"getMaxClaimEntries()\":{\"notice\":\"get the maximum claim entries per claim\"},\"getMaxWeiPerClaim(address,uint256)\":{\"notice\":\"get maximum Weis that can be claimed at once\"},\"getNumberOfSignaturesNeeded()\":{\"notice\":\"get the needed number of signatures to approve a claim\"},\"getTrustedForwarder()\":{\"notice\":\"return the address of the trusted forwarder\"},\"initialize(address,address)\":{\"notice\":\"initializer method, called during deployment\"},\"isClaimed(uint256)\":{\"notice\":\"return true if already claimed\"},\"isTrustedForwarder(address)\":{\"notice\":\"return true if the forwarder is the trusted forwarder\"},\"pause()\":{\"notice\":\"Triggers stopped state. No more claims are accepted.\"},\"recoverAssets(address,(uint8,address,bytes)[])\":{\"notice\":\"let the admin recover tokens from the contract\"},\"revokeClaims(uint256[])\":{\"notice\":\"let the backoffice role to revoke claims so they cannot be used anymore\"},\"setMaxClaimEntries(uint128)\":{\"notice\":\"set the global limits of the contract\"},\"setMaxWeiPerClaim(address,uint256,uint256)\":{\"notice\":\"set the limits per token and tokenId\"},\"setNumberOfSignaturesNeeded(uint128)\":{\"notice\":\"set the global limits of the contract\"},\"trustedForwarder()\":{\"notice\":\"return the address of the trusted forwarder\"},\"unpause()\":{\"notice\":\"Returns to the normal state. Accept claims.\"},\"verifySignature((uint8,bytes32,bytes32),uint256[],uint256,address,address,(uint8,address,bytes)[])\":{\"notice\":\"verifies a ERC712 signature for the Claim data type.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@sandbox-smart-contracts/giveaway/contracts/SignedMultiGiveaway.sol\":\"SignedMultiGiveaway\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc2dfd6ba9449f61b6b03b262182faf302f093a8c05dd10792aeecb4ed1663c0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xfeefb24d068524440e1ba885efdf105d91f83504af3c2d745ffacc4595396831\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267Upgradeable {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0xe562dab443278837fa50faddb76743399e942181881db8dccaea3bd1712994db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf51f292659a77777c0ed7375a39683d8bee53b86a6e7bd0c76f34ce7aa37a3a8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155HolderUpgradeable is Initializable, ERC1155ReceiverUpgradeable {\\n    function __ERC1155Holder_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Holder_init_unchained() internal onlyInitializing {\\n    }\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xa8a1f16aa62b4d8c9e380057d9c3ee5c992e4a10dccc5650b26e38d4c61287d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155ReceiverUpgradeable is Initializable, ERC165Upgradeable, IERC1155ReceiverUpgradeable {\\n    function __ERC1155Receiver_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Receiver_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xa1b77d6d0f4591359c42b747a31375f20b0571b5e1fb62652d8184fb10f1d63a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xbe63437e37e32162d5d11ea8f11a44378c092b4bcbb05b51a813fe4bf33297d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721HolderUpgradeable is Initializable, IERC721ReceiverUpgradeable {\\n    function __ERC721Holder_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Holder_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x09c808831c1411497f1a19fe3c43c1ac9ae1cd6729e32722f25765d820413e08\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0xa014f65d84b02827055d99993ccdbfb4b56b2c9e91eb278d82a93330659d06e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC5267Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable, IERC5267Upgradeable {\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @custom:oz-renamed-from _HASHED_NAME\\n    bytes32 private _hashedName;\\n    /// @custom:oz-renamed-from _HASHED_VERSION\\n    bytes32 private _hashedVersion;\\n\\n    string private _name;\\n    string private _version;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        _name = name;\\n        _version = version;\\n\\n        // Reset prior values in storage if upgrading\\n        _hashedName = 0;\\n        _hashedVersion = 0;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator();\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash(), block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {EIP-5267}.\\n     *\\n     * _Available since v4.9._\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        // If the hashed name and version in storage are non-zero, the contract hasn't been properly initialized\\n        // and the EIP712 domain is not reliable, as it will be missing name and version.\\n        require(_hashedName == 0 && _hashedVersion == 0, \\\"EIP712: Uninitialized\\\");\\n\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Name() internal virtual view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Version() internal virtual view returns (string memory) {\\n        return _version;\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Name` instead.\\n     */\\n    function _EIP712NameHash() internal view returns (bytes32) {\\n        string memory name = _EIP712Name();\\n        if (bytes(name).length > 0) {\\n            return keccak256(bytes(name));\\n        } else {\\n            // If the name is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the name hash in storage if non-zero, otherwise we assume the name is empty by design.\\n            bytes32 hashedName = _hashedName;\\n            if (hashedName != 0) {\\n                return hashedName;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Version` instead.\\n     */\\n    function _EIP712VersionHash() internal view returns (bytes32) {\\n        string memory version = _EIP712Version();\\n        if (bytes(version).length > 0) {\\n            return keccak256(bytes(version));\\n        } else {\\n            // If the version is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the version hash in storage if non-zero, otherwise we assume the version is empty by design.\\n            bytes32 hashedVersion = _hashedVersion;\\n            if (hashedVersion != 0) {\\n                return hashedVersion;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0xeb8d6be406a373771724922eb41b5d593bc8e2dc705daa22cd1145cfc8f5a3a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// EIP-712 is Final as of 2022-08-11. This file is deprecated.\\n\\nimport \\\"./EIP712Upgradeable.sol\\\";\\n\",\"keccak256\":\"0x31a2e227f5653e4b31e0f680857b8842073d083b33df11b3f3b3bb5ddc10526e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x1c65595a26548a1b2263315b08a56334a2d7087319814437559c3c96025e939f\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/giveaway/contracts/ERC2771Handler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.18;\\n\\n/// @dev minimal ERC2771 handler to keep bytecode-size down\\n/// based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.6.0/contracts/metatx/ERC2771Context.sol\\n/// with an initializer for proxies and a mutable forwarder\\nabstract contract ERC2771Handler {\\n    address internal _trustedForwarder;\\n\\n    /// @notice Emitted when a `newTrustedForwarder` is set, replacing the `oldTrustedForwarder`\\n    /// @param oldTrustedForwarder old trusted forwarder\\n    /// @param newTrustedForwarder new trusted forwarder\\n    /// @param operator the sender of the transaction\\n    event TrustedForwarderSet(\\n        address indexed oldTrustedForwarder,\\n        address indexed newTrustedForwarder,\\n        address indexed operator\\n    );\\n\\n    /// @notice set the trusted forwarder address\\n    /// @param forwarder trusted forwarder address or zero to disable it\\n    function __ERC2771Handler_initialize(address forwarder) internal {\\n        _setTrustedForwarder(forwarder);\\n    }\\n\\n    /// @notice return true if the forwarder is the trusted forwarder\\n    /// @param forwarder trusted forwarder address to check\\n    /// @return true if the address is the same as the trusted forwarder\\n    function isTrustedForwarder(address forwarder) external view returns (bool) {\\n        return _isTrustedForwarder(forwarder);\\n    }\\n\\n    /// @notice return the address of the trusted forwarder\\n    /// @return return the address of the trusted forwarder\\n    function getTrustedForwarder() external view returns (address) {\\n        return _trustedForwarder;\\n    }\\n\\n    /// @notice return the address of the trusted forwarder\\n    /// @dev this methods is the same as getTrustedForwarder but used by Biconomy\\n    /// @return return the address of the trusted forwarder\\n    function trustedForwarder() external view returns (address) {\\n        return _trustedForwarder;\\n    }\\n\\n    /// @notice set the address of the trusted forwarder\\n    /// @param newForwarder the address of the new forwarder.\\n    function _setTrustedForwarder(address newForwarder) internal virtual {\\n        emit TrustedForwarderSet(_trustedForwarder, newForwarder, _msgSender());\\n        _trustedForwarder = newForwarder;\\n    }\\n\\n    /// @notice if the call is from the trusted forwarder the sender is extracted from calldata, msg.sender otherwise\\n    /// @return sender the calculated address of the sender\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (_isTrustedForwarder(msg.sender) && msg.data.length >= 20) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            sender = msg.sender;\\n        }\\n    }\\n\\n    /// @notice return true if the forwarder is the trusted forwarder\\n    /// @param forwarder trusted forwarder address to check\\n    /// @return true if the address is the same as the trusted forwarder\\n    function _isTrustedForwarder(address forwarder) internal view virtual returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9bfa4835b8e065f7e50bd25cece2da5442d4036c3f71959166633dc8c043cd69\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/giveaway/contracts/SignedMultiGiveaway.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.18;\\n\\nimport {ContextUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {IERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport {IERC1155Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport {ERC1155HolderUpgradeable, ERC1155ReceiverUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\\\";\\nimport {ERC721HolderUpgradeable, IERC721ReceiverUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol\\\";\\nimport {AccessControlEnumerableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport {ERC2771Handler} from \\\"./ERC2771Handler.sol\\\";\\nimport {SignedMultiGiveawayBase} from \\\"./SignedMultiGiveawayBase.sol\\\";\\n\\n/// @title This contract gives rewards in any ERC20, ERC721 or ERC1155 when the backend authorizes it via message signing.\\n/// @dev The whole contract is split in the base one this implementation to facilitate the reading and split\\n/// @dev the signature checking code.\\n/// @dev This contract supports meta transactions.\\n/// @dev This contract is final, don't inherit from it.\\ncontract SignedMultiGiveaway is\\n    SignedMultiGiveawayBase,\\n    PausableUpgradeable,\\n    ERC2771Handler,\\n    ERC1155HolderUpgradeable,\\n    ERC721HolderUpgradeable\\n{\\n    /// @notice limits applied for each claim per token\\n    struct PerTokenLimitData {\\n        uint256 maxWeiPerClaim; // maximum amount of wei per each individual claim, 0 => check disabled\\n    }\\n\\n    /// @dev global limits that affect the whole contract behaviour\\n    struct LimitData {\\n        uint128 numberOfSignaturesNeeded; // Amount of signatures needed minus one to approve a message, 0 => 1 signature\\n        uint128 maxClaimEntries; // Maximum amount of claims per message minus one, 0 => 1 claim entry per claim\\n    }\\n\\n    /// @dev args of claim, used to pass an array to batchClaim\\n    struct BatchClaimData {\\n        Signature[] sigs;\\n        uint256[] claimIds;\\n        uint256 expiration;\\n        address from;\\n        address to;\\n        ClaimEntry[] claims;\\n    }\\n\\n    string public constant NAME = \\\"Sandbox SignedMultiGiveaway\\\";\\n    string public constant VERSION = \\\"1.0\\\";\\n\\n    /// @dev this role is for addresses that help the admin. Can pause the contract, but, only the admin can unpause it.\\n    bytes32 public constant BACKOFFICE_ROLE = keccak256(\\\"BACKOFFICE_ROLE\\\");\\n\\n    /// @dev configurable global limits for the contract.\\n    LimitData private _limits;\\n\\n    /// @dev limits applied to each claim per token and tokenId (most useful for EIP1155 tokens)\\n    /// @dev Token -> id -> Limit\\n    mapping(address => mapping(uint256 => PerTokenLimitData)) private _perTokenLimitData;\\n\\n    /// @notice This event is emitted when a claim occurs.\\n    /// @param claimIds unique claim ids, used by the backend to avoid double spending\\n    /// @param from source user\\n    /// @param to destination user\\n    /// @param claims list of tokens to do transfer\\n    /// @param operator the sender of the transaction\\n    event Claimed(\\n        uint256[] claimIds,\\n        address indexed from,\\n        address indexed to,\\n        ClaimEntry[] claims,\\n        address indexed operator\\n    );\\n\\n    /// @notice This event is emitted when a claim is revoked.\\n    /// @param claimIds unique claim ids, used by the backend to avoid double spending\\n    /// @param operator the sender of the transaction\\n    event RevokedClaims(uint256[] claimIds, address indexed operator);\\n\\n    /// @notice This event is emitted when assets are recovered from the contract.\\n    /// @param to destination user\\n    /// @param claims unique claim ids, used by the backend to avoid double spending\\n    /// @param operator the sender of the transaction\\n    event AssetsRecovered(address indexed to, ClaimEntry[] claims, address indexed operator);\\n\\n    /// @notice This event is emitted when the max wei per claim is set\\n    /// @param token address of the token to configure\\n    /// @param tokenId of the token\\n    /// @param maxWeiPerClaim maximum amount of wei per each individual claim, 0 => check disabled\\n    /// @param operator the sender of the transaction\\n    event MaxWeiPerClaimSet(\\n        address indexed token,\\n        uint256 indexed tokenId,\\n        uint256 maxWeiPerClaim,\\n        address indexed operator\\n    );\\n\\n    /// @notice This event is emitted when the number of signatures needed to claim is set\\n    /// @param numberOfSignaturesNeeded amount of valid signatures needed to claim\\n    /// @param operator the sender of the transaction\\n    event NumberOfSignaturesNeededSet(uint128 numberOfSignaturesNeeded, address indexed operator);\\n\\n    /// @notice This event is emitted when the max entries per claim is set\\n    /// @param maxClaimEntries maximum amount of claim entries per message\\n    /// @param operator the sender of the transaction\\n    event MaxClaimEntriesSet(uint128 maxClaimEntries, address indexed operator);\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \\\"only admin\\\");\\n        _;\\n    }\\n\\n    modifier onlyBackoffice() {\\n        require(hasRole(BACKOFFICE_ROLE, _msgSender()), \\\"only backoffice\\\");\\n        _;\\n    }\\n\\n    /// @dev this protects the implementation contract from behing initialized.\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice initializer method, called during deployment\\n    /// @param trustedForwarder_ address of the ERC2771 trusted forwarder\\n    /// @param admin_ address that have admin access and can assign roles.\\n    function initialize(address trustedForwarder_, address admin_) external initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC1155Receiver_init_unchained();\\n        __ERC1155Holder_init_unchained();\\n        __ERC721Holder_init_unchained();\\n        __AccessControl_init_unchained();\\n        __AccessControlEnumerable_init_unchained();\\n        __EIP712_init_unchained(NAME, VERSION);\\n        __Pausable_init_unchained();\\n        __ERC2771Handler_initialize(trustedForwarder_);\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin_);\\n        _grantRole(BACKOFFICE_ROLE, admin_);\\n    }\\n\\n    /// @notice verifies the ERC712 signatures and transfer tokens from the source user to the destination user.\\n    /// @param sigs signature part (v,r,s) the array of signatures M in N of M sigs\\n    /// @param claimIds unique claim ids, used by the backend to avoid double spending\\n    /// @param expiration expiration timestamp\\n    /// @param from source user\\n    /// @param to destination user\\n    /// @param claims list of tokens to do transfer\\n    function claim(\\n        Signature[] calldata sigs,\\n        uint256[] calldata claimIds,\\n        uint256 expiration,\\n        address from, // if different from address(this) then must be used with approve\\n        address to,\\n        ClaimEntry[] calldata claims\\n    ) external whenNotPaused {\\n        _verifyClaim(_limits.numberOfSignaturesNeeded + 1, sigs, claimIds, expiration, from, to, claims);\\n        _transfer(from, to, claims);\\n        emit Claimed(claimIds, from, to, claims, _msgSender());\\n    }\\n\\n    /// @notice does a lot of claims in batch\\n    /// @param batch an array of args to the claim method\\n    function batchClaim(BatchClaimData[] calldata batch) external whenNotPaused {\\n        uint256 len = batch.length;\\n        require(len > 0, \\\"invalid len\\\");\\n        address sender = _msgSender();\\n        for (uint256 i; i < len; i++) {\\n            BatchClaimData calldata c = batch[i];\\n            _verifyClaim(\\n                _limits.numberOfSignaturesNeeded + 1,\\n                c.sigs,\\n                c.claimIds,\\n                c.expiration,\\n                c.from,\\n                c.to,\\n                c.claims\\n            );\\n            _transfer(c.from, c.to, c.claims);\\n            emit Claimed(c.claimIds, c.from, c.to, c.claims, sender);\\n        }\\n    }\\n\\n    /// @notice let the admin recover tokens from the contract\\n    /// @param to destination address of the recovered fund\\n    /// @param claims list of the tokens to transfer\\n    function recoverAssets(address to, ClaimEntry[] calldata claims) external onlyAdmin {\\n        _transfer(address(this), to, claims);\\n        emit AssetsRecovered(to, claims, _msgSender());\\n    }\\n\\n    /// @notice let the backoffice role to revoke claims so they cannot be used anymore\\n    /// @param claimIds and array of claim Ids to revoke\\n    function revokeClaims(uint256[] calldata claimIds) external onlyBackoffice {\\n        _revokeClaims(claimIds);\\n        emit RevokedClaims(claimIds, _msgSender());\\n    }\\n\\n    /// @notice Triggers stopped state. No more claims are accepted.\\n    function pause() external onlyBackoffice {\\n        _pause();\\n    }\\n\\n    /// @notice Returns to the normal state. Accept claims.\\n    function unpause() external onlyAdmin {\\n        _unpause();\\n    }\\n\\n    /// @notice set the global limits of the contract\\n    /// @param numberOfSignaturesNeeded number of signatures needed to approve a claim (default to 1)\\n    function setNumberOfSignaturesNeeded(uint128 numberOfSignaturesNeeded) external onlyAdmin {\\n        require(numberOfSignaturesNeeded > 0, \\\"invalid numberOfSignaturesNeeded\\\");\\n        _limits = LimitData({\\n            numberOfSignaturesNeeded: numberOfSignaturesNeeded - 1,\\n            maxClaimEntries: _limits.maxClaimEntries\\n        });\\n        emit NumberOfSignaturesNeededSet(numberOfSignaturesNeeded, _msgSender());\\n    }\\n\\n    /// @notice set the global limits of the contract\\n    /// @param maxClaimEntries maximum number of entries in a claim (amount of transfers) that can be claimed at once\\n    function setMaxClaimEntries(uint128 maxClaimEntries) external onlyAdmin {\\n        require(maxClaimEntries > 0, \\\"invalid maxClaimEntries\\\");\\n        _limits = LimitData({\\n            numberOfSignaturesNeeded: _limits.numberOfSignaturesNeeded,\\n            maxClaimEntries: maxClaimEntries - 1\\n        });\\n        emit MaxClaimEntriesSet(maxClaimEntries, _msgSender());\\n    }\\n\\n    /// @notice set the limits per token and tokenId\\n    /// @param token the token to which will assign the limit\\n    /// @param tokenId for ERC1155 is the id of the token, else it must be zero\\n    /// @param maxWeiPerClaim the max amount per each claim, for example 0.01eth per claim\\n    /// @dev even tokenId is kind of inconsistent for tokenType!=ERC1155 it doesn't harm\\n    function setMaxWeiPerClaim(address token, uint256 tokenId, uint256 maxWeiPerClaim) external onlyAdmin {\\n        require(token != address(0), \\\"invalid token address\\\");\\n        _perTokenLimitData[token][tokenId].maxWeiPerClaim = maxWeiPerClaim;\\n        emit MaxWeiPerClaimSet(token, tokenId, maxWeiPerClaim, _msgSender());\\n    }\\n\\n    /// @dev Change the address of the trusted forwarder for meta-TX\\n    /// @param newForwarder The new trustedForwarder\\n    function setTrustedForwarder(address newForwarder) external onlyAdmin {\\n        _setTrustedForwarder(newForwarder);\\n    }\\n\\n    /// @notice return true if already claimed\\n    /// @param claimId unique id used to avoid double spending\\n    /// @return true if claimed\\n    function isClaimed(uint256 claimId) external view returns (bool) {\\n        return _isClaimed(claimId);\\n    }\\n\\n    /// @notice verifies a ERC712 signature for the Claim data type.\\n    /// @param sig signature part (v,r,s)\\n    /// @param claimIds unique id used to avoid double spending\\n    /// @param expiration expiration timestamp\\n    /// @param from source user\\n    /// @param to destination user\\n    /// @param claims list of tokens to do transfer\\n    /// @return the recovered address must match the signing address\\n    function verifySignature(\\n        Signature calldata sig,\\n        uint256[] calldata claimIds,\\n        uint256 expiration,\\n        address from,\\n        address to,\\n        ClaimEntry[] calldata claims\\n    ) external view returns (address) {\\n        return _verifySignature(sig, claimIds, expiration, from, to, claims);\\n    }\\n\\n    /// @notice EIP712 domain separator\\n    /// @return the hash of the domain separator\\n    function domainSeparator() external view returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /// @notice get the needed number of signatures to approve a claim\\n    /// @return number of signatures needed\\n    function getNumberOfSignaturesNeeded() external view returns (uint128) {\\n        return _limits.numberOfSignaturesNeeded + 1;\\n    }\\n\\n    /// @notice get the maximum claim entries per claim\\n    /// @return Maximum amount of claims per message\\n    function getMaxClaimEntries() external view returns (uint128) {\\n        return _limits.maxClaimEntries + 1;\\n    }\\n\\n    /// @notice get maximum Weis that can be claimed at once\\n    /// @param token the token contract address\\n    /// @param tokenId if ERC1155 the token id else must be zero\\n    /// @dev even tokenId is kind of inconsistent for tokenType!=ERC1155 it doesn't harm\\n    /// @return maximum amount of wei per each individual claim, 0 => check disabled\\n    function getMaxWeiPerClaim(address token, uint256 tokenId) external view returns (uint256) {\\n        return _perTokenLimitData[token][tokenId].maxWeiPerClaim;\\n    }\\n\\n    /// @dev See {IERC165-supportsInterface}.\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view override(AccessControlEnumerableUpgradeable, ERC1155ReceiverUpgradeable) returns (bool) {\\n        return (interfaceId == type(IERC721ReceiverUpgradeable).interfaceId) || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _transfer(address from, address to, ClaimEntry[] calldata claims) internal {\\n        uint256 len = claims.length;\\n        require(len <= _limits.maxClaimEntries + 1, \\\"too many claims\\\");\\n        for (uint256 i; i < len; i++) {\\n            _transferEntry(from, to, claims[i]);\\n        }\\n    }\\n\\n    // solhint-disable code-complexity\\n    function _transferEntry(address from, address to, ClaimEntry calldata claimEntry) internal {\\n        if (claimEntry.tokenType == TokenType.ERC20) {\\n            _transferERC20(from, to, claimEntry);\\n        } else if (claimEntry.tokenType == TokenType.ERC721) {\\n            _transferERC721(from, to, claimEntry);\\n        } else if (claimEntry.tokenType == TokenType.ERC721_BATCH) {\\n            _transferERC721Batch(from, to, claimEntry);\\n        } else if (claimEntry.tokenType == TokenType.ERC721_SAFE) {\\n            _transferERC721Safe(from, to, claimEntry);\\n        } else if (claimEntry.tokenType == TokenType.ERC721_SAFE_BATCH) {\\n            _transferERC721SafeBatch(from, to, claimEntry);\\n        } else if (claimEntry.tokenType == TokenType.ERC1155) {\\n            _transferERC1155(from, to, claimEntry);\\n        } else if (claimEntry.tokenType == TokenType.ERC1155_BATCH) {\\n            _transferERC1155Batch(from, to, claimEntry);\\n        } else {\\n            revert(\\\"invalid token type\\\");\\n        }\\n    }\\n\\n    function _transferERC20(address from, address to, ClaimEntry calldata claimEntry) internal {\\n        address tokenAddress = claimEntry.tokenAddress;\\n        uint256 amount = abi.decode(claimEntry.data, (uint256));\\n        _checkLimits(_perTokenLimitData[tokenAddress][0], amount);\\n        if (from == address(this)) {\\n            require(IERC20Upgradeable(tokenAddress).transfer(to, amount), \\\"transfer failed\\\");\\n        } else {\\n            require(IERC20Upgradeable(tokenAddress).transferFrom(from, to, amount), \\\"transfer failed\\\");\\n        }\\n    }\\n\\n    function _transferERC721(address from, address to, ClaimEntry calldata claimEntry) internal {\\n        address tokenAddress = claimEntry.tokenAddress;\\n        uint256 tokenId = abi.decode(claimEntry.data, (uint256));\\n        // We want a global limit, not per tokenId.\\n        _checkLimits(_perTokenLimitData[tokenAddress][0], 1);\\n        IERC721Upgradeable(tokenAddress).transferFrom(from, to, tokenId);\\n    }\\n\\n    function _transferERC721Batch(address from, address to, ClaimEntry calldata claimEntry) internal {\\n        address tokenAddress = claimEntry.tokenAddress;\\n        uint256[] memory tokenIds = abi.decode(claimEntry.data, (uint256[]));\\n        uint256 len = tokenIds.length;\\n        // We want a global limit, not per tokenId.\\n        _checkLimits(_perTokenLimitData[tokenAddress][0], len);\\n        for (uint256 i; i < len; i++) {\\n            IERC721Upgradeable(tokenAddress).transferFrom(from, to, tokenIds[i]);\\n        }\\n    }\\n\\n    function _transferERC721Safe(address from, address to, ClaimEntry calldata claimEntry) internal {\\n        address tokenAddress = claimEntry.tokenAddress;\\n        uint256 tokenId = abi.decode(claimEntry.data, (uint256));\\n        // We want a global limit, not per tokenId.\\n        _checkLimits(_perTokenLimitData[tokenAddress][0], 1);\\n        IERC721Upgradeable(tokenAddress).safeTransferFrom(from, to, tokenId);\\n    }\\n\\n    function _transferERC721SafeBatch(address from, address to, ClaimEntry calldata claimEntry) internal {\\n        address tokenAddress = claimEntry.tokenAddress;\\n        uint256[] memory tokenIds = abi.decode(claimEntry.data, (uint256[]));\\n        uint256 len = tokenIds.length;\\n        // We want a global limit, not per tokenId.\\n        _checkLimits(_perTokenLimitData[tokenAddress][0], len);\\n        for (uint256 i; i < len; i++) {\\n            IERC721Upgradeable(tokenAddress).safeTransferFrom(from, to, tokenIds[i]);\\n        }\\n    }\\n\\n    function _transferERC1155(address from, address to, ClaimEntry calldata claimEntry) internal {\\n        address tokenAddress = claimEntry.tokenAddress;\\n        (uint256 tokenId, uint256 amount, bytes memory data) = abi.decode(claimEntry.data, (uint256, uint256, bytes));\\n        _checkLimits(_perTokenLimitData[tokenAddress][tokenId], amount);\\n        IERC1155Upgradeable(tokenAddress).safeTransferFrom(from, to, tokenId, amount, data);\\n    }\\n\\n    function _transferERC1155Batch(address from, address to, ClaimEntry calldata claimEntry) internal {\\n        address tokenAddress = claimEntry.tokenAddress;\\n        (uint256[] memory ids, uint256[] memory amounts, bytes memory data) = abi.decode(\\n            claimEntry.data,\\n            (uint256[], uint256[], bytes)\\n        );\\n\\n        uint256 len = ids.length;\\n        require(len > 0, \\\"invalid data len\\\");\\n        require(len == amounts.length, \\\"invalid data\\\");\\n        for (uint256 i; i < len; i++) {\\n            _checkLimits(_perTokenLimitData[tokenAddress][ids[i]], amounts[i]);\\n        }\\n        IERC1155Upgradeable(tokenAddress).safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    function _checkLimits(PerTokenLimitData storage limits, uint256 amount) internal view {\\n        require(amount > 0, \\\"invalid amount\\\");\\n        if (limits.maxWeiPerClaim > 0) {\\n            require(amount <= limits.maxWeiPerClaim, \\\"checkLimits, amount too high\\\");\\n        }\\n    }\\n\\n    function _msgSender() internal view override(ContextUpgradeable, ERC2771Handler) returns (address) {\\n        return ERC2771Handler._msgSender();\\n    }\\n\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0x31116c1edd17f8e7c2226cc88eaaf7f23118d794feda71776153dfbc56ca0776\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/giveaway/contracts/SignedMultiGiveawayBase.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.18;\\n\\nimport {EIP712Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\\\";\\nimport {ECDSAUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport {AccessControlEnumerableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\n\\n/// @title This contract gives rewards in any ERC20, ERC721 or ERC1155 when the backend authorizes it via message signing.\\n/// @dev The whole contract is split in this base one and implementation to facilitate the reading and split\\n/// @dev the signature checking code\\n/// @dev This contract supports meta transactions.\\nabstract contract SignedMultiGiveawayBase is EIP712Upgradeable, AccessControlEnumerableUpgradeable {\\n    struct Signature {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    enum TokenType {\\n        INVALID,\\n        ERC20,\\n        ERC721,\\n        ERC721_BATCH,\\n        ERC721_SAFE,\\n        ERC721_SAFE_BATCH,\\n        ERC1155,\\n        ERC1155_BATCH\\n    }\\n    /// @dev this is a union type, data depends on the tokenType it can be amount, amount + tokenId, etc.\\n    struct ClaimEntry {\\n        TokenType tokenType;\\n        address tokenAddress;\\n        // This field depends on tokenType\\n        //      ERC20: uint256 encoded amount\\n        //      ERC721/ERC721_SAFE: uint256 encoded token id\\n        //      ERC721_BATCH/ERC721_SAFE_BATCH: uint256[] encoded array of token ids\\n        //      ERC1155: (uint256, uint256, bytes) encoded token id, amount, and data argument passed to the safeTransferFrom function\\n        //      ERC1155_BATCH: (uint256[], uint256[], bytes) encoded token ids array, amounts array, and data argument passed to the safeTransferFrom function\\n        bytes data;\\n    }\\n\\n    /// @dev the address of the signers authorized to sign messages\\n    bytes32 public constant SIGNER_ROLE = keccak256(\\\"SIGNER_ROLE\\\");\\n\\n    bytes32 public constant CLAIM_ENTRY_TYPEHASH =\\n        keccak256(\\\"ClaimEntry(uint256 tokenType,address tokenAddress,bytes data)\\\");\\n    bytes32 public constant CLAIM_TYPEHASH =\\n        keccak256(\\n            \\\"Claim(uint256[] claimIds,uint256 expiration,address from,address to,ClaimEntry[] claims)ClaimEntry(uint256 tokenType,address tokenAddress,bytes data)\\\"\\n        );\\n\\n    /// @dev claimId => true if already claimed\\n    mapping(uint256 => bool) private _claimed;\\n\\n    /// @notice verifies the data inside the claim including the ERC712 signature.\\n    /// @param numberOfSignatures number of signatures required\\n    /// @param sigs signature part\\n    /// @param claimIds unique claim ids\\n    /// @param expiration expiration timestamp\\n    /// @param from source user\\n    /// @param to destination user\\n    /// @param claims list of tokens to do transfer\\n    function _verifyClaim(\\n        uint256 numberOfSignatures,\\n        Signature[] calldata sigs,\\n        uint256[] calldata claimIds,\\n        uint256 expiration,\\n        address from,\\n        address to,\\n        ClaimEntry[] calldata claims\\n    ) internal virtual {\\n        if (expiration != 0) {\\n            require(block.timestamp < expiration, \\\"expired\\\");\\n        }\\n        for (uint256 i; i < claimIds.length; i++) {\\n            require(!_claimed[claimIds[i]], \\\"already claimed\\\");\\n            _claimed[claimIds[i]] = true;\\n        }\\n        bytes32 digest = _digest(claimIds, expiration, from, to, claims);\\n        _checkSig(numberOfSignatures, digest, sigs);\\n    }\\n\\n    /// @notice let the admin revoke some claims so they cannot be used anymore\\n    /// @param claimIds and array of claim Ids to revoke\\n    function _revokeClaims(uint256[] calldata claimIds) internal {\\n        for (uint256 i; i < claimIds.length; i++) {\\n            _claimed[claimIds[i]] = true;\\n        }\\n    }\\n\\n    function _checkSig(uint256 numberOfSignatures, bytes32 digest, Signature[] calldata sigs) internal view virtual {\\n        require(numberOfSignatures == sigs.length, \\\"wrong number of signatures\\\");\\n        address lastSig = address(0);\\n        for (uint256 i; i < numberOfSignatures; i++) {\\n            address signer = _recover(digest, sigs[i]);\\n            require(hasRole(SIGNER_ROLE, signer), \\\"invalid signer\\\");\\n            // Signers must be different and sorted in incremental order.\\n            require(lastSig < signer, \\\"invalid order\\\");\\n            lastSig = signer;\\n        }\\n    }\\n\\n    /// @notice verifies a ERC712 signature for the Claim data type.\\n    /// @param sig signature part (v,r,s)\\n    /// @param claimIds unique id used to avoid double spending\\n    /// @param expiration expiration timestamp\\n    /// @param from source user\\n    /// @param to destination user\\n    /// @param claims list of tokens to do transfer\\n    /// @return the recovered address must match the signing address\\n    function _verifySignature(\\n        Signature calldata sig,\\n        uint256[] calldata claimIds,\\n        uint256 expiration,\\n        address from,\\n        address to,\\n        ClaimEntry[] calldata claims\\n    ) internal view virtual returns (address) {\\n        bytes32 digest = _digest(claimIds, expiration, from, to, claims);\\n        return _recover(digest, sig);\\n    }\\n\\n    /// @notice return true if already claimed\\n    /// @return true if claimed\\n    function _isClaimed(uint256 claimId) internal view virtual returns (bool) {\\n        return _claimed[claimId];\\n    }\\n\\n    function _digest(\\n        uint256[] calldata claimIds,\\n        uint256 expiration,\\n        address from,\\n        address to,\\n        ClaimEntry[] calldata claims\\n    ) internal view virtual returns (bytes32) {\\n        bytes32 structHash = keccak256(\\n            abi.encode(CLAIM_TYPEHASH, _hashClaimIds(claimIds), expiration, from, to, _hashClaims(claims))\\n        );\\n        return _hashTypedDataV4(structHash);\\n    }\\n\\n    function _recover(bytes32 digest, Signature calldata sig) internal view virtual returns (address) {\\n        return ECDSAUpgradeable.recover(digest, sig.v, sig.r, sig.s);\\n    }\\n\\n    function _hashClaimIds(uint256[] calldata claimIds) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(claimIds));\\n    }\\n\\n    function _hashClaims(ClaimEntry[] calldata claims) internal pure returns (bytes32) {\\n        bytes32[] memory claimHashes = new bytes32[](claims.length);\\n        for (uint256 i; i < claims.length; i++) {\\n            ClaimEntry calldata claimEntry = claims[i];\\n            claimHashes[i] = keccak256(\\n                abi.encode(\\n                    CLAIM_ENTRY_TYPEHASH,\\n                    claimEntry.tokenType,\\n                    claimEntry.tokenAddress,\\n                    keccak256(claimEntry.data)\\n                )\\n            );\\n        }\\n        return keccak256(abi.encodePacked(claimHashes));\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x76e34562d26839d04897c4e3fa8b2f6ab3d2fb05ca21b6aed3d00814a54023d0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e3565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811614620000e1576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b61462380620000f36000396000f3fe608060405234801561001057600080fd5b50600436106102c85760003560e01c806391d148541161017b578063ce1b815f116100d8578063e4564c5b1161008c578063f23a6e6111610071578063f23a6e61146106d5578063f698da251461070d578063ffa1ad741461071557600080fd5b8063e4564c5b146106af578063e5dac0d0146106c257600080fd5b8063da742228116100bd578063da74222814610681578063dbbac9cc14610694578063e09996321461069c57600080fd5b8063ce1b815f14610492578063d547741f1461066e57600080fd5b8063aa5a047d1161012f578063bc197c8111610114578063bc197c8114610610578063bec7470414610648578063ca15c8731461065b57600080fd5b8063aa5a047d146105b2578063ba94ec0d146105e957600080fd5b8063a1ebf35d11610160578063a1ebf35d1461053a578063a217fddf14610561578063a3f4df7e1461056957600080fd5b806391d14854146104ee5780639e34070f1461052757600080fd5b8063485cc955116102295780636b0509b1116101dd5780638456cb59116101c25780638456cb59146104b857806384b0196e146104c05780639010d07c146104db57600080fd5b80636b0509b11461046b5780637da0a8771461049257600080fd5b8063572b6c051161020e578063572b6c05146104255780635c975abb146104385780636406156d1461044457600080fd5b8063485cc955146103ff5780634ac48bc11461041257600080fd5b80632ed5c3a71161028057806336568abe1161026557806336568abe146103c45780633f4ba83a146103d75780634423c4bc146103df57600080fd5b80632ed5c3a71461039e5780632f2ff15d146103b157600080fd5b8063248a9ca3116102b1578063248a9ca3146103455780632b31cf6f146103765780632bea1a5d1461038b57600080fd5b806301ffc9a7146102cd578063150b7a02146102f5575b600080fd5b6102e06102db3660046135b0565b610751565b60405190151581526020015b60405180910390f35b61032c6103033660046136ad565b7f150b7a0200000000000000000000000000000000000000000000000000000000949350505050565b6040516001600160e01b031990911681526020016102ec565b610368610353366004613715565b60009081526099602052604090206001015490565b6040519081526020016102ec565b61038961038436600461372e565b610795565b005b6103896103993660046137ad565b6108b7565b6103896103ac366004613800565b610962565b6103896103bf366004613829565b610ab2565b6103896103d2366004613829565b610adc565b610389610b78565b6103e7610bc8565b6040516001600160801b0390911681526020016102ec565b61038961040d366004613855565b610bfc565b61038961042036600461387f565b610e07565b6102e06104333660046138c1565b610fed565b61012f5460ff166102e0565b6103687fbad44f0a50067ec87af9a5b7fab5db1703477a5f928ef7b9d60d5ea00779e31281565b6103687f5309dad0596943facd0c04489c6b6af73ba4da3a90ae65622eaccbffe4bd48ad81565b610161546001600160a01b03165b6040516001600160a01b0390911681526020016102ec565b610389611008565b6104c8611088565b6040516102ec9796959493929190613967565b6104a06104e93660046139e3565b61114a565b6102e06104fc366004613829565b60009182526099602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6102e0610535366004613715565b611169565b6103687fe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f7081565b610368600081565b6105a56040518060400160405280601b81526020017f53616e64626f78205369676e65644d756c74694769766561776179000000000081525081565b6040516102ec9190613a05565b6103686105c0366004613a18565b6001600160a01b0391909116600090815261022a60209081526040808320938352929052205490565b6103687f4241d2f5c82a591aa6083c014f07cbb4e03d44fb469d97b7c58188f95b6e20df81565b61032c61061e366004613ac2565b7fbc197c810000000000000000000000000000000000000000000000000000000095945050505050565b610389610656366004613b6c565b611180565b610368610669366004613715565b611234565b61038961067c366004613829565b61124b565b61038961068f3660046138c1565b611270565b6103e76112c2565b6103896106aa366004613800565b6112dd565b6104a06106bd366004613c64565b611424565b6103896106d036600461387f565b611443565b61032c6106e3366004613d1b565b7ff23a6e610000000000000000000000000000000000000000000000000000000095945050505050565b610368611513565b6105a56040518060400160405280600381526020017f312e30000000000000000000000000000000000000000000000000000000000081525081565b60006001600160e01b031982167f150b7a0200000000000000000000000000000000000000000000000000000000148061078f575061078f8261151d565b92915050565b6107a260006104fc61155b565b6107e05760405162461bcd60e51b815260206004820152600a60248201526937b7363c9030b236b4b760b11b60448201526064015b60405180910390fd5b6001600160a01b0383166108365760405162461bcd60e51b815260206004820152601560248201527f696e76616c696420746f6b656e2061646472657373000000000000000000000060448201526064016107d7565b6001600160a01b038316600090815261022a60209081526040808320858452909152902081905561086561155b565b6001600160a01b031682846001600160a01b03167f3d2337e631055356416a7e2b68aa5cbda587d1d414471eafe64613aaeb196830846040516108aa91815260200190565b60405180910390a4505050565b6108c460006104fc61155b565b6108fd5760405162461bcd60e51b815260206004820152600a60248201526937b7363c9030b236b4b760b11b60448201526064016107d7565b61090930848484611565565b61091161155b565b6001600160a01b0316836001600160a01b03167f0c952c453c26841a145ea8ce492bffda58895756bf5232e879e4fd002fc937f08484604051610955929190613ebc565b60405180910390a3505050565b61096f60006104fc61155b565b6109a85760405162461bcd60e51b815260206004820152600a60248201526937b7363c9030b236b4b760b11b60448201526064016107d7565b6000816001600160801b031611610a015760405162461bcd60e51b815260206004820181905260248201527f696e76616c6964206e756d6265724f665369676e6174757265734e656564656460448201526064016107d7565b6040518060400160405280600183610a199190613eee565b6001600160801b03908116825261022980547001000000000000000000000000000000009081900483166020948501528451949093015182169092029216919091179055610a6561155b565b6040516001600160801b03831681526001600160a01b0391909116907f0ab7ca3f7259ad2cd01b812b09a8523ae7f3949dd49d79943ab49cc863a0b1dc906020015b60405180910390a250565b600082815260996020526040902060010154610acd8161163e565b610ad7838361164f565b505050565b610ae461155b565b6001600160a01b0316816001600160a01b031614610b6a5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016107d7565b610b748282611671565b5050565b610b8560006104fc61155b565b610bbe5760405162461bcd60e51b815260206004820152600a60248201526937b7363c9030b236b4b760b11b60448201526064016107d7565b610bc6611693565b565b61022954600090610bf79070010000000000000000000000000000000090046001600160801b03166001613f0e565b905090565b600054610100900460ff1615808015610c1c5750600054600160ff909116105b80610c365750303b158015610c36575060005460ff166001145b610ca85760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016107d7565b6000805460ff191660011790558015610ccb576000805461ff0019166101001790555b610cd36116ec565b610cdb6116ec565b610ce36116ec565b610ceb6116ec565b610cf36116ec565b610cfb6116ec565b610d036116ec565b610d776040518060400160405280601b81526020017f53616e64626f78205369676e65644d756c7469476976656177617900000000008152506040518060400160405280600381526020017f312e300000000000000000000000000000000000000000000000000000000000815250611769565b610d7f61180e565b610d88836112b6565b610d9360008361164f565b610dbd7fbad44f0a50067ec87af9a5b7fab5db1703477a5f928ef7b9d60d5ea00779e3128361164f565b8015610ad7576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b610e0f611898565b8080610e5d5760405162461bcd60e51b815260206004820152600b60248201527f696e76616c6964206c656e00000000000000000000000000000000000000000060448201526064016107d7565b6000610e6761155b565b905060005b82811015610fe65736858583818110610e8757610e87613f2e565b9050602002810190610e999190613f44565b61022954909150610f0f90610eb8906001600160801b03166001613f0e565b6001600160801b0316610ecb8380613f82565b610ed86020860186613fcb565b6040870135610eed6080890160608a016138c1565b610efd60a08a0160808b016138c1565b610f0a60a08b018b613fcb565b6118ec565b610f44610f2260808301606084016138c1565b610f3260a08401608085016138c1565b610f3f60a0850185613fcb565b611565565b6001600160a01b038316610f5e60a08301608084016138c1565b6001600160a01b0316610f7760808401606085016138c1565b6001600160a01b03167f4278f7ab15af8a4b7476f4befef9127b34c4b35bf06d232d050f051fb06830b3610fae6020860186613fcb565b610fbb60a0880188613fcb565b604051610fcb9493929190614060565b60405180910390a45080610fde81614087565b915050610e6c565b5050505050565b600061078f82610161546001600160a01b0391821691161490565b6110347fbad44f0a50067ec87af9a5b7fab5db1703477a5f928ef7b9d60d5ea00779e3126104fc61155b565b6110805760405162461bcd60e51b815260206004820152600f60248201527f6f6e6c79206261636b6f6666696365000000000000000000000000000000000060448201526064016107d7565b610bc6611a50565b6000606080600080600060606001546000801b1480156110a85750600254155b6110f45760405162461bcd60e51b815260206004820152601560248201527f4549503731323a20556e696e697469616c697a6564000000000000000000000060448201526064016107d7565b6110fc611a8f565b611104611b21565b604080516000808252602082019092527f0f000000000000000000000000000000000000000000000000000000000000009b939a50919850469750309650945092509050565b600082815260cb602052604081206111629083611b30565b9392505050565b600081815260fd602052604081205460ff1661078f565b611188611898565b610229546111bb906111a4906001600160801b03166001613f0e565b6001600160801b03168a8a8a8a8a8a8a8a8a6118ec565b6111c784848484611565565b6111cf61155b565b6001600160a01b0316836001600160a01b0316856001600160a01b03167f4278f7ab15af8a4b7476f4befef9127b34c4b35bf06d232d050f051fb06830b38a8a87876040516112219493929190614060565b60405180910390a4505050505050505050565b600081815260cb6020526040812061078f90611b3c565b6000828152609960205260409020600101546112668161163e565b610ad78383611671565b61127d60006104fc61155b565b6112b65760405162461bcd60e51b815260206004820152600a60248201526937b7363c9030b236b4b760b11b60448201526064016107d7565b6112bf81611b46565b50565b61022954600090610bf7906001600160801b03166001613f0e565b6112ea60006104fc61155b565b6113235760405162461bcd60e51b815260206004820152600a60248201526937b7363c9030b236b4b760b11b60448201526064016107d7565b6000816001600160801b03161161137c5760405162461bcd60e51b815260206004820152601760248201527f696e76616c6964206d6178436c61696d456e747269657300000000000000000060448201526064016107d7565b60408051808201909152610229546001600160801b03168152602081016113a4600184613eee565b6001600160801b039081169091528151602090920151811670010000000000000000000000000000000002911617610229556113de61155b565b6040516001600160801b03831681526001600160a01b0391909116907f6297716b941fbe18f8793ae3979c2a38deb20d89e714b1116910ffddccb2218190602001610aa7565b60006114368989898989898989611bc8565b9998505050505050505050565b61146f7fbad44f0a50067ec87af9a5b7fab5db1703477a5f928ef7b9d60d5ea00779e3126104fc61155b565b6114bb5760405162461bcd60e51b815260206004820152600f60248201527f6f6e6c79206261636b6f6666696365000000000000000000000000000000000060448201526064016107d7565b6114c58282611bf4565b6114cd61155b565b6001600160a01b03167fac4964ddef258f8eb25b20154b034af9c697c0f338c863a9d06a24d7bbec7d4183836040516115079291906140a1565b60405180910390a25050565b6000610bf7611c56565b60006001600160e01b031982167f4e2312e000000000000000000000000000000000000000000000000000000000148061078f575061078f82611c60565b6000610bf7611c9e565b6102295481906115939070010000000000000000000000000000000090046001600160801b03166001613f0e565b6001600160801b03168111156115eb5760405162461bcd60e51b815260206004820152600f60248201527f746f6f206d616e7920636c61696d73000000000000000000000000000000000060448201526064016107d7565b60005b8181101561163657611624868686868581811061160d5761160d613f2e565b905060200281019061161f91906140b5565b611cf2565b8061162e81614087565b9150506115ee565b505050505050565b6112bf8161164a61155b565b611e8a565b6116598282611eff565b600082815260cb60205260409020610ad79082611fa2565b61167b8282611fb7565b600082815260cb60205260409020610ad79082612058565b61169b61206d565b61012f805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6116cf61155b565b6040516001600160a01b03909116815260200160405180910390a1565b600054610100900460ff16610bc65760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016107d7565b600054610100900460ff166117e65760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016107d7565b60036117f2838261414b565b5060046117ff828261414b565b50506000600181905560025550565b600054610100900460ff1661188b5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016107d7565b61012f805460ff19169055565b61012f5460ff1615610bc65760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016107d7565b8415611941578442106119415760405162461bcd60e51b815260206004820152600760248201527f657870697265640000000000000000000000000000000000000000000000000060448201526064016107d7565b60005b86811015611a235760fd600089898481811061196257611962613f2e565b602090810292909201358352508101919091526040016000205460ff16156119cc5760405162461bcd60e51b815260206004820152600f60248201527f616c726561647920636c61696d6564000000000000000000000000000000000060448201526064016107d7565b600160fd60008a8a858181106119e4576119e4613f2e565b90506020020135815260200190815260200160002060006101000a81548160ff0219169083151502179055508080611a1b90614087565b915050611944565b506000611a35888888888888886120c0565b9050611a438b828c8c612154565b5050505050505050505050565b611a58611898565b61012f805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586116cf61155b565b606060038054611a9e906140cb565b80601f0160208091040260200160405190810160405280929190818152602001828054611aca906140cb565b8015611b175780601f10611aec57610100808354040283529160200191611b17565b820191906000526020600020905b815481529060010190602001808311611afa57829003601f168201915b5050505050905090565b606060048054611a9e906140cb565b600061116283836122d1565b600061078f825490565b611b4e61155b565b610161546040516001600160a01b03928316928481169216907f8ca022029d8ff7ad974913f8970aeed6c5e0e7eaf494a0c5b262249f6b5759e590600090a461016180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b600080611bda898989898989896120c0565b9050611be6818b6122fb565b9a9950505050505050505050565b60005b81811015610ad757600160fd6000858585818110611c1757611c17613f2e565b90506020020135815260200190815260200160002060006101000a81548160ff0219169083151502179055508080611c4e90614087565b915050611bf7565b6000610bf761231d565b60006001600160e01b031982167f5a05180f00000000000000000000000000000000000000000000000000000000148061078f575061078f82612391565b610161546000906001600160a01b031633148015611cbd575060143610155b15611ced57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c90565b503390565b6001611d01602083018361420b565b6007811115611d1257611d12613d8f565b03611d2257610ad78383836123f8565b6002611d31602083018361420b565b6007811115611d4257611d42613d8f565b03611d5257610ad7838383612626565b6003611d61602083018361420b565b6007811115611d7257611d72613d8f565b03611d8257610ad7838383612713565b6004611d91602083018361420b565b6007811115611da257611da2613d8f565b03611db257610ad7838383612833565b6005611dc1602083018361420b565b6007811115611dd257611dd2613d8f565b03611de257610ad78383836128eb565b6006611df1602083018361420b565b6007811115611e0257611e02613d8f565b03611e1257610ad7838383612a02565b6007611e21602083018361420b565b6007811115611e3257611e32613d8f565b03611e4257610ad7838383612ae5565b60405162461bcd60e51b815260206004820152601260248201527f696e76616c696420746f6b656e2074797065000000000000000000000000000060448201526064016107d7565b60008281526099602090815260408083206001600160a01b038516845290915290205460ff16610b7457611ebd81612ccc565b611ec8836020612cde565b604051602001611ed9929190614226565b60408051601f198184030181529082905262461bcd60e51b82526107d791600401613a05565b60008281526099602090815260408083206001600160a01b038516845290915290205460ff16610b745760008281526099602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611f5e61155b565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000611162836001600160a01b038416612f07565b60008281526099602090815260408083206001600160a01b038516845290915290205460ff1615610b745760008281526099602090815260408083206001600160a01b03851684529091529020805460ff1916905561201461155b565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6000611162836001600160a01b038416612f56565b61012f5460ff16610bc65760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016107d7565b6000807f5309dad0596943facd0c04489c6b6af73ba4da3a90ae65622eaccbffe4bd48ad6120ee8a8a613050565b8888886120fb8989613083565b60408051602081019790975286019490945260608501929092526001600160a01b0390811660808501521660a083015260c082015260e001604051602081830303815290604052805190602001209050611436816131e5565b8381146121a35760405162461bcd60e51b815260206004820152601a60248201527f77726f6e67206e756d626572206f66207369676e61747572657300000000000060448201526064016107d7565b6000805b858110156116365760006121d2868686858181106121c7576121c7613f2e565b9050606002016122fb565b6001600160a01b03811660009081527f181d328678494424de2249b3fb7cc4dad207fe52295cd59bda8681ae33c4f4ed602052604090205490915060ff1661225c5760405162461bcd60e51b815260206004820152600e60248201527f696e76616c6964207369676e657200000000000000000000000000000000000060448201526064016107d7565b806001600160a01b0316836001600160a01b0316106122bd5760405162461bcd60e51b815260206004820152600d60248201527f696e76616c6964206f726465720000000000000000000000000000000000000060448201526064016107d7565b9150806122c981614087565b9150506121a7565b60008260000182815481106122e8576122e8613f2e565b9060005260206000200154905092915050565b60006111628361230e60208501856142a7565b8460200135856040013561322d565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f612348613255565b6123506132ae565b60408051602081019490945283019190915260608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b60006001600160e01b031982167f7965db0b00000000000000000000000000000000000000000000000000000000148061078f57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b031983161461078f565b600061240a60408301602084016138c1565b9050600061241b60408401846142ca565b8101906124289190613715565b6001600160a01b038316600090815261022a60209081526040808320838052909152902090915061245990826132df565b306001600160a01b03861603612546576040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301526024820183905283169063a9059cbb906044016020604051808303816000875af11580156124d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124f59190614311565b6125415760405162461bcd60e51b815260206004820152600f60248201527f7472616e73666572206661696c6564000000000000000000000000000000000060448201526064016107d7565b610fe6565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b0386811660048301528581166024830152604482018390528316906323b872dd906064016020604051808303816000875af11580156125b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125da9190614311565b610fe65760405162461bcd60e51b815260206004820152600f60248201527f7472616e73666572206661696c6564000000000000000000000000000000000060448201526064016107d7565b600061263860408301602084016138c1565b9050600061264960408401846142ca565b8101906126569190613715565b6001600160a01b038316600090815261022a6020908152604080832083805290915290209091506126889060016132df565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b0386811660048301528581166024830152604482018390528316906323b872dd906064015b600060405180830381600087803b1580156126f457600080fd5b505af1158015612708573d6000803e3d6000fd5b505050505050505050565b600061272560408301602084016138c1565b9050600061273660408401846142ca565b8101906127439190614333565b80516001600160a01b038416600090815261022a6020908152604080832083805290915290209192509061277790826132df565b60005b8181101561282a57836001600160a01b03166323b872dd88888685815181106127a5576127a5613f2e565b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b1580156127ff57600080fd5b505af1158015612813573d6000803e3d6000fd5b50505050808061282290614087565b91505061277a565b50505050505050565b600061284560408301602084016138c1565b9050600061285660408401846142ca565b8101906128639190613715565b6001600160a01b038316600090815261022a6020908152604080832083805290915290209091506128959060016132df565b6040517f42842e0e0000000000000000000000000000000000000000000000000000000081526001600160a01b0386811660048301528581166024830152604482018390528316906342842e0e906064016126da565b60006128fd60408301602084016138c1565b9050600061290e60408401846142ca565b81019061291b9190614333565b80516001600160a01b038416600090815261022a6020908152604080832083805290915290209192509061294f90826132df565b60005b8181101561282a57836001600160a01b03166342842e0e888886858151811061297d5761297d613f2e565b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b1580156129d757600080fd5b505af11580156129eb573d6000803e3d6000fd5b5050505080806129fa90614087565b915050612952565b6000612a1460408301602084016138c1565b905060008080612a2760408601866142ca565b810190612a349190614368565b6001600160a01b038716600090815261022a6020908152604080832086845290915290209295509093509150612a6a90836132df565b6040517ff242432a0000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063f242432a90612ab7908a908a908890889088906004016143b8565b600060405180830381600087803b158015612ad157600080fd5b505af1158015611a43573d6000803e3d6000fd5b6000612af760408301602084016138c1565b905060008080612b0a60408601866142ca565b810190612b1791906143f0565b8251929550909350915080612b6e5760405162461bcd60e51b815260206004820152601060248201527f696e76616c69642064617461206c656e0000000000000000000000000000000060448201526064016107d7565b82518114612bbe5760405162461bcd60e51b815260206004820152600c60248201527f696e76616c69642064617461000000000000000000000000000000000000000060448201526064016107d7565b60005b81811015612c42576001600160a01b038616600090815261022a602052604081208651612c309290889085908110612bfb57612bfb613f2e565b60200260200101518152602001908152602001600020858381518110612c2357612c23613f2e565b60200260200101516132df565b80612c3a81614087565b915050612bc1565b506040517f2eb2c2d60000000000000000000000000000000000000000000000000000000081526001600160a01b03861690632eb2c2d690612c90908b908b9089908990899060040161446e565b600060405180830381600087803b158015612caa57600080fd5b505af1158015612cbe573d6000803e3d6000fd5b505050505050505050505050565b606061078f6001600160a01b03831660145b60606000612ced8360026144cc565b612cf89060026144e3565b67ffffffffffffffff811115612d1057612d106135f6565b6040519080825280601f01601f191660200182016040528015612d3a576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110612d7157612d71613f2e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612dd457612dd4613f2e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000612e108460026144cc565b612e1b9060016144e3565b90505b6001811115612eb8577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110612e5c57612e5c613f2e565b1a60f81b828281518110612e7257612e72613f2e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93612eb1816144f6565b9050612e1e565b5083156111625760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107d7565b6000818152600183016020526040812054612f4e5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561078f565b50600061078f565b6000818152600183016020526040812054801561303f576000612f7a60018361450d565b8554909150600090612f8e9060019061450d565b9050818114612ff3576000866000018281548110612fae57612fae613f2e565b9060005260206000200154905080876000018481548110612fd157612fd1613f2e565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061300457613004614520565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061078f565b600091505061078f565b5092915050565b60008282604051602001613065929190614536565b60405160208183030381529060405280519060200120905092915050565b6000808267ffffffffffffffff81111561309f5761309f6135f6565b6040519080825280602002602001820160405280156130c8578160200160208202803683370190505b50905060005b838110156131b457368585838181106130e9576130e9613f2e565b90506020028101906130fb91906140b5565b90507f4241d2f5c82a591aa6083c014f07cbb4e03d44fb469d97b7c58188f95b6e20df61312b602083018361420b565b61313b60408401602085016138c1565b61314860408501856142ca565b604051613156929190614578565b60405190819003812061316e94939291602001614588565b6040516020818303038152906040528051906020012083838151811061319657613196613f2e565b602090810291909101015250806131ac81614087565b9150506130ce565b50806040516020016131c691906145b7565b6040516020818303038152906040528051906020012091505092915050565b600061078f6131f2611c56565b836040517f19010000000000000000000000000000000000000000000000000000000000008152600281019290925260228201526042902090565b600080600061323e87878787613387565b9150915061324b8161344b565b5095945050505050565b600080613260611a8f565b805190915015613277578051602090910120919050565b60015480156132865792915050565b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4709250505090565b6000806132b9611b21565b8051909150156132d0578051602090910120919050565b60025480156132865792915050565b6000811161332f5760405162461bcd60e51b815260206004820152600e60248201527f696e76616c696420616d6f756e7400000000000000000000000000000000000060448201526064016107d7565b815415610b74578154811115610b745760405162461bcd60e51b815260206004820152601c60248201527f636865636b4c696d6974732c20616d6f756e7420746f6f20686967680000000060448201526064016107d7565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156133be5750600090506003613442565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015613412573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661343b57600060019250925050613442565b9150600090505b94509492505050565b600081600481111561345f5761345f613d8f565b036134675750565b600181600481111561347b5761347b613d8f565b036134c85760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016107d7565b60028160048111156134dc576134dc613d8f565b036135295760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016107d7565b600381600481111561353d5761353d613d8f565b036112bf5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016107d7565b6000602082840312156135c257600080fd5b81356001600160e01b03198116811461116257600080fd5b80356001600160a01b03811681146135f157600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715613635576136356135f6565b604052919050565b600082601f83011261364e57600080fd5b813567ffffffffffffffff811115613668576136686135f6565b61367b6020601f19601f8401160161360c565b81815284602083860101111561369057600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080608085870312156136c357600080fd5b6136cc856135da565b93506136da602086016135da565b925060408501359150606085013567ffffffffffffffff8111156136fd57600080fd5b6137098782880161363d565b91505092959194509250565b60006020828403121561372757600080fd5b5035919050565b60008060006060848603121561374357600080fd5b61374c846135da565b95602085013595506040909401359392505050565b60008083601f84011261377357600080fd5b50813567ffffffffffffffff81111561378b57600080fd5b6020830191508360208260051b85010111156137a657600080fd5b9250929050565b6000806000604084860312156137c257600080fd5b6137cb846135da565b9250602084013567ffffffffffffffff8111156137e757600080fd5b6137f386828701613761565b9497909650939450505050565b60006020828403121561381257600080fd5b81356001600160801b038116811461116257600080fd5b6000806040838503121561383c57600080fd5b8235915061384c602084016135da565b90509250929050565b6000806040838503121561386857600080fd5b613871836135da565b915061384c602084016135da565b6000806020838503121561389257600080fd5b823567ffffffffffffffff8111156138a957600080fd5b6138b585828601613761565b90969095509350505050565b6000602082840312156138d357600080fd5b611162826135da565b60005b838110156138f75781810151838201526020016138df565b50506000910152565b600081518084526139188160208601602086016138dc565b601f01601f19169290920160200192915050565b600081518084526020808501945080840160005b8381101561395c57815187529582019590820190600101613940565b509495945050505050565b7fff000000000000000000000000000000000000000000000000000000000000008816815260e0602082015260006139a260e0830189613900565b82810360408401526139b48189613900565b90508660608401526001600160a01b03861660808401528460a084015282810360c0840152611be6818561392c565b600080604083850312156139f657600080fd5b50508035926020909101359150565b6020815260006111626020830184613900565b60008060408385031215613a2b57600080fd5b613a34836135da565b946020939093013593505050565b600082601f830112613a5357600080fd5b8135602067ffffffffffffffff821115613a6f57613a6f6135f6565b8160051b613a7e82820161360c565b9283528481018201928281019087851115613a9857600080fd5b83870192505b84831015613ab757823582529183019190830190613a9e565b979650505050505050565b600080600080600060a08688031215613ada57600080fd5b613ae3866135da565b9450613af1602087016135da565b9350604086013567ffffffffffffffff80821115613b0e57600080fd5b613b1a89838a01613a42565b94506060880135915080821115613b3057600080fd5b613b3c89838a01613a42565b93506080880135915080821115613b5257600080fd5b50613b5f8882890161363d565b9150509295509295909350565b600080600080600080600080600060c08a8c031215613b8a57600080fd5b893567ffffffffffffffff80821115613ba257600080fd5b818c0191508c601f830112613bb657600080fd5b813581811115613bc557600080fd5b8d6020606083028501011115613bda57600080fd5b60209283019b509950908b01359080821115613bf557600080fd5b613c018d838e01613761565b909950975060408c01359650879150613c1c60608d016135da565b9550613c2a60808d016135da565b945060a08c0135915080821115613c4057600080fd5b50613c4d8c828d01613761565b915080935050809150509295985092959850929598565b600080600080600080600080888a03610100811215613c8257600080fd5b6060811215613c9057600080fd5b50889750606089013567ffffffffffffffff80821115613caf57600080fd5b613cbb8c838d01613761565b909950975060808b01359650879150613cd660a08c016135da565b9550613ce460c08c016135da565b945060e08b0135915080821115613cfa57600080fd5b50613d078b828c01613761565b999c989b5096995094979396929594505050565b600080600080600060a08688031215613d3357600080fd5b613d3c866135da565b9450613d4a602087016135da565b93506040860135925060608601359150608086013567ffffffffffffffff811115613d7457600080fd5b613b5f8882890161363d565b8035600881106135f157600080fd5b634e487b7160e01b600052602160045260246000fd5b60088110613dc357634e487b7160e01b600052602160045260246000fd5b9052565b81835260006020808501808196508560051b810191508460005b87811015613eaf5782840389528135605e19883603018112613e0257600080fd5b87016060613e1886613e1384613d80565b613da5565b6001600160a01b03613e2b8884016135da565b1687870152604080830135601e19843603018112613e4857600080fd5b90920187810192903567ffffffffffffffff811115613e6657600080fd5b803603841315613e7557600080fd5b82828901528083890152608092508084848a013760008882018401529b88019b601f01601f19169096010194505090840190600101613de1565b5091979650505050505050565b602081526000613ed0602083018486613dc7565b949350505050565b634e487b7160e01b600052601160045260246000fd5b6001600160801b0382811682821603908082111561304957613049613ed8565b6001600160801b0381811683821601908082111561304957613049613ed8565b634e487b7160e01b600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff41833603018112613f7857600080fd5b9190910192915050565b6000808335601e19843603018112613f9957600080fd5b83018035915067ffffffffffffffff821115613fb457600080fd5b60200191506060810236038213156137a657600080fd5b6000808335601e19843603018112613fe257600080fd5b83018035915067ffffffffffffffff821115613ffd57600080fd5b6020019150600581901b36038213156137a657600080fd5b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561404757600080fd5b8260051b80836020870137939093016020019392505050565b604081526000614074604083018688614015565b8281036020840152613ab7818587613dc7565b6000600019820361409a5761409a613ed8565b5060010190565b602081526000613ed0602083018486614015565b60008235605e19833603018112613f7857600080fd5b600181811c908216806140df57607f821691505b6020821081036140ff57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610ad757600081815260208120601f850160051c8101602086101561412c5750805b601f850160051c820191505b8181101561163657828155600101614138565b815167ffffffffffffffff811115614165576141656135f6565b6141798161417384546140cb565b84614105565b602080601f8311600181146141ae57600084156141965750858301515b600019600386901b1c1916600185901b178555611636565b600085815260208120601f198616915b828110156141dd578886015182559484019460019091019084016141be565b50858210156141fb5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006020828403121561421d57600080fd5b61116282613d80565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161425e8160178501602088016138dc565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000601791840191820152835161429b8160288401602088016138dc565b01602801949350505050565b6000602082840312156142b957600080fd5b813560ff8116811461116257600080fd5b6000808335601e198436030181126142e157600080fd5b83018035915067ffffffffffffffff8211156142fc57600080fd5b6020019150368190038213156137a657600080fd5b60006020828403121561432357600080fd5b8151801515811461116257600080fd5b60006020828403121561434557600080fd5b813567ffffffffffffffff81111561435c57600080fd5b613ed084828501613a42565b60008060006060848603121561437d57600080fd5b8335925060208401359150604084013567ffffffffffffffff8111156143a257600080fd5b6143ae8682870161363d565b9150509250925092565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a06080830152613ab760a0830184613900565b60008060006060848603121561440557600080fd5b833567ffffffffffffffff8082111561441d57600080fd5b61442987838801613a42565b9450602086013591508082111561443f57600080fd5b61444b87838801613a42565b9350604086013591508082111561446157600080fd5b506143ae8682870161363d565b60006001600160a01b03808816835280871660208401525060a0604083015261449a60a083018661392c565b82810360608401526144ac818661392c565b905082810360808401526144c08185613900565b98975050505050505050565b808202811582820484141761078f5761078f613ed8565b8082018082111561078f5761078f613ed8565b60008161450557614505613ed8565b506000190190565b8181038181111561078f5761078f613ed8565b634e487b7160e01b600052603160045260246000fd5b60007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561456557600080fd5b8260051b80858437919091019392505050565b8183823760009101908152919050565b8481526080810161459c6020830186613da5565b6001600160a01b039390931660408201526060015292915050565b815160009082906020808601845b838110156145e1578151855293820193908201906001016145c5565b5092969550505050505056fea2646970667358221220a5a701e2187e6d097ffd2558a1a4819adbc04fe1ba85eba47411d41fe3691d9464736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102c85760003560e01c806391d148541161017b578063ce1b815f116100d8578063e4564c5b1161008c578063f23a6e6111610071578063f23a6e61146106d5578063f698da251461070d578063ffa1ad741461071557600080fd5b8063e4564c5b146106af578063e5dac0d0146106c257600080fd5b8063da742228116100bd578063da74222814610681578063dbbac9cc14610694578063e09996321461069c57600080fd5b8063ce1b815f14610492578063d547741f1461066e57600080fd5b8063aa5a047d1161012f578063bc197c8111610114578063bc197c8114610610578063bec7470414610648578063ca15c8731461065b57600080fd5b8063aa5a047d146105b2578063ba94ec0d146105e957600080fd5b8063a1ebf35d11610160578063a1ebf35d1461053a578063a217fddf14610561578063a3f4df7e1461056957600080fd5b806391d14854146104ee5780639e34070f1461052757600080fd5b8063485cc955116102295780636b0509b1116101dd5780638456cb59116101c25780638456cb59146104b857806384b0196e146104c05780639010d07c146104db57600080fd5b80636b0509b11461046b5780637da0a8771461049257600080fd5b8063572b6c051161020e578063572b6c05146104255780635c975abb146104385780636406156d1461044457600080fd5b8063485cc955146103ff5780634ac48bc11461041257600080fd5b80632ed5c3a71161028057806336568abe1161026557806336568abe146103c45780633f4ba83a146103d75780634423c4bc146103df57600080fd5b80632ed5c3a71461039e5780632f2ff15d146103b157600080fd5b8063248a9ca3116102b1578063248a9ca3146103455780632b31cf6f146103765780632bea1a5d1461038b57600080fd5b806301ffc9a7146102cd578063150b7a02146102f5575b600080fd5b6102e06102db3660046135b0565b610751565b60405190151581526020015b60405180910390f35b61032c6103033660046136ad565b7f150b7a0200000000000000000000000000000000000000000000000000000000949350505050565b6040516001600160e01b031990911681526020016102ec565b610368610353366004613715565b60009081526099602052604090206001015490565b6040519081526020016102ec565b61038961038436600461372e565b610795565b005b6103896103993660046137ad565b6108b7565b6103896103ac366004613800565b610962565b6103896103bf366004613829565b610ab2565b6103896103d2366004613829565b610adc565b610389610b78565b6103e7610bc8565b6040516001600160801b0390911681526020016102ec565b61038961040d366004613855565b610bfc565b61038961042036600461387f565b610e07565b6102e06104333660046138c1565b610fed565b61012f5460ff166102e0565b6103687fbad44f0a50067ec87af9a5b7fab5db1703477a5f928ef7b9d60d5ea00779e31281565b6103687f5309dad0596943facd0c04489c6b6af73ba4da3a90ae65622eaccbffe4bd48ad81565b610161546001600160a01b03165b6040516001600160a01b0390911681526020016102ec565b610389611008565b6104c8611088565b6040516102ec9796959493929190613967565b6104a06104e93660046139e3565b61114a565b6102e06104fc366004613829565b60009182526099602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6102e0610535366004613715565b611169565b6103687fe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f7081565b610368600081565b6105a56040518060400160405280601b81526020017f53616e64626f78205369676e65644d756c74694769766561776179000000000081525081565b6040516102ec9190613a05565b6103686105c0366004613a18565b6001600160a01b0391909116600090815261022a60209081526040808320938352929052205490565b6103687f4241d2f5c82a591aa6083c014f07cbb4e03d44fb469d97b7c58188f95b6e20df81565b61032c61061e366004613ac2565b7fbc197c810000000000000000000000000000000000000000000000000000000095945050505050565b610389610656366004613b6c565b611180565b610368610669366004613715565b611234565b61038961067c366004613829565b61124b565b61038961068f3660046138c1565b611270565b6103e76112c2565b6103896106aa366004613800565b6112dd565b6104a06106bd366004613c64565b611424565b6103896106d036600461387f565b611443565b61032c6106e3366004613d1b565b7ff23a6e610000000000000000000000000000000000000000000000000000000095945050505050565b610368611513565b6105a56040518060400160405280600381526020017f312e30000000000000000000000000000000000000000000000000000000000081525081565b60006001600160e01b031982167f150b7a0200000000000000000000000000000000000000000000000000000000148061078f575061078f8261151d565b92915050565b6107a260006104fc61155b565b6107e05760405162461bcd60e51b815260206004820152600a60248201526937b7363c9030b236b4b760b11b60448201526064015b60405180910390fd5b6001600160a01b0383166108365760405162461bcd60e51b815260206004820152601560248201527f696e76616c696420746f6b656e2061646472657373000000000000000000000060448201526064016107d7565b6001600160a01b038316600090815261022a60209081526040808320858452909152902081905561086561155b565b6001600160a01b031682846001600160a01b03167f3d2337e631055356416a7e2b68aa5cbda587d1d414471eafe64613aaeb196830846040516108aa91815260200190565b60405180910390a4505050565b6108c460006104fc61155b565b6108fd5760405162461bcd60e51b815260206004820152600a60248201526937b7363c9030b236b4b760b11b60448201526064016107d7565b61090930848484611565565b61091161155b565b6001600160a01b0316836001600160a01b03167f0c952c453c26841a145ea8ce492bffda58895756bf5232e879e4fd002fc937f08484604051610955929190613ebc565b60405180910390a3505050565b61096f60006104fc61155b565b6109a85760405162461bcd60e51b815260206004820152600a60248201526937b7363c9030b236b4b760b11b60448201526064016107d7565b6000816001600160801b031611610a015760405162461bcd60e51b815260206004820181905260248201527f696e76616c6964206e756d6265724f665369676e6174757265734e656564656460448201526064016107d7565b6040518060400160405280600183610a199190613eee565b6001600160801b03908116825261022980547001000000000000000000000000000000009081900483166020948501528451949093015182169092029216919091179055610a6561155b565b6040516001600160801b03831681526001600160a01b0391909116907f0ab7ca3f7259ad2cd01b812b09a8523ae7f3949dd49d79943ab49cc863a0b1dc906020015b60405180910390a250565b600082815260996020526040902060010154610acd8161163e565b610ad7838361164f565b505050565b610ae461155b565b6001600160a01b0316816001600160a01b031614610b6a5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016107d7565b610b748282611671565b5050565b610b8560006104fc61155b565b610bbe5760405162461bcd60e51b815260206004820152600a60248201526937b7363c9030b236b4b760b11b60448201526064016107d7565b610bc6611693565b565b61022954600090610bf79070010000000000000000000000000000000090046001600160801b03166001613f0e565b905090565b600054610100900460ff1615808015610c1c5750600054600160ff909116105b80610c365750303b158015610c36575060005460ff166001145b610ca85760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016107d7565b6000805460ff191660011790558015610ccb576000805461ff0019166101001790555b610cd36116ec565b610cdb6116ec565b610ce36116ec565b610ceb6116ec565b610cf36116ec565b610cfb6116ec565b610d036116ec565b610d776040518060400160405280601b81526020017f53616e64626f78205369676e65644d756c7469476976656177617900000000008152506040518060400160405280600381526020017f312e300000000000000000000000000000000000000000000000000000000000815250611769565b610d7f61180e565b610d88836112b6565b610d9360008361164f565b610dbd7fbad44f0a50067ec87af9a5b7fab5db1703477a5f928ef7b9d60d5ea00779e3128361164f565b8015610ad7576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b610e0f611898565b8080610e5d5760405162461bcd60e51b815260206004820152600b60248201527f696e76616c6964206c656e00000000000000000000000000000000000000000060448201526064016107d7565b6000610e6761155b565b905060005b82811015610fe65736858583818110610e8757610e87613f2e565b9050602002810190610e999190613f44565b61022954909150610f0f90610eb8906001600160801b03166001613f0e565b6001600160801b0316610ecb8380613f82565b610ed86020860186613fcb565b6040870135610eed6080890160608a016138c1565b610efd60a08a0160808b016138c1565b610f0a60a08b018b613fcb565b6118ec565b610f44610f2260808301606084016138c1565b610f3260a08401608085016138c1565b610f3f60a0850185613fcb565b611565565b6001600160a01b038316610f5e60a08301608084016138c1565b6001600160a01b0316610f7760808401606085016138c1565b6001600160a01b03167f4278f7ab15af8a4b7476f4befef9127b34c4b35bf06d232d050f051fb06830b3610fae6020860186613fcb565b610fbb60a0880188613fcb565b604051610fcb9493929190614060565b60405180910390a45080610fde81614087565b915050610e6c565b5050505050565b600061078f82610161546001600160a01b0391821691161490565b6110347fbad44f0a50067ec87af9a5b7fab5db1703477a5f928ef7b9d60d5ea00779e3126104fc61155b565b6110805760405162461bcd60e51b815260206004820152600f60248201527f6f6e6c79206261636b6f6666696365000000000000000000000000000000000060448201526064016107d7565b610bc6611a50565b6000606080600080600060606001546000801b1480156110a85750600254155b6110f45760405162461bcd60e51b815260206004820152601560248201527f4549503731323a20556e696e697469616c697a6564000000000000000000000060448201526064016107d7565b6110fc611a8f565b611104611b21565b604080516000808252602082019092527f0f000000000000000000000000000000000000000000000000000000000000009b939a50919850469750309650945092509050565b600082815260cb602052604081206111629083611b30565b9392505050565b600081815260fd602052604081205460ff1661078f565b611188611898565b610229546111bb906111a4906001600160801b03166001613f0e565b6001600160801b03168a8a8a8a8a8a8a8a8a6118ec565b6111c784848484611565565b6111cf61155b565b6001600160a01b0316836001600160a01b0316856001600160a01b03167f4278f7ab15af8a4b7476f4befef9127b34c4b35bf06d232d050f051fb06830b38a8a87876040516112219493929190614060565b60405180910390a4505050505050505050565b600081815260cb6020526040812061078f90611b3c565b6000828152609960205260409020600101546112668161163e565b610ad78383611671565b61127d60006104fc61155b565b6112b65760405162461bcd60e51b815260206004820152600a60248201526937b7363c9030b236b4b760b11b60448201526064016107d7565b6112bf81611b46565b50565b61022954600090610bf7906001600160801b03166001613f0e565b6112ea60006104fc61155b565b6113235760405162461bcd60e51b815260206004820152600a60248201526937b7363c9030b236b4b760b11b60448201526064016107d7565b6000816001600160801b03161161137c5760405162461bcd60e51b815260206004820152601760248201527f696e76616c6964206d6178436c61696d456e747269657300000000000000000060448201526064016107d7565b60408051808201909152610229546001600160801b03168152602081016113a4600184613eee565b6001600160801b039081169091528151602090920151811670010000000000000000000000000000000002911617610229556113de61155b565b6040516001600160801b03831681526001600160a01b0391909116907f6297716b941fbe18f8793ae3979c2a38deb20d89e714b1116910ffddccb2218190602001610aa7565b60006114368989898989898989611bc8565b9998505050505050505050565b61146f7fbad44f0a50067ec87af9a5b7fab5db1703477a5f928ef7b9d60d5ea00779e3126104fc61155b565b6114bb5760405162461bcd60e51b815260206004820152600f60248201527f6f6e6c79206261636b6f6666696365000000000000000000000000000000000060448201526064016107d7565b6114c58282611bf4565b6114cd61155b565b6001600160a01b03167fac4964ddef258f8eb25b20154b034af9c697c0f338c863a9d06a24d7bbec7d4183836040516115079291906140a1565b60405180910390a25050565b6000610bf7611c56565b60006001600160e01b031982167f4e2312e000000000000000000000000000000000000000000000000000000000148061078f575061078f82611c60565b6000610bf7611c9e565b6102295481906115939070010000000000000000000000000000000090046001600160801b03166001613f0e565b6001600160801b03168111156115eb5760405162461bcd60e51b815260206004820152600f60248201527f746f6f206d616e7920636c61696d73000000000000000000000000000000000060448201526064016107d7565b60005b8181101561163657611624868686868581811061160d5761160d613f2e565b905060200281019061161f91906140b5565b611cf2565b8061162e81614087565b9150506115ee565b505050505050565b6112bf8161164a61155b565b611e8a565b6116598282611eff565b600082815260cb60205260409020610ad79082611fa2565b61167b8282611fb7565b600082815260cb60205260409020610ad79082612058565b61169b61206d565b61012f805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6116cf61155b565b6040516001600160a01b03909116815260200160405180910390a1565b600054610100900460ff16610bc65760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016107d7565b600054610100900460ff166117e65760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016107d7565b60036117f2838261414b565b5060046117ff828261414b565b50506000600181905560025550565b600054610100900460ff1661188b5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016107d7565b61012f805460ff19169055565b61012f5460ff1615610bc65760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016107d7565b8415611941578442106119415760405162461bcd60e51b815260206004820152600760248201527f657870697265640000000000000000000000000000000000000000000000000060448201526064016107d7565b60005b86811015611a235760fd600089898481811061196257611962613f2e565b602090810292909201358352508101919091526040016000205460ff16156119cc5760405162461bcd60e51b815260206004820152600f60248201527f616c726561647920636c61696d6564000000000000000000000000000000000060448201526064016107d7565b600160fd60008a8a858181106119e4576119e4613f2e565b90506020020135815260200190815260200160002060006101000a81548160ff0219169083151502179055508080611a1b90614087565b915050611944565b506000611a35888888888888886120c0565b9050611a438b828c8c612154565b5050505050505050505050565b611a58611898565b61012f805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586116cf61155b565b606060038054611a9e906140cb565b80601f0160208091040260200160405190810160405280929190818152602001828054611aca906140cb565b8015611b175780601f10611aec57610100808354040283529160200191611b17565b820191906000526020600020905b815481529060010190602001808311611afa57829003601f168201915b5050505050905090565b606060048054611a9e906140cb565b600061116283836122d1565b600061078f825490565b611b4e61155b565b610161546040516001600160a01b03928316928481169216907f8ca022029d8ff7ad974913f8970aeed6c5e0e7eaf494a0c5b262249f6b5759e590600090a461016180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b600080611bda898989898989896120c0565b9050611be6818b6122fb565b9a9950505050505050505050565b60005b81811015610ad757600160fd6000858585818110611c1757611c17613f2e565b90506020020135815260200190815260200160002060006101000a81548160ff0219169083151502179055508080611c4e90614087565b915050611bf7565b6000610bf761231d565b60006001600160e01b031982167f5a05180f00000000000000000000000000000000000000000000000000000000148061078f575061078f82612391565b610161546000906001600160a01b031633148015611cbd575060143610155b15611ced57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c90565b503390565b6001611d01602083018361420b565b6007811115611d1257611d12613d8f565b03611d2257610ad78383836123f8565b6002611d31602083018361420b565b6007811115611d4257611d42613d8f565b03611d5257610ad7838383612626565b6003611d61602083018361420b565b6007811115611d7257611d72613d8f565b03611d8257610ad7838383612713565b6004611d91602083018361420b565b6007811115611da257611da2613d8f565b03611db257610ad7838383612833565b6005611dc1602083018361420b565b6007811115611dd257611dd2613d8f565b03611de257610ad78383836128eb565b6006611df1602083018361420b565b6007811115611e0257611e02613d8f565b03611e1257610ad7838383612a02565b6007611e21602083018361420b565b6007811115611e3257611e32613d8f565b03611e4257610ad7838383612ae5565b60405162461bcd60e51b815260206004820152601260248201527f696e76616c696420746f6b656e2074797065000000000000000000000000000060448201526064016107d7565b60008281526099602090815260408083206001600160a01b038516845290915290205460ff16610b7457611ebd81612ccc565b611ec8836020612cde565b604051602001611ed9929190614226565b60408051601f198184030181529082905262461bcd60e51b82526107d791600401613a05565b60008281526099602090815260408083206001600160a01b038516845290915290205460ff16610b745760008281526099602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611f5e61155b565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000611162836001600160a01b038416612f07565b60008281526099602090815260408083206001600160a01b038516845290915290205460ff1615610b745760008281526099602090815260408083206001600160a01b03851684529091529020805460ff1916905561201461155b565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6000611162836001600160a01b038416612f56565b61012f5460ff16610bc65760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016107d7565b6000807f5309dad0596943facd0c04489c6b6af73ba4da3a90ae65622eaccbffe4bd48ad6120ee8a8a613050565b8888886120fb8989613083565b60408051602081019790975286019490945260608501929092526001600160a01b0390811660808501521660a083015260c082015260e001604051602081830303815290604052805190602001209050611436816131e5565b8381146121a35760405162461bcd60e51b815260206004820152601a60248201527f77726f6e67206e756d626572206f66207369676e61747572657300000000000060448201526064016107d7565b6000805b858110156116365760006121d2868686858181106121c7576121c7613f2e565b9050606002016122fb565b6001600160a01b03811660009081527f181d328678494424de2249b3fb7cc4dad207fe52295cd59bda8681ae33c4f4ed602052604090205490915060ff1661225c5760405162461bcd60e51b815260206004820152600e60248201527f696e76616c6964207369676e657200000000000000000000000000000000000060448201526064016107d7565b806001600160a01b0316836001600160a01b0316106122bd5760405162461bcd60e51b815260206004820152600d60248201527f696e76616c6964206f726465720000000000000000000000000000000000000060448201526064016107d7565b9150806122c981614087565b9150506121a7565b60008260000182815481106122e8576122e8613f2e565b9060005260206000200154905092915050565b60006111628361230e60208501856142a7565b8460200135856040013561322d565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f612348613255565b6123506132ae565b60408051602081019490945283019190915260608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b60006001600160e01b031982167f7965db0b00000000000000000000000000000000000000000000000000000000148061078f57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b031983161461078f565b600061240a60408301602084016138c1565b9050600061241b60408401846142ca565b8101906124289190613715565b6001600160a01b038316600090815261022a60209081526040808320838052909152902090915061245990826132df565b306001600160a01b03861603612546576040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301526024820183905283169063a9059cbb906044016020604051808303816000875af11580156124d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124f59190614311565b6125415760405162461bcd60e51b815260206004820152600f60248201527f7472616e73666572206661696c6564000000000000000000000000000000000060448201526064016107d7565b610fe6565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b0386811660048301528581166024830152604482018390528316906323b872dd906064016020604051808303816000875af11580156125b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125da9190614311565b610fe65760405162461bcd60e51b815260206004820152600f60248201527f7472616e73666572206661696c6564000000000000000000000000000000000060448201526064016107d7565b600061263860408301602084016138c1565b9050600061264960408401846142ca565b8101906126569190613715565b6001600160a01b038316600090815261022a6020908152604080832083805290915290209091506126889060016132df565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b0386811660048301528581166024830152604482018390528316906323b872dd906064015b600060405180830381600087803b1580156126f457600080fd5b505af1158015612708573d6000803e3d6000fd5b505050505050505050565b600061272560408301602084016138c1565b9050600061273660408401846142ca565b8101906127439190614333565b80516001600160a01b038416600090815261022a6020908152604080832083805290915290209192509061277790826132df565b60005b8181101561282a57836001600160a01b03166323b872dd88888685815181106127a5576127a5613f2e565b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b1580156127ff57600080fd5b505af1158015612813573d6000803e3d6000fd5b50505050808061282290614087565b91505061277a565b50505050505050565b600061284560408301602084016138c1565b9050600061285660408401846142ca565b8101906128639190613715565b6001600160a01b038316600090815261022a6020908152604080832083805290915290209091506128959060016132df565b6040517f42842e0e0000000000000000000000000000000000000000000000000000000081526001600160a01b0386811660048301528581166024830152604482018390528316906342842e0e906064016126da565b60006128fd60408301602084016138c1565b9050600061290e60408401846142ca565b81019061291b9190614333565b80516001600160a01b038416600090815261022a6020908152604080832083805290915290209192509061294f90826132df565b60005b8181101561282a57836001600160a01b03166342842e0e888886858151811061297d5761297d613f2e565b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b1580156129d757600080fd5b505af11580156129eb573d6000803e3d6000fd5b5050505080806129fa90614087565b915050612952565b6000612a1460408301602084016138c1565b905060008080612a2760408601866142ca565b810190612a349190614368565b6001600160a01b038716600090815261022a6020908152604080832086845290915290209295509093509150612a6a90836132df565b6040517ff242432a0000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063f242432a90612ab7908a908a908890889088906004016143b8565b600060405180830381600087803b158015612ad157600080fd5b505af1158015611a43573d6000803e3d6000fd5b6000612af760408301602084016138c1565b905060008080612b0a60408601866142ca565b810190612b1791906143f0565b8251929550909350915080612b6e5760405162461bcd60e51b815260206004820152601060248201527f696e76616c69642064617461206c656e0000000000000000000000000000000060448201526064016107d7565b82518114612bbe5760405162461bcd60e51b815260206004820152600c60248201527f696e76616c69642064617461000000000000000000000000000000000000000060448201526064016107d7565b60005b81811015612c42576001600160a01b038616600090815261022a602052604081208651612c309290889085908110612bfb57612bfb613f2e565b60200260200101518152602001908152602001600020858381518110612c2357612c23613f2e565b60200260200101516132df565b80612c3a81614087565b915050612bc1565b506040517f2eb2c2d60000000000000000000000000000000000000000000000000000000081526001600160a01b03861690632eb2c2d690612c90908b908b9089908990899060040161446e565b600060405180830381600087803b158015612caa57600080fd5b505af1158015612cbe573d6000803e3d6000fd5b505050505050505050505050565b606061078f6001600160a01b03831660145b60606000612ced8360026144cc565b612cf89060026144e3565b67ffffffffffffffff811115612d1057612d106135f6565b6040519080825280601f01601f191660200182016040528015612d3a576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110612d7157612d71613f2e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612dd457612dd4613f2e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000612e108460026144cc565b612e1b9060016144e3565b90505b6001811115612eb8577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110612e5c57612e5c613f2e565b1a60f81b828281518110612e7257612e72613f2e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93612eb1816144f6565b9050612e1e565b5083156111625760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107d7565b6000818152600183016020526040812054612f4e5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561078f565b50600061078f565b6000818152600183016020526040812054801561303f576000612f7a60018361450d565b8554909150600090612f8e9060019061450d565b9050818114612ff3576000866000018281548110612fae57612fae613f2e565b9060005260206000200154905080876000018481548110612fd157612fd1613f2e565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061300457613004614520565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061078f565b600091505061078f565b5092915050565b60008282604051602001613065929190614536565b60405160208183030381529060405280519060200120905092915050565b6000808267ffffffffffffffff81111561309f5761309f6135f6565b6040519080825280602002602001820160405280156130c8578160200160208202803683370190505b50905060005b838110156131b457368585838181106130e9576130e9613f2e565b90506020028101906130fb91906140b5565b90507f4241d2f5c82a591aa6083c014f07cbb4e03d44fb469d97b7c58188f95b6e20df61312b602083018361420b565b61313b60408401602085016138c1565b61314860408501856142ca565b604051613156929190614578565b60405190819003812061316e94939291602001614588565b6040516020818303038152906040528051906020012083838151811061319657613196613f2e565b602090810291909101015250806131ac81614087565b9150506130ce565b50806040516020016131c691906145b7565b6040516020818303038152906040528051906020012091505092915050565b600061078f6131f2611c56565b836040517f19010000000000000000000000000000000000000000000000000000000000008152600281019290925260228201526042902090565b600080600061323e87878787613387565b9150915061324b8161344b565b5095945050505050565b600080613260611a8f565b805190915015613277578051602090910120919050565b60015480156132865792915050565b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4709250505090565b6000806132b9611b21565b8051909150156132d0578051602090910120919050565b60025480156132865792915050565b6000811161332f5760405162461bcd60e51b815260206004820152600e60248201527f696e76616c696420616d6f756e7400000000000000000000000000000000000060448201526064016107d7565b815415610b74578154811115610b745760405162461bcd60e51b815260206004820152601c60248201527f636865636b4c696d6974732c20616d6f756e7420746f6f20686967680000000060448201526064016107d7565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156133be5750600090506003613442565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015613412573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661343b57600060019250925050613442565b9150600090505b94509492505050565b600081600481111561345f5761345f613d8f565b036134675750565b600181600481111561347b5761347b613d8f565b036134c85760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016107d7565b60028160048111156134dc576134dc613d8f565b036135295760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016107d7565b600381600481111561353d5761353d613d8f565b036112bf5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016107d7565b6000602082840312156135c257600080fd5b81356001600160e01b03198116811461116257600080fd5b80356001600160a01b03811681146135f157600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715613635576136356135f6565b604052919050565b600082601f83011261364e57600080fd5b813567ffffffffffffffff811115613668576136686135f6565b61367b6020601f19601f8401160161360c565b81815284602083860101111561369057600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080608085870312156136c357600080fd5b6136cc856135da565b93506136da602086016135da565b925060408501359150606085013567ffffffffffffffff8111156136fd57600080fd5b6137098782880161363d565b91505092959194509250565b60006020828403121561372757600080fd5b5035919050565b60008060006060848603121561374357600080fd5b61374c846135da565b95602085013595506040909401359392505050565b60008083601f84011261377357600080fd5b50813567ffffffffffffffff81111561378b57600080fd5b6020830191508360208260051b85010111156137a657600080fd5b9250929050565b6000806000604084860312156137c257600080fd5b6137cb846135da565b9250602084013567ffffffffffffffff8111156137e757600080fd5b6137f386828701613761565b9497909650939450505050565b60006020828403121561381257600080fd5b81356001600160801b038116811461116257600080fd5b6000806040838503121561383c57600080fd5b8235915061384c602084016135da565b90509250929050565b6000806040838503121561386857600080fd5b613871836135da565b915061384c602084016135da565b6000806020838503121561389257600080fd5b823567ffffffffffffffff8111156138a957600080fd5b6138b585828601613761565b90969095509350505050565b6000602082840312156138d357600080fd5b611162826135da565b60005b838110156138f75781810151838201526020016138df565b50506000910152565b600081518084526139188160208601602086016138dc565b601f01601f19169290920160200192915050565b600081518084526020808501945080840160005b8381101561395c57815187529582019590820190600101613940565b509495945050505050565b7fff000000000000000000000000000000000000000000000000000000000000008816815260e0602082015260006139a260e0830189613900565b82810360408401526139b48189613900565b90508660608401526001600160a01b03861660808401528460a084015282810360c0840152611be6818561392c565b600080604083850312156139f657600080fd5b50508035926020909101359150565b6020815260006111626020830184613900565b60008060408385031215613a2b57600080fd5b613a34836135da565b946020939093013593505050565b600082601f830112613a5357600080fd5b8135602067ffffffffffffffff821115613a6f57613a6f6135f6565b8160051b613a7e82820161360c565b9283528481018201928281019087851115613a9857600080fd5b83870192505b84831015613ab757823582529183019190830190613a9e565b979650505050505050565b600080600080600060a08688031215613ada57600080fd5b613ae3866135da565b9450613af1602087016135da565b9350604086013567ffffffffffffffff80821115613b0e57600080fd5b613b1a89838a01613a42565b94506060880135915080821115613b3057600080fd5b613b3c89838a01613a42565b93506080880135915080821115613b5257600080fd5b50613b5f8882890161363d565b9150509295509295909350565b600080600080600080600080600060c08a8c031215613b8a57600080fd5b893567ffffffffffffffff80821115613ba257600080fd5b818c0191508c601f830112613bb657600080fd5b813581811115613bc557600080fd5b8d6020606083028501011115613bda57600080fd5b60209283019b509950908b01359080821115613bf557600080fd5b613c018d838e01613761565b909950975060408c01359650879150613c1c60608d016135da565b9550613c2a60808d016135da565b945060a08c0135915080821115613c4057600080fd5b50613c4d8c828d01613761565b915080935050809150509295985092959850929598565b600080600080600080600080888a03610100811215613c8257600080fd5b6060811215613c9057600080fd5b50889750606089013567ffffffffffffffff80821115613caf57600080fd5b613cbb8c838d01613761565b909950975060808b01359650879150613cd660a08c016135da565b9550613ce460c08c016135da565b945060e08b0135915080821115613cfa57600080fd5b50613d078b828c01613761565b999c989b5096995094979396929594505050565b600080600080600060a08688031215613d3357600080fd5b613d3c866135da565b9450613d4a602087016135da565b93506040860135925060608601359150608086013567ffffffffffffffff811115613d7457600080fd5b613b5f8882890161363d565b8035600881106135f157600080fd5b634e487b7160e01b600052602160045260246000fd5b60088110613dc357634e487b7160e01b600052602160045260246000fd5b9052565b81835260006020808501808196508560051b810191508460005b87811015613eaf5782840389528135605e19883603018112613e0257600080fd5b87016060613e1886613e1384613d80565b613da5565b6001600160a01b03613e2b8884016135da565b1687870152604080830135601e19843603018112613e4857600080fd5b90920187810192903567ffffffffffffffff811115613e6657600080fd5b803603841315613e7557600080fd5b82828901528083890152608092508084848a013760008882018401529b88019b601f01601f19169096010194505090840190600101613de1565b5091979650505050505050565b602081526000613ed0602083018486613dc7565b949350505050565b634e487b7160e01b600052601160045260246000fd5b6001600160801b0382811682821603908082111561304957613049613ed8565b6001600160801b0381811683821601908082111561304957613049613ed8565b634e487b7160e01b600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff41833603018112613f7857600080fd5b9190910192915050565b6000808335601e19843603018112613f9957600080fd5b83018035915067ffffffffffffffff821115613fb457600080fd5b60200191506060810236038213156137a657600080fd5b6000808335601e19843603018112613fe257600080fd5b83018035915067ffffffffffffffff821115613ffd57600080fd5b6020019150600581901b36038213156137a657600080fd5b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561404757600080fd5b8260051b80836020870137939093016020019392505050565b604081526000614074604083018688614015565b8281036020840152613ab7818587613dc7565b6000600019820361409a5761409a613ed8565b5060010190565b602081526000613ed0602083018486614015565b60008235605e19833603018112613f7857600080fd5b600181811c908216806140df57607f821691505b6020821081036140ff57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610ad757600081815260208120601f850160051c8101602086101561412c5750805b601f850160051c820191505b8181101561163657828155600101614138565b815167ffffffffffffffff811115614165576141656135f6565b6141798161417384546140cb565b84614105565b602080601f8311600181146141ae57600084156141965750858301515b600019600386901b1c1916600185901b178555611636565b600085815260208120601f198616915b828110156141dd578886015182559484019460019091019084016141be565b50858210156141fb5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006020828403121561421d57600080fd5b61116282613d80565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161425e8160178501602088016138dc565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000601791840191820152835161429b8160288401602088016138dc565b01602801949350505050565b6000602082840312156142b957600080fd5b813560ff8116811461116257600080fd5b6000808335601e198436030181126142e157600080fd5b83018035915067ffffffffffffffff8211156142fc57600080fd5b6020019150368190038213156137a657600080fd5b60006020828403121561432357600080fd5b8151801515811461116257600080fd5b60006020828403121561434557600080fd5b813567ffffffffffffffff81111561435c57600080fd5b613ed084828501613a42565b60008060006060848603121561437d57600080fd5b8335925060208401359150604084013567ffffffffffffffff8111156143a257600080fd5b6143ae8682870161363d565b9150509250925092565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a06080830152613ab760a0830184613900565b60008060006060848603121561440557600080fd5b833567ffffffffffffffff8082111561441d57600080fd5b61442987838801613a42565b9450602086013591508082111561443f57600080fd5b61444b87838801613a42565b9350604086013591508082111561446157600080fd5b506143ae8682870161363d565b60006001600160a01b03808816835280871660208401525060a0604083015261449a60a083018661392c565b82810360608401526144ac818661392c565b905082810360808401526144c08185613900565b98975050505050505050565b808202811582820484141761078f5761078f613ed8565b8082018082111561078f5761078f613ed8565b60008161450557614505613ed8565b506000190190565b8181038181111561078f5761078f613ed8565b634e487b7160e01b600052603160045260246000fd5b60007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561456557600080fd5b8260051b80858437919091019392505050565b8183823760009101908152919050565b8481526080810161459c6020830186613da5565b6001600160a01b039390931660408201526060015292915050565b815160009082906020808601845b838110156145e1578151855293820193908201906001016145c5565b5092969550505050505056fea2646970667358221220a5a701e2187e6d097ffd2558a1a4819adbc04fe1ba85eba47411d41fe3691d9464736f6c63430008120033",
  "devdoc": {
    "details": "The whole contract is split in the base one this implementation to facilitate the reading and splitthe signature checking code.This contract supports meta transactions.This contract is final, don't inherit from it.",
    "events": {
      "AssetsRecovered(address,(uint8,address,bytes)[],address)": {
        "params": {
          "claims": "unique claim ids, used by the backend to avoid double spending",
          "operator": "the sender of the transaction",
          "to": "destination user"
        }
      },
      "Claimed(uint256[],address,address,(uint8,address,bytes)[],address)": {
        "params": {
          "claimIds": "unique claim ids, used by the backend to avoid double spending",
          "claims": "list of tokens to do transfer",
          "from": "source user",
          "operator": "the sender of the transaction",
          "to": "destination user"
        }
      },
      "EIP712DomainChanged()": {
        "details": "MAY be emitted to signal that the domain could have changed."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "MaxClaimEntriesSet(uint128,address)": {
        "params": {
          "maxClaimEntries": "maximum amount of claim entries per message",
          "operator": "the sender of the transaction"
        }
      },
      "MaxWeiPerClaimSet(address,uint256,uint256,address)": {
        "params": {
          "maxWeiPerClaim": "maximum amount of wei per each individual claim, 0 => check disabled",
          "operator": "the sender of the transaction",
          "token": "address of the token to configure",
          "tokenId": "of the token"
        }
      },
      "NumberOfSignaturesNeededSet(uint128,address)": {
        "params": {
          "numberOfSignaturesNeeded": "amount of valid signatures needed to claim",
          "operator": "the sender of the transaction"
        }
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "RevokedClaims(uint256[],address)": {
        "params": {
          "claimIds": "unique claim ids, used by the backend to avoid double spending",
          "operator": "the sender of the transaction"
        }
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "TrustedForwarderSet(address,address,address)": {
        "params": {
          "newTrustedForwarder": "new trusted forwarder",
          "oldTrustedForwarder": "old trusted forwarder",
          "operator": "the sender of the transaction"
        }
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "batchClaim(((uint8,bytes32,bytes32)[],uint256[],uint256,address,address,(uint8,address,bytes)[])[])": {
        "params": {
          "batch": "an array of args to the claim method"
        }
      },
      "claim((uint8,bytes32,bytes32)[],uint256[],uint256,address,address,(uint8,address,bytes)[])": {
        "params": {
          "claimIds": "unique claim ids, used by the backend to avoid double spending",
          "claims": "list of tokens to do transfer",
          "expiration": "expiration timestamp",
          "from": "source user",
          "sigs": "signature part (v,r,s) the array of signatures M in N of M sigs",
          "to": "destination user"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor",
        "details": "this protects the implementation contract from behing initialized."
      },
      "domainSeparator()": {
        "returns": {
          "_0": "the hash of the domain separator"
        }
      },
      "eip712Domain()": {
        "details": "See {EIP-5267}. _Available since v4.9._"
      },
      "getMaxClaimEntries()": {
        "returns": {
          "_0": "Maximum amount of claims per message"
        }
      },
      "getMaxWeiPerClaim(address,uint256)": {
        "details": "even tokenId is kind of inconsistent for tokenType!=ERC1155 it doesn't harm",
        "params": {
          "token": "the token contract address",
          "tokenId": "if ERC1155 the token id else must be zero"
        },
        "returns": {
          "_0": "maximum amount of wei per each individual claim, 0 => check disabled"
        }
      },
      "getNumberOfSignaturesNeeded()": {
        "returns": {
          "_0": "number of signatures needed"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "getTrustedForwarder()": {
        "returns": {
          "_0": "return the address of the trusted forwarder"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,address)": {
        "params": {
          "admin_": "address that have admin access and can assign roles.",
          "trustedForwarder_": "address of the ERC2771 trusted forwarder"
        }
      },
      "isClaimed(uint256)": {
        "params": {
          "claimId": "unique id used to avoid double spending"
        },
        "returns": {
          "_0": "true if claimed"
        }
      },
      "isTrustedForwarder(address)": {
        "params": {
          "forwarder": "trusted forwarder address to check"
        },
        "returns": {
          "_0": "true if the address is the same as the trusted forwarder"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "recoverAssets(address,(uint8,address,bytes)[])": {
        "params": {
          "claims": "list of the tokens to transfer",
          "to": "destination address of the recovered fund"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeClaims(uint256[])": {
        "params": {
          "claimIds": "and array of claim Ids to revoke"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setMaxClaimEntries(uint128)": {
        "params": {
          "maxClaimEntries": "maximum number of entries in a claim (amount of transfers) that can be claimed at once"
        }
      },
      "setMaxWeiPerClaim(address,uint256,uint256)": {
        "details": "even tokenId is kind of inconsistent for tokenType!=ERC1155 it doesn't harm",
        "params": {
          "maxWeiPerClaim": "the max amount per each claim, for example 0.01eth per claim",
          "token": "the token to which will assign the limit",
          "tokenId": "for ERC1155 is the id of the token, else it must be zero"
        }
      },
      "setNumberOfSignaturesNeeded(uint128)": {
        "params": {
          "numberOfSignaturesNeeded": "number of signatures needed to approve a claim (default to 1)"
        }
      },
      "setTrustedForwarder(address)": {
        "details": "Change the address of the trusted forwarder for meta-TX",
        "params": {
          "newForwarder": "The new trustedForwarder"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "trustedForwarder()": {
        "details": "this methods is the same as getTrustedForwarder but used by Biconomy",
        "returns": {
          "_0": "return the address of the trusted forwarder"
        }
      },
      "verifySignature((uint8,bytes32,bytes32),uint256[],uint256,address,address,(uint8,address,bytes)[])": {
        "params": {
          "claimIds": "unique id used to avoid double spending",
          "claims": "list of tokens to do transfer",
          "expiration": "expiration timestamp",
          "from": "source user",
          "sig": "signature part (v,r,s)",
          "to": "destination user"
        },
        "returns": {
          "_0": "the recovered address must match the signing address"
        }
      }
    },
    "stateVariables": {
      "BACKOFFICE_ROLE": {
        "details": "this role is for addresses that help the admin. Can pause the contract, but, only the admin can unpause it."
      },
      "_limits": {
        "details": "configurable global limits for the contract."
      },
      "_perTokenLimitData": {
        "details": "limits applied to each claim per token and tokenId (most useful for EIP1155 tokens)Token -> id -> Limit"
      }
    },
    "title": "This contract gives rewards in any ERC20, ERC721 or ERC1155 when the backend authorizes it via message signing.",
    "version": 1
  },
  "userdoc": {
    "events": {
      "AssetsRecovered(address,(uint8,address,bytes)[],address)": {
        "notice": "This event is emitted when assets are recovered from the contract."
      },
      "Claimed(uint256[],address,address,(uint8,address,bytes)[],address)": {
        "notice": "This event is emitted when a claim occurs."
      },
      "MaxClaimEntriesSet(uint128,address)": {
        "notice": "This event is emitted when the max entries per claim is set"
      },
      "MaxWeiPerClaimSet(address,uint256,uint256,address)": {
        "notice": "This event is emitted when the max wei per claim is set"
      },
      "NumberOfSignaturesNeededSet(uint128,address)": {
        "notice": "This event is emitted when the number of signatures needed to claim is set"
      },
      "RevokedClaims(uint256[],address)": {
        "notice": "This event is emitted when a claim is revoked."
      },
      "TrustedForwarderSet(address,address,address)": {
        "notice": "Emitted when a `newTrustedForwarder` is set, replacing the `oldTrustedForwarder`"
      }
    },
    "kind": "user",
    "methods": {
      "batchClaim(((uint8,bytes32,bytes32)[],uint256[],uint256,address,address,(uint8,address,bytes)[])[])": {
        "notice": "does a lot of claims in batch"
      },
      "claim((uint8,bytes32,bytes32)[],uint256[],uint256,address,address,(uint8,address,bytes)[])": {
        "notice": "verifies the ERC712 signatures and transfer tokens from the source user to the destination user."
      },
      "domainSeparator()": {
        "notice": "EIP712 domain separator"
      },
      "getMaxClaimEntries()": {
        "notice": "get the maximum claim entries per claim"
      },
      "getMaxWeiPerClaim(address,uint256)": {
        "notice": "get maximum Weis that can be claimed at once"
      },
      "getNumberOfSignaturesNeeded()": {
        "notice": "get the needed number of signatures to approve a claim"
      },
      "getTrustedForwarder()": {
        "notice": "return the address of the trusted forwarder"
      },
      "initialize(address,address)": {
        "notice": "initializer method, called during deployment"
      },
      "isClaimed(uint256)": {
        "notice": "return true if already claimed"
      },
      "isTrustedForwarder(address)": {
        "notice": "return true if the forwarder is the trusted forwarder"
      },
      "pause()": {
        "notice": "Triggers stopped state. No more claims are accepted."
      },
      "recoverAssets(address,(uint8,address,bytes)[])": {
        "notice": "let the admin recover tokens from the contract"
      },
      "revokeClaims(uint256[])": {
        "notice": "let the backoffice role to revoke claims so they cannot be used anymore"
      },
      "setMaxClaimEntries(uint128)": {
        "notice": "set the global limits of the contract"
      },
      "setMaxWeiPerClaim(address,uint256,uint256)": {
        "notice": "set the limits per token and tokenId"
      },
      "setNumberOfSignaturesNeeded(uint128)": {
        "notice": "set the global limits of the contract"
      },
      "trustedForwarder()": {
        "notice": "return the address of the trusted forwarder"
      },
      "unpause()": {
        "notice": "Returns to the normal state. Accept claims."
      },
      "verifySignature((uint8,bytes32,bytes32),uint256[],uint256,address,address,(uint8,address,bytes)[])": {
        "notice": "verifies a ERC712 signature for the Claim data type."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 610,
        "contract": "@sandbox-smart-contracts/giveaway/contracts/SignedMultiGiveaway.sol:SignedMultiGiveaway",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 613,
        "contract": "@sandbox-smart-contracts/giveaway/contracts/SignedMultiGiveaway.sol:SignedMultiGiveaway",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2431,
        "contract": "@sandbox-smart-contracts/giveaway/contracts/SignedMultiGiveaway.sol:SignedMultiGiveaway",
        "label": "_hashedName",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 2434,
        "contract": "@sandbox-smart-contracts/giveaway/contracts/SignedMultiGiveaway.sol:SignedMultiGiveaway",
        "label": "_hashedVersion",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 2436,
        "contract": "@sandbox-smart-contracts/giveaway/contracts/SignedMultiGiveaway.sol:SignedMultiGiveaway",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 2438,
        "contract": "@sandbox-smart-contracts/giveaway/contracts/SignedMultiGiveaway.sol:SignedMultiGiveaway",
        "label": "_version",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 2696,
        "contract": "@sandbox-smart-contracts/giveaway/contracts/SignedMultiGiveaway.sol:SignedMultiGiveaway",
        "label": "__gap",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 1817,
        "contract": "@sandbox-smart-contracts/giveaway/contracts/SignedMultiGiveaway.sol:SignedMultiGiveaway",
        "label": "__gap",
        "offset": 0,
        "slot": "53",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2743,
        "contract": "@sandbox-smart-contracts/giveaway/contracts/SignedMultiGiveaway.sol:SignedMultiGiveaway",
        "label": "__gap",
        "offset": 0,
        "slot": "103",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 184,
        "contract": "@sandbox-smart-contracts/giveaway/contracts/SignedMultiGiveaway.sol:SignedMultiGiveaway",
        "label": "_roles",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)"
      },
      {
        "astId": 479,
        "contract": "@sandbox-smart-contracts/giveaway/contracts/SignedMultiGiveaway.sol:SignedMultiGiveaway",
        "label": "__gap",
        "offset": 0,
        "slot": "154",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 33,
        "contract": "@sandbox-smart-contracts/giveaway/contracts/SignedMultiGiveaway.sol:SignedMultiGiveaway",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)4053_storage)"
      },
      {
        "astId": 143,
        "contract": "@sandbox-smart-contracts/giveaway/contracts/SignedMultiGiveaway.sol:SignedMultiGiveaway",
        "label": "__gap",
        "offset": 0,
        "slot": "204",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5839,
        "contract": "@sandbox-smart-contracts/giveaway/contracts/SignedMultiGiveaway.sol:SignedMultiGiveaway",
        "label": "_claimed",
        "offset": 0,
        "slot": "253",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 6217,
        "contract": "@sandbox-smart-contracts/giveaway/contracts/SignedMultiGiveaway.sol:SignedMultiGiveaway",
        "label": "__gap",
        "offset": 0,
        "slot": "254",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 793,
        "contract": "@sandbox-smart-contracts/giveaway/contracts/SignedMultiGiveaway.sol:SignedMultiGiveaway",
        "label": "_paused",
        "offset": 0,
        "slot": "303",
        "type": "t_bool"
      },
      {
        "astId": 898,
        "contract": "@sandbox-smart-contracts/giveaway/contracts/SignedMultiGiveaway.sol:SignedMultiGiveaway",
        "label": "__gap",
        "offset": 0,
        "slot": "304",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4345,
        "contract": "@sandbox-smart-contracts/giveaway/contracts/SignedMultiGiveaway.sol:SignedMultiGiveaway",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "353",
        "type": "t_address"
      },
      {
        "astId": 4457,
        "contract": "@sandbox-smart-contracts/giveaway/contracts/SignedMultiGiveaway.sol:SignedMultiGiveaway",
        "label": "__gap",
        "offset": 0,
        "slot": "354",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1186,
        "contract": "@sandbox-smart-contracts/giveaway/contracts/SignedMultiGiveaway.sol:SignedMultiGiveaway",
        "label": "__gap",
        "offset": 0,
        "slot": "403",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1132,
        "contract": "@sandbox-smart-contracts/giveaway/contracts/SignedMultiGiveaway.sol:SignedMultiGiveaway",
        "label": "__gap",
        "offset": 0,
        "slot": "453",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1445,
        "contract": "@sandbox-smart-contracts/giveaway/contracts/SignedMultiGiveaway.sol:SignedMultiGiveaway",
        "label": "__gap",
        "offset": 0,
        "slot": "503",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4535,
        "contract": "@sandbox-smart-contracts/giveaway/contracts/SignedMultiGiveaway.sol:SignedMultiGiveaway",
        "label": "_limits",
        "offset": 0,
        "slot": "553",
        "type": "t_struct(LimitData)4501_storage"
      },
      {
        "astId": 4543,
        "contract": "@sandbox-smart-contracts/giveaway/contracts/SignedMultiGiveaway.sol:SignedMultiGiveaway",
        "label": "_perTokenLimitData",
        "offset": 0,
        "slot": "554",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(PerTokenLimitData)4496_storage))"
      },
      {
        "astId": 5780,
        "contract": "@sandbox-smart-contracts/giveaway/contracts/SignedMultiGiveaway.sol:SignedMultiGiveaway",
        "label": "__gap",
        "offset": 0,
        "slot": "555",
        "type": "t_array(t_uint256)48_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(PerTokenLimitData)4496_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct SignedMultiGiveaway.PerTokenLimitData))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(PerTokenLimitData)4496_storage)"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)4053_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)4053_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)179_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(PerTokenLimitData)4496_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SignedMultiGiveaway.PerTokenLimitData)",
        "numberOfBytes": "32",
        "value": "t_struct(PerTokenLimitData)4496_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)4053_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 4052,
            "contract": "@sandbox-smart-contracts/giveaway/contracts/SignedMultiGiveaway.sol:SignedMultiGiveaway",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3738_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(LimitData)4501_storage": {
        "encoding": "inplace",
        "label": "struct SignedMultiGiveaway.LimitData",
        "members": [
          {
            "astId": 4498,
            "contract": "@sandbox-smart-contracts/giveaway/contracts/SignedMultiGiveaway.sol:SignedMultiGiveaway",
            "label": "numberOfSignaturesNeeded",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 4500,
            "contract": "@sandbox-smart-contracts/giveaway/contracts/SignedMultiGiveaway.sol:SignedMultiGiveaway",
            "label": "maxClaimEntries",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(PerTokenLimitData)4496_storage": {
        "encoding": "inplace",
        "label": "struct SignedMultiGiveaway.PerTokenLimitData",
        "members": [
          {
            "astId": 4495,
            "contract": "@sandbox-smart-contracts/giveaway/contracts/SignedMultiGiveaway.sol:SignedMultiGiveaway",
            "label": "maxWeiPerClaim",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)179_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 176,
            "contract": "@sandbox-smart-contracts/giveaway/contracts/SignedMultiGiveaway.sol:SignedMultiGiveaway",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 178,
            "contract": "@sandbox-smart-contracts/giveaway/contracts/SignedMultiGiveaway.sol:SignedMultiGiveaway",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)3738_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 3733,
            "contract": "@sandbox-smart-contracts/giveaway/contracts/SignedMultiGiveaway.sol:SignedMultiGiveaway",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3737,
            "contract": "@sandbox-smart-contracts/giveaway/contracts/SignedMultiGiveaway.sol:SignedMultiGiveaway",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}