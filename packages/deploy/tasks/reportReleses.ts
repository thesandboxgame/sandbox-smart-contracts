import {task} from 'hardhat/config';
import {DeploymentsManager} from 'hardhat-deploy/dist/src/DeploymentsManager';
import {dependencies} from '../package.json';
import {Deployment} from 'hardhat-deploy/dist/types';
import {Align, getMarkdownTable, Row} from 'markdown-table-ts';
import * as prettier from 'prettier';
import * as fs from 'fs';

async function printDeployments(
  deployments: {[k: string]: Deployment},
  deps: {[k: string]: string}
) {
  const missing = [];
  const found = [];
  for (const k in deployments) {
    const x = deployments[k];
    if (!x.metadata) {
      missing.push({name: k, err: 'metadata missing'});
      continue;
    }
    const metadata = JSON.parse(x.metadata);
    const compilationTarget = metadata.settings.compilationTarget;
    const file = Object.keys(compilationTarget)[0];
    const dk = Object.keys(deps).filter((x) => file.startsWith(x));
    if (dk.length != 1) {
      missing.push({name: k, err: 'dependency missing', file});
      continue;
    }
    found.push({
      name: k,
      address: x.address,
      package: dk[0],
      version: deps[dk[0]],
      path: Object.keys(compilationTarget)[0],
      contract: Object.values(compilationTarget)[0],
    });
  }
  return {found, missing};
}

task('report', 'report deployments addresses and packages')
  .addOptionalParam('fileName', 'output file', 'releases.md')
  .setAction(async (args: {fileName: string}, hre) => {
    const md = [
      '<!--- This file is autogenerated by hardhat report task -->',
      '# Deployed contracts',
    ];
    for (const networkName in hre.config.networks) {
      const dm = new DeploymentsManager(hre, {
        ...hre.network,
        name: networkName,
        config: hre.config.networks[networkName],
      });
      const deployments = await dm.loadDeployments(false);
      const {found} = await printDeployments(deployments, dependencies);
      if (found.length > 0) {
        const table = getMarkdownTable({
          table: {
            head: ['contract', 'address', 'version', 'path'],
            body: found.map((x) => [
              x.contract,
              x.address,
              x.version,
              x.path,
            ]) as Row[],
          },
          alignment: [Align.Left, Align.Center, Align.Center, Align.Left],
        });
        md.push(`## ${networkName}`);
        md.push(table.toString());
      }
    }
    const report = prettier.format(md.join('\n'), {parser: 'markdown'});
    fs.writeFileSync(args.fileName, report, 'utf-8');
  });
