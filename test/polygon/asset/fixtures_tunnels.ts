import {
  deployments,
  ethers,
  getNamedAccounts,
  getUnnamedAccounts,
} from 'hardhat';
import {AbiCoder} from '@ethersproject/abi';

import {setupUsers, waitFor, expectEventWithArgs, setupUser} from '../../utils';

export const setupAssetERC1155Tunnels = deployments.createFixture(
  async function () {
    await deployments.fixture([
      'PolygonAssetERC1155',
      'Asset',
      'MockPolygonAssetERC1155Tunnel',
      'AssetERC1155Tunnel',
      'FXROOT',
      'FXCHILD',
      'CHECKPOINTMANAGER',
      'MockAssetERC1155Tunnel',
    ]);
    const PolygonAssetERC1155 = await ethers.getContract('PolygonAssetERC1155');
    const AssetERC1155 = await ethers.getContract('Asset');
    const MockPolygonAssetERC1155Tunnel = await ethers.getContract(
      'MockPolygonAssetERC1155Tunnel'
    );
    const AssetERC1155Tunnel = await ethers.getContract('AssetERC1155Tunnel');
    const FxRoot = await ethers.getContract('FXROOT');
    const FxChild = await ethers.getContract('FXCHILD');
    const childChainManager = await ethers.getContract('CHILD_CHAIN_MANAGER');
    const CheckpointManager = await ethers.getContract('CHECKPOINTMANAGER');
    const MockAssetERC1155Tunnel = await ethers.getContract(
      'MockAssetERC1155Tunnel'
    );
    const TRUSTED_FORWARDER = await deployments.get('TRUSTED_FORWARDER');
    const trustedForwarder = await ethers.getContractAt(
      'TestMetaTxForwarder',
      TRUSTED_FORWARDER.address
    );

    const namedAccounts = await getNamedAccounts();
    const unnamedAccounts = await getUnnamedAccounts();

    const otherAccounts = [...unnamedAccounts];
    const minter = otherAccounts[0];
    otherAccounts.splice(0, 1);

    const users = await setupUsers(otherAccounts, {
      PolygonAssetERC1155,
      AssetERC1155,
      MockPolygonAssetERC1155Tunnel,
      AssetERC1155Tunnel,
      FxRoot,
      FxChild,
      MockAssetERC1155Tunnel,
    });
    const deployer = await setupUser(namedAccounts.deployer, {
      PolygonAssetERC1155,
      AssetERC1155,
      MockPolygonAssetERC1155Tunnel,
      AssetERC1155Tunnel,
      FxRoot,
      FxChild,
      CheckpointManager,
      MockAssetERC1155Tunnel,
    });
    const assetAdmin = await setupUser(namedAccounts.assetAdmin, {
      AssetERC1155,
      PolygonAssetERC1155,
    });
    const assetBouncerAdmin = await setupUser(namedAccounts.assetBouncerAdmin, {
      AssetERC1155,
      PolygonAssetERC1155,
    });
    const assetMinter = await setupUser(minter, {
      AssetERC1155,
      PolygonAssetERC1155,
    });

    await assetAdmin.AssetERC1155.setPredicate(MockAssetERC1155Tunnel.address);

    await deployer.FxRoot.setFxChild(FxChild.address);
    await deployer.MockPolygonAssetERC1155Tunnel.setFxRootTunnel(
      MockAssetERC1155Tunnel.address
    );
    await deployer.MockAssetERC1155Tunnel.setFxChildTunnel(
      MockPolygonAssetERC1155Tunnel.address
    );

    await assetBouncerAdmin.PolygonAssetERC1155.setBouncer(
      MockPolygonAssetERC1155Tunnel.address,
      true
    );

    await assetBouncerAdmin.PolygonAssetERC1155.setBouncer(minter, true);

    let id = 0;
    const ipfsHashString = ethers.utils.formatBytes32String('metadataHash');
    // '0x78b9f42c22c3c8b260b781578da3151e8200c741c6b7437bafaff5a9df9b403e';

    const data = '0x';

    async function mintAssetOnL2(
      to: string,
      value: number,
      hash = ipfsHashString
    ) {
      // Asset to be minted
      const creator = to;
      const packId = ++id;
      const supply = value;
      const owner = to;

      const receipt = await waitFor(
        PolygonAssetERC1155.connect(ethers.provider.getSigner(minter))[
          'mint(address,uint40,bytes32,uint256,address,bytes)'
        ](creator, packId, hash, supply, owner, data)
      );

      const transferEvent = await expectEventWithArgs(
        PolygonAssetERC1155,
        receipt,
        'TransferSingle'
      );
      const tokenId = transferEvent.args[3];

      return tokenId;
    }

    async function mintAssetOnL1(
      to: string,
      generatedId: string,
      value: number
    ) {
      // Only the predicate can mint on L1
      // "minter"  used for test minting only, this is put back to MockAssetERC1155Tunnel in tests immediately after mint
      await assetAdmin.AssetERC1155.setPredicate(minter);

      // L1 minting must have metadata passed in as data param
      // Test IDs must also be in expected format (eg as generated by L2 contract) otherwise contract will revert with 'ID_TAKEN'
      const testMetadataHash = ethers.utils.formatBytes32String('metadataHash');
      const MOCK_DATA = new AbiCoder().encode(['bytes32'], [testMetadataHash]);

      const receipt = await waitFor(
        assetMinter.AssetERC1155['mint(address,uint256,uint256,bytes)'](
          to,
          generatedId,
          value,
          MOCK_DATA
        )
      );
      // Change predicate to the actual predicate once user's test assets have been minted
      await assetAdmin.AssetERC1155.setPredicate(
        MockAssetERC1155Tunnel.address
      );

      const transferEvent = await expectEventWithArgs(
        AssetERC1155,
        receipt,
        'TransferSingle'
      );
      const tokenId = transferEvent.args[3];

      return tokenId;
    }

    async function mintMultipleAssetOnL2(
      to: string,
      valueArray: number[],
      hash = ipfsHashString
    ) {
      // Asset to be minted
      const creator = to;
      const packId = ++id;
      const supplies = valueArray;
      const rarity = '0x';
      const owner = to;

      const receipt = await waitFor(
        PolygonAssetERC1155.connect(ethers.provider.getSigner(minter))[
          'mintMultiple(address,uint40,bytes32,uint256[],bytes,address,bytes)'
        ](creator, packId, hash, supplies, rarity, owner, data)
      );

      const transferEvent = await expectEventWithArgs(
        PolygonAssetERC1155,
        receipt,
        'TransferBatch'
      );
      const tokenIds = transferEvent.args[3];

      return tokenIds;
    }

    return {
      users,
      deployer,
      assetAdmin,
      assetMinter,
      PolygonAssetERC1155,
      AssetERC1155,
      MockPolygonAssetERC1155Tunnel,
      AssetERC1155Tunnel,
      mintAssetOnL1,
      mintAssetOnL2,
      mintMultipleAssetOnL2,
      FxRoot,
      FxChild,
      CheckpointManager,
      childChainManager,
      MockAssetERC1155Tunnel,
      trustedForwarder,
    };
  }
);
