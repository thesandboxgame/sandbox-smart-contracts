{
  "address": "0xa958b2feC9aEd97346A30917cCC24213fdb1f36A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC1155",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "initialMetaTx",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "feeCollector",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee10000th",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "authValidator",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeCollector",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee10000th",
          "type": "uint256"
        }
      ],
      "name": "FeeSetup",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "metaTransactionProcessor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "MetaTransactionProcessor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "offerId",
          "type": "uint256"
        }
      ],
      "name": "OfferCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "offerId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pricePaid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feePaid",
          "type": "uint256"
        }
      ],
      "name": "OfferClaimed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AUCTION_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AuctionData_Duration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AuctionData_EndingPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AuctionData_OfferId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AuctionData_Packs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AuctionData_StartedAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AuctionData_StartingPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_UINT256",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_asset",
      "outputs": [
        {
          "internalType": "contract IERC1155",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_fee10000th",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_feeCollector",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_feeLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offerId",
          "type": "uint256"
        }
      ],
      "name": "cancelSellerOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "changeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "buyer",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "purchase",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "auctionData",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "ids",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "backendSignature",
              "type": "bytes"
            }
          ],
          "internalType": "struct AssetSignedAuctionWithAuth.ClaimSellerOfferRequest",
          "name": "input",
          "type": "tuple"
        }
      ],
      "name": "claimSellerOffer",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "buyer",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "purchase",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "auctionData",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "ids",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "backendSignature",
              "type": "bytes"
            }
          ],
          "internalType": "struct AssetSignedAuctionWithAuth.ClaimSellerOfferRequest",
          "name": "input",
          "type": "tuple"
        }
      ],
      "name": "claimSellerOfferViaEIP1271",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "buyer",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "purchase",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "auctionData",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "ids",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "backendSignature",
              "type": "bytes"
            }
          ],
          "internalType": "struct AssetSignedAuctionWithAuth.ClaimSellerOfferRequest",
          "name": "input",
          "type": "tuple"
        }
      ],
      "name": "claimSellerOfferViaEIP1654",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "claimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "isMetaTransactionProcessor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "feeCollector",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee10000th",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "metaTransactionProcessor",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setMetaTransactionProcessor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe8da5b8d98127b4ed9dee02e94cb584ef902a684882bde473f04202ca13e6587",
  "receipt": {
    "to": null,
    "from": "0xA796AE911621E00809E0E7C8f0AD6BF118E5139e",
    "contractAddress": "0xa958b2feC9aEd97346A30917cCC24213fdb1f36A",
    "transactionIndex": 65,
    "gasUsed": "2409154",
    "logsBloom": "0x
    "blockHash": "0x66d8445124737c6850cb4c06052696e3018dbcefc7b859e0363a68f454b2b13c",
    "transactionHash": "0xe8da5b8d98127b4ed9dee02e94cb584ef902a684882bde473f04202ca13e6587",
    "logs": [
      {
        "transactionIndex": 65,
        "blockNumber": 7022640,
        "transactionHash": "0xe8da5b8d98127b4ed9dee02e94cb584ef902a684882bde473f04202ca13e6587",
        "address": "0xa958b2feC9aEd97346A30917cCC24213fdb1f36A",
        "topics": [
          "0x2dc23bbde6e39cbfb61764cee95d51414528b6102d7e4799e6803d9d3062825b"
        ],
        "data": "0x000000000000000000000000f22455c7f2a81e197aecd951f588a9b650f5b28200000000000000000000000000000000000000000000000000000000000000c8",
        "logIndex": 48,
        "blockHash": "0x66d8445124737c6850cb4c06052696e3018dbcefc7b859e0363a68f454b2b13c"
      },
      {
        "transactionIndex": 65,
        "blockNumber": 7022640,
        "transactionHash": "0xe8da5b8d98127b4ed9dee02e94cb584ef902a684882bde473f04202ca13e6587",
        "address": "0xa958b2feC9aEd97346A30917cCC24213fdb1f36A",
        "topics": [
          "0xb21eb88b4e33b3f1281830a7178d74d8aa73220416215726b68ae23d539515cb"
        ],
        "data": "0x00000000000000000000000035055c6c766cc4305d96b94255bebdb3a99376140000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 49,
        "blockHash": "0x66d8445124737c6850cb4c06052696e3018dbcefc7b859e0363a68f454b2b13c"
      }
    ],
    "blockNumber": 7022640,
    "cumulativeGasUsed": "5595234",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf050cDB34C8f39d24eD12678Dc5Ab32BE8672AfE",
    "0x39D01ecc951C2c1f20ba0549e62212659c4d1e06",
    "0x35055c6c766Cc4305D96b94255beBdB3a9937614",
    "0xF22455c7F2a81E197AecD951F588a9B650f5b282",
    200,
    "0xD3999edf36481d8f6636BB41fbdC936eA4BF5658"
  ],
  "numDeployments": 1,
  "solcInputHash": "a5a77efa1940d761615c2cf4de5ed1f3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialMetaTx\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"feeCollector\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee10000th\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"authValidator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeCollector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee10000th\",\"type\":\"uint256\"}],\"name\":\"FeeSetup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"metaTransactionProcessor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"MetaTransactionProcessor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"}],\"name\":\"OfferCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pricePaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feePaid\",\"type\":\"uint256\"}],\"name\":\"OfferClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AUCTION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AuctionData_Duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AuctionData_EndingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AuctionData_OfferId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AuctionData_Packs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AuctionData_StartedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AuctionData_StartingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_UINT256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_asset\",\"outputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fee10000th\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feeCollector\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feeLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"}],\"name\":\"cancelSellerOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"purchase\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"auctionData\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"backendSignature\",\"type\":\"bytes\"}],\"internalType\":\"struct AssetSignedAuctionWithAuth.ClaimSellerOfferRequest\",\"name\":\"input\",\"type\":\"tuple\"}],\"name\":\"claimSellerOffer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"purchase\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"auctionData\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"backendSignature\",\"type\":\"bytes\"}],\"internalType\":\"struct AssetSignedAuctionWithAuth.ClaimSellerOfferRequest\",\"name\":\"input\",\"type\":\"tuple\"}],\"name\":\"claimSellerOfferViaEIP1271\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"purchase\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"auctionData\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"backendSignature\",\"type\":\"bytes\"}],\"internalType\":\"struct AssetSignedAuctionWithAuth.ClaimSellerOfferRequest\",\"name\":\"input\",\"type\":\"tuple\"}],\"name\":\"claimSellerOfferViaEIP1654\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isMetaTransactionProcessor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"feeCollector\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee10000th\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"metaTransactionProcessor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setMetaTransactionProcessor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"cancelSellerOffer(uint256)\":{\"params\":{\"offerId\":\"offer to cancel\"}},\"changeAdmin(address)\":{\"details\":\"Change the administrator to be `newAdmin`.\",\"params\":{\"newAdmin\":\"The address of the new administrator.\"}},\"claimSellerOffer((address,address,address,uint256[],uint256[],uint256[],uint256[],bytes,bytes))\":{\"params\":{\"input\":\"Claim Seller Offer Request\"}},\"claimSellerOfferViaEIP1271((address,address,address,uint256[],uint256[],uint256[],uint256[],bytes,bytes))\":{\"params\":{\"input\":\"Claim Seller Offer Request\"}},\"claimSellerOfferViaEIP1654((address,address,address,uint256[],uint256[],uint256[],uint256[],bytes,bytes))\":{\"params\":{\"input\":\"Claim Seller Offer Request\"}},\"getAdmin()\":{\"details\":\"Get the current administrator of this contract.\",\"returns\":{\"_0\":\"The current administrator of this contract.\"}},\"isMetaTransactionProcessor(address)\":{\"params\":{\"who\":\"The address to query.\"},\"returns\":{\"_0\":\"whether the address has meta-transaction execution rights.\"}},\"setFee(address,uint256)\":{\"params\":{\"fee10000th\":\"fee in 10,000th\",\"feeCollector\":\"address receiving the fee\"}},\"setMetaTransactionProcessor(address,bool)\":{\"params\":{\"enabled\":\"set whether the metaTransactionProcessor is enabled or disabled.\",\"metaTransactionProcessor\":\"address that will be given/removed metaTransactionProcessor rights.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"cancelSellerOffer(uint256)\":{\"notice\":\"cancel a offer previously signed, new offer need to use a id not used yet\"},\"claimSellerOffer((address,address,address,uint256[],uint256[],uint256[],uint256[],bytes,bytes))\":{\"notice\":\"claim offer using EIP712\"},\"claimSellerOfferViaEIP1271((address,address,address,uint256[],uint256[],uint256[],uint256[],bytes,bytes))\":{\"notice\":\"claim offer using EIP712 and EIP1271 signature verification scheme\"},\"claimSellerOfferViaEIP1654((address,address,address,uint256[],uint256[],uint256[],uint256[],bytes,bytes))\":{\"notice\":\"claim offer using EIP712 and EIP1654 signature verification scheme\"},\"isMetaTransactionProcessor(address)\":{\"notice\":\"check whether address `who` is given meta-transaction execution rights.\"},\"setFee(address,uint256)\":{\"notice\":\"set fee parameters\"},\"setMetaTransactionProcessor(address,bool)\":{\"notice\":\"Enable or disable the ability of `metaTransactionProcessor` to perform meta-tx (metaTransactionProcessor rights).\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/solc_0.8/asset/AssetSignedAuctionWithAuth.sol\":\"AssetSignedAuctionWithAuth\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-0.8/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"src/solc_0.8/asset/AssetSignedAuctionWithAuth.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.2;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts-0.8/token/ERC20/IERC20.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts-0.8/utils/Address.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts-0.8/security/ReentrancyGuard.sol\\\";\\nimport {SigUtil} from \\\"../common/Libraries/SigUtil.sol\\\";\\nimport {PriceUtil} from \\\"../common/Libraries/PriceUtil.sol\\\";\\nimport {TheSandbox712} from \\\"../common/Base/TheSandbox712.sol\\\";\\nimport {MetaTransactionReceiver} from \\\"../common/BaseWithStorage/MetaTransactionReceiver.sol\\\";\\nimport {ERC1271} from \\\"../common/interfaces/ERC1271.sol\\\";\\nimport {ERC1271Constants} from \\\"../common/interfaces/ERC1271Constants.sol\\\";\\nimport {ERC1654} from \\\"../common/interfaces/ERC1654.sol\\\";\\nimport {ERC1654Constants} from \\\"../common/interfaces/ERC1654Constants.sol\\\";\\nimport {IAuthValidator} from \\\"../common/interfaces/IAuthValidator.sol\\\";\\nimport {IERC1155} from \\\"../common/interfaces/IERC1155.sol\\\";\\n\\ncontract AssetSignedAuctionWithAuth is\\n    ReentrancyGuard,\\n    ERC1654Constants,\\n    ERC1271Constants,\\n    TheSandbox712,\\n    MetaTransactionReceiver\\n{\\n    struct ClaimSellerOfferRequest {\\n        address buyer;\\n        address payable seller;\\n        address token;\\n        uint256[] purchase;\\n        uint256[] auctionData;\\n        uint256[] ids;\\n        uint256[] amounts;\\n        bytes signature;\\n        bytes backendSignature;\\n    }\\n\\n    enum SignatureType {DIRECT, EIP1654, EIP1271}\\n\\n    bytes32 public constant AUCTION_TYPEHASH =\\n        keccak256(\\n            \\\"Auction(address to,address from,address token,uint256 offerId,uint256 startingPrice,uint256 endingPrice,uint256 startedAt,uint256 duration,uint256 packs,bytes ids,bytes amounts)\\\"\\n        );\\n\\n    event OfferClaimed(\\n        address indexed seller,\\n        address indexed buyer,\\n        uint256 indexed offerId,\\n        uint256 amount,\\n        uint256 pricePaid,\\n        uint256 feePaid\\n    );\\n    event OfferCancelled(address indexed seller, uint256 indexed offerId);\\n\\n    uint256 public constant MAX_UINT256 = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    // Stack too deep, grouping parameters\\n    // AuctionData:\\n    uint256 public constant AuctionData_OfferId = 0;\\n    uint256 public constant AuctionData_StartingPrice = 1;\\n    uint256 public constant AuctionData_EndingPrice = 2;\\n    uint256 public constant AuctionData_StartedAt = 3;\\n    uint256 public constant AuctionData_Duration = 4;\\n    uint256 public constant AuctionData_Packs = 5;\\n\\n    mapping(address => mapping(uint256 => uint256)) public claimed;\\n\\n    IAuthValidator internal _authValidator;\\n    IERC1155 public _asset;\\n    uint256 public _fee10000th = 0;\\n    uint256 public _feeLimit = 500; // 5%\\n    address payable public _feeCollector;\\n\\n    event FeeSetup(address feeCollector, uint256 fee10000th);\\n\\n    constructor(\\n        IERC1155 asset,\\n        address admin,\\n        address initialMetaTx,\\n        address payable feeCollector,\\n        uint256 fee10000th,\\n        address authValidator\\n    ) TheSandbox712() {\\n        require(fee10000th <= _feeLimit, \\\"Fee above the limit\\\");\\n        _asset = asset;\\n        _feeCollector = feeCollector;\\n        _fee10000th = fee10000th;\\n        emit FeeSetup(feeCollector, fee10000th);\\n        _admin = admin;\\n        _setMetaTransactionProcessor(initialMetaTx, true);\\n        _authValidator = IAuthValidator(authValidator);\\n    }\\n\\n    // check backend signature to avoid front-running\\n    modifier isAuthValid(bytes memory signature, bytes32 hashedData) {\\n        require(_authValidator.isAuthValid(signature, hashedData), \\\"INVALID_AUTH\\\");\\n        _;\\n    }\\n\\n    /// @notice set fee parameters\\n    /// @param feeCollector address receiving the fee\\n    /// @param fee10000th fee in 10,000th\\n    function setFee(address payable feeCollector, uint256 fee10000th) external {\\n        require(feeCollector != address(0), \\\"feeCollector cannot be Zero address\\\");\\n        require(msg.sender == _admin, \\\"only admin can change fee\\\");\\n        require(fee10000th <= _feeLimit, \\\"Fee above the limit\\\");\\n        _feeCollector = feeCollector;\\n        _fee10000th = fee10000th;\\n        emit FeeSetup(feeCollector, fee10000th);\\n    }\\n\\n    /// @notice claim offer using EIP712\\n    /// @param input Claim Seller Offer Request\\n    function claimSellerOffer(ClaimSellerOfferRequest memory input)\\n        external\\n        payable\\n        isAuthValid(\\n            input.backendSignature,\\n            _hashAuction(input.buyer, input.seller, input.token, input.auctionData, input.ids, input.amounts)\\n        )\\n    {\\n        _verifyParameters(\\n            input.buyer,\\n            input.seller,\\n            input.token,\\n            input.purchase[0],\\n            input.auctionData,\\n            input.ids,\\n            input.amounts\\n        );\\n        _ensureCorrectSigner(\\n            address(0),\\n            input.seller,\\n            input.token,\\n            input.auctionData,\\n            input.ids,\\n            input.amounts,\\n            input.signature,\\n            SignatureType.DIRECT\\n        );\\n        _executeDeal(\\n            input.token,\\n            input.purchase,\\n            input.buyer,\\n            input.seller,\\n            input.auctionData,\\n            input.ids,\\n            input.amounts\\n        );\\n    }\\n\\n    /// @notice claim offer using EIP712 and EIP1271 signature verification scheme\\n    /// @param input Claim Seller Offer Request\\n    function claimSellerOfferViaEIP1271(ClaimSellerOfferRequest memory input)\\n        external\\n        payable\\n        isAuthValid(\\n            input.backendSignature,\\n            _hashAuction(input.buyer, input.seller, input.token, input.auctionData, input.ids, input.amounts)\\n        )\\n    {\\n        _verifyParameters(\\n            input.buyer,\\n            input.seller,\\n            input.token,\\n            input.purchase[0],\\n            input.auctionData,\\n            input.ids,\\n            input.amounts\\n        );\\n        _ensureCorrectSigner(\\n            address(0),\\n            input.seller,\\n            input.token,\\n            input.auctionData,\\n            input.ids,\\n            input.amounts,\\n            input.signature,\\n            SignatureType.EIP1271\\n        );\\n        _executeDeal(\\n            input.token,\\n            input.purchase,\\n            input.buyer,\\n            input.seller,\\n            input.auctionData,\\n            input.ids,\\n            input.amounts\\n        );\\n    }\\n\\n    /// @notice claim offer using EIP712 and EIP1654 signature verification scheme\\n    /// @param input Claim Seller Offer Request\\n    function claimSellerOfferViaEIP1654(ClaimSellerOfferRequest memory input)\\n        external\\n        payable\\n        isAuthValid(\\n            input.backendSignature,\\n            _hashAuction(input.buyer, input.seller, input.token, input.auctionData, input.ids, input.amounts)\\n        )\\n    {\\n        _verifyParameters(\\n            input.buyer,\\n            input.seller,\\n            input.token,\\n            input.purchase[0],\\n            input.auctionData,\\n            input.ids,\\n            input.amounts\\n        );\\n        _ensureCorrectSigner(\\n            address(0),\\n            input.seller,\\n            input.token,\\n            input.auctionData,\\n            input.ids,\\n            input.amounts,\\n            input.signature,\\n            SignatureType.EIP1654\\n        );\\n        _executeDeal(\\n            input.token,\\n            input.purchase,\\n            input.buyer,\\n            input.seller,\\n            input.auctionData,\\n            input.ids,\\n            input.amounts\\n        );\\n    }\\n\\n    /// @notice cancel a offer previously signed, new offer need to use a id not used yet\\n    /// @param offerId offer to cancel\\n    function cancelSellerOffer(uint256 offerId) external {\\n        require(claimed[msg.sender][offerId] != MAX_UINT256, \\\"Sell offer was already cancelled\\\");\\n        claimed[msg.sender][offerId] = MAX_UINT256;\\n        emit OfferCancelled(msg.sender, offerId);\\n    }\\n\\n    function _executeDeal(\\n        address token,\\n        uint256[] memory purchase,\\n        address buyer,\\n        address payable seller,\\n        uint256[] memory auctionData,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal nonReentrant {\\n        uint256 offer =\\n            PriceUtil.calculateCurrentPrice(\\n                auctionData[AuctionData_StartingPrice],\\n                auctionData[AuctionData_EndingPrice],\\n                auctionData[AuctionData_Duration],\\n                block.timestamp - auctionData[AuctionData_StartedAt]\\n            ) * purchase[0];\\n        claimed[seller][auctionData[AuctionData_OfferId]] =\\n            claimed[seller][auctionData[AuctionData_OfferId]] +\\n            purchase[0];\\n\\n        uint256 fee = 0;\\n        if (_fee10000th > 0) {\\n            fee = PriceUtil.calculateFee(offer, _fee10000th);\\n        }\\n\\n        uint256 total = offer + fee;\\n        require(total <= purchase[1], \\\"offer exceeds max amount to spend\\\");\\n\\n        if (token != address(0)) {\\n            require(IERC20(token).transferFrom(buyer, seller, offer), \\\"failed to transfer token price\\\");\\n            if (fee > 0) {\\n                require(IERC20(token).transferFrom(buyer, _feeCollector, fee), \\\"failed to collect fee\\\");\\n            }\\n        } else {\\n            require(msg.value >= total, \\\"ETH < total\\\");\\n            if (msg.value > total) {\\n                Address.sendValue(payable(msg.sender), msg.value - total);\\n            }\\n            Address.sendValue(seller, offer);\\n            if (fee > 0) {\\n                Address.sendValue(_feeCollector, fee);\\n            }\\n        }\\n\\n        uint256[] memory packAmounts = new uint256[](amounts.length);\\n        for (uint256 i = 0; i < packAmounts.length; i++) {\\n            packAmounts[i] = amounts[i] * purchase[0];\\n        }\\n        _asset.safeBatchTransferFrom(seller, buyer, ids, packAmounts, \\\"\\\");\\n        emit OfferClaimed(seller, buyer, auctionData[AuctionData_OfferId], purchase[0], offer, fee);\\n    }\\n\\n    function _ensureCorrectSigner(\\n        address to,\\n        address from,\\n        address token,\\n        uint256[] memory auctionData,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory signature,\\n        SignatureType signatureType\\n    ) internal view {\\n        bytes memory dataToHash;\\n\\n        dataToHash = abi.encodePacked(\\n            \\\"\\\\x19\\\\x01\\\",\\n            _DOMAIN_SEPARATOR,\\n            _hashAuction(to, from, token, auctionData, ids, amounts)\\n        );\\n\\n        if (signatureType == SignatureType.EIP1271) {\\n            require(\\n                ERC1271(from).isValidSignature(dataToHash, signature) == ERC1271_MAGICVALUE,\\n                \\\"invalid 1271 signature\\\"\\n            );\\n        } else if (signatureType == SignatureType.EIP1654) {\\n            require(\\n                ERC1654(from).isValidSignature(keccak256(dataToHash), signature) == ERC1654_MAGICVALUE,\\n                \\\"invalid 1654 signature\\\"\\n            );\\n        } else {\\n            address signer = SigUtil.recover(keccak256(dataToHash), signature);\\n            require(signer == from, \\\"signer != from\\\");\\n        }\\n    }\\n\\n    function _verifyParameters(\\n        address buyer,\\n        address payable seller,\\n        address token,\\n        uint256 buyAmount,\\n        uint256[] memory auctionData,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal view {\\n        require(ids.length == amounts.length, \\\"ids and amounts length not matching\\\");\\n        require(\\n            buyer == msg.sender || (token != address(0) && _metaTransactionContracts[msg.sender]),\\n            \\\"not authorized\\\"\\n        );\\n        uint256 amountAlreadyClaimed = claimed[seller][auctionData[AuctionData_OfferId]];\\n        require(amountAlreadyClaimed != MAX_UINT256, \\\"Auction cancelled\\\");\\n\\n        uint256 total = amountAlreadyClaimed + buyAmount;\\n        require(total <= auctionData[AuctionData_Packs], \\\"Buy amount exceeds sell amount\\\");\\n\\n        require(auctionData[AuctionData_StartedAt] <= block.timestamp, \\\"Auction didn't start yet\\\");\\n        require(\\n            auctionData[AuctionData_StartedAt] + auctionData[AuctionData_Duration] > block.timestamp,\\n            \\\"Auction finished\\\"\\n        );\\n    }\\n\\n    function _hashAuction(\\n        address to,\\n        address from,\\n        address token,\\n        uint256[] memory auctionData,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    AUCTION_TYPEHASH,\\n                    to,\\n                    from,\\n                    token,\\n                    auctionData[AuctionData_OfferId],\\n                    auctionData[AuctionData_StartingPrice],\\n                    auctionData[AuctionData_EndingPrice],\\n                    auctionData[AuctionData_StartedAt],\\n                    auctionData[AuctionData_Duration],\\n                    auctionData[AuctionData_Packs],\\n                    keccak256(abi.encodePacked(ids)),\\n                    keccak256(abi.encodePacked(amounts))\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xf2d99232acf0a3ca49f7af7dd415cffc264b11fb05fe2cfa0f14a0fc51577f01\",\"license\":\"MIT\"},\"src/solc_0.8/common/Base/TheSandbox712.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\ncontract TheSandbox712 {\\n    bytes32 internal constant EIP712DOMAIN_TYPEHASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 public immutable _DOMAIN_SEPARATOR;\\n\\n    constructor() {\\n        _DOMAIN_SEPARATOR = keccak256(\\n            // chainId 137 = Polygon\\n            abi.encode(EIP712DOMAIN_TYPEHASH, keccak256(\\\"The Sandbox\\\"), keccak256(\\\"1\\\"), block.chainid, address(this))\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xcce9b62ae9ce479068466a4c304eba5e16f146173bb3fab16f4f8c8171769be5\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/MetaTransactionReceiver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"./WithAdmin.sol\\\";\\n\\ncontract MetaTransactionReceiver is WithAdmin {\\n    mapping(address => bool) internal _metaTransactionContracts;\\n    event MetaTransactionProcessor(address metaTransactionProcessor, bool enabled);\\n\\n    /// @notice Enable or disable the ability of `metaTransactionProcessor` to perform meta-tx (metaTransactionProcessor rights).\\n    /// @param metaTransactionProcessor address that will be given/removed metaTransactionProcessor rights.\\n    /// @param enabled set whether the metaTransactionProcessor is enabled or disabled.\\n    function setMetaTransactionProcessor(address metaTransactionProcessor, bool enabled) external {\\n        require(msg.sender == _admin, \\\"only admin can setup metaTransactionProcessors\\\");\\n        _setMetaTransactionProcessor(metaTransactionProcessor, enabled);\\n    }\\n\\n    function _setMetaTransactionProcessor(address metaTransactionProcessor, bool enabled) internal {\\n        _metaTransactionContracts[metaTransactionProcessor] = enabled;\\n        emit MetaTransactionProcessor(metaTransactionProcessor, enabled);\\n    }\\n\\n    /// @notice check whether address `who` is given meta-transaction execution rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has meta-transaction execution rights.\\n    function isMetaTransactionProcessor(address who) external view returns (bool) {\\n        return _metaTransactionContracts[who];\\n    }\\n}\\n\",\"keccak256\":\"0xd2255e4043d825de65b6cf5dd77a928f1924f40e3debd41c9f372e6d1cc52b39\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/WithAdmin.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\ncontract WithAdmin {\\n    address internal _admin;\\n\\n    /// @dev Emits when the contract administrator is changed.\\n    /// @param oldAdmin The address of the previous administrator.\\n    /// @param newAdmin The address of the new administrator.\\n    event AdminChanged(address oldAdmin, address newAdmin);\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == _admin, \\\"ADMIN_ONLY\\\");\\n        _;\\n    }\\n\\n    /// @dev Get the current administrator of this contract.\\n    /// @return The current administrator of this contract.\\n    function getAdmin() external view returns (address) {\\n        return _admin;\\n    }\\n\\n    /// @dev Change the administrator to be `newAdmin`.\\n    /// @param newAdmin The address of the new administrator.\\n    function changeAdmin(address newAdmin) external {\\n        require(msg.sender == _admin, \\\"ADMIN_ACCESS_DENIED\\\");\\n        emit AdminChanged(_admin, newAdmin);\\n        _admin = newAdmin;\\n    }\\n}\\n\",\"keccak256\":\"0xf2ce40f1b23052a50a5b2d5ad61fbc04ab6c9fb2e5b1dba17ccddf4507e4649f\",\"license\":\"MIT\"},\"src/solc_0.8/common/Libraries/PriceUtil.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"./SafeMathWithRequire.sol\\\";\\n\\nlibrary PriceUtil {\\n    using SafeMathWithRequire for uint256;\\n    using SafeMath for uint256;\\n\\n    function calculateCurrentPrice(\\n        uint256 startingPrice,\\n        uint256 endingPrice,\\n        uint256 duration,\\n        uint256 secondsPassed\\n    ) internal pure returns (uint256) {\\n        if (secondsPassed > duration) {\\n            return endingPrice;\\n        }\\n        if (endingPrice == startingPrice) {\\n            return endingPrice;\\n        } else if (endingPrice > startingPrice) {\\n            return startingPrice + ((endingPrice - startingPrice) * secondsPassed) / duration;\\n        } else {\\n            return startingPrice - ((startingPrice - endingPrice) * secondsPassed) / duration;\\n        }\\n    }\\n\\n    function calculateFee(uint256 price, uint256 fee10000th) internal pure returns (uint256) {\\n        // _fee < 10000, so the result will be <= price\\n        return (price * fee10000th) / 10000;\\n    }\\n}\\n\",\"keccak256\":\"0x517a5d3db342464db94feba8c61331d6d04f4adaa02836233c1d3e403d71f317\",\"license\":\"MIT\"},\"src/solc_0.8/common/Libraries/SafeMathWithRequire.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-0.8/utils/math/SafeMath.sol\\\";\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that revert\\n */\\nlibrary SafeMathWithRequire {\\n    using SafeMath for uint256;\\n\\n    uint256 private constant DECIMALS_18 = 1000000000000000000;\\n    uint256 private constant DECIMALS_12 = 1000000000000;\\n    uint256 private constant DECIMALS_9 = 1000000000;\\n    uint256 private constant DECIMALS_6 = 1000000;\\n\\n    function sqrt6(uint256 a) internal pure returns (uint256 c) {\\n        a = a.mul(DECIMALS_12);\\n        uint256 tmp = a.add(1) / 2;\\n        c = a;\\n        // tmp cannot be zero unless a = 0 which skip the loop\\n        while (tmp < c) {\\n            c = tmp;\\n            tmp = ((a / tmp) + tmp) / 2;\\n        }\\n    }\\n\\n    function sqrt3(uint256 a) internal pure returns (uint256 c) {\\n        a = a.mul(DECIMALS_6);\\n        uint256 tmp = a.add(1) / 2;\\n        c = a;\\n        // tmp cannot be zero unless a = 0 which skip the loop\\n        while (tmp < c) {\\n            c = tmp;\\n            tmp = ((a / tmp) + tmp) / 2;\\n        }\\n    }\\n\\n    function cbrt6(uint256 a) internal pure returns (uint256 c) {\\n        a = a.mul(DECIMALS_18);\\n        uint256 tmp = a.add(2) / 3;\\n        c = a;\\n        // tmp cannot be zero unless a = 0 which skip the loop\\n        while (tmp < c) {\\n            c = tmp;\\n            uint256 tmpSquare = tmp**2;\\n            require(tmpSquare > tmp, \\\"overflow\\\");\\n            tmp = ((a / tmpSquare) + (tmp * 2)) / 3;\\n        }\\n        return c;\\n    }\\n\\n    function cbrt3(uint256 a) internal pure returns (uint256 c) {\\n        a = a.mul(DECIMALS_9);\\n        uint256 tmp = a.add(2) / 3;\\n        c = a;\\n        // tmp cannot be zero unless a = 0 which skip the loop\\n        while (tmp < c) {\\n            c = tmp;\\n            uint256 tmpSquare = tmp**2;\\n            require(tmpSquare > tmp, \\\"overflow\\\");\\n            tmp = ((a / tmpSquare) + (tmp * 2)) / 3;\\n        }\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xf84c167fc04b9aa4ae5699388f47eda3b084c493d1f398bf5e2d3b1a09662813\",\"license\":\"MIT\"},\"src/solc_0.8/common/Libraries/SigUtil.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nlibrary SigUtil {\\n    function recover(bytes32 hash, bytes memory sig) internal pure returns (address recovered) {\\n        require(sig.length == 65, \\\"incorrect signature length\\\");\\n\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            r := mload(add(sig, 32))\\n            s := mload(add(sig, 64))\\n            v := byte(0, mload(add(sig, 96)))\\n        }\\n\\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\\n        if (v < 27) {\\n            v += 27;\\n        }\\n        require(v == 27 || v == 28, \\\"version of signature should be 27 or 28\\\");\\n\\n        recovered = ecrecover(hash, v, r, s);\\n        require(recovered != address(0), \\\"incorrect address\\\");\\n    }\\n\\n    function recoverWithZeroOnFailure(bytes32 hash, bytes memory sig) internal pure returns (address) {\\n        if (sig.length != 65) {\\n            return (address(0));\\n        }\\n\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            r := mload(add(sig, 32))\\n            s := mload(add(sig, 64))\\n            v := byte(0, mload(add(sig, 96)))\\n        }\\n\\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\\n        if (v < 27) {\\n            v += 27;\\n        }\\n\\n        if (v != 27 && v != 28) {\\n            return (address(0));\\n        } else {\\n            return ecrecover(hash, v, r, s);\\n        }\\n    }\\n\\n    // Builds a prefixed hash to mimic the behavior of eth_sign.\\n    function prefixed(bytes32 hash) internal pure returns (bytes memory) {\\n        return abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash);\\n    }\\n}\\n\",\"keccak256\":\"0xeb56061abaa5bab5b3959ae2c440e5957e929fd6259d96c82ca0f32d22e45715\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/ERC1271.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\ninterface ERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param data Arbitrary length data signed on the behalf of address(this)\\n     * @param signature Signature byte array associated with _data\\n     *\\n     * MUST return the bytes4 magic value 0x20c13b0b when function passes.\\n     * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n     * MUST allow external calls\\n     */\\n    function isValidSignature(bytes memory data, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xf6d6d04de22cb46dfe00551c3ad07658c4260edc5b896d0a5ca9bdb4a3534e1a\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/ERC1271Constants.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\ncontract ERC1271Constants {\\n    bytes4 internal constant ERC1271_MAGICVALUE = 0x20c13b0b;\\n}\\n\",\"keccak256\":\"0x2e086e4ae182b85cce4870cc72622839297f835c553fd6ab2eda4502e7500552\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/ERC1654.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\ninterface ERC1654 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided hash\\n     * @param hash 32 bytes hash to be signed\\n     * @param signature Signature byte array associated with hash\\n     * @return magicValue - 0x1626ba7e if valid else 0x00000000\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x945aa3dc5607a05937b6518071f35fa1e8ec1a33cbf8d739b53af259d13d028e\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/ERC1654Constants.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\ncontract ERC1654Constants {\\n    bytes4 internal constant ERC1654_MAGICVALUE = 0x1626ba7e;\\n}\\n\",\"keccak256\":\"0xfa2f917ad89df6c024b74ff945214ddadff05bda9ec7bf8719b7e712d365b73b\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IAuthValidator.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\ninterface IAuthValidator {\\n    function isAuthValid(bytes calldata signature, bytes32 hashedData) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xda80e2d1636683fe3f7a2a92d33f73bb57cafe68d58b8539bcfcb99d7be55a29\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC1155.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\n/**\\n    @title ERC-1155 Multi Token Standard\\n    @dev See https://eips.ethereum.org/EIPS/eip-1155\\n    Note: The ERC-165 identifier for this interface is 0xd9b67a26.\\n */\\ninterface IERC1155 {\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n        @notice Transfers `value` amount of an `id` from  `from` to `to`  (with safety call).\\n        @dev Caller must be approved to manage the tokens being transferred out of the `from` account (see \\\"Approval\\\" section of the standard).\\n        MUST revert if `to` is the zero address.\\n        MUST revert if balance of holder for token `id` is lower than the `value` sent.\\n        MUST revert on any other error.\\n        MUST emit the `TransferSingle` event to reflect the balance change (see \\\"Safe Transfer Rules\\\" section of the standard).\\n        After the above conditions are met, this function MUST check if `to` is a smart contract (e.g. code size > 0). If so, it MUST call `onERC1155Received` on `to` and act appropriately (see \\\"Safe Transfer Rules\\\" section of the standard).\\n        @param from    Source address\\n        @param to      Target address\\n        @param id      ID of the token type\\n        @param value   Transfer amount\\n        @param data    Additional data with no specified format, MUST be sent unaltered in call to `onERC1155Received` on `to`\\n    */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n        @notice Transfers `values` amount(s) of `ids` from the `from` address to the `to` address specified (with safety call).\\n        @dev Caller must be approved to manage the tokens being transferred out of the `from` account (see \\\"Approval\\\" section of the standard).\\n        MUST revert if `to` is the zero address.\\n        MUST revert if length of `ids` is not the same as length of `values`.\\n        MUST revert if any of the balance(s) of the holder(s) for token(s) in `ids` is lower than the respective amount(s) in `values` sent to the recipient.\\n        MUST revert on any other error.\\n        MUST emit `TransferSingle` or `TransferBatch` event(s) such that all the balance changes are reflected (see \\\"Safe Transfer Rules\\\" section of the standard).\\n        Balance changes and events MUST follow the ordering of the arrays (_ids[0]/_values[0] before _ids[1]/_values[1], etc).\\n        After the above conditions for the transfer(s) in the batch are met, this function MUST check if `to` is a smart contract (e.g. code size > 0). If so, it MUST call the relevant `ERC1155TokenReceiver` hook(s) on `to` and act appropriately (see \\\"Safe Transfer Rules\\\" section of the standard).\\n        @param from    Source address\\n        @param to      Target address\\n        @param ids     IDs of each token type (order and length must match _values array)\\n        @param values  Transfer amounts per token type (order and length must match _ids array)\\n        @param data    Additional data with no specified format, MUST be sent unaltered in call to the `ERC1155TokenReceiver` hook(s) on `to`\\n    */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n        @notice Get the balance of an account's tokens.\\n        @param owner  The address of the token holder\\n        @param id     ID of the token\\n        @return        The _owner's balance of the token type requested\\n     */\\n    function balanceOf(address owner, uint256 id) external view returns (uint256);\\n\\n    /**\\n        @notice Get the balance of multiple account/token pairs\\n        @param owners The addresses of the token holders\\n        @param ids    ID of the tokens\\n        @return        The _owner's balance of the token types requested (i.e. balance for each (owner, id) pair)\\n     */\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n        @notice Enable or disable approval for a third party (\\\"operator\\\") to manage all of the caller's tokens.\\n        @dev MUST emit the ApprovalForAll event on success.\\n        @param operator  Address to add to the set of authorized operators\\n        @param approved  True if the operator is approved, false to revoke approval\\n    */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n        @notice Queries the approval status of an operator for a given owner.\\n        @param owner     The owner of the tokens\\n        @param operator  Address of authorized operator\\n        @return           True if the operator is approved, false if not\\n    */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa6d934fefc6b781ce1cf0e3d9ab1abedbedfc7d07ab1cc7ff63ba77cae3a5865\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405260006006556101f46007553480156200001c57600080fd5b5060405162002a6338038062002a638339810160408190526200003f9162000260565b6001600055604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527fb6d6e92dd180af2016b82e90468a3c0304654e472729f2809672fa0046d68006918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160408051601f1981840301815291905280516020909101206080526007548211156200013d5760405162461bcd60e51b815260206004820152601360248201527f4665652061626f766520746865206c696d697400000000000000000000000000604482015260640160405180910390fd5b600580546001600160a01b038881166001600160a01b031992831617909255600880549286169290911682179055600683905560408051918252602082018490527f2dc23bbde6e39cbfb61764cee95d51414528b6102d7e4799e6803d9d3062825b910160405180910390a1600180546001600160a01b0319166001600160a01b038716178155620001d1908590620001fd565b600480546001600160a01b0319166001600160a01b039290921691909117905550620003009350505050565b6001600160a01b038216600081815260026020908152604091829020805460ff19168515159081179091558251938452908301527fb21eb88b4e33b3f1281830a7178d74d8aa73220416215726b68ae23d539515cb910160405180910390a15050565b60008060008060008060c0878903121562000279578182fd5b86516200028681620002e7565b60208801519096506200029981620002e7565b6040880151909550620002ac81620002e7565b6060880151909450620002bf81620002e7565b608088015160a08901519194509250620002d981620002e7565b809150509295509295509295565b6001600160a01b0381168114620002fd57600080fd5b50565b608051612740620003236000396000818161039c01526111e401526127406000f3fe6080604052600436106101805760003560e01c80638905bc9a116100d6578063dc0c81b51161007f578063e7de635e11610059578063e7de635e1461040e578063fb43863914610424578063fcea5e291461043957610180565b8063dc0c81b51461038a578063dc5074af146103be578063e55156b5146103ee57610180565b80639ccb6837116100b05780639ccb68371461034f578063b04ce83a14610362578063b3da2e5a1461037557610180565b80638905bc9a146102fa5780638a04af6a1461030f5780638f2839701461032f57610180565b80634a56c7191161013857806354ef2fad1161011257806354ef2fad14610284578063642ab1e6146102bc5780636e9960c3146102dc57610180565b80634a56c719146102035780634dd6c8de1461023757806353933d4f1461026f57610180565b8063249fb1e611610169578063249fb1e6146101c357806333a581d2146101d8578063401df593146101ee57610180565b806308a1b9601461018557806317fe50921461019a575b600080fd5b6101986101933660046122f0565b610459565b005b3480156101a657600080fd5b506101b060065481565b6040519081526020015b60405180910390f35b3480156101cf57600080fd5b506101b0600081565b3480156101e457600080fd5b506101b060001981565b3480156101fa57600080fd5b506101b0600181565b34801561020f57600080fd5b506101b07f9f8a7ccf2494b24b2008bd22cc33f9421258fde37343c133158d08d91826c29181565b34801561024357600080fd5b506101b0610252366004612282565b600360209081526000928352604080842090915290825290205481565b34801561027b57600080fd5b506101b0600581565b34801561029057600080fd5b506008546102a4906001600160a01b031681565b6040516001600160a01b0390911681526020016101ba565b3480156102c857600080fd5b506101986102d7366004612445565b610604565b3480156102e857600080fd5b506001546001600160a01b03166102a4565b34801561030657600080fd5b506101b0600381565b34801561031b57600080fd5b5061019861032a36600461224a565b6106ba565b34801561033b57600080fd5b5061019861034a366004612203565b610748565b61019861035d3660046122f0565b610823565b6101986103703660046122f0565b61097d565b34801561038157600080fd5b506101b0600481565b34801561039657600080fd5b506101b07f000000000000000000000000000000000000000000000000000000000000000081565b3480156103ca57600080fd5b506103de6103d9366004612203565b610ad7565b60405190151581526020016101ba565b3480156103fa57600080fd5b5061019861040936600461221f565b610af9565b34801561041a57600080fd5b506101b060075481565b34801561043057600080fd5b506101b0600281565b34801561044557600080fd5b506005546102a4906001600160a01b031681565b80610100015161048582600001518360200151846040015185608001518660a001518760c00151610c9a565b6004805460405163012847ed60e01b81526001600160a01b039091169163012847ed916104b6918691869101612589565b60206040518083038186803b1580156104ce57600080fd5b505afa1580156104e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105069190612294565b6105575760405162461bcd60e51b815260206004820152600c60248201527f494e56414c49445f41555448000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6105aa836000015184602001518560400151866060015160008151811061058e57634e487b7160e01b600052603260045260246000fd5b602002602001015187608001518860a001518960c00151610e8c565b6105d460008460200151856040015186608001518760a001518860c001518960e0015160026111e0565b6105ff836040015184606001518560000151866020015187608001518860a001518960c00151611548565b505050565b33600090815260036020908152604080832084845290915290205460001914156106705760405162461bcd60e51b815260206004820181905260248201527f53656c6c206f666665722077617320616c72656164792063616e63656c6c6564604482015260640161054e565b3360008181526003602090815260408083208584529091528082206000199055518392917f899cab278284ae4a91172caa0943607a0bcb19766254c3ebe1139be00650b10291a350565b6001546001600160a01b0316331461073a5760405162461bcd60e51b815260206004820152602e60248201527f6f6e6c792061646d696e2063616e207365747570206d6574615472616e73616360448201527f74696f6e50726f636573736f7273000000000000000000000000000000000000606482015260840161054e565b6107448282611d0b565b5050565b6001546001600160a01b031633146107a25760405162461bcd60e51b815260206004820152601360248201527f41444d494e5f4143434553535f44454e49454400000000000000000000000000604482015260640161054e565b600154604080516001600160a01b03928316815291831660208301527f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f910160405180910390a1600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b80610100015161084f82600001518360200151846040015185608001518660a001518760c00151610c9a565b6004805460405163012847ed60e01b81526001600160a01b039091169163012847ed91610880918691869101612589565b60206040518083038186803b15801561089857600080fd5b505afa1580156108ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d09190612294565b61091c5760405162461bcd60e51b815260206004820152600c60248201527f494e56414c49445f415554480000000000000000000000000000000000000000604482015260640161054e565b610953836000015184602001518560400151866060015160008151811061058e57634e487b7160e01b600052603260045260246000fd5b6105d460008460200151856040015186608001518760a001518860c001518960e0015160006111e0565b8061010001516109a982600001518360200151846040015185608001518660a001518760c00151610c9a565b6004805460405163012847ed60e01b81526001600160a01b039091169163012847ed916109da918691869101612589565b60206040518083038186803b1580156109f257600080fd5b505afa158015610a06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2a9190612294565b610a765760405162461bcd60e51b815260206004820152600c60248201527f494e56414c49445f415554480000000000000000000000000000000000000000604482015260640161054e565b610aad836000015184602001518560400151866060015160008151811061058e57634e487b7160e01b600052603260045260246000fd5b6105d460008460200151856040015186608001518760a001518860c001518960e0015160016111e0565b6001600160a01b03811660009081526002602052604090205460ff165b919050565b6001600160a01b038216610b755760405162461bcd60e51b815260206004820152602360248201527f666565436f6c6c6563746f722063616e6e6f74206265205a65726f206164647260448201527f6573730000000000000000000000000000000000000000000000000000000000606482015260840161054e565b6001546001600160a01b03163314610bcf5760405162461bcd60e51b815260206004820152601960248201527f6f6e6c792061646d696e2063616e206368616e67652066656500000000000000604482015260640161054e565b600754811115610c215760405162461bcd60e51b815260206004820152601360248201527f4665652061626f766520746865206c696d697400000000000000000000000000604482015260640161054e565b600880547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038416908117909155600682905560408051918252602082018390527f2dc23bbde6e39cbfb61764cee95d51414528b6102d7e4799e6803d9d3062825b91015b60405180910390a15050565b60007f9f8a7ccf2494b24b2008bd22cc33f9421258fde37343c133158d08d91826c29187878787600081518110610ce157634e487b7160e01b600052603260045260246000fd5b602002602001015188600181518110610d0a57634e487b7160e01b600052603260045260246000fd5b602002602001015189600281518110610d3357634e487b7160e01b600052603260045260246000fd5b60200260200101518a600381518110610d5c57634e487b7160e01b600052603260045260246000fd5b60200260200101518b600481518110610d8557634e487b7160e01b600052603260045260246000fd5b60200260200101518c600581518110610dae57634e487b7160e01b600052603260045260246000fd5b60200260200101518c604051602001610dc791906124e2565b604051602081830303815290604052805190602001208c604051602001610dee91906124e2565b60408051601f1981840301815282825280516020918201209083019d909d526001600160a01b039b8c1690820152988a1660608a015298909616608088015260a087019490945260c086019290925260e08501526101008401526101208301526101408201526101608101919091526101808101919091526101a0016040516020818303038152906040528051906020012090509695505050505050565b8051825114610f035760405162461bcd60e51b815260206004820152602360248201527f69647320616e6420616d6f756e7473206c656e677468206e6f74206d6174636860448201527f696e670000000000000000000000000000000000000000000000000000000000606482015260840161054e565b6001600160a01b038716331480610f3c57506001600160a01b03851615801590610f3c57503360009081526002602052604090205460ff165b610f885760405162461bcd60e51b815260206004820152600e60248201527f6e6f7420617574686f72697a6564000000000000000000000000000000000000604482015260640161054e565b6001600160a01b03861660009081526003602052604081208451829086908290610fc257634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002054905060001981141561102d5760405162461bcd60e51b815260206004820152601160248201527f41756374696f6e2063616e63656c6c6564000000000000000000000000000000604482015260640161054e565b6000611039868361260a565b90508460058151811061105c57634e487b7160e01b600052603260045260246000fd5b60200260200101518111156110b35760405162461bcd60e51b815260206004820152601e60248201527f42757920616d6f756e7420657863656564732073656c6c20616d6f756e740000604482015260640161054e565b42856003815181106110d557634e487b7160e01b600052603260045260246000fd5b6020026020010151111561112b5760405162461bcd60e51b815260206004820152601860248201527f41756374696f6e206469646e2774207374617274207965740000000000000000604482015260640161054e565b428560048151811061114d57634e487b7160e01b600052603260045260246000fd5b60200260200101518660038151811061117657634e487b7160e01b600052603260045260246000fd5b6020026020010151611188919061260a565b116111d55760405162461bcd60e51b815260206004820152601060248201527f41756374696f6e2066696e697368656400000000000000000000000000000000604482015260640161054e565b505050505050505050565b60607f00000000000000000000000000000000000000000000000000000000000000006112118a8a8a8a8a8a610c9a565b6040517f190100000000000000000000000000000000000000000000000000000000000060208201526022810192909252604282015260620160408051601f198184030181529190529050600282600281111561127e57634e487b7160e01b600052602160045260246000fd5b1415611391576040517f20c13b0b00000000000000000000000000000000000000000000000000000000808252906001600160a01b038a16906320c13b0b906112cd90859088906004016125ab565b60206040518083038186803b1580156112e557600080fd5b505afa1580156112f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131d91906122b0565b7fffffffff00000000000000000000000000000000000000000000000000000000161461138c5760405162461bcd60e51b815260206004820152601660248201527f696e76616c69642031323731207369676e617475726500000000000000000000604482015260640161054e565b6111d5565b60018260028111156113b357634e487b7160e01b600052602160045260246000fd5b14156114c657805160208201206040517f1626ba7e00000000000000000000000000000000000000000000000000000000808252916001600160a01b038b1691631626ba7e91611407918890600401612570565b60206040518083038186803b15801561141f57600080fd5b505afa158015611433573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145791906122b0565b7fffffffff00000000000000000000000000000000000000000000000000000000161461138c5760405162461bcd60e51b815260206004820152601660248201527f696e76616c69642031363534207369676e617475726500000000000000000000604482015260640161054e565b60006114d9828051906020012085611d85565b9050886001600160a01b0316816001600160a01b03161461153c5760405162461bcd60e51b815260206004820152600e60248201527f7369676e657220213d2066726f6d000000000000000000000000000000000000604482015260640161054e565b50505050505050505050565b6002600054141561159b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161054e565b60026000819055506000866000815181106115c657634e487b7160e01b600052603260045260246000fd5b6020026020010151611685856001815181106115f257634e487b7160e01b600052603260045260246000fd5b60200260200101518660028151811061161b57634e487b7160e01b600052603260045260246000fd5b60200260200101518760048151811061164457634e487b7160e01b600052603260045260246000fd5b60200260200101518860038151811061166d57634e487b7160e01b600052603260045260246000fd5b6020026020010151426116809190612686565b611f47565b61168f9190612667565b9050866000815181106116b257634e487b7160e01b600052603260045260246000fd5b602002602001015160036000876001600160a01b03166001600160a01b0316815260200190815260200160002060008660008151811061170257634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002054611723919061260a565b6001600160a01b038616600090815260036020526040812086519091908790829061175e57634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000208190555060008060065411156117935761179082600654611fd2565b90505b600061179f828461260a565b9050886001815181106117c257634e487b7160e01b600052603260045260246000fd5b602002602001015181111561183f5760405162461bcd60e51b815260206004820152602160248201527f6f666665722065786365656473206d617820616d6f756e7420746f207370656e60448201527f6400000000000000000000000000000000000000000000000000000000000000606482015260840161054e565b6001600160a01b038a1615611a3b576040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b0389811660048301528881166024830152604482018590528b16906323b872dd90606401602060405180830381600087803b1580156118b957600080fd5b505af11580156118cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f19190612294565b61193d5760405162461bcd60e51b815260206004820152601e60248201527f6661696c656420746f207472616e7366657220746f6b656e2070726963650000604482015260640161054e565b8115611a36576008546040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b038a81166004830152918216602482015260448101849052908b16906323b872dd90606401602060405180830381600087803b1580156119b257600080fd5b505af11580156119c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ea9190612294565b611a365760405162461bcd60e51b815260206004820152601560248201527f6661696c656420746f20636f6c6c656374206665650000000000000000000000604482015260640161054e565b611acc565b80341015611a8b5760405162461bcd60e51b815260206004820152600b60248201527f455448203c20746f74616c000000000000000000000000000000000000000000604482015260640161054e565b80341115611aa657611aa633611aa18334612686565b611ff2565b611ab08784611ff2565b8115611acc57600854611acc906001600160a01b031683611ff2565b6000845167ffffffffffffffff811115611af657634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611b1f578160200160208202803683370190505b50905060005b8151811015611bc6578a600081518110611b4f57634e487b7160e01b600052603260045260246000fd5b6020026020010151868281518110611b7757634e487b7160e01b600052603260045260246000fd5b6020026020010151611b899190612667565b828281518110611ba957634e487b7160e01b600052603260045260246000fd5b602090810291909101015280611bbe8161269d565b915050611b25565b506005546040517f2eb2c2d60000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690632eb2c2d690611c16908b908d908b908790600401612518565b600060405180830381600087803b158015611c3057600080fd5b505af1158015611c44573d6000803e3d6000fd5b5050505086600081518110611c6957634e487b7160e01b600052603260045260246000fd5b6020026020010151896001600160a01b0316896001600160a01b03167fb6ccdf0f604b7944dc67e7a20fcac8d00f86137f70b2cf577073372a547678478d600081518110611cc757634e487b7160e01b600052603260045260246000fd5b60200260200101518888604051611cf1939291909283526020830191909152604082015260600190565b60405180910390a450506001600055505050505050505050565b6001600160a01b03821660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168515159081179091558251938452908301527fb21eb88b4e33b3f1281830a7178d74d8aa73220416215726b68ae23d539515cb9101610c8e565b60008151604114611dd85760405162461bcd60e51b815260206004820152601a60248201527f696e636f7272656374207369676e6174757265206c656e677468000000000000604482015260640161054e565b60208201516040830151606084015160001a601b811015611e0157611dfe601b82612622565b90505b8060ff16601b1480611e1657508060ff16601c145b611e885760405162461bcd60e51b815260206004820152602760248201527f76657273696f6e206f66207369676e61747572652073686f756c64206265203260448201527f37206f7220323800000000000000000000000000000000000000000000000000606482015260840161054e565b60408051600081526020810180835288905260ff831691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa158015611edb573d6000803e3d6000fd5b5050604051601f1901519450506001600160a01b038416611f3e5760405162461bcd60e51b815260206004820152601160248201527f696e636f72726563742061646472657373000000000000000000000000000000604482015260640161054e565b50505092915050565b600082821115611f58575082611fca565b84841415611f67575082611fca565b84841115611fa0578282611f7b8787612686565b611f859190612667565b611f8f9190612647565b611f99908661260a565b9050611fca565b8282611fac8688612686565b611fb69190612667565b611fc09190612647565b611f999086612686565b949350505050565b6000612710611fe18385612667565b611feb9190612647565b9392505050565b804710156120425760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161054e565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461208f576040519150601f19603f3d011682016040523d82523d6000602084013e612094565b606091505b50509050806105ff5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161054e565b8035610af4816126e4565b600082601f830112612126578081fd5b8135602067ffffffffffffffff821115612142576121426126ce565b8082026121508282016125d9565b83815282810190868401838801850189101561216a578687fd5b8693505b8584101561218c57803583526001939093019291840191840161216e565b50979650505050505050565b600082601f8301126121a8578081fd5b813567ffffffffffffffff8111156121c2576121c26126ce565b6121d56020601f19601f840116016125d9565b8181528460208386010111156121e9578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215612214578081fd5b8135611feb816126e4565b60008060408385031215612231578081fd5b823561223c816126e4565b946020939093013593505050565b6000806040838503121561225c578182fd5b8235612267816126e4565b91506020830135612277816126fc565b809150509250929050565b60008060408385031215612231578182fd5b6000602082840312156122a5578081fd5b8151611feb816126fc565b6000602082840312156122c1578081fd5b81517fffffffff0000000000000000000000000000000000000000000000000000000081168114611feb578182fd5b600060208284031215612301578081fd5b813567ffffffffffffffff80821115612318578283fd5b818401915061012080838703121561232e578384fd5b612337816125d9565b90506123428361210b565b81526123506020840161210b565b60208201526123616040840161210b565b6040820152606083013582811115612377578485fd5b61238387828601612116565b60608301525060808301358281111561239a578485fd5b6123a687828601612116565b60808301525060a0830135828111156123bd578485fd5b6123c987828601612116565b60a08301525060c0830135828111156123e0578485fd5b6123ec87828601612116565b60c08301525060e083013582811115612403578485fd5b61240f87828601612198565b60e0830152506101008084013583811115612428578586fd5b61243488828701612198565b918301919091525095945050505050565b600060208284031215612456578081fd5b5035919050565b6000815180845260208085019450808401835b8381101561248c57815187529582019590820190600101612470565b509495945050505050565b60008151808452815b818110156124bc576020818501810151868301820152016124a0565b818111156124cd5782602083870101525b50601f01601f19169290920160200192915050565b815160009082906020808601845b8381101561250c578151855293820193908201906001016124f0565b50929695505050505050565b60006001600160a01b03808716835280861660208401525060a0604083015261254460a083018561245d565b8281036060840152612556818561245d565b838103608090940193909352508152602001949350505050565b600083825260406020830152611fca6040830184612497565b60006040825261259c6040830185612497565b90508260208301529392505050565b6000604082526125be6040830185612497565b82810360208401526125d08185612497565b95945050505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715612602576126026126ce565b604052919050565b6000821982111561261d5761261d6126b8565b500190565b600060ff821660ff84168060ff0382111561263f5761263f6126b8565b019392505050565b60008261266257634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612681576126816126b8565b500290565b600082821015612698576126986126b8565b500390565b60006000198214156126b1576126b16126b8565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146126f957600080fd5b50565b80151581146126f957600080fdfea2646970667358221220964717744f048d38cc4deaf75f8ffa9136d1ea003e27f4d8671fd6496bc9e0cb64736f6c63430008020033",
  "deployedBytecode": "0x6080604052600436106101805760003560e01c80638905bc9a116100d6578063dc0c81b51161007f578063e7de635e11610059578063e7de635e1461040e578063fb43863914610424578063fcea5e291461043957610180565b8063dc0c81b51461038a578063dc5074af146103be578063e55156b5146103ee57610180565b80639ccb6837116100b05780639ccb68371461034f578063b04ce83a14610362578063b3da2e5a1461037557610180565b80638905bc9a146102fa5780638a04af6a1461030f5780638f2839701461032f57610180565b80634a56c7191161013857806354ef2fad1161011257806354ef2fad14610284578063642ab1e6146102bc5780636e9960c3146102dc57610180565b80634a56c719146102035780634dd6c8de1461023757806353933d4f1461026f57610180565b8063249fb1e611610169578063249fb1e6146101c357806333a581d2146101d8578063401df593146101ee57610180565b806308a1b9601461018557806317fe50921461019a575b600080fd5b6101986101933660046122f0565b610459565b005b3480156101a657600080fd5b506101b060065481565b6040519081526020015b60405180910390f35b3480156101cf57600080fd5b506101b0600081565b3480156101e457600080fd5b506101b060001981565b3480156101fa57600080fd5b506101b0600181565b34801561020f57600080fd5b506101b07f9f8a7ccf2494b24b2008bd22cc33f9421258fde37343c133158d08d91826c29181565b34801561024357600080fd5b506101b0610252366004612282565b600360209081526000928352604080842090915290825290205481565b34801561027b57600080fd5b506101b0600581565b34801561029057600080fd5b506008546102a4906001600160a01b031681565b6040516001600160a01b0390911681526020016101ba565b3480156102c857600080fd5b506101986102d7366004612445565b610604565b3480156102e857600080fd5b506001546001600160a01b03166102a4565b34801561030657600080fd5b506101b0600381565b34801561031b57600080fd5b5061019861032a36600461224a565b6106ba565b34801561033b57600080fd5b5061019861034a366004612203565b610748565b61019861035d3660046122f0565b610823565b6101986103703660046122f0565b61097d565b34801561038157600080fd5b506101b0600481565b34801561039657600080fd5b506101b07f000000000000000000000000000000000000000000000000000000000000000081565b3480156103ca57600080fd5b506103de6103d9366004612203565b610ad7565b60405190151581526020016101ba565b3480156103fa57600080fd5b5061019861040936600461221f565b610af9565b34801561041a57600080fd5b506101b060075481565b34801561043057600080fd5b506101b0600281565b34801561044557600080fd5b506005546102a4906001600160a01b031681565b80610100015161048582600001518360200151846040015185608001518660a001518760c00151610c9a565b6004805460405163012847ed60e01b81526001600160a01b039091169163012847ed916104b6918691869101612589565b60206040518083038186803b1580156104ce57600080fd5b505afa1580156104e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105069190612294565b6105575760405162461bcd60e51b815260206004820152600c60248201527f494e56414c49445f41555448000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6105aa836000015184602001518560400151866060015160008151811061058e57634e487b7160e01b600052603260045260246000fd5b602002602001015187608001518860a001518960c00151610e8c565b6105d460008460200151856040015186608001518760a001518860c001518960e0015160026111e0565b6105ff836040015184606001518560000151866020015187608001518860a001518960c00151611548565b505050565b33600090815260036020908152604080832084845290915290205460001914156106705760405162461bcd60e51b815260206004820181905260248201527f53656c6c206f666665722077617320616c72656164792063616e63656c6c6564604482015260640161054e565b3360008181526003602090815260408083208584529091528082206000199055518392917f899cab278284ae4a91172caa0943607a0bcb19766254c3ebe1139be00650b10291a350565b6001546001600160a01b0316331461073a5760405162461bcd60e51b815260206004820152602e60248201527f6f6e6c792061646d696e2063616e207365747570206d6574615472616e73616360448201527f74696f6e50726f636573736f7273000000000000000000000000000000000000606482015260840161054e565b6107448282611d0b565b5050565b6001546001600160a01b031633146107a25760405162461bcd60e51b815260206004820152601360248201527f41444d494e5f4143434553535f44454e49454400000000000000000000000000604482015260640161054e565b600154604080516001600160a01b03928316815291831660208301527f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f910160405180910390a1600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b80610100015161084f82600001518360200151846040015185608001518660a001518760c00151610c9a565b6004805460405163012847ed60e01b81526001600160a01b039091169163012847ed91610880918691869101612589565b60206040518083038186803b15801561089857600080fd5b505afa1580156108ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d09190612294565b61091c5760405162461bcd60e51b815260206004820152600c60248201527f494e56414c49445f415554480000000000000000000000000000000000000000604482015260640161054e565b610953836000015184602001518560400151866060015160008151811061058e57634e487b7160e01b600052603260045260246000fd5b6105d460008460200151856040015186608001518760a001518860c001518960e0015160006111e0565b8061010001516109a982600001518360200151846040015185608001518660a001518760c00151610c9a565b6004805460405163012847ed60e01b81526001600160a01b039091169163012847ed916109da918691869101612589565b60206040518083038186803b1580156109f257600080fd5b505afa158015610a06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2a9190612294565b610a765760405162461bcd60e51b815260206004820152600c60248201527f494e56414c49445f415554480000000000000000000000000000000000000000604482015260640161054e565b610aad836000015184602001518560400151866060015160008151811061058e57634e487b7160e01b600052603260045260246000fd5b6105d460008460200151856040015186608001518760a001518860c001518960e0015160016111e0565b6001600160a01b03811660009081526002602052604090205460ff165b919050565b6001600160a01b038216610b755760405162461bcd60e51b815260206004820152602360248201527f666565436f6c6c6563746f722063616e6e6f74206265205a65726f206164647260448201527f6573730000000000000000000000000000000000000000000000000000000000606482015260840161054e565b6001546001600160a01b03163314610bcf5760405162461bcd60e51b815260206004820152601960248201527f6f6e6c792061646d696e2063616e206368616e67652066656500000000000000604482015260640161054e565b600754811115610c215760405162461bcd60e51b815260206004820152601360248201527f4665652061626f766520746865206c696d697400000000000000000000000000604482015260640161054e565b600880547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038416908117909155600682905560408051918252602082018390527f2dc23bbde6e39cbfb61764cee95d51414528b6102d7e4799e6803d9d3062825b91015b60405180910390a15050565b60007f9f8a7ccf2494b24b2008bd22cc33f9421258fde37343c133158d08d91826c29187878787600081518110610ce157634e487b7160e01b600052603260045260246000fd5b602002602001015188600181518110610d0a57634e487b7160e01b600052603260045260246000fd5b602002602001015189600281518110610d3357634e487b7160e01b600052603260045260246000fd5b60200260200101518a600381518110610d5c57634e487b7160e01b600052603260045260246000fd5b60200260200101518b600481518110610d8557634e487b7160e01b600052603260045260246000fd5b60200260200101518c600581518110610dae57634e487b7160e01b600052603260045260246000fd5b60200260200101518c604051602001610dc791906124e2565b604051602081830303815290604052805190602001208c604051602001610dee91906124e2565b60408051601f1981840301815282825280516020918201209083019d909d526001600160a01b039b8c1690820152988a1660608a015298909616608088015260a087019490945260c086019290925260e08501526101008401526101208301526101408201526101608101919091526101808101919091526101a0016040516020818303038152906040528051906020012090509695505050505050565b8051825114610f035760405162461bcd60e51b815260206004820152602360248201527f69647320616e6420616d6f756e7473206c656e677468206e6f74206d6174636860448201527f696e670000000000000000000000000000000000000000000000000000000000606482015260840161054e565b6001600160a01b038716331480610f3c57506001600160a01b03851615801590610f3c57503360009081526002602052604090205460ff165b610f885760405162461bcd60e51b815260206004820152600e60248201527f6e6f7420617574686f72697a6564000000000000000000000000000000000000604482015260640161054e565b6001600160a01b03861660009081526003602052604081208451829086908290610fc257634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002054905060001981141561102d5760405162461bcd60e51b815260206004820152601160248201527f41756374696f6e2063616e63656c6c6564000000000000000000000000000000604482015260640161054e565b6000611039868361260a565b90508460058151811061105c57634e487b7160e01b600052603260045260246000fd5b60200260200101518111156110b35760405162461bcd60e51b815260206004820152601e60248201527f42757920616d6f756e7420657863656564732073656c6c20616d6f756e740000604482015260640161054e565b42856003815181106110d557634e487b7160e01b600052603260045260246000fd5b6020026020010151111561112b5760405162461bcd60e51b815260206004820152601860248201527f41756374696f6e206469646e2774207374617274207965740000000000000000604482015260640161054e565b428560048151811061114d57634e487b7160e01b600052603260045260246000fd5b60200260200101518660038151811061117657634e487b7160e01b600052603260045260246000fd5b6020026020010151611188919061260a565b116111d55760405162461bcd60e51b815260206004820152601060248201527f41756374696f6e2066696e697368656400000000000000000000000000000000604482015260640161054e565b505050505050505050565b60607f00000000000000000000000000000000000000000000000000000000000000006112118a8a8a8a8a8a610c9a565b6040517f190100000000000000000000000000000000000000000000000000000000000060208201526022810192909252604282015260620160408051601f198184030181529190529050600282600281111561127e57634e487b7160e01b600052602160045260246000fd5b1415611391576040517f20c13b0b00000000000000000000000000000000000000000000000000000000808252906001600160a01b038a16906320c13b0b906112cd90859088906004016125ab565b60206040518083038186803b1580156112e557600080fd5b505afa1580156112f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131d91906122b0565b7fffffffff00000000000000000000000000000000000000000000000000000000161461138c5760405162461bcd60e51b815260206004820152601660248201527f696e76616c69642031323731207369676e617475726500000000000000000000604482015260640161054e565b6111d5565b60018260028111156113b357634e487b7160e01b600052602160045260246000fd5b14156114c657805160208201206040517f1626ba7e00000000000000000000000000000000000000000000000000000000808252916001600160a01b038b1691631626ba7e91611407918890600401612570565b60206040518083038186803b15801561141f57600080fd5b505afa158015611433573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145791906122b0565b7fffffffff00000000000000000000000000000000000000000000000000000000161461138c5760405162461bcd60e51b815260206004820152601660248201527f696e76616c69642031363534207369676e617475726500000000000000000000604482015260640161054e565b60006114d9828051906020012085611d85565b9050886001600160a01b0316816001600160a01b03161461153c5760405162461bcd60e51b815260206004820152600e60248201527f7369676e657220213d2066726f6d000000000000000000000000000000000000604482015260640161054e565b50505050505050505050565b6002600054141561159b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161054e565b60026000819055506000866000815181106115c657634e487b7160e01b600052603260045260246000fd5b6020026020010151611685856001815181106115f257634e487b7160e01b600052603260045260246000fd5b60200260200101518660028151811061161b57634e487b7160e01b600052603260045260246000fd5b60200260200101518760048151811061164457634e487b7160e01b600052603260045260246000fd5b60200260200101518860038151811061166d57634e487b7160e01b600052603260045260246000fd5b6020026020010151426116809190612686565b611f47565b61168f9190612667565b9050866000815181106116b257634e487b7160e01b600052603260045260246000fd5b602002602001015160036000876001600160a01b03166001600160a01b0316815260200190815260200160002060008660008151811061170257634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002054611723919061260a565b6001600160a01b038616600090815260036020526040812086519091908790829061175e57634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000208190555060008060065411156117935761179082600654611fd2565b90505b600061179f828461260a565b9050886001815181106117c257634e487b7160e01b600052603260045260246000fd5b602002602001015181111561183f5760405162461bcd60e51b815260206004820152602160248201527f6f666665722065786365656473206d617820616d6f756e7420746f207370656e60448201527f6400000000000000000000000000000000000000000000000000000000000000606482015260840161054e565b6001600160a01b038a1615611a3b576040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b0389811660048301528881166024830152604482018590528b16906323b872dd90606401602060405180830381600087803b1580156118b957600080fd5b505af11580156118cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f19190612294565b61193d5760405162461bcd60e51b815260206004820152601e60248201527f6661696c656420746f207472616e7366657220746f6b656e2070726963650000604482015260640161054e565b8115611a36576008546040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b038a81166004830152918216602482015260448101849052908b16906323b872dd90606401602060405180830381600087803b1580156119b257600080fd5b505af11580156119c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ea9190612294565b611a365760405162461bcd60e51b815260206004820152601560248201527f6661696c656420746f20636f6c6c656374206665650000000000000000000000604482015260640161054e565b611acc565b80341015611a8b5760405162461bcd60e51b815260206004820152600b60248201527f455448203c20746f74616c000000000000000000000000000000000000000000604482015260640161054e565b80341115611aa657611aa633611aa18334612686565b611ff2565b611ab08784611ff2565b8115611acc57600854611acc906001600160a01b031683611ff2565b6000845167ffffffffffffffff811115611af657634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611b1f578160200160208202803683370190505b50905060005b8151811015611bc6578a600081518110611b4f57634e487b7160e01b600052603260045260246000fd5b6020026020010151868281518110611b7757634e487b7160e01b600052603260045260246000fd5b6020026020010151611b899190612667565b828281518110611ba957634e487b7160e01b600052603260045260246000fd5b602090810291909101015280611bbe8161269d565b915050611b25565b506005546040517f2eb2c2d60000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690632eb2c2d690611c16908b908d908b908790600401612518565b600060405180830381600087803b158015611c3057600080fd5b505af1158015611c44573d6000803e3d6000fd5b5050505086600081518110611c6957634e487b7160e01b600052603260045260246000fd5b6020026020010151896001600160a01b0316896001600160a01b03167fb6ccdf0f604b7944dc67e7a20fcac8d00f86137f70b2cf577073372a547678478d600081518110611cc757634e487b7160e01b600052603260045260246000fd5b60200260200101518888604051611cf1939291909283526020830191909152604082015260600190565b60405180910390a450506001600055505050505050505050565b6001600160a01b03821660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168515159081179091558251938452908301527fb21eb88b4e33b3f1281830a7178d74d8aa73220416215726b68ae23d539515cb9101610c8e565b60008151604114611dd85760405162461bcd60e51b815260206004820152601a60248201527f696e636f7272656374207369676e6174757265206c656e677468000000000000604482015260640161054e565b60208201516040830151606084015160001a601b811015611e0157611dfe601b82612622565b90505b8060ff16601b1480611e1657508060ff16601c145b611e885760405162461bcd60e51b815260206004820152602760248201527f76657273696f6e206f66207369676e61747572652073686f756c64206265203260448201527f37206f7220323800000000000000000000000000000000000000000000000000606482015260840161054e565b60408051600081526020810180835288905260ff831691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa158015611edb573d6000803e3d6000fd5b5050604051601f1901519450506001600160a01b038416611f3e5760405162461bcd60e51b815260206004820152601160248201527f696e636f72726563742061646472657373000000000000000000000000000000604482015260640161054e565b50505092915050565b600082821115611f58575082611fca565b84841415611f67575082611fca565b84841115611fa0578282611f7b8787612686565b611f859190612667565b611f8f9190612647565b611f99908661260a565b9050611fca565b8282611fac8688612686565b611fb69190612667565b611fc09190612647565b611f999086612686565b949350505050565b6000612710611fe18385612667565b611feb9190612647565b9392505050565b804710156120425760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161054e565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461208f576040519150601f19603f3d011682016040523d82523d6000602084013e612094565b606091505b50509050806105ff5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161054e565b8035610af4816126e4565b600082601f830112612126578081fd5b8135602067ffffffffffffffff821115612142576121426126ce565b8082026121508282016125d9565b83815282810190868401838801850189101561216a578687fd5b8693505b8584101561218c57803583526001939093019291840191840161216e565b50979650505050505050565b600082601f8301126121a8578081fd5b813567ffffffffffffffff8111156121c2576121c26126ce565b6121d56020601f19601f840116016125d9565b8181528460208386010111156121e9578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215612214578081fd5b8135611feb816126e4565b60008060408385031215612231578081fd5b823561223c816126e4565b946020939093013593505050565b6000806040838503121561225c578182fd5b8235612267816126e4565b91506020830135612277816126fc565b809150509250929050565b60008060408385031215612231578182fd5b6000602082840312156122a5578081fd5b8151611feb816126fc565b6000602082840312156122c1578081fd5b81517fffffffff0000000000000000000000000000000000000000000000000000000081168114611feb578182fd5b600060208284031215612301578081fd5b813567ffffffffffffffff80821115612318578283fd5b818401915061012080838703121561232e578384fd5b612337816125d9565b90506123428361210b565b81526123506020840161210b565b60208201526123616040840161210b565b6040820152606083013582811115612377578485fd5b61238387828601612116565b60608301525060808301358281111561239a578485fd5b6123a687828601612116565b60808301525060a0830135828111156123bd578485fd5b6123c987828601612116565b60a08301525060c0830135828111156123e0578485fd5b6123ec87828601612116565b60c08301525060e083013582811115612403578485fd5b61240f87828601612198565b60e0830152506101008084013583811115612428578586fd5b61243488828701612198565b918301919091525095945050505050565b600060208284031215612456578081fd5b5035919050565b6000815180845260208085019450808401835b8381101561248c57815187529582019590820190600101612470565b509495945050505050565b60008151808452815b818110156124bc576020818501810151868301820152016124a0565b818111156124cd5782602083870101525b50601f01601f19169290920160200192915050565b815160009082906020808601845b8381101561250c578151855293820193908201906001016124f0565b50929695505050505050565b60006001600160a01b03808716835280861660208401525060a0604083015261254460a083018561245d565b8281036060840152612556818561245d565b838103608090940193909352508152602001949350505050565b600083825260406020830152611fca6040830184612497565b60006040825261259c6040830185612497565b90508260208301529392505050565b6000604082526125be6040830185612497565b82810360208401526125d08185612497565b95945050505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715612602576126026126ce565b604052919050565b6000821982111561261d5761261d6126b8565b500190565b600060ff821660ff84168060ff0382111561263f5761263f6126b8565b019392505050565b60008261266257634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612681576126816126b8565b500290565b600082821015612698576126986126b8565b500390565b60006000198214156126b1576126b16126b8565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146126f957600080fd5b50565b80151581146126f957600080fdfea2646970667358221220964717744f048d38cc4deaf75f8ffa9136d1ea003e27f4d8671fd6496bc9e0cb64736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "cancelSellerOffer(uint256)": {
        "params": {
          "offerId": "offer to cancel"
        }
      },
      "changeAdmin(address)": {
        "details": "Change the administrator to be `newAdmin`.",
        "params": {
          "newAdmin": "The address of the new administrator."
        }
      },
      "claimSellerOffer((address,address,address,uint256[],uint256[],uint256[],uint256[],bytes,bytes))": {
        "params": {
          "input": "Claim Seller Offer Request"
        }
      },
      "claimSellerOfferViaEIP1271((address,address,address,uint256[],uint256[],uint256[],uint256[],bytes,bytes))": {
        "params": {
          "input": "Claim Seller Offer Request"
        }
      },
      "claimSellerOfferViaEIP1654((address,address,address,uint256[],uint256[],uint256[],uint256[],bytes,bytes))": {
        "params": {
          "input": "Claim Seller Offer Request"
        }
      },
      "getAdmin()": {
        "details": "Get the current administrator of this contract.",
        "returns": {
          "_0": "The current administrator of this contract."
        }
      },
      "isMetaTransactionProcessor(address)": {
        "params": {
          "who": "The address to query."
        },
        "returns": {
          "_0": "whether the address has meta-transaction execution rights."
        }
      },
      "setFee(address,uint256)": {
        "params": {
          "fee10000th": "fee in 10,000th",
          "feeCollector": "address receiving the fee"
        }
      },
      "setMetaTransactionProcessor(address,bool)": {
        "params": {
          "enabled": "set whether the metaTransactionProcessor is enabled or disabled.",
          "metaTransactionProcessor": "address that will be given/removed metaTransactionProcessor rights."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "cancelSellerOffer(uint256)": {
        "notice": "cancel a offer previously signed, new offer need to use a id not used yet"
      },
      "claimSellerOffer((address,address,address,uint256[],uint256[],uint256[],uint256[],bytes,bytes))": {
        "notice": "claim offer using EIP712"
      },
      "claimSellerOfferViaEIP1271((address,address,address,uint256[],uint256[],uint256[],uint256[],bytes,bytes))": {
        "notice": "claim offer using EIP712 and EIP1271 signature verification scheme"
      },
      "claimSellerOfferViaEIP1654((address,address,address,uint256[],uint256[],uint256[],uint256[],bytes,bytes))": {
        "notice": "claim offer using EIP712 and EIP1654 signature verification scheme"
      },
      "isMetaTransactionProcessor(address)": {
        "notice": "check whether address `who` is given meta-transaction execution rights."
      },
      "setFee(address,uint256)": {
        "notice": "set fee parameters"
      },
      "setMetaTransactionProcessor(address,bool)": {
        "notice": "Enable or disable the ability of `metaTransactionProcessor` to perform meta-tx (metaTransactionProcessor rights)."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 589,
        "contract": "src/solc_0.8/asset/AssetSignedAuctionWithAuth.sol:AssetSignedAuctionWithAuth",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 25669,
        "contract": "src/solc_0.8/asset/AssetSignedAuctionWithAuth.sol:AssetSignedAuctionWithAuth",
        "label": "_admin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 25604,
        "contract": "src/solc_0.8/asset/AssetSignedAuctionWithAuth.sol:AssetSignedAuctionWithAuth",
        "label": "_metaTransactionContracts",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 12910,
        "contract": "src/solc_0.8/asset/AssetSignedAuctionWithAuth.sol:AssetSignedAuctionWithAuth",
        "label": "claimed",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 12913,
        "contract": "src/solc_0.8/asset/AssetSignedAuctionWithAuth.sol:AssetSignedAuctionWithAuth",
        "label": "_authValidator",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IAuthValidator)27306"
      },
      {
        "astId": 12916,
        "contract": "src/solc_0.8/asset/AssetSignedAuctionWithAuth.sol:AssetSignedAuctionWithAuth",
        "label": "_asset",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IERC1155)27421"
      },
      {
        "astId": 12919,
        "contract": "src/solc_0.8/asset/AssetSignedAuctionWithAuth.sol:AssetSignedAuctionWithAuth",
        "label": "_fee10000th",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 12922,
        "contract": "src/solc_0.8/asset/AssetSignedAuctionWithAuth.sol:AssetSignedAuctionWithAuth",
        "label": "_feeLimit",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 12924,
        "contract": "src/solc_0.8/asset/AssetSignedAuctionWithAuth.sol:AssetSignedAuctionWithAuth",
        "label": "_feeCollector",
        "offset": 0,
        "slot": "8",
        "type": "t_address_payable"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAuthValidator)27306": {
        "encoding": "inplace",
        "label": "contract IAuthValidator",
        "numberOfBytes": "20"
      },
      "t_contract(IERC1155)27421": {
        "encoding": "inplace",
        "label": "contract IERC1155",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}