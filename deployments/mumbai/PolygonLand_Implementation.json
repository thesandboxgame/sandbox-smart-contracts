{
  "address": "0x392fA60383591A5a295d1B38fe20253055d7CdE3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "Minter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "superOperator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "SuperOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "approveFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "batchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "sizes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "xs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ys",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "batchTransferQuad",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "changeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "height",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isOperator",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "isMinter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "isSuperOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mintAndTransferQuad",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mintQuad",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operatorFilterRegistry",
      "outputs": [
        {
          "internalType": "contract IOperatorFilterRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "subscriptionOrRegistrantToCopy",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "subscribe",
          "type": "bool"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAllFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "registry",
          "type": "address"
        }
      ],
      "name": "setOperatorRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "superOperator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setSuperOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "id",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "transferQuad",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "width",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xb9a90b239b535f3d0c63296bbb466bce62407a252768e23e0a9e870e48182ccb",
  "receipt": {
    "to": null,
    "from": "0x5F890c9522dCE5670d741D4277BFCC2d9cA8Af02",
    "contractAddress": "0x392fA60383591A5a295d1B38fe20253055d7CdE3",
    "transactionIndex": 6,
    "gasUsed": "5345171",
    "logsBloom": "0x
    "blockHash": "0x9b7cd0f47edd036456fbde46329ddda1d2c30b866a6f4f06a28db3a19ac3bb45",
    "transactionHash": "0xb9a90b239b535f3d0c63296bbb466bce62407a252768e23e0a9e870e48182ccb",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 33225525,
        "transactionHash": "0xb9a90b239b535f3d0c63296bbb466bce62407a252768e23e0a9e870e48182ccb",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001c7c1b6813fd000000000000000000000000000000000000000000000000186f7d2cef6d99b7880000000000000000000000000000000000000000000003feb7eb0e76e2e609880000000000000000000000000000000000000000000000186f60b0d40585ba880000000000000000000000000000000000000000000003feb8078a924afa0688",
        "logIndex": 15,
        "blockHash": "0x9b7cd0f47edd036456fbde46329ddda1d2c30b866a6f4f06a28db3a19ac3bb45"
      }
    ],
    "blockNumber": 33225525,
    "cumulativeGasUsed": "6288057",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "8f2c18a16d53f62d7cfff1faf54d2dcf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"Minter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"superOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SuperOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approveFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"batchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"sizes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"xs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ys\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"batchTransferQuad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"height\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOperator\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isSuperOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintAndTransferQuad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintQuad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorFilterRegistry\",\"outputs\":[{\"internalType\":\"contract IOperatorFilterRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"subscriptionOrRegistrantToCopy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"subscribe\",\"type\":\"bool\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAllFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"setOperatorRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"superOperator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setSuperOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"id\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferQuad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"width\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"params\":{\"id\":\"The id of the token\",\"operator\":\"The address receiving the approval\"}},\"approveFor(address,address,uint256)\":{\"params\":{\"id\":\"The id of the token\",\"operator\":\"The address receiving the approval\",\"sender\":\"The address giving the approval\"}},\"balanceOf(address)\":{\"params\":{\"owner\":\"The address to look for.\"},\"returns\":{\"_0\":\"The number of tokens owned by the address.\"}},\"batchTransferQuad(address,address,uint256[],uint256[],uint256[],bytes)\":{\"params\":{\"data\":\"additional data\",\"from\":\"current owner of the quad\",\"sizes\":\"list of sizes for each quad\",\"to\":\"destination\",\"xs\":\"list of top left x coordinates for each quad\",\"ys\":\"list of top left y coordinates for each quad\"}},\"burn(uint256)\":{\"params\":{\"id\":\"The token which will be burnt.\"}},\"burnFrom(address,uint256)\":{\"params\":{\"from\":\"address whose token is to be burnt.\",\"id\":\"The token which will be burnt.\"}},\"changeAdmin(address)\":{\"details\":\"Change the administrator to be `newAdmin`.\",\"params\":{\"newAdmin\":\"The address of the new administrator.\"}},\"exists(uint256,uint256,uint256)\":{\"params\":{\"size\":\"size of the\",\"x\":\"x coordinate of the quad\",\"y\":\"y coordinate of the quad\"},\"returns\":{\"_0\":\"bool for if Land has been minted or not\"}},\"getAdmin()\":{\"details\":\"Get the current administrator of this contract.\",\"returns\":{\"_0\":\"The current administrator of this contract.\"}},\"getApproved(uint256)\":{\"params\":{\"id\":\"The id of the token.\"},\"returns\":{\"_0\":\"The address of the operator.\"}},\"getX(uint256)\":{\"params\":{\"id\":\"tokenId\"},\"returns\":{\"_0\":\"the x coordinates\"}},\"getY(uint256)\":{\"params\":{\"id\":\"tokenId\"},\"returns\":{\"_0\":\"the y coordinates\"}},\"height()\":{\"returns\":{\"_0\":\"height\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"operator\":\"The address of the operator.\",\"owner\":\"The address of the owner.\"},\"returns\":{\"isOperator\":\"The status of the approval.\"}},\"isMinter(address)\":{\"params\":{\"who\":\"The address to query.\"},\"returns\":{\"_0\":\"whether the address has minter rights.\"}},\"isSuperOperator(address)\":{\"params\":{\"who\":\"The address to query.\"},\"returns\":{\"_0\":\"whether the address has superOperator rights.\"}},\"mintAndTransferQuad(address,uint256,uint256,uint256,bytes)\":{\"params\":{\"data\":\"extra data to pass to the transfer\",\"size\":\"The size of the new quad\",\"to\":\"The recipient of the new quad\",\"x\":\"The top left x coordinate of the new quad\",\"y\":\"The top left y coordinate of the new quad\"}},\"mintQuad(address,uint256,uint256,uint256,bytes)\":{\"params\":{\"data\":\"extra data to pass to the transfer\",\"size\":\"The size of the new quad\",\"user\":\"The recipient of the new quad\",\"x\":\"The top left x coordinate of the new quad\",\"y\":\"The top left y coordinate of the new quad\"}},\"name()\":{\"returns\":{\"_0\":\"The name of the token contract\"}},\"ownerOf(uint256)\":{\"params\":{\"id\":\"The id of the token.\"},\"returns\":{\"owner\":\"The address of the token owner.\"}},\"register(address,bool)\":{\"details\":\"can only be called by admin.\",\"params\":{\"subscribe\":\"bool to signify subscription \\\"true\\\"\\\" or to copy the list \\\"false\\\".\",\"subscriptionOrRegistrantToCopy\":\"registration address of the list to subscribe.\"}},\"safeBatchTransferFrom(address,address,uint256[],bytes)\":{\"params\":{\"data\":\"Additional data.\",\"from\":\"The sender of the token.\",\"ids\":\"The ids of the tokens.\",\"to\":\"The recipient of the token.\"}},\"safeTransferFrom(address,address,uint256)\":{\"params\":{\"from\":\"The send of the token\",\"id\":\"The id of the token\",\"to\":\"The recipient of the token\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"params\":{\"data\":\"Additional data\",\"from\":\"The sender of the token\",\"id\":\"The id of the token\",\"to\":\"The recipient of the token\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"approved\":\"The determination of the approval\",\"operator\":\"The address receiving the approval\"}},\"setApprovalForAllFor(address,address,bool)\":{\"params\":{\"approved\":\"The determination of the approval\",\"operator\":\"The address receiving the approval\",\"sender\":\"The address giving the approval\"}},\"setMinter(address,bool)\":{\"params\":{\"enabled\":\"set whether the minter is enabled or disabled.\",\"minter\":\"address that will be given/removed minter right.\"}},\"setOperatorRegistry(address)\":{\"params\":{\"registry\":\"the address of the registry\"}},\"setSuperOperator(address,bool)\":{\"params\":{\"enabled\":\"set whether the superOperator is enabled or disabled.\",\"superOperator\":\"address that will be given/removed superOperator right.\"}},\"setTrustedForwarder(address)\":{\"details\":\"Change the address of the trusted forwarder for meta-TX\",\"params\":{\"trustedForwarder\":\"The new trustedForwarder\"}},\"supportsInterface(bytes4)\":{\"params\":{\"id\":\"The id of the interface\"},\"returns\":{\"_0\":\"True if the interface is supported\"}},\"symbol()\":{\"returns\":{\"_0\":\"The symbol of the token contract\"}},\"tokenURI(uint256)\":{\"params\":{\"id\":\"The id of the token\"},\"returns\":{\"_0\":\"The URI of the token\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"from\":\"The sender of the token\",\"id\":\"The id of the token\",\"to\":\"The recipient of the token\"}},\"transferQuad(address,address,uint256,uint256,uint256,bytes)\":{\"params\":{\"data\":\"additional data\",\"from\":\"current owner of the quad\",\"size\":\"size of the quad\",\"to\":\"destination\",\"x\":\"The top left x coordinate of the quad\",\"y\":\"The top left y coordinate of the quad\"}},\"width()\":{\"returns\":{\"_0\":\"width\"}}},\"title\":\"LAND token on L2\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Approve an operator to spend tokens on the sender behalf\"},\"approveFor(address,address,uint256)\":{\"notice\":\"Approve an operator to spend tokens on the sender behalf\"},\"balanceOf(address)\":{\"notice\":\"Get the number of tokens owned by an address.\"},\"batchTransferQuad(address,address,uint256[],uint256[],uint256[],bytes)\":{\"notice\":\"transfer multiple quad (aligned to a quad tree with size 3, 6, 12 or 24 only)\"},\"burn(uint256)\":{\"notice\":\"Burns token `id`.\"},\"burnFrom(address,uint256)\":{\"notice\":\"Burn token`id` from `from`.\"},\"exists(uint256,uint256,uint256)\":{\"notice\":\"checks if Land has been minted or not\"},\"getApproved(uint256)\":{\"notice\":\"Get the approved operator for a specific token.\"},\"getX(uint256)\":{\"notice\":\"x coordinate of Land token\"},\"getY(uint256)\":{\"notice\":\"y coordinate of Land token\"},\"height()\":{\"notice\":\"total height of the map\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Check if the sender approved the operator.\"},\"isMinter(address)\":{\"notice\":\"check whether address `who` is given minter rights.\"},\"isSuperOperator(address)\":{\"notice\":\"check whether address `who` is given superOperator rights.\"},\"mintAndTransferQuad(address,uint256,uint256,uint256,bytes)\":{\"notice\":\"Checks if a parent quad has child quads already minted.  Then mints the rest child quads and transfers the parent quad.  Should only be called by the tunnel.\"},\"mintQuad(address,uint256,uint256,uint256,bytes)\":{\"notice\":\"Mint a new quad (aligned to a quad tree with size 1, 3, 6, 12 or 24 only)\"},\"name()\":{\"notice\":\"Return the name of the token contract\"},\"ownerOf(uint256)\":{\"notice\":\"Get the owner of a token.\"},\"register(address,bool)\":{\"notice\":\"This function is used to register Land contract on the Operator filterer Registry of Opensea.\"},\"safeBatchTransferFrom(address,address,uint256[],bytes)\":{\"notice\":\"Transfer many tokens between 2 addresses, while ensuring the receiving contract has a receiver method.\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"Transfer a token between 2 addresses letting the receiver knows of the transfer\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Transfer a token between 2 addresses letting the receiver knows of the transfer\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Set the approval for an operator to manage all the tokens of the sender\"},\"setApprovalForAllFor(address,address,bool)\":{\"notice\":\"Set the approval for an operator to manage all the tokens of the sender\"},\"setMinter(address,bool)\":{\"notice\":\"Enable or disable the ability of `minter` to transfer tokens of all (minter rights).\"},\"setOperatorRegistry(address)\":{\"notice\":\"sets filter registry address deployed in test\"},\"setSuperOperator(address,bool)\":{\"notice\":\"Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights).\"},\"supportsInterface(bytes4)\":{\"notice\":\"Check if the contract supports an interface 0x01ffc9a7 is ERC-165 0x80ac58cd is ERC-721 0x5b5e139f is ERC-721 metadata\"},\"symbol()\":{\"notice\":\"Return the symbol of the token contract\"},\"tokenURI(uint256)\":{\"notice\":\"Return the URI of a specific token\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer a token between 2 addresses\"},\"transferQuad(address,address,uint256,uint256,uint256,bytes)\":{\"notice\":\"transfer one quad (aligned to a quad tree with size 3, 6, 12 or 24 only)\"},\"width()\":{\"notice\":\"total width of the map\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/solc_0.8/polygon/child/land/PolygonLandV2.sol\":\"PolygonLandV2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x2f359f9d5c56394e60d74401487ab55d8ef0012907b07c9abbb8f998bf5ddfec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"src/solc_0.8/OperatorFilterer/contracts/upgradeable/OperatorFiltererUpgradeable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport {IOperatorFilterRegistry} from \\\"../../interfaces/IOperatorFilterRegistry.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n///@title OperatorFiltererUpgradeable\\n///@notice This contract would subscibe or copy or just to the subscription provided or just register to default subscription list\\nabstract contract OperatorFiltererUpgradeable is Initializable {\\n    IOperatorFilterRegistry public operatorFilterRegistry;\\n\\n    function __OperatorFilterer_init(address subscriptionOrRegistrantToCopy, bool subscribe) internal onlyInitializing {\\n        _register(subscriptionOrRegistrantToCopy, subscribe);\\n    }\\n\\n    function _register(address subscriptionOrRegistrantToCopy, bool subscribe) internal {\\n        // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\\n        // will not revert, but the contract will need to be registered with the registry once it is deployed in\\n        // order for the modifier to filter addresses.\\n        if (address(operatorFilterRegistry).code.length > 0) {\\n            if (!operatorFilterRegistry.isRegistered(address(this))) {\\n                if (subscribe) {\\n                    operatorFilterRegistry.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\\n                } else {\\n                    if (subscriptionOrRegistrantToCopy != address(0)) {\\n                        operatorFilterRegistry.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\\n                    } else {\\n                        operatorFilterRegistry.register(address(this));\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    modifier onlyAllowedOperator(address from) virtual {\\n        // Check registry code length to facilitate testing in environments without a deployed registry.\\n        if (address(operatorFilterRegistry).code.length > 0) {\\n            // Allow spending tokens from addresses with balance\\n            // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\\n            // from an EOA.\\n            if (from == msg.sender) {\\n                _;\\n                return;\\n            }\\n            if (!operatorFilterRegistry.isOperatorAllowed(address(this), msg.sender)) {\\n                revert(\\\"Operator Not Allowed\\\");\\n            }\\n        }\\n        _;\\n    }\\n\\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\\n        // Check registry code length to facilitate testing in environments without a deployed registry.\\n        if (address(operatorFilterRegistry).code.length > 0) {\\n            if (!operatorFilterRegistry.isOperatorAllowed(address(this), operator)) {\\n                revert(\\\"Operator Not Allowed\\\");\\n            }\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xdc4f56e373c542d3c534f0c050392d9a7b5b5e1fdc079f421f9711f7dc71c148\",\"license\":\"MIT\"},\"src/solc_0.8/OperatorFilterer/interfaces/IOperatorFilterRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\ninterface IOperatorFilterRegistry {\\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\\n\\n    function register(address registrant) external;\\n\\n    function registerAndSubscribe(address registrant, address subscription) external;\\n\\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\\n\\n    function updateOperator(\\n        address registrant,\\n        address operator,\\n        bool filtered\\n    ) external;\\n\\n    function updateOperators(\\n        address registrant,\\n        address[] calldata operators,\\n        bool filtered\\n    ) external;\\n\\n    function updateCodeHash(\\n        address registrant,\\n        bytes32 codehash,\\n        bool filtered\\n    ) external;\\n\\n    function updateCodeHashes(\\n        address registrant,\\n        bytes32[] calldata codeHashes,\\n        bool filtered\\n    ) external;\\n\\n    function subscribe(address registrant, address registrantToSubscribe) external;\\n\\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\\n\\n    function subscriptionOf(address addr) external returns (address registrant);\\n\\n    function subscribers(address registrant) external returns (address[] memory);\\n\\n    function subscriberAt(address registrant, uint256 index) external returns (address);\\n\\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\\n\\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\\n\\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\\n\\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\\n\\n    function filteredOperators(address addr) external returns (address[] memory);\\n\\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\\n\\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\\n\\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\\n\\n    function isRegistered(address addr) external returns (bool);\\n\\n    function codeHashOf(address addr) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0x7dbfd943774557023f12461a10f23fae9829892df22f1b84abab5c11ca7f4751\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/ERC2771Handler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\n/// @dev minimal ERC2771 handler to keep bytecode-size down\\n/// based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.6.0/contracts/metatx/ERC2771Context.sol\\n/// with an initializer for proxies and a mutable forwarder\\n\\nabstract contract ERC2771Handler {\\n    address internal _trustedForwarder;\\n\\n    function __ERC2771Handler_initialize(address forwarder) internal {\\n        _trustedForwarder = forwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function getTrustedForwarder() external view returns (address trustedForwarder) {\\n        return _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd4723b9664afa6448f1a217736f91e5e48ec483162a8da0940da9e016eab3fe0\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/ERC721BaseTokenV2.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n/* solhint-disable func-order, code-complexity */\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"./WithSuperOperatorsV2.sol\\\";\\nimport \\\"../interfaces/IERC721MandatoryTokenReceiver.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\ncontract ERC721BaseTokenV2 is ContextUpgradeable, IERC721Upgradeable, WithSuperOperatorsV2 {\\n    using AddressUpgradeable for address;\\n\\n    bytes4 internal constant _ERC721_RECEIVED = 0x150b7a02;\\n    bytes4 internal constant _ERC721_BATCH_RECEIVED = 0x4b808c46;\\n\\n    bytes4 internal constant ERC165ID = 0x01ffc9a7;\\n    bytes4 internal constant ERC721_MANDATORY_RECEIVER = 0x5e8bf644;\\n\\n    uint256 internal constant NOT_ADDRESS = 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000;\\n    uint256 internal constant OPERATOR_FLAG = (2**255);\\n    uint256 internal constant NOT_OPERATOR_FLAG = OPERATOR_FLAG - 1;\\n    uint256 internal constant BURNED_FLAG = (2**160);\\n\\n    mapping(address => uint256) internal _numNFTPerAddress;\\n    mapping(uint256 => uint256) internal _owners;\\n    mapping(address => mapping(address => bool)) internal _operatorsForAll;\\n    mapping(uint256 => address) internal _operators;\\n\\n    /// @notice Approve an operator to spend tokens on the senders behalf.\\n    /// @param operator The address receiving the approval.\\n    /// @param id The id of the token.\\n    function approve(address operator, uint256 id) external virtual override {\\n        uint256 ownerData = _owners[_storageId(id)];\\n        address owner = _ownerOf(id);\\n        address msgSender = _msgSender();\\n        require(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n        require(\\n            owner == msgSender || _operatorsForAll[owner][msgSender] || _superOperators[msgSender],\\n            \\\"UNAUTHORIZED_APPROVAL\\\"\\n        );\\n        _approveFor(ownerData, operator, id);\\n    }\\n\\n    /// @notice Approve an operator to spend tokens on the sender behalf.\\n    /// @param sender The address giving the approval.\\n    /// @param operator The address receiving the approval.\\n    /// @param id The id of the token.\\n    function approveFor(\\n        address sender,\\n        address operator,\\n        uint256 id\\n    ) external virtual {\\n        uint256 ownerData = _owners[_storageId(id)];\\n        address owner = _ownerOf(id);\\n        address msgSender = _msgSender();\\n        require(sender != address(0), \\\"ZERO_ADDRESS_SENDER\\\");\\n        require(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n        require(\\n            msgSender == sender || _operatorsForAll[sender][msgSender] || _superOperators[msgSender],\\n            \\\"UNAUTHORIZED_APPROVAL\\\"\\n        );\\n        require(address(uint160(ownerData)) == sender, \\\"OWNER_NOT_SENDER\\\");\\n        _approveFor(ownerData, operator, id);\\n    }\\n\\n    /// @notice Transfer a token between 2 addresses.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param id The id of the token.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) external virtual override {\\n        _checkTransfer(from, to, id);\\n        _transferFrom(from, to, id);\\n        if (to.isContract() && _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER)) {\\n            require(_checkOnERC721Received(_msgSender(), from, to, id, \\\"\\\"), \\\"ERC721_TRANSFER_REJECTED\\\");\\n        }\\n    }\\n\\n    /// @notice Transfer a token between 2 addresses letting the receiver know of the transfer.\\n    /// @param from The send of the token.\\n    /// @param to The recipient of the token.\\n    /// @param id The id of the token.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) external virtual override {\\n        safeTransferFrom(from, to, id, \\\"\\\");\\n    }\\n\\n    /// @notice Transfer many tokens between 2 addresses.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param ids The ids of the tokens.\\n    /// @param data Additional data.\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) public virtual {\\n        _batchTransferFrom(from, to, ids, data, false);\\n    }\\n\\n    /// @notice Transfer many tokens between 2 addresses, while\\n    /// ensuring the receiving contract has a receiver method.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param ids The ids of the tokens.\\n    /// @param data Additional data.\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external virtual {\\n        _batchTransferFrom(from, to, ids, data, true);\\n    }\\n\\n    /// @notice Set the approval for an operator to manage all the tokens of the sender.\\n    /// @param sender The address giving the approval.\\n    /// @param operator The address receiving the approval.\\n    /// @param approved The determination of the approval.\\n    function setApprovalForAllFor(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) external virtual {\\n        require(sender != address(0), \\\"Invalid sender address\\\");\\n        address msgSender = _msgSender();\\n        require(msgSender == sender || _superOperators[msgSender], \\\"UNAUTHORIZED_APPROVE_FOR_ALL\\\");\\n\\n        _setApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @notice Set the approval for an operator to manage all the tokens of the sender.\\n    /// @param operator The address receiving the approval.\\n    /// @param approved The determination of the approval.\\n    function setApprovalForAll(address operator, bool approved) external virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /// @notice Burns token `id`.\\n    /// @param id The token which will be burnt.\\n    function burn(uint256 id) external virtual {\\n        _burn(_msgSender(), _ownerOf(id), id);\\n    }\\n\\n    /// @notice Burn token`id` from `from`.\\n    /// @param from address whose token is to be burnt.\\n    /// @param id The token which will be burnt.\\n    function burnFrom(address from, uint256 id) external virtual {\\n        require(from != address(0), \\\"NOT_FROM_ZEROADDRESS\\\");\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n        address msgSender = _msgSender();\\n        require(\\n            msgSender == from ||\\n                (operatorEnabled && _operators[id] == msgSender) ||\\n                _superOperators[msgSender] ||\\n                _operatorsForAll[from][msgSender],\\n            \\\"UNAUTHORIZED_BURN\\\"\\n        );\\n        _burn(from, owner, id);\\n    }\\n\\n    /// @notice Get the number of tokens owned by an address.\\n    /// @param owner The address to look for.\\n    /// @return The number of tokens owned by the address.\\n    function balanceOf(address owner) external view override returns (uint256) {\\n        require(owner != address(0), \\\"ZERO_ADDRESS_OWNER\\\");\\n        return _numNFTPerAddress[owner];\\n    }\\n\\n    /// @notice Get the owner of a token.\\n    /// @param id The id of the token.\\n    /// @return owner The address of the token owner.\\n    function ownerOf(uint256 id) external view override returns (address owner) {\\n        owner = _ownerOf(id);\\n        require(owner != address(0), \\\"NONEXISTANT_TOKEN\\\");\\n    }\\n\\n    /// @notice Get the approved operator for a specific token.\\n    /// @param id The id of the token.\\n    /// @return The address of the operator.\\n    function getApproved(uint256 id) external view override returns (address) {\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n        require(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n        if (operatorEnabled) {\\n            return _operators[id];\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    /// @notice Check if the sender approved the operator.\\n    /// @param owner The address of the owner.\\n    /// @param operator The address of the operator.\\n    /// @return isOperator The status of the approval.\\n    function isApprovedForAll(address owner, address operator) external view override returns (bool isOperator) {\\n        return _operatorsForAll[owner][operator] || _superOperators[operator];\\n    }\\n\\n    /// @notice Transfer a token between 2 addresses letting the receiver knows of the transfer.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param id The id of the token.\\n    /// @param data Additional data.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) public virtual override {\\n        _checkTransfer(from, to, id);\\n        _transferFrom(from, to, id);\\n        if (to.isContract()) {\\n            require(_checkOnERC721Received(_msgSender(), from, to, id, data), \\\"ERC721_TRANSFER_REJECTED\\\");\\n        }\\n    }\\n\\n    /// @notice Check if the contract supports an interface.\\n    /// 0x01ffc9a7 is ERC-165.\\n    /// 0x80ac58cd is ERC-721\\n    /// @param id The id of the interface.\\n    /// @return Whether the interface is supported.\\n    function supportsInterface(bytes4 id) public pure virtual override returns (bool) {\\n        return id == 0x01ffc9a7 || id == 0x80ac58cd;\\n    }\\n\\n    /// @dev By overriding this function in an implementation which inherits this contract,\\n    /// you can enable versioned tokenIds without the extra overhead of writing to a new storage slot in _owners each time a version is incremented.\\n    /// See GameToken._storageId() for an example, where the storageId is the tokenId minus the version number.\\n    /// !!! Caution !!! Overriding this function without taking appropriate care could lead to\\n    /// ownerOf() returning an owner for non-existent tokens. Tests should be written to\\n    /// guard against introducing this bug.\\n    /// @param id The id of a token.\\n    /// @return The id used for storage mappings.\\n    function _storageId(uint256 id) internal view virtual returns (uint256) {\\n        return id;\\n    }\\n\\n    function _updateOwnerData(\\n        uint256 id,\\n        uint256 oldData,\\n        address newOwner,\\n        bool hasOperator\\n    ) internal virtual {\\n        if (hasOperator) {\\n            _owners[_storageId(id)] = (oldData & NOT_ADDRESS) | OPERATOR_FLAG | uint256(uint160(newOwner));\\n        } else {\\n            _owners[_storageId(id)] = ((oldData & NOT_ADDRESS) & NOT_OPERATOR_FLAG) | uint256(uint160(newOwner));\\n        }\\n    }\\n\\n    function _transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) internal {\\n        _numNFTPerAddress[from]--;\\n        _numNFTPerAddress[to]++;\\n        _updateOwnerData(id, _owners[_storageId(id)], to, false);\\n        emit Transfer(from, to, id);\\n    }\\n\\n    /// @dev See approveFor.\\n    function _approveFor(\\n        uint256 ownerData,\\n        address operator,\\n        uint256 id\\n    ) internal {\\n        address owner = _ownerOf(id);\\n        if (operator == address(0)) {\\n            _updateOwnerData(id, ownerData, owner, false);\\n        } else {\\n            _updateOwnerData(id, ownerData, owner, true);\\n            _operators[id] = operator;\\n        }\\n        emit Approval(owner, operator, id);\\n    }\\n\\n    /// @dev See batchTransferFrom.\\n    function _batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        bytes memory data,\\n        bool safe\\n    ) internal {\\n        address msgSender = _msgSender();\\n        bool authorized = msgSender == from || _operatorsForAll[from][msgSender] || _superOperators[msgSender];\\n\\n        require(from != address(0), \\\"NOT_FROM_ZEROADDRESS\\\");\\n        require(to != address(0), \\\"NOT_TO_ZEROADDRESS\\\");\\n\\n        uint256 numTokens = ids.length;\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            uint256 id = ids[i];\\n            (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n            require(owner == from, \\\"BATCHTRANSFERFROM_NOT_OWNER\\\");\\n            require(authorized || (operatorEnabled && _operators[id] == msgSender), \\\"NOT_AUTHORIZED\\\");\\n            _updateOwnerData(id, _owners[_storageId(id)], to, false);\\n            emit Transfer(from, to, id);\\n        }\\n        if (from != to) {\\n            _numNFTPerAddress[from] -= numTokens;\\n            _numNFTPerAddress[to] += numTokens;\\n        }\\n\\n        if (to.isContract()) {\\n            if (_checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER)) {\\n                require(_checkOnERC721BatchReceived(msgSender, from, to, ids, data), \\\"ERC721_BATCH_RECEIVED_REJECTED\\\");\\n            } else if (safe) {\\n                for (uint256 i = 0; i < numTokens; i++) {\\n                    require(_checkOnERC721Received(msgSender, from, to, ids[i], data), \\\"ERC721_RECEIVED_REJECTED\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev See setApprovalForAll.\\n    function _setApprovalForAll(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) internal {\\n        require(!_superOperators[operator], \\\"INVALID_APPROVAL_CHANGE\\\");\\n        _operatorsForAll[sender][operator] = approved;\\n\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @dev See burn.\\n    function _burn(\\n        address from,\\n        address owner,\\n        uint256 id\\n    ) internal {\\n        require(from == owner, \\\"NOT_OWNER\\\");\\n        uint256 storageId = _storageId(id);\\n        _owners[storageId] = (_owners[storageId] & NOT_OPERATOR_FLAG) | BURNED_FLAG; // record as non owner but keep track of last owner\\n        _numNFTPerAddress[from]--;\\n        emit Transfer(from, address(0), id);\\n    }\\n\\n    /// @dev Check if receiving contract accepts erc721 transfers.\\n    /// @param operator The address of the operator.\\n    /// @param from The from address, may be different from msg.sender.\\n    /// @param to The adddress we want to transfer to.\\n    /// @param tokenId The id of the token we would like to transfer.\\n    /// @param _data Any additional data to send with the transfer.\\n    /// @return Whether the expected value of 0x150b7a02 is returned.\\n    function _checkOnERC721Received(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal returns (bool) {\\n        bytes4 retval = IERC721ReceiverUpgradeable(to).onERC721Received(operator, from, tokenId, _data);\\n        return (retval == _ERC721_RECEIVED);\\n    }\\n\\n    /// @dev Check if receiving contract accepts erc721 batch transfers.\\n    /// @param operator The address of the operator.\\n    /// @param from The from address, may be different from msg.sender.\\n    /// @param to The adddress we want to transfer to.\\n    /// @param ids The ids of the tokens we would like to transfer.\\n    /// @param _data Any additional data to send with the transfer.\\n    /// @return Whether the expected value of 0x4b808c46 is returned.\\n    function _checkOnERC721BatchReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        bytes memory _data\\n    ) internal returns (bool) {\\n        bytes4 retval = IERC721MandatoryTokenReceiver(to).onERC721BatchReceived(operator, from, ids, _data);\\n        return (retval == _ERC721_BATCH_RECEIVED);\\n    }\\n\\n    /// @dev See ownerOf\\n    function _ownerOf(uint256 id) internal view virtual returns (address) {\\n        uint256 data = _owners[_storageId(id)];\\n        if ((data & BURNED_FLAG) == BURNED_FLAG) {\\n            return address(0);\\n        }\\n        return address(uint160(data));\\n    }\\n\\n    /// @dev Get the owner and operatorEnabled status of a token.\\n    /// @param id The token to query.\\n    /// @return owner The owner of the token.\\n    /// @return operatorEnabled Whether or not operators are enabled for this token.\\n    function _ownerAndOperatorEnabledOf(uint256 id)\\n        internal\\n        view\\n        virtual\\n        returns (address owner, bool operatorEnabled)\\n    {\\n        uint256 data = _owners[_storageId(id)];\\n        if ((data & BURNED_FLAG) == BURNED_FLAG) {\\n            owner = address(0);\\n        } else {\\n            owner = address(uint160(data));\\n        }\\n        operatorEnabled = (data & OPERATOR_FLAG) == OPERATOR_FLAG;\\n    }\\n\\n    /// @dev Check whether a transfer is a meta Transaction or not.\\n    /// @param from The address who initiated the transfer (may differ from msg.sender).\\n    /// @param to The address recieving the token.\\n    /// @param id The token being transferred.\\n    /// @return isMetaTx Whether or not the transaction is a MetaTx.\\n    function _checkTransfer(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) internal view returns (bool isMetaTx) {\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n        address msgSender = _msgSender();\\n        require(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n        require(owner == from, \\\"CHECKTRANSFER_NOT_OWNER\\\");\\n        require(to != address(0), \\\"NOT_TO_ZEROADDRESS\\\");\\n        require(\\n            msgSender == owner ||\\n                _superOperators[msgSender] ||\\n                _operatorsForAll[from][msgSender] ||\\n                (operatorEnabled && _operators[id] == msgSender),\\n            \\\"UNAUTHORIZED_TRANSFER\\\"\\n        );\\n        return true;\\n    }\\n\\n    /// @dev Check if there was enough gas.\\n    /// @param _contract The address of the contract to check.\\n    /// @param interfaceId The id of the interface we want to test.\\n    /// @return Whether or not this check succeeded.\\n    function _checkInterfaceWith10000Gas(address _contract, bytes4 interfaceId) internal view returns (bool) {\\n        bool success;\\n        bool result;\\n        bytes memory callData = abi.encodeWithSelector(ERC165ID, interfaceId);\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let call_ptr := add(0x20, callData)\\n            let call_size := mload(callData)\\n            let output := mload(0x40) // Find empty storage location using \\\"free memory pointer\\\"\\n            mstore(output, 0x0)\\n            success := staticcall(10000, _contract, call_ptr, call_size, output, 0x20) // 32 bytes\\n            result := mload(output)\\n        }\\n        // (10000 / 63) \\\"not enough for supportsInterface(...)\\\" // consume all gas, so caller can potentially know that there was not enough gas\\n        assert(gasleft() > 158);\\n        return success && result;\\n    }\\n}\\n\",\"keccak256\":\"0xb81d1596de4fcf056fe291d3aac62e16ee3a43c446cd025168e3e25dcb4d81ae\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/WithAdminV2.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\ncontract WithAdminV2 is ContextUpgradeable {\\n    address internal _admin;\\n\\n    /// @dev Emits when the contract administrator is changed.\\n    /// @param oldAdmin The address of the previous administrator.\\n    /// @param newAdmin The address of the new administrator.\\n    event AdminChanged(address indexed oldAdmin, address indexed newAdmin);\\n\\n    modifier onlyAdmin() {\\n        require(_msgSender() == _admin, \\\"ADMIN_ONLY\\\");\\n        _;\\n    }\\n\\n    /// @dev Get the current administrator of this contract.\\n    /// @return The current administrator of this contract.\\n    function getAdmin() external view returns (address) {\\n        return _admin;\\n    }\\n\\n    /// @dev Change the administrator to be `newAdmin`.\\n    /// @param newAdmin The address of the new administrator.\\n    function changeAdmin(address newAdmin) external {\\n        address admin = _admin;\\n        require(_msgSender() == admin, \\\"ADMIN_ACCESS_DENIED\\\");\\n        emit AdminChanged(admin, newAdmin);\\n        _admin = newAdmin;\\n    }\\n}\\n\",\"keccak256\":\"0x25a4e5211a9b8b70e56b497342cf89a7a3f165ebade8f5e5bf33ff7be5d12343\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/WithSuperOperatorsV2.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\nimport \\\"./WithAdminV2.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\ncontract WithSuperOperatorsV2 is ContextUpgradeable, WithAdminV2 {\\n    mapping(address => bool) internal _superOperators;\\n\\n    event SuperOperator(address indexed superOperator, bool indexed enabled);\\n\\n    /// @notice Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights).\\n    /// @param superOperator address that will be given/removed superOperator right.\\n    /// @param enabled set whether the superOperator is enabled or disabled.\\n    function setSuperOperator(address superOperator, bool enabled) external {\\n        require(_msgSender() == _admin, \\\"only admin is allowed to add super operators\\\");\\n        _superOperators[superOperator] = enabled;\\n        emit SuperOperator(superOperator, enabled);\\n    }\\n\\n    /// @notice check whether address `who` is given superOperator rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has superOperator rights.\\n    function isSuperOperator(address who) public view returns (bool) {\\n        return _superOperators[who];\\n    }\\n}\\n\",\"keccak256\":\"0x5761a6f0cfb356d03cb3a96d7c2412621178e22d2510b1e7033aec85f617f3a2\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC721MandatoryTokenReceiver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5e8bf644.\\ninterface IERC721MandatoryTokenReceiver {\\n    function onERC721BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external returns (bytes4); // needs to return 0x4b808c46\\n\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4); // needs to return 0x150b7a02\\n}\\n\",\"keccak256\":\"0x66db07bc53d4c7f6b8f23dfa76874378e01b87a1b81726d5d637942d072203a9\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/ILandToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\ninterface ILandToken {\\n    function batchTransferQuad(\\n        address from,\\n        address to,\\n        uint256[] calldata sizes,\\n        uint256[] calldata xs,\\n        uint256[] calldata ys,\\n        bytes calldata data\\n    ) external;\\n\\n    function transferQuad(\\n        address from,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes calldata data\\n    ) external;\\n\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf1cb108c7274c973356adedb18230b18bdad992b946e0921cc3ebed04f59c92e\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IPolygonLand.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"./ILandToken.sol\\\";\\n\\ninterface IPolygonLand is ILandToken {\\n    function mintQuad(\\n        address user,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes memory data\\n    ) external;\\n\\n    function exists(\\n        uint256 size,\\n        uint256 x,\\n        uint256 y\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5a52e567ddb2271b88c5dfe919401036f0f6c15dd7ff7a6eb055e12a6c12f06c\",\"license\":\"MIT\"},\"src/solc_0.8/polygon/child/land/PolygonLandBaseTokenV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable code-complexity\\n\\npragma solidity 0.8.2;\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../../common/BaseWithStorage/ERC721BaseTokenV2.sol\\\";\\nimport \\\"../../../common/interfaces/IPolygonLand.sol\\\";\\n\\nabstract contract PolygonLandBaseTokenV2 is IPolygonLand, Initializable, ERC721BaseTokenV2 {\\n    using AddressUpgradeable for address;\\n\\n    uint256 internal constant GRID_SIZE = 408;\\n\\n    uint256 internal constant LAYER = 0xFF00000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_1x1 = 0x0000000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_3x3 = 0x0100000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_6x6 = 0x0200000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_12x12 = 0x0300000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_24x24 = 0x0400000000000000000000000000000000000000000000000000000000000000;\\n\\n    mapping(address => bool) internal _minters;\\n\\n    event Minter(address minter, bool enabled);\\n\\n    struct Land {\\n        uint256 x;\\n        uint256 y;\\n        uint256 size;\\n    }\\n\\n    modifier validQuad(\\n        uint256 size,\\n        uint256 x,\\n        uint256 y\\n    ) {\\n        require(size == 1 || size == 3 || size == 6 || size == 12 || size == 24, \\\"Invalid size\\\");\\n        require(x % size == 0 && y % size == 0, \\\"Invalid coordinates\\\");\\n        require(x <= GRID_SIZE - size && y <= GRID_SIZE - size, \\\"Out of bounds\\\");\\n\\n        _;\\n    }\\n\\n    /// @notice transfer multiple quad (aligned to a quad tree with size 3, 6, 12 or 24 only)\\n    /// @param from current owner of the quad\\n    /// @param to destination\\n    /// @param sizes list of sizes for each quad\\n    /// @param xs list of top left x coordinates for each quad\\n    /// @param ys list of top left y coordinates for each quad\\n    /// @param data additional data\\n    function batchTransferQuad(\\n        address from,\\n        address to,\\n        uint256[] calldata sizes,\\n        uint256[] calldata xs,\\n        uint256[] calldata ys,\\n        bytes calldata data\\n    ) external override {\\n        require(from != address(0), \\\"from is zero address\\\");\\n        require(to != address(0), \\\"can't send to zero address\\\");\\n        require(sizes.length == xs.length && xs.length == ys.length, \\\"invalid data\\\");\\n        if (_msgSender() != from) {\\n            require(\\n                _operatorsForAll[from][_msgSender()] || _superOperators[_msgSender()],\\n                \\\"not authorized to transferMultiQuads\\\"\\n            );\\n        }\\n        uint256 numTokensTransfered = 0;\\n        for (uint256 i = 0; i < sizes.length; i++) {\\n            uint256 size = sizes[i];\\n            _transferQuad(from, to, size, xs[i], ys[i]);\\n            numTokensTransfered += size * size;\\n        }\\n        _numNFTPerAddress[from] -= numTokensTransfered;\\n        _numNFTPerAddress[to] += numTokensTransfered;\\n\\n        if (to.isContract() && _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER)) {\\n            uint256[] memory ids = new uint256[](numTokensTransfered);\\n            uint256 counter = 0;\\n            for (uint256 j = 0; j < sizes.length; j++) {\\n                uint256 size = sizes[j];\\n                for (uint256 i = 0; i < size * size; i++) {\\n                    ids[counter] = _idInPath(i, size, xs[j], ys[j]);\\n                    counter++;\\n                }\\n            }\\n            require(\\n                _checkOnERC721BatchReceived(_msgSender(), from, to, ids, data),\\n                \\\"erc721 batch transfer rejected by to\\\"\\n            );\\n        }\\n    }\\n\\n    /// @notice Enable or disable the ability of `minter` to transfer tokens of all (minter rights).\\n    /// @param minter address that will be given/removed minter right.\\n    /// @param enabled set whether the minter is enabled or disabled.\\n    function setMinter(address minter, bool enabled) external {\\n        require(_msgSender() == _admin, \\\"only admin is allowed to add minters\\\");\\n        require(minter != address(0), \\\"PolygonLand: Invalid address\\\");\\n        _minters[minter] = enabled;\\n        emit Minter(minter, enabled);\\n    }\\n\\n    /// @notice transfer one quad (aligned to a quad tree with size 3, 6, 12 or 24 only)\\n    /// @param from current owner of the quad\\n    /// @param to destination\\n    /// @param size size of the quad\\n    /// @param x The top left x coordinate of the quad\\n    /// @param y The top left y coordinate of the quad\\n    /// @param data additional data\\n    function transferQuad(\\n        address from,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes calldata data\\n    ) external override {\\n        require(from != address(0), \\\"from is zero address\\\");\\n        require(to != address(0), \\\"can't send to zero address\\\");\\n        if (_msgSender() != from) {\\n            require(\\n                _operatorsForAll[from][_msgSender()] || _superOperators[_msgSender()],\\n                \\\"not authorized to transferQuad\\\"\\n            );\\n        }\\n        _transferQuad(from, to, size, x, y);\\n        _numNFTPerAddress[from] -= size * size;\\n        _numNFTPerAddress[to] += size * size;\\n\\n        _checkBatchReceiverAcceptQuad(_msgSender(), from, to, size, x, y, data);\\n    }\\n\\n    /**\\n     * @notice Mint a new quad (aligned to a quad tree with size 1, 3, 6, 12 or 24 only)\\n     * @param user The recipient of the new quad\\n     * @param size The size of the new quad\\n     * @param x The top left x coordinate of the new quad\\n     * @param y The top left y coordinate of the new quad\\n     * @param data extra data to pass to the transfer\\n     */\\n    function mintQuad(\\n        address user,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes memory data\\n    ) external virtual override validQuad(size, x, y) {\\n        require(isMinter(_msgSender()), \\\"!AUTHORIZED\\\");\\n        _mintQuad(user, size, x, y, data);\\n    }\\n\\n    /**\\n     * @notice Checks if a parent quad has child quads already minted.\\n     *  Then mints the rest child quads and transfers the parent quad.\\n     *  Should only be called by the tunnel.\\n     * @param to The recipient of the new quad\\n     * @param size The size of the new quad\\n     * @param x The top left x coordinate of the new quad\\n     * @param y The top left y coordinate of the new quad\\n     * @param data extra data to pass to the transfer\\n     */\\n    function mintAndTransferQuad(\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes calldata data\\n    ) external virtual {\\n        require(isMinter(msg.sender), \\\"!AUTHORIZED\\\");\\n        require(to != address(0), \\\"to is zero address\\\");\\n\\n        if (exists(size, x, y) == true) {\\n            _transferQuad(msg.sender, to, size, x, y);\\n            _numNFTPerAddress[msg.sender] -= size * size;\\n            _numNFTPerAddress[to] += size * size;\\n            _checkBatchReceiverAcceptQuad(msg.sender, msg.sender, to, size, x, y, data);\\n        } else {\\n            _mintAndTransferQuad(to, size, x, y, data);\\n        }\\n    }\\n\\n    /// @notice x coordinate of Land token\\n    /// @param id tokenId\\n    /// @return the x coordinates\\n    function getX(uint256 id) external pure returns (uint256) {\\n        return _getX(id);\\n    }\\n\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) public virtual override(ILandToken, ERC721BaseTokenV2) {\\n        super.batchTransferFrom(from, to, ids, data);\\n    }\\n\\n    /// @notice y coordinate of Land token\\n    /// @param id tokenId\\n    /// @return the y coordinates\\n    function getY(uint256 id) external pure returns (uint256) {\\n        return _getY(id);\\n    }\\n\\n    /**\\n     * @notice Check if the contract supports an interface\\n     * 0x01ffc9a7 is ERC-165\\n     * 0x80ac58cd is ERC-721\\n     * 0x5b5e139f is ERC-721 metadata\\n     * @param id The id of the interface\\n     * @return True if the interface is supported\\n     */\\n    function supportsInterface(bytes4 id) public pure override returns (bool) {\\n        return id == 0x01ffc9a7 || id == 0x80ac58cd || id == 0x5b5e139f;\\n    }\\n\\n    /**\\n     * @notice Return the name of the token contract\\n     * @return The name of the token contract\\n     */\\n    function name() public pure returns (string memory) {\\n        return \\\"Sandbox's LANDs\\\";\\n    }\\n\\n    /// @notice check whether address `who` is given minter rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has minter rights.\\n    function isMinter(address who) public view returns (bool) {\\n        return _minters[who];\\n    }\\n\\n    /// @notice checks if Land has been minted or not\\n    /// @param size size of the\\n    /// @param x x coordinate of the quad\\n    /// @param y y coordinate of the quad\\n    /// @return bool for if Land has been minted or not\\n    function exists(\\n        uint256 size,\\n        uint256 x,\\n        uint256 y\\n    ) public view override validQuad(size, x, y) returns (bool) {\\n        return _ownerOfQuad(size, x, y) != address(0);\\n    }\\n\\n    /**\\n     * @notice Return the symbol of the token contract\\n     * @return The symbol of the token contract\\n     */\\n    function symbol() public pure returns (string memory) {\\n        return \\\"LAND\\\";\\n    }\\n\\n    /// @notice total width of the map\\n    /// @return width\\n    function width() public pure returns (uint256) {\\n        return GRID_SIZE;\\n    }\\n\\n    /// @notice total height of the map\\n    /// @return height\\n    function height() public pure returns (uint256) {\\n        return GRID_SIZE;\\n    }\\n\\n    /**\\n     * @notice Return the URI of a specific token\\n     * @param id The id of the token\\n     * @return The URI of the token\\n     */\\n    function tokenURI(uint256 id) public view returns (string memory) {\\n        require(_ownerOf(id) != address(0), \\\"Id does not exist\\\");\\n        return\\n            string(\\n                abi.encodePacked(\\\"https://api.sandbox.game/lands/\\\", StringsUpgradeable.toString(id), \\\"/metadata.json\\\")\\n            );\\n    }\\n\\n    function _transferQuad(\\n        address from,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y\\n    ) internal validQuad(size, x, y) {\\n        if (size == 1) {\\n            uint256 id1x1 = _getQuadId(LAYER_1x1, x, y);\\n            address owner = _ownerOf(id1x1);\\n            require(owner != address(0), \\\"token does not exist\\\");\\n            require(owner == from, \\\"not owner in _transferQuad\\\");\\n            _owners[id1x1] = uint256(uint160(address(to)));\\n        } else {\\n            _regroup(from, to, size, x, y);\\n        }\\n        for (uint256 i = 0; i < size * size; i++) {\\n            emit Transfer(from, to, _idInPath(i, size, x, y));\\n        }\\n    }\\n\\n    function _mintQuad(\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes memory data\\n    ) internal {\\n        require(to != address(0), \\\"to is zero address\\\");\\n\\n        (uint256 layer, , ) = _getQuadLayer(size);\\n        uint256 quadId = _getQuadId(layer, x, y);\\n\\n        _checkOwner(size, x, y, 24);\\n        for (uint256 i = 0; i < size * size; i++) {\\n            uint256 _id = _idInPath(i, size, x, y);\\n            require(_owners[_id] == 0, \\\"Already minted\\\");\\n            emit Transfer(address(0), to, _id);\\n        }\\n\\n        _owners[quadId] = uint256(uint160(to));\\n        _numNFTPerAddress[to] += size * size;\\n\\n        _checkBatchReceiverAcceptQuad(msg.sender, address(0), to, size, x, y, data);\\n    }\\n\\n    function _mintAndTransferQuad(\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes memory data\\n    ) internal {\\n        (uint256 layer, , ) = _getQuadLayer(size);\\n        uint256 quadId = _getQuadId(layer, x, y);\\n\\n        // Length of array is equal to number of 3x3 child quad a 24x24 quad can have\\n        Land[] memory quadMinted = new Land[](64);\\n        uint256 index;\\n        uint256 landMinted;\\n\\n        if (size > 3) {\\n            (index, landMinted) = _checkAndClearOwner(\\n                Land({x: x, y: y, size: size}),\\n                quadMinted,\\n                landMinted,\\n                index,\\n                size / 2\\n            );\\n        }\\n\\n        {\\n            for (uint256 i = 0; i < size * size; i++) {\\n                uint256 _id = _idInPath(i, size, x, y);\\n                bool isAlreadyMinted = _isQuadMinted(quadMinted, Land({x: _getX(_id), y: _getY(_id), size: 1}), index);\\n                if (isAlreadyMinted) {\\n                    emit Transfer(msg.sender, to, _id);\\n                } else {\\n                    if (_owners[_id] == uint256(uint160(msg.sender))) {\\n                        landMinted += 1;\\n                        emit Transfer(msg.sender, to, _id);\\n                    } else {\\n                        require(_owners[_id] == 0, \\\"Already minted\\\");\\n\\n                        emit Transfer(address(0), to, _id);\\n                    }\\n                }\\n            }\\n        }\\n\\n        _checkBatchReceiverAcceptQuadAndClearOwner(quadMinted, index, landMinted, to, size, x, y, data);\\n\\n        _owners[quadId] = uint256(uint160(to));\\n        _numNFTPerAddress[to] += size * size;\\n        _numNFTPerAddress[msg.sender] -= landMinted;\\n    }\\n\\n    function _checkAndClearOwner(\\n        Land memory land,\\n        Land[] memory quadMinted,\\n        uint256 landMinted,\\n        uint256 index,\\n        uint256 quadCompareSize\\n    ) internal returns (uint256, uint256) {\\n        (uint256 layer, , ) = _getQuadLayer(quadCompareSize);\\n        uint256 toX = land.x + land.size;\\n        uint256 toY = land.y + land.size;\\n\\n        for (uint256 xi = land.x; xi < toX; xi += quadCompareSize) {\\n            for (uint256 yi = land.y; yi < toY; yi += quadCompareSize) {\\n                bool isQuadChecked = _isQuadMinted(quadMinted, Land({x: xi, y: yi, size: quadCompareSize}), index);\\n                if (!isQuadChecked) {\\n                    uint256 id = _getQuadId(layer, xi, yi);\\n                    address owner = address(uint160(_owners[id]));\\n\\n                    if (owner == msg.sender) {\\n                        quadMinted[index] = Land({x: xi, y: yi, size: quadCompareSize});\\n                        index++;\\n                        landMinted += quadCompareSize * quadCompareSize;\\n                        _owners[id] = 0;\\n                    } else {\\n                        require(owner == address(0), \\\"Already minted\\\");\\n                    }\\n                }\\n            }\\n        }\\n\\n        quadCompareSize = quadCompareSize / 2;\\n        if (quadCompareSize >= 3)\\n            (index, landMinted) = _checkAndClearOwner(land, quadMinted, landMinted, index, quadCompareSize);\\n        return (index, landMinted);\\n    }\\n\\n    function _checkAndClear(address from, uint256 id) internal returns (bool) {\\n        uint256 owner = _owners[id];\\n        if (owner != 0) {\\n            require((owner & BURNED_FLAG) != BURNED_FLAG, \\\"not owner\\\");\\n            require(address(uint160(owner)) == from, \\\"not owner\\\");\\n            _owners[id] = 0;\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function _checkBatchReceiverAcceptQuad(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes memory data\\n    ) internal {\\n        if (to.isContract() && _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER)) {\\n            uint256[] memory ids = new uint256[](size * size);\\n            for (uint256 i = 0; i < size * size; i++) {\\n                ids[i] = _idInPath(i, size, x, y);\\n            }\\n            require(_checkOnERC721BatchReceived(operator, from, to, ids, data), \\\"erc721 batch transfer rejected by to\\\");\\n        }\\n    }\\n\\n    function _checkBatchReceiverAcceptQuadAndClearOwner(\\n        Land[] memory quadMinted,\\n        uint256 index,\\n        uint256 landMinted,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes memory data\\n    ) internal {\\n        if (to.isContract() && _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER)) {\\n            uint256[] memory idsToTransfer = new uint256[](landMinted);\\n            uint256 transferIndex;\\n            uint256[] memory idsToMint = new uint256[]((size * size) - landMinted);\\n            uint256 mintIndex;\\n\\n            for (uint256 i = 0; i < size * size; i++) {\\n                uint256 id = _idInPath(i, size, x, y);\\n\\n                if (_isQuadMinted(quadMinted, Land({x: _getX(id), y: _getY(id), size: 1}), index)) {\\n                    idsToTransfer[transferIndex] = id;\\n                    transferIndex++;\\n                } else if (_owners[id] == uint256(uint160(msg.sender))) {\\n                    _owners[id] = 0;\\n                    idsToTransfer[transferIndex] = id;\\n                    transferIndex++;\\n                } else {\\n                    idsToMint[mintIndex] = id;\\n                    mintIndex++;\\n                }\\n            }\\n            require(\\n                _checkOnERC721BatchReceived(msg.sender, address(0), to, idsToMint, data),\\n                \\\"erc721 batch transfer rejected by to\\\"\\n            );\\n            require(\\n                _checkOnERC721BatchReceived(msg.sender, msg.sender, to, idsToTransfer, data),\\n                \\\"erc721 batch transfer rejected by to\\\"\\n            );\\n        } else {\\n            for (uint256 i = 0; i < size * size; i++) {\\n                uint256 id = _idInPath(i, size, x, y);\\n                if (_owners[id] == uint256(uint160(msg.sender))) _owners[id] = 0;\\n            }\\n        }\\n    }\\n\\n    function _getX(uint256 id) internal pure returns (uint256) {\\n        return ((id << 8) >> 8) % GRID_SIZE;\\n    }\\n\\n    function _getY(uint256 id) internal pure returns (uint256) {\\n        return ((id << 8) >> 8) / GRID_SIZE;\\n    }\\n\\n    function _isQuadMinted(\\n        Land[] memory mintedLand,\\n        Land memory quad,\\n        uint256 index\\n    ) internal pure returns (bool) {\\n        for (uint256 i = 0; i < index; i++) {\\n            Land memory land = mintedLand[i];\\n            if (\\n                land.size > quad.size &&\\n                quad.x >= land.x &&\\n                quad.x < land.x + land.size &&\\n                quad.y >= land.y &&\\n                quad.y < land.y + land.size\\n            ) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function _getQuadLayer(uint256 size)\\n        internal\\n        pure\\n        returns (\\n            uint256 layer,\\n            uint256 parentSize,\\n            uint256 childLayer\\n        )\\n    {\\n        if (size == 1) {\\n            layer = LAYER_1x1;\\n            parentSize = 3;\\n        } else if (size == 3) {\\n            layer = LAYER_3x3;\\n            parentSize = 6;\\n        } else if (size == 6) {\\n            layer = LAYER_6x6;\\n            parentSize = 12;\\n            childLayer = LAYER_3x3;\\n        } else if (size == 12) {\\n            layer = LAYER_12x12;\\n            parentSize = 24;\\n            childLayer = LAYER_6x6;\\n        } else if (size == 24) {\\n            layer = LAYER_24x24;\\n            childLayer = LAYER_12x12;\\n        } else {\\n            require(false, \\\"Invalid size\\\");\\n        }\\n    }\\n\\n    function _getQuadId(\\n        uint256 layer,\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (uint256 quadId) {\\n        quadId = layer + x + y * GRID_SIZE;\\n    }\\n\\n    function _checkOwner(\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        uint256 quadCompareSize\\n    ) internal view {\\n        (uint256 layer, , ) = _getQuadLayer(quadCompareSize);\\n\\n        if (size <= quadCompareSize) {\\n            // when the size of the quad is smaller than the quadCompareSize(size to be compared with),\\n            // then it is checked if the bigger quad which encapsulates the quad to be minted\\n            // of with size equals the quadCompareSize has been minted or not\\n            require(\\n                _owners[\\n                    _getQuadId(layer, (x / quadCompareSize) * quadCompareSize, (y / quadCompareSize) * quadCompareSize)\\n                ] == 0,\\n                \\\"Already minted\\\"\\n            );\\n        } else {\\n            // when the size is smaller than the quadCompare size the owner of all the smaller quads with size\\n            // quadCompare size in the quad to be minted are checked if they are minted or not\\n            uint256 toX = x + size;\\n            uint256 toY = y + size;\\n            for (uint256 xi = x; xi < toX; xi += quadCompareSize) {\\n                for (uint256 yi = y; yi < toY; yi += quadCompareSize) {\\n                    require(_owners[_getQuadId(layer, xi, yi)] == 0, \\\"Already minted\\\");\\n                }\\n            }\\n        }\\n\\n        quadCompareSize = quadCompareSize / 2;\\n        if (quadCompareSize >= 3) _checkOwner(size, x, y, quadCompareSize);\\n    }\\n\\n    function _idInPath(\\n        uint256 i,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (uint256) {\\n        uint256 row = i / size;\\n        if (row % 2 == 0) {\\n            // allow ids to follow a path in a quad\\n            return _getQuadId(LAYER_1x1, (x + (i % size)), (y + row));\\n        } else {\\n            return _getQuadId(LAYER_1x1, (x + size) - (1 + (i % size)), (y + row));\\n        }\\n    }\\n\\n    function _regroup(\\n        address from,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y\\n    ) internal {\\n        require(x % size == 0 && y % size == 0, \\\"Invalid coordinates\\\");\\n        require(x <= GRID_SIZE - size && y <= GRID_SIZE - size, \\\"Out of bounds\\\");\\n        if (size == 3 || size == 6 || size == 12 || size == 24) {\\n            _regroupQuad(from, to, Land({x: x, y: y, size: size}), true, size / 2);\\n        } else {\\n            require(false, \\\"Invalid size\\\");\\n        }\\n    }\\n\\n    /// @dev checks if the Land's child quads are owned by the from address and clears all the previous owners\\n    /// if all the child quads are not owned by the \\\"from\\\" address then the owner of parent quad to the land\\n    /// is checked if owned by the \\\"from\\\" address. If from is the owner then land owner is set to \\\"to\\\" address\\n    /// @param from address of the previous owner\\n    /// @param to address of the new owner\\n    /// @param land the quad to be regrouped and transfered\\n    /// @param set for setting the new owner\\n    /// @param childQuadSize  size of the child quad to be checked for owner in the regrouping\\n    function _regroupQuad(\\n        address from,\\n        address to,\\n        Land memory land,\\n        bool set,\\n        uint256 childQuadSize\\n    ) internal returns (bool) {\\n        (uint256 layer, , uint256 childLayer) = _getQuadLayer(land.size);\\n        uint256 quadId = _getQuadId(layer, land.x, land.y);\\n        bool ownerOfAll = true;\\n\\n        {\\n            // double for loop itereates and checks owner of all the smaller quads in land\\n            for (uint256 xi = land.x; xi < land.x + land.size; xi += childQuadSize) {\\n                for (uint256 yi = land.y; yi < land.y + land.size; yi += childQuadSize) {\\n                    uint256 ownerChild;\\n                    bool ownAllIndividual;\\n                    if (childQuadSize < 3) {\\n                        // case when the smaller quad is 1x1,\\n                        ownAllIndividual = _checkAndClear(from, _getQuadId(LAYER_1x1, xi, yi)) && ownerOfAll;\\n                    } else {\\n                        // recursively calling the _regroupQuad function to check the owner of child quads.\\n                        ownAllIndividual = _regroupQuad(\\n                            from,\\n                            to,\\n                            Land({x: xi, y: yi, size: childQuadSize}),\\n                            false,\\n                            childQuadSize / 2\\n                        );\\n                        uint256 idChild = _getQuadId(childLayer, xi, yi);\\n                        ownerChild = _owners[idChild];\\n                        if (ownerChild != 0) {\\n                            // checking the owner of child quad\\n                            if (!ownAllIndividual) {\\n                                require(ownerChild == uint256(uint160(from)), \\\"not owner of child Quad\\\");\\n                            }\\n                            // clearing owner of child qua\\n                            _owners[idChild] = 0;\\n                        }\\n                    }\\n                    // ownerOfAll should be true if \\\"from\\\" is owner of all the child quads ittereated over\\n                    ownerOfAll = (ownAllIndividual || ownerChild != 0) && ownerOfAll;\\n                }\\n            }\\n        }\\n\\n        // if set is true it check if the \\\"from\\\" is owner of all else checks for the owner of parent quad is\\n        // owned by \\\"from\\\" and sets the owner for the id of land to \\\"to\\\" address.\\n        if (set) {\\n            if (!ownerOfAll) {\\n                require(_ownerOfQuad(land.size, land.x, land.y) == from, \\\"not owner of all sub quads nor parent quads\\\");\\n            }\\n            _owners[quadId] = uint256(uint160(to));\\n            return true;\\n        }\\n\\n        return ownerOfAll;\\n    }\\n\\n    function _ownerOfQuad(\\n        uint256 size,\\n        uint256 x,\\n        uint256 y\\n    ) internal view returns (address) {\\n        (uint256 layer, uint256 parentSize, ) = _getQuadLayer(size);\\n        address owner = address(uint160(_owners[_getQuadId(layer, (x / size) * size, (y / size) * size)]));\\n        if (owner != address(0)) {\\n            return owner;\\n        } else if (size < 24) {\\n            return _ownerOfQuad(parentSize, x, y);\\n        }\\n        return address(0);\\n    }\\n\\n    function _getQuadById(uint256 id)\\n        internal\\n        pure\\n        returns (\\n            uint256 size,\\n            uint256 x,\\n            uint256 y\\n        )\\n    {\\n        x = _getX(id);\\n        y = _getY(id);\\n        uint256 layer = id & LAYER;\\n        if (layer == LAYER_1x1) {\\n            size = 1;\\n        } else if (layer == LAYER_3x3) {\\n            size = 3;\\n        } else if (layer == LAYER_6x6) {\\n            size = 6;\\n        } else if (layer == LAYER_12x12) {\\n            size = 12;\\n        } else if (layer == LAYER_24x24) {\\n            size = 24;\\n        } else {\\n            require(false, \\\"Invalid token id\\\");\\n        }\\n    }\\n\\n    function _ownerOf(uint256 id) internal view override returns (address) {\\n        (uint256 size, uint256 x, uint256 y) = _getQuadById(id);\\n        require(x % size == 0 && y % size == 0, \\\"Invalid token id\\\");\\n        if (size == 1) {\\n            uint256 owner1x1 = _owners[id];\\n            return (owner1x1 & BURNED_FLAG) == BURNED_FLAG ? address(0) : _ownerOfQuad(size, x, y);\\n        }\\n        return _ownerOfQuad(size, x, y);\\n    }\\n\\n    function _ownerAndOperatorEnabledOf(uint256 id)\\n        internal\\n        view\\n        override\\n        returns (address owner, bool operatorEnabled)\\n    {\\n        require(id & LAYER == 0, \\\"Invalid token id\\\");\\n        uint256 x = id % GRID_SIZE;\\n        uint256 y = id / GRID_SIZE;\\n        uint256 owner1x1 = _owners[id];\\n\\n        if ((owner1x1 & BURNED_FLAG) == BURNED_FLAG) {\\n            owner = address(0);\\n            operatorEnabled = (owner1x1 & OPERATOR_FLAG) == OPERATOR_FLAG;\\n            return (owner, operatorEnabled);\\n        }\\n\\n        if (owner1x1 != 0) {\\n            owner = address(uint160(owner1x1));\\n            operatorEnabled = (owner1x1 & OPERATOR_FLAG) == OPERATOR_FLAG;\\n        } else {\\n            owner = _ownerOfQuad(3, (x * 3) / 3, (y * 3) / 3);\\n            operatorEnabled = false;\\n        }\\n    }\\n\\n    // Empty storage space in contracts for future enhancements\\n    // ref: https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/issues/13)\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x89ce48088e41ee6d68ffe5a77a7ac802182c7dc81872348c1d4d423e309c942f\",\"license\":\"MIT\"},\"src/solc_0.8/polygon/child/land/PolygonLandV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.2;\\n\\nimport \\\"./PolygonLandBaseTokenV2.sol\\\";\\nimport \\\"../../../common/BaseWithStorage/ERC2771Handler.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../OperatorFilterer/contracts/upgradeable/OperatorFiltererUpgradeable.sol\\\";\\n\\n/// @title LAND token on L2\\ncontract PolygonLandV2 is PolygonLandBaseTokenV2, ERC2771Handler, OperatorFiltererUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function initialize(address trustedForwarder) external initializer {\\n        _admin = _msgSender();\\n        __ERC2771Handler_initialize(trustedForwarder);\\n    }\\n\\n    /// @dev Change the address of the trusted forwarder for meta-TX\\n    /// @param trustedForwarder The new trustedForwarder\\n    function setTrustedForwarder(address trustedForwarder) external onlyAdmin {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view override(ContextUpgradeable, ERC2771Handler) returns (address sender) {\\n        return ERC2771Handler._msgSender();\\n    }\\n\\n    function _msgData() internal view override(ContextUpgradeable, ERC2771Handler) returns (bytes calldata) {\\n        return ERC2771Handler._msgData();\\n    }\\n\\n    /**\\n     * @notice Approve an operator to spend tokens on the sender behalf\\n     * @param sender The address giving the approval\\n     * @param operator The address receiving the approval\\n     * @param id The id of the token\\n     */\\n    function approveFor(\\n        address sender,\\n        address operator,\\n        uint256 id\\n    ) external override onlyAllowedOperatorApproval(operator) {\\n        uint256 ownerData = _owners[_storageId(id)];\\n        address owner = _ownerOf(id);\\n        address msgSender = _msgSender();\\n        require(sender != address(0), \\\"PolygonLandV2: ZERO_ADDRESS_SENDER\\\");\\n        require(owner != address(0), \\\"PolygonLandV2: NONEXISTENT_TOKEN\\\");\\n        require(\\n            msgSender == sender || _operatorsForAll[sender][msgSender] || _superOperators[msgSender],\\n            \\\"PolygonLandV2: UNAUTHORIZED_APPROVAL\\\"\\n        );\\n        require(address(uint160(ownerData)) == sender, \\\"PolygonLandV2: OWNER_NOT_SENDER\\\");\\n        _approveFor(ownerData, operator, id);\\n    }\\n\\n    /**\\n     * @notice Approve an operator to spend tokens on the sender behalf\\n     * @param operator The address receiving the approval\\n     * @param id The id of the token\\n     */\\n    function approve(address operator, uint256 id) external override onlyAllowedOperatorApproval(operator) {\\n        uint256 ownerData = _owners[_storageId(id)];\\n        address owner = _ownerOf(id);\\n        address msgSender = _msgSender();\\n        require(owner != address(0), \\\"PolygonLandV2: NONEXISTENT_TOKEN\\\");\\n        require(\\n            owner == msgSender || _operatorsForAll[owner][msgSender] || _superOperators[msgSender],\\n            \\\"PolygonLandV2: UNAUTHORIZED_APPROVAL\\\"\\n        );\\n        _approveFor(ownerData, operator, id);\\n    }\\n\\n    /**\\n     * @notice Transfer a token between 2 addresses\\n     * @param from The sender of the token\\n     * @param to The recipient of the token\\n     * @param id The id of the token\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) external override onlyAllowedOperator(from) {\\n        _checkTransfer(from, to, id);\\n        _transferFrom(from, to, id);\\n        if (to.isContract() && _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER)) {\\n            require(_checkOnERC721Received(_msgSender(), from, to, id, \\\"\\\"), \\\"PolygonLandV2: ERC721_TRANSFER_REJECTED\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfer a token between 2 addresses letting the receiver knows of the transfer\\n     * @param from The sender of the token\\n     * @param to The recipient of the token\\n     * @param id The id of the token\\n     * @param data Additional data\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) public override onlyAllowedOperator(from) {\\n        _checkTransfer(from, to, id);\\n        _transferFrom(from, to, id);\\n        if (to.isContract()) {\\n            require(\\n                _checkOnERC721Received(_msgSender(), from, to, id, data),\\n                \\\"PolygonLandV2: ERC721_TRANSFER_REJECTED\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfer a token between 2 addresses letting the receiver knows of the transfer\\n     * @param from The send of the token\\n     * @param to The recipient of the token\\n     * @param id The id of the token\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) external override onlyAllowedOperator(from) {\\n        safeTransferFrom(from, to, id, \\\"\\\");\\n    }\\n\\n    /**\\n     * @notice Set the approval for an operator to manage all the tokens of the sender\\n     * @param operator The address receiving the approval\\n     * @param approved The determination of the approval\\n     */\\n    function setApprovalForAll(address operator, bool approved)\\n        external\\n        override\\n        onlyAllowedOperatorApproval(operator)\\n    {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @notice Set the approval for an operator to manage all the tokens of the sender\\n     * @param sender The address giving the approval\\n     * @param operator The address receiving the approval\\n     * @param approved The determination of the approval\\n     */\\n    function setApprovalForAllFor(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) external override onlyAllowedOperatorApproval(operator) {\\n        require(sender != address(0), \\\"PolygonLandV2: Invalid sender address\\\");\\n        address msgSender = _msgSender();\\n        require(msgSender == sender || _superOperators[msgSender], \\\"PolygonLandV2: UNAUTHORIZED_APPROVE_FOR_ALL\\\");\\n\\n        _setApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @notice This function is used to register Land contract on the Operator filterer Registry of Opensea.\\n    /// @dev can only be called by admin.\\n    /// @param subscriptionOrRegistrantToCopy registration address of the list to subscribe.\\n    /// @param subscribe bool to signify subscription \\\"true\\\"\\\" or to copy the list \\\"false\\\".\\n    function register(address subscriptionOrRegistrantToCopy, bool subscribe) external onlyAdmin {\\n        require(subscriptionOrRegistrantToCopy != address(0), \\\"PolygonLandV2: subscription can't be zero address\\\");\\n        _register(subscriptionOrRegistrantToCopy, subscribe);\\n    }\\n\\n    /// @notice sets filter registry address deployed in test\\n    /// @param registry the address of the registry\\n    function setOperatorRegistry(address registry) external virtual onlyAdmin {\\n        operatorFilterRegistry = IOperatorFilterRegistry(registry);\\n    }\\n}\\n\",\"keccak256\":\"0xd28b41f897c7d429fc7137fb189312868e762f11a28acd18897e60b3302a977b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615ffa80620000216000396000f3fe608060405234801561001057600080fd5b50600436106102d35760003560e01c806379cc679011610186578063ac9fe421116100e3578063ce1b815f11610097578063e985e9c511610071578063e985e9c51461062a578063eaa5e0671461063d578063eeb5a5d114610650576102d3565b8063ce1b815f146105f3578063cf456ae714610604578063da74222814610617576102d3565b8063b88d4fde116100c8578063b88d4fde146105ba578063c4d66de8146105cd578063c87b56dd146105e0576102d3565b8063ac9fe42114610594578063b0ccc31e146105a7576102d3565b80639d28fb861161013a578063a22cb4651161011f578063a22cb46514610542578063aa271e1a14610555578063ab01b46914610581576102d3565b80639d28fb861461052f5780639ededf7714610355576102d3565b80638e5cb5f61161016b5780638e5cb5f6146104d05780638f283970146104e357806395d89b41146104f6576102d3565b806379cc6790146104aa578063845a4697146104bd576102d3565b806342842e0e116102345780636352211e116101e85780636e1e3bbf116101cd5780636e1e3bbf146104735780636e9960c31461048657806370a0823114610497576102d3565b80636352211e14610434578063654b748a14610447576102d3565b80634e6a0f44116102195780634e6a0f44146103ec57806355064d85146103ff578063572b6c0514610412576102d3565b806342842e0e146103c657806342966c68146103d9576102d3565b806315ddc5351161028b57806328cfbd461161027057806328cfbd461461038d5780632b991746146103a057806338bb305a146103b3576102d3565b806315ddc5351461036757806323b872dd1461037a576102d3565b8063081812fc116102bc578063081812fc14610315578063095ea7b3146103405780630ef2674314610355576102d3565b806301ffc9a7146102d857806306fdde0314610300575b600080fd5b6102eb6102e6366004615cbd565b610663565b60405190151581526020015b60405180910390f35b610308610702565b6040516102f79190615e77565b610328610323366004615cf5565b61073a565b6040516001600160a01b0390911681526020016102f7565b61035361034e366004615bb2565b6107d9565b005b6101985b6040519081526020016102f7565b610353610375366004615987565b610a1c565b610353610388366004615a5b565b610a2a565b61035361039b366004615987565b610c86565b6103536103ae366004615a5b565b610cfb565b6103536103c1366004615afc565b61101c565b6103536103d4366004615a5b565b61126b565b6103536103e7366004615cf5565b61138a565b6103536103fa366004615bdb565b6113a7565b6102eb61040d366004615d0d565b611573565b6102eb610420366004615858565b606b546001600160a01b0390811691161490565b610328610442366004615cf5565b6116d2565b6102eb610455366004615858565b6001600160a01b031660009081526034602052604090205460ff1690565b610353610481366004615c38565b611735565b6033546001600160a01b0316610328565b6103596104a5366004615858565b6118dd565b6103536104b8366004615bb2565b611951565b6103596104cb366004615cf5565b611ab5565b6103596104de366004615cf5565b611ac0565b6103536104f1366004615858565b611acb565b60408051808201909152600481527f4c414e44000000000000000000000000000000000000000000000000000000006020820152610308565b61035361053d366004615858565b611ba6565b610353610550366004615b7c565b611c3f565b6102eb610563366004615858565b6001600160a01b031660009081526039602052604090205460ff1690565b61035361058f366004615b7c565b611d30565b6103536105a2366004615b7c565b611e24565b606c54610328906001600160a01b031681565b6103536105c8366004615a96565b611f08565b6103536105db366004615858565b61211b565b6103086105ee366004615cf5565b612230565b606b546001600160a01b0316610328565b610353610612366004615b7c565b6122c3565b610353610625366004615858565b61240b565b6102eb610638366004615872565b6124a4565b61035361064b3660046158a4565b6124fb565b61035361065e366004615a15565b612a4a565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614806106c657507f80ac58cd000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b806106fa57507f5b5e139f000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b90505b919050565b60408051808201909152600f81527f53616e64626f782773204c414e4473000000000000000000000000000000000060208201525b90565b600080600061074884612c61565b90925090506001600160a01b0382166107a85760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e00000000000000000000000000000060448201526064015b60405180910390fd5b80156107ce575050506000818152603860205260409020546001600160a01b03166106fd565b6000925050506106fd565b606c5482906001600160a01b03163b156108b357606c54604051633185c44d60e21b81523060048201526001600160a01b0383811660248301529091169063c61711349060440160206040518083038186803b15801561083857600080fd5b505afa15801561084c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108709190615ca1565b6108b35760405162461bcd60e51b815260206004820152601460248201527313dc195c985d1bdc88139bdd08105b1b1bddd95960621b604482015260640161079f565b600082815260366020526040812054906108cc84612d87565b905060006108d8612e5e565b90506001600160a01b0382166109305760405162461bcd60e51b815260206004820181905260248201527f506f6c79676f6e4c616e6456323a204e4f4e4558495354454e545f544f4b454e604482015260640161079f565b806001600160a01b0316826001600160a01b0316148061097557506001600160a01b0380831660009081526037602090815260408083209385168352929052205460ff165b8061099857506001600160a01b03811660009081526034602052604090205460ff165b610a095760405162461bcd60e51b8152602060048201526024808201527f506f6c79676f6e4c616e6456323a20554e415554484f52495a45445f4150505260448201527f4f56414c00000000000000000000000000000000000000000000000000000000606482015260840161079f565b610a14838787612e6d565b505050505050565b610a14868686868686612f23565b606c5483906001600160a01b03163b15610bd8576001600160a01b038116331415610b1457610a5a848484612f95565b50610a668484846131af565b6001600160a01b0383163b15158015610a8b5750610a8b836317a2fd9160e21b61326d565b15610b0f57610ab3610a9b612e5e565b85858560405180602001604052806000815250613334565b610b0f5760405162461bcd60e51b815260206004820152602760248201527f506f6c79676f6e4c616e6456323a204552433732315f5452414e534645525f5260448201526611529150d5115160ca1b606482015260840161079f565b610c80565b606c54604051633185c44d60e21b81523060048201523360248201526001600160a01b039091169063c61711349060440160206040518083038186803b158015610b5d57600080fd5b505afa158015610b71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b959190615ca1565b610bd85760405162461bcd60e51b815260206004820152601460248201527313dc195c985d1bdc88139bdd08105b1b1bddd95960621b604482015260640161079f565b610be3848484612f95565b50610bef8484846131af565b6001600160a01b0383163b15158015610c145750610c14836317a2fd9160e21b61326d565b15610c8057610c24610a9b612e5e565b610c805760405162461bcd60e51b815260206004820152602760248201527f506f6c79676f6e4c616e6456323a204552433732315f5452414e534645525f5260448201526611529150d5115160ca1b606482015260840161079f565b50505050565b610a14868686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020601f8a018190048102820181019092528881529250889150879081908401838280828437600092019190915250600192506133f3915050565b606c5482906001600160a01b03163b15610dd557606c54604051633185c44d60e21b81523060048201526001600160a01b0383811660248301529091169063c61711349060440160206040518083038186803b158015610d5a57600080fd5b505afa158015610d6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d929190615ca1565b610dd55760405162461bcd60e51b815260206004820152601460248201527313dc195c985d1bdc88139bdd08105b1b1bddd95960621b604482015260640161079f565b60008281526036602052604081205490610dee84612d87565b90506000610dfa612e5e565b90506001600160a01b038716610e785760405162461bcd60e51b815260206004820152602260248201527f506f6c79676f6e4c616e6456323a205a45524f5f414444524553535f53454e4460448201527f4552000000000000000000000000000000000000000000000000000000000000606482015260840161079f565b6001600160a01b038216610ece5760405162461bcd60e51b815260206004820181905260248201527f506f6c79676f6e4c616e6456323a204e4f4e4558495354454e545f544f4b454e604482015260640161079f565b866001600160a01b0316816001600160a01b03161480610f1357506001600160a01b0380881660009081526037602090815260408083209385168352929052205460ff165b80610f3657506001600160a01b03811660009081526034602052604090205460ff165b610fa75760405162461bcd60e51b8152602060048201526024808201527f506f6c79676f6e4c616e6456323a20554e415554484f52495a45445f4150505260448201527f4f56414c00000000000000000000000000000000000000000000000000000000606482015260840161079f565b866001600160a01b0316836001600160a01b0316146110085760405162461bcd60e51b815260206004820152601f60248201527f506f6c79676f6e4c616e6456323a204f574e45525f4e4f545f53454e44455200604482015260640161079f565b611013838787612e6d565b50505050505050565b6001600160a01b0387166110725760405162461bcd60e51b815260206004820152601460248201527f66726f6d206973207a65726f2061646472657373000000000000000000000000604482015260640161079f565b6001600160a01b0386166110c85760405162461bcd60e51b815260206004820152601a60248201527f63616e27742073656e6420746f207a65726f2061646472657373000000000000604482015260640161079f565b866001600160a01b03166110da612e5e565b6001600160a01b0316146111a2576001600160a01b038716600090815260376020526040812090611109612e5e565b6001600160a01b0316815260208101919091526040016000205460ff1680611156575060346000611138612e5e565b6001600160a01b0316815260208101919091526040016000205460ff165b6111a25760405162461bcd60e51b815260206004820152601e60248201527f6e6f7420617574686f72697a656420746f207472616e73666572517561640000604482015260640161079f565b6111af8787878787613855565b6111b98580615eb6565b6001600160a01b038816600090815260356020526040812080549091906111e1908490615ed5565b909155506111f190508580615eb6565b6001600160a01b03871660009081526035602052604081208054909190611219908490615e8a565b90915550611013905061122a612e5e565b888888888888888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250613b0b92505050565b606c5483906001600160a01b03163b1561136f576001600160a01b0381163314156112ab57610b0f84848460405180602001604052806000815250611f08565b606c54604051633185c44d60e21b81523060048201523360248201526001600160a01b039091169063c61711349060440160206040518083038186803b1580156112f457600080fd5b505afa158015611308573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132c9190615ca1565b61136f5760405162461bcd60e51b815260206004820152601460248201527313dc195c985d1bdc88139bdd08105b1b1bddd95960621b604482015260640161079f565b610c8084848460405180602001604052806000815250611f08565b6113a4611395612e5e565b61139e83612d87565b83613c56565b50565b3360009081526039602052604090205460ff166114065760405162461bcd60e51b815260206004820152600b60248201527f21415554484f52495a4544000000000000000000000000000000000000000000604482015260640161079f565b6001600160a01b03861661145c5760405162461bcd60e51b815260206004820152601260248201527f746f206973207a65726f20616464726573730000000000000000000000000000604482015260640161079f565b611467858585611573565b1515600114156115305761147e3387878787613855565b6114888580615eb6565b33600090815260356020526040812080549091906114a7908490615ed5565b909155506114b790508580615eb6565b6001600160a01b038716600090815260356020526040812080549091906114df908490615e8a565b9250508190555061152b33338888888888888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250613b0b92505050565b610a14565b610a148686868686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250613d4d92505050565b600083838382600114806115875750826003145b806115925750826006145b8061159d575082600c145b806115a85750826018145b6115e35760405162461bcd60e51b815260206004820152600c60248201526b496e76616c69642073697a6560a01b604482015260640161079f565b6115ed8383615f4a565b15801561160157506115ff8382615f4a565b155b61164d5760405162461bcd60e51b815260206004820152601360248201527f496e76616c696420636f6f7264696e6174657300000000000000000000000000604482015260640161079f565b61165983610198615ed5565b8211158015611673575061166f83610198615ed5565b8111155b6116af5760405162461bcd60e51b815260206004820152600d60248201526c4f7574206f6620626f756e647360981b604482015260640161079f565b60006116bc888888614030565b6001600160a01b03161415979650505050505050565b60006116dd82612d87565b90506001600160a01b0381166106fd5760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354414e545f544f4b454e000000000000000000000000000000604482015260640161079f565b83838382600114806117475750826003145b806117525750826006145b8061175d575082600c145b806117685750826018145b6117a35760405162461bcd60e51b815260206004820152600c60248201526b496e76616c69642073697a6560a01b604482015260640161079f565b6117ad8383615f4a565b1580156117c157506117bf8382615f4a565b155b61180d5760405162461bcd60e51b815260206004820152601360248201527f496e76616c696420636f6f7264696e6174657300000000000000000000000000604482015260640161079f565b61181983610198615ed5565b8211158015611833575061182f83610198615ed5565b8111155b61186f5760405162461bcd60e51b815260206004820152600d60248201526c4f7574206f6620626f756e647360981b604482015260640161079f565b61187a610563612e5e565b6118c65760405162461bcd60e51b815260206004820152600b60248201527f21415554484f52495a4544000000000000000000000000000000000000000000604482015260640161079f565b6118d388888888886140d3565b5050505050505050565b60006001600160a01b0382166119355760405162461bcd60e51b815260206004820152601260248201527f5a45524f5f414444524553535f4f574e45520000000000000000000000000000604482015260640161079f565b506001600160a01b031660009081526035602052604090205490565b6001600160a01b0382166119a75760405162461bcd60e51b815260206004820152601460248201527f4e4f545f46524f4d5f5a45524f41444452455353000000000000000000000000604482015260640161079f565b6000806119b383612c61565b9150915060006119c1612e5e565b9050846001600160a01b0316816001600160a01b03161480611a045750818015611a0457506000848152603860205260409020546001600160a01b038281169116145b80611a2757506001600160a01b03811660009081526034602052604090205460ff165b80611a5757506001600160a01b0380861660009081526037602090815260408083209385168352929052205460ff165b611aa35760405162461bcd60e51b815260206004820152601160248201527f554e415554484f52495a45445f4255524e000000000000000000000000000000604482015260640161079f565b611aae858486613c56565b5050505050565b60006106fa82614274565b60006106fa826142a3565b6033546001600160a01b031680611ae0612e5e565b6001600160a01b031614611b365760405162461bcd60e51b815260206004820152601360248201527f41444d494e5f4143434553535f44454e49454400000000000000000000000000604482015260640161079f565b816001600160a01b0316816001600160a01b03167f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f60405160405180910390a3506033805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6033546001600160a01b0316611bba612e5e565b6001600160a01b031614611c105760405162461bcd60e51b815260206004820152600a60248201527f41444d494e5f4f4e4c5900000000000000000000000000000000000000000000604482015260640161079f565b606c805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b606c5482906001600160a01b03163b15611d1957606c54604051633185c44d60e21b81523060048201526001600160a01b0383811660248301529091169063c61711349060440160206040518083038186803b158015611c9e57600080fd5b505afa158015611cb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd69190615ca1565b611d195760405162461bcd60e51b815260206004820152601460248201527313dc195c985d1bdc88139bdd08105b1b1bddd95960621b604482015260640161079f565b611d2b611d24612e5e565b84846142d2565b505050565b6033546001600160a01b0316611d44612e5e565b6001600160a01b031614611d9a5760405162461bcd60e51b815260206004820152600a60248201527f41444d494e5f4f4e4c5900000000000000000000000000000000000000000000604482015260640161079f565b6001600160a01b038216611e165760405162461bcd60e51b815260206004820152603160248201527f506f6c79676f6e4c616e6456323a20737562736372697074696f6e2063616e2760448201527f74206265207a65726f2061646472657373000000000000000000000000000000606482015260840161079f565b611e2082826143a8565b5050565b6033546001600160a01b0316611e38612e5e565b6001600160a01b031614611eb45760405162461bcd60e51b815260206004820152602c60248201527f6f6e6c792061646d696e20697320616c6c6f77656420746f206164642073757060448201527f6572206f70657261746f72730000000000000000000000000000000000000000606482015260840161079f565b6001600160a01b038216600081815260346020526040808220805460ff191685151590811790915590519092917f44f92d27abdf4cfb6a7d712c3af68f3be086d4ca747ab802c36f67d6790060d891a35050565b606c5484906001600160a01b03163b1561208d576001600160a01b038116331415611fc957611f38858585612f95565b50611f448585856131af565b6001600160a01b0384163b15611fc457611f68611f5f612e5e565b86868686613334565b611fc45760405162461bcd60e51b815260206004820152602760248201527f506f6c79676f6e4c616e6456323a204552433732315f5452414e534645525f5260448201526611529150d5115160ca1b606482015260840161079f565b611aae565b606c54604051633185c44d60e21b81523060048201523360248201526001600160a01b039091169063c61711349060440160206040518083038186803b15801561201257600080fd5b505afa158015612026573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061204a9190615ca1565b61208d5760405162461bcd60e51b815260206004820152601460248201527313dc195c985d1bdc88139bdd08105b1b1bddd95960621b604482015260640161079f565b612098858585612f95565b506120a48585856131af565b6001600160a01b0384163b15611aae576120bf611f5f612e5e565b611aae5760405162461bcd60e51b815260206004820152602760248201527f506f6c79676f6e4c616e6456323a204552433732315f5452414e534645525f5260448201526611529150d5115160ca1b606482015260840161079f565b600054610100900460ff166121365760005460ff161561213a565b303b155b6121ac5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161079f565b600054610100900460ff161580156121d7576000805460ff1961ff0019909116610100171660011790555b6121df612e5e565b6033805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b0393841617909155606b80549091169184169190911790558015611e20576000805461ff00191690555050565b6060600061223d83612d87565b6001600160a01b031614156122945760405162461bcd60e51b815260206004820152601160248201527f496420646f6573206e6f74206578697374000000000000000000000000000000604482015260640161079f565b61229d826145b0565b6040516020016122ad9190615d64565b6040516020818303038152906040529050919050565b6033546001600160a01b03166122d7612e5e565b6001600160a01b0316146123525760405162461bcd60e51b8152602060048201526024808201527f6f6e6c792061646d696e20697320616c6c6f77656420746f20616464206d696e60448201527f7465727300000000000000000000000000000000000000000000000000000000606482015260840161079f565b6001600160a01b0382166123a85760405162461bcd60e51b815260206004820152601c60248201527f506f6c79676f6e4c616e643a20496e76616c6964206164647265737300000000604482015260640161079f565b6001600160a01b038216600081815260396020908152604091829020805460ff19168515159081179091558251938452908301527fff452b3b9159b024a9098f0058c63eccd90d36b3584608202800d662f962bb60910160405180910390a15050565b6033546001600160a01b031661241f612e5e565b6001600160a01b0316146124755760405162461bcd60e51b815260206004820152600a60248201527f41444d494e5f4f4e4c5900000000000000000000000000000000000000000000604482015260640161079f565b606b805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b03808316600090815260376020908152604080832093851683529290529081205460ff16806124f257506001600160a01b03821660009081526034602052604090205460ff165b90505b92915050565b6001600160a01b038a166125515760405162461bcd60e51b815260206004820152601460248201527f66726f6d206973207a65726f2061646472657373000000000000000000000000604482015260640161079f565b6001600160a01b0389166125a75760405162461bcd60e51b815260206004820152601a60248201527f63616e27742073656e6420746f207a65726f2061646472657373000000000000604482015260640161079f565b86851480156125b557508483145b6126015760405162461bcd60e51b815260206004820152600c60248201527f696e76616c696420646174610000000000000000000000000000000000000000604482015260640161079f565b896001600160a01b0316612613612e5e565b6001600160a01b031614612700576001600160a01b038a16600090815260376020526040812090612642612e5e565b6001600160a01b0316815260208101919091526040016000205460ff168061268f575060346000612671612e5e565b6001600160a01b0316815260208101919091526040016000205460ff165b6127005760405162461bcd60e51b8152602060048201526024808201527f6e6f7420617574686f72697a656420746f207472616e736665724d756c74695160448201527f7561647300000000000000000000000000000000000000000000000000000000606482015260840161079f565b6000805b888110156127ba5760008a8a8381811061272e57634e487b7160e01b600052603260045260246000fd5b9050602002013590506127908d8d838c8c8781811061275d57634e487b7160e01b600052603260045260246000fd5b905060200201358b8b8881811061278457634e487b7160e01b600052603260045260246000fd5b90506020020135613855565b61279a8180615eb6565b6127a49084615e8a565b92505080806127b290615f2f565b915050612704565b506001600160a01b038b16600090815260356020526040812080548392906127e3908490615ed5565b90915550506001600160a01b038a1660009081526035602052604081208054839290612810908490615e8a565b90915550506001600160a01b038a163b1515801561283a575061283a8a6317a2fd9160e21b61326d565b15612a3d5760008167ffffffffffffffff81111561286857634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612891578160200160208202803683370190505b5090506000805b8a8110156129975760008c8c838181106128c257634e487b7160e01b600052603260045260246000fd5b90506020020135905060005b6128d88280615eb6565b8110156129825761293781838e8e8781811061290457634e487b7160e01b600052603260045260246000fd5b905060200201358d8d8881811061292b57634e487b7160e01b600052603260045260246000fd5b90506020020135614707565b85858151811061295757634e487b7160e01b600052603260045260246000fd5b60209081029190910101528361296c81615f2f565b945050808061297a90615f2f565b9150506128ce565b5050808061298f90615f2f565b915050612898565b506129e26129a3612e5e565b8e8e8589898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061477e92505050565b612a3a5760405162461bcd60e51b8152602060048201526024808201527f657263373231206261746368207472616e736665722072656a656374656420626044820152637920746f60e01b606482015260840161079f565b50505b5050505050505050505050565b606c5482906001600160a01b03163b15612b2457606c54604051633185c44d60e21b81523060048201526001600160a01b0383811660248301529091169063c61711349060440160206040518083038186803b158015612aa957600080fd5b505afa158015612abd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ae19190615ca1565b612b245760405162461bcd60e51b815260206004820152601460248201527313dc195c985d1bdc88139bdd08105b1b1bddd95960621b604482015260640161079f565b6001600160a01b038416612ba05760405162461bcd60e51b815260206004820152602560248201527f506f6c79676f6e4c616e6456323a20496e76616c69642073656e64657220616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161079f565b6000612baa612e5e565b9050846001600160a01b0316816001600160a01b03161480612be457506001600160a01b03811660009081526034602052604090205460ff165b612c565760405162461bcd60e51b815260206004820152602b60248201527f506f6c79676f6e4c616e6456323a20554e415554484f52495a45445f4150505260448201527f4f56455f464f525f414c4c000000000000000000000000000000000000000000606482015260840161079f565b611aae8585856142d2565b6000807fff00000000000000000000000000000000000000000000000000000000000000831615612cd45760405162461bcd60e51b815260206004820152601060248201527f496e76616c696420746f6b656e20696400000000000000000000000000000000604482015260640161079f565b6000612ce261019885615f4a565b90506000612cf261019886615ea2565b600086815260366020526040902054909150600160a01b8082161415612d295760009450600160ff1b808216149350505050612d82565b8015612d4257809450600160ff1b808216149350612d7e565b612d77600380612d528682615eb6565b612d5c9190615ea2565b6003612d688682615eb6565b612d729190615ea2565b614030565b9450600093505b5050505b915091565b600080600080612d968561483d565b91945092509050612da78383615f4a565b158015612dbb5750612db98382615f4a565b155b612e075760405162461bcd60e51b815260206004820152601060248201527f496e76616c696420746f6b656e20696400000000000000000000000000000000604482015260640161079f565b8260011415612e4a57600085815260366020526040902054600160a01b80821614612e3c57612e37848484614030565b612e3f565b60005b9450505050506106fd565b612e55838383614030565b95945050505050565b6000612e68614949565b905090565b6000612e7882612d87565b90506001600160a01b038316612e9a57612e958285836000614993565b612edc565b612ea78285836001614993565b6000828152603860205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385161790555b81836001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a450505050565b610a14868686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020601f8a018190048102820181019092528881529250889150879081908401838280828437600092018290525092506133f3915050565b6000806000612fa384612c61565b915091506000612fb1612e5e565b90506001600160a01b0383166130095760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e000000000000000000000000000000604482015260640161079f565b866001600160a01b0316836001600160a01b03161461306a5760405162461bcd60e51b815260206004820152601760248201527f434845434b5452414e534645525f4e4f545f4f574e4552000000000000000000604482015260640161079f565b6001600160a01b0386166130c05760405162461bcd60e51b815260206004820152601260248201527f4e4f545f544f5f5a45524f414444524553530000000000000000000000000000604482015260640161079f565b826001600160a01b0316816001600160a01b031614806130f857506001600160a01b03811660009081526034602052604090205460ff165b8061312857506001600160a01b0380881660009081526037602090815260408083209385168352929052205460ff165b80613154575081801561315457506000858152603860205260409020546001600160a01b038281169116145b6131a05760405162461bcd60e51b815260206004820152601560248201527f554e415554484f52495a45445f5452414e534645520000000000000000000000604482015260640161079f565b600193505050505b9392505050565b6001600160a01b03831660009081526035602052604081208054916131d383615f18565b90915550506001600160a01b03821660009081526035602052604081208054916131fc83615f2f565b919050555061322781603660006132108590565b815260200190815260200160002054846000614993565b80826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b604080516001600160e01b031983166024808301919091528251808303909101815260449091018252602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01ffc9a7000000000000000000000000000000000000000000000000000000001781528251935160008082529485948594909392908183858c612710fa955080519450505050609e5a1161332057634e487b7160e01b600052600160045260246000fd5b82801561332a5750815b9695505050505050565b600080846001600160a01b031663150b7a02888887876040518563ffffffff1660e01b81526004016133699493929190615e45565b602060405180830381600087803b15801561338357600080fd5b505af1158015613397573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133bb9190615cd9565b6001600160e01b0319167f150b7a02000000000000000000000000000000000000000000000000000000001491505095945050505050565b60006133fd612e5e565b90506000866001600160a01b0316826001600160a01b0316148061344657506001600160a01b0380881660009081526037602090815260408083209386168352929052205460ff165b8061346957506001600160a01b03821660009081526034602052604090205460ff165b90506001600160a01b0387166134c15760405162461bcd60e51b815260206004820152601460248201527f4e4f545f46524f4d5f5a45524f41444452455353000000000000000000000000604482015260640161079f565b6001600160a01b0386166135175760405162461bcd60e51b815260206004820152601260248201527f4e4f545f544f5f5a45524f414444524553530000000000000000000000000000604482015260640161079f565b845160005b818110156136ae57600087828151811061354657634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008061355c83612c61565b915091508b6001600160a01b0316826001600160a01b0316146135c15760405162461bcd60e51b815260206004820152601b60248201527f42415443485452414e5346455246524f4d5f4e4f545f4f574e45520000000000604482015260640161079f565b85806135ee57508080156135ee57506000838152603860205260409020546001600160a01b038881169116145b61363a5760405162461bcd60e51b815260206004820152600e60248201527f4e4f545f415554484f52495a4544000000000000000000000000000000000000604482015260640161079f565b600083815260366020526040812054613657918591908e90614993565b828b6001600160a01b03168d6001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a450505080806136a690615f2f565b91505061351c565b50866001600160a01b0316886001600160a01b031614613723576001600160a01b038816600090815260356020526040812080548392906136f0908490615ed5565b90915550506001600160a01b0387166000908152603560205260408120805483929061371d908490615e8a565b90915550505b6001600160a01b0387163b156118d357613744876317a2fd9160e21b61326d565b156137a757613756838989898961477e565b6137a25760405162461bcd60e51b815260206004820152601e60248201527f4552433732315f42415443485f52454345495645445f52454a45435445440000604482015260640161079f565b6118d3565b83156118d35760005b8181101561384a576137ec848a8a8a85815181106137de57634e487b7160e01b600052603260045260246000fd5b60200260200101518a613334565b6138385760405162461bcd60e51b815260206004820152601860248201527f4552433732315f52454345495645445f52454a45435445440000000000000000604482015260640161079f565b8061384281615f2f565b9150506137b0565b505050505050505050565b82828282600114806138675750826003145b806138725750826006145b8061387d575082600c145b806138885750826018145b6138c35760405162461bcd60e51b815260206004820152600c60248201526b496e76616c69642073697a6560a01b604482015260640161079f565b6138cd8383615f4a565b1580156138e157506138df8382615f4a565b155b61392d5760405162461bcd60e51b815260206004820152601360248201527f496e76616c696420636f6f7264696e6174657300000000000000000000000000604482015260640161079f565b61393983610198615ed5565b8211158015613953575061394f83610198615ed5565b8111155b61398f5760405162461bcd60e51b815260206004820152600d60248201526c4f7574206f6620626f756e647360981b604482015260640161079f565b8560011415613a8c5760006139a660008787614a26565b905060006139b382612d87565b90506001600160a01b038116613a0b5760405162461bcd60e51b815260206004820152601460248201527f746f6b656e20646f6573206e6f74206578697374000000000000000000000000604482015260640161079f565b896001600160a01b0316816001600160a01b031614613a6c5760405162461bcd60e51b815260206004820152601a60248201527f6e6f74206f776e657220696e205f7472616e7366657251756164000000000000604482015260640161079f565b5060009081526036602052604090206001600160a01b0388169055613a99565b613a998888888888614a48565b60005b613aa68780615eb6565b81101561384a57613ab981888888614707565b886001600160a01b03168a6001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a480613b0381615f2f565b915050613a9c565b6001600160a01b0385163b15158015613b305750613b30856317a2fd9160e21b61326d565b15611013576000613b418580615eb6565b67ffffffffffffffff811115613b6757634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015613b90578160200160208202803683370190505b50905060005b613ba08680615eb6565b811015613bf057613bb381878787614707565b828281518110613bd357634e487b7160e01b600052603260045260246000fd5b602090810291909101015280613be881615f2f565b915050613b96565b50613bfe888888848661477e565b6118d35760405162461bcd60e51b8152602060048201526024808201527f657263373231206261746368207472616e736665722072656a656374656420626044820152637920746f60e01b606482015260840161079f565b816001600160a01b0316836001600160a01b031614613cb75760405162461bcd60e51b815260206004820152600960248201527f4e4f545f4f574e45520000000000000000000000000000000000000000000000604482015260640161079f565b80600160a01b613ccc6001600160ff1b615ed5565b6000838152603660209081526040808320805494909416949094179092556001600160a01b03871681526035909152908120805491613d0a83615f18565b909155505060405182906000906001600160a01b038716907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a450505050565b6000613d5885614baf565b505090506000613d69828686614a26565b604080518181526108208101825291925060009190816020015b613da760405180606001604052806000815260200160008152602001600081525090565b815260200190600190039081613d835790505090506000806003891115613e0157613dfb60405180606001604052808a81526020018981526020018b81525084838560028e613df69190615ea2565b614c5b565b90925090505b60005b613e0e8a80615eb6565b811015613f9e576000613e23828c8c8c614707565b90506000613e5d866040518060600160405280613e3f866142a3565b8152602001613e4d86614274565b8152602001600181525087614e3b565b90508015613ea25760405182906001600160a01b038f169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90600090a4613f89565b600082815260366020526040902054331415613f0357613ec3600185615e8a565b60405190945082906001600160a01b038f169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90600090a4613f89565b60008281526036602052604090205415613f505760405162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e481b5a5b9d195960921b604482015260640161079f565b60405182906001600160a01b038f16906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45b50508080613f9690615f2f565b915050613e04565b50613faf8383838d8d8d8d8d614f0c565b60008481526036602052604090206001600160a01b038b169055613fd38980615eb6565b6001600160a01b038b1660009081526035602052604081208054909190613ffb908490615e8a565b9091555050336000908152603560205260408120805483929061401f908490615ed5565b909155505050505050505050505050565b600080600061403e86614baf565b509092509050600060368161407c858a614058818c615ea2565b6140629190615eb6565b8b61406d818c615ea2565b6140779190615eb6565b614a26565b815260208101919091526040016000205490506001600160a01b038116156140a85792506131a8915050565b60188710156140c6576140bc828787614030565b93505050506131a8565b5060009695505050505050565b6001600160a01b0385166141295760405162461bcd60e51b815260206004820152601260248201527f746f206973207a65726f20616464726573730000000000000000000000000000604482015260640161079f565b600061413485614baf565b505090506000614145828686614a26565b9050614154868686601861525c565b60005b6141618780615eb6565b81101561421157600061417682898989614707565b600081815260366020526040902054909150156141c65760405162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e481b5a5b9d195960921b604482015260640161079f565b60405181906001600160a01b038b16906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4508061420981615f2f565b915050614157565b5060008181526036602052604090206001600160a01b03881690556142368680615eb6565b6001600160a01b0388166000908152603560205260408120805490919061425e908490615e8a565b9091555061101390503360008989898989613b0b565b60006106fa6101987effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8416615ea2565b60006106fa6101987effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8416615f4a565b6001600160a01b03821660009081526034602052604090205460ff161561433b5760405162461bcd60e51b815260206004820152601760248201527f494e56414c49445f415050524f56414c5f4348414e4745000000000000000000604482015260640161079f565b6001600160a01b03838116600081815260376020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b606c546001600160a01b03163b15611e2057606c546040517fc3c5a5470000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b039091169063c3c5a54790602401602060405180830381600087803b15801561441857600080fd5b505af115801561442c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144509190615ca1565b611e205780156144de57606c546040517f7d3e3dbe0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03848116602483015290911690637d3e3dbe906044015b600060405180830381600087803b1580156144c157600080fd5b505af11580156144d5573d6000803e3d6000fd5b50505050611e20565b6001600160a01b0382161561453e57606c546040517fa0af29030000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0384811660248301529091169063a0af2903906044016144a7565b606c546040517f4420e4860000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0390911690634420e48690602401600060405180830381600087803b15801561459c57600080fd5b505af1158015610a14573d6000803e3d6000fd5b6060816145f1575060408051808201909152600181527f300000000000000000000000000000000000000000000000000000000000000060208201526106fd565b8160005b811561461b578061460581615f2f565b91506146149050600a83615ea2565b91506145f5565b60008167ffffffffffffffff81111561464457634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561466e576020820181803683370190505b5090505b84156146ff57614683600183615ed5565b9150614690600a86615f4a565b61469b906030615e8a565b60f81b8183815181106146be57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506146f8600a86615ea2565b9450614672565b949350505050565b6000806147148587615ea2565b9050614721600282615f4a565b6147505761474860006147348789615f4a565b61473e9087615e8a565b6140778487615e8a565b9150506146ff565b614748600061475f8789615f4a565b61476a906001615e8a565b6147748888615e8a565b61473e9190615ed5565b600080846001600160a01b0316634b808c46888887876040518563ffffffff1660e01b81526004016147b39493929190615dd0565b602060405180830381600087803b1580156147cd57600080fd5b505af11580156147e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906148059190615cd9565b6001600160e01b0319167f4b808c46000000000000000000000000000000000000000000000000000000001491505095945050505050565b600080600061484b846142a3565b915061485684614274565b90507fff000000000000000000000000000000000000000000000000000000000000008416806148895760019350614941565b600160f81b81141561489e5760039350614941565b600160f91b8114156148b35760069350614941565b600360f81b8114156148c857600c9350614941565b7f04000000000000000000000000000000000000000000000000000000000000008114156148f95760189350614941565b60405162461bcd60e51b815260206004820152601060248201527f496e76616c696420746f6b656e20696400000000000000000000000000000000604482015260640161079f565b509193909250565b606b546000906001600160a01b031633141561498c57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c610737565b5033610737565b80156149d7576000848152603660205260409020600160ff1b6001600160a01b03841673ffffffffffffffffffffffffffffffffffffffff19861617179055610c80565b6001600160a01b0382166149f06001600160ff1b615ed5565b841673ffffffffffffffffffffffffffffffffffffffff1916176036600086815260208101919091526040016000205550505050565b6000614a3461019883615eb6565b614a3e8486615e8a565b6146ff9190615e8a565b614a528383615f4a565b158015614a665750614a648382615f4a565b155b614ab25760405162461bcd60e51b815260206004820152601360248201527f496e76616c696420636f6f7264696e6174657300000000000000000000000000604482015260640161079f565b614abe83610198615ed5565b8211158015614ad85750614ad483610198615ed5565b8111155b614b145760405162461bcd60e51b815260206004820152600d60248201526c4f7574206f6620626f756e647360981b604482015260640161079f565b8260031480614b235750826006145b80614b2e575082600c145b80614b395750826018145b15614b7857614b7285856040518060600160405280868152602001858152602001878152506001600288614b6d9190615ea2565b6153c4565b50611aae565b60405162461bcd60e51b815260206004820152600c60248201526b496e76616c69642073697a6560a01b604482015260640161079f565b60008060008360011415614bca576000925060039150614c54565b8360031415614be357600160f81b925060069150614c54565b8360061415614c025750600160f91b9150600c9050600160f81b614c54565b83600c1415614c215750600360f81b915060189050600160f91b614c54565b8360181415614b7857507f04000000000000000000000000000000000000000000000000000000000000009150600360f81b5b9193909250565b6000806000614c6984614baf565b50509050600088604001518960000151614c839190615e8a565b9050600089604001518a60200151614c9b9190615e8a565b8a519091505b82811015614e035760208b01515b82811015614df1576000614cde8c60405180606001604052808681526020018581526020018c8152508c614e3b565b905080614ddf576000614cf2878585614a26565b6000818152603660205260409020549091506001600160a01b038116331415614d945760405180606001604052808681526020018581526020018c8152508e8d81518110614d5057634e487b7160e01b600052603260045260246000fd5b60200260200101819052508b80614d6690615f2f565b9c50614d7490508b80615eb6565b614d7e908e615e8a565b6000838152603660205260408120559c50614ddc565b6001600160a01b03811615614ddc5760405162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e481b5a5b9d195960921b604482015260640161079f565b50505b50614dea8882615e8a565b9050614caf565b50614dfc8782615e8a565b9050614ca1565b50614e0f600287615ea2565b955060038610614e2b57614e268a8a8a8a8a614c5b565b985096505b5094989597509495505050505050565b6000805b82811015614f01576000858281518110614e6957634e487b7160e01b600052603260045260246000fd5b6020026020010151905084604001518160400151118015614e8c57508051855110155b8015614ea8575060408101518151614ea49190615e8a565b8551105b8015614ebc57508060200151856020015110155b8015614ede575080604001518160200151614ed79190615e8a565b8560200151105b15614eee576001925050506131a8565b5080614ef981615f2f565b915050614e3f565b506000949350505050565b6001600160a01b0385163b15158015614f315750614f31856317a2fd9160e21b61326d565b156151fe5760008667ffffffffffffffff811115614f5f57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015614f88578160200160208202803683370190505b50905060008088614f998880615eb6565b614fa39190615ed5565b67ffffffffffffffff811115614fc957634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015614ff2578160200160208202803683370190505b5090506000805b6150038980615eb6565b811015615129576000615018828b8b8b614707565b90506150508e6040518060600160405280615032856142a3565b815260200161504085614274565b815260200160018152508f614e3b565b15615093578086868151811061507657634e487b7160e01b600052603260045260246000fd5b60209081029190910101528461508b81615f2f565b955050615116565b6000818152603660205260409020543314156150dc576000818152603660205260408120558551819087908790811061507657634e487b7160e01b600052603260045260246000fd5b808484815181106150fd57634e487b7160e01b600052603260045260246000fd5b60209081029190910101528261511281615f2f565b9350505b508061512181615f2f565b915050614ff9565b506151383360008b858961477e565b6151905760405162461bcd60e51b8152602060048201526024808201527f657263373231206261746368207472616e736665722072656a656374656420626044820152637920746f60e01b606482015260840161079f565b61519d33338b878961477e565b6151f55760405162461bcd60e51b8152602060048201526024808201527f657263373231206261746368207472616e736665722072656a656374656420626044820152637920746f60e01b606482015260840161079f565b505050506118d3565b60005b61520b8580615eb6565b81101561384a57600061522082878787614707565b600081815260366020526040902054909150331415615249576000818152603660205260408120555b508061525481615f2f565b915050615201565b600061526782614baf565b505090508185116152ee576036600061529a8385615285818a615ea2565b61528f9190615eb6565b8661406d818a615ea2565b8152602001908152602001600020546000146152e95760405162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e481b5a5b9d195960921b604482015260640161079f565b6153a3565b60006152fa8686615e8a565b905060006153088786615e8a565b9050855b8281101561539f57855b8281101561538d576036600061532d878585614a26565b81526020019081526020016000205460001461537c5760405162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e481b5a5b9d195960921b604482015260640161079f565b6153868682615e8a565b9050615316565b506153988582615e8a565b905061530c565b5050505b6153ae600283615ea2565b915060038210611aae57611aae8585858561525c565b60008060006153d68660400151614baf565b925050915060006153f08388600001518960200151614a26565b87519091506001905b6040890151895161540a9190615e8a565b8110156155665760208901515b89604001518a6020015161542b9190615e8a565b8110156155545760008060038a1015615463576154538e61544e60008787614a26565b615643565b801561545c5750845b9050615529565b6154928e8e60405180606001604052808881526020018781526020018e815250600060028f614b6d9190615ea2565b905060006154a1888686614a26565b6000818152603660205260409020549350905082156155275781615517578e6001600160a01b031683146155175760405162461bcd60e51b815260206004820152601760248201527f6e6f74206f776e6572206f66206368696c642051756164000000000000000000604482015260640161079f565b6000818152603660205260408120555b505b808061553457508115155b801561553d5750845b94505050878161554d9190615e8a565b9050615417565b5061555f8782615e8a565b90506153f9565b508615615636578061560f57896001600160a01b031661559389604001518a600001518b60200151614030565b6001600160a01b03161461560f5760405162461bcd60e51b815260206004820152602b60248201527f6e6f74206f776e6572206f6620616c6c20737562207175616473206e6f72207060448201527f6172656e74207175616473000000000000000000000000000000000000000000606482015260840161079f565b5060009081526036602052604090206001600160a01b03881690555060019150612e559050565b9998505050505050505050565b600081815260366020526040812054801561572757600160a01b80821614156156ae5760405162461bcd60e51b815260206004820152600960248201527f6e6f74206f776e65720000000000000000000000000000000000000000000000604482015260640161079f565b836001600160a01b0316816001600160a01b03161461570f5760405162461bcd60e51b815260206004820152600960248201527f6e6f74206f776e65720000000000000000000000000000000000000000000000604482015260640161079f565b505060008181526036602052604081205560016124f5565b5060009392505050565b80356001600160a01b03811681146106fd57600080fd5b60008083601f840112615759578081fd5b50813567ffffffffffffffff811115615770578182fd5b602083019150836020808302850101111561578a57600080fd5b9250929050565b60008083601f8401126157a2578182fd5b50813567ffffffffffffffff8111156157b9578182fd5b60208301915083602082850101111561578a57600080fd5b600082601f8301126157e1578081fd5b813567ffffffffffffffff808211156157fc576157fc615f8a565b604051601f8301601f19908116603f0116810190828211818310171561582457615824615f8a565b8160405283815286602085880101111561583c578485fd5b8360208701602083013792830160200193909352509392505050565b600060208284031215615869578081fd5b6124f282615731565b60008060408385031215615884578081fd5b61588d83615731565b915061589b60208401615731565b90509250929050565b60008060008060008060008060008060c08b8d0312156158c2578586fd5b6158cb8b615731565b99506158d960208c01615731565b985060408b013567ffffffffffffffff808211156158f5578788fd5b6159018e838f01615748565b909a50985060608d0135915080821115615919578788fd5b6159258e838f01615748565b909850965060808d013591508082111561593d578586fd5b6159498e838f01615748565b909650945060a08d0135915080821115615961578384fd5b5061596e8d828e01615791565b915080935050809150509295989b9194979a5092959850565b6000806000806000806080878903121561599f578182fd5b6159a887615731565b95506159b660208801615731565b9450604087013567ffffffffffffffff808211156159d2578384fd5b6159de8a838b01615748565b909650945060608901359150808211156159f6578384fd5b50615a0389828a01615791565b979a9699509497509295939492505050565b600080600060608486031215615a29578283fd5b615a3284615731565b9250615a4060208501615731565b91506040840135615a5081615fa0565b809150509250925092565b600080600060608486031215615a6f578283fd5b615a7884615731565b9250615a8660208501615731565b9150604084013590509250925092565b60008060008060808587031215615aab578384fd5b615ab485615731565b9350615ac260208601615731565b925060408501359150606085013567ffffffffffffffff811115615ae4578182fd5b615af0878288016157d1565b91505092959194509250565b600080600080600080600060c0888a031215615b16578283fd5b615b1f88615731565b9650615b2d60208901615731565b955060408801359450606088013593506080880135925060a088013567ffffffffffffffff811115615b5d578283fd5b615b698a828b01615791565b989b979a50959850939692959293505050565b60008060408385031215615b8e578081fd5b615b9783615731565b91506020830135615ba781615fa0565b809150509250929050565b60008060408385031215615bc4578182fd5b615bcd83615731565b946020939093013593505050565b60008060008060008060a08789031215615bf3578384fd5b615bfc87615731565b9550602087013594506040870135935060608701359250608087013567ffffffffffffffff811115615c2c578283fd5b615a0389828a01615791565b600080600080600060a08688031215615c4f578283fd5b615c5886615731565b9450602086013593506040860135925060608601359150608086013567ffffffffffffffff811115615c88578182fd5b615c94888289016157d1565b9150509295509295909350565b600060208284031215615cb2578081fd5b81516131a881615fa0565b600060208284031215615cce578081fd5b81356131a881615fae565b600060208284031215615cea578081fd5b81516131a881615fae565b600060208284031215615d06578081fd5b5035919050565b600080600060608486031215615d21578081fd5b505081359360208301359350604090920135919050565b60008151808452615d50816020860160208601615eec565b601f01601f19169290920160200192915050565b60007f68747470733a2f2f6170692e73616e64626f782e67616d652f6c616e64732f0082528251615d9c81601f850160208701615eec565b7f2f6d657461646174612e6a736f6e000000000000000000000000000000000000601f939091019283015250602d01919050565b6000608082016001600160a01b03808816845260208188168186015260806040860152829150865180845260a0860192508188019350845b81811015615e2457845184529382019392820192600101615e08565b5050508381036060850152615e398186615d38565b98975050505050505050565b60006001600160a01b0380871683528086166020840152508360408301526080606083015261332a6080830184615d38565b6000602082526124f26020830184615d38565b60008219821115615e9d57615e9d615f5e565b500190565b600082615eb157615eb1615f74565b500490565b6000816000190483118215151615615ed057615ed0615f5e565b500290565b600082821015615ee757615ee7615f5e565b500390565b60005b83811015615f07578181015183820152602001615eef565b83811115610c805750506000910152565b600081615f2757615f27615f5e565b506000190190565b6000600019821415615f4357615f43615f5e565b5060010190565b600082615f5957615f59615f74565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b80151581146113a457600080fd5b6001600160e01b0319811681146113a457600080fdfea2646970667358221220d8021fcd86ec3cec6b39ac980ae29ec7e5ccc6d044599f82c4d6949ec60a2b3664736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102d35760003560e01c806379cc679011610186578063ac9fe421116100e3578063ce1b815f11610097578063e985e9c511610071578063e985e9c51461062a578063eaa5e0671461063d578063eeb5a5d114610650576102d3565b8063ce1b815f146105f3578063cf456ae714610604578063da74222814610617576102d3565b8063b88d4fde116100c8578063b88d4fde146105ba578063c4d66de8146105cd578063c87b56dd146105e0576102d3565b8063ac9fe42114610594578063b0ccc31e146105a7576102d3565b80639d28fb861161013a578063a22cb4651161011f578063a22cb46514610542578063aa271e1a14610555578063ab01b46914610581576102d3565b80639d28fb861461052f5780639ededf7714610355576102d3565b80638e5cb5f61161016b5780638e5cb5f6146104d05780638f283970146104e357806395d89b41146104f6576102d3565b806379cc6790146104aa578063845a4697146104bd576102d3565b806342842e0e116102345780636352211e116101e85780636e1e3bbf116101cd5780636e1e3bbf146104735780636e9960c31461048657806370a0823114610497576102d3565b80636352211e14610434578063654b748a14610447576102d3565b80634e6a0f44116102195780634e6a0f44146103ec57806355064d85146103ff578063572b6c0514610412576102d3565b806342842e0e146103c657806342966c68146103d9576102d3565b806315ddc5351161028b57806328cfbd461161027057806328cfbd461461038d5780632b991746146103a057806338bb305a146103b3576102d3565b806315ddc5351461036757806323b872dd1461037a576102d3565b8063081812fc116102bc578063081812fc14610315578063095ea7b3146103405780630ef2674314610355576102d3565b806301ffc9a7146102d857806306fdde0314610300575b600080fd5b6102eb6102e6366004615cbd565b610663565b60405190151581526020015b60405180910390f35b610308610702565b6040516102f79190615e77565b610328610323366004615cf5565b61073a565b6040516001600160a01b0390911681526020016102f7565b61035361034e366004615bb2565b6107d9565b005b6101985b6040519081526020016102f7565b610353610375366004615987565b610a1c565b610353610388366004615a5b565b610a2a565b61035361039b366004615987565b610c86565b6103536103ae366004615a5b565b610cfb565b6103536103c1366004615afc565b61101c565b6103536103d4366004615a5b565b61126b565b6103536103e7366004615cf5565b61138a565b6103536103fa366004615bdb565b6113a7565b6102eb61040d366004615d0d565b611573565b6102eb610420366004615858565b606b546001600160a01b0390811691161490565b610328610442366004615cf5565b6116d2565b6102eb610455366004615858565b6001600160a01b031660009081526034602052604090205460ff1690565b610353610481366004615c38565b611735565b6033546001600160a01b0316610328565b6103596104a5366004615858565b6118dd565b6103536104b8366004615bb2565b611951565b6103596104cb366004615cf5565b611ab5565b6103596104de366004615cf5565b611ac0565b6103536104f1366004615858565b611acb565b60408051808201909152600481527f4c414e44000000000000000000000000000000000000000000000000000000006020820152610308565b61035361053d366004615858565b611ba6565b610353610550366004615b7c565b611c3f565b6102eb610563366004615858565b6001600160a01b031660009081526039602052604090205460ff1690565b61035361058f366004615b7c565b611d30565b6103536105a2366004615b7c565b611e24565b606c54610328906001600160a01b031681565b6103536105c8366004615a96565b611f08565b6103536105db366004615858565b61211b565b6103086105ee366004615cf5565b612230565b606b546001600160a01b0316610328565b610353610612366004615b7c565b6122c3565b610353610625366004615858565b61240b565b6102eb610638366004615872565b6124a4565b61035361064b3660046158a4565b6124fb565b61035361065e366004615a15565b612a4a565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614806106c657507f80ac58cd000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b806106fa57507f5b5e139f000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b90505b919050565b60408051808201909152600f81527f53616e64626f782773204c414e4473000000000000000000000000000000000060208201525b90565b600080600061074884612c61565b90925090506001600160a01b0382166107a85760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e00000000000000000000000000000060448201526064015b60405180910390fd5b80156107ce575050506000818152603860205260409020546001600160a01b03166106fd565b6000925050506106fd565b606c5482906001600160a01b03163b156108b357606c54604051633185c44d60e21b81523060048201526001600160a01b0383811660248301529091169063c61711349060440160206040518083038186803b15801561083857600080fd5b505afa15801561084c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108709190615ca1565b6108b35760405162461bcd60e51b815260206004820152601460248201527313dc195c985d1bdc88139bdd08105b1b1bddd95960621b604482015260640161079f565b600082815260366020526040812054906108cc84612d87565b905060006108d8612e5e565b90506001600160a01b0382166109305760405162461bcd60e51b815260206004820181905260248201527f506f6c79676f6e4c616e6456323a204e4f4e4558495354454e545f544f4b454e604482015260640161079f565b806001600160a01b0316826001600160a01b0316148061097557506001600160a01b0380831660009081526037602090815260408083209385168352929052205460ff165b8061099857506001600160a01b03811660009081526034602052604090205460ff165b610a095760405162461bcd60e51b8152602060048201526024808201527f506f6c79676f6e4c616e6456323a20554e415554484f52495a45445f4150505260448201527f4f56414c00000000000000000000000000000000000000000000000000000000606482015260840161079f565b610a14838787612e6d565b505050505050565b610a14868686868686612f23565b606c5483906001600160a01b03163b15610bd8576001600160a01b038116331415610b1457610a5a848484612f95565b50610a668484846131af565b6001600160a01b0383163b15158015610a8b5750610a8b836317a2fd9160e21b61326d565b15610b0f57610ab3610a9b612e5e565b85858560405180602001604052806000815250613334565b610b0f5760405162461bcd60e51b815260206004820152602760248201527f506f6c79676f6e4c616e6456323a204552433732315f5452414e534645525f5260448201526611529150d5115160ca1b606482015260840161079f565b610c80565b606c54604051633185c44d60e21b81523060048201523360248201526001600160a01b039091169063c61711349060440160206040518083038186803b158015610b5d57600080fd5b505afa158015610b71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b959190615ca1565b610bd85760405162461bcd60e51b815260206004820152601460248201527313dc195c985d1bdc88139bdd08105b1b1bddd95960621b604482015260640161079f565b610be3848484612f95565b50610bef8484846131af565b6001600160a01b0383163b15158015610c145750610c14836317a2fd9160e21b61326d565b15610c8057610c24610a9b612e5e565b610c805760405162461bcd60e51b815260206004820152602760248201527f506f6c79676f6e4c616e6456323a204552433732315f5452414e534645525f5260448201526611529150d5115160ca1b606482015260840161079f565b50505050565b610a14868686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020601f8a018190048102820181019092528881529250889150879081908401838280828437600092019190915250600192506133f3915050565b606c5482906001600160a01b03163b15610dd557606c54604051633185c44d60e21b81523060048201526001600160a01b0383811660248301529091169063c61711349060440160206040518083038186803b158015610d5a57600080fd5b505afa158015610d6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d929190615ca1565b610dd55760405162461bcd60e51b815260206004820152601460248201527313dc195c985d1bdc88139bdd08105b1b1bddd95960621b604482015260640161079f565b60008281526036602052604081205490610dee84612d87565b90506000610dfa612e5e565b90506001600160a01b038716610e785760405162461bcd60e51b815260206004820152602260248201527f506f6c79676f6e4c616e6456323a205a45524f5f414444524553535f53454e4460448201527f4552000000000000000000000000000000000000000000000000000000000000606482015260840161079f565b6001600160a01b038216610ece5760405162461bcd60e51b815260206004820181905260248201527f506f6c79676f6e4c616e6456323a204e4f4e4558495354454e545f544f4b454e604482015260640161079f565b866001600160a01b0316816001600160a01b03161480610f1357506001600160a01b0380881660009081526037602090815260408083209385168352929052205460ff165b80610f3657506001600160a01b03811660009081526034602052604090205460ff165b610fa75760405162461bcd60e51b8152602060048201526024808201527f506f6c79676f6e4c616e6456323a20554e415554484f52495a45445f4150505260448201527f4f56414c00000000000000000000000000000000000000000000000000000000606482015260840161079f565b866001600160a01b0316836001600160a01b0316146110085760405162461bcd60e51b815260206004820152601f60248201527f506f6c79676f6e4c616e6456323a204f574e45525f4e4f545f53454e44455200604482015260640161079f565b611013838787612e6d565b50505050505050565b6001600160a01b0387166110725760405162461bcd60e51b815260206004820152601460248201527f66726f6d206973207a65726f2061646472657373000000000000000000000000604482015260640161079f565b6001600160a01b0386166110c85760405162461bcd60e51b815260206004820152601a60248201527f63616e27742073656e6420746f207a65726f2061646472657373000000000000604482015260640161079f565b866001600160a01b03166110da612e5e565b6001600160a01b0316146111a2576001600160a01b038716600090815260376020526040812090611109612e5e565b6001600160a01b0316815260208101919091526040016000205460ff1680611156575060346000611138612e5e565b6001600160a01b0316815260208101919091526040016000205460ff165b6111a25760405162461bcd60e51b815260206004820152601e60248201527f6e6f7420617574686f72697a656420746f207472616e73666572517561640000604482015260640161079f565b6111af8787878787613855565b6111b98580615eb6565b6001600160a01b038816600090815260356020526040812080549091906111e1908490615ed5565b909155506111f190508580615eb6565b6001600160a01b03871660009081526035602052604081208054909190611219908490615e8a565b90915550611013905061122a612e5e565b888888888888888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250613b0b92505050565b606c5483906001600160a01b03163b1561136f576001600160a01b0381163314156112ab57610b0f84848460405180602001604052806000815250611f08565b606c54604051633185c44d60e21b81523060048201523360248201526001600160a01b039091169063c61711349060440160206040518083038186803b1580156112f457600080fd5b505afa158015611308573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132c9190615ca1565b61136f5760405162461bcd60e51b815260206004820152601460248201527313dc195c985d1bdc88139bdd08105b1b1bddd95960621b604482015260640161079f565b610c8084848460405180602001604052806000815250611f08565b6113a4611395612e5e565b61139e83612d87565b83613c56565b50565b3360009081526039602052604090205460ff166114065760405162461bcd60e51b815260206004820152600b60248201527f21415554484f52495a4544000000000000000000000000000000000000000000604482015260640161079f565b6001600160a01b03861661145c5760405162461bcd60e51b815260206004820152601260248201527f746f206973207a65726f20616464726573730000000000000000000000000000604482015260640161079f565b611467858585611573565b1515600114156115305761147e3387878787613855565b6114888580615eb6565b33600090815260356020526040812080549091906114a7908490615ed5565b909155506114b790508580615eb6565b6001600160a01b038716600090815260356020526040812080549091906114df908490615e8a565b9250508190555061152b33338888888888888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250613b0b92505050565b610a14565b610a148686868686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250613d4d92505050565b600083838382600114806115875750826003145b806115925750826006145b8061159d575082600c145b806115a85750826018145b6115e35760405162461bcd60e51b815260206004820152600c60248201526b496e76616c69642073697a6560a01b604482015260640161079f565b6115ed8383615f4a565b15801561160157506115ff8382615f4a565b155b61164d5760405162461bcd60e51b815260206004820152601360248201527f496e76616c696420636f6f7264696e6174657300000000000000000000000000604482015260640161079f565b61165983610198615ed5565b8211158015611673575061166f83610198615ed5565b8111155b6116af5760405162461bcd60e51b815260206004820152600d60248201526c4f7574206f6620626f756e647360981b604482015260640161079f565b60006116bc888888614030565b6001600160a01b03161415979650505050505050565b60006116dd82612d87565b90506001600160a01b0381166106fd5760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354414e545f544f4b454e000000000000000000000000000000604482015260640161079f565b83838382600114806117475750826003145b806117525750826006145b8061175d575082600c145b806117685750826018145b6117a35760405162461bcd60e51b815260206004820152600c60248201526b496e76616c69642073697a6560a01b604482015260640161079f565b6117ad8383615f4a565b1580156117c157506117bf8382615f4a565b155b61180d5760405162461bcd60e51b815260206004820152601360248201527f496e76616c696420636f6f7264696e6174657300000000000000000000000000604482015260640161079f565b61181983610198615ed5565b8211158015611833575061182f83610198615ed5565b8111155b61186f5760405162461bcd60e51b815260206004820152600d60248201526c4f7574206f6620626f756e647360981b604482015260640161079f565b61187a610563612e5e565b6118c65760405162461bcd60e51b815260206004820152600b60248201527f21415554484f52495a4544000000000000000000000000000000000000000000604482015260640161079f565b6118d388888888886140d3565b5050505050505050565b60006001600160a01b0382166119355760405162461bcd60e51b815260206004820152601260248201527f5a45524f5f414444524553535f4f574e45520000000000000000000000000000604482015260640161079f565b506001600160a01b031660009081526035602052604090205490565b6001600160a01b0382166119a75760405162461bcd60e51b815260206004820152601460248201527f4e4f545f46524f4d5f5a45524f41444452455353000000000000000000000000604482015260640161079f565b6000806119b383612c61565b9150915060006119c1612e5e565b9050846001600160a01b0316816001600160a01b03161480611a045750818015611a0457506000848152603860205260409020546001600160a01b038281169116145b80611a2757506001600160a01b03811660009081526034602052604090205460ff165b80611a5757506001600160a01b0380861660009081526037602090815260408083209385168352929052205460ff165b611aa35760405162461bcd60e51b815260206004820152601160248201527f554e415554484f52495a45445f4255524e000000000000000000000000000000604482015260640161079f565b611aae858486613c56565b5050505050565b60006106fa82614274565b60006106fa826142a3565b6033546001600160a01b031680611ae0612e5e565b6001600160a01b031614611b365760405162461bcd60e51b815260206004820152601360248201527f41444d494e5f4143434553535f44454e49454400000000000000000000000000604482015260640161079f565b816001600160a01b0316816001600160a01b03167f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f60405160405180910390a3506033805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6033546001600160a01b0316611bba612e5e565b6001600160a01b031614611c105760405162461bcd60e51b815260206004820152600a60248201527f41444d494e5f4f4e4c5900000000000000000000000000000000000000000000604482015260640161079f565b606c805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b606c5482906001600160a01b03163b15611d1957606c54604051633185c44d60e21b81523060048201526001600160a01b0383811660248301529091169063c61711349060440160206040518083038186803b158015611c9e57600080fd5b505afa158015611cb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd69190615ca1565b611d195760405162461bcd60e51b815260206004820152601460248201527313dc195c985d1bdc88139bdd08105b1b1bddd95960621b604482015260640161079f565b611d2b611d24612e5e565b84846142d2565b505050565b6033546001600160a01b0316611d44612e5e565b6001600160a01b031614611d9a5760405162461bcd60e51b815260206004820152600a60248201527f41444d494e5f4f4e4c5900000000000000000000000000000000000000000000604482015260640161079f565b6001600160a01b038216611e165760405162461bcd60e51b815260206004820152603160248201527f506f6c79676f6e4c616e6456323a20737562736372697074696f6e2063616e2760448201527f74206265207a65726f2061646472657373000000000000000000000000000000606482015260840161079f565b611e2082826143a8565b5050565b6033546001600160a01b0316611e38612e5e565b6001600160a01b031614611eb45760405162461bcd60e51b815260206004820152602c60248201527f6f6e6c792061646d696e20697320616c6c6f77656420746f206164642073757060448201527f6572206f70657261746f72730000000000000000000000000000000000000000606482015260840161079f565b6001600160a01b038216600081815260346020526040808220805460ff191685151590811790915590519092917f44f92d27abdf4cfb6a7d712c3af68f3be086d4ca747ab802c36f67d6790060d891a35050565b606c5484906001600160a01b03163b1561208d576001600160a01b038116331415611fc957611f38858585612f95565b50611f448585856131af565b6001600160a01b0384163b15611fc457611f68611f5f612e5e565b86868686613334565b611fc45760405162461bcd60e51b815260206004820152602760248201527f506f6c79676f6e4c616e6456323a204552433732315f5452414e534645525f5260448201526611529150d5115160ca1b606482015260840161079f565b611aae565b606c54604051633185c44d60e21b81523060048201523360248201526001600160a01b039091169063c61711349060440160206040518083038186803b15801561201257600080fd5b505afa158015612026573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061204a9190615ca1565b61208d5760405162461bcd60e51b815260206004820152601460248201527313dc195c985d1bdc88139bdd08105b1b1bddd95960621b604482015260640161079f565b612098858585612f95565b506120a48585856131af565b6001600160a01b0384163b15611aae576120bf611f5f612e5e565b611aae5760405162461bcd60e51b815260206004820152602760248201527f506f6c79676f6e4c616e6456323a204552433732315f5452414e534645525f5260448201526611529150d5115160ca1b606482015260840161079f565b600054610100900460ff166121365760005460ff161561213a565b303b155b6121ac5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161079f565b600054610100900460ff161580156121d7576000805460ff1961ff0019909116610100171660011790555b6121df612e5e565b6033805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b0393841617909155606b80549091169184169190911790558015611e20576000805461ff00191690555050565b6060600061223d83612d87565b6001600160a01b031614156122945760405162461bcd60e51b815260206004820152601160248201527f496420646f6573206e6f74206578697374000000000000000000000000000000604482015260640161079f565b61229d826145b0565b6040516020016122ad9190615d64565b6040516020818303038152906040529050919050565b6033546001600160a01b03166122d7612e5e565b6001600160a01b0316146123525760405162461bcd60e51b8152602060048201526024808201527f6f6e6c792061646d696e20697320616c6c6f77656420746f20616464206d696e60448201527f7465727300000000000000000000000000000000000000000000000000000000606482015260840161079f565b6001600160a01b0382166123a85760405162461bcd60e51b815260206004820152601c60248201527f506f6c79676f6e4c616e643a20496e76616c6964206164647265737300000000604482015260640161079f565b6001600160a01b038216600081815260396020908152604091829020805460ff19168515159081179091558251938452908301527fff452b3b9159b024a9098f0058c63eccd90d36b3584608202800d662f962bb60910160405180910390a15050565b6033546001600160a01b031661241f612e5e565b6001600160a01b0316146124755760405162461bcd60e51b815260206004820152600a60248201527f41444d494e5f4f4e4c5900000000000000000000000000000000000000000000604482015260640161079f565b606b805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b03808316600090815260376020908152604080832093851683529290529081205460ff16806124f257506001600160a01b03821660009081526034602052604090205460ff165b90505b92915050565b6001600160a01b038a166125515760405162461bcd60e51b815260206004820152601460248201527f66726f6d206973207a65726f2061646472657373000000000000000000000000604482015260640161079f565b6001600160a01b0389166125a75760405162461bcd60e51b815260206004820152601a60248201527f63616e27742073656e6420746f207a65726f2061646472657373000000000000604482015260640161079f565b86851480156125b557508483145b6126015760405162461bcd60e51b815260206004820152600c60248201527f696e76616c696420646174610000000000000000000000000000000000000000604482015260640161079f565b896001600160a01b0316612613612e5e565b6001600160a01b031614612700576001600160a01b038a16600090815260376020526040812090612642612e5e565b6001600160a01b0316815260208101919091526040016000205460ff168061268f575060346000612671612e5e565b6001600160a01b0316815260208101919091526040016000205460ff165b6127005760405162461bcd60e51b8152602060048201526024808201527f6e6f7420617574686f72697a656420746f207472616e736665724d756c74695160448201527f7561647300000000000000000000000000000000000000000000000000000000606482015260840161079f565b6000805b888110156127ba5760008a8a8381811061272e57634e487b7160e01b600052603260045260246000fd5b9050602002013590506127908d8d838c8c8781811061275d57634e487b7160e01b600052603260045260246000fd5b905060200201358b8b8881811061278457634e487b7160e01b600052603260045260246000fd5b90506020020135613855565b61279a8180615eb6565b6127a49084615e8a565b92505080806127b290615f2f565b915050612704565b506001600160a01b038b16600090815260356020526040812080548392906127e3908490615ed5565b90915550506001600160a01b038a1660009081526035602052604081208054839290612810908490615e8a565b90915550506001600160a01b038a163b1515801561283a575061283a8a6317a2fd9160e21b61326d565b15612a3d5760008167ffffffffffffffff81111561286857634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612891578160200160208202803683370190505b5090506000805b8a8110156129975760008c8c838181106128c257634e487b7160e01b600052603260045260246000fd5b90506020020135905060005b6128d88280615eb6565b8110156129825761293781838e8e8781811061290457634e487b7160e01b600052603260045260246000fd5b905060200201358d8d8881811061292b57634e487b7160e01b600052603260045260246000fd5b90506020020135614707565b85858151811061295757634e487b7160e01b600052603260045260246000fd5b60209081029190910101528361296c81615f2f565b945050808061297a90615f2f565b9150506128ce565b5050808061298f90615f2f565b915050612898565b506129e26129a3612e5e565b8e8e8589898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061477e92505050565b612a3a5760405162461bcd60e51b8152602060048201526024808201527f657263373231206261746368207472616e736665722072656a656374656420626044820152637920746f60e01b606482015260840161079f565b50505b5050505050505050505050565b606c5482906001600160a01b03163b15612b2457606c54604051633185c44d60e21b81523060048201526001600160a01b0383811660248301529091169063c61711349060440160206040518083038186803b158015612aa957600080fd5b505afa158015612abd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ae19190615ca1565b612b245760405162461bcd60e51b815260206004820152601460248201527313dc195c985d1bdc88139bdd08105b1b1bddd95960621b604482015260640161079f565b6001600160a01b038416612ba05760405162461bcd60e51b815260206004820152602560248201527f506f6c79676f6e4c616e6456323a20496e76616c69642073656e64657220616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161079f565b6000612baa612e5e565b9050846001600160a01b0316816001600160a01b03161480612be457506001600160a01b03811660009081526034602052604090205460ff165b612c565760405162461bcd60e51b815260206004820152602b60248201527f506f6c79676f6e4c616e6456323a20554e415554484f52495a45445f4150505260448201527f4f56455f464f525f414c4c000000000000000000000000000000000000000000606482015260840161079f565b611aae8585856142d2565b6000807fff00000000000000000000000000000000000000000000000000000000000000831615612cd45760405162461bcd60e51b815260206004820152601060248201527f496e76616c696420746f6b656e20696400000000000000000000000000000000604482015260640161079f565b6000612ce261019885615f4a565b90506000612cf261019886615ea2565b600086815260366020526040902054909150600160a01b8082161415612d295760009450600160ff1b808216149350505050612d82565b8015612d4257809450600160ff1b808216149350612d7e565b612d77600380612d528682615eb6565b612d5c9190615ea2565b6003612d688682615eb6565b612d729190615ea2565b614030565b9450600093505b5050505b915091565b600080600080612d968561483d565b91945092509050612da78383615f4a565b158015612dbb5750612db98382615f4a565b155b612e075760405162461bcd60e51b815260206004820152601060248201527f496e76616c696420746f6b656e20696400000000000000000000000000000000604482015260640161079f565b8260011415612e4a57600085815260366020526040902054600160a01b80821614612e3c57612e37848484614030565b612e3f565b60005b9450505050506106fd565b612e55838383614030565b95945050505050565b6000612e68614949565b905090565b6000612e7882612d87565b90506001600160a01b038316612e9a57612e958285836000614993565b612edc565b612ea78285836001614993565b6000828152603860205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385161790555b81836001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a450505050565b610a14868686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020601f8a018190048102820181019092528881529250889150879081908401838280828437600092018290525092506133f3915050565b6000806000612fa384612c61565b915091506000612fb1612e5e565b90506001600160a01b0383166130095760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e000000000000000000000000000000604482015260640161079f565b866001600160a01b0316836001600160a01b03161461306a5760405162461bcd60e51b815260206004820152601760248201527f434845434b5452414e534645525f4e4f545f4f574e4552000000000000000000604482015260640161079f565b6001600160a01b0386166130c05760405162461bcd60e51b815260206004820152601260248201527f4e4f545f544f5f5a45524f414444524553530000000000000000000000000000604482015260640161079f565b826001600160a01b0316816001600160a01b031614806130f857506001600160a01b03811660009081526034602052604090205460ff165b8061312857506001600160a01b0380881660009081526037602090815260408083209385168352929052205460ff165b80613154575081801561315457506000858152603860205260409020546001600160a01b038281169116145b6131a05760405162461bcd60e51b815260206004820152601560248201527f554e415554484f52495a45445f5452414e534645520000000000000000000000604482015260640161079f565b600193505050505b9392505050565b6001600160a01b03831660009081526035602052604081208054916131d383615f18565b90915550506001600160a01b03821660009081526035602052604081208054916131fc83615f2f565b919050555061322781603660006132108590565b815260200190815260200160002054846000614993565b80826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b604080516001600160e01b031983166024808301919091528251808303909101815260449091018252602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01ffc9a7000000000000000000000000000000000000000000000000000000001781528251935160008082529485948594909392908183858c612710fa955080519450505050609e5a1161332057634e487b7160e01b600052600160045260246000fd5b82801561332a5750815b9695505050505050565b600080846001600160a01b031663150b7a02888887876040518563ffffffff1660e01b81526004016133699493929190615e45565b602060405180830381600087803b15801561338357600080fd5b505af1158015613397573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133bb9190615cd9565b6001600160e01b0319167f150b7a02000000000000000000000000000000000000000000000000000000001491505095945050505050565b60006133fd612e5e565b90506000866001600160a01b0316826001600160a01b0316148061344657506001600160a01b0380881660009081526037602090815260408083209386168352929052205460ff165b8061346957506001600160a01b03821660009081526034602052604090205460ff165b90506001600160a01b0387166134c15760405162461bcd60e51b815260206004820152601460248201527f4e4f545f46524f4d5f5a45524f41444452455353000000000000000000000000604482015260640161079f565b6001600160a01b0386166135175760405162461bcd60e51b815260206004820152601260248201527f4e4f545f544f5f5a45524f414444524553530000000000000000000000000000604482015260640161079f565b845160005b818110156136ae57600087828151811061354657634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008061355c83612c61565b915091508b6001600160a01b0316826001600160a01b0316146135c15760405162461bcd60e51b815260206004820152601b60248201527f42415443485452414e5346455246524f4d5f4e4f545f4f574e45520000000000604482015260640161079f565b85806135ee57508080156135ee57506000838152603860205260409020546001600160a01b038881169116145b61363a5760405162461bcd60e51b815260206004820152600e60248201527f4e4f545f415554484f52495a4544000000000000000000000000000000000000604482015260640161079f565b600083815260366020526040812054613657918591908e90614993565b828b6001600160a01b03168d6001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a450505080806136a690615f2f565b91505061351c565b50866001600160a01b0316886001600160a01b031614613723576001600160a01b038816600090815260356020526040812080548392906136f0908490615ed5565b90915550506001600160a01b0387166000908152603560205260408120805483929061371d908490615e8a565b90915550505b6001600160a01b0387163b156118d357613744876317a2fd9160e21b61326d565b156137a757613756838989898961477e565b6137a25760405162461bcd60e51b815260206004820152601e60248201527f4552433732315f42415443485f52454345495645445f52454a45435445440000604482015260640161079f565b6118d3565b83156118d35760005b8181101561384a576137ec848a8a8a85815181106137de57634e487b7160e01b600052603260045260246000fd5b60200260200101518a613334565b6138385760405162461bcd60e51b815260206004820152601860248201527f4552433732315f52454345495645445f52454a45435445440000000000000000604482015260640161079f565b8061384281615f2f565b9150506137b0565b505050505050505050565b82828282600114806138675750826003145b806138725750826006145b8061387d575082600c145b806138885750826018145b6138c35760405162461bcd60e51b815260206004820152600c60248201526b496e76616c69642073697a6560a01b604482015260640161079f565b6138cd8383615f4a565b1580156138e157506138df8382615f4a565b155b61392d5760405162461bcd60e51b815260206004820152601360248201527f496e76616c696420636f6f7264696e6174657300000000000000000000000000604482015260640161079f565b61393983610198615ed5565b8211158015613953575061394f83610198615ed5565b8111155b61398f5760405162461bcd60e51b815260206004820152600d60248201526c4f7574206f6620626f756e647360981b604482015260640161079f565b8560011415613a8c5760006139a660008787614a26565b905060006139b382612d87565b90506001600160a01b038116613a0b5760405162461bcd60e51b815260206004820152601460248201527f746f6b656e20646f6573206e6f74206578697374000000000000000000000000604482015260640161079f565b896001600160a01b0316816001600160a01b031614613a6c5760405162461bcd60e51b815260206004820152601a60248201527f6e6f74206f776e657220696e205f7472616e7366657251756164000000000000604482015260640161079f565b5060009081526036602052604090206001600160a01b0388169055613a99565b613a998888888888614a48565b60005b613aa68780615eb6565b81101561384a57613ab981888888614707565b886001600160a01b03168a6001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a480613b0381615f2f565b915050613a9c565b6001600160a01b0385163b15158015613b305750613b30856317a2fd9160e21b61326d565b15611013576000613b418580615eb6565b67ffffffffffffffff811115613b6757634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015613b90578160200160208202803683370190505b50905060005b613ba08680615eb6565b811015613bf057613bb381878787614707565b828281518110613bd357634e487b7160e01b600052603260045260246000fd5b602090810291909101015280613be881615f2f565b915050613b96565b50613bfe888888848661477e565b6118d35760405162461bcd60e51b8152602060048201526024808201527f657263373231206261746368207472616e736665722072656a656374656420626044820152637920746f60e01b606482015260840161079f565b816001600160a01b0316836001600160a01b031614613cb75760405162461bcd60e51b815260206004820152600960248201527f4e4f545f4f574e45520000000000000000000000000000000000000000000000604482015260640161079f565b80600160a01b613ccc6001600160ff1b615ed5565b6000838152603660209081526040808320805494909416949094179092556001600160a01b03871681526035909152908120805491613d0a83615f18565b909155505060405182906000906001600160a01b038716907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a450505050565b6000613d5885614baf565b505090506000613d69828686614a26565b604080518181526108208101825291925060009190816020015b613da760405180606001604052806000815260200160008152602001600081525090565b815260200190600190039081613d835790505090506000806003891115613e0157613dfb60405180606001604052808a81526020018981526020018b81525084838560028e613df69190615ea2565b614c5b565b90925090505b60005b613e0e8a80615eb6565b811015613f9e576000613e23828c8c8c614707565b90506000613e5d866040518060600160405280613e3f866142a3565b8152602001613e4d86614274565b8152602001600181525087614e3b565b90508015613ea25760405182906001600160a01b038f169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90600090a4613f89565b600082815260366020526040902054331415613f0357613ec3600185615e8a565b60405190945082906001600160a01b038f169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90600090a4613f89565b60008281526036602052604090205415613f505760405162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e481b5a5b9d195960921b604482015260640161079f565b60405182906001600160a01b038f16906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45b50508080613f9690615f2f565b915050613e04565b50613faf8383838d8d8d8d8d614f0c565b60008481526036602052604090206001600160a01b038b169055613fd38980615eb6565b6001600160a01b038b1660009081526035602052604081208054909190613ffb908490615e8a565b9091555050336000908152603560205260408120805483929061401f908490615ed5565b909155505050505050505050505050565b600080600061403e86614baf565b509092509050600060368161407c858a614058818c615ea2565b6140629190615eb6565b8b61406d818c615ea2565b6140779190615eb6565b614a26565b815260208101919091526040016000205490506001600160a01b038116156140a85792506131a8915050565b60188710156140c6576140bc828787614030565b93505050506131a8565b5060009695505050505050565b6001600160a01b0385166141295760405162461bcd60e51b815260206004820152601260248201527f746f206973207a65726f20616464726573730000000000000000000000000000604482015260640161079f565b600061413485614baf565b505090506000614145828686614a26565b9050614154868686601861525c565b60005b6141618780615eb6565b81101561421157600061417682898989614707565b600081815260366020526040902054909150156141c65760405162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e481b5a5b9d195960921b604482015260640161079f565b60405181906001600160a01b038b16906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4508061420981615f2f565b915050614157565b5060008181526036602052604090206001600160a01b03881690556142368680615eb6565b6001600160a01b0388166000908152603560205260408120805490919061425e908490615e8a565b9091555061101390503360008989898989613b0b565b60006106fa6101987effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8416615ea2565b60006106fa6101987effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8416615f4a565b6001600160a01b03821660009081526034602052604090205460ff161561433b5760405162461bcd60e51b815260206004820152601760248201527f494e56414c49445f415050524f56414c5f4348414e4745000000000000000000604482015260640161079f565b6001600160a01b03838116600081815260376020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b606c546001600160a01b03163b15611e2057606c546040517fc3c5a5470000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b039091169063c3c5a54790602401602060405180830381600087803b15801561441857600080fd5b505af115801561442c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144509190615ca1565b611e205780156144de57606c546040517f7d3e3dbe0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03848116602483015290911690637d3e3dbe906044015b600060405180830381600087803b1580156144c157600080fd5b505af11580156144d5573d6000803e3d6000fd5b50505050611e20565b6001600160a01b0382161561453e57606c546040517fa0af29030000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0384811660248301529091169063a0af2903906044016144a7565b606c546040517f4420e4860000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0390911690634420e48690602401600060405180830381600087803b15801561459c57600080fd5b505af1158015610a14573d6000803e3d6000fd5b6060816145f1575060408051808201909152600181527f300000000000000000000000000000000000000000000000000000000000000060208201526106fd565b8160005b811561461b578061460581615f2f565b91506146149050600a83615ea2565b91506145f5565b60008167ffffffffffffffff81111561464457634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561466e576020820181803683370190505b5090505b84156146ff57614683600183615ed5565b9150614690600a86615f4a565b61469b906030615e8a565b60f81b8183815181106146be57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506146f8600a86615ea2565b9450614672565b949350505050565b6000806147148587615ea2565b9050614721600282615f4a565b6147505761474860006147348789615f4a565b61473e9087615e8a565b6140778487615e8a565b9150506146ff565b614748600061475f8789615f4a565b61476a906001615e8a565b6147748888615e8a565b61473e9190615ed5565b600080846001600160a01b0316634b808c46888887876040518563ffffffff1660e01b81526004016147b39493929190615dd0565b602060405180830381600087803b1580156147cd57600080fd5b505af11580156147e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906148059190615cd9565b6001600160e01b0319167f4b808c46000000000000000000000000000000000000000000000000000000001491505095945050505050565b600080600061484b846142a3565b915061485684614274565b90507fff000000000000000000000000000000000000000000000000000000000000008416806148895760019350614941565b600160f81b81141561489e5760039350614941565b600160f91b8114156148b35760069350614941565b600360f81b8114156148c857600c9350614941565b7f04000000000000000000000000000000000000000000000000000000000000008114156148f95760189350614941565b60405162461bcd60e51b815260206004820152601060248201527f496e76616c696420746f6b656e20696400000000000000000000000000000000604482015260640161079f565b509193909250565b606b546000906001600160a01b031633141561498c57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c610737565b5033610737565b80156149d7576000848152603660205260409020600160ff1b6001600160a01b03841673ffffffffffffffffffffffffffffffffffffffff19861617179055610c80565b6001600160a01b0382166149f06001600160ff1b615ed5565b841673ffffffffffffffffffffffffffffffffffffffff1916176036600086815260208101919091526040016000205550505050565b6000614a3461019883615eb6565b614a3e8486615e8a565b6146ff9190615e8a565b614a528383615f4a565b158015614a665750614a648382615f4a565b155b614ab25760405162461bcd60e51b815260206004820152601360248201527f496e76616c696420636f6f7264696e6174657300000000000000000000000000604482015260640161079f565b614abe83610198615ed5565b8211158015614ad85750614ad483610198615ed5565b8111155b614b145760405162461bcd60e51b815260206004820152600d60248201526c4f7574206f6620626f756e647360981b604482015260640161079f565b8260031480614b235750826006145b80614b2e575082600c145b80614b395750826018145b15614b7857614b7285856040518060600160405280868152602001858152602001878152506001600288614b6d9190615ea2565b6153c4565b50611aae565b60405162461bcd60e51b815260206004820152600c60248201526b496e76616c69642073697a6560a01b604482015260640161079f565b60008060008360011415614bca576000925060039150614c54565b8360031415614be357600160f81b925060069150614c54565b8360061415614c025750600160f91b9150600c9050600160f81b614c54565b83600c1415614c215750600360f81b915060189050600160f91b614c54565b8360181415614b7857507f04000000000000000000000000000000000000000000000000000000000000009150600360f81b5b9193909250565b6000806000614c6984614baf565b50509050600088604001518960000151614c839190615e8a565b9050600089604001518a60200151614c9b9190615e8a565b8a519091505b82811015614e035760208b01515b82811015614df1576000614cde8c60405180606001604052808681526020018581526020018c8152508c614e3b565b905080614ddf576000614cf2878585614a26565b6000818152603660205260409020549091506001600160a01b038116331415614d945760405180606001604052808681526020018581526020018c8152508e8d81518110614d5057634e487b7160e01b600052603260045260246000fd5b60200260200101819052508b80614d6690615f2f565b9c50614d7490508b80615eb6565b614d7e908e615e8a565b6000838152603660205260408120559c50614ddc565b6001600160a01b03811615614ddc5760405162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e481b5a5b9d195960921b604482015260640161079f565b50505b50614dea8882615e8a565b9050614caf565b50614dfc8782615e8a565b9050614ca1565b50614e0f600287615ea2565b955060038610614e2b57614e268a8a8a8a8a614c5b565b985096505b5094989597509495505050505050565b6000805b82811015614f01576000858281518110614e6957634e487b7160e01b600052603260045260246000fd5b6020026020010151905084604001518160400151118015614e8c57508051855110155b8015614ea8575060408101518151614ea49190615e8a565b8551105b8015614ebc57508060200151856020015110155b8015614ede575080604001518160200151614ed79190615e8a565b8560200151105b15614eee576001925050506131a8565b5080614ef981615f2f565b915050614e3f565b506000949350505050565b6001600160a01b0385163b15158015614f315750614f31856317a2fd9160e21b61326d565b156151fe5760008667ffffffffffffffff811115614f5f57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015614f88578160200160208202803683370190505b50905060008088614f998880615eb6565b614fa39190615ed5565b67ffffffffffffffff811115614fc957634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015614ff2578160200160208202803683370190505b5090506000805b6150038980615eb6565b811015615129576000615018828b8b8b614707565b90506150508e6040518060600160405280615032856142a3565b815260200161504085614274565b815260200160018152508f614e3b565b15615093578086868151811061507657634e487b7160e01b600052603260045260246000fd5b60209081029190910101528461508b81615f2f565b955050615116565b6000818152603660205260409020543314156150dc576000818152603660205260408120558551819087908790811061507657634e487b7160e01b600052603260045260246000fd5b808484815181106150fd57634e487b7160e01b600052603260045260246000fd5b60209081029190910101528261511281615f2f565b9350505b508061512181615f2f565b915050614ff9565b506151383360008b858961477e565b6151905760405162461bcd60e51b8152602060048201526024808201527f657263373231206261746368207472616e736665722072656a656374656420626044820152637920746f60e01b606482015260840161079f565b61519d33338b878961477e565b6151f55760405162461bcd60e51b8152602060048201526024808201527f657263373231206261746368207472616e736665722072656a656374656420626044820152637920746f60e01b606482015260840161079f565b505050506118d3565b60005b61520b8580615eb6565b81101561384a57600061522082878787614707565b600081815260366020526040902054909150331415615249576000818152603660205260408120555b508061525481615f2f565b915050615201565b600061526782614baf565b505090508185116152ee576036600061529a8385615285818a615ea2565b61528f9190615eb6565b8661406d818a615ea2565b8152602001908152602001600020546000146152e95760405162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e481b5a5b9d195960921b604482015260640161079f565b6153a3565b60006152fa8686615e8a565b905060006153088786615e8a565b9050855b8281101561539f57855b8281101561538d576036600061532d878585614a26565b81526020019081526020016000205460001461537c5760405162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e481b5a5b9d195960921b604482015260640161079f565b6153868682615e8a565b9050615316565b506153988582615e8a565b905061530c565b5050505b6153ae600283615ea2565b915060038210611aae57611aae8585858561525c565b60008060006153d68660400151614baf565b925050915060006153f08388600001518960200151614a26565b87519091506001905b6040890151895161540a9190615e8a565b8110156155665760208901515b89604001518a6020015161542b9190615e8a565b8110156155545760008060038a1015615463576154538e61544e60008787614a26565b615643565b801561545c5750845b9050615529565b6154928e8e60405180606001604052808881526020018781526020018e815250600060028f614b6d9190615ea2565b905060006154a1888686614a26565b6000818152603660205260409020549350905082156155275781615517578e6001600160a01b031683146155175760405162461bcd60e51b815260206004820152601760248201527f6e6f74206f776e6572206f66206368696c642051756164000000000000000000604482015260640161079f565b6000818152603660205260408120555b505b808061553457508115155b801561553d5750845b94505050878161554d9190615e8a565b9050615417565b5061555f8782615e8a565b90506153f9565b508615615636578061560f57896001600160a01b031661559389604001518a600001518b60200151614030565b6001600160a01b03161461560f5760405162461bcd60e51b815260206004820152602b60248201527f6e6f74206f776e6572206f6620616c6c20737562207175616473206e6f72207060448201527f6172656e74207175616473000000000000000000000000000000000000000000606482015260840161079f565b5060009081526036602052604090206001600160a01b03881690555060019150612e559050565b9998505050505050505050565b600081815260366020526040812054801561572757600160a01b80821614156156ae5760405162461bcd60e51b815260206004820152600960248201527f6e6f74206f776e65720000000000000000000000000000000000000000000000604482015260640161079f565b836001600160a01b0316816001600160a01b03161461570f5760405162461bcd60e51b815260206004820152600960248201527f6e6f74206f776e65720000000000000000000000000000000000000000000000604482015260640161079f565b505060008181526036602052604081205560016124f5565b5060009392505050565b80356001600160a01b03811681146106fd57600080fd5b60008083601f840112615759578081fd5b50813567ffffffffffffffff811115615770578182fd5b602083019150836020808302850101111561578a57600080fd5b9250929050565b60008083601f8401126157a2578182fd5b50813567ffffffffffffffff8111156157b9578182fd5b60208301915083602082850101111561578a57600080fd5b600082601f8301126157e1578081fd5b813567ffffffffffffffff808211156157fc576157fc615f8a565b604051601f8301601f19908116603f0116810190828211818310171561582457615824615f8a565b8160405283815286602085880101111561583c578485fd5b8360208701602083013792830160200193909352509392505050565b600060208284031215615869578081fd5b6124f282615731565b60008060408385031215615884578081fd5b61588d83615731565b915061589b60208401615731565b90509250929050565b60008060008060008060008060008060c08b8d0312156158c2578586fd5b6158cb8b615731565b99506158d960208c01615731565b985060408b013567ffffffffffffffff808211156158f5578788fd5b6159018e838f01615748565b909a50985060608d0135915080821115615919578788fd5b6159258e838f01615748565b909850965060808d013591508082111561593d578586fd5b6159498e838f01615748565b909650945060a08d0135915080821115615961578384fd5b5061596e8d828e01615791565b915080935050809150509295989b9194979a5092959850565b6000806000806000806080878903121561599f578182fd5b6159a887615731565b95506159b660208801615731565b9450604087013567ffffffffffffffff808211156159d2578384fd5b6159de8a838b01615748565b909650945060608901359150808211156159f6578384fd5b50615a0389828a01615791565b979a9699509497509295939492505050565b600080600060608486031215615a29578283fd5b615a3284615731565b9250615a4060208501615731565b91506040840135615a5081615fa0565b809150509250925092565b600080600060608486031215615a6f578283fd5b615a7884615731565b9250615a8660208501615731565b9150604084013590509250925092565b60008060008060808587031215615aab578384fd5b615ab485615731565b9350615ac260208601615731565b925060408501359150606085013567ffffffffffffffff811115615ae4578182fd5b615af0878288016157d1565b91505092959194509250565b600080600080600080600060c0888a031215615b16578283fd5b615b1f88615731565b9650615b2d60208901615731565b955060408801359450606088013593506080880135925060a088013567ffffffffffffffff811115615b5d578283fd5b615b698a828b01615791565b989b979a50959850939692959293505050565b60008060408385031215615b8e578081fd5b615b9783615731565b91506020830135615ba781615fa0565b809150509250929050565b60008060408385031215615bc4578182fd5b615bcd83615731565b946020939093013593505050565b60008060008060008060a08789031215615bf3578384fd5b615bfc87615731565b9550602087013594506040870135935060608701359250608087013567ffffffffffffffff811115615c2c578283fd5b615a0389828a01615791565b600080600080600060a08688031215615c4f578283fd5b615c5886615731565b9450602086013593506040860135925060608601359150608086013567ffffffffffffffff811115615c88578182fd5b615c94888289016157d1565b9150509295509295909350565b600060208284031215615cb2578081fd5b81516131a881615fa0565b600060208284031215615cce578081fd5b81356131a881615fae565b600060208284031215615cea578081fd5b81516131a881615fae565b600060208284031215615d06578081fd5b5035919050565b600080600060608486031215615d21578081fd5b505081359360208301359350604090920135919050565b60008151808452615d50816020860160208601615eec565b601f01601f19169290920160200192915050565b60007f68747470733a2f2f6170692e73616e64626f782e67616d652f6c616e64732f0082528251615d9c81601f850160208701615eec565b7f2f6d657461646174612e6a736f6e000000000000000000000000000000000000601f939091019283015250602d01919050565b6000608082016001600160a01b03808816845260208188168186015260806040860152829150865180845260a0860192508188019350845b81811015615e2457845184529382019392820192600101615e08565b5050508381036060850152615e398186615d38565b98975050505050505050565b60006001600160a01b0380871683528086166020840152508360408301526080606083015261332a6080830184615d38565b6000602082526124f26020830184615d38565b60008219821115615e9d57615e9d615f5e565b500190565b600082615eb157615eb1615f74565b500490565b6000816000190483118215151615615ed057615ed0615f5e565b500290565b600082821015615ee757615ee7615f5e565b500390565b60005b83811015615f07578181015183820152602001615eef565b83811115610c805750506000910152565b600081615f2757615f27615f5e565b506000190190565b6000600019821415615f4357615f43615f5e565b5060010190565b600082615f5957615f59615f74565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b80151581146113a457600080fd5b6001600160e01b0319811681146113a457600080fdfea2646970667358221220d8021fcd86ec3cec6b39ac980ae29ec7e5ccc6d044599f82c4d6949ec60a2b3664736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "params": {
          "id": "The id of the token",
          "operator": "The address receiving the approval"
        }
      },
      "approveFor(address,address,uint256)": {
        "params": {
          "id": "The id of the token",
          "operator": "The address receiving the approval",
          "sender": "The address giving the approval"
        }
      },
      "balanceOf(address)": {
        "params": {
          "owner": "The address to look for."
        },
        "returns": {
          "_0": "The number of tokens owned by the address."
        }
      },
      "batchTransferQuad(address,address,uint256[],uint256[],uint256[],bytes)": {
        "params": {
          "data": "additional data",
          "from": "current owner of the quad",
          "sizes": "list of sizes for each quad",
          "to": "destination",
          "xs": "list of top left x coordinates for each quad",
          "ys": "list of top left y coordinates for each quad"
        }
      },
      "burn(uint256)": {
        "params": {
          "id": "The token which will be burnt."
        }
      },
      "burnFrom(address,uint256)": {
        "params": {
          "from": "address whose token is to be burnt.",
          "id": "The token which will be burnt."
        }
      },
      "changeAdmin(address)": {
        "details": "Change the administrator to be `newAdmin`.",
        "params": {
          "newAdmin": "The address of the new administrator."
        }
      },
      "exists(uint256,uint256,uint256)": {
        "params": {
          "size": "size of the",
          "x": "x coordinate of the quad",
          "y": "y coordinate of the quad"
        },
        "returns": {
          "_0": "bool for if Land has been minted or not"
        }
      },
      "getAdmin()": {
        "details": "Get the current administrator of this contract.",
        "returns": {
          "_0": "The current administrator of this contract."
        }
      },
      "getApproved(uint256)": {
        "params": {
          "id": "The id of the token."
        },
        "returns": {
          "_0": "The address of the operator."
        }
      },
      "getX(uint256)": {
        "params": {
          "id": "tokenId"
        },
        "returns": {
          "_0": "the x coordinates"
        }
      },
      "getY(uint256)": {
        "params": {
          "id": "tokenId"
        },
        "returns": {
          "_0": "the y coordinates"
        }
      },
      "height()": {
        "returns": {
          "_0": "height"
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "operator": "The address of the operator.",
          "owner": "The address of the owner."
        },
        "returns": {
          "isOperator": "The status of the approval."
        }
      },
      "isMinter(address)": {
        "params": {
          "who": "The address to query."
        },
        "returns": {
          "_0": "whether the address has minter rights."
        }
      },
      "isSuperOperator(address)": {
        "params": {
          "who": "The address to query."
        },
        "returns": {
          "_0": "whether the address has superOperator rights."
        }
      },
      "mintAndTransferQuad(address,uint256,uint256,uint256,bytes)": {
        "params": {
          "data": "extra data to pass to the transfer",
          "size": "The size of the new quad",
          "to": "The recipient of the new quad",
          "x": "The top left x coordinate of the new quad",
          "y": "The top left y coordinate of the new quad"
        }
      },
      "mintQuad(address,uint256,uint256,uint256,bytes)": {
        "params": {
          "data": "extra data to pass to the transfer",
          "size": "The size of the new quad",
          "user": "The recipient of the new quad",
          "x": "The top left x coordinate of the new quad",
          "y": "The top left y coordinate of the new quad"
        }
      },
      "name()": {
        "returns": {
          "_0": "The name of the token contract"
        }
      },
      "ownerOf(uint256)": {
        "params": {
          "id": "The id of the token."
        },
        "returns": {
          "owner": "The address of the token owner."
        }
      },
      "register(address,bool)": {
        "details": "can only be called by admin.",
        "params": {
          "subscribe": "bool to signify subscription \"true\"\" or to copy the list \"false\".",
          "subscriptionOrRegistrantToCopy": "registration address of the list to subscribe."
        }
      },
      "safeBatchTransferFrom(address,address,uint256[],bytes)": {
        "params": {
          "data": "Additional data.",
          "from": "The sender of the token.",
          "ids": "The ids of the tokens.",
          "to": "The recipient of the token."
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "params": {
          "from": "The send of the token",
          "id": "The id of the token",
          "to": "The recipient of the token"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "params": {
          "data": "Additional data",
          "from": "The sender of the token",
          "id": "The id of the token",
          "to": "The recipient of the token"
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "approved": "The determination of the approval",
          "operator": "The address receiving the approval"
        }
      },
      "setApprovalForAllFor(address,address,bool)": {
        "params": {
          "approved": "The determination of the approval",
          "operator": "The address receiving the approval",
          "sender": "The address giving the approval"
        }
      },
      "setMinter(address,bool)": {
        "params": {
          "enabled": "set whether the minter is enabled or disabled.",
          "minter": "address that will be given/removed minter right."
        }
      },
      "setOperatorRegistry(address)": {
        "params": {
          "registry": "the address of the registry"
        }
      },
      "setSuperOperator(address,bool)": {
        "params": {
          "enabled": "set whether the superOperator is enabled or disabled.",
          "superOperator": "address that will be given/removed superOperator right."
        }
      },
      "setTrustedForwarder(address)": {
        "details": "Change the address of the trusted forwarder for meta-TX",
        "params": {
          "trustedForwarder": "The new trustedForwarder"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "id": "The id of the interface"
        },
        "returns": {
          "_0": "True if the interface is supported"
        }
      },
      "symbol()": {
        "returns": {
          "_0": "The symbol of the token contract"
        }
      },
      "tokenURI(uint256)": {
        "params": {
          "id": "The id of the token"
        },
        "returns": {
          "_0": "The URI of the token"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "from": "The sender of the token",
          "id": "The id of the token",
          "to": "The recipient of the token"
        }
      },
      "transferQuad(address,address,uint256,uint256,uint256,bytes)": {
        "params": {
          "data": "additional data",
          "from": "current owner of the quad",
          "size": "size of the quad",
          "to": "destination",
          "x": "The top left x coordinate of the quad",
          "y": "The top left y coordinate of the quad"
        }
      },
      "width()": {
        "returns": {
          "_0": "width"
        }
      }
    },
    "title": "LAND token on L2",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approve(address,uint256)": {
        "notice": "Approve an operator to spend tokens on the sender behalf"
      },
      "approveFor(address,address,uint256)": {
        "notice": "Approve an operator to spend tokens on the sender behalf"
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens owned by an address."
      },
      "batchTransferQuad(address,address,uint256[],uint256[],uint256[],bytes)": {
        "notice": "transfer multiple quad (aligned to a quad tree with size 3, 6, 12 or 24 only)"
      },
      "burn(uint256)": {
        "notice": "Burns token `id`."
      },
      "burnFrom(address,uint256)": {
        "notice": "Burn token`id` from `from`."
      },
      "exists(uint256,uint256,uint256)": {
        "notice": "checks if Land has been minted or not"
      },
      "getApproved(uint256)": {
        "notice": "Get the approved operator for a specific token."
      },
      "getX(uint256)": {
        "notice": "x coordinate of Land token"
      },
      "getY(uint256)": {
        "notice": "y coordinate of Land token"
      },
      "height()": {
        "notice": "total height of the map"
      },
      "isApprovedForAll(address,address)": {
        "notice": "Check if the sender approved the operator."
      },
      "isMinter(address)": {
        "notice": "check whether address `who` is given minter rights."
      },
      "isSuperOperator(address)": {
        "notice": "check whether address `who` is given superOperator rights."
      },
      "mintAndTransferQuad(address,uint256,uint256,uint256,bytes)": {
        "notice": "Checks if a parent quad has child quads already minted.  Then mints the rest child quads and transfers the parent quad.  Should only be called by the tunnel."
      },
      "mintQuad(address,uint256,uint256,uint256,bytes)": {
        "notice": "Mint a new quad (aligned to a quad tree with size 1, 3, 6, 12 or 24 only)"
      },
      "name()": {
        "notice": "Return the name of the token contract"
      },
      "ownerOf(uint256)": {
        "notice": "Get the owner of a token."
      },
      "register(address,bool)": {
        "notice": "This function is used to register Land contract on the Operator filterer Registry of Opensea."
      },
      "safeBatchTransferFrom(address,address,uint256[],bytes)": {
        "notice": "Transfer many tokens between 2 addresses, while ensuring the receiving contract has a receiver method."
      },
      "safeTransferFrom(address,address,uint256)": {
        "notice": "Transfer a token between 2 addresses letting the receiver knows of the transfer"
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "Transfer a token between 2 addresses letting the receiver knows of the transfer"
      },
      "setApprovalForAll(address,bool)": {
        "notice": "Set the approval for an operator to manage all the tokens of the sender"
      },
      "setApprovalForAllFor(address,address,bool)": {
        "notice": "Set the approval for an operator to manage all the tokens of the sender"
      },
      "setMinter(address,bool)": {
        "notice": "Enable or disable the ability of `minter` to transfer tokens of all (minter rights)."
      },
      "setOperatorRegistry(address)": {
        "notice": "sets filter registry address deployed in test"
      },
      "setSuperOperator(address,bool)": {
        "notice": "Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights)."
      },
      "supportsInterface(bytes4)": {
        "notice": "Check if the contract supports an interface 0x01ffc9a7 is ERC-165 0x80ac58cd is ERC-721 0x5b5e139f is ERC-721 metadata"
      },
      "symbol()": {
        "notice": "Return the symbol of the token contract"
      },
      "tokenURI(uint256)": {
        "notice": "Return the URI of a specific token"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer a token between 2 addresses"
      },
      "transferQuad(address,address,uint256,uint256,uint256,bytes)": {
        "notice": "transfer one quad (aligned to a quad tree with size 3, 6, 12 or 24 only)"
      },
      "width()": {
        "notice": "total width of the map"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1254,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV2.sol:PolygonLandV2",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1257,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV2.sol:PolygonLandV2",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2744,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV2.sol:PolygonLandV2",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 9301,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV2.sol:PolygonLandV2",
        "label": "_admin",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 9427,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV2.sol:PolygonLandV2",
        "label": "_superOperators",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7936,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV2.sol:PolygonLandV2",
        "label": "_numNFTPerAddress",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7940,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV2.sol:PolygonLandV2",
        "label": "_owners",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7946,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV2.sol:PolygonLandV2",
        "label": "_operatorsForAll",
        "offset": 0,
        "slot": "55",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7950,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV2.sol:PolygonLandV2",
        "label": "_operators",
        "offset": 0,
        "slot": "56",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 13049,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV2.sol:PolygonLandV2",
        "label": "_minters",
        "offset": 0,
        "slot": "57",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 15771,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV2.sol:PolygonLandV2",
        "label": "__gap",
        "offset": 0,
        "slot": "58",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7810,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV2.sol:PolygonLandV2",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "107",
        "type": "t_address"
      },
      {
        "astId": 3045,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandV2.sol:PolygonLandV2",
        "label": "operatorFilterRegistry",
        "offset": 0,
        "slot": "108",
        "type": "t_contract(IOperatorFilterRegistry)3391"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IOperatorFilterRegistry)3391": {
        "encoding": "inplace",
        "label": "contract IOperatorFilterRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}