{
  "address": "0xfCE84d07909489508C5B293a850AF15Fb7147bc6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "ids",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct ClaimERC1155ERC721ERC20.ERC1155Claim[]",
          "name": "erc1155",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "ids",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct ClaimERC1155ERC721ERC20.ERC721Claim[]",
          "name": "erc721",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "address[]",
              "name": "contractAddresses",
              "type": "address[]"
            }
          ],
          "indexed": false,
          "internalType": "struct ClaimERC1155ERC721ERC20.ERC20Claim",
          "name": "erc20",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "ClaimedMultipleTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiryTime",
          "type": "uint256"
        }
      ],
      "name": "NewGiveaway",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "name": "NewTrustedForwarder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "expiryTime",
          "type": "uint256"
        }
      ],
      "name": "addNewGiveaway",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint256[]",
                  "name": "ids",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "values",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address",
                  "name": "contractAddress",
                  "type": "address"
                }
              ],
              "internalType": "struct ClaimERC1155ERC721ERC20.ERC1155Claim[]",
              "name": "erc1155",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256[]",
                  "name": "ids",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address",
                  "name": "contractAddress",
                  "type": "address"
                }
              ],
              "internalType": "struct ClaimERC1155ERC721ERC20.ERC721Claim[]",
              "name": "erc721",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address[]",
                  "name": "contractAddresses",
                  "type": "address[]"
                }
              ],
              "internalType": "struct ClaimERC1155ERC721ERC20.ERC20Claim",
              "name": "erc20",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "salt",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ClaimERC1155ERC721ERC20.Claim",
          "name": "claim",
          "type": "tuple"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "claimMultipleTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "rootHashes",
          "type": "bytes32[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint256[]",
                  "name": "ids",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "values",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address",
                  "name": "contractAddress",
                  "type": "address"
                }
              ],
              "internalType": "struct ClaimERC1155ERC721ERC20.ERC1155Claim[]",
              "name": "erc1155",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256[]",
                  "name": "ids",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address",
                  "name": "contractAddress",
                  "type": "address"
                }
              ],
              "internalType": "struct ClaimERC1155ERC721ERC20.ERC721Claim[]",
              "name": "erc721",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address[]",
                  "name": "contractAddresses",
                  "type": "address[]"
                }
              ],
              "internalType": "struct ClaimERC1155ERC721ERC20.ERC20Claim",
              "name": "erc20",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "salt",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ClaimERC1155ERC721ERC20.Claim[]",
          "name": "claims",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes32[][]",
          "name": "proofs",
          "type": "bytes32[][]"
        }
      ],
      "name": "claimMultipleTokensFromMultipleMerkleTree",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "claimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint256[]",
                  "name": "ids",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "values",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address",
                  "name": "contractAddress",
                  "type": "address"
                }
              ],
              "internalType": "struct ClaimERC1155ERC721ERC20.ERC1155Claim[]",
              "name": "erc1155",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256[]",
                  "name": "ids",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address",
                  "name": "contractAddress",
                  "type": "address"
                }
              ],
              "internalType": "struct ClaimERC1155ERC721ERC20.ERC721Claim[]",
              "name": "erc721",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address[]",
                  "name": "contractAddresses",
                  "type": "address[]"
                }
              ],
              "internalType": "struct ClaimERC1155ERC721ERC20.ERC20Claim",
              "name": "erc20",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "salt",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ClaimERC1155ERC721ERC20.Claim[]",
          "name": "claims",
          "type": "tuple[]"
        }
      ],
      "name": "getClaimedStatus",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1d34189b33fdc504dfad74703e97c7308ea6784aef62dc6d03e4766c98a4bcd8",
  "receipt": {
    "to": null,
    "from": "0x5F890c9522dCE5670d741D4277BFCC2d9cA8Af02",
    "contractAddress": "0xfCE84d07909489508C5B293a850AF15Fb7147bc6",
    "transactionIndex": 42,
    "gasUsed": "2402022",
    "logsBloom": "0x
    "blockHash": "0x2bdee9935aae9665033aca084302d63bca73fa2bf1d69c5d0f3f6f8855ea547c",
    "transactionHash": "0x1d34189b33fdc504dfad74703e97c7308ea6784aef62dc6d03e4766c98a4bcd8",
    "logs": [
      {
        "transactionIndex": 42,
        "blockNumber": 26461989,
        "transactionHash": "0x1d34189b33fdc504dfad74703e97c7308ea6784aef62dc6d03e4766c98a4bcd8",
        "address": "0xfCE84d07909489508C5B293a850AF15Fb7147bc6",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000049c4d4c94829b9c44052c5f5cb164fc612181165",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02"
        ],
        "data": "0x",
        "logIndex": 94,
        "blockHash": "0x2bdee9935aae9665033aca084302d63bca73fa2bf1d69c5d0f3f6f8855ea547c"
      },
      {
        "transactionIndex": 42,
        "blockNumber": 26461989,
        "transactionHash": "0x1d34189b33fdc504dfad74703e97c7308ea6784aef62dc6d03e4766c98a4bcd8",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000cccf07e143a00000000000000000000000000000000000000000000000000010a2ac3649d07a2000000000000000000000000000000000000000000000da16ce728aa2391742600000000000000000000000000000000000000000000000000fd5dd2e688cda2000000000000000000000000000000000000000000000da16cf3f59aa1a5ae26",
        "logIndex": 95,
        "blockHash": "0x2bdee9935aae9665033aca084302d63bca73fa2bf1d69c5d0f3f6f8855ea547c"
      }
    ],
    "blockNumber": 26461989,
    "cumulativeGasUsed": "5288871",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x49c4D4C94829B9c44052C5f5Cb164Fc612181165",
    "0x9399BB24DBB5C4b782C70c2969F58716Ebbd6a3b"
  ],
  "numDeployments": 2,
  "solcInputHash": "f964eb754487f11a60343998e73f85b8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct ClaimERC1155ERC721ERC20.ERC1155Claim[]\",\"name\":\"erc1155\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct ClaimERC1155ERC721ERC20.ERC721Claim[]\",\"name\":\"erc721\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"contractAddresses\",\"type\":\"address[]\"}],\"indexed\":false,\"internalType\":\"struct ClaimERC1155ERC721ERC20.ERC20Claim\",\"name\":\"erc20\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"ClaimedMultipleTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"}],\"name\":\"NewGiveaway\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"name\":\"NewTrustedForwarder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"}],\"name\":\"addNewGiveaway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct ClaimERC1155ERC721ERC20.ERC1155Claim[]\",\"name\":\"erc1155\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct ClaimERC1155ERC721ERC20.ERC721Claim[]\",\"name\":\"erc721\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"contractAddresses\",\"type\":\"address[]\"}],\"internalType\":\"struct ClaimERC1155ERC721ERC20.ERC20Claim\",\"name\":\"erc20\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"internalType\":\"struct ClaimERC1155ERC721ERC20.Claim\",\"name\":\"claim\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"claimMultipleTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"rootHashes\",\"type\":\"bytes32[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct ClaimERC1155ERC721ERC20.ERC1155Claim[]\",\"name\":\"erc1155\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct ClaimERC1155ERC721ERC20.ERC721Claim[]\",\"name\":\"erc721\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"contractAddresses\",\"type\":\"address[]\"}],\"internalType\":\"struct ClaimERC1155ERC721ERC20.ERC20Claim\",\"name\":\"erc20\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"internalType\":\"struct ClaimERC1155ERC721ERC20.Claim[]\",\"name\":\"claims\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"proofs\",\"type\":\"bytes32[][]\"}],\"name\":\"claimMultipleTokensFromMultipleMerkleTree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct ClaimERC1155ERC721ERC20.ERC1155Claim[]\",\"name\":\"erc1155\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct ClaimERC1155ERC721ERC20.ERC721Claim[]\",\"name\":\"erc721\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"contractAddresses\",\"type\":\"address[]\"}],\"internalType\":\"struct ClaimERC1155ERC721ERC20.ERC20Claim\",\"name\":\"erc20\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"internalType\":\"struct ClaimERC1155ERC721ERC20.Claim[]\",\"name\":\"claims\",\"type\":\"tuple[]\"}],\"name\":\"getClaimedStatus\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The contract implements ERC2771 to ensure that users do not pay gas\",\"kind\":\"dev\",\"methods\":{\"addNewGiveaway(bytes32,uint256)\":{\"params\":{\"expiryTime\":\"The expiry time for the giveaway.\",\"merkleRoot\":\"The merkle root hash of the claim data.\"}},\"claimMultipleTokens(bytes32,(address,(uint256[],uint256[],address)[],(uint256[],address)[],(uint256[],address[]),bytes32),bytes32[])\":{\"details\":\"Public function used to perform validity checks and progress to claim multiple token types in one claim.\",\"params\":{\"claim\":\"The claim struct containing the destination address, all items to be claimed and optional salt param.\",\"merkleRoot\":\"The merkle root hash for the specific set of items being claimed.\",\"proof\":\"The proof provided by the user performing the claim function.\"}},\"claimMultipleTokensFromMultipleMerkleTree(bytes32[],(address,(uint256[],uint256[],address)[],(uint256[],address)[],(uint256[],address[]),bytes32)[],bytes32[][])\":{\"params\":{\"claims\":\"The array of claim structs, each containing a destination address, the giveaway items to be claimed and an optional salt param.\",\"proofs\":\"The proofs submitted for verification.\"}},\"getClaimedStatus(address,(address,(uint256[],uint256[],address)[],(uint256[],address)[],(uint256[],address[]),bytes32)[])\":{\"params\":{\"claims\":\"The claim struct containing the destination address, all items to be claimed and optional salt param.\",\"user\":\"The user (intended token destination) address.\"},\"returns\":{\"_0\":\"claimedGiveaways The array of bools confirming whether or not the giveaways relating to the root hashes provided have been claimed.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setTrustedForwarder(address)\":{\"params\":{\"trustedForwarder\":\"address of the contract that is enabled to send meta-tx on behalf of the user\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"title\":\"A Multi Claim contract that enables claims of user rewards in the form of ERC1155, ERC721 and / or ERC20 tokens\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addNewGiveaway(bytes32,uint256)\":{\"notice\":\"Function to add a new giveaway.\"},\"claimMultipleTokensFromMultipleMerkleTree(bytes32[],(address,(uint256[],uint256[],address)[],(uint256[],address)[],(uint256[],address[]),bytes32)[],bytes32[][])\":{\"notice\":\"Function to permit the claiming of multiple tokens from multiple giveaways to a reserved address.\"},\"getClaimedStatus(address,(address,(uint256[],uint256[],address)[],(uint256[],address)[],(uint256[],address[]),bytes32)[])\":{\"notice\":\"Function to check which giveaways have been claimed by a particular user.\"},\"setTrustedForwarder(address)\":{\"notice\":\"set the trusted forwarder\"}},\"notice\":\"This contract manages claims for multiple token types\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/solc_0.8/claims/MultiGiveaway/MultiGiveaway.sol\":\"MultiGiveaway\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-0.8/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb9a137b317dc4806805f2259686186c0c053c32d80fe9c15ecdbf2eb1cf52849\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n        return computedHash;\\n    }\\n}\\n\",\"keccak256\":\"0x9c35727c74a6ffd8d02237b414e7bfb532c0323b1088709def98ea5c628157de\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/solc_0.8/claims/MultiGiveaway/ClaimERC1155ERC721ERC20.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport {IERC1155} from \\\"@openzeppelin/contracts-0.8/token/ERC1155/IERC1155.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts-0.8/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts-0.8/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {MerkleProof} from \\\"@openzeppelin/contracts-0.8/utils/cryptography/MerkleProof.sol\\\";\\nimport {IERC721Extended} from \\\"../../common/interfaces/IERC721Extended.sol\\\";\\n\\ncontract ClaimERC1155ERC721ERC20 {\\n    using SafeERC20 for IERC20;\\n\\n    struct Claim {\\n        address to;\\n        ERC1155Claim[] erc1155;\\n        ERC721Claim[] erc721;\\n        ERC20Claim erc20;\\n        bytes32 salt;\\n    }\\n\\n    struct ERC1155Claim {\\n        uint256[] ids;\\n        uint256[] values;\\n        address contractAddress;\\n    }\\n\\n    struct ERC721Claim {\\n        uint256[] ids;\\n        address contractAddress;\\n    }\\n\\n    struct ERC20Claim {\\n        uint256[] amounts;\\n        address[] contractAddresses;\\n    }\\n\\n    /// @dev Emits when a successful claim occurs.\\n    /// @param to The destination address for the claimed ERC1155, ERC721 and ERC20 tokens.\\n    /// @param erc1155 The array of ERC1155Claim structs containing the ids, values and ERC1155 contract address.\\n    /// @param erc721 The array of ERC721Claim structs containing the ids and ERC721 contract address.\\n    /// @param erc20 The ERC20Claim struct containing the amounts and ERC20 contract addresses.\\n    /// @param merkleRoot The merkle root hash for the specific set of items being claimed.\\n    event ClaimedMultipleTokens(\\n        address to,\\n        ERC1155Claim[] erc1155,\\n        ERC721Claim[] erc721,\\n        ERC20Claim erc20,\\n        bytes32 merkleRoot\\n    );\\n\\n    /// @dev Internal function used to claim multiple token types in one claim.\\n    /// @param merkleRoot The merkle root hash for the specific set of items being claimed.\\n    /// @param claim The claim struct containing the destination address, all items to be claimed and optional salt param.\\n    /// @param proof The proof provided by the user performing the claim function.\\n    function _claimERC1155ERC721ERC20(\\n        bytes32 merkleRoot,\\n        Claim memory claim,\\n        bytes32[] calldata proof\\n    ) internal {\\n        _checkValidity(merkleRoot, claim, proof);\\n        for (uint256 i = 0; i < claim.erc1155.length; i++) {\\n            require(claim.erc1155[i].ids.length == claim.erc1155[i].values.length, \\\"CLAIM_INVALID_INPUT\\\");\\n            _transferERC1155(claim.to, claim.erc1155[i].ids, claim.erc1155[i].values, claim.erc1155[i].contractAddress);\\n        }\\n        for (uint256 i = 0; i < claim.erc721.length; i++) {\\n            _transferERC721(claim.to, claim.erc721[i].ids, claim.erc721[i].contractAddress);\\n        }\\n        if (claim.erc20.amounts.length != 0) {\\n            require(claim.erc20.amounts.length == claim.erc20.contractAddresses.length, \\\"CLAIM_INVALID_INPUT\\\");\\n            _transferERC20(claim.to, claim.erc20.amounts, claim.erc20.contractAddresses);\\n        }\\n        emit ClaimedMultipleTokens(claim.to, claim.erc1155, claim.erc721, claim.erc20, merkleRoot);\\n    }\\n\\n    /// @dev Private function used to check the validity of a specific claim.\\n    /// @param merkleRoot The merkle root hash for the specific set of items being claimed.\\n    /// @param claim The claim struct containing the destination address, all items to be claimed and optional salt param.\\n    /// @param proof The proof provided by the user performing the claim function.\\n    function _checkValidity(\\n        bytes32 merkleRoot,\\n        Claim memory claim,\\n        bytes32[] memory proof\\n    ) private pure {\\n        bytes32 leaf = _generateClaimHash(claim);\\n        require(MerkleProof.verify(proof, merkleRoot, leaf), \\\"CLAIM_INVALID\\\");\\n    }\\n\\n    /// @dev Internal function used to generate a hash from an encoded claim.\\n    /// @param claim The claim struct.\\n    function _generateClaimHash(Claim memory claim) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(claim));\\n    }\\n\\n    /// @dev Private function used to transfer the ERC1155 tokens specified in a specific claim.\\n    /// @param to The destination address for the claimed tokens.\\n    /// @param ids The array of ERC1155 ids.\\n    /// @param values The amount of ERC1155 tokens of each id to be transferred.\\n    /// @param contractAddress The ERC1155 token contract address.\\n    function _transferERC1155(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        address contractAddress\\n    ) private {\\n        require(contractAddress != address(0), \\\"CLAIM_INVALID_CONTRACT_ZERO_ADDRESS\\\");\\n        IERC1155(contractAddress).safeBatchTransferFrom(address(this), to, ids, values, \\\"\\\");\\n    }\\n\\n    /// @dev Private function used to transfer the ERC721tokens specified in a specific claim.\\n    /// @param to The destination address for the claimed tokens.\\n    /// @param ids The array of ERC721 ids.\\n    /// @param contractAddress The ERC721 token contract address.\\n    function _transferERC721(\\n        address to,\\n        uint256[] memory ids,\\n        address contractAddress\\n    ) private {\\n        require(contractAddress != address(0), \\\"CLAIM_INVALID_CONTRACT_ZERO_ADDRESS\\\");\\n        IERC721Extended(contractAddress).safeBatchTransferFrom(address(this), to, ids, \\\"\\\");\\n    }\\n\\n    /// @dev Private function used to transfer the ERC20 tokens specified in a specific claim.\\n    /// @param to The destination address for the claimed tokens.\\n    /// @param amounts The array of amounts of ERC20 tokens to be transferred.\\n    /// @param contractAddresses The array of ERC20 token contract addresses.\\n    function _transferERC20(\\n        address to,\\n        uint256[] memory amounts,\\n        address[] memory contractAddresses\\n    ) private {\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            address erc20ContractAddress = contractAddresses[i];\\n            uint256 erc20Amount = amounts[i];\\n            require(erc20ContractAddress != address(0), \\\"CLAIM_INVALID_CONTRACT_ZERO_ADDRESS\\\");\\n            IERC20(erc20ContractAddress).safeTransferFrom(address(this), to, erc20Amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x45ed9f89846992168f507bccc43d477bfab363ab02c17849c8a1ffe6b8ee55b2\",\"license\":\"MIT\"},\"src/solc_0.8/claims/MultiGiveaway/MultiGiveaway.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport {Context} from \\\"@openzeppelin/contracts-0.8/utils/Context.sol\\\";\\nimport {ClaimERC1155ERC721ERC20} from \\\"./ClaimERC1155ERC721ERC20.sol\\\";\\nimport {AccessControl} from \\\"@openzeppelin/contracts-0.8/access/AccessControl.sol\\\";\\nimport {Pausable} from \\\"@openzeppelin/contracts-0.8/security/Pausable.sol\\\";\\nimport {ERC2771Handler} from \\\"../../common/BaseWithStorage/ERC2771Handler.sol\\\";\\n\\n/// @title A Multi Claim contract that enables claims of user rewards in the form of ERC1155, ERC721 and / or ERC20 tokens\\n/// @notice This contract manages claims for multiple token types\\n/// @dev The contract implements ERC2771 to ensure that users do not pay gas\\ncontract MultiGiveaway is AccessControl, ClaimERC1155ERC721ERC20, ERC2771Handler, Pausable {\\n    bytes4 private constant ERC1155_RECEIVED = 0xf23a6e61;\\n    bytes4 private constant ERC1155_BATCH_RECEIVED = 0xbc197c81;\\n    bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\\n    bytes4 internal constant ERC721_BATCH_RECEIVED = 0x4b808c46;\\n\\n    mapping(address => mapping(bytes32 => bool)) public claimed;\\n    mapping(bytes32 => uint256) internal _expiryTime;\\n\\n    event NewGiveaway(bytes32 merkleRoot, uint256 expiryTime);\\n    event NewTrustedForwarder(address trustedForwarder);\\n\\n    constructor(address admin, address trustedForwarder) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, admin);\\n        __ERC2771Handler_initialize(trustedForwarder);\\n    }\\n\\n    /// @notice Function to add a new giveaway.\\n    /// @param merkleRoot The merkle root hash of the claim data.\\n    /// @param expiryTime The expiry time for the giveaway.\\n    function addNewGiveaway(bytes32 merkleRoot, uint256 expiryTime)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n        whenNotPaused()\\n    {\\n        _expiryTime[merkleRoot] = expiryTime;\\n        emit NewGiveaway(merkleRoot, expiryTime);\\n    }\\n\\n    /// @notice set the trusted forwarder\\n    /// @param trustedForwarder address of the contract that is enabled to send meta-tx on behalf of the user\\n    function setTrustedForwarder(address trustedForwarder) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _trustedForwarder = trustedForwarder;\\n\\n        emit NewTrustedForwarder(trustedForwarder);\\n    }\\n\\n    /// @notice Function to permit the claiming of multiple tokens from multiple giveaways to a reserved address.\\n    /// @param claims The array of claim structs, each containing a destination address, the giveaway items to be claimed and an optional salt param.\\n    /// @param proofs The proofs submitted for verification.\\n    function claimMultipleTokensFromMultipleMerkleTree(\\n        bytes32[] calldata rootHashes,\\n        Claim[] memory claims,\\n        bytes32[][] calldata proofs\\n    ) external {\\n        require(claims.length == rootHashes.length, \\\"MULTIGIVEAWAY_INVALID_INPUT\\\");\\n        require(claims.length == proofs.length, \\\"MULTIGIVEAWAY_INVALID_INPUT\\\");\\n        for (uint256 i = 0; i < rootHashes.length; i++) {\\n            claimMultipleTokens(rootHashes[i], claims[i], proofs[i]);\\n        }\\n    }\\n\\n    /// @notice Function to check which giveaways have been claimed by a particular user.\\n    /// @param user The user (intended token destination) address.\\n    /// @param claims The claim struct containing the destination address, all items to be claimed and optional salt param.\\n    /// @return claimedGiveaways The array of bools confirming whether or not the giveaways relating to the root hashes provided have been claimed.\\n    function getClaimedStatus(address user, Claim[] memory claims) external view returns (bool[] memory) {\\n        bool[] memory claimedGiveaways = new bool[](claims.length);\\n        for (uint256 i = 0; i < claims.length; i++) {\\n            bytes32 merkleLeaf = _generateClaimHash(claims[i]);\\n            claimedGiveaways[i] = claimed[user][merkleLeaf];\\n        }\\n        return claimedGiveaways;\\n    }\\n\\n    /// @dev Public function used to perform validity checks and progress to claim multiple token types in one claim.\\n    /// @param merkleRoot The merkle root hash for the specific set of items being claimed.\\n    /// @param claim The claim struct containing the destination address, all items to be claimed and optional salt param.\\n    /// @param proof The proof provided by the user performing the claim function.\\n    function claimMultipleTokens(\\n        bytes32 merkleRoot,\\n        Claim memory claim,\\n        bytes32[] calldata proof\\n    ) public whenNotPaused() {\\n        uint256 giveawayExpiryTime = _expiryTime[merkleRoot];\\n        require(claim.to != address(0), \\\"MULTIGIVEAWAY_INVALID_TO_ZERO_ADDRESS\\\");\\n        require(claim.to != address(this), \\\"MULTIGIVEAWAY_DESTINATION_MULTIGIVEAWAY_CONTRACT\\\");\\n        require(giveawayExpiryTime != 0, \\\"MULTIGIVEAWAY_DOES_NOT_EXIST\\\");\\n        require(block.timestamp < giveawayExpiryTime, \\\"MULTIGIVEAWAY_CLAIM_PERIOD_IS_OVER\\\");\\n        bytes32 merkleLeaf = _generateClaimHash(claim);\\n        require(claimed[claim.to][merkleLeaf] == false, \\\"MULTIGIVEAWAY_DESTINATION_ALREADY_CLAIMED\\\");\\n        claimed[claim.to][merkleLeaf] = true;\\n\\n        _claimERC1155ERC721ERC20(merkleRoot, claim, proof);\\n    }\\n\\n    function onERC721Received(\\n        address, /*operator*/\\n        address, /*from*/\\n        uint256, /*id*/\\n        bytes calldata /*data*/\\n    ) external pure returns (bytes4) {\\n        return ERC721_RECEIVED;\\n    }\\n\\n    function onERC721BatchReceived(\\n        address, /*operator*/\\n        address, /*from*/\\n        uint256[] calldata, /*ids*/\\n        bytes calldata /*data*/\\n    ) external pure returns (bytes4) {\\n        return ERC721_BATCH_RECEIVED;\\n    }\\n\\n    function onERC1155Received(\\n        address, /*operator*/\\n        address, /*from*/\\n        uint256, /*id*/\\n        uint256, /*value*/\\n        bytes calldata /*data*/\\n    ) external pure returns (bytes4) {\\n        return ERC1155_RECEIVED;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address, /*operator*/\\n        address, /*from*/\\n        uint256[] calldata, /*ids*/\\n        uint256[] calldata, /*values*/\\n        bytes calldata /*data*/\\n    ) external pure returns (bytes4) {\\n        return ERC1155_BATCH_RECEIVED;\\n    }\\n\\n    function _msgSender() internal view override(Context, ERC2771Handler) returns (address sender) {\\n        return ERC2771Handler._msgSender();\\n    }\\n\\n    function _msgData() internal view override(Context, ERC2771Handler) returns (bytes calldata) {\\n        return ERC2771Handler._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0x5b398a379d910f2e6b75ed78f7265d53b431370a40c4aad8343c15f598d3edef\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/ERC2771Handler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/// @dev minimal ERC2771 handler to keep bytecode-size down.\\n/// based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/metatx/ERC2771Context.sol\\n\\ncontract ERC2771Handler {\\n    address internal _trustedForwarder;\\n\\n    function __ERC2771Handler_initialize(address forwarder) internal {\\n        _trustedForwarder = forwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function getTrustedForwarder() external view returns (address trustedForwarder) {\\n        return _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b78a86fc419fc78e618cb6c7892c2c66c4d4a9cac7848d33d91d68aab755caa\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC721Extended.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-0.8/token/ERC721/IERC721.sol\\\";\\n\\ninterface IERC721Extended is IERC721 {\\n    function approveFor(\\n        address sender,\\n        address operator,\\n        uint256 id\\n    ) external;\\n\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external;\\n\\n    function setApprovalForAllFor(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) external;\\n\\n    function burn(uint256 id) external;\\n\\n    function burnFrom(address from, uint256 id) external;\\n}\\n\",\"keccak256\":\"0x7859e5f756379e10b50869355595471e6a9379b95dced4f68d00355f6b15a9c5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002b8638038062002b8683398101604081905262000034916200019a565b6001805460ff60a01b191690556200004e60008362000071565b600180546001600160a01b0319166001600160a01b0383161790555050620001d1565b6200007d828262000081565b5050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166200007d576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620000df62000123565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006200013a6200014060201b62000c7d1760201c565b90505b90565b60006200014d336200016b565b1562000163575060131936013560601c6200013d565b50336200013d565b6001546001600160a01b038281169116145b919050565b80516001600160a01b03811681146200017d57600080fd5b60008060408385031215620001ad578182fd5b620001b88362000182565b9150620001c86020840162000182565b90509250929050565b6129a580620001e16000396000f3fe608060405234801561001057600080fd5b506004361061016c5760003560e01c8063672ee42e116100cd578063c850933211610081578063d547741f11610066578063d547741f146103da578063da742228146103ed578063f23a6e61146104005761016c565b8063c8509332146103ac578063ce1b815f146103bf5761016c565b806391d14854116100b257806391d1485414610332578063a217fddf14610369578063bc197c81146103715761016c565b8063672ee42e146102ff5780636aea75f11461031f5761016c565b80632f2ff15d116101245780634b808c46116101095780634b808c461461029c578063572b6c05146102d55780635c975abb146102f75761016c565b80632f2ff15d1461027657806336568abe146102895761016c565b8063150b7a0211610155578063150b7a02146101c7578063248a9ca31461023057806325839ca7146102615761016c565b806301ffc9a7146101715780630f2d940b14610199575b600080fd5b61018461017f36600461239d565b610439565b60405190151581526020015b60405180910390f35b6101846101a7366004612203565b600260209081526000928352604080842090915290825290205460ff1681565b6101ff6101d53660046120e6565b7f150b7a020000000000000000000000000000000000000000000000000000000095945050505050565b6040517fffffffff000000000000000000000000000000000000000000000000000000009091168152602001610190565b61025361023e3660046122cc565b60009081526020819052604090206001015490565b604051908152602001610190565b61027461026f36600461230f565b6104d4565b005b6102746102843660046122e4565b6107e8565b6102746102973660046122e4565b61081a565b6101ff6102aa366004612058565b7f4b808c46000000000000000000000000000000000000000000000000000000009695505050505050565b6101846102e3366004611f87565b6001546001600160a01b0390811691161490565b6101846108b6565b61031261030d3660046121b7565b6108d8565b60405161019091906126f9565b61027461032d36600461237c565b6109e6565b6101846103403660046122e4565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b610253600081565b6101ff61037f366004611fa1565b7fbc197c810000000000000000000000000000000000000000000000000000000098975050505050505050565b6102746103ba36600461222c565b610a99565b6001546040516001600160a01b039091168152602001610190565b6102746103e83660046122e4565b610bda565b6102746103fb366004611f87565b610c02565b6101ff61040e366004612153565b7ff23a6e61000000000000000000000000000000000000000000000000000000009695505050505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b0000000000000000000000000000000000000000000000000000000014806104cc57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b90505b919050565b6104dc6108b6565b1561052e5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064015b60405180910390fd5b60008481526003602052604090205483516001600160a01b03166105ba5760405162461bcd60e51b815260206004820152602560248201527f4d554c544947495645415741595f494e56414c49445f544f5f5a45524f5f414460448201527f44524553530000000000000000000000000000000000000000000000000000006064820152608401610525565b83516001600160a01b031630141561063a5760405162461bcd60e51b815260206004820152603060248201527f4d554c544947495645415741595f44455354494e4154494f4e5f4d554c54494760448201527f495645415741595f434f4e5452414354000000000000000000000000000000006064820152608401610525565b806106875760405162461bcd60e51b815260206004820152601c60248201527f4d554c544947495645415741595f444f45535f4e4f545f4558495354000000006044820152606401610525565b8042106106fc5760405162461bcd60e51b815260206004820152602260248201527f4d554c544947495645415741595f434c41494d5f504552494f445f49535f4f5660448201527f45520000000000000000000000000000000000000000000000000000000000006064820152608401610525565b600061070785610cc7565b85516001600160a01b0316600090815260026020908152604080832084845290915290205490915060ff16156107a55760405162461bcd60e51b815260206004820152602960248201527f4d554c544947495645415741595f44455354494e4154494f4e5f414c5245414460448201527f595f434c41494d454400000000000000000000000000000000000000000000006064820152608401610525565b84516001600160a01b031660009081526002602090815260408083208484529091529020805460ff191660011790556107e086868686610cf7565b505050505050565b60008281526020819052604090206001015461080b8161080661100a565b611019565b6108158383611097565b505050565b61082261100a565b6001600160a01b0316816001600160a01b0316146108a85760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610525565b6108b28282611136565b5050565b60015474010000000000000000000000000000000000000000900460ff165b90565b60606000825167ffffffffffffffff81111561090457634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561092d578160200160208202803683370190505b50905060005b83518110156109de57600061096e85838151811061096157634e487b7160e01b600052603260045260246000fd5b6020026020010151610cc7565b6001600160a01b0387166000908152600260209081526040808320848452909152902054845191925060ff16908490849081106109bb57634e487b7160e01b600052603260045260246000fd5b9115156020928302919091019091015250806109d681612928565b915050610933565b509392505050565b60006109f48161080661100a565b6109fc6108b6565b15610a495760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610525565b60008381526003602090815260409182902084905581518581529081018490527fcf995c8d29c258a6c2056e0d5ddfa67f3634d25f5eed5dcf65ead06195b1a271910160405180910390a1505050565b82518414610ae95760405162461bcd60e51b815260206004820152601b60248201527f4d554c544947495645415741595f494e56414c49445f494e50555400000000006044820152606401610525565b82518114610b395760405162461bcd60e51b815260206004820152601b60248201527f4d554c544947495645415741595f494e56414c49445f494e50555400000000006044820152606401610525565b60005b848110156107e057610bc8868683818110610b6757634e487b7160e01b600052603260045260246000fd5b90506020020135858381518110610b8e57634e487b7160e01b600052603260045260246000fd5b6020026020010151858585818110610bb657634e487b7160e01b600052603260045260246000fd5b905060200281019061026f91906127f4565b80610bd281612928565b915050610b3c565b600082815260208190526040902060010154610bf88161080661100a565b6108158383611136565b6000610c108161080661100a565b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0384169081179091556040519081527fffd948da7ce0ac541cf3790b301b0df6af19e474ed095744d1460a7ea6b7d1539060200160405180910390a15050565b6001546000906001600160a01b0316331415610cc057507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c6108d5565b50336108d5565b600081604051602001610cda9190612772565b604051602081830303815290604052805190602001209050919050565b610d3584848484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506111d392505050565b60005b836020015151811015610ea35783602001518181518110610d6957634e487b7160e01b600052603260045260246000fd5b6020026020010151602001515184602001518281518110610d9a57634e487b7160e01b600052603260045260246000fd5b6020026020010151600001515114610df45760405162461bcd60e51b815260206004820152601360248201527f434c41494d5f494e56414c49445f494e505554000000000000000000000000006044820152606401610525565b610e91846000015185602001518381518110610e2057634e487b7160e01b600052603260045260246000fd5b60200260200101516000015186602001518481518110610e5057634e487b7160e01b600052603260045260246000fd5b60200260200101516020015187602001518581518110610e8057634e487b7160e01b600052603260045260246000fd5b60200260200101516040015161123d565b80610e9b81612928565b915050610d38565b5060005b836040015151811015610f3357610f21846000015185604001518381518110610ee057634e487b7160e01b600052603260045260246000fd5b60200260200101516000015186604001518481518110610f1057634e487b7160e01b600052603260045260246000fd5b602002602001015160200151611322565b80610f2b81612928565b915050610ea7565b506060830151515115610fb557606083015160208101515190515114610f9b5760405162461bcd60e51b815260206004820152601360248201527f434c41494d5f494e56414c49445f494e505554000000000000000000000000006044820152606401610525565b825160608401518051602090910151610fb5929190611404565b7fccb3b0181cc8d8090505df7a2b9d7e4c07de5f4e24c836176be4834d6f15feb4836000015184602001518560400151866060015188604051610ffc95949392919061269e565b60405180910390a150505050565b6000611014610c7d565b905090565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166108b257611055816001600160a01b03166014611501565b611060836020611501565b604051602001611071929190612581565b60408051601f198184030181529082905262461bcd60e51b82526105259160040161273f565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166108b2576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556110f261100a565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16156108b2576000828152602081815260408083206001600160a01b03851684529091529020805460ff1916905561118f61100a565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60006111de83610cc7565b90506111eb828583611777565b6112375760405162461bcd60e51b815260206004820152600d60248201527f434c41494d5f494e56414c4944000000000000000000000000000000000000006044820152606401610525565b50505050565b6001600160a01b03811661129f5760405162461bcd60e51b815260206004820152602360248201527f434c41494d5f494e56414c49445f434f4e54524143545f5a45524f5f4144445260448201526245535360e81b6064820152608401610525565b6040517f2eb2c2d60000000000000000000000000000000000000000000000000000000081526001600160a01b03821690632eb2c2d6906112ea903090889088908890600401612602565b600060405180830381600087803b15801561130457600080fd5b505af1158015611318573d6000803e3d6000fd5b5050505050505050565b6001600160a01b0381166113845760405162461bcd60e51b815260206004820152602360248201527f434c41494d5f494e56414c49445f434f4e54524143545f5a45524f5f4144445260448201526245535360e81b6064820152608401610525565b6040517f28cfbd460000000000000000000000000000000000000000000000000000000081526001600160a01b038216906328cfbd46906113cd9030908790879060040161265a565b600060405180830381600087803b1580156113e757600080fd5b505af11580156113fb573d6000803e3d6000fd5b50505050505050565b60005b825181101561123757600082828151811061143257634e487b7160e01b600052603260045260246000fd5b60200260200101519050600084838151811061145e57634e487b7160e01b600052603260045260246000fd5b6020026020010151905060006001600160a01b0316826001600160a01b031614156114d75760405162461bcd60e51b815260206004820152602360248201527f434c41494d5f494e56414c49445f434f4e54524143545f5a45524f5f4144445260448201526245535360e81b6064820152608401610525565b6114ec6001600160a01b03831630888461178d565b505080806114f990612928565b915050611407565b606060006115108360026128c6565b61151b9060026128ae565b67ffffffffffffffff81111561154157634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561156b576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106115b057634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061162157634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600061165d8460026128c6565b6116689060016128ae565b90505b6001811115611721577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106116b757634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106116db57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361171a81612911565b905061166b565b5083156117705760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610525565b9392505050565b6000826117848584611815565b14949350505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790526112379085906118c7565b600081815b84518110156109de57600085828151811061184557634e487b7160e01b600052603260045260246000fd5b602002602001015190508083116118875760408051602081018590529081018290526060016040516020818303038152906040528051906020012092506118b4565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b50806118bf81612928565b91505061181a565b600061191c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166119ac9092919063ffffffff16565b805190915015610815578080602001905181019061193a91906122ac565b6108155760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610525565b60606119bb84846000856119c3565b949350505050565b606082471015611a3b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610525565b843b611a895760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610525565b600080866001600160a01b03168587604051611aa59190612565565b60006040518083038185875af1925050503d8060008114611ae2576040519150601f19603f3d011682016040523d82523d6000602084013e611ae7565b606091505b5091509150611af7828286611b02565b979650505050505050565b60608315611b11575081611770565b825115611b215782518084602001fd5b8160405162461bcd60e51b8152600401610525919061273f565b80356001600160a01b03811681146104cf57600080fd5b60008083601f840112611b63578182fd5b50813567ffffffffffffffff811115611b7a578182fd5b6020830191508360208083028501011115611b9457600080fd5b9250929050565b600082601f830112611bab578081fd5b81356020611bc0611bbb8361288a565b612859565b82815281810190858301855b85811015611bf557611be3898684358b0101611e06565b84529284019290840190600101611bcc565b5090979650505050505050565b600082601f830112611c12578081fd5b81356020611c22611bbb8361288a565b82815281810190858301855b85811015611bf55781358801606080601f19838d03011215611c4e578889fd5b611c5781612859565b8783013567ffffffffffffffff80821115611c70578b8cfd5b611c7e8e8b84880101611d6c565b8352604091508185013581811115611c94578c8dfd5b611ca28f8c83890101611d6c565b8b8501525050611cb3838501611b3b565b90820152865250509284019290840190600101611c2e565b600082601f830112611cdb578081fd5b81356020611ceb611bbb8361288a565b82815281810190858301855b85811015611bf55781358801604080601f19838d03011215611d17578889fd5b611d2081612859565b8783013567ffffffffffffffff811115611d38578a8bfd5b611d468d8a83870101611d6c565b825250611d54828401611b3b565b81890152865250509284019290840190600101611cf7565b600082601f830112611d7c578081fd5b81356020611d8c611bbb8361288a565b8281528181019085830183850287018401881015611da8578586fd5b855b85811015611bf557813584529284019290840190600101611daa565b60008083601f840112611dd7578182fd5b50813567ffffffffffffffff811115611dee578182fd5b602083019150836020828501011115611b9457600080fd5b600060a08284031215611e17578081fd5b611e2160a0612859565b9050611e2c82611b3b565b8152602082013567ffffffffffffffff80821115611e4957600080fd5b611e5585838601611c02565b60208401526040840135915080821115611e6e57600080fd5b611e7a85838601611ccb565b60408401526060840135915080821115611e9357600080fd5b50611ea084828501611eb6565b6060830152506080820135608082015292915050565b600060408284031215611ec7578081fd5b611ed16040612859565b9050813567ffffffffffffffff80821115611eeb57600080fd5b611ef785838601611d6c565b8352602091508184013581811115611f0e57600080fd5b84019050601f81018513611f2157600080fd5b8035611f2f611bbb8261288a565b8181528381019083850185840285018601891015611f4c57600080fd5b600094505b83851015611f7657611f6281611b3b565b835260019490940193918501918501611f51565b508085870152505050505092915050565b600060208284031215611f98578081fd5b61177082611b3b565b60008060008060008060008060a0898b031215611fbc578384fd5b611fc589611b3b565b9750611fd360208a01611b3b565b9650604089013567ffffffffffffffff80821115611fef578586fd5b611ffb8c838d01611b52565b909850965060608b0135915080821115612013578586fd5b61201f8c838d01611b52565b909650945060808b0135915080821115612037578384fd5b506120448b828c01611dc6565b999c989b5096995094979396929594505050565b60008060008060008060808789031215612070578384fd5b61207987611b3b565b955061208760208801611b3b565b9450604087013567ffffffffffffffff808211156120a3578586fd5b6120af8a838b01611b52565b909650945060608901359150808211156120c7578384fd5b506120d489828a01611dc6565b979a9699509497509295939492505050565b6000806000806000608086880312156120fd578283fd5b61210686611b3b565b945061211460208701611b3b565b935060408601359250606086013567ffffffffffffffff811115612136578182fd5b61214288828901611dc6565b969995985093965092949392505050565b60008060008060008060a0878903121561216b578384fd5b61217487611b3b565b955061218260208801611b3b565b94506040870135935060608701359250608087013567ffffffffffffffff8111156121ab578283fd5b6120d489828a01611dc6565b600080604083850312156121c9578182fd5b6121d283611b3b565b9150602083013567ffffffffffffffff8111156121ed578182fd5b6121f985828601611b9b565b9150509250929050565b60008060408385031215612215578182fd5b61221e83611b3b565b946020939093013593505050565b600080600080600060608688031215612243578283fd5b853567ffffffffffffffff8082111561225a578485fd5b61226689838a01611b52565b9097509550602088013591508082111561227e578485fd5b61228a89838a01611b9b565b9450604088013591508082111561229f578283fd5b5061214288828901611b52565b6000602082840312156122bd578081fd5b81518015158114611770578182fd5b6000602082840312156122dd578081fd5b5035919050565b600080604083850312156122f6578182fd5b8235915061230660208401611b3b565b90509250929050565b60008060008060608587031215612324578182fd5b84359350602085013567ffffffffffffffff80821115612342578384fd5b61234e88838901611e06565b94506040870135915080821115612363578384fd5b5061237087828801611b52565b95989497509550505050565b6000806040838503121561238e578182fd5b50508035926020909101359150565b6000602082840312156123ae578081fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114611770578182fd5b60008282518085526020808601955080818302840101818601855b84811015611bf557601f1986840301895281516060815181865261241e828701826124c2565b915050858201518582038787015261243682826124c2565b6040938401516001600160a01b0316969093019590955250988401989250908301906001016123f8565b6000815180845260208085019450848183028601828601855b85811015611bf557838303895281516040815181865261249b828701826124c2565b928801516001600160a01b0316958801959095525098850198925090840190600101612479565b6000815180845260208085019450808401835b838110156124f1578151875295820195908201906001016124d5565b509495945050505050565b600081516040845261251160408501826124c2565b602084810151868303878301528051808452908201935090918491908301905b8083101561255a5784516001600160a01b03168252938301936001929092019190830190612531565b509695505050505050565b600082516125778184602087016128e5565b9190910192915050565b60007f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000825283516125b98160178501602088016128e5565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516125f68160288401602088016128e5565b01602801949350505050565b60006001600160a01b03808716835280861660208401525060a0604083015261262e60a08301856124c2565b828103606084015261264081856124c2565b838103608090940193909352508152602001949350505050565b60006001600160a01b0380861683528085166020840152506080604083015261268660808301846124c2565b82810360609093019290925281526020019392505050565b60006001600160a01b038716825260a060208301526126c060a08301876123dd565b82810360408401526126d28187612460565b905082810360608401526126e681866124fc565b9150508260808301529695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015612733578351151583529284019291840191600101612715565b50909695505050505050565b600060208252825180602084015261275e8160408501602087016128e5565b601f01601f19169190910160400192915050565b6000602082526001600160a01b038351166020830152602083015160a060408401526127a160c08401826123dd565b90506040840151601f19808584030160608601526127bf8383612460565b92506060860151915080858403016080860152506127dd82826124fc565b915050608084015160a08401528091505092915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112612828578283fd5b83018035915067ffffffffffffffff821115612842578283fd5b6020908101925081023603821315611b9457600080fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561288257612882612959565b604052919050565b600067ffffffffffffffff8211156128a4576128a4612959565b5060209081020190565b600082198211156128c1576128c1612943565b500190565b60008160001904831182151516156128e0576128e0612943565b500290565b60005b838110156129005781810151838201526020016128e8565b838111156112375750506000910152565b60008161292057612920612943565b506000190190565b600060001982141561293c5761293c612943565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220caf2f972ab1e1c5a5902714ff60bf06e0a924d04c83256a49cd171574fd7e8f564736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061016c5760003560e01c8063672ee42e116100cd578063c850933211610081578063d547741f11610066578063d547741f146103da578063da742228146103ed578063f23a6e61146104005761016c565b8063c8509332146103ac578063ce1b815f146103bf5761016c565b806391d14854116100b257806391d1485414610332578063a217fddf14610369578063bc197c81146103715761016c565b8063672ee42e146102ff5780636aea75f11461031f5761016c565b80632f2ff15d116101245780634b808c46116101095780634b808c461461029c578063572b6c05146102d55780635c975abb146102f75761016c565b80632f2ff15d1461027657806336568abe146102895761016c565b8063150b7a0211610155578063150b7a02146101c7578063248a9ca31461023057806325839ca7146102615761016c565b806301ffc9a7146101715780630f2d940b14610199575b600080fd5b61018461017f36600461239d565b610439565b60405190151581526020015b60405180910390f35b6101846101a7366004612203565b600260209081526000928352604080842090915290825290205460ff1681565b6101ff6101d53660046120e6565b7f150b7a020000000000000000000000000000000000000000000000000000000095945050505050565b6040517fffffffff000000000000000000000000000000000000000000000000000000009091168152602001610190565b61025361023e3660046122cc565b60009081526020819052604090206001015490565b604051908152602001610190565b61027461026f36600461230f565b6104d4565b005b6102746102843660046122e4565b6107e8565b6102746102973660046122e4565b61081a565b6101ff6102aa366004612058565b7f4b808c46000000000000000000000000000000000000000000000000000000009695505050505050565b6101846102e3366004611f87565b6001546001600160a01b0390811691161490565b6101846108b6565b61031261030d3660046121b7565b6108d8565b60405161019091906126f9565b61027461032d36600461237c565b6109e6565b6101846103403660046122e4565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b610253600081565b6101ff61037f366004611fa1565b7fbc197c810000000000000000000000000000000000000000000000000000000098975050505050505050565b6102746103ba36600461222c565b610a99565b6001546040516001600160a01b039091168152602001610190565b6102746103e83660046122e4565b610bda565b6102746103fb366004611f87565b610c02565b6101ff61040e366004612153565b7ff23a6e61000000000000000000000000000000000000000000000000000000009695505050505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b0000000000000000000000000000000000000000000000000000000014806104cc57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b90505b919050565b6104dc6108b6565b1561052e5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064015b60405180910390fd5b60008481526003602052604090205483516001600160a01b03166105ba5760405162461bcd60e51b815260206004820152602560248201527f4d554c544947495645415741595f494e56414c49445f544f5f5a45524f5f414460448201527f44524553530000000000000000000000000000000000000000000000000000006064820152608401610525565b83516001600160a01b031630141561063a5760405162461bcd60e51b815260206004820152603060248201527f4d554c544947495645415741595f44455354494e4154494f4e5f4d554c54494760448201527f495645415741595f434f4e5452414354000000000000000000000000000000006064820152608401610525565b806106875760405162461bcd60e51b815260206004820152601c60248201527f4d554c544947495645415741595f444f45535f4e4f545f4558495354000000006044820152606401610525565b8042106106fc5760405162461bcd60e51b815260206004820152602260248201527f4d554c544947495645415741595f434c41494d5f504552494f445f49535f4f5660448201527f45520000000000000000000000000000000000000000000000000000000000006064820152608401610525565b600061070785610cc7565b85516001600160a01b0316600090815260026020908152604080832084845290915290205490915060ff16156107a55760405162461bcd60e51b815260206004820152602960248201527f4d554c544947495645415741595f44455354494e4154494f4e5f414c5245414460448201527f595f434c41494d454400000000000000000000000000000000000000000000006064820152608401610525565b84516001600160a01b031660009081526002602090815260408083208484529091529020805460ff191660011790556107e086868686610cf7565b505050505050565b60008281526020819052604090206001015461080b8161080661100a565b611019565b6108158383611097565b505050565b61082261100a565b6001600160a01b0316816001600160a01b0316146108a85760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610525565b6108b28282611136565b5050565b60015474010000000000000000000000000000000000000000900460ff165b90565b60606000825167ffffffffffffffff81111561090457634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561092d578160200160208202803683370190505b50905060005b83518110156109de57600061096e85838151811061096157634e487b7160e01b600052603260045260246000fd5b6020026020010151610cc7565b6001600160a01b0387166000908152600260209081526040808320848452909152902054845191925060ff16908490849081106109bb57634e487b7160e01b600052603260045260246000fd5b9115156020928302919091019091015250806109d681612928565b915050610933565b509392505050565b60006109f48161080661100a565b6109fc6108b6565b15610a495760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610525565b60008381526003602090815260409182902084905581518581529081018490527fcf995c8d29c258a6c2056e0d5ddfa67f3634d25f5eed5dcf65ead06195b1a271910160405180910390a1505050565b82518414610ae95760405162461bcd60e51b815260206004820152601b60248201527f4d554c544947495645415741595f494e56414c49445f494e50555400000000006044820152606401610525565b82518114610b395760405162461bcd60e51b815260206004820152601b60248201527f4d554c544947495645415741595f494e56414c49445f494e50555400000000006044820152606401610525565b60005b848110156107e057610bc8868683818110610b6757634e487b7160e01b600052603260045260246000fd5b90506020020135858381518110610b8e57634e487b7160e01b600052603260045260246000fd5b6020026020010151858585818110610bb657634e487b7160e01b600052603260045260246000fd5b905060200281019061026f91906127f4565b80610bd281612928565b915050610b3c565b600082815260208190526040902060010154610bf88161080661100a565b6108158383611136565b6000610c108161080661100a565b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0384169081179091556040519081527fffd948da7ce0ac541cf3790b301b0df6af19e474ed095744d1460a7ea6b7d1539060200160405180910390a15050565b6001546000906001600160a01b0316331415610cc057507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c6108d5565b50336108d5565b600081604051602001610cda9190612772565b604051602081830303815290604052805190602001209050919050565b610d3584848484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506111d392505050565b60005b836020015151811015610ea35783602001518181518110610d6957634e487b7160e01b600052603260045260246000fd5b6020026020010151602001515184602001518281518110610d9a57634e487b7160e01b600052603260045260246000fd5b6020026020010151600001515114610df45760405162461bcd60e51b815260206004820152601360248201527f434c41494d5f494e56414c49445f494e505554000000000000000000000000006044820152606401610525565b610e91846000015185602001518381518110610e2057634e487b7160e01b600052603260045260246000fd5b60200260200101516000015186602001518481518110610e5057634e487b7160e01b600052603260045260246000fd5b60200260200101516020015187602001518581518110610e8057634e487b7160e01b600052603260045260246000fd5b60200260200101516040015161123d565b80610e9b81612928565b915050610d38565b5060005b836040015151811015610f3357610f21846000015185604001518381518110610ee057634e487b7160e01b600052603260045260246000fd5b60200260200101516000015186604001518481518110610f1057634e487b7160e01b600052603260045260246000fd5b602002602001015160200151611322565b80610f2b81612928565b915050610ea7565b506060830151515115610fb557606083015160208101515190515114610f9b5760405162461bcd60e51b815260206004820152601360248201527f434c41494d5f494e56414c49445f494e505554000000000000000000000000006044820152606401610525565b825160608401518051602090910151610fb5929190611404565b7fccb3b0181cc8d8090505df7a2b9d7e4c07de5f4e24c836176be4834d6f15feb4836000015184602001518560400151866060015188604051610ffc95949392919061269e565b60405180910390a150505050565b6000611014610c7d565b905090565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166108b257611055816001600160a01b03166014611501565b611060836020611501565b604051602001611071929190612581565b60408051601f198184030181529082905262461bcd60e51b82526105259160040161273f565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166108b2576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556110f261100a565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16156108b2576000828152602081815260408083206001600160a01b03851684529091529020805460ff1916905561118f61100a565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60006111de83610cc7565b90506111eb828583611777565b6112375760405162461bcd60e51b815260206004820152600d60248201527f434c41494d5f494e56414c4944000000000000000000000000000000000000006044820152606401610525565b50505050565b6001600160a01b03811661129f5760405162461bcd60e51b815260206004820152602360248201527f434c41494d5f494e56414c49445f434f4e54524143545f5a45524f5f4144445260448201526245535360e81b6064820152608401610525565b6040517f2eb2c2d60000000000000000000000000000000000000000000000000000000081526001600160a01b03821690632eb2c2d6906112ea903090889088908890600401612602565b600060405180830381600087803b15801561130457600080fd5b505af1158015611318573d6000803e3d6000fd5b5050505050505050565b6001600160a01b0381166113845760405162461bcd60e51b815260206004820152602360248201527f434c41494d5f494e56414c49445f434f4e54524143545f5a45524f5f4144445260448201526245535360e81b6064820152608401610525565b6040517f28cfbd460000000000000000000000000000000000000000000000000000000081526001600160a01b038216906328cfbd46906113cd9030908790879060040161265a565b600060405180830381600087803b1580156113e757600080fd5b505af11580156113fb573d6000803e3d6000fd5b50505050505050565b60005b825181101561123757600082828151811061143257634e487b7160e01b600052603260045260246000fd5b60200260200101519050600084838151811061145e57634e487b7160e01b600052603260045260246000fd5b6020026020010151905060006001600160a01b0316826001600160a01b031614156114d75760405162461bcd60e51b815260206004820152602360248201527f434c41494d5f494e56414c49445f434f4e54524143545f5a45524f5f4144445260448201526245535360e81b6064820152608401610525565b6114ec6001600160a01b03831630888461178d565b505080806114f990612928565b915050611407565b606060006115108360026128c6565b61151b9060026128ae565b67ffffffffffffffff81111561154157634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561156b576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106115b057634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061162157634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600061165d8460026128c6565b6116689060016128ae565b90505b6001811115611721577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106116b757634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106116db57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361171a81612911565b905061166b565b5083156117705760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610525565b9392505050565b6000826117848584611815565b14949350505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790526112379085906118c7565b600081815b84518110156109de57600085828151811061184557634e487b7160e01b600052603260045260246000fd5b602002602001015190508083116118875760408051602081018590529081018290526060016040516020818303038152906040528051906020012092506118b4565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b50806118bf81612928565b91505061181a565b600061191c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166119ac9092919063ffffffff16565b805190915015610815578080602001905181019061193a91906122ac565b6108155760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610525565b60606119bb84846000856119c3565b949350505050565b606082471015611a3b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610525565b843b611a895760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610525565b600080866001600160a01b03168587604051611aa59190612565565b60006040518083038185875af1925050503d8060008114611ae2576040519150601f19603f3d011682016040523d82523d6000602084013e611ae7565b606091505b5091509150611af7828286611b02565b979650505050505050565b60608315611b11575081611770565b825115611b215782518084602001fd5b8160405162461bcd60e51b8152600401610525919061273f565b80356001600160a01b03811681146104cf57600080fd5b60008083601f840112611b63578182fd5b50813567ffffffffffffffff811115611b7a578182fd5b6020830191508360208083028501011115611b9457600080fd5b9250929050565b600082601f830112611bab578081fd5b81356020611bc0611bbb8361288a565b612859565b82815281810190858301855b85811015611bf557611be3898684358b0101611e06565b84529284019290840190600101611bcc565b5090979650505050505050565b600082601f830112611c12578081fd5b81356020611c22611bbb8361288a565b82815281810190858301855b85811015611bf55781358801606080601f19838d03011215611c4e578889fd5b611c5781612859565b8783013567ffffffffffffffff80821115611c70578b8cfd5b611c7e8e8b84880101611d6c565b8352604091508185013581811115611c94578c8dfd5b611ca28f8c83890101611d6c565b8b8501525050611cb3838501611b3b565b90820152865250509284019290840190600101611c2e565b600082601f830112611cdb578081fd5b81356020611ceb611bbb8361288a565b82815281810190858301855b85811015611bf55781358801604080601f19838d03011215611d17578889fd5b611d2081612859565b8783013567ffffffffffffffff811115611d38578a8bfd5b611d468d8a83870101611d6c565b825250611d54828401611b3b565b81890152865250509284019290840190600101611cf7565b600082601f830112611d7c578081fd5b81356020611d8c611bbb8361288a565b8281528181019085830183850287018401881015611da8578586fd5b855b85811015611bf557813584529284019290840190600101611daa565b60008083601f840112611dd7578182fd5b50813567ffffffffffffffff811115611dee578182fd5b602083019150836020828501011115611b9457600080fd5b600060a08284031215611e17578081fd5b611e2160a0612859565b9050611e2c82611b3b565b8152602082013567ffffffffffffffff80821115611e4957600080fd5b611e5585838601611c02565b60208401526040840135915080821115611e6e57600080fd5b611e7a85838601611ccb565b60408401526060840135915080821115611e9357600080fd5b50611ea084828501611eb6565b6060830152506080820135608082015292915050565b600060408284031215611ec7578081fd5b611ed16040612859565b9050813567ffffffffffffffff80821115611eeb57600080fd5b611ef785838601611d6c565b8352602091508184013581811115611f0e57600080fd5b84019050601f81018513611f2157600080fd5b8035611f2f611bbb8261288a565b8181528381019083850185840285018601891015611f4c57600080fd5b600094505b83851015611f7657611f6281611b3b565b835260019490940193918501918501611f51565b508085870152505050505092915050565b600060208284031215611f98578081fd5b61177082611b3b565b60008060008060008060008060a0898b031215611fbc578384fd5b611fc589611b3b565b9750611fd360208a01611b3b565b9650604089013567ffffffffffffffff80821115611fef578586fd5b611ffb8c838d01611b52565b909850965060608b0135915080821115612013578586fd5b61201f8c838d01611b52565b909650945060808b0135915080821115612037578384fd5b506120448b828c01611dc6565b999c989b5096995094979396929594505050565b60008060008060008060808789031215612070578384fd5b61207987611b3b565b955061208760208801611b3b565b9450604087013567ffffffffffffffff808211156120a3578586fd5b6120af8a838b01611b52565b909650945060608901359150808211156120c7578384fd5b506120d489828a01611dc6565b979a9699509497509295939492505050565b6000806000806000608086880312156120fd578283fd5b61210686611b3b565b945061211460208701611b3b565b935060408601359250606086013567ffffffffffffffff811115612136578182fd5b61214288828901611dc6565b969995985093965092949392505050565b60008060008060008060a0878903121561216b578384fd5b61217487611b3b565b955061218260208801611b3b565b94506040870135935060608701359250608087013567ffffffffffffffff8111156121ab578283fd5b6120d489828a01611dc6565b600080604083850312156121c9578182fd5b6121d283611b3b565b9150602083013567ffffffffffffffff8111156121ed578182fd5b6121f985828601611b9b565b9150509250929050565b60008060408385031215612215578182fd5b61221e83611b3b565b946020939093013593505050565b600080600080600060608688031215612243578283fd5b853567ffffffffffffffff8082111561225a578485fd5b61226689838a01611b52565b9097509550602088013591508082111561227e578485fd5b61228a89838a01611b9b565b9450604088013591508082111561229f578283fd5b5061214288828901611b52565b6000602082840312156122bd578081fd5b81518015158114611770578182fd5b6000602082840312156122dd578081fd5b5035919050565b600080604083850312156122f6578182fd5b8235915061230660208401611b3b565b90509250929050565b60008060008060608587031215612324578182fd5b84359350602085013567ffffffffffffffff80821115612342578384fd5b61234e88838901611e06565b94506040870135915080821115612363578384fd5b5061237087828801611b52565b95989497509550505050565b6000806040838503121561238e578182fd5b50508035926020909101359150565b6000602082840312156123ae578081fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114611770578182fd5b60008282518085526020808601955080818302840101818601855b84811015611bf557601f1986840301895281516060815181865261241e828701826124c2565b915050858201518582038787015261243682826124c2565b6040938401516001600160a01b0316969093019590955250988401989250908301906001016123f8565b6000815180845260208085019450848183028601828601855b85811015611bf557838303895281516040815181865261249b828701826124c2565b928801516001600160a01b0316958801959095525098850198925090840190600101612479565b6000815180845260208085019450808401835b838110156124f1578151875295820195908201906001016124d5565b509495945050505050565b600081516040845261251160408501826124c2565b602084810151868303878301528051808452908201935090918491908301905b8083101561255a5784516001600160a01b03168252938301936001929092019190830190612531565b509695505050505050565b600082516125778184602087016128e5565b9190910192915050565b60007f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000825283516125b98160178501602088016128e5565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516125f68160288401602088016128e5565b01602801949350505050565b60006001600160a01b03808716835280861660208401525060a0604083015261262e60a08301856124c2565b828103606084015261264081856124c2565b838103608090940193909352508152602001949350505050565b60006001600160a01b0380861683528085166020840152506080604083015261268660808301846124c2565b82810360609093019290925281526020019392505050565b60006001600160a01b038716825260a060208301526126c060a08301876123dd565b82810360408401526126d28187612460565b905082810360608401526126e681866124fc565b9150508260808301529695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015612733578351151583529284019291840191600101612715565b50909695505050505050565b600060208252825180602084015261275e8160408501602087016128e5565b601f01601f19169190910160400192915050565b6000602082526001600160a01b038351166020830152602083015160a060408401526127a160c08401826123dd565b90506040840151601f19808584030160608601526127bf8383612460565b92506060860151915080858403016080860152506127dd82826124fc565b915050608084015160a08401528091505092915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112612828578283fd5b83018035915067ffffffffffffffff821115612842578283fd5b6020908101925081023603821315611b9457600080fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561288257612882612959565b604052919050565b600067ffffffffffffffff8211156128a4576128a4612959565b5060209081020190565b600082198211156128c1576128c1612943565b500190565b60008160001904831182151516156128e0576128e0612943565b500290565b60005b838110156129005781810151838201526020016128e8565b838111156112375750506000910152565b60008161292057612920612943565b506000190190565b600060001982141561293c5761293c612943565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220caf2f972ab1e1c5a5902714ff60bf06e0a924d04c83256a49cd171574fd7e8f564736f6c63430008020033",
  "devdoc": {
    "details": "The contract implements ERC2771 to ensure that users do not pay gas",
    "kind": "dev",
    "methods": {
      "addNewGiveaway(bytes32,uint256)": {
        "params": {
          "expiryTime": "The expiry time for the giveaway.",
          "merkleRoot": "The merkle root hash of the claim data."
        }
      },
      "claimMultipleTokens(bytes32,(address,(uint256[],uint256[],address)[],(uint256[],address)[],(uint256[],address[]),bytes32),bytes32[])": {
        "details": "Public function used to perform validity checks and progress to claim multiple token types in one claim.",
        "params": {
          "claim": "The claim struct containing the destination address, all items to be claimed and optional salt param.",
          "merkleRoot": "The merkle root hash for the specific set of items being claimed.",
          "proof": "The proof provided by the user performing the claim function."
        }
      },
      "claimMultipleTokensFromMultipleMerkleTree(bytes32[],(address,(uint256[],uint256[],address)[],(uint256[],address)[],(uint256[],address[]),bytes32)[],bytes32[][])": {
        "params": {
          "claims": "The array of claim structs, each containing a destination address, the giveaway items to be claimed and an optional salt param.",
          "proofs": "The proofs submitted for verification."
        }
      },
      "getClaimedStatus(address,(address,(uint256[],uint256[],address)[],(uint256[],address)[],(uint256[],address[]),bytes32)[])": {
        "params": {
          "claims": "The claim struct containing the destination address, all items to be claimed and optional salt param.",
          "user": "The user (intended token destination) address."
        },
        "returns": {
          "_0": "claimedGiveaways The array of bools confirming whether or not the giveaways relating to the root hashes provided have been claimed."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setTrustedForwarder(address)": {
        "params": {
          "trustedForwarder": "address of the contract that is enabled to send meta-tx on behalf of the user"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "title": "A Multi Claim contract that enables claims of user rewards in the form of ERC1155, ERC721 and / or ERC20 tokens",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addNewGiveaway(bytes32,uint256)": {
        "notice": "Function to add a new giveaway."
      },
      "claimMultipleTokensFromMultipleMerkleTree(bytes32[],(address,(uint256[],uint256[],address)[],(uint256[],address)[],(uint256[],address[]),bytes32)[],bytes32[][])": {
        "notice": "Function to permit the claiming of multiple tokens from multiple giveaways to a reserved address."
      },
      "getClaimedStatus(address,(address,(uint256[],uint256[],address)[],(uint256[],address)[],(uint256[],address[]),bytes32)[])": {
        "notice": "Function to check which giveaways have been claimed by a particular user."
      },
      "setTrustedForwarder(address)": {
        "notice": "set the trusted forwarder"
      }
    },
    "notice": "This contract manages claims for multiple token types",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "src/solc_0.8/claims/MultiGiveaway/MultiGiveaway.sol:MultiGiveaway",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 24149,
        "contract": "src/solc_0.8/claims/MultiGiveaway/MultiGiveaway.sol:MultiGiveaway",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 504,
        "contract": "src/solc_0.8/claims/MultiGiveaway/MultiGiveaway.sol:MultiGiveaway",
        "label": "_paused",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 22415,
        "contract": "src/solc_0.8/claims/MultiGiveaway/MultiGiveaway.sol:MultiGiveaway",
        "label": "claimed",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_bool))"
      },
      {
        "astId": 22419,
        "contract": "src/solc_0.8/claims/MultiGiveaway/MultiGiveaway.sol:MultiGiveaway",
        "label": "_expiryTime",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_bool)"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "src/solc_0.8/claims/MultiGiveaway/MultiGiveaway.sol:MultiGiveaway",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "src/solc_0.8/claims/MultiGiveaway/MultiGiveaway.sol:MultiGiveaway",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}